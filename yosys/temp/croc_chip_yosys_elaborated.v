/* Generated by Yosys 0.53+101 (git sha1 0b19f628e, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output idx_o;
  wire idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:3092:Mux$558 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$559 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$560 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$561 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$562 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$563 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$564 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$117 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$116 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$115 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[0]$22 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[1]$45 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[2]$68 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[3]$91 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[4]$114 ;
  wire \$procmux$13899_Y ;
  wire \$procmux$13900_CMP ;
  wire \$procmux$13905_Y ;
  wire \$procmux$13906_CMP ;
  wire [2:0] \$procmux$13911_Y ;
  wire \$procmux$13912_CMP ;
  wire \$procmux$13917_Y ;
  wire \$procmux$13918_CMP ;
  wire \$procmux$13923_Y ;
  wire \$procmux$13924_CMP ;
  wire \$procmux$13928_Y ;
  wire \$procmux$13929_CMP ;
  wire [2:0] \$procmux$13933_Y ;
  wire \$procmux$13934_CMP ;
  wire \$procmux$13938_Y ;
  wire \$procmux$13939_CMP ;
  wire \$procmux$13943_Y ;
  wire \$procmux$13944_CMP ;
  wire \$procmux$13947_Y ;
  wire \$procmux$13948_CMP ;
  wire [2:0] \$procmux$13951_Y ;
  wire \$procmux$13952_CMP ;
  wire \$procmux$13955_Y ;
  wire \$procmux$13956_CMP ;
  wire \$procmux$13959_Y ;
  wire \$procmux$13960_CMP ;
  wire \$procmux$13962_Y ;
  wire \$procmux$13963_CMP ;
  wire [2:0] \$procmux$13965_Y ;
  wire \$procmux$13966_CMP ;
  wire \$procmux$13968_Y ;
  wire \$procmux$13969_CMP ;
  wire \$procmux$13971_Y ;
  wire \$procmux$13972_CMP ;
  wire \$procmux$13973_Y ;
  wire \$procmux$13974_CMP ;
  wire [2:0] \$procmux$13975_Y ;
  wire \$procmux$13976_CMP ;
  wire \$procmux$13977_Y ;
  wire \$procmux$13978_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [4:0] matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$558 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(addr_map_i[415:384]),
    .Y(\$102 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\$100 ),
    .B(\$102 ),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$98 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(config_ongoing_i),
    .Y(\$110 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(config_ongoing_i),
    .Y(\$112 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$113  (
    .A(addr_map_i[450:448]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$564 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$559 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$560 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$29 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(config_ongoing_i),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(config_ongoing_i),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$561 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(config_ongoing_i),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(config_ongoing_i),
    .Y(\$66 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$562 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$75 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(config_ongoing_i),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(config_ongoing_i),
    .Y(\$89 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$563 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(addr_i),
    .B(addr_map_i[447:416]),
    .Y(\$96 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(addr_i),
    .B(addr_map_i[415:384]),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13899  (
    .A(\$dec_error_o$94 ),
    .B(1'h0),
    .S(\$procmux$13900_CMP ),
    .Y(\$procmux$13899_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13905  (
    .A(\$dec_valid_o$93 ),
    .B(\$112 ),
    .S(\$procmux$13906_CMP ),
    .Y(\$procmux$13905_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13911  (
    .A(\$idx_o$92 ),
    .B(\$auto$rtlil.cc:3092:Mux$564 ),
    .S(\$procmux$13912_CMP ),
    .Y(\$procmux$13911_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13917  (
    .A(1'h0),
    .B(\$110 ),
    .S(\$procmux$13918_CMP ),
    .Y(\$procmux$13917_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13923  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$procmux$13924_CMP ),
    .Y(\$procmux$13923_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13928  (
    .A(\$dec_valid_o$70 ),
    .B(\$89 ),
    .S(\$procmux$13929_CMP ),
    .Y(\$procmux$13928_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13933  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$563 ),
    .S(\$procmux$13934_CMP ),
    .Y(\$procmux$13933_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13938  (
    .A(1'h0),
    .B(\$87 ),
    .S(\$procmux$13939_CMP ),
    .Y(\$procmux$13938_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13943  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$procmux$13944_CMP ),
    .Y(\$procmux$13943_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13947  (
    .A(\$dec_valid_o$47 ),
    .B(\$66 ),
    .S(\$procmux$13948_CMP ),
    .Y(\$procmux$13947_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13951  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$562 ),
    .S(\$procmux$13952_CMP ),
    .Y(\$procmux$13951_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13955  (
    .A(1'h0),
    .B(\$64 ),
    .S(\$procmux$13956_CMP ),
    .Y(\$procmux$13955_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13959  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$procmux$13960_CMP ),
    .Y(\$procmux$13959_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13962  (
    .A(\$dec_valid_o$24 ),
    .B(\$43 ),
    .S(\$procmux$13963_CMP ),
    .Y(\$procmux$13962_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13965  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$561 ),
    .S(\$procmux$13966_CMP ),
    .Y(\$procmux$13965_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13968  (
    .A(1'h0),
    .B(\$41 ),
    .S(\$procmux$13969_CMP ),
    .Y(\$procmux$13968_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13971  (
    .A(\$auto$rtlil.cc:3092:Mux$558 ),
    .B(1'h0),
    .S(\$procmux$13972_CMP ),
    .Y(\$procmux$13971_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13973  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$13974_CMP ),
    .Y(\$procmux$13973_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13975  (
    .A(\$auto$rtlil.cc:3092:Mux$559 ),
    .B(\$auto$rtlil.cc:3092:Mux$560 ),
    .S(\$procmux$13976_CMP ),
    .Y(\$procmux$13975_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13977  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$13978_CMP ),
    .Y(\$procmux$13977_Y )
  );
  assign matched_rules = { \$matched_rules[4]$114 , \$matched_rules[3]$91 , \$matched_rules[2]$68 , \$matched_rules[1]$45 , \$matched_rules[0]$22  };
  assign idx_o = \$idx_o$115 ;
  assign dec_valid_o = \$dec_valid_o$116 ;
  assign dec_error_o = \$dec_error_o$117 ;
  assign \$procmux$13900_CMP  = \$108 ;
  assign \$dec_error_o$117  = \$procmux$13899_Y ;
  assign \$procmux$13906_CMP  = \$108 ;
  assign \$dec_valid_o$116  = \$procmux$13905_Y ;
  assign \$procmux$13912_CMP  = \$108 ;
  assign \$idx_o$115  = \$procmux$13911_Y ;
  assign \$procmux$13918_CMP  = \$108 ;
  assign \$matched_rules[4]$114  = \$procmux$13917_Y ;
  assign \$procmux$13924_CMP  = \$85 ;
  assign \$dec_error_o$94  = \$procmux$13923_Y ;
  assign \$procmux$13929_CMP  = \$85 ;
  assign \$dec_valid_o$93  = \$procmux$13928_Y ;
  assign \$procmux$13934_CMP  = \$85 ;
  assign \$idx_o$92  = \$procmux$13933_Y ;
  assign \$procmux$13939_CMP  = \$85 ;
  assign \$matched_rules[3]$91  = \$procmux$13938_Y ;
  assign \$procmux$13944_CMP  = \$62 ;
  assign \$dec_error_o$71  = \$procmux$13943_Y ;
  assign \$procmux$13948_CMP  = \$62 ;
  assign \$dec_valid_o$70  = \$procmux$13947_Y ;
  assign \$procmux$13952_CMP  = \$62 ;
  assign \$idx_o$69  = \$procmux$13951_Y ;
  assign \$procmux$13956_CMP  = \$62 ;
  assign \$matched_rules[2]$68  = \$procmux$13955_Y ;
  assign \$procmux$13960_CMP  = \$39 ;
  assign \$dec_error_o$48  = \$procmux$13959_Y ;
  assign \$procmux$13963_CMP  = \$39 ;
  assign \$dec_valid_o$47  = \$procmux$13962_Y ;
  assign \$procmux$13966_CMP  = \$39 ;
  assign \$idx_o$46  = \$procmux$13965_Y ;
  assign \$procmux$13969_CMP  = \$39 ;
  assign \$matched_rules[1]$45  = \$procmux$13968_Y ;
  assign \$procmux$13972_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$13971_Y ;
  assign \$procmux$13974_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$13973_Y ;
  assign \$procmux$13976_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$13975_Y ;
  assign \$procmux$13978_CMP  = \$16 ;
  assign \$matched_rules[0]$22  = \$procmux$13977_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
  assign \$29  = \$27 ;
  assign \$52  = \$50 ;
  assign \$62  = \$60 ;
  assign \$75  = \$73 ;
  assign \$98  = \$96 ;
  assign \$108  = \$106 ;
  assign \$39  = \$37 ;
  assign \$85  = \$83 ;
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$auto$rtlil.cc:3092:Mux$1295 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1296 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1297 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1298 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1299 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1300 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[0]$22 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[1]$45 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[2]$68 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[3]$91 ;
  wire \$procmux$8424_Y ;
  wire \$procmux$8425_CMP ;
  wire \$procmux$8429_Y ;
  wire \$procmux$8430_CMP ;
  wire [2:0] \$procmux$8434_Y ;
  wire \$procmux$8435_CMP ;
  wire \$procmux$8439_Y ;
  wire \$procmux$8440_CMP ;
  wire \$procmux$8444_Y ;
  wire \$procmux$8445_CMP ;
  wire \$procmux$8448_Y ;
  wire \$procmux$8449_CMP ;
  wire [2:0] \$procmux$8452_Y ;
  wire \$procmux$8453_CMP ;
  wire \$procmux$8456_Y ;
  wire \$procmux$8457_CMP ;
  wire \$procmux$8460_Y ;
  wire \$procmux$8461_CMP ;
  wire \$procmux$8463_Y ;
  wire \$procmux$8464_CMP ;
  wire [2:0] \$procmux$8466_Y ;
  wire \$procmux$8467_CMP ;
  wire \$procmux$8469_Y ;
  wire \$procmux$8470_CMP ;
  wire \$procmux$8472_Y ;
  wire \$procmux$8473_CMP ;
  wire \$procmux$8474_Y ;
  wire \$procmux$8475_CMP ;
  wire [2:0] \$procmux$8476_Y ;
  wire \$procmux$8477_CMP ;
  wire \$procmux$8478_Y ;
  wire \$procmux$8479_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [3:0] matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1295 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1296 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1297 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$29 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(config_ongoing_i),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(config_ongoing_i),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1298 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(config_ongoing_i),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(config_ongoing_i),
    .Y(\$66 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1299 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$75 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(config_ongoing_i),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(config_ongoing_i),
    .Y(\$89 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1300 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8424  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$procmux$8425_CMP ),
    .Y(\$procmux$8424_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8429  (
    .A(\$dec_valid_o$70 ),
    .B(\$89 ),
    .S(\$procmux$8430_CMP ),
    .Y(\$procmux$8429_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8434  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1300 ),
    .S(\$procmux$8435_CMP ),
    .Y(\$procmux$8434_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8439  (
    .A(1'h0),
    .B(\$87 ),
    .S(\$procmux$8440_CMP ),
    .Y(\$procmux$8439_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8444  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$procmux$8445_CMP ),
    .Y(\$procmux$8444_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8448  (
    .A(\$dec_valid_o$47 ),
    .B(\$66 ),
    .S(\$procmux$8449_CMP ),
    .Y(\$procmux$8448_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8452  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1299 ),
    .S(\$procmux$8453_CMP ),
    .Y(\$procmux$8452_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8456  (
    .A(1'h0),
    .B(\$64 ),
    .S(\$procmux$8457_CMP ),
    .Y(\$procmux$8456_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8460  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$procmux$8461_CMP ),
    .Y(\$procmux$8460_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8463  (
    .A(\$dec_valid_o$24 ),
    .B(\$43 ),
    .S(\$procmux$8464_CMP ),
    .Y(\$procmux$8463_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8466  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1298 ),
    .S(\$procmux$8467_CMP ),
    .Y(\$procmux$8466_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8469  (
    .A(1'h0),
    .B(\$41 ),
    .S(\$procmux$8470_CMP ),
    .Y(\$procmux$8469_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8472  (
    .A(\$auto$rtlil.cc:3092:Mux$1295 ),
    .B(1'h0),
    .S(\$procmux$8473_CMP ),
    .Y(\$procmux$8472_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8474  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$8475_CMP ),
    .Y(\$procmux$8474_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8476  (
    .A(\$auto$rtlil.cc:3092:Mux$1296 ),
    .B(\$auto$rtlil.cc:3092:Mux$1297 ),
    .S(\$procmux$8477_CMP ),
    .Y(\$procmux$8476_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8478  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$8479_CMP ),
    .Y(\$procmux$8478_Y )
  );
  assign matched_rules = { \$matched_rules[3]$91 , \$matched_rules[2]$68 , \$matched_rules[1]$45 , \$matched_rules[0]$22  };
  assign idx_o = \$idx_o$92 ;
  assign dec_valid_o = \$dec_valid_o$93 ;
  assign dec_error_o = \$dec_error_o$94 ;
  assign \$procmux$8425_CMP  = \$85 ;
  assign \$dec_error_o$94  = \$procmux$8424_Y ;
  assign \$procmux$8430_CMP  = \$85 ;
  assign \$dec_valid_o$93  = \$procmux$8429_Y ;
  assign \$procmux$8435_CMP  = \$85 ;
  assign \$idx_o$92  = \$procmux$8434_Y ;
  assign \$procmux$8440_CMP  = \$85 ;
  assign \$matched_rules[3]$91  = \$procmux$8439_Y ;
  assign \$procmux$8445_CMP  = \$62 ;
  assign \$dec_error_o$71  = \$procmux$8444_Y ;
  assign \$procmux$8449_CMP  = \$62 ;
  assign \$dec_valid_o$70  = \$procmux$8448_Y ;
  assign \$procmux$8453_CMP  = \$62 ;
  assign \$idx_o$69  = \$procmux$8452_Y ;
  assign \$procmux$8457_CMP  = \$62 ;
  assign \$matched_rules[2]$68  = \$procmux$8456_Y ;
  assign \$procmux$8461_CMP  = \$39 ;
  assign \$dec_error_o$48  = \$procmux$8460_Y ;
  assign \$procmux$8464_CMP  = \$39 ;
  assign \$dec_valid_o$47  = \$procmux$8463_Y ;
  assign \$procmux$8467_CMP  = \$39 ;
  assign \$idx_o$46  = \$procmux$8466_Y ;
  assign \$procmux$8470_CMP  = \$39 ;
  assign \$matched_rules[1]$45  = \$procmux$8469_Y ;
  assign \$procmux$8473_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$8472_Y ;
  assign \$procmux$8475_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$8474_Y ;
  assign \$procmux$8477_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$8476_Y ;
  assign \$procmux$8479_CMP  = \$16 ;
  assign \$matched_rules[0]$22  = \$procmux$8478_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
  assign \$29  = \$27 ;
  assign \$52  = \$50 ;
  assign \$62  = \$60 ;
  assign \$75  = \$73 ;
  assign \$39  = \$37 ;
  assign \$85  = \$83 ;
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$auto$rtlil.cc:3092:Mux$1303 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1304 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1305 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1306 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1307 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1308 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[0]$22 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[1]$45 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[2]$68 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[3]$91 ;
  wire \$procmux$8337_Y ;
  wire \$procmux$8338_CMP ;
  wire \$procmux$8342_Y ;
  wire \$procmux$8343_CMP ;
  wire [2:0] \$procmux$8347_Y ;
  wire \$procmux$8348_CMP ;
  wire \$procmux$8352_Y ;
  wire \$procmux$8353_CMP ;
  wire \$procmux$8357_Y ;
  wire \$procmux$8358_CMP ;
  wire \$procmux$8361_Y ;
  wire \$procmux$8362_CMP ;
  wire [2:0] \$procmux$8365_Y ;
  wire \$procmux$8366_CMP ;
  wire \$procmux$8369_Y ;
  wire \$procmux$8370_CMP ;
  wire \$procmux$8373_Y ;
  wire \$procmux$8374_CMP ;
  wire \$procmux$8376_Y ;
  wire \$procmux$8377_CMP ;
  wire [2:0] \$procmux$8379_Y ;
  wire \$procmux$8380_CMP ;
  wire \$procmux$8382_Y ;
  wire \$procmux$8383_CMP ;
  wire \$procmux$8385_Y ;
  wire \$procmux$8386_CMP ;
  wire \$procmux$8387_Y ;
  wire \$procmux$8388_CMP ;
  wire [2:0] \$procmux$8389_Y ;
  wire \$procmux$8390_CMP ;
  wire \$procmux$8391_Y ;
  wire \$procmux$8392_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [3:0] matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1303 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1304 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1305 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$29 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(config_ongoing_i),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(config_ongoing_i),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1306 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(config_ongoing_i),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(config_ongoing_i),
    .Y(\$66 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1307 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$75 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(config_ongoing_i),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(config_ongoing_i),
    .Y(\$89 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1308 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8337  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$procmux$8338_CMP ),
    .Y(\$procmux$8337_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8342  (
    .A(\$dec_valid_o$70 ),
    .B(\$89 ),
    .S(\$procmux$8343_CMP ),
    .Y(\$procmux$8342_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8347  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1308 ),
    .S(\$procmux$8348_CMP ),
    .Y(\$procmux$8347_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8352  (
    .A(1'h0),
    .B(\$87 ),
    .S(\$procmux$8353_CMP ),
    .Y(\$procmux$8352_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8357  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$procmux$8358_CMP ),
    .Y(\$procmux$8357_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8361  (
    .A(\$dec_valid_o$47 ),
    .B(\$66 ),
    .S(\$procmux$8362_CMP ),
    .Y(\$procmux$8361_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8365  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1307 ),
    .S(\$procmux$8366_CMP ),
    .Y(\$procmux$8365_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8369  (
    .A(1'h0),
    .B(\$64 ),
    .S(\$procmux$8370_CMP ),
    .Y(\$procmux$8369_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8373  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$procmux$8374_CMP ),
    .Y(\$procmux$8373_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8376  (
    .A(\$dec_valid_o$24 ),
    .B(\$43 ),
    .S(\$procmux$8377_CMP ),
    .Y(\$procmux$8376_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8379  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1306 ),
    .S(\$procmux$8380_CMP ),
    .Y(\$procmux$8379_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8382  (
    .A(1'h0),
    .B(\$41 ),
    .S(\$procmux$8383_CMP ),
    .Y(\$procmux$8382_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8385  (
    .A(\$auto$rtlil.cc:3092:Mux$1303 ),
    .B(1'h0),
    .S(\$procmux$8386_CMP ),
    .Y(\$procmux$8385_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8387  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$8388_CMP ),
    .Y(\$procmux$8387_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8389  (
    .A(\$auto$rtlil.cc:3092:Mux$1304 ),
    .B(\$auto$rtlil.cc:3092:Mux$1305 ),
    .S(\$procmux$8390_CMP ),
    .Y(\$procmux$8389_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8391  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$8392_CMP ),
    .Y(\$procmux$8391_Y )
  );
  assign matched_rules = { \$matched_rules[3]$91 , \$matched_rules[2]$68 , \$matched_rules[1]$45 , \$matched_rules[0]$22  };
  assign idx_o = \$idx_o$92 ;
  assign dec_valid_o = \$dec_valid_o$93 ;
  assign dec_error_o = \$dec_error_o$94 ;
  assign \$procmux$8338_CMP  = \$85 ;
  assign \$dec_error_o$94  = \$procmux$8337_Y ;
  assign \$procmux$8343_CMP  = \$85 ;
  assign \$dec_valid_o$93  = \$procmux$8342_Y ;
  assign \$procmux$8348_CMP  = \$85 ;
  assign \$idx_o$92  = \$procmux$8347_Y ;
  assign \$procmux$8353_CMP  = \$85 ;
  assign \$matched_rules[3]$91  = \$procmux$8352_Y ;
  assign \$procmux$8358_CMP  = \$62 ;
  assign \$dec_error_o$71  = \$procmux$8357_Y ;
  assign \$procmux$8362_CMP  = \$62 ;
  assign \$dec_valid_o$70  = \$procmux$8361_Y ;
  assign \$procmux$8366_CMP  = \$62 ;
  assign \$idx_o$69  = \$procmux$8365_Y ;
  assign \$procmux$8370_CMP  = \$62 ;
  assign \$matched_rules[2]$68  = \$procmux$8369_Y ;
  assign \$procmux$8374_CMP  = \$39 ;
  assign \$dec_error_o$48  = \$procmux$8373_Y ;
  assign \$procmux$8377_CMP  = \$39 ;
  assign \$dec_valid_o$47  = \$procmux$8376_Y ;
  assign \$procmux$8380_CMP  = \$39 ;
  assign \$idx_o$46  = \$procmux$8379_Y ;
  assign \$procmux$8383_CMP  = \$39 ;
  assign \$matched_rules[1]$45  = \$procmux$8382_Y ;
  assign \$procmux$8386_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$8385_Y ;
  assign \$procmux$8388_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$8387_Y ;
  assign \$procmux$8390_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$8389_Y ;
  assign \$procmux$8392_CMP  = \$16 ;
  assign \$matched_rules[0]$22  = \$procmux$8391_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
  assign \$29  = \$27 ;
  assign \$52  = \$50 ;
  assign \$62  = \$60 ;
  assign \$75  = \$73 ;
  assign \$39  = \$37 ;
  assign \$85  = \$83 ;
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$auto$rtlil.cc:3092:Mux$1311 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1312 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1313 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1314 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1315 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1316 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[0]$22 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[1]$45 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[2]$68 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[3]$91 ;
  wire \$procmux$8250_Y ;
  wire \$procmux$8251_CMP ;
  wire \$procmux$8255_Y ;
  wire \$procmux$8256_CMP ;
  wire [2:0] \$procmux$8260_Y ;
  wire \$procmux$8261_CMP ;
  wire \$procmux$8265_Y ;
  wire \$procmux$8266_CMP ;
  wire \$procmux$8270_Y ;
  wire \$procmux$8271_CMP ;
  wire \$procmux$8274_Y ;
  wire \$procmux$8275_CMP ;
  wire [2:0] \$procmux$8278_Y ;
  wire \$procmux$8279_CMP ;
  wire \$procmux$8282_Y ;
  wire \$procmux$8283_CMP ;
  wire \$procmux$8286_Y ;
  wire \$procmux$8287_CMP ;
  wire \$procmux$8289_Y ;
  wire \$procmux$8290_CMP ;
  wire [2:0] \$procmux$8292_Y ;
  wire \$procmux$8293_CMP ;
  wire \$procmux$8295_Y ;
  wire \$procmux$8296_CMP ;
  wire \$procmux$8298_Y ;
  wire \$procmux$8299_CMP ;
  wire \$procmux$8300_Y ;
  wire \$procmux$8301_CMP ;
  wire [2:0] \$procmux$8302_Y ;
  wire \$procmux$8303_CMP ;
  wire \$procmux$8304_Y ;
  wire \$procmux$8305_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [3:0] matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1311 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1312 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1313 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$29 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(config_ongoing_i),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(config_ongoing_i),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1314 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(config_ongoing_i),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(config_ongoing_i),
    .Y(\$66 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1315 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$75 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(config_ongoing_i),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(config_ongoing_i),
    .Y(\$89 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1316 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8250  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$procmux$8251_CMP ),
    .Y(\$procmux$8250_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8255  (
    .A(\$dec_valid_o$70 ),
    .B(\$89 ),
    .S(\$procmux$8256_CMP ),
    .Y(\$procmux$8255_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8260  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1316 ),
    .S(\$procmux$8261_CMP ),
    .Y(\$procmux$8260_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8265  (
    .A(1'h0),
    .B(\$87 ),
    .S(\$procmux$8266_CMP ),
    .Y(\$procmux$8265_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8270  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$procmux$8271_CMP ),
    .Y(\$procmux$8270_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8274  (
    .A(\$dec_valid_o$47 ),
    .B(\$66 ),
    .S(\$procmux$8275_CMP ),
    .Y(\$procmux$8274_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8278  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1315 ),
    .S(\$procmux$8279_CMP ),
    .Y(\$procmux$8278_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8282  (
    .A(1'h0),
    .B(\$64 ),
    .S(\$procmux$8283_CMP ),
    .Y(\$procmux$8282_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8286  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$procmux$8287_CMP ),
    .Y(\$procmux$8286_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8289  (
    .A(\$dec_valid_o$24 ),
    .B(\$43 ),
    .S(\$procmux$8290_CMP ),
    .Y(\$procmux$8289_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8292  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1314 ),
    .S(\$procmux$8293_CMP ),
    .Y(\$procmux$8292_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8295  (
    .A(1'h0),
    .B(\$41 ),
    .S(\$procmux$8296_CMP ),
    .Y(\$procmux$8295_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8298  (
    .A(\$auto$rtlil.cc:3092:Mux$1311 ),
    .B(1'h0),
    .S(\$procmux$8299_CMP ),
    .Y(\$procmux$8298_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8300  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$8301_CMP ),
    .Y(\$procmux$8300_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8302  (
    .A(\$auto$rtlil.cc:3092:Mux$1312 ),
    .B(\$auto$rtlil.cc:3092:Mux$1313 ),
    .S(\$procmux$8303_CMP ),
    .Y(\$procmux$8302_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8304  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$8305_CMP ),
    .Y(\$procmux$8304_Y )
  );
  assign matched_rules = { \$matched_rules[3]$91 , \$matched_rules[2]$68 , \$matched_rules[1]$45 , \$matched_rules[0]$22  };
  assign idx_o = \$idx_o$92 ;
  assign dec_valid_o = \$dec_valid_o$93 ;
  assign dec_error_o = \$dec_error_o$94 ;
  assign \$procmux$8251_CMP  = \$85 ;
  assign \$dec_error_o$94  = \$procmux$8250_Y ;
  assign \$procmux$8256_CMP  = \$85 ;
  assign \$dec_valid_o$93  = \$procmux$8255_Y ;
  assign \$procmux$8261_CMP  = \$85 ;
  assign \$idx_o$92  = \$procmux$8260_Y ;
  assign \$procmux$8266_CMP  = \$85 ;
  assign \$matched_rules[3]$91  = \$procmux$8265_Y ;
  assign \$procmux$8271_CMP  = \$62 ;
  assign \$dec_error_o$71  = \$procmux$8270_Y ;
  assign \$procmux$8275_CMP  = \$62 ;
  assign \$dec_valid_o$70  = \$procmux$8274_Y ;
  assign \$procmux$8279_CMP  = \$62 ;
  assign \$idx_o$69  = \$procmux$8278_Y ;
  assign \$procmux$8283_CMP  = \$62 ;
  assign \$matched_rules[2]$68  = \$procmux$8282_Y ;
  assign \$procmux$8287_CMP  = \$39 ;
  assign \$dec_error_o$48  = \$procmux$8286_Y ;
  assign \$procmux$8290_CMP  = \$39 ;
  assign \$dec_valid_o$47  = \$procmux$8289_Y ;
  assign \$procmux$8293_CMP  = \$39 ;
  assign \$idx_o$46  = \$procmux$8292_Y ;
  assign \$procmux$8296_CMP  = \$39 ;
  assign \$matched_rules[1]$45  = \$procmux$8295_Y ;
  assign \$procmux$8299_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$8298_Y ;
  assign \$procmux$8301_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$8300_Y ;
  assign \$procmux$8303_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$8302_Y ;
  assign \$procmux$8305_CMP  = \$16 ;
  assign \$matched_rules[0]$22  = \$procmux$8304_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
  assign \$29  = \$27 ;
  assign \$52  = \$50 ;
  assign \$62  = \$60 ;
  assign \$75  = \$73 ;
  assign \$39  = \$37 ;
  assign \$85  = \$83 ;
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$auto$rtlil.cc:3092:Mux$1319 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1320 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1321 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1322 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1323 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1324 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[0]$22 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[1]$45 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[2]$68 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules[3]$91 ;
  wire \$procmux$8163_Y ;
  wire \$procmux$8164_CMP ;
  wire \$procmux$8168_Y ;
  wire \$procmux$8169_CMP ;
  wire [2:0] \$procmux$8173_Y ;
  wire \$procmux$8174_CMP ;
  wire \$procmux$8178_Y ;
  wire \$procmux$8179_CMP ;
  wire \$procmux$8183_Y ;
  wire \$procmux$8184_CMP ;
  wire \$procmux$8187_Y ;
  wire \$procmux$8188_CMP ;
  wire [2:0] \$procmux$8191_Y ;
  wire \$procmux$8192_CMP ;
  wire \$procmux$8195_Y ;
  wire \$procmux$8196_CMP ;
  wire \$procmux$8199_Y ;
  wire \$procmux$8200_CMP ;
  wire \$procmux$8202_Y ;
  wire \$procmux$8203_CMP ;
  wire [2:0] \$procmux$8205_Y ;
  wire \$procmux$8206_CMP ;
  wire \$procmux$8208_Y ;
  wire \$procmux$8209_CMP ;
  wire \$procmux$8211_Y ;
  wire \$procmux$8212_CMP ;
  wire \$procmux$8213_Y ;
  wire \$procmux$8214_CMP ;
  wire [2:0] \$procmux$8215_Y ;
  wire \$procmux$8216_CMP ;
  wire \$procmux$8217_Y ;
  wire \$procmux$8218_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [3:0] matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1319 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1320 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1321 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$29 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(config_ongoing_i),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(config_ongoing_i),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1322 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(config_ongoing_i),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(config_ongoing_i),
    .Y(\$66 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1323 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$75 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(config_ongoing_i),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(config_ongoing_i),
    .Y(\$89 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1324 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8163  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$procmux$8164_CMP ),
    .Y(\$procmux$8163_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8168  (
    .A(\$dec_valid_o$70 ),
    .B(\$89 ),
    .S(\$procmux$8169_CMP ),
    .Y(\$procmux$8168_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8173  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1324 ),
    .S(\$procmux$8174_CMP ),
    .Y(\$procmux$8173_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8178  (
    .A(1'h0),
    .B(\$87 ),
    .S(\$procmux$8179_CMP ),
    .Y(\$procmux$8178_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8183  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$procmux$8184_CMP ),
    .Y(\$procmux$8183_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8187  (
    .A(\$dec_valid_o$47 ),
    .B(\$66 ),
    .S(\$procmux$8188_CMP ),
    .Y(\$procmux$8187_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8191  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1323 ),
    .S(\$procmux$8192_CMP ),
    .Y(\$procmux$8191_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8195  (
    .A(1'h0),
    .B(\$64 ),
    .S(\$procmux$8196_CMP ),
    .Y(\$procmux$8195_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8199  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$procmux$8200_CMP ),
    .Y(\$procmux$8199_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8202  (
    .A(\$dec_valid_o$24 ),
    .B(\$43 ),
    .S(\$procmux$8203_CMP ),
    .Y(\$procmux$8202_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8205  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1322 ),
    .S(\$procmux$8206_CMP ),
    .Y(\$procmux$8205_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8208  (
    .A(1'h0),
    .B(\$41 ),
    .S(\$procmux$8209_CMP ),
    .Y(\$procmux$8208_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8211  (
    .A(\$auto$rtlil.cc:3092:Mux$1319 ),
    .B(1'h0),
    .S(\$procmux$8212_CMP ),
    .Y(\$procmux$8211_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8213  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$8214_CMP ),
    .Y(\$procmux$8213_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8215  (
    .A(\$auto$rtlil.cc:3092:Mux$1320 ),
    .B(\$auto$rtlil.cc:3092:Mux$1321 ),
    .S(\$procmux$8216_CMP ),
    .Y(\$procmux$8215_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8217  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$8218_CMP ),
    .Y(\$procmux$8217_Y )
  );
  assign matched_rules = { \$matched_rules[3]$91 , \$matched_rules[2]$68 , \$matched_rules[1]$45 , \$matched_rules[0]$22  };
  assign idx_o = \$idx_o$92 ;
  assign dec_valid_o = \$dec_valid_o$93 ;
  assign dec_error_o = \$dec_error_o$94 ;
  assign \$procmux$8164_CMP  = \$85 ;
  assign \$dec_error_o$94  = \$procmux$8163_Y ;
  assign \$procmux$8169_CMP  = \$85 ;
  assign \$dec_valid_o$93  = \$procmux$8168_Y ;
  assign \$procmux$8174_CMP  = \$85 ;
  assign \$idx_o$92  = \$procmux$8173_Y ;
  assign \$procmux$8179_CMP  = \$85 ;
  assign \$matched_rules[3]$91  = \$procmux$8178_Y ;
  assign \$procmux$8184_CMP  = \$62 ;
  assign \$dec_error_o$71  = \$procmux$8183_Y ;
  assign \$procmux$8188_CMP  = \$62 ;
  assign \$dec_valid_o$70  = \$procmux$8187_Y ;
  assign \$procmux$8192_CMP  = \$62 ;
  assign \$idx_o$69  = \$procmux$8191_Y ;
  assign \$procmux$8196_CMP  = \$62 ;
  assign \$matched_rules[2]$68  = \$procmux$8195_Y ;
  assign \$procmux$8200_CMP  = \$39 ;
  assign \$dec_error_o$48  = \$procmux$8199_Y ;
  assign \$procmux$8203_CMP  = \$39 ;
  assign \$dec_valid_o$47  = \$procmux$8202_Y ;
  assign \$procmux$8206_CMP  = \$39 ;
  assign \$idx_o$46  = \$procmux$8205_Y ;
  assign \$procmux$8209_CMP  = \$39 ;
  assign \$matched_rules[1]$45  = \$procmux$8208_Y ;
  assign \$procmux$8212_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$8211_Y ;
  assign \$procmux$8214_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$8213_Y ;
  assign \$procmux$8216_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$8215_Y ;
  assign \$procmux$8218_CMP  = \$16 ;
  assign \$matched_rules[0]$22  = \$procmux$8217_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
  assign \$29  = \$27 ;
  assign \$52  = \$50 ;
  assign \$62  = \$60 ;
  assign \$75  = \$73 ;
  assign \$39  = \$37 ;
  assign \$85  = \$83 ;
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:3092:Mux$811 ;
  wire \$auto$rtlil.cc:3092:Mux$812 ;
  wire \$auto$rtlil.cc:3092:Mux$813 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$matched_rules$22 ;
  wire \$procmux$13154_Y ;
  wire \$procmux$13155_CMP ;
  wire \$procmux$13156_Y ;
  wire \$procmux$13157_CMP ;
  wire \$procmux$13158_Y ;
  wire \$procmux$13159_CMP ;
  wire \$procmux$13160_Y ;
  wire \$procmux$13161_CMP ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output idx_o;
  wire idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire matched_rules;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(1'h1),
    .B(1'h0),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$811 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$6 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(config_ongoing_i),
    .Y(\$20 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(1'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$812 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(addr_map_i[64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$813 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13154  (
    .A(\$auto$rtlil.cc:3092:Mux$811 ),
    .B(1'h0),
    .S(\$procmux$13155_CMP ),
    .Y(\$procmux$13154_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13156  (
    .A(1'h0),
    .B(\$20 ),
    .S(\$procmux$13157_CMP ),
    .Y(\$procmux$13156_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13158  (
    .A(\$auto$rtlil.cc:3092:Mux$812 ),
    .B(\$auto$rtlil.cc:3092:Mux$813 ),
    .S(\$procmux$13159_CMP ),
    .Y(\$procmux$13158_Y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13160  (
    .A(1'h0),
    .B(\$18 ),
    .S(\$procmux$13161_CMP ),
    .Y(\$procmux$13160_Y )
  );
  assign matched_rules = \$matched_rules$22 ;
  assign idx_o = \$idx_o$23 ;
  assign dec_valid_o = \$dec_valid_o$24 ;
  assign dec_error_o = \$dec_error_o$25 ;
  assign \$procmux$13155_CMP  = \$16 ;
  assign \$dec_error_o$25  = \$procmux$13154_Y ;
  assign \$procmux$13157_CMP  = \$16 ;
  assign \$dec_valid_o$24  = \$procmux$13156_Y ;
  assign \$procmux$13159_CMP  = \$16 ;
  assign \$idx_o$23  = \$procmux$13158_Y ;
  assign \$procmux$13161_CMP  = \$16 ;
  assign \$matched_rules$22  = \$procmux$13160_Y ;
  assign \$6  = \$4 ;
  assign \$16  = \$14 ;
endmodule

/* src = "rtl/apb_uart/apb_uart.sv:35.8" */
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$1 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$109 ;
  wire \$111 ;
  wire \$113 ;
  wire \$116 ;
  wire \$118 ;
  wire \$12 ;
  wire \$120 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$132 ;
  wire \$135 ;
  wire \$14 ;
  wire \$140 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$16 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$18 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$20 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire [31:0] \$213 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$228 ;
  wire \$23 ;
  wire \$230 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$26 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$279 ;
  wire \$28 ;
  wire \$284 ;
  wire \$289 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$3 ;
  wire \$30 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$311 ;
  wire \$315 ;
  wire \$317 ;
  wire \$32 ;
  wire \$321 ;
  wire \$323 ;
  wire \$327 ;
  wire \$329 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$34 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire \$349 ;
  wire [31:0] \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire [31:0] \$359 ;
  wire \$364 ;
  wire \$366 ;
  wire \$368 ;
  wire \$37 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$378 ;
  wire \$380 ;
  wire \$382 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$39 ;
  wire \$392 ;
  wire \$394 ;
  wire \$396 ;
  wire \$398 ;
  wire \$400 ;
  wire \$402 ;
  wire \$404 ;
  wire \$406 ;
  wire \$408 ;
  wire \$41 ;
  wire \$411 ;
  wire \$413 ;
  wire \$415 ;
  wire \$417 ;
  wire \$420 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$43 ;
  wire \$430 ;
  wire \$432 ;
  wire \$434 ;
  wire \$436 ;
  wire \$438 ;
  wire \$440 ;
  wire \$442 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire \$45 ;
  wire \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$460 ;
  wire \$462 ;
  wire \$464 ;
  wire \$466 ;
  wire \$468 ;
  wire \$470 ;
  wire \$472 ;
  wire \$475 ;
  wire \$477 ;
  wire \$479 ;
  wire \$48 ;
  wire \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire \$487 ;
  wire \$492 ;
  wire \$494 ;
  wire \$496 ;
  wire \$498 ;
  wire \$5 ;
  wire \$50 ;
  wire \$502 ;
  wire \$504 ;
  wire \$506 ;
  wire \$508 ;
  wire \$512 ;
  wire \$514 ;
  wire \$518 ;
  wire \$52 ;
  wire \$520 ;
  wire \$522 ;
  wire \$524 ;
  wire \$530 ;
  wire \$533 ;
  wire \$536 ;
  wire \$538 ;
  wire \$54 ;
  wire \$540 ;
  wire \$542 ;
  wire \$544 ;
  wire \$546 ;
  wire \$548 ;
  wire \$550 ;
  wire \$552 ;
  wire \$555 ;
  wire \$558 ;
  wire \$56 ;
  wire \$561 ;
  wire \$564 ;
  wire \$566 ;
  wire \$568 ;
  wire \$570 ;
  wire \$572 ;
  wire \$574 ;
  wire \$576 ;
  wire \$578 ;
  wire \$580 ;
  wire \$582 ;
  wire \$584 ;
  wire \$586 ;
  wire \$588 ;
  wire \$59 ;
  wire \$590 ;
  wire \$592 ;
  wire \$594 ;
  wire \$596 ;
  wire \$598 ;
  wire \$600 ;
  wire \$602 ;
  wire \$604 ;
  wire \$606 ;
  wire \$608 ;
  wire \$61 ;
  wire \$611 ;
  wire \$613 ;
  wire \$615 ;
  wire \$617 ;
  wire \$619 ;
  wire \$621 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$629 ;
  wire \$63 ;
  wire \$631 ;
  wire \$633 ;
  wire \$635 ;
  wire \$637 ;
  wire \$639 ;
  wire \$641 ;
  wire \$643 ;
  wire \$645 ;
  wire \$647 ;
  wire \$649 ;
  wire \$65 ;
  wire \$651 ;
  wire \$653 ;
  wire \$655 ;
  wire \$658 ;
  wire \$661 ;
  wire \$664 ;
  wire \$666 ;
  wire \$668 ;
  wire \$67 ;
  wire \$670 ;
  wire \$672 ;
  wire \$674 ;
  wire \$676 ;
  wire \$681 ;
  wire \$685 ;
  wire \$695 ;
  wire \$697 ;
  wire \$7 ;
  wire \$70 ;
  wire \$703 ;
  wire \$705 ;
  wire \$715 ;
  wire \$717 ;
  wire \$719 ;
  wire \$72 ;
  wire \$721 ;
  wire \$723 ;
  wire \$725 ;
  wire \$727 ;
  wire \$729 ;
  wire \$731 ;
  wire \$733 ;
  wire \$735 ;
  wire \$737 ;
  wire \$74 ;
  wire \$743 ;
  wire \$746 ;
  wire \$748 ;
  wire \$750 ;
  wire \$753 ;
  wire \$755 ;
  wire \$757 ;
  wire \$76 ;
  wire \$760 ;
  wire \$762 ;
  wire \$764 ;
  wire \$767 ;
  wire \$769 ;
  wire \$771 ;
  wire \$774 ;
  wire \$776 ;
  wire \$778 ;
  wire \$78 ;
  wire \$782 ;
  wire \$785 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$9 ;
  wire \$90 ;
  wire \$92 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  /* src = "rtl/apb_uart/apb_uart.sv:867.8-870.13" */
  wire \$DTRN$772 ;
  /* src = "rtl/apb_uart/apb_uart.sv:852.8-855.13" */
  wire \$OUT1N$751 ;
  /* src = "rtl/apb_uart/apb_uart.sv:857.8-860.13" */
  wire \$OUT2N$758 ;
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  wire [7:0] \$PRDATA[7:0]$783 ;
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  wire [7:0] \$PRDATA[7:0]$786 ;
  /* src = "rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  wire [7:0] \$PRDATA[7:0]$787 ;
  /* src = "rtl/apb_uart/apb_uart.sv:862.8-865.13" */
  wire \$RTSN$765 ;
  /* src = "rtl/apb_uart/apb_uart.sv:872.8-875.18" */
  wire \$SOUT$779 ;
  wire \$auto$rtlil.cc:2965:LogicNot$615 ;
  wire \$auto$rtlil.cc:2965:LogicNot$616 ;
  wire \$auto$rtlil.cc:2965:LogicNot$617 ;
  wire \$auto$rtlil.cc:2965:LogicNot$620 ;
  wire \$auto$rtlil.cc:2965:LogicNot$621 ;
  wire \$auto$rtlil.cc:2965:LogicNot$622 ;
  wire \$auto$rtlil.cc:2965:LogicNot$623 ;
  wire \$auto$rtlil.cc:2965:LogicNot$624 ;
  wire \$auto$rtlil.cc:2965:LogicNot$637 ;
  wire \$auto$rtlil.cc:2965:LogicNot$638 ;
  wire \$auto$rtlil.cc:2965:LogicNot$649 ;
  wire \$auto$rtlil.cc:2965:LogicNot$650 ;
  wire \$auto$rtlil.cc:2965:LogicNot$651 ;
  wire \$auto$rtlil.cc:2965:LogicNot$652 ;
  wire \$auto$rtlil.cc:3092:Mux$600 ;
  wire \$auto$rtlil.cc:3092:Mux$601 ;
  wire \$auto$rtlil.cc:3092:Mux$602 ;
  wire \$auto$rtlil.cc:3092:Mux$603 ;
  wire \$auto$rtlil.cc:3092:Mux$604 ;
  wire \$auto$rtlil.cc:3092:Mux$605 ;
  wire \$auto$rtlil.cc:3092:Mux$606 ;
  wire \$auto$rtlil.cc:3092:Mux$607 ;
  wire \$auto$rtlil.cc:3092:Mux$608 ;
  wire \$auto$rtlil.cc:3092:Mux$609 ;
  wire \$auto$rtlil.cc:3092:Mux$610 ;
  wire \$auto$rtlil.cc:3092:Mux$611 ;
  wire \$auto$rtlil.cc:3092:Mux$612 ;
  wire \$auto$rtlil.cc:3092:Mux$613 ;
  wire \$auto$rtlil.cc:3092:Mux$614 ;
  wire \$auto$rtlil.cc:3092:Mux$618 ;
  wire \$auto$rtlil.cc:3092:Mux$619 ;
  wire \$auto$rtlil.cc:3092:Mux$625 ;
  wire \$auto$rtlil.cc:3092:Mux$626 ;
  wire \$auto$rtlil.cc:3092:Mux$627 ;
  wire \$auto$rtlil.cc:3092:Mux$628 ;
  wire \$auto$rtlil.cc:3092:Mux$629 ;
  wire \$auto$rtlil.cc:3092:Mux$630 ;
  wire \$auto$rtlil.cc:3092:Mux$631 ;
  wire \$auto$rtlil.cc:3092:Mux$632 ;
  wire \$auto$rtlil.cc:3092:Mux$633 ;
  wire \$auto$rtlil.cc:3092:Mux$634 ;
  wire \$auto$rtlil.cc:3092:Mux$635 ;
  wire \$auto$rtlil.cc:3092:Mux$636 ;
  wire \$auto$rtlil.cc:3092:Mux$639 ;
  wire \$auto$rtlil.cc:3092:Mux$640 ;
  wire \$auto$rtlil.cc:3092:Mux$641 ;
  wire \$auto$rtlil.cc:3092:Mux$642 ;
  wire \$auto$rtlil.cc:3092:Mux$643 ;
  wire \$auto$rtlil.cc:3092:Mux$644 ;
  wire \$auto$rtlil.cc:3092:Mux$645 ;
  wire \$auto$rtlil.cc:3092:Mux$646 ;
  wire \$auto$rtlil.cc:3092:Mux$647 ;
  wire \$auto$rtlil.cc:3092:Mux$648 ;
  /* src = "rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  wire \$iBAUDOUTN$744 ;
  /* src = "rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  wire \$iCharTimeout$222 ;
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  wire \$iCharTimeout$223 ;
  /* src = "rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  wire \$iCharTimeout$224 ;
  /* src = "rtl/apb_uart/apb_uart.sv:244.8-247.13" */
  wire [7:0] \$iDLL$133 ;
  /* src = "rtl/apb_uart/apb_uart.sv:248.8-251.13" */
  wire [7:0] \$iDLM$136 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_DMAMode$273 ;
  /* src = "rtl/apb_uart/apb_uart.sv:375.13-378.18" */
  wire \$iFCR_FIFO64E$231 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_FIFO64E$274 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_FIFOEnable$270 ;
  /* src = "rtl/apb_uart/apb_uart.sv:380.13-383.18" */
  wire \$iFCR_RXFIFOReset$250 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_RXFIFOReset$271 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire [1:0] \$iFCR_RXTrigger$275 ;
  /* src = "rtl/apb_uart/apb_uart.sv:385.13-388.18" */
  wire \$iFCR_TXFIFOReset$269 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_TXFIFOReset$272 ;
  /* src = "rtl/apb_uart/apb_uart.sv:505.18-508.18" */
  wire [6:0] \$iFECounter$360 ;
  /* src = "rtl/apb_uart/apb_uart.sv:501.13-508.18" */
  wire [6:0] \$iFECounter$361 ;
  /* src = "rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  wire [6:0] \$iFECounter$362 ;
  /* src = "rtl/apb_uart/apb_uart.sv:261.8-264.13" */
  wire [3:0] \$iIER[3:0]$141 ;
  /* src = "rtl/apb_uart/apb_uart.sv:408.8-411.13" */
  wire [7:0] \$iLCR$280 ;
  /* src = "rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  wire \$iLSR_BI$330 ;
  /* src = "rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  wire \$iLSR_BI$331 ;
  /* src = "rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  wire \$iLSR_FE$324 ;
  /* src = "rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  wire \$iLSR_FE$325 ;
  /* src = "rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  wire \$iLSR_FIFOERR$340 ;
  /* src = "rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  wire \$iLSR_FIFOERR$341 ;
  /* src = "rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  wire \$iLSR_OE$312 ;
  /* src = "rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  wire \$iLSR_OE$313 ;
  /* src = "rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  wire \$iLSR_PE$318 ;
  /* src = "rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  wire \$iLSR_PE$319 ;
  /* src = "rtl/apb_uart/apb_uart.sv:429.8-432.12" */
  wire [5:0] \$iMCR[5:0]$285 ;
  /* src = "rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  wire \$iMSR_TERI$515 ;
  /* src = "rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  wire \$iMSR_TERI$516 ;
  /* src = "rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  wire \$iMSR_dCTS$499 ;
  /* src = "rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  wire \$iMSR_dCTS$500 ;
  /* src = "rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  wire \$iMSR_dDCD$525 ;
  /* src = "rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  wire \$iMSR_dDCD$526 ;
  /* src = "rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  wire \$iMSR_dDSR$509 ;
  /* src = "rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  wire \$iMSR_dDSR$510 ;
  /* src = "rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  wire \$iRTS$738 ;
  /* src = "rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  wire \$iRTS$739 ;
  /* src = "rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  wire \$iRXFIFOClear$698 ;
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire \$iRXFIFOClear$699 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOClear$708 ;
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire [10:0] \$iRXFIFOD$700 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire [10:0] \$iRXFIFOD$710 ;
  /* src = "rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  wire \$iRXFIFOWrite$706 ;
  /* src = "rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  wire \$iRXFIFOWrite$707 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOWrite$709 ;
  /* src = "rtl/apb_uart/apb_uart.sv:622.8-625.13" */
  wire [7:0] \$iSCR$531 ;
  /* src = "rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  wire \$iTHRInterrupt$172 ;
  /* src = "rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  wire \$iTHRInterrupt$173 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire [7:0] \$iTSR$687 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXFIFORead$688 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXRunning$690 ;
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43" */
  wire \$iTXStart$682 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXStart$689 ;
  /* src = "rtl/apb_uart/apb_uart.sv:334.13-337.13" */
  wire [5:0] \$iTimeoutCount$214 ;
  /* src = "rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  wire [5:0] \$iTimeoutCount$215 ;
  wire [7:0] \$procmux$13378_Y ;
  wire \$procmux$13379_CMP ;
  wire [7:0] \$procmux$13380_Y ;
  wire \$procmux$13381_CMP ;
  wire [7:0] \$procmux$13382_Y ;
  wire \$procmux$13383_CMP ;
  wire \$procmux$13384_CMP ;
  wire \$procmux$13385_CMP ;
  wire \$procmux$13386_CMP ;
  wire \$procmux$13387_CMP ;
  wire \$procmux$13388_CMP ;
  wire \$procmux$13390_CMP ;
  wire \$procmux$13392_CMP ;
  wire [7:0] \$procmux$13401_Y ;
  wire \$procmux$13402_CMP ;
  wire [7:0] \$procmux$13403_Y ;
  wire \$procmux$13404_CMP ;
  wire \$procmux$13405_Y ;
  wire \$procmux$13406_CMP ;
  wire \$procmux$13412_Y ;
  wire \$procmux$13413_CMP ;
  wire \$procmux$13418_Y ;
  wire \$procmux$13419_CMP ;
  wire \$procmux$13423_Y ;
  wire \$procmux$13424_CMP ;
  wire \$procmux$13427_Y ;
  wire \$procmux$13428_CMP ;
  wire \$procmux$13430_Y ;
  wire \$procmux$13431_CMP ;
  wire \$procmux$13432_Y ;
  wire \$procmux$13433_CMP ;
  wire \$procmux$13435_Y ;
  wire \$procmux$13436_CMP ;
  wire \$procmux$13439_Y ;
  wire \$procmux$13440_CMP ;
  wire \$procmux$13441_Y ;
  wire \$procmux$13442_CMP ;
  wire \$procmux$13444_Y ;
  wire \$procmux$13445_CMP ;
  wire \$procmux$13446_Y ;
  wire \$procmux$13447_CMP ;
  wire \$procmux$13450_Y ;
  wire \$procmux$13451_CMP ;
  wire \$procmux$13452_Y ;
  wire \$procmux$13453_CMP ;
  wire \$procmux$13455_Y ;
  wire \$procmux$13456_CMP ;
  wire \$procmux$13458_CMP ;
  wire \$procmux$13462_Y ;
  wire \$procmux$13463_CMP ;
  wire \$procmux$13464_Y ;
  wire \$procmux$13465_CMP ;
  wire \$procmux$13468_Y ;
  wire \$procmux$13469_CMP ;
  wire \$procmux$13470_Y ;
  wire \$procmux$13471_CMP ;
  wire \$procmux$13472_Y ;
  wire \$procmux$13473_CMP ;
  wire [10:0] \$procmux$13477_Y ;
  wire \$procmux$13478_CMP ;
  wire [10:0] \$procmux$13479_Y ;
  wire \$procmux$13480_CMP ;
  wire \$procmux$13484_Y ;
  wire \$procmux$13485_CMP ;
  wire \$procmux$13486_Y ;
  wire \$procmux$13487_CMP ;
  wire [10:0] \$procmux$13490_Y ;
  wire \$procmux$13491_CMP ;
  wire \$procmux$13493_Y ;
  wire \$procmux$13494_CMP ;
  wire \$procmux$13497_Y ;
  wire \$procmux$13498_CMP ;
  wire [1:0] \$procmux$13501_Y ;
  wire \$procmux$13502_CMP ;
  wire [1:0] \$procmux$13503_Y ;
  wire \$procmux$13504_CMP ;
  wire [1:0] \$procmux$13505_Y ;
  wire \$procmux$13506_CMP ;
  wire \$procmux$13508_CMP ;
  wire \$procmux$13509_CMP ;
  wire \$procmux$13511_CMP ;
  wire [1:0] \$procmux$13516_Y ;
  wire \$procmux$13517_CMP ;
  wire [1:0] \$procmux$13518_Y ;
  wire \$procmux$13519_CMP ;
  wire \$procmux$13524_Y ;
  wire \$procmux$13525_CMP ;
  wire \$procmux$13526_Y ;
  wire \$procmux$13527_CMP ;
  wire \$procmux$13530_Y ;
  wire \$procmux$13531_CMP ;
  wire \$procmux$13534_Y ;
  wire \$procmux$13535_CMP ;
  wire \$procmux$13536_CMP ;
  wire \$procmux$13538_CMP ;
  wire \$procmux$13541_Y ;
  wire \$procmux$13542_CMP ;
  wire [7:0] \$procmux$13545_Y ;
  wire \$procmux$13546_CMP ;
  wire [7:0] \$procmux$13547_Y ;
  wire \$procmux$13548_CMP ;
  wire \$procmux$13549_Y ;
  wire \$procmux$13550_CMP ;
  wire \$procmux$13552_Y ;
  wire \$procmux$13553_CMP ;
  wire \$procmux$13559_Y ;
  wire \$procmux$13560_CMP ;
  wire \$procmux$13564_Y ;
  wire \$procmux$13565_CMP ;
  wire \$procmux$13567_Y ;
  wire \$procmux$13568_CMP ;
  wire \$procmux$13573_Y ;
  wire \$procmux$13574_CMP ;
  wire \$procmux$13577_Y ;
  wire \$procmux$13578_CMP ;
  wire \$procmux$13580_Y ;
  wire \$procmux$13581_CMP ;
  wire \$procmux$13585_Y ;
  wire \$procmux$13586_CMP ;
  wire \$procmux$13588_Y ;
  wire \$procmux$13589_CMP ;
  wire \$procmux$13591_Y ;
  wire \$procmux$13592_CMP ;
  wire \$procmux$13595_Y ;
  wire \$procmux$13596_CMP ;
  wire [6:0] \$procmux$13597_Y ;
  wire \$procmux$13598_CMP ;
  wire [6:0] \$procmux$13600_Y ;
  wire \$procmux$13601_CMP ;
  wire [6:0] \$procmux$13603_Y ;
  wire \$procmux$13604_CMP ;
  wire [6:0] \$procmux$13612_Y ;
  wire \$procmux$13613_CMP ;
  wire [6:0] \$procmux$13615_Y ;
  wire \$procmux$13616_CMP ;
  wire [6:0] \$procmux$13624_Y ;
  wire \$procmux$13625_CMP ;
  wire \$procmux$13631_Y ;
  wire \$procmux$13632_CMP ;
  wire \$procmux$13634_Y ;
  wire \$procmux$13635_CMP ;
  wire \$procmux$13642_Y ;
  wire \$procmux$13643_CMP ;
  wire \$procmux$13648_Y ;
  wire \$procmux$13649_CMP ;
  wire \$procmux$13651_Y ;
  wire \$procmux$13652_CMP ;
  wire \$procmux$13658_Y ;
  wire \$procmux$13659_CMP ;
  wire \$procmux$13663_Y ;
  wire \$procmux$13664_CMP ;
  wire \$procmux$13666_Y ;
  wire \$procmux$13667_CMP ;
  wire \$procmux$13672_Y ;
  wire \$procmux$13673_CMP ;
  wire \$procmux$13676_Y ;
  wire \$procmux$13677_CMP ;
  wire \$procmux$13679_Y ;
  wire \$procmux$13680_CMP ;
  wire \$procmux$13684_Y ;
  wire \$procmux$13685_CMP ;
  wire \$procmux$13687_Y ;
  wire \$procmux$13688_CMP ;
  wire \$procmux$13690_Y ;
  wire \$procmux$13691_CMP ;
  wire \$procmux$13694_Y ;
  wire \$procmux$13695_CMP ;
  wire [5:0] \$procmux$13696_Y ;
  wire \$procmux$13697_CMP ;
  wire [7:0] \$procmux$13698_Y ;
  wire \$procmux$13699_CMP ;
  wire \$procmux$13700_Y ;
  wire \$procmux$13701_CMP ;
  wire \$procmux$13704_Y ;
  wire \$procmux$13705_CMP ;
  wire \$procmux$13706_Y ;
  wire \$procmux$13707_CMP ;
  wire \$procmux$13709_Y ;
  wire \$procmux$13710_CMP ;
  wire \$procmux$13711_Y ;
  wire \$procmux$13712_CMP ;
  wire \$procmux$13713_Y ;
  wire \$procmux$13714_CMP ;
  wire [1:0] \$procmux$13718_Y ;
  wire \$procmux$13719_CMP ;
  wire \$procmux$13723_Y ;
  wire \$procmux$13724_CMP ;
  wire \$procmux$13728_Y ;
  wire \$procmux$13729_CMP ;
  wire \$procmux$13733_Y ;
  wire \$procmux$13734_CMP ;
  wire \$procmux$13738_Y ;
  wire \$procmux$13739_CMP ;
  wire \$procmux$13743_Y ;
  wire \$procmux$13744_CMP ;
  wire \$procmux$13747_Y ;
  wire \$procmux$13748_CMP ;
  wire \$procmux$13751_Y ;
  wire \$procmux$13752_CMP ;
  wire \$procmux$13754_Y ;
  wire \$procmux$13755_CMP ;
  wire \$procmux$13756_Y ;
  wire \$procmux$13757_CMP ;
  wire \$procmux$13762_Y ;
  wire \$procmux$13763_CMP ;
  wire \$procmux$13764_Y ;
  wire \$procmux$13765_CMP ;
  wire [5:0] \$procmux$13767_Y ;
  wire \$procmux$13768_CMP ;
  wire [5:0] \$procmux$13770_Y ;
  wire \$procmux$13771_CMP ;
  wire [5:0] \$procmux$13774_Y ;
  wire \$procmux$13775_CMP ;
  wire \$procmux$13776_Y ;
  wire \$procmux$13777_CMP ;
  wire \$procmux$13779_Y ;
  wire \$procmux$13780_CMP ;
  wire \$procmux$13783_Y ;
  wire \$procmux$13784_CMP ;
  wire [3:0] \$procmux$13785_Y ;
  wire \$procmux$13786_CMP ;
  wire [7:0] \$procmux$13787_Y ;
  wire \$procmux$13788_CMP ;
  wire [7:0] \$procmux$13790_Y ;
  wire \$procmux$13791_CMP ;
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire \$rx_State$701 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$rx_State$711 ;
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43" */
  wire [1:0] \$tx_State$683 ;
  /* src = "rtl/apb_uart/apb_uart.sv:760.22-763.42" */
  wire [1:0] \$tx_State$686 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire [1:0] \$tx_State$691 ;
  /* src = "rtl/apb_uart/apb_uart.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/apb_uart.sv:51.14" */
  input CTSN;
  wire CTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:53.14" */
  input DCDN;
  wire DCDN;
  /* src = "rtl/apb_uart/apb_uart.sv:52.14" */
  input DSRN;
  wire DSRN;
  /* src = "rtl/apb_uart/apb_uart.sv:50.16" */
  output DTRN;
  wire DTRN;
  /* src = "rtl/apb_uart/apb_uart.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/apb_uart.sv:47.16" */
  output OUT1N;
  wire OUT1N;
  /* src = "rtl/apb_uart/apb_uart.sv:48.16" */
  output OUT2N;
  wire OUT2N;
  /* src = "rtl/apb_uart/apb_uart.sv:41.20" */
  input [2:0] PADDR;
  wire [2:0] PADDR;
  /* src = "rtl/apb_uart/apb_uart.sv:39.14" */
  input PENABLE;
  wire PENABLE;
  /* src = "rtl/apb_uart/apb_uart.sv:43.23" */
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:44.16" */
  output PREADY;
  wire PREADY;
  /* src = "rtl/apb_uart/apb_uart.sv:38.14" */
  input PSEL;
  wire PSEL;
  /* src = "rtl/apb_uart/apb_uart.sv:45.16" */
  output PSLVERR;
  wire PSLVERR;
  /* src = "rtl/apb_uart/apb_uart.sv:42.21" */
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:40.14" */
  input PWRITE;
  wire PWRITE;
  /* src = "rtl/apb_uart/apb_uart.sv:54.14" */
  input RIN;
  wire RIN;
  /* src = "rtl/apb_uart/apb_uart.sv:37.14" */
  input RSTN;
  wire RSTN;
  /* src = "rtl/apb_uart/apb_uart.sv:49.16" */
  output RTSN;
  wire RTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:55.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/apb_uart.sv:56.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:157.5" */
  wire iBAUDOUTN;
  /* src = "rtl/apb_uart/apb_uart.sv:198.5" */
  wire iBIRE;
  /* src = "rtl/apb_uart/apb_uart.sv:153.12" */
  wire [15:0] iBaudgenDiv;
  /* src = "rtl/apb_uart/apb_uart.sv:154.5" */
  wire iBaudtick16x;
  /* src = "rtl/apb_uart/apb_uart.sv:155.5" */
  wire iBaudtick2x;
  /* src = "rtl/apb_uart/apb_uart.sv:137.5" */
  wire iCTSNs;
  /* src = "rtl/apb_uart/apb_uart.sv:141.5" */
  wire iCTSn;
  /* src = "rtl/apb_uart/apb_uart.sv:146.5" */
  wire iCTSnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:145.5" */
  wire iCTSnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:204.5" */
  wire iCharTimeout;
  /* src = "rtl/apb_uart/apb_uart.sv:139.5" */
  wire iDCDNs;
  /* src = "rtl/apb_uart/apb_uart.sv:143.5" */
  wire iDCDn;
  /* src = "rtl/apb_uart/apb_uart.sv:150.5" */
  wire iDCDnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:149.5" */
  wire iDCDnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:83.11" */
  wire [7:0] iDLL;
  /* src = "rtl/apb_uart/apb_uart.sv:71.5" */
  wire iDLLWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:84.11" */
  wire [7:0] iDLM;
  /* src = "rtl/apb_uart/apb_uart.sv:72.5" */
  wire iDLMWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:138.5" */
  wire iDSRNs;
  /* src = "rtl/apb_uart/apb_uart.sv:142.5" */
  wire iDSRn;
  /* src = "rtl/apb_uart/apb_uart.sv:148.5" */
  wire iDSRnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:147.5" */
  wire iDSRnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:87.11" */
  wire [7:0] iFCR;
  /* src = "rtl/apb_uart/apb_uart.sv:75.5" */
  wire iFCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:105.5" */
  wire iFCR_DMAMode;
  /* src = "rtl/apb_uart/apb_uart.sv:106.5" */
  wire iFCR_FIFO64E;
  /* src = "rtl/apb_uart/apb_uart.sv:102.5" */
  wire iFCR_FIFOEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:103.5" */
  wire iFCR_RXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:107.11" */
  wire [1:0] iFCR_RXTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:104.5" */
  wire iFCR_TXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:199.11" */
  wire [6:0] iFECounter;
  /* src = "rtl/apb_uart/apb_uart.sv:201.5" */
  wire iFEDecrement;
  /* src = "rtl/apb_uart/apb_uart.sv:200.5" */
  wire iFEIncrement;
  /* src = "rtl/apb_uart/apb_uart.sv:196.5" */
  wire iFERE;
  /* src = "rtl/apb_uart/apb_uart.sv:85.11" */
  wire [7:0] iIER;
  /* src = "rtl/apb_uart/apb_uart.sv:73.5" */
  wire iIERWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:96.5" */
  wire iIER_EDSSI;
  /* src = "rtl/apb_uart/apb_uart.sv:95.5" */
  wire iIER_ELSI;
  /* src = "rtl/apb_uart/apb_uart.sv:93.5" */
  wire iIER_ERBI;
  /* src = "rtl/apb_uart/apb_uart.sv:94.5" */
  wire iIER_ETBEI;
  /* src = "rtl/apb_uart/apb_uart.sv:86.11" */
  wire [7:0] iIIR;
  /* src = "rtl/apb_uart/apb_uart.sv:74.5" */
  wire iIIRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:101.5" */
  wire iIIR_FIFO64;
  /* src = "rtl/apb_uart/apb_uart.sv:98.5" */
  wire iIIR_ID0;
  /* src = "rtl/apb_uart/apb_uart.sv:99.5" */
  wire iIIR_ID1;
  /* src = "rtl/apb_uart/apb_uart.sv:100.5" */
  wire iIIR_ID2;
  /* src = "rtl/apb_uart/apb_uart.sv:97.5" */
  wire iIIR_PI;
  /* src = "rtl/apb_uart/apb_uart.sv:88.11" */
  wire [7:0] iLCR;
  /* src = "rtl/apb_uart/apb_uart.sv:76.5" */
  wire iLCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:113.5" */
  wire iLCR_BC;
  /* src = "rtl/apb_uart/apb_uart.sv:114.5" */
  wire iLCR_DLAB;
  /* src = "rtl/apb_uart/apb_uart.sv:111.5" */
  wire iLCR_EPS;
  /* src = "rtl/apb_uart/apb_uart.sv:110.5" */
  wire iLCR_PEN;
  /* src = "rtl/apb_uart/apb_uart.sv:112.5" */
  wire iLCR_SP;
  /* src = "rtl/apb_uart/apb_uart.sv:109.5" */
  wire iLCR_STB;
  /* src = "rtl/apb_uart/apb_uart.sv:108.11" */
  wire [1:0] iLCR_WLS;
  /* src = "rtl/apb_uart/apb_uart.sv:90.11" */
  wire [7:0] iLSR;
  /* src = "rtl/apb_uart/apb_uart.sv:78.5" */
  wire iLSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:125.5" */
  wire iLSR_BI;
  /* src = "rtl/apb_uart/apb_uart.sv:121.5" */
  wire iLSR_DR;
  /* src = "rtl/apb_uart/apb_uart.sv:124.5" */
  wire iLSR_FE;
  /* src = "rtl/apb_uart/apb_uart.sv:128.5" */
  wire iLSR_FIFOERR;
  /* src = "rtl/apb_uart/apb_uart.sv:122.5" */
  wire iLSR_OE;
  /* src = "rtl/apb_uart/apb_uart.sv:123.5" */
  wire iLSR_PE;
  /* src = "rtl/apb_uart/apb_uart.sv:127.5" */
  wire iLSR_TEMT;
  /* src = "rtl/apb_uart/apb_uart.sv:126.5" */
  wire iLSR_THRE;
  /* src = "rtl/apb_uart/apb_uart.sv:205.5" */
  wire iLSR_THRERE;
  /* src = "rtl/apb_uart/apb_uart.sv:89.11" */
  wire [7:0] iMCR;
  /* src = "rtl/apb_uart/apb_uart.sv:77.5" */
  wire iMCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:120.5" */
  wire iMCR_AFE;
  /* src = "rtl/apb_uart/apb_uart.sv:115.5" */
  wire iMCR_DTR;
  /* src = "rtl/apb_uart/apb_uart.sv:119.5" */
  wire iMCR_LOOP;
  /* src = "rtl/apb_uart/apb_uart.sv:117.5" */
  wire iMCR_OUT1;
  /* src = "rtl/apb_uart/apb_uart.sv:118.5" */
  wire iMCR_OUT2;
  /* src = "rtl/apb_uart/apb_uart.sv:116.5" */
  wire iMCR_RTS;
  /* src = "rtl/apb_uart/apb_uart.sv:91.11" */
  wire [7:0] iMSR;
  /* src = "rtl/apb_uart/apb_uart.sv:79.5" */
  wire iMSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:133.5" */
  wire iMSR_CTS;
  /* src = "rtl/apb_uart/apb_uart.sv:136.5" */
  wire iMSR_DCD;
  /* src = "rtl/apb_uart/apb_uart.sv:134.5" */
  wire iMSR_DSR;
  /* src = "rtl/apb_uart/apb_uart.sv:135.5" */
  wire iMSR_RI;
  /* src = "rtl/apb_uart/apb_uart.sv:131.5" */
  wire iMSR_TERI;
  /* src = "rtl/apb_uart/apb_uart.sv:129.5" */
  wire iMSR_dCTS;
  /* src = "rtl/apb_uart/apb_uart.sv:132.5" */
  wire iMSR_dDCD;
  /* src = "rtl/apb_uart/apb_uart.sv:130.5" */
  wire iMSR_dDSR;
  /* src = "rtl/apb_uart/apb_uart.sv:197.5" */
  wire iPERE;
  /* src = "rtl/apb_uart/apb_uart.sv:82.11" */
  wire [7:0] iRBR;
  /* src = "rtl/apb_uart/apb_uart.sv:69.5" */
  wire iRBRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:156.5" */
  wire iRCLK;
  /* src = "rtl/apb_uart/apb_uart.sv:202.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:140.5" */
  wire iRINs;
  /* src = "rtl/apb_uart/apb_uart.sv:144.5" */
  wire iRIn;
  /* src = "rtl/apb_uart/apb_uart.sv:152.5" */
  wire iRInFE;
  /* src = "rtl/apb_uart/apb_uart.sv:151.5" */
  wire iRInRE;
  /* src = "rtl/apb_uart/apb_uart.sv:68.5" */
  wire iRST;
  /* src = "rtl/apb_uart/apb_uart.sv:208.5" */
  wire iRTS;
  /* src = "rtl/apb_uart/apb_uart.sv:195.5" */
  wire iRXBI;
  /* src = "rtl/apb_uart/apb_uart.sv:191.5" */
  wire iRXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:192.11" */
  wire [7:0] iRXData;
  /* src = "rtl/apb_uart/apb_uart.sv:194.5" */
  wire iRXFE;
  /* src = "rtl/apb_uart/apb_uart.sv:172.5" */
  wire iRXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:178.5" */
  wire iRXFIFO16Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:173.5" */
  wire iRXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:179.5" */
  wire iRXFIFO64Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:182.5" */
  wire iRXFIFOBI;
  /* src = "rtl/apb_uart/apb_uart.sv:167.5" */
  wire iRXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:174.12" */
  wire [10:0] iRXFIFOD;
  /* src = "rtl/apb_uart/apb_uart.sv:170.5" */
  wire iRXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:181.5" */
  wire iRXFIFOFE;
  /* src = "rtl/apb_uart/apb_uart.sv:171.5" */
  wire iRXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:180.5" */
  wire iRXFIFOPE;
  /* src = "rtl/apb_uart/apb_uart.sv:175.12" */
  wire [10:0] iRXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:169.5" */
  wire iRXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:177.5" */
  wire iRXFIFOTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:176.11" */
  wire [5:0] iRXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:168.5" */
  wire iRXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:190.5" */
  wire iRXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:193.5" */
  wire iRXPE;
  /* src = "rtl/apb_uart/apb_uart.sv:67.5" */
  wire iRead;
  /* src = "rtl/apb_uart/apb_uart.sv:92.11" */
  wire [7:0] iSCR;
  /* src = "rtl/apb_uart/apb_uart.sv:80.5" */
  wire iSCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:189.5" */
  wire iSIN;
  /* src = "rtl/apb_uart/apb_uart.sv:188.5" */
  wire iSINr;
  /* src = "rtl/apb_uart/apb_uart.sv:183.5" */
  wire iSOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:206.5" */
  wire iTHRInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:70.5" */
  wire iTHRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:81.11" */
  wire [7:0] iTSR;
  /* src = "rtl/apb_uart/apb_uart.sv:185.5" */
  wire iTXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:207.5" */
  wire iTXEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:163.5" */
  wire iTXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:164.5" */
  wire iTXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:158.5" */
  wire iTXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:161.5" */
  wire iTXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:162.5" */
  wire iTXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:166.11" */
  wire [7:0] iTXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:160.5" */
  wire iTXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:165.11" */
  wire [5:0] iTXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:159.5" */
  wire iTXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:186.5" */
  wire iTXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:187.5" */
  wire iTXRunning;
  /* src = "rtl/apb_uart/apb_uart.sv:184.5" */
  wire iTXStart;
  /* src = "rtl/apb_uart/apb_uart.sv:203.11" */
  wire [5:0] iTimeoutCount;
  /* src = "rtl/apb_uart/apb_uart.sv:66.5" */
  wire iWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:720.18" */
  wire rx_State;
  /* src = "rtl/apb_uart/apb_uart.sv:721.18" */
  wire [1:0] tx_State;
  \$mux  #(
    .WIDTH(32'd1)
  ) \$10  (
    .A(1'h0),
    .B(1'h1),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$600 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(1'h0),
    .B(1'h1),
    .S(\$99 ),
    .Y(\$auto$rtlil.cc:3092:Mux$610 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(PADDR),
    .B(3'h4),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$102 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(1'h0),
    .B(1'h1),
    .S(\$106 ),
    .Y(\$auto$rtlil.cc:3092:Mux$611 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(PADDR),
    .B(3'h5),
    .Y(\$111 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(\$109 ),
    .B(\$111 ),
    .Y(\$113 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$114  (
    .A(1'h0),
    .B(1'h1),
    .S(\$113 ),
    .Y(\$auto$rtlil.cc:3092:Mux$612 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(PADDR),
    .B(3'h6),
    .Y(\$118 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\$116 ),
    .B(\$118 ),
    .Y(\$120 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$121  (
    .A(1'h0),
    .B(1'h1),
    .S(\$120 ),
    .Y(\$auto$rtlil.cc:3092:Mux$613 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(PADDR),
    .B(3'h7),
    .Y(\$125 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(\$123 ),
    .B(\$125 ),
    .Y(\$127 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$128  (
    .A(1'h0),
    .B(1'h1),
    .S(\$127 ),
    .Y(\$auto$rtlil.cc:3092:Mux$614 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(\$145 ),
    .B(\$147 ),
    .Y(\$149 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$12 ),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(\$151 ),
    .B(\$153 ),
    .Y(\$155 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$155 ),
    .B(\$157 ),
    .Y(\$159 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\$149 ),
    .B(\$159 ),
    .Y(\$161 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(iIIR[3:1]),
    .B(3'h1),
    .Y(\$165 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(\$163 ),
    .B(\$165 ),
    .Y(\$167 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(PWRITE),
    .Y(\$18 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(\$167 ),
    .B(\$169 ),
    .Y(\$171 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(iFCR_FIFOEnable),
    .Y(\$175 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(\$175 ),
    .B(\$177 ),
    .Y(\$179 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(\$181 ),
    .B(\$183 ),
    .Y(\$185 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(\$179 ),
    .B(\$185 ),
    .Y(\$187 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$188  (
    .A(1'h0),
    .B(1'h1),
    .S(\$187 ),
    .Y(\$auto$rtlil.cc:3092:Mux$618 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$189  (
    .A(1'h0),
    .B(iFCR_FIFO64E),
    .S(iFCR_FIFOEnable),
    .Y(\$auto$rtlil.cc:3092:Mux$619 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$16 ),
    .B(\$18 ),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(\$193 ),
    .B(\$195 ),
    .Y(\$197 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$200  (
    .A(\$197 ),
    .B(\$199 ),
    .Y(\$201 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(iRXFIFOEmpty),
    .Y(\$203 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(\$203 ),
    .B(\$205 ),
    .Y(\$207 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(iTimeoutCount[5]),
    .Y(\$209 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(1'h1),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$601 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(\$207 ),
    .B(\$209 ),
    .Y(\$211 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$212  (
    .A({ 26'h0000000, iTimeoutCount }),
    .B(32'd1),
    .Y(\$213 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(RSTN),
    .Y(\$23 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(iFCR_FIFOEnable),
    .Y(\$235 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$235 ),
    .B(\$237 ),
    .Y(\$239 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h1),
    .B(1'h0),
    .S(RSTN),
    .Y(\$auto$rtlil.cc:3092:Mux$602 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(\$233 ),
    .B(\$239 ),
    .Y(\$241 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(PWDATA[0]),
    .Y(\$245 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(\$243 ),
    .B(\$245 ),
    .Y(\$247 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(\$241 ),
    .B(\$247 ),
    .Y(\$249 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$253  (
    .A(iFCR_FIFOEnable),
    .Y(\$254 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(\$254 ),
    .B(\$256 ),
    .Y(\$258 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\$252 ),
    .B(\$258 ),
    .Y(\$260 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(PWDATA[0]),
    .Y(\$264 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(\$262 ),
    .B(\$264 ),
    .Y(\$266 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$267  (
    .A(\$260 ),
    .B(\$266 ),
    .Y(\$268 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(PADDR),
    .Y(\$28 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$288  (
    .A(iFCR_FIFOEnable),
    .Y(\$289 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(\$26 ),
    .B(\$28 ),
    .Y(\$30 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(\$289 ),
    .B(\$291 ),
    .Y(\$293 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$296  (
    .A(\$293 ),
    .B(\$295 ),
    .Y(\$297 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(\$299 ),
    .B(\$301 ),
    .Y(\$303 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(\$303 ),
    .B(\$305 ),
    .Y(\$307 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$308  (
    .A(\$297 ),
    .B(\$307 ),
    .Y(\$309 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iLCR_DLAB),
    .Y(\$32 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$30 ),
    .B(\$32 ),
    .Y(\$34 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(iFECounter),
    .Y(\$333 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$336  (
    .A(iRXFIFOQ[10:8]),
    .Y(\$337 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(\$335 ),
    .B(\$337 ),
    .Y(\$339 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$346  (
    .A(iFEDecrement),
    .Y(\$347 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$348  (
    .A(\$345 ),
    .B(\$347 ),
    .Y(\$349 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$35  (
    .A(1'h0),
    .B(1'h1),
    .S(\$34 ),
    .Y(\$auto$rtlil.cc:3092:Mux$603 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$350  (
    .A({ 25'h0000000, iFECounter }),
    .B(32'd1),
    .Y(\$351 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$352  (
    .A(iFEIncrement),
    .Y(\$353 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$356  (
    .A(\$353 ),
    .B(\$355 ),
    .Y(\$357 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$358  (
    .A({ 25'h0000000, iFECounter }),
    .B(32'd1),
    .Y(\$359 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$363  (
    .A(iRXFIFOEmpty),
    .Y(\$364 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$367  (
    .A(\$364 ),
    .B(\$366 ),
    .Y(\$368 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$369  (
    .A(1'h0),
    .B(1'h1),
    .S(\$368 ),
    .Y(\$auto$rtlil.cc:3092:Mux$625 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$370  (
    .A(iRXFIFOEmpty),
    .Y(\$371 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$374  (
    .A(\$371 ),
    .B(\$373 ),
    .Y(\$375 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$376  (
    .A(1'h0),
    .B(1'h1),
    .S(\$375 ),
    .Y(\$auto$rtlil.cc:3092:Mux$626 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$377  (
    .A(iRXFIFOEmpty),
    .Y(\$378 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(PADDR),
    .Y(\$39 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$381  (
    .A(\$378 ),
    .B(\$380 ),
    .Y(\$382 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$383  (
    .A(1'h0),
    .B(1'h1),
    .S(\$382 ),
    .Y(\$auto$rtlil.cc:3092:Mux$627 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$386  (
    .A(iRXFIFOD[10:8]),
    .Y(\$387 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$388  (
    .A(\$385 ),
    .B(\$387 ),
    .Y(\$389 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$390  (
    .A(1'h0),
    .B(1'h1),
    .S(\$389 ),
    .Y(\$auto$rtlil.cc:3092:Mux$628 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$391  (
    .A(iFECounter),
    .Y(\$392 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$393  (
    .A(iRXFIFOEmpty),
    .Y(\$394 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$395  (
    .A(\$392 ),
    .B(\$394 ),
    .Y(\$396 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$1 ),
    .B(\$3 ),
    .Y(\$5 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$37 ),
    .B(\$39 ),
    .Y(\$41 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$401  (
    .A(\$398 ),
    .B(\$400 ),
    .Y(\$402 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$405  (
    .A(\$402 ),
    .B(\$404 ),
    .Y(\$406 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$407  (
    .A(\$396 ),
    .B(\$406 ),
    .Y(\$408 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$409  (
    .A(1'h0),
    .B(1'h1),
    .S(\$408 ),
    .Y(\$auto$rtlil.cc:3092:Mux$629 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$410  (
    .A(iFCR_FIFOEnable),
    .B(iLSR_FIFOERR),
    .Y(\$411 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$412  (
    .A(iRXFIFOEmpty),
    .Y(\$413 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$416  (
    .A(\$413 ),
    .B(\$415 ),
    .Y(\$417 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$418  (
    .A(1'h0),
    .B(1'h1),
    .S(\$417 ),
    .Y(\$auto$rtlil.cc:3092:Mux$630 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(iLCR_DLAB),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$421  (
    .A(1'h0),
    .B(1'h1),
    .S(\$420 ),
    .Y(\$auto$rtlil.cc:3092:Mux$631 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$422  (
    .A(iTXRunning),
    .Y(\$423 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$426  (
    .A(\$423 ),
    .B(\$425 ),
    .Y(\$427 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$428  (
    .A(1'h0),
    .B(1'h1),
    .S(\$427 ),
    .Y(\$auto$rtlil.cc:3092:Mux$632 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$433  (
    .A(\$430 ),
    .B(\$432 ),
    .Y(\$434 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$435  (
    .A(iMCR_LOOP),
    .Y(\$436 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$437  (
    .A(iCTSn),
    .Y(\$438 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$439  (
    .A(\$436 ),
    .B(\$438 ),
    .Y(\$440 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$41 ),
    .B(\$43 ),
    .Y(\$45 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$441  (
    .A(\$434 ),
    .B(\$440 ),
    .Y(\$442 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$443  (
    .A(1'h0),
    .B(1'h1),
    .S(\$442 ),
    .Y(\$auto$rtlil.cc:3092:Mux$633 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$448  (
    .A(\$445 ),
    .B(\$447 ),
    .Y(\$449 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$450  (
    .A(iMCR_LOOP),
    .Y(\$451 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$452  (
    .A(iDSRn),
    .Y(\$453 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$454  (
    .A(\$451 ),
    .B(\$453 ),
    .Y(\$455 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$456  (
    .A(\$449 ),
    .B(\$455 ),
    .Y(\$457 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$458  (
    .A(1'h0),
    .B(1'h1),
    .S(\$457 ),
    .Y(\$auto$rtlil.cc:3092:Mux$634 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$46  (
    .A(1'h0),
    .B(1'h1),
    .S(\$45 ),
    .Y(\$auto$rtlil.cc:3092:Mux$604 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$463  (
    .A(\$460 ),
    .B(\$462 ),
    .Y(\$464 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$465  (
    .A(iMCR_LOOP),
    .Y(\$466 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$467  (
    .A(iRIn),
    .Y(\$468 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$469  (
    .A(\$466 ),
    .B(\$468 ),
    .Y(\$470 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$471  (
    .A(\$464 ),
    .B(\$470 ),
    .Y(\$472 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$473  (
    .A(1'h0),
    .B(1'h1),
    .S(\$472 ),
    .Y(\$auto$rtlil.cc:3092:Mux$635 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$478  (
    .A(\$475 ),
    .B(\$477 ),
    .Y(\$479 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$480  (
    .A(iMCR_LOOP),
    .Y(\$481 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$482  (
    .A(iDCDn),
    .Y(\$483 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$484  (
    .A(\$481 ),
    .B(\$483 ),
    .Y(\$485 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$486  (
    .A(\$479 ),
    .B(\$485 ),
    .Y(\$487 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$488  (
    .A(1'h0),
    .B(1'h1),
    .S(\$487 ),
    .Y(\$auto$rtlil.cc:3092:Mux$636 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(PADDR),
    .Y(\$50 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$495  (
    .A(\$492 ),
    .B(\$494 ),
    .Y(\$496 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$505  (
    .A(\$502 ),
    .B(\$504 ),
    .Y(\$506 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$48 ),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$521  (
    .A(\$518 ),
    .B(\$520 ),
    .Y(\$522 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$532  (
    .A(iFCR_FIFO64E),
    .Y(\$533 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$534  (
    .A(iTXFIFO16Full),
    .B(iTXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(\$auto$rtlil.cc:3092:Mux$639 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$535  (
    .A(iFCR_FIFOEnable),
    .Y(\$536 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$539  (
    .A(\$536 ),
    .B(\$538 ),
    .Y(\$540 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$543  (
    .A(iTXFIFOFull),
    .Y(\$544 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$545  (
    .A(\$542 ),
    .B(\$544 ),
    .Y(\$546 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$547  (
    .A(\$540 ),
    .B(\$546 ),
    .Y(\$548 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\$52 ),
    .B(\$54 ),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$551  (
    .A(\$548 ),
    .B(\$550 ),
    .Y(\$552 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$553  (
    .A(1'h0),
    .B(1'h1),
    .S(\$552 ),
    .Y(\$auto$rtlil.cc:3092:Mux$640 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$556  (
    .A(1'h0),
    .B(1'h1),
    .S(\$555 ),
    .Y(\$auto$rtlil.cc:3092:Mux$641 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$559  (
    .A(1'h0),
    .B(1'h1),
    .S(\$558 ),
    .Y(\$auto$rtlil.cc:3092:Mux$642 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$560  (
    .A(iFCR_FIFO64E),
    .Y(\$561 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$562  (
    .A(iRXFIFO16Full),
    .B(iRXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(\$auto$rtlil.cc:3092:Mux$643 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$563  (
    .A(iFCR_RXTrigger),
    .Y(\$564 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$565  (
    .A(iRXFIFOEmpty),
    .Y(\$566 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$567  (
    .A(\$564 ),
    .B(\$566 ),
    .Y(\$568 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$569  (
    .A(iFCR_RXTrigger),
    .B(2'h1),
    .Y(\$570 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$57  (
    .A(1'h0),
    .B(1'h1),
    .S(\$56 ),
    .Y(\$auto$rtlil.cc:3092:Mux$605 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$575  (
    .A(\$572 ),
    .B(\$574 ),
    .Y(\$576 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$577  (
    .A(\$570 ),
    .B(\$576 ),
    .Y(\$578 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$579  (
    .A(\$568 ),
    .B(\$578 ),
    .Y(\$580 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$581  (
    .A(iFCR_RXTrigger),
    .B(2'h2),
    .Y(\$582 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$585  (
    .A(\$582 ),
    .B(\$584 ),
    .Y(\$586 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$587  (
    .A(\$580 ),
    .B(\$586 ),
    .Y(\$588 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$589  (
    .A(iFCR_RXTrigger),
    .B(2'h3),
    .Y(\$590 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$593  (
    .A(\$590 ),
    .B(\$592 ),
    .Y(\$594 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$597  (
    .A(\$594 ),
    .B(\$596 ),
    .Y(\$598 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(PADDR),
    .B(3'h1),
    .Y(\$61 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$601  (
    .A(\$598 ),
    .B(\$600 ),
    .Y(\$602 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$603  (
    .A(\$588 ),
    .B(\$602 ),
    .Y(\$604 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$607  (
    .A(\$604 ),
    .B(\$606 ),
    .Y(\$608 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$609  (
    .A(1'h0),
    .B(1'h1),
    .S(\$608 ),
    .Y(\$auto$rtlil.cc:3092:Mux$644 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$610  (
    .A(iFCR_RXTrigger),
    .Y(\$611 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$612  (
    .A(iRXFIFOEmpty),
    .Y(\$613 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$614  (
    .A(\$611 ),
    .B(\$613 ),
    .Y(\$615 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$616  (
    .A(iFCR_RXTrigger),
    .B(2'h1),
    .Y(\$617 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\$59 ),
    .B(\$61 ),
    .Y(\$63 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$622  (
    .A(\$619 ),
    .B(\$621 ),
    .Y(\$623 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$624  (
    .A(\$617 ),
    .B(\$623 ),
    .Y(\$625 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$626  (
    .A(\$615 ),
    .B(\$625 ),
    .Y(\$627 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$628  (
    .A(iFCR_RXTrigger),
    .B(2'h2),
    .Y(\$629 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$632  (
    .A(\$629 ),
    .B(\$631 ),
    .Y(\$633 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$634  (
    .A(\$627 ),
    .B(\$633 ),
    .Y(\$635 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$636  (
    .A(iFCR_RXTrigger),
    .B(2'h3),
    .Y(\$637 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$640  (
    .A(\$637 ),
    .B(\$639 ),
    .Y(\$641 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$644  (
    .A(\$641 ),
    .B(\$643 ),
    .Y(\$645 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$648  (
    .A(\$645 ),
    .B(\$647 ),
    .Y(\$649 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$650  (
    .A(\$635 ),
    .B(\$649 ),
    .Y(\$651 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$654  (
    .A(\$651 ),
    .B(\$653 ),
    .Y(\$655 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$656  (
    .A(1'h0),
    .B(1'h1),
    .S(\$655 ),
    .Y(\$auto$rtlil.cc:3092:Mux$645 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$657  (
    .A(iFCR_FIFO64E),
    .Y(\$658 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$659  (
    .A(iRXFIFO16Trigger),
    .B(iRXFIFO64Trigger),
    .S(iFCR_FIFO64E),
    .Y(\$auto$rtlil.cc:3092:Mux$646 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$660  (
    .A(iMCR_LOOP),
    .Y(\$661 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$662  (
    .A(iSINr),
    .B(iSOUT),
    .S(iMCR[4]),
    .Y(\$auto$rtlil.cc:3092:Mux$647 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$663  (
    .A(iTXFIFOEmpty),
    .Y(\$664 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$665  (
    .A(iMCR_AFE),
    .Y(\$666 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$671  (
    .A(\$668 ),
    .B(\$670 ),
    .Y(\$672 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$673  (
    .A(\$666 ),
    .B(\$672 ),
    .Y(\$674 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$675  (
    .A(\$664 ),
    .B(\$674 ),
    .Y(\$676 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$677  (
    .A(1'h0),
    .B(1'h1),
    .S(\$676 ),
    .Y(\$auto$rtlil.cc:3092:Mux$648 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$68  (
    .A(1'h0),
    .B(1'h1),
    .S(\$67 ),
    .Y(\$auto$rtlil.cc:3092:Mux$606 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$696  (
    .A(iFCR_FIFOEnable),
    .Y(\$697 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$702  (
    .A(iFCR_FIFOEnable),
    .Y(\$703 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$704  (
    .A(iRXFIFOFull),
    .Y(\$705 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(PADDR),
    .B(3'h1),
    .Y(\$72 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$714  (
    .A(iMCR_RTS),
    .Y(\$715 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$720  (
    .A(\$717 ),
    .B(\$719 ),
    .Y(\$721 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$722  (
    .A(\$715 ),
    .B(\$721 ),
    .Y(\$723 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$726  (
    .A(iMCR_AFE),
    .Y(\$727 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\$70 ),
    .B(\$72 ),
    .Y(\$74 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$732  (
    .A(\$729 ),
    .B(\$731 ),
    .Y(\$733 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$734  (
    .A(\$727 ),
    .B(\$733 ),
    .Y(\$735 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$736  (
    .A(\$725 ),
    .B(\$735 ),
    .Y(\$737 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$742  (
    .A(iBaudtick16x),
    .Y(\$743 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$747  (
    .A(iMCR_OUT1),
    .Y(\$748 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$749  (
    .A(\$746 ),
    .B(\$748 ),
    .Y(\$750 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(iLCR_DLAB),
    .Y(\$76 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$754  (
    .A(iMCR_OUT2),
    .Y(\$755 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$756  (
    .A(\$753 ),
    .B(\$755 ),
    .Y(\$757 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$761  (
    .A(iRTS),
    .Y(\$762 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$763  (
    .A(\$760 ),
    .B(\$762 ),
    .Y(\$764 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$768  (
    .A(iMCR_DTR),
    .Y(\$769 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(\$74 ),
    .B(\$76 ),
    .Y(\$78 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$770  (
    .A(\$767 ),
    .B(\$769 ),
    .Y(\$771 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$777  (
    .A(\$774 ),
    .B(\$776 ),
    .Y(\$778 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$781  (
    .A(iLCR_DLAB),
    .Y(\$782 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$784  (
    .A(iLCR_DLAB),
    .Y(\$785 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(1'h0),
    .B(1'h1),
    .S(\$78 ),
    .Y(\$auto$rtlil.cc:3092:Mux$607 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(PADDR),
    .B(3'h2),
    .Y(\$83 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$86  (
    .A(1'h0),
    .B(1'h1),
    .S(\$85 ),
    .Y(\$auto$rtlil.cc:3092:Mux$608 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(PADDR),
    .B(3'h2),
    .Y(\$90 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\$88 ),
    .B(\$90 ),
    .Y(\$92 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$93  (
    .A(1'h0),
    .B(1'h1),
    .S(\$92 ),
    .Y(\$auto$rtlil.cc:3092:Mux$609 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(PADDR),
    .B(3'h3),
    .Y(\$97 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(\$95 ),
    .B(\$97 ),
    .Y(\$99 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$DTRN  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$DTRN$772 ),
    .Q(DTRN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT1N  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$OUT1N$751 ),
    .Q(OUT1N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT2N  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$OUT2N$758 ),
    .Q(OUT2N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$RTSN  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$RTSN$765 ),
    .Q(RTSN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$SOUT  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$SOUT$779 ),
    .Q(SOUT)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBAUDOUTN  (
    .AD(1'h1),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iBAUDOUTN$744 ),
    .Q(iBAUDOUTN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iCharTimeout  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iCharTimeout$224 ),
    .Q(iCharTimeout)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iDLL  (
    .AD(8'h01),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iDLL$133 ),
    .Q(iDLL)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iDLM  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iDLM$136 ),
    .Q(iDLM)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_DMAMode  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_DMAMode$273 ),
    .Q(iFCR_DMAMode)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_FIFO64E  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_FIFO64E$274 ),
    .Q(iFCR_FIFO64E)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_FIFOEnable  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_FIFOEnable$270 ),
    .Q(iFCR_FIFOEnable)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_RXFIFOReset  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_RXFIFOReset$271 ),
    .Q(iFCR_RXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iFCR_RXTrigger  (
    .AD(2'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_RXTrigger$275 ),
    .Q(iFCR_RXTrigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_TXFIFOReset  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFCR_TXFIFOReset$272 ),
    .Q(iFCR_TXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$iFECounter  (
    .AD(7'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iFECounter$362 ),
    .Q(iFECounter)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:254.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iIER  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D({ 4'h0, \$iIER[3:0]$141  }),
    .Q(iIER)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:400.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iLCR  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLCR$280 ),
    .Q(iLCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_BI  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLSR_BI$331 ),
    .Q(iLSR_BI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FE  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FE$325 ),
    .Q(iLSR_FE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FIFOERR  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FIFOERR$341 ),
    .Q(iLSR_FIFOERR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_OE  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLSR_OE$313 ),
    .Q(iLSR_OE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_PE  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iLSR_PE$319 ),
    .Q(iLSR_PE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:422.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iMCR  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D({ 2'h0, \$iMCR[5:0]$285  }),
    .Q(iMCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_TERI  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iMSR_TERI$516 ),
    .Q(iMSR_TERI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dCTS  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dCTS$500 ),
    .Q(iMSR_dCTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDCD  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDCD$526 ),
    .Q(iMSR_dDCD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDSR  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDSR$510 ),
    .Q(iMSR_dDSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:812.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRTS  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iRTS$739 ),
    .Q(iRTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOClear  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOClear$708 ),
    .Q(iRXFIFOClear)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iRXFIFOD  (
    .AD(11'h000),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOD$710 ),
    .Q(iRXFIFOD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOWrite  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOWrite$709 ),
    .Q(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:614.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iSCR  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iSCR$531 ),
    .Q(iSCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:292.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTHRInterrupt  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTHRInterrupt$173 ),
    .Q(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iTSR  (
    .AD(8'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTSR$687 ),
    .Q(iTSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXFIFORead  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTXFIFORead$688 ),
    .Q(iTXFIFORead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXRunning  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTXRunning$690 ),
    .Q(iTXRunning)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXStart  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTXStart$689 ),
    .Q(iTXStart)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$iTimeoutCount  (
    .AD(6'h00),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$iTimeoutCount$215 ),
    .Q(iTimeoutCount)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rx_State  (
    .AD(1'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$rx_State$711 ),
    .Q(rx_State)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$tx_State  (
    .AD(2'h0),
    .ALOAD(RSTN),
    .CLK(CLK),
    .D(\$tx_State$691 ),
    .Q(tx_State)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:897.18-897.38|rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13378  (
    .A(iIER),
    .B(iDLM),
    .S(iLCR[7]),
    .Y(\$procmux$13378_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13380  (
    .A(8'hxx),
    .B(\$procmux$13378_Y ),
    .S(\$procmux$13381_CMP ),
    .Y(\$procmux$13380_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13381_CMP0  (
    .A(PADDR),
    .B(3'h1),
    .Y(\$procmux$13381_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd8)
  ) \$procmux$13382  (
    .A(8'hxx),
    .B({ \$PRDATA[7:0]$783 , \$PRDATA[7:0]$786 , iFCR_FIFOEnable, iFCR_FIFOEnable, \$auto$rtlil.cc:3092:Mux$619 , 1'h0, iIIR[3:0], iLCR, iMCR, \$411 , \$auto$rtlil.cc:3092:Mux$632 , \$auto$rtlil.cc:3092:Mux$631 , iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, \$auto$rtlil.cc:3092:Mux$630 , \$auto$rtlil.cc:3092:Mux$636 , \$auto$rtlil.cc:3092:Mux$635 , \$auto$rtlil.cc:3092:Mux$634 , \$auto$rtlil.cc:3092:Mux$633 , iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }),
    .S({ \$procmux$13392_CMP , \$procmux$13390_CMP , \$procmux$13388_CMP , \$procmux$13387_CMP , \$procmux$13386_CMP , \$procmux$13385_CMP , \$procmux$13384_CMP , \$procmux$13383_CMP  }),
    .Y(\$procmux$13382_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13383_CMP0  (
    .A(PADDR),
    .B(3'h7),
    .Y(\$procmux$13383_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:927.13-927.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13384_CMP0  (
    .A(PADDR),
    .B(3'h6),
    .Y(\$procmux$13384_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:922.13-922.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13385_CMP0  (
    .A(PADDR),
    .B(3'h5),
    .Y(\$procmux$13385_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:917.13-917.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13386_CMP0  (
    .A(PADDR),
    .B(3'h4),
    .Y(\$procmux$13386_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:912.13-912.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13387_CMP0  (
    .A(PADDR),
    .B(3'h3),
    .Y(\$procmux$13387_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:907.13-907.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13388_CMP0  (
    .A(PADDR),
    .B(3'h2),
    .Y(\$procmux$13388_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13390_CMP0  (
    .A(PADDR),
    .B(3'h1),
    .Y(\$procmux$13390_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13392_CMP0  (
    .A(PADDR),
    .Y(\$procmux$13392_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:885.18-885.38|rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13401  (
    .A(iRXFIFOQ[7:0]),
    .B(iDLL),
    .S(iLCR[7]),
    .Y(\$procmux$13401_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13403  (
    .A(8'hxx),
    .B(\$procmux$13401_Y ),
    .S(\$procmux$13404_CMP ),
    .Y(\$procmux$13403_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13404_CMP0  (
    .A(PADDR),
    .Y(\$procmux$13404_CMP )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:874.13-874.27|rtl/apb_uart/apb_uart.sv:872.8-875.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13405  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13406_CMP ),
    .Y(\$procmux$13405_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:869.13-869.27|rtl/apb_uart/apb_uart.sv:867.8-870.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13412  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13413_CMP ),
    .Y(\$procmux$13412_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:864.13-864.27|rtl/apb_uart/apb_uart.sv:862.8-865.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13418  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13419_CMP ),
    .Y(\$procmux$13418_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:859.13-859.28|rtl/apb_uart/apb_uart.sv:857.8-860.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13423  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13424_CMP ),
    .Y(\$procmux$13423_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:854.13-854.28|rtl/apb_uart/apb_uart.sv:852.8-855.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13427  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13428_CMP ),
    .Y(\$procmux$13427_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:849.13-849.32|rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13430  (
    .A(1'h1),
    .B(1'h0),
    .S(iBaudtick16x),
    .Y(\$procmux$13430_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:825.13-825.27|rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13432  (
    .A(iRTS),
    .B(1'h1),
    .S(\$procmux$13433_CMP ),
    .Y(\$procmux$13432_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13435  (
    .A(\$procmux$13432_Y ),
    .B(1'hx),
    .S(\$procmux$13436_CMP ),
    .Y(\$procmux$13435_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13439  (
    .A(\$iRTS$738 ),
    .B(1'h0),
    .S(\$procmux$13440_CMP ),
    .Y(\$procmux$13439_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:805.24-805.45|rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13441  (
    .A(1'h1),
    .B(1'h0),
    .S(\$auto$rtlil.cc:3092:Mux$643 ),
    .Y(\$procmux$13441_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13444  (
    .A(1'hx),
    .B(\$procmux$13441_Y ),
    .S(iFCR_FIFOEnable),
    .Y(\$procmux$13444_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13446  (
    .A(1'hx),
    .B(\$procmux$13444_Y ),
    .S(\$procmux$13447_CMP ),
    .Y(\$procmux$13446_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13450  (
    .A(1'h1),
    .B(\$iRXFIFOWrite$706 ),
    .S(iFCR_FIFOEnable),
    .Y(\$procmux$13450_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13452  (
    .A(1'hx),
    .B(\$procmux$13450_Y ),
    .S(\$procmux$13453_CMP ),
    .Y(\$procmux$13452_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$13455  (
    .A(1'hx),
    .B({ \$rx_State$701 , 1'h0 }),
    .S({ \$procmux$13458_CMP , \$procmux$13456_CMP  }),
    .Y(\$procmux$13455_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13458_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13458_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13462  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13463_CMP ),
    .Y(\$procmux$13462_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13464  (
    .A(\$procmux$13462_Y ),
    .B(1'hx),
    .S(rx_State),
    .Y(\$procmux$13464_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13465_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13465_CMP )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:794.29-794.50|rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13468  (
    .A(1'h1),
    .B(iFCR_RXFIFOReset),
    .S(iFCR_FIFOEnable),
    .Y(\$procmux$13468_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13470  (
    .A(1'hx),
    .B(\$procmux$13468_Y ),
    .S(\$procmux$13471_CMP ),
    .Y(\$procmux$13470_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13472  (
    .A(\$procmux$13470_Y ),
    .B(1'hx),
    .S(rx_State),
    .Y(\$procmux$13472_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13473_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13473_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$13477  (
    .A(iRXFIFOD),
    .B({ iRXBI, iRXFE, iRXPE, iRXData }),
    .S(\$procmux$13478_CMP ),
    .Y(\$procmux$13477_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$13479  (
    .A(\$procmux$13477_Y ),
    .B(11'hxxx),
    .S(rx_State),
    .Y(\$procmux$13479_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13480_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13480_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13484  (
    .A(iFCR_RXFIFOReset),
    .B(\$iRXFIFOClear$698 ),
    .S(\$procmux$13485_CMP ),
    .Y(\$procmux$13484_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13486  (
    .A(\$procmux$13484_Y ),
    .B(1'hx),
    .S(rx_State),
    .Y(\$procmux$13486_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13487_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13487_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$13490  (
    .A(\$iRXFIFOD$700 ),
    .B(iRXFIFOD),
    .S(rx_State),
    .Y(\$procmux$13490_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13491_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13491_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13493  (
    .A(1'h0),
    .B(\$iRXFIFOWrite$707 ),
    .S(\$procmux$13494_CMP ),
    .Y(\$procmux$13493_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13497  (
    .A(\$iRXFIFOClear$699 ),
    .B(iFCR_RXFIFOReset),
    .S(rx_State),
    .Y(\$procmux$13497_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13498_CMP0  (
    .A(rx_State),
    .Y(\$procmux$13498_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:761.24-761.42|rtl/apb_uart/apb_uart.sv:760.22-763.42" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13501  (
    .A(2'h2),
    .B(2'h3),
    .S(\$procmux$13502_CMP ),
    .Y(\$procmux$13501_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13503  (
    .A(2'hx),
    .B(\$procmux$13501_Y ),
    .S(\$procmux$13504_CMP ),
    .Y(\$procmux$13503_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13504_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$procmux$13504_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd2)
  ) \$procmux$13505  (
    .A(2'hx),
    .B({ \$tx_State$683 , 2'h2, \$tx_State$686 , 2'h0 }),
    .S({ \$procmux$13511_CMP , \$procmux$13509_CMP , \$procmux$13508_CMP , \$procmux$13506_CMP  }),
    .Y(\$procmux$13505_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13506_CMP0  (
    .A(tx_State),
    .B(2'h3),
    .Y(\$procmux$13506_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13508_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$procmux$13508_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13509_CMP0  (
    .A(tx_State),
    .B(2'h1),
    .Y(\$procmux$13509_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13511_CMP0  (
    .A(tx_State),
    .Y(\$procmux$13511_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:744.24-747.27|rtl/apb_uart/apb_uart.sv:743.22-749.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13516  (
    .A(2'h0),
    .B(2'h1),
    .S(\$procmux$13517_CMP ),
    .Y(\$procmux$13516_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13518  (
    .A(2'hx),
    .B(\$procmux$13516_Y ),
    .S(\$procmux$13519_CMP ),
    .Y(\$procmux$13518_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13519_CMP0  (
    .A(tx_State),
    .Y(\$procmux$13519_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:744.24-747.27|rtl/apb_uart/apb_uart.sv:743.22-749.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13524  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13525_CMP ),
    .Y(\$procmux$13524_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13526  (
    .A(1'hx),
    .B(\$procmux$13524_Y ),
    .S(\$procmux$13527_CMP ),
    .Y(\$procmux$13526_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13527_CMP0  (
    .A(tx_State),
    .Y(\$procmux$13527_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13530  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13531_CMP ),
    .Y(\$procmux$13530_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13531_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$procmux$13531_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$13534  (
    .A(1'h0),
    .B({ \$iTXStart$682 , 2'h3 }),
    .S({ \$procmux$13538_CMP , \$procmux$13536_CMP , \$procmux$13535_CMP  }),
    .Y(\$procmux$13534_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13535_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$procmux$13535_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13536_CMP0  (
    .A(tx_State),
    .B(2'h1),
    .Y(\$procmux$13536_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13538_CMP0  (
    .A(tx_State),
    .Y(\$procmux$13538_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13541  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13542_CMP ),
    .Y(\$procmux$13541_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13542_CMP0  (
    .A(tx_State),
    .B(2'h1),
    .Y(\$procmux$13542_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13545  (
    .A(iTSR),
    .B(iTXFIFOQ),
    .S(\$procmux$13546_CMP ),
    .Y(\$procmux$13545_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13546_CMP0  (
    .A(tx_State),
    .B(2'h1),
    .Y(\$procmux$13546_CMP )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:624.13-624.34|rtl/apb_uart/apb_uart.sv:622.8-625.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13547  (
    .A(iSCR),
    .B(PWDATA[7:0]),
    .S(\$procmux$13548_CMP ),
    .Y(\$procmux$13547_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:601.13-601.32|rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13549  (
    .A(iMSR_dDCD),
    .B(1'h0),
    .S(\$procmux$13550_CMP ),
    .Y(\$procmux$13549_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13552  (
    .A(\$procmux$13549_Y ),
    .B(1'hx),
    .S(\$procmux$13553_CMP ),
    .Y(\$procmux$13552_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13559  (
    .A(\$iMSR_dDCD$525 ),
    .B(1'h1),
    .S(\$procmux$13560_CMP ),
    .Y(\$procmux$13559_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:593.13-593.32|rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13564  (
    .A(iMSR_TERI),
    .B(1'h0),
    .S(\$procmux$13565_CMP ),
    .Y(\$procmux$13564_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13567  (
    .A(\$procmux$13564_Y ),
    .B(1'hx),
    .S(\$procmux$13568_CMP ),
    .Y(\$procmux$13567_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13573  (
    .A(\$iMSR_TERI$515 ),
    .B(1'h1),
    .S(\$procmux$13574_CMP ),
    .Y(\$procmux$13573_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:585.13-585.32|rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13577  (
    .A(iMSR_dDSR),
    .B(1'h0),
    .S(\$procmux$13578_CMP ),
    .Y(\$procmux$13577_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13580  (
    .A(\$procmux$13577_Y ),
    .B(1'hx),
    .S(\$procmux$13581_CMP ),
    .Y(\$procmux$13580_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13585  (
    .A(\$iMSR_dDSR$509 ),
    .B(1'h1),
    .S(\$procmux$13586_CMP ),
    .Y(\$procmux$13585_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:577.13-577.32|rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13588  (
    .A(iMSR_dCTS),
    .B(1'h0),
    .S(\$procmux$13589_CMP ),
    .Y(\$procmux$13588_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13591  (
    .A(\$procmux$13588_Y ),
    .B(1'hx),
    .S(\$procmux$13592_CMP ),
    .Y(\$procmux$13591_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13595  (
    .A(\$iMSR_dCTS$499 ),
    .B(1'h1),
    .S(\$procmux$13596_CMP ),
    .Y(\$procmux$13595_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:507.18-507.47|rtl/apb_uart/apb_uart.sv:505.18-508.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13597  (
    .A(iFECounter),
    .B(\$359 [6:0]),
    .S(\$procmux$13598_CMP ),
    .Y(\$procmux$13597_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:503.18-503.47|rtl/apb_uart/apb_uart.sv:501.13-508.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13600  (
    .A(\$procmux$13597_Y ),
    .B(7'hxx),
    .S(\$procmux$13601_CMP ),
    .Y(\$procmux$13600_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13603  (
    .A(\$procmux$13600_Y ),
    .B(7'hxx),
    .S(\$procmux$13604_CMP ),
    .Y(\$procmux$13603_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:503.18-503.47|rtl/apb_uart/apb_uart.sv:501.13-508.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13612  (
    .A(\$iFECounter$360 ),
    .B(\$351 [6:0]),
    .S(\$procmux$13613_CMP ),
    .Y(\$procmux$13612_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13615  (
    .A(\$procmux$13612_Y ),
    .B(7'hxx),
    .S(\$procmux$13616_CMP ),
    .Y(\$procmux$13615_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13624  (
    .A(\$iFECounter$361 ),
    .B(7'h00),
    .S(\$procmux$13625_CMP ),
    .Y(\$procmux$13624_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:493.13-493.35|rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13631  (
    .A(iLSR_FIFOERR),
    .B(1'h0),
    .S(\$procmux$13632_CMP ),
    .Y(\$procmux$13631_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13634  (
    .A(\$procmux$13631_Y ),
    .B(1'hx),
    .S(\$procmux$13635_CMP ),
    .Y(\$procmux$13634_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13642  (
    .A(\$iLSR_FIFOERR$340 ),
    .B(1'h1),
    .S(\$procmux$13643_CMP ),
    .Y(\$procmux$13642_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:485.13-485.30|rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13648  (
    .A(iLSR_BI),
    .B(1'h0),
    .S(\$procmux$13649_CMP ),
    .Y(\$procmux$13648_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13651  (
    .A(\$procmux$13648_Y ),
    .B(1'hx),
    .S(\$procmux$13652_CMP ),
    .Y(\$procmux$13651_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13658  (
    .A(\$iLSR_BI$330 ),
    .B(1'h1),
    .S(\$procmux$13659_CMP ),
    .Y(\$procmux$13658_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:477.13-477.30|rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13663  (
    .A(iLSR_FE),
    .B(1'h0),
    .S(\$procmux$13664_CMP ),
    .Y(\$procmux$13663_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13666  (
    .A(\$procmux$13663_Y ),
    .B(1'hx),
    .S(\$procmux$13667_CMP ),
    .Y(\$procmux$13666_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13672  (
    .A(\$iLSR_FE$324 ),
    .B(1'h1),
    .S(\$procmux$13673_CMP ),
    .Y(\$procmux$13672_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:469.13-469.30|rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13676  (
    .A(iLSR_PE),
    .B(1'h0),
    .S(\$procmux$13677_CMP ),
    .Y(\$procmux$13676_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13679  (
    .A(\$procmux$13676_Y ),
    .B(1'hx),
    .S(\$procmux$13680_CMP ),
    .Y(\$procmux$13679_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13684  (
    .A(\$iLSR_PE$318 ),
    .B(1'h1),
    .S(\$procmux$13685_CMP ),
    .Y(\$procmux$13684_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:461.13-461.30|rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13687  (
    .A(iLSR_OE),
    .B(1'h0),
    .S(\$procmux$13688_CMP ),
    .Y(\$procmux$13687_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13690  (
    .A(\$procmux$13687_Y ),
    .B(1'hx),
    .S(\$procmux$13691_CMP ),
    .Y(\$procmux$13690_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13694  (
    .A(\$iLSR_OE$312 ),
    .B(1'h1),
    .S(\$procmux$13695_CMP ),
    .Y(\$procmux$13694_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:431.11-431.36|rtl/apb_uart/apb_uart.sv:429.8-432.12" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13696  (
    .A(iMCR[5:0]),
    .B(PWDATA[5:0]),
    .S(\$procmux$13697_CMP ),
    .Y(\$procmux$13696_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:410.13-410.34|rtl/apb_uart/apb_uart.sv:408.8-411.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13698  (
    .A(iLCR),
    .B(PWDATA[7:0]),
    .S(\$procmux$13699_CMP ),
    .Y(\$procmux$13698_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:387.18-387.44|rtl/apb_uart/apb_uart.sv:385.13-388.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13700  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13701_CMP ),
    .Y(\$procmux$13700_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13704  (
    .A(1'hx),
    .B(\$procmux$13700_Y ),
    .S(\$procmux$13705_CMP ),
    .Y(\$procmux$13704_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:382.18-382.44|rtl/apb_uart/apb_uart.sv:380.13-383.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13706  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13707_CMP ),
    .Y(\$procmux$13706_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13709  (
    .A(1'hx),
    .B(\$procmux$13706_Y ),
    .S(\$procmux$13710_CMP ),
    .Y(\$procmux$13709_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:377.18-377.44|rtl/apb_uart/apb_uart.sv:375.13-378.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13711  (
    .A(iFCR_FIFO64E),
    .B(PWDATA[5]),
    .S(\$procmux$13712_CMP ),
    .Y(\$procmux$13711_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13713  (
    .A(1'hx),
    .B(\$procmux$13711_Y ),
    .S(\$procmux$13714_CMP ),
    .Y(\$procmux$13713_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13718  (
    .A(iFCR_RXTrigger),
    .B(PWDATA[7:6]),
    .S(\$procmux$13719_CMP ),
    .Y(\$procmux$13718_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13723  (
    .A(iFCR_FIFO64E),
    .B(\$iFCR_FIFO64E$231 ),
    .S(\$procmux$13724_CMP ),
    .Y(\$procmux$13723_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13728  (
    .A(iFCR_DMAMode),
    .B(PWDATA[3]),
    .S(\$procmux$13729_CMP ),
    .Y(\$procmux$13728_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13733  (
    .A(1'h0),
    .B(\$iFCR_TXFIFOReset$269 ),
    .S(\$procmux$13734_CMP ),
    .Y(\$procmux$13733_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13738  (
    .A(1'h0),
    .B(\$iFCR_RXFIFOReset$250 ),
    .S(\$procmux$13739_CMP ),
    .Y(\$procmux$13738_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13743  (
    .A(iFCR_FIFOEnable),
    .B(PWDATA[0]),
    .S(\$procmux$13744_CMP ),
    .Y(\$procmux$13743_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13747  (
    .A(1'h0),
    .B(\$iCharTimeout$223 ),
    .S(\$procmux$13748_CMP ),
    .Y(\$procmux$13747_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:346.18-346.40|rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13751  (
    .A(iCharTimeout),
    .B(1'h1),
    .S(\$procmux$13752_CMP ),
    .Y(\$procmux$13751_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13754  (
    .A(\$procmux$13751_Y ),
    .B(1'hx),
    .S(\$procmux$13755_CMP ),
    .Y(\$procmux$13754_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13756  (
    .A(1'hx),
    .B(\$procmux$13754_Y ),
    .S(\$procmux$13757_CMP ),
    .Y(\$procmux$13756_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13762  (
    .A(\$iCharTimeout$222 ),
    .B(1'h0),
    .S(\$procmux$13763_CMP ),
    .Y(\$procmux$13762_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13764  (
    .A(1'hx),
    .B(\$procmux$13762_Y ),
    .S(\$procmux$13765_CMP ),
    .Y(\$procmux$13764_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:336.13-336.48|rtl/apb_uart/apb_uart.sv:334.13-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13767  (
    .A(iTimeoutCount),
    .B(\$213 [5:0]),
    .S(\$procmux$13768_CMP ),
    .Y(\$procmux$13767_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13770  (
    .A(\$procmux$13767_Y ),
    .B(6'hxx),
    .S(\$procmux$13771_CMP ),
    .Y(\$procmux$13770_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13774  (
    .A(\$iTimeoutCount$214 ),
    .B(6'h00),
    .S(\$procmux$13775_CMP ),
    .Y(\$procmux$13774_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:305.13-305.36|rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13776  (
    .A(iTHRInterrupt),
    .B(1'h0),
    .S(\$procmux$13777_CMP ),
    .Y(\$procmux$13776_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13779  (
    .A(\$procmux$13776_Y ),
    .B(1'hx),
    .S(\$procmux$13780_CMP ),
    .Y(\$procmux$13779_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13783  (
    .A(\$iTHRInterrupt$172 ),
    .B(1'h1),
    .S(\$procmux$13784_CMP ),
    .Y(\$procmux$13783_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:263.13-263.38|rtl/apb_uart/apb_uart.sv:261.8-264.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13785  (
    .A(iIER[3:0]),
    .B(PWDATA[3:0]),
    .S(\$procmux$13786_CMP ),
    .Y(\$procmux$13785_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:250.13-250.34|rtl/apb_uart/apb_uart.sv:248.8-251.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13787  (
    .A(iDLM),
    .B(PWDATA[7:0]),
    .S(\$procmux$13788_CMP ),
    .Y(\$procmux$13787_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:246.13-246.34|rtl/apb_uart/apb_uart.sv:244.8-247.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13790  (
    .A(iDLL),
    .B(PWDATA[7:0]),
    .S(\$procmux$13791_CMP ),
    .Y(\$procmux$13790_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:630.14" */
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER(iBaudgenDiv),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:637.29" */
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:517.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:536.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:554.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:542.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:548.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:516.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:229.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:231.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:230.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:232.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:273.16" */
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR_AFE),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR(iLSR[4:0]),
    .MSR(iMSR[3:0]),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:285.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:225.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:227.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:226.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:228.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:224.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:515.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:642.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:697.15" */
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR_EPS),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR_PEN),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR_SP),
    .STB(iLCR_STB),
    .WLS(iLCR_WLS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:663.37" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRXFIFORead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:681.18" */
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR_BC),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR_EPS),
    .PEN(iLCR_PEN),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR_SP),
    .STB(iLCR_STB),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR_WLS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:648.36" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iTXFIFOClear),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iTXFIFOEmpty),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign iWrite = \$auto$rtlil.cc:3092:Mux$600 ;
  assign iRead = \$auto$rtlil.cc:3092:Mux$601 ;
  assign iRST = \$auto$rtlil.cc:3092:Mux$602 ;
  assign iRBRRead = \$auto$rtlil.cc:3092:Mux$603 ;
  assign iTHRWrite = \$auto$rtlil.cc:3092:Mux$604 ;
  assign iDLLWrite = \$auto$rtlil.cc:3092:Mux$605 ;
  assign iDLMWrite = \$auto$rtlil.cc:3092:Mux$606 ;
  assign iIERWrite = \$auto$rtlil.cc:3092:Mux$607 ;
  assign iIIRRead = \$auto$rtlil.cc:3092:Mux$608 ;
  assign iFCRWrite = \$auto$rtlil.cc:3092:Mux$609 ;
  assign iLCRWrite = \$auto$rtlil.cc:3092:Mux$610 ;
  assign iMCRWrite = \$auto$rtlil.cc:3092:Mux$611 ;
  assign iLSRRead = \$auto$rtlil.cc:3092:Mux$612 ;
  assign iMSRRead = \$auto$rtlil.cc:3092:Mux$613 ;
  assign iSCRWrite = \$auto$rtlil.cc:3092:Mux$614 ;
  assign iIER_ERBI = iIER[0];
  assign iIER_ETBEI = iIER[1];
  assign iIER_ELSI = iIER[2];
  assign iIER_EDSSI = iIER[3];
  assign iRDAInterrupt = \$auto$rtlil.cc:3092:Mux$618 ;
  assign iIIR_PI = iIIR[0];
  assign iIIR_ID0 = iIIR[1];
  assign iIIR_ID1 = iIIR[2];
  assign iIIR_ID2 = iIIR[3];
  assign iIIR_FIFO64 = iIIR[5];
  assign iIIR[4] = 1'h0;
  assign iIIR[5] = \$auto$rtlil.cc:3092:Mux$619 ;
  assign iIIR[6] = iFCR_FIFOEnable;
  assign iIIR[7] = iFCR_FIFOEnable;
  assign iFCR[0] = iFCR_FIFOEnable;
  assign iFCR[1] = iFCR_RXFIFOReset;
  assign iFCR[2] = iFCR_TXFIFOReset;
  assign iFCR[3] = iFCR_DMAMode;
  assign iFCR[4] = 1'h0;
  assign iFCR[5] = iFCR_FIFO64E;
  assign iFCR[7:6] = iFCR_RXTrigger;
  assign iLCR_WLS = iLCR[1:0];
  assign iLCR_STB = iLCR[2];
  assign iLCR_PEN = iLCR[3];
  assign iLCR_EPS = iLCR[4];
  assign iLCR_SP = iLCR[5];
  assign iLCR_BC = iLCR[6];
  assign iLCR_DLAB = iLCR[7];
  assign iMCR_DTR = iMCR[0];
  assign iMCR_RTS = iMCR[1];
  assign iMCR_OUT1 = iMCR[2];
  assign iMCR_OUT2 = iMCR[3];
  assign iMCR_LOOP = iMCR[4];
  assign iMCR_AFE = iMCR[5];
  assign iRXFIFOPE = \$auto$rtlil.cc:3092:Mux$625 ;
  assign iRXFIFOFE = \$auto$rtlil.cc:3092:Mux$626 ;
  assign iRXFIFOBI = \$auto$rtlil.cc:3092:Mux$627 ;
  assign iFEIncrement = \$auto$rtlil.cc:3092:Mux$628 ;
  assign iFEDecrement = \$auto$rtlil.cc:3092:Mux$629 ;
  assign iLSR[0] = iLSR_DR;
  assign iLSR[1] = iLSR_OE;
  assign iLSR[2] = iLSR_PE;
  assign iLSR[3] = iLSR_FE;
  assign iLSR[4] = iLSR_BI;
  assign iLSR[5] = iLSR_THRE;
  assign iLSR[6] = iLSR_TEMT;
  assign iLSR[7] = \$411 ;
  assign iLSR_DR = \$auto$rtlil.cc:3092:Mux$630 ;
  assign iLSR_THRE = \$auto$rtlil.cc:3092:Mux$631 ;
  assign iLSR_TEMT = \$auto$rtlil.cc:3092:Mux$632 ;
  assign iMSR_CTS = \$auto$rtlil.cc:3092:Mux$633 ;
  assign iMSR_DSR = \$auto$rtlil.cc:3092:Mux$634 ;
  assign iMSR_RI = \$auto$rtlil.cc:3092:Mux$635 ;
  assign iMSR_DCD = \$auto$rtlil.cc:3092:Mux$636 ;
  assign iMSR[0] = iMSR_dCTS;
  assign iMSR[1] = iMSR_dDSR;
  assign iMSR[2] = iMSR_TERI;
  assign iMSR[3] = iMSR_dDCD;
  assign iMSR[4] = iMSR_CTS;
  assign iMSR[5] = iMSR_DSR;
  assign iMSR[6] = iMSR_RI;
  assign iMSR[7] = iMSR_DCD;
  assign iBaudgenDiv = { iDLM, iDLL };
  assign iTXFIFO16Full = iTXFIFOUsage[4];
  assign iTXFIFOFull = \$auto$rtlil.cc:3092:Mux$639 ;
  assign iTXFIFOWrite = \$auto$rtlil.cc:3092:Mux$640 ;
  assign iTXFIFOClear = \$auto$rtlil.cc:3092:Mux$641 ;
  assign iRXFIFORead = \$auto$rtlil.cc:3092:Mux$642 ;
  assign iRXFIFO16Full = iRXFIFOUsage[4];
  assign iRXFIFOFull = \$auto$rtlil.cc:3092:Mux$643 ;
  assign iRBR = iRXFIFOQ[7:0];
  assign iRXFIFO16Trigger = \$auto$rtlil.cc:3092:Mux$644 ;
  assign iRXFIFO64Trigger = \$auto$rtlil.cc:3092:Mux$645 ;
  assign iRXFIFOTrigger = \$auto$rtlil.cc:3092:Mux$646 ;
  assign iTXClear = 1'h0;
  assign iRXClear = 1'h0;
  assign iSIN = \$auto$rtlil.cc:3092:Mux$647 ;
  assign iTXEnable = \$auto$rtlil.cc:3092:Mux$648 ;
  assign PRDATA = { 24'h000000, \$PRDATA[7:0]$787  };
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign \$procmux$13379_CMP  = \$785 ;
  assign \$PRDATA[7:0]$786  = \$procmux$13380_Y ;
  assign \$PRDATA[7:0]$787  = \$procmux$13382_Y ;
  assign \$procmux$13402_CMP  = \$782 ;
  assign \$PRDATA[7:0]$783  = \$procmux$13403_Y ;
  assign \$procmux$13406_CMP  = \$778 ;
  assign \$SOUT$779  = \$procmux$13405_Y ;
  assign \$procmux$13413_CMP  = \$771 ;
  assign \$DTRN$772  = \$procmux$13412_Y ;
  assign \$procmux$13419_CMP  = \$764 ;
  assign \$RTSN$765  = \$procmux$13418_Y ;
  assign \$procmux$13424_CMP  = \$757 ;
  assign \$OUT2N$758  = \$procmux$13423_Y ;
  assign \$procmux$13428_CMP  = \$750 ;
  assign \$OUT1N$751  = \$procmux$13427_Y ;
  assign \$procmux$13431_CMP  = \$743 ;
  assign \$iBAUDOUTN$744  = \$procmux$13430_Y ;
  assign \$procmux$13433_CMP  = \$737 ;
  assign \$procmux$13436_CMP  = \$723 ;
  assign \$iRTS$738  = \$procmux$13435_Y ;
  assign \$procmux$13440_CMP  = \$723 ;
  assign \$iRTS$739  = \$procmux$13439_Y ;
  assign \$procmux$13442_CMP  = \$705 ;
  assign \$procmux$13445_CMP  = \$703 ;
  assign \$procmux$13447_CMP  = rx_State;
  assign \$iRXFIFOWrite$706  = \$procmux$13446_Y ;
  assign \$procmux$13451_CMP  = \$703 ;
  assign \$procmux$13453_CMP  = rx_State;
  assign \$iRXFIFOWrite$707  = \$procmux$13452_Y ;
  assign \$procmux$13456_CMP  = rx_State;
  assign \$rx_State$711  = \$procmux$13455_Y ;
  assign \$procmux$13463_CMP  = \$695 ;
  assign \$rx_State$701  = \$procmux$13464_Y ;
  assign \$procmux$13469_CMP  = \$697 ;
  assign \$procmux$13471_CMP  = \$695 ;
  assign \$iRXFIFOClear$698  = \$procmux$13472_Y ;
  assign \$procmux$13478_CMP  = \$695 ;
  assign \$iRXFIFOD$700  = \$procmux$13479_Y ;
  assign \$procmux$13485_CMP  = \$695 ;
  assign \$iRXFIFOClear$699  = \$procmux$13486_Y ;
  assign \$iRXFIFOD$710  = \$procmux$13490_Y ;
  assign \$procmux$13494_CMP  = rx_State;
  assign \$iRXFIFOWrite$709  = \$procmux$13493_Y ;
  assign \$iRXFIFOClear$708  = \$procmux$13497_Y ;
  assign \$procmux$13502_CMP  = \$685 ;
  assign \$tx_State$686  = \$procmux$13503_Y ;
  assign \$tx_State$691  = \$procmux$13505_Y ;
  assign \$procmux$13517_CMP  = \$681 ;
  assign \$tx_State$683  = \$procmux$13518_Y ;
  assign \$procmux$13525_CMP  = \$681 ;
  assign \$iTXStart$682  = \$procmux$13526_Y ;
  assign \$iTXRunning$690  = \$procmux$13530_Y ;
  assign \$iTXStart$689  = \$procmux$13534_Y ;
  assign \$iTXFIFORead$688  = \$procmux$13541_Y ;
  assign \$iTSR$687  = \$procmux$13545_Y ;
  assign \$procmux$13548_CMP  = \$530 ;
  assign \$iSCR$531  = \$procmux$13547_Y ;
  assign \$procmux$13550_CMP  = \$524 ;
  assign \$procmux$13553_CMP  = \$522 ;
  assign \$iMSR_dDCD$525  = \$procmux$13552_Y ;
  assign \$procmux$13560_CMP  = \$522 ;
  assign \$iMSR_dDCD$526  = \$procmux$13559_Y ;
  assign \$procmux$13565_CMP  = \$514 ;
  assign \$procmux$13568_CMP  = \$512 ;
  assign \$iMSR_TERI$515  = \$procmux$13567_Y ;
  assign \$procmux$13574_CMP  = \$512 ;
  assign \$iMSR_TERI$516  = \$procmux$13573_Y ;
  assign \$procmux$13578_CMP  = \$508 ;
  assign \$procmux$13581_CMP  = \$506 ;
  assign \$iMSR_dDSR$509  = \$procmux$13580_Y ;
  assign \$procmux$13586_CMP  = \$506 ;
  assign \$iMSR_dDSR$510  = \$procmux$13585_Y ;
  assign \$procmux$13589_CMP  = \$498 ;
  assign \$procmux$13592_CMP  = \$496 ;
  assign \$iMSR_dCTS$499  = \$procmux$13591_Y ;
  assign \$procmux$13596_CMP  = \$496 ;
  assign \$iMSR_dCTS$500  = \$procmux$13595_Y ;
  assign \$procmux$13598_CMP  = \$357 ;
  assign \$procmux$13601_CMP  = \$349 ;
  assign \$procmux$13604_CMP  = \$343 ;
  assign \$iFECounter$360  = \$procmux$13603_Y ;
  assign \$procmux$13613_CMP  = \$349 ;
  assign \$procmux$13616_CMP  = \$343 ;
  assign \$iFECounter$361  = \$procmux$13615_Y ;
  assign \$procmux$13625_CMP  = \$343 ;
  assign \$iFECounter$362  = \$procmux$13624_Y ;
  assign \$procmux$13632_CMP  = \$339 ;
  assign \$procmux$13635_CMP  = \$333 ;
  assign \$iLSR_FIFOERR$340  = \$procmux$13634_Y ;
  assign \$procmux$13643_CMP  = \$333 ;
  assign \$iLSR_FIFOERR$341  = \$procmux$13642_Y ;
  assign \$procmux$13649_CMP  = \$329 ;
  assign \$procmux$13652_CMP  = \$327 ;
  assign \$iLSR_BI$330  = \$procmux$13651_Y ;
  assign \$procmux$13659_CMP  = \$327 ;
  assign \$iLSR_BI$331  = \$procmux$13658_Y ;
  assign \$procmux$13664_CMP  = \$323 ;
  assign \$procmux$13667_CMP  = \$321 ;
  assign \$iLSR_FE$324  = \$procmux$13666_Y ;
  assign \$procmux$13673_CMP  = \$321 ;
  assign \$iLSR_FE$325  = \$procmux$13672_Y ;
  assign \$procmux$13677_CMP  = \$317 ;
  assign \$procmux$13680_CMP  = \$315 ;
  assign \$iLSR_PE$318  = \$procmux$13679_Y ;
  assign \$procmux$13685_CMP  = \$315 ;
  assign \$iLSR_PE$319  = \$procmux$13684_Y ;
  assign \$procmux$13688_CMP  = \$311 ;
  assign \$procmux$13691_CMP  = \$309 ;
  assign \$iLSR_OE$312  = \$procmux$13690_Y ;
  assign \$procmux$13695_CMP  = \$309 ;
  assign \$iLSR_OE$313  = \$procmux$13694_Y ;
  assign \$procmux$13697_CMP  = \$284 ;
  assign \$iMCR[5:0]$285  = \$procmux$13696_Y ;
  assign \$procmux$13699_CMP  = \$279 ;
  assign \$iLCR$280  = \$procmux$13698_Y ;
  assign \$procmux$13701_CMP  = \$268 ;
  assign \$procmux$13705_CMP  = \$228 ;
  assign \$iFCR_TXFIFOReset$269  = \$procmux$13704_Y ;
  assign \$procmux$13707_CMP  = \$249 ;
  assign \$procmux$13710_CMP  = \$228 ;
  assign \$iFCR_RXFIFOReset$250  = \$procmux$13709_Y ;
  assign \$procmux$13712_CMP  = \$230 ;
  assign \$procmux$13714_CMP  = \$228 ;
  assign \$iFCR_FIFO64E$231  = \$procmux$13713_Y ;
  assign \$procmux$13719_CMP  = \$228 ;
  assign \$iFCR_RXTrigger$275  = \$procmux$13718_Y ;
  assign \$procmux$13724_CMP  = \$228 ;
  assign \$iFCR_FIFO64E$274  = \$procmux$13723_Y ;
  assign \$procmux$13729_CMP  = \$228 ;
  assign \$iFCR_DMAMode$273  = \$procmux$13728_Y ;
  assign \$procmux$13734_CMP  = \$228 ;
  assign \$iFCR_TXFIFOReset$272  = \$procmux$13733_Y ;
  assign \$procmux$13739_CMP  = \$228 ;
  assign \$iFCR_RXFIFOReset$271  = \$procmux$13738_Y ;
  assign \$procmux$13744_CMP  = \$228 ;
  assign \$iFCR_FIFOEnable$270  = \$procmux$13743_Y ;
  assign \$procmux$13748_CMP  = \$217 ;
  assign \$iCharTimeout$224  = \$procmux$13747_Y ;
  assign \$procmux$13752_CMP  = \$221 ;
  assign \$procmux$13755_CMP  = \$219 ;
  assign \$procmux$13757_CMP  = \$217 ;
  assign \$iCharTimeout$222  = \$procmux$13756_Y ;
  assign \$procmux$13763_CMP  = \$219 ;
  assign \$procmux$13765_CMP  = \$217 ;
  assign \$iCharTimeout$223  = \$procmux$13764_Y ;
  assign \$procmux$13768_CMP  = \$211 ;
  assign \$procmux$13771_CMP  = \$201 ;
  assign \$iTimeoutCount$214  = \$procmux$13770_Y ;
  assign \$procmux$13775_CMP  = \$201 ;
  assign \$iTimeoutCount$215  = \$procmux$13774_Y ;
  assign \$procmux$13777_CMP  = \$171 ;
  assign \$procmux$13780_CMP  = \$161 ;
  assign \$iTHRInterrupt$172  = \$procmux$13779_Y ;
  assign \$procmux$13784_CMP  = \$161 ;
  assign \$iTHRInterrupt$173  = \$procmux$13783_Y ;
  assign \$procmux$13786_CMP  = \$140 ;
  assign \$iIER[3:0]$141  = \$procmux$13785_Y ;
  assign \$procmux$13788_CMP  = \$135 ;
  assign \$iDLM$136  = \$procmux$13787_Y ;
  assign \$procmux$13791_CMP  = \$132 ;
  assign \$iDLL$133  = \$procmux$13790_Y ;
  assign \$1  = PSEL;
  assign \$3  = PENABLE;
  assign \$7  = PWRITE;
  assign \$14  = PENABLE;
  assign \$12  = PSEL;
  assign \$26  = iRead;
  assign \$48  = iWrite;
  assign \$54  = iLCR_DLAB;
  assign \$59  = iWrite;
  assign \$65  = iLCR_DLAB;
  assign \$70  = iWrite;
  assign \$81  = iRead;
  assign \$88  = iWrite;
  assign \$95  = iWrite;
  assign \$102  = iWrite;
  assign \$109  = iRead;
  assign \$37  = iWrite;
  assign \$116  = iRead;
  assign \$123  = iWrite;
  assign \$132  = iDLLWrite;
  assign \$135  = iDLMWrite;
  assign \$140  = iIERWrite;
  assign \$147  = iFCR_TXFIFOReset;
  assign \$145  = iLSR_THRERE;
  assign \$151  = iIERWrite;
  assign \$153  = PWDATA[1];
  assign \$420  = iTXFIFOEmpty;
  assign \$157  = iLSR_THRE;
  assign \$163  = iIIRRead;
  assign \$169  = iTHRWrite;
  assign \$415  = iRXFIFOWrite;
  assign \$177  = iLSR_DR;
  assign \$606  = iRXFIFO16Full;
  assign \$574  = iRXFIFOUsage[3];
  assign \$572  = iRXFIFOUsage[2];
  assign \$584  = iRXFIFOUsage[3];
  assign \$592  = iRXFIFOUsage[3];
  assign \$596  = iRXFIFOUsage[2];
  assign \$600  = iRXFIFOUsage[1];
  assign \$619  = iRXFIFOUsage[4];
  assign \$621  = iRXFIFOUsage[5];
  assign \$631  = iRXFIFOUsage[5];
  assign \$639  = iRXFIFOUsage[5];
  assign \$643  = iRXFIFOUsage[4];
  assign \$647  = iRXFIFOUsage[3];
  assign \$653  = iRXFIFO64Full;
  assign \$183  = iRXFIFOTrigger;
  assign \$181  = iFCR_FIFOEnable;
  assign \$193  = iRXFIFOEmpty;
  assign \$195  = iRBRRead;
  assign \$199  = iRXFIFOWrite;
  assign \$205  = iBaudtick2x;
  assign \$219  = iRBRRead;
  assign \$221  = iTimeoutCount[5];
  assign \$228  = iFCRWrite;
  assign \$230  = iLCR_DLAB;
  assign \$233  = PWDATA[1];
  assign \$237  = PWDATA[0];
  assign \$243  = iFCR_FIFOEnable;
  assign \$252  = PWDATA[2];
  assign \$256  = PWDATA[0];
  assign \$262  = iFCR_FIFOEnable;
  assign \$279  = iLCRWrite;
  assign \$284  = iMCRWrite;
  assign \$291  = iLSR_DR;
  assign \$295  = iRXFinished;
  assign \$299  = iFCR_FIFOEnable;
  assign \$217  = iFCR_FIFOEnable;
  assign \$301  = iRXFIFOFull;
  assign \$305  = iRXFinished;
  assign \$311  = iLSRRead;
  assign \$315  = iPERE;
  assign \$317  = iLSRRead;
  assign \$321  = iFERE;
  assign \$323  = iLSRRead;
  assign \$327  = iBIRE;
  assign \$329  = iLSRRead;
  assign \$335  = iRXFIFOEmpty;
  assign \$343  = iRXFIFOClear;
  assign \$385  = iRXFIFOWrite;
  assign \$345  = iFEIncrement;
  assign \$398  = iPERE;
  assign \$400  = iFERE;
  assign \$404  = iBIRE;
  assign \$355  = iFEDecrement;
  assign \$366  = iRXFIFOQ[8];
  assign \$373  = iRXFIFOQ[9];
  assign \$380  = iRXFIFOQ[10];
  assign \$425  = iLSR_THRE;
  assign \$430  = iMCR_LOOP;
  assign \$432  = iRTS;
  assign \$445  = iMCR_LOOP;
  assign \$447  = iMCR_DTR;
  assign \$460  = iMCR_LOOP;
  assign \$462  = iMCR_OUT1;
  assign \$475  = iMCR_LOOP;
  assign \$477  = iMCR_OUT2;
  assign \$492  = iCTSnRE;
  assign \$494  = iCTSnFE;
  assign \$498  = iMSRRead;
  assign \$502  = iDSRnRE;
  assign \$504  = iDSRnFE;
  assign \$512  = iRInFE;
  assign \$514  = iMSRRead;
  assign \$518  = iDCDnRE;
  assign \$520  = iDCDnFE;
  assign \$524  = iMSRRead;
  assign \$530  = iSCRWrite;
  assign \$538  = iTXFIFOEmpty;
  assign \$542  = iFCR_FIFOEnable;
  assign \$550  = iTHRWrite;
  assign \$555  = iFCR_TXFIFOReset;
  assign \$558  = iRBRRead;
  assign \$670  = iMSR_CTS;
  assign \$668  = iMCR_AFE;
  assign \$681  = iTXEnable;
  assign \$685  = iTXFinished;
  assign \$695  = iRXFinished;
  assign \$717  = iMCR_AFE;
  assign \$719  = iRXFIFOTrigger;
  assign \$725  = iMCR_RTS;
  assign \$729  = iMCR_AFE;
  assign \$731  = iRXFIFOEmpty;
  assign \$746  = iMCR_LOOP;
  assign \$753  = iMCR_LOOP;
  assign \$760  = iMCR_LOOP;
  assign \$767  = iMCR_LOOP;
  assign \$774  = iMCR_LOOP;
  assign \$776  = iSOUT;
  assign \$508  = iMSRRead;
  assign \$auto$rtlil.cc:2965:LogicNot$615  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$616  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$617  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$620  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$621  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$622  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$623  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$624  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$637  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$638  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$649  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$650  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$651  = RSTN;
  assign \$auto$rtlil.cc:2965:LogicNot$652  = RSTN;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1029 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1030 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1031 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1032 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [40:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(dst_ready_i),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(s_dst_isolate_req),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_dst_valid),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(src_rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1029 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(src_valid_i),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(dst_rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1031 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(s_src_isolate_req),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(s_src_ready),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(s_dst_isolate_req),
    .Y(\$9 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .AD(1'h0),
    .ALOAD(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .AD(1'h0),
    .ALOAD(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .AD(1'h0),
    .ALOAD(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .AD(1'h0),
    .ALOAD(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
  assign src_ready_o = \$7 ;
  assign dst_valid_o = \$15 ;
  assign src_clear_pending_o = s_src_isolate_req;
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign \$auto$rtlil.cc:2965:LogicNot$1030  = src_rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1032  = dst_rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1033 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1034 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1035 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1036 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [33:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(dst_ready_i),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(s_dst_isolate_req),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_dst_valid),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(src_rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1033 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(src_valid_i),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(dst_rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1035 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(s_src_isolate_req),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(s_src_ready),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(s_dst_isolate_req),
    .Y(\$9 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .AD(1'h0),
    .ALOAD(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .AD(1'h0),
    .ALOAD(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .AD(1'h0),
    .ALOAD(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .AD(1'h0),
    .ALOAD(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
  assign src_ready_o = \$7 ;
  assign dst_valid_o = \$15 ;
  assign src_clear_pending_o = s_src_isolate_req;
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign \$auto$rtlil.cc:2965:LogicNot$1034  = src_rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1036  = dst_rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$20 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.14-308.8" */
  wire \$ack_dst_d$5 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  wire \$ack_dst_d$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1659 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1660 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  wire [40:0] \$data_dst_d$14 ;
  wire [40:0] \$procmux$3787_Y ;
  wire \$procmux$3788_CMP ;
  wire \$procmux$3789_Y ;
  wire \$procmux$3790_CMP ;
  wire \$procmux$3792_Y ;
  wire \$procmux$3793_CMP ;
  wire \$procmux$3796_Y ;
  wire \$procmux$3797_CMP ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  wire [40:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [40:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [40:0] data_o;
  wire [40:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(valid_o),
    .Y(\$11 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$9 ),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1659 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(\$20 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(ack_dst_q),
    .Y(\$4 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$9 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$data_dst_q.addr  (
    .CLK(clk_i),
    .D(data_dst_d[40:34]),
    .Q(data_dst_q[40:34])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_dst_q.data  (
    .CLK(clk_i),
    .D(data_dst_d[31:0]),
    .Q(data_dst_q[31:0])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_dst_q.op  (
    .CLK(clk_i),
    .D(data_dst_d[33:32]),
    .Q(data_dst_q[33:32])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3787  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$procmux$3788_CMP ),
    .Y(\$procmux$3787_Y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.7-307.30|rtl/common_cells/cdc_2phase_clearable.sv:306.14-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3789  (
    .A(ack_dst_q),
    .B(\$4 ),
    .S(\$procmux$3790_CMP ),
    .Y(\$procmux$3789_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3792  (
    .A(\$procmux$3789_Y ),
    .B(1'hx),
    .S(\$procmux$3793_CMP ),
    .Y(\$procmux$3792_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3796  (
    .A(\$ack_dst_d$5 ),
    .B(1'h0),
    .S(\$procmux$3797_CMP ),
    .Y(\$procmux$3796_Y )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$6 ;
  assign data_dst_d = \$data_dst_d$14 ;
  assign valid_o = \$20 ;
  assign data_o = data_dst_q;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$3788_CMP  = \$13 ;
  assign \$data_dst_d$14  = \$procmux$3787_Y ;
  assign \$procmux$3790_CMP  = \$2 ;
  assign \$procmux$3793_CMP  = clear_i;
  assign \$ack_dst_d$5  = \$procmux$3792_Y ;
  assign \$procmux$3797_CMP  = clear_i;
  assign \$ack_dst_d$6  = \$procmux$3796_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1660  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$20 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.14-308.8" */
  wire \$ack_dst_d$5 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  wire \$ack_dst_d$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1663 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1664 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  wire [33:0] \$data_dst_d$14 ;
  wire [33:0] \$procmux$3758_Y ;
  wire \$procmux$3759_CMP ;
  wire \$procmux$3760_Y ;
  wire \$procmux$3761_CMP ;
  wire \$procmux$3763_Y ;
  wire \$procmux$3764_CMP ;
  wire \$procmux$3767_Y ;
  wire \$procmux$3768_CMP ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  wire [33:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [33:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(valid_o),
    .Y(\$11 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$9 ),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1663 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(\$20 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(ack_dst_q),
    .Y(\$4 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$9 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_dst_q.data  (
    .CLK(clk_i),
    .D(data_dst_d[33:2]),
    .Q(data_dst_q[33:2])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_dst_q.resp  (
    .CLK(clk_i),
    .D(data_dst_d[1:0]),
    .Q(data_dst_q[1:0])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3758  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$procmux$3759_CMP ),
    .Y(\$procmux$3758_Y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.7-307.30|rtl/common_cells/cdc_2phase_clearable.sv:306.14-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3760  (
    .A(ack_dst_q),
    .B(\$4 ),
    .S(\$procmux$3761_CMP ),
    .Y(\$procmux$3760_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3763  (
    .A(\$procmux$3760_Y ),
    .B(1'hx),
    .S(\$procmux$3764_CMP ),
    .Y(\$procmux$3763_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3767  (
    .A(\$ack_dst_d$5 ),
    .B(1'h0),
    .S(\$procmux$3768_CMP ),
    .Y(\$procmux$3767_Y )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$6 ;
  assign data_dst_d = \$data_dst_d$14 ;
  assign valid_o = \$20 ;
  assign data_o = data_dst_q;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$3759_CMP  = \$13 ;
  assign \$data_dst_d$14  = \$procmux$3758_Y ;
  assign \$procmux$3761_CMP  = \$2 ;
  assign \$procmux$3764_CMP  = clear_i;
  assign \$ack_dst_d$5  = \$procmux$3763_Y ;
  assign \$procmux$3768_CMP  = clear_i;
  assign \$ack_dst_d$6  = \$procmux$3767_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1664  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1657 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1658 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [40:0] \$data_src_d$6 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  wire [40:0] \$data_src_d$8 ;
  wire [40:0] \$procmux$3798_Y ;
  wire \$procmux$3799_CMP ;
  wire [40:0] \$procmux$3801_Y ;
  wire \$procmux$3802_CMP ;
  wire \$procmux$3803_Y ;
  wire \$procmux$3804_CMP ;
  wire \$procmux$3806_Y ;
  wire \$procmux$3807_CMP ;
  wire \$procmux$3810_Y ;
  wire \$procmux$3811_CMP ;
  wire [40:0] \$procmux$3814_Y ;
  wire \$procmux$3815_CMP ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire \$req_src_d$5 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  wire \$req_src_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [40:0] async_data_o;
  wire [40:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [40:0] data_i;
  wire [40:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  wire [40:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [40:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1657 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_src_q),
    .Y(\$4 )
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$data_src_q.addr  (
    .CLK(clk_i),
    .D(data_src_d[40:34]),
    .Q(data_src_q[40:34])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_src_q.data  (
    .CLK(clk_i),
    .D(data_src_d[31:0]),
    .Q(data_src_q[31:0])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q.op  (
    .CLK(clk_i),
    .D(data_src_d[33:32]),
    .Q(data_src_q[33:32])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3798  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$3799_CMP ),
    .Y(\$procmux$3798_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3801  (
    .A(\$procmux$3798_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$3802_CMP ),
    .Y(\$procmux$3801_Y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3803  (
    .A(req_src_q),
    .B(\$4 ),
    .S(\$procmux$3804_CMP ),
    .Y(\$procmux$3803_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3806  (
    .A(\$procmux$3803_Y ),
    .B(1'hx),
    .S(\$procmux$3807_CMP ),
    .Y(\$procmux$3806_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3810  (
    .A(\$req_src_d$5 ),
    .B(1'h0),
    .S(\$procmux$3811_CMP ),
    .Y(\$procmux$3810_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3814  (
    .A(\$data_src_d$6 ),
    .B(data_src_q),
    .S(\$procmux$3815_CMP ),
    .Y(\$procmux$3814_Y )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$7 ;
  assign data_src_d = \$data_src_d$8 ;
  assign ready_o = \$14 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$procmux$3799_CMP  = \$2 ;
  assign \$procmux$3802_CMP  = clear_i;
  assign \$data_src_d$6  = \$procmux$3801_Y ;
  assign \$procmux$3804_CMP  = \$2 ;
  assign \$procmux$3807_CMP  = clear_i;
  assign \$req_src_d$5  = \$procmux$3806_Y ;
  assign \$procmux$3811_CMP  = clear_i;
  assign \$req_src_d$7  = \$procmux$3810_Y ;
  assign \$procmux$3815_CMP  = clear_i;
  assign \$data_src_d$8  = \$procmux$3814_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1658  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1661 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1662 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [33:0] \$data_src_d$6 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  wire [33:0] \$data_src_d$8 ;
  wire [33:0] \$procmux$3769_Y ;
  wire \$procmux$3770_CMP ;
  wire [33:0] \$procmux$3772_Y ;
  wire \$procmux$3773_CMP ;
  wire \$procmux$3774_Y ;
  wire \$procmux$3775_CMP ;
  wire \$procmux$3777_Y ;
  wire \$procmux$3778_CMP ;
  wire \$procmux$3781_Y ;
  wire \$procmux$3782_CMP ;
  wire [33:0] \$procmux$3785_Y ;
  wire \$procmux$3786_CMP ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire \$req_src_d$5 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  wire \$req_src_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [33:0] async_data_o;
  wire [33:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  wire [33:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [33:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1661 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_src_q),
    .Y(\$4 )
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_src_q.data  (
    .CLK(clk_i),
    .D(data_src_d[33:2]),
    .Q(data_src_q[33:2])
  );
  /* keep = "true" */
  \$dff  #(
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q.resp  (
    .CLK(clk_i),
    .D(data_src_d[1:0]),
    .Q(data_src_q[1:0])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3769  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$3770_CMP ),
    .Y(\$procmux$3769_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3772  (
    .A(\$procmux$3769_Y ),
    .B(34'hxxxxxxxxx),
    .S(\$procmux$3773_CMP ),
    .Y(\$procmux$3772_Y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3774  (
    .A(req_src_q),
    .B(\$4 ),
    .S(\$procmux$3775_CMP ),
    .Y(\$procmux$3774_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3777  (
    .A(\$procmux$3774_Y ),
    .B(1'hx),
    .S(\$procmux$3778_CMP ),
    .Y(\$procmux$3777_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3781  (
    .A(\$req_src_d$5 ),
    .B(1'h0),
    .S(\$procmux$3782_CMP ),
    .Y(\$procmux$3781_Y )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3785  (
    .A(\$data_src_d$6 ),
    .B(data_src_q),
    .S(\$procmux$3786_CMP ),
    .Y(\$procmux$3785_Y )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$7 ;
  assign data_src_d = \$data_src_d$8 ;
  assign ready_o = \$14 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$procmux$3770_CMP  = \$2 ;
  assign \$procmux$3773_CMP  = clear_i;
  assign \$data_src_d$6  = \$procmux$3772_Y ;
  assign \$procmux$3775_CMP  = \$2 ;
  assign \$procmux$3778_CMP  = clear_i;
  assign \$req_src_d$5  = \$procmux$3777_Y ;
  assign \$procmux$3782_CMP  = clear_i;
  assign \$req_src_d$7  = \$procmux$3781_Y ;
  assign \$procmux$3786_CMP  = clear_i;
  assign \$data_src_d$8  = \$procmux$3785_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1662  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire \$ack_dst_d$10 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire \$ack_dst_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$ack_dst_d$16 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1771 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1772 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1773 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1774 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$data_valid$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire \$data_valid$6 ;
  wire [1:0] \$procmux$2271_Y ;
  wire \$procmux$2272_CMP ;
  wire [1:0] \$procmux$2273_Y ;
  wire \$procmux$2274_CMP ;
  wire \$procmux$2276_Y ;
  wire \$procmux$2277_CMP ;
  wire \$procmux$2278_Y ;
  wire \$procmux$2279_CMP ;
  wire [1:0] \$procmux$2282_Y ;
  wire \$procmux$2283_CMP ;
  wire [1:0] \$procmux$2284_Y ;
  wire \$procmux$2285_CMP ;
  wire \$procmux$2288_Y ;
  wire \$procmux$2289_CMP ;
  wire \$procmux$2290_Y ;
  wire \$procmux$2291_CMP ;
  wire [1:0] \$procmux$2294_Y ;
  wire \$procmux$2295_CMP ;
  wire \$procmux$2297_CMP ;
  wire \$procmux$2299_CMP ;
  wire [1:0] \$procmux$2304_Y ;
  wire \$procmux$2305_CMP ;
  wire [1:0] \$procmux$2306_Y ;
  wire \$procmux$2307_CMP ;
  wire [1:0] \$procmux$2308_Y ;
  wire \$procmux$2309_CMP ;
  wire [1:0] \$procmux$2314_Y ;
  wire \$procmux$2315_CMP ;
  wire [1:0] \$procmux$2316_Y ;
  wire \$procmux$2317_CMP ;
  wire \$procmux$2322_Y ;
  wire \$procmux$2323_CMP ;
  wire \$procmux$2324_Y ;
  wire \$procmux$2325_CMP ;
  wire \$procmux$2329_Y ;
  wire \$procmux$2330_CMP ;
  wire \$procmux$2332_CMP ;
  wire \$procmux$2335_Y ;
  wire \$procmux$2336_CMP ;
  wire \$procmux$2338_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire [1:0] \$state_d$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire [1:0] \$state_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire [1:0] \$state_d$18 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$state_d$5 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire [1:0] \$state_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(req_synced),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1771 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1773 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2271  (
    .A(2'h0),
    .B(state_q),
    .S(req_synced),
    .Y(\$procmux$2271_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2273  (
    .A(2'hx),
    .B(\$procmux$2271_Y ),
    .S(\$procmux$2274_CMP ),
    .Y(\$procmux$2273_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2274_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2274_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2276  (
    .A(1'h0),
    .B(1'h1),
    .S(req_synced),
    .Y(\$procmux$2276_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2278  (
    .A(1'hx),
    .B(\$procmux$2276_Y ),
    .S(\$procmux$2279_CMP ),
    .Y(\$procmux$2278_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2279_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2279_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2282  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$2283_CMP ),
    .Y(\$procmux$2282_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2284  (
    .A(2'hx),
    .B(\$procmux$2282_Y ),
    .S(\$procmux$2285_CMP ),
    .Y(\$procmux$2284_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2285_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2285_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2288  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2289_CMP ),
    .Y(\$procmux$2288_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2290  (
    .A(1'hx),
    .B(\$procmux$2288_Y ),
    .S(\$procmux$2291_CMP ),
    .Y(\$procmux$2290_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2291_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2291_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2294  (
    .A(2'h0),
    .B({ \$state_d$7 , \$state_d$11 , \$state_d$15  }),
    .S({ \$procmux$2299_CMP , \$procmux$2297_CMP , \$procmux$2295_CMP  }),
    .Y(\$procmux$2294_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2295_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2295_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2297_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2297_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2299_CMP0  (
    .A(state_q),
    .Y(\$procmux$2299_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2304  (
    .A(2'h1),
    .B(2'h2),
    .S(\$procmux$2305_CMP ),
    .Y(\$procmux$2304_Y )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2306  (
    .A(2'hx),
    .B(\$procmux$2304_Y ),
    .S(\$procmux$2307_CMP ),
    .Y(\$procmux$2306_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2308  (
    .A(2'hx),
    .B(\$procmux$2306_Y ),
    .S(\$procmux$2309_CMP ),
    .Y(\$procmux$2308_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2309_CMP0  (
    .A(state_q),
    .Y(\$procmux$2309_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2314  (
    .A(state_q),
    .B(\$state_d$5 ),
    .S(\$procmux$2315_CMP ),
    .Y(\$procmux$2314_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2316  (
    .A(2'hx),
    .B(\$procmux$2314_Y ),
    .S(\$procmux$2317_CMP ),
    .Y(\$procmux$2316_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2317_CMP0  (
    .A(state_q),
    .Y(\$procmux$2317_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2322  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2323_CMP ),
    .Y(\$procmux$2322_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2324  (
    .A(1'hx),
    .B(\$procmux$2322_Y ),
    .S(\$procmux$2325_CMP ),
    .Y(\$procmux$2324_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2325_CMP0  (
    .A(state_q),
    .Y(\$procmux$2325_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2329  (
    .A(1'h0),
    .B({ \$data_valid$6 , 1'h1 }),
    .S({ \$procmux$2332_CMP , \$procmux$2330_CMP  }),
    .Y(\$procmux$2329_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2330_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2330_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2332_CMP0  (
    .A(state_q),
    .Y(\$procmux$2332_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2335  (
    .A(1'h0),
    .B({ \$ack_dst_d$10 , \$ack_dst_d$14  }),
    .S({ \$procmux$2338_CMP , \$procmux$2336_CMP  }),
    .Y(\$procmux$2335_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2336_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2336_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2338_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2338_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$16 ;
  assign data_valid = \$data_valid$17 ;
  assign state_d = \$state_d$18 ;
  assign valid_o = data_valid;
  assign output_ready = ready_i;
  assign data_o = async_data_i;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$2272_CMP  = \$13 ;
  assign \$state_d$15  = \$procmux$2273_Y ;
  assign \$procmux$2277_CMP  = \$13 ;
  assign \$ack_dst_d$14  = \$procmux$2278_Y ;
  assign \$procmux$2283_CMP  = \$9 ;
  assign \$state_d$11  = \$procmux$2284_Y ;
  assign \$procmux$2289_CMP  = \$9 ;
  assign \$ack_dst_d$10  = \$procmux$2290_Y ;
  assign \$state_d$18  = \$procmux$2294_Y ;
  assign \$procmux$2305_CMP  = \$4 ;
  assign \$procmux$2307_CMP  = \$2 ;
  assign \$state_d$5  = \$procmux$2308_Y ;
  assign \$procmux$2315_CMP  = \$2 ;
  assign \$state_d$7  = \$procmux$2316_Y ;
  assign \$procmux$2323_CMP  = \$2 ;
  assign \$data_valid$6  = \$procmux$2324_Y ;
  assign \$data_valid$17  = \$procmux$2329_Y ;
  assign \$ack_dst_d$16  = \$procmux$2335_Y ;
  assign \$2  = req_synced;
  assign \$4  = output_ready;
  assign \$9  = output_ready;
  assign \$auto$rtlil.cc:2965:LogicNot$1772  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1774  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire \$ack_dst_d$10 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire \$ack_dst_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$ack_dst_d$16 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1779 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1780 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1781 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1782 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$data_valid$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire \$data_valid$6 ;
  wire [1:0] \$procmux$2122_Y ;
  wire \$procmux$2123_CMP ;
  wire [1:0] \$procmux$2124_Y ;
  wire \$procmux$2125_CMP ;
  wire \$procmux$2127_Y ;
  wire \$procmux$2128_CMP ;
  wire \$procmux$2129_Y ;
  wire \$procmux$2130_CMP ;
  wire [1:0] \$procmux$2133_Y ;
  wire \$procmux$2134_CMP ;
  wire [1:0] \$procmux$2135_Y ;
  wire \$procmux$2136_CMP ;
  wire \$procmux$2139_Y ;
  wire \$procmux$2140_CMP ;
  wire \$procmux$2141_Y ;
  wire \$procmux$2142_CMP ;
  wire [1:0] \$procmux$2145_Y ;
  wire \$procmux$2146_CMP ;
  wire \$procmux$2148_CMP ;
  wire \$procmux$2150_CMP ;
  wire [1:0] \$procmux$2155_Y ;
  wire \$procmux$2156_CMP ;
  wire [1:0] \$procmux$2157_Y ;
  wire \$procmux$2158_CMP ;
  wire [1:0] \$procmux$2159_Y ;
  wire \$procmux$2160_CMP ;
  wire [1:0] \$procmux$2165_Y ;
  wire \$procmux$2166_CMP ;
  wire [1:0] \$procmux$2167_Y ;
  wire \$procmux$2168_CMP ;
  wire \$procmux$2173_Y ;
  wire \$procmux$2174_CMP ;
  wire \$procmux$2175_Y ;
  wire \$procmux$2176_CMP ;
  wire \$procmux$2180_Y ;
  wire \$procmux$2181_CMP ;
  wire \$procmux$2183_CMP ;
  wire \$procmux$2186_Y ;
  wire \$procmux$2187_CMP ;
  wire \$procmux$2189_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire [1:0] \$state_d$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire [1:0] \$state_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire [1:0] \$state_d$18 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$state_d$5 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire [1:0] \$state_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(req_synced),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1779 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1781 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2122  (
    .A(2'h0),
    .B(state_q),
    .S(req_synced),
    .Y(\$procmux$2122_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2124  (
    .A(2'hx),
    .B(\$procmux$2122_Y ),
    .S(\$procmux$2125_CMP ),
    .Y(\$procmux$2124_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2125_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2125_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2127  (
    .A(1'h0),
    .B(1'h1),
    .S(req_synced),
    .Y(\$procmux$2127_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2129  (
    .A(1'hx),
    .B(\$procmux$2127_Y ),
    .S(\$procmux$2130_CMP ),
    .Y(\$procmux$2129_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2130_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2130_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2133  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$2134_CMP ),
    .Y(\$procmux$2133_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2135  (
    .A(2'hx),
    .B(\$procmux$2133_Y ),
    .S(\$procmux$2136_CMP ),
    .Y(\$procmux$2135_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2136_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2136_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2139  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2140_CMP ),
    .Y(\$procmux$2139_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2141  (
    .A(1'hx),
    .B(\$procmux$2139_Y ),
    .S(\$procmux$2142_CMP ),
    .Y(\$procmux$2141_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2142_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2142_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2145  (
    .A(2'h0),
    .B({ \$state_d$7 , \$state_d$11 , \$state_d$15  }),
    .S({ \$procmux$2150_CMP , \$procmux$2148_CMP , \$procmux$2146_CMP  }),
    .Y(\$procmux$2145_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2146_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2146_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2148_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2148_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2150_CMP0  (
    .A(state_q),
    .Y(\$procmux$2150_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2155  (
    .A(2'h1),
    .B(2'h2),
    .S(\$procmux$2156_CMP ),
    .Y(\$procmux$2155_Y )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2157  (
    .A(2'hx),
    .B(\$procmux$2155_Y ),
    .S(\$procmux$2158_CMP ),
    .Y(\$procmux$2157_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2159  (
    .A(2'hx),
    .B(\$procmux$2157_Y ),
    .S(\$procmux$2160_CMP ),
    .Y(\$procmux$2159_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2160_CMP0  (
    .A(state_q),
    .Y(\$procmux$2160_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2165  (
    .A(state_q),
    .B(\$state_d$5 ),
    .S(\$procmux$2166_CMP ),
    .Y(\$procmux$2165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2167  (
    .A(2'hx),
    .B(\$procmux$2165_Y ),
    .S(\$procmux$2168_CMP ),
    .Y(\$procmux$2167_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2168_CMP0  (
    .A(state_q),
    .Y(\$procmux$2168_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2173  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2174_CMP ),
    .Y(\$procmux$2173_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2175  (
    .A(1'hx),
    .B(\$procmux$2173_Y ),
    .S(\$procmux$2176_CMP ),
    .Y(\$procmux$2175_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2176_CMP0  (
    .A(state_q),
    .Y(\$procmux$2176_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2180  (
    .A(1'h0),
    .B({ \$data_valid$6 , 1'h1 }),
    .S({ \$procmux$2183_CMP , \$procmux$2181_CMP  }),
    .Y(\$procmux$2180_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2181_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2181_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2183_CMP0  (
    .A(state_q),
    .Y(\$procmux$2183_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2186  (
    .A(1'h0),
    .B({ \$ack_dst_d$10 , \$ack_dst_d$14  }),
    .S({ \$procmux$2189_CMP , \$procmux$2187_CMP  }),
    .Y(\$procmux$2186_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2187_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2187_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2189_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2189_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$16 ;
  assign data_valid = \$data_valid$17 ;
  assign state_d = \$state_d$18 ;
  assign valid_o = data_valid;
  assign output_ready = ready_i;
  assign data_o = async_data_i;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$2123_CMP  = \$13 ;
  assign \$state_d$15  = \$procmux$2124_Y ;
  assign \$procmux$2128_CMP  = \$13 ;
  assign \$ack_dst_d$14  = \$procmux$2129_Y ;
  assign \$procmux$2134_CMP  = \$9 ;
  assign \$state_d$11  = \$procmux$2135_Y ;
  assign \$procmux$2140_CMP  = \$9 ;
  assign \$ack_dst_d$10  = \$procmux$2141_Y ;
  assign \$state_d$18  = \$procmux$2145_Y ;
  assign \$procmux$2156_CMP  = \$4 ;
  assign \$procmux$2158_CMP  = \$2 ;
  assign \$state_d$5  = \$procmux$2159_Y ;
  assign \$procmux$2166_CMP  = \$2 ;
  assign \$state_d$7  = \$procmux$2167_Y ;
  assign \$procmux$2174_CMP  = \$2 ;
  assign \$data_valid$6  = \$procmux$2175_Y ;
  assign \$data_valid$17  = \$procmux$2180_Y ;
  assign \$ack_dst_d$16  = \$procmux$2186_Y ;
  assign \$2  = req_synced;
  assign \$4  = output_ready;
  assign \$9  = output_ready;
  assign \$auto$rtlil.cc:2965:LogicNot$1780  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1782  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire \$ack_dst_d$10 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire \$ack_dst_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$ack_dst_d$16 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1787 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1788 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1789 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1790 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$data_valid$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire \$data_valid$6 ;
  wire [1:0] \$procmux$1973_Y ;
  wire \$procmux$1974_CMP ;
  wire [1:0] \$procmux$1975_Y ;
  wire \$procmux$1976_CMP ;
  wire \$procmux$1978_Y ;
  wire \$procmux$1979_CMP ;
  wire \$procmux$1980_Y ;
  wire \$procmux$1981_CMP ;
  wire [1:0] \$procmux$1984_Y ;
  wire \$procmux$1985_CMP ;
  wire [1:0] \$procmux$1986_Y ;
  wire \$procmux$1987_CMP ;
  wire \$procmux$1990_Y ;
  wire \$procmux$1991_CMP ;
  wire \$procmux$1992_Y ;
  wire \$procmux$1993_CMP ;
  wire [1:0] \$procmux$1996_Y ;
  wire \$procmux$1997_CMP ;
  wire \$procmux$1999_CMP ;
  wire \$procmux$2001_CMP ;
  wire [1:0] \$procmux$2006_Y ;
  wire \$procmux$2007_CMP ;
  wire [1:0] \$procmux$2008_Y ;
  wire \$procmux$2009_CMP ;
  wire [1:0] \$procmux$2010_Y ;
  wire \$procmux$2011_CMP ;
  wire [1:0] \$procmux$2016_Y ;
  wire \$procmux$2017_CMP ;
  wire [1:0] \$procmux$2018_Y ;
  wire \$procmux$2019_CMP ;
  wire \$procmux$2024_Y ;
  wire \$procmux$2025_CMP ;
  wire \$procmux$2026_Y ;
  wire \$procmux$2027_CMP ;
  wire \$procmux$2031_Y ;
  wire \$procmux$2032_CMP ;
  wire \$procmux$2034_CMP ;
  wire \$procmux$2037_Y ;
  wire \$procmux$2038_CMP ;
  wire \$procmux$2040_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire [1:0] \$state_d$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire [1:0] \$state_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire [1:0] \$state_d$18 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$state_d$5 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire [1:0] \$state_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(req_synced),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1787 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1789 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1973  (
    .A(2'h0),
    .B(state_q),
    .S(req_synced),
    .Y(\$procmux$1973_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1975  (
    .A(2'hx),
    .B(\$procmux$1973_Y ),
    .S(\$procmux$1976_CMP ),
    .Y(\$procmux$1975_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1976_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1976_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1978  (
    .A(1'h0),
    .B(1'h1),
    .S(req_synced),
    .Y(\$procmux$1978_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1980  (
    .A(1'hx),
    .B(\$procmux$1978_Y ),
    .S(\$procmux$1981_CMP ),
    .Y(\$procmux$1980_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1981_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1981_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1984  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$1985_CMP ),
    .Y(\$procmux$1984_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1986  (
    .A(2'hx),
    .B(\$procmux$1984_Y ),
    .S(\$procmux$1987_CMP ),
    .Y(\$procmux$1986_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1987_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1987_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1990  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$1991_CMP ),
    .Y(\$procmux$1990_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1992  (
    .A(1'hx),
    .B(\$procmux$1990_Y ),
    .S(\$procmux$1993_CMP ),
    .Y(\$procmux$1992_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1993_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1993_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1996  (
    .A(2'h0),
    .B({ \$state_d$7 , \$state_d$11 , \$state_d$15  }),
    .S({ \$procmux$2001_CMP , \$procmux$1999_CMP , \$procmux$1997_CMP  }),
    .Y(\$procmux$1996_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1997_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1997_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1999_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1999_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2001_CMP0  (
    .A(state_q),
    .Y(\$procmux$2001_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2006  (
    .A(2'h1),
    .B(2'h2),
    .S(\$procmux$2007_CMP ),
    .Y(\$procmux$2006_Y )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2008  (
    .A(2'hx),
    .B(\$procmux$2006_Y ),
    .S(\$procmux$2009_CMP ),
    .Y(\$procmux$2008_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2010  (
    .A(2'hx),
    .B(\$procmux$2008_Y ),
    .S(\$procmux$2011_CMP ),
    .Y(\$procmux$2010_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2011_CMP0  (
    .A(state_q),
    .Y(\$procmux$2011_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2016  (
    .A(state_q),
    .B(\$state_d$5 ),
    .S(\$procmux$2017_CMP ),
    .Y(\$procmux$2016_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2018  (
    .A(2'hx),
    .B(\$procmux$2016_Y ),
    .S(\$procmux$2019_CMP ),
    .Y(\$procmux$2018_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2019_CMP0  (
    .A(state_q),
    .Y(\$procmux$2019_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2024  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2025_CMP ),
    .Y(\$procmux$2024_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2026  (
    .A(1'hx),
    .B(\$procmux$2024_Y ),
    .S(\$procmux$2027_CMP ),
    .Y(\$procmux$2026_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2027_CMP0  (
    .A(state_q),
    .Y(\$procmux$2027_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2031  (
    .A(1'h0),
    .B({ \$data_valid$6 , 1'h1 }),
    .S({ \$procmux$2034_CMP , \$procmux$2032_CMP  }),
    .Y(\$procmux$2031_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2032_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2032_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2034_CMP0  (
    .A(state_q),
    .Y(\$procmux$2034_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2037  (
    .A(1'h0),
    .B({ \$ack_dst_d$10 , \$ack_dst_d$14  }),
    .S({ \$procmux$2040_CMP , \$procmux$2038_CMP  }),
    .Y(\$procmux$2037_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2038_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2038_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2040_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2040_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$16 ;
  assign data_valid = \$data_valid$17 ;
  assign state_d = \$state_d$18 ;
  assign valid_o = data_valid;
  assign output_ready = ready_i;
  assign data_o = async_data_i;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$1974_CMP  = \$13 ;
  assign \$state_d$15  = \$procmux$1975_Y ;
  assign \$procmux$1979_CMP  = \$13 ;
  assign \$ack_dst_d$14  = \$procmux$1980_Y ;
  assign \$procmux$1985_CMP  = \$9 ;
  assign \$state_d$11  = \$procmux$1986_Y ;
  assign \$procmux$1991_CMP  = \$9 ;
  assign \$ack_dst_d$10  = \$procmux$1992_Y ;
  assign \$state_d$18  = \$procmux$1996_Y ;
  assign \$procmux$2007_CMP  = \$4 ;
  assign \$procmux$2009_CMP  = \$2 ;
  assign \$state_d$5  = \$procmux$2010_Y ;
  assign \$procmux$2017_CMP  = \$2 ;
  assign \$state_d$7  = \$procmux$2018_Y ;
  assign \$procmux$2025_CMP  = \$2 ;
  assign \$data_valid$6  = \$procmux$2026_Y ;
  assign \$data_valid$17  = \$procmux$2031_Y ;
  assign \$ack_dst_d$16  = \$procmux$2037_Y ;
  assign \$2  = req_synced;
  assign \$4  = output_ready;
  assign \$9  = output_ready;
  assign \$auto$rtlil.cc:2965:LogicNot$1788  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1790  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire \$ack_dst_d$10 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire \$ack_dst_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$ack_dst_d$16 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1795 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1796 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1797 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1798 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire \$data_valid$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire \$data_valid$6 ;
  wire [1:0] \$procmux$1824_Y ;
  wire \$procmux$1825_CMP ;
  wire [1:0] \$procmux$1826_Y ;
  wire \$procmux$1827_CMP ;
  wire \$procmux$1829_Y ;
  wire \$procmux$1830_CMP ;
  wire \$procmux$1831_Y ;
  wire \$procmux$1832_CMP ;
  wire [1:0] \$procmux$1835_Y ;
  wire \$procmux$1836_CMP ;
  wire [1:0] \$procmux$1837_Y ;
  wire \$procmux$1838_CMP ;
  wire \$procmux$1841_Y ;
  wire \$procmux$1842_CMP ;
  wire \$procmux$1843_Y ;
  wire \$procmux$1844_CMP ;
  wire [1:0] \$procmux$1847_Y ;
  wire \$procmux$1848_CMP ;
  wire \$procmux$1850_CMP ;
  wire \$procmux$1852_CMP ;
  wire [1:0] \$procmux$1857_Y ;
  wire \$procmux$1858_CMP ;
  wire [1:0] \$procmux$1859_Y ;
  wire \$procmux$1860_CMP ;
  wire [1:0] \$procmux$1861_Y ;
  wire \$procmux$1862_CMP ;
  wire [1:0] \$procmux$1867_Y ;
  wire \$procmux$1868_CMP ;
  wire [1:0] \$procmux$1869_Y ;
  wire \$procmux$1870_CMP ;
  wire \$procmux$1875_Y ;
  wire \$procmux$1876_CMP ;
  wire \$procmux$1877_Y ;
  wire \$procmux$1878_CMP ;
  wire \$procmux$1882_Y ;
  wire \$procmux$1883_CMP ;
  wire \$procmux$1885_CMP ;
  wire \$procmux$1888_Y ;
  wire \$procmux$1889_CMP ;
  wire \$procmux$1891_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  wire [1:0] \$state_d$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  wire [1:0] \$state_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  wire [1:0] \$state_d$18 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$state_d$5 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  wire [1:0] \$state_d$7 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(req_synced),
    .Y(\$13 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1795 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1797 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1824  (
    .A(2'h0),
    .B(state_q),
    .S(req_synced),
    .Y(\$procmux$1824_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1826  (
    .A(2'hx),
    .B(\$procmux$1824_Y ),
    .S(\$procmux$1827_CMP ),
    .Y(\$procmux$1826_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1827_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1827_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:272.33-275.12|rtl/common_cells/cdc_4phase.sv:272.9-275.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1829  (
    .A(1'h0),
    .B(1'h1),
    .S(req_synced),
    .Y(\$procmux$1829_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1831  (
    .A(1'hx),
    .B(\$procmux$1829_Y ),
    .S(\$procmux$1832_CMP ),
    .Y(\$procmux$1831_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1832_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1832_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1835  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$1836_CMP ),
    .Y(\$procmux$1835_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1837  (
    .A(2'hx),
    .B(\$procmux$1835_Y ),
    .S(\$procmux$1838_CMP ),
    .Y(\$procmux$1837_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1838_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1838_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:264.35-267.12|rtl/common_cells/cdc_4phase.sv:264.9-267.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1841  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$1842_CMP ),
    .Y(\$procmux$1841_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1843  (
    .A(1'hx),
    .B(\$procmux$1841_Y ),
    .S(\$procmux$1844_CMP ),
    .Y(\$procmux$1843_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1844_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1844_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1847  (
    .A(2'h0),
    .B({ \$state_d$7 , \$state_d$11 , \$state_d$15  }),
    .S({ \$procmux$1852_CMP , \$procmux$1850_CMP , \$procmux$1848_CMP  }),
    .Y(\$procmux$1847_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1848_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1848_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1850_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1850_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1852_CMP0  (
    .A(state_q),
    .Y(\$procmux$1852_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1857  (
    .A(2'h1),
    .B(2'h2),
    .S(\$procmux$1858_CMP ),
    .Y(\$procmux$1857_Y )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1859  (
    .A(2'hx),
    .B(\$procmux$1857_Y ),
    .S(\$procmux$1860_CMP ),
    .Y(\$procmux$1859_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1861  (
    .A(2'hx),
    .B(\$procmux$1859_Y ),
    .S(\$procmux$1862_CMP ),
    .Y(\$procmux$1861_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1862_CMP0  (
    .A(state_q),
    .Y(\$procmux$1862_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1867  (
    .A(state_q),
    .B(\$state_d$5 ),
    .S(\$procmux$1868_CMP ),
    .Y(\$procmux$1867_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1869  (
    .A(2'hx),
    .B(\$procmux$1867_Y ),
    .S(\$procmux$1870_CMP ),
    .Y(\$procmux$1869_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1870_CMP0  (
    .A(state_q),
    .Y(\$procmux$1870_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:252.33-259.12|rtl/common_cells/cdc_4phase.sv:252.9-259.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1875  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$1876_CMP ),
    .Y(\$procmux$1875_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1877  (
    .A(1'hx),
    .B(\$procmux$1875_Y ),
    .S(\$procmux$1878_CMP ),
    .Y(\$procmux$1877_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1878_CMP0  (
    .A(state_q),
    .Y(\$procmux$1878_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1882  (
    .A(1'h0),
    .B({ \$data_valid$6 , 1'h1 }),
    .S({ \$procmux$1885_CMP , \$procmux$1883_CMP  }),
    .Y(\$procmux$1882_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1883_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1883_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1885_CMP0  (
    .A(state_q),
    .Y(\$procmux$1885_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1888  (
    .A(1'h0),
    .B({ \$ack_dst_d$10 , \$ack_dst_d$14  }),
    .S({ \$procmux$1891_CMP , \$procmux$1889_CMP  }),
    .Y(\$procmux$1888_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1889_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1889_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1891_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1891_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_d = \$ack_dst_d$16 ;
  assign data_valid = \$data_valid$17 ;
  assign state_d = \$state_d$18 ;
  assign valid_o = data_valid;
  assign output_ready = ready_i;
  assign data_o = async_data_i;
  assign async_ack_o = ack_dst_q;
  assign \$procmux$1825_CMP  = \$13 ;
  assign \$state_d$15  = \$procmux$1826_Y ;
  assign \$procmux$1830_CMP  = \$13 ;
  assign \$ack_dst_d$14  = \$procmux$1831_Y ;
  assign \$procmux$1836_CMP  = \$9 ;
  assign \$state_d$11  = \$procmux$1837_Y ;
  assign \$procmux$1842_CMP  = \$9 ;
  assign \$ack_dst_d$10  = \$procmux$1843_Y ;
  assign \$state_d$18  = \$procmux$1847_Y ;
  assign \$procmux$1858_CMP  = \$4 ;
  assign \$procmux$1860_CMP  = \$2 ;
  assign \$state_d$5  = \$procmux$1861_Y ;
  assign \$procmux$1868_CMP  = \$2 ;
  assign \$state_d$7  = \$procmux$1869_Y ;
  assign \$procmux$1876_CMP  = \$2 ;
  assign \$data_valid$6  = \$procmux$1877_Y ;
  assign \$data_valid$17  = \$procmux$1882_Y ;
  assign \$ack_dst_d$16  = \$procmux$1888_Y ;
  assign \$2  = req_synced;
  assign \$4  = output_ready;
  assign \$9  = output_ready;
  assign \$auto$rtlil.cc:2965:LogicNot$1796  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1798  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$10 ;
  wire \$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1767 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1768 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1769 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1770 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$data_src_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire [1:0] \$data_src_q$24 ;
  wire \$procmux$2340_Y ;
  wire \$procmux$2341_CMP ;
  wire \$procmux$2342_Y ;
  wire \$procmux$2343_CMP ;
  wire \$procmux$2345_Y ;
  wire \$procmux$2346_CMP ;
  wire \$procmux$2347_Y ;
  wire \$procmux$2348_CMP ;
  wire [1:0] \$procmux$2350_Y ;
  wire \$procmux$2351_CMP ;
  wire [1:0] \$procmux$2352_Y ;
  wire \$procmux$2353_CMP ;
  wire [1:0] \$procmux$2356_Y ;
  wire \$procmux$2357_CMP ;
  wire [1:0] \$procmux$2358_Y ;
  wire \$procmux$2359_CMP ;
  wire \$procmux$2362_Y ;
  wire \$procmux$2363_CMP ;
  wire \$procmux$2364_Y ;
  wire \$procmux$2365_CMP ;
  wire [1:0] \$procmux$2368_Y ;
  wire \$procmux$2369_CMP ;
  wire \$procmux$2371_CMP ;
  wire \$procmux$2373_CMP ;
  wire [1:0] \$procmux$2377_Y ;
  wire \$procmux$2378_CMP ;
  wire [1:0] \$procmux$2379_Y ;
  wire \$procmux$2380_CMP ;
  wire [1:0] \$procmux$2384_Y ;
  wire \$procmux$2385_CMP ;
  wire [1:0] \$procmux$2386_Y ;
  wire \$procmux$2387_CMP ;
  wire \$procmux$2391_Y ;
  wire \$procmux$2392_CMP ;
  wire \$procmux$2393_Y ;
  wire \$procmux$2394_CMP ;
  wire \$procmux$2398_Y ;
  wire \$procmux$2399_CMP ;
  wire \$procmux$2402_Y ;
  wire \$procmux$2403_CMP ;
  wire \$procmux$2405_CMP ;
  wire [1:0] \$procmux$2410_Y ;
  wire \$procmux$2411_CMP ;
  wire \$procmux$2415_Y ;
  wire \$procmux$2416_CMP ;
  wire \$procmux$2418_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:139.9-143.12" */
  wire \$ready_o$1 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:161.11-163.14" */
  wire \$ready_o$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$ready_o$13 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$ready_o$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$req_src_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire \$req_src_d$2 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire \$req_src_d$7 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire \$req_src_q$23 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire [1:0] \$state_d$12 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$state_d$16 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$state_d$4 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire [1:0] \$state_d$8 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1767 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1769 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(ack_synced),
    .Y(\$10 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q  (
    .AD(2'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(data_src_d),
    .Q(data_src_q)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2340  (
    .A(1'h1),
    .B(1'hx),
    .S(ack_synced),
    .Y(\$procmux$2340_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2342  (
    .A(1'hx),
    .B(\$procmux$2340_Y ),
    .S(\$procmux$2343_CMP ),
    .Y(\$procmux$2342_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2343_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2343_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2345  (
    .A(\$ready_o$11 ),
    .B(1'h0),
    .S(ack_synced),
    .Y(\$procmux$2345_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2347  (
    .A(1'hx),
    .B(\$procmux$2345_Y ),
    .S(\$procmux$2348_CMP ),
    .Y(\$procmux$2347_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2348_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2348_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2350  (
    .A(2'h0),
    .B(state_q),
    .S(ack_synced),
    .Y(\$procmux$2350_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2352  (
    .A(2'hx),
    .B(\$procmux$2350_Y ),
    .S(\$procmux$2353_CMP ),
    .Y(\$procmux$2352_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2353_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2353_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2356  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$2357_CMP ),
    .Y(\$procmux$2356_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2358  (
    .A(2'hx),
    .B(\$procmux$2356_Y ),
    .S(\$procmux$2359_CMP ),
    .Y(\$procmux$2358_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2359_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2359_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2362  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$2363_CMP ),
    .Y(\$procmux$2362_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2364  (
    .A(1'hx),
    .B(\$procmux$2362_Y ),
    .S(\$procmux$2365_CMP ),
    .Y(\$procmux$2364_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2365_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2365_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2368  (
    .A(2'h0),
    .B({ \$state_d$4 , \$state_d$8 , \$state_d$12  }),
    .S({ \$procmux$2373_CMP , \$procmux$2371_CMP , \$procmux$2369_CMP  }),
    .Y(\$procmux$2368_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2369_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2369_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2371_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2371_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2373_CMP0  (
    .A(state_q),
    .Y(\$procmux$2373_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2377  (
    .A(state_q),
    .B(2'h1),
    .S(\$procmux$2378_CMP ),
    .Y(\$procmux$2377_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2379  (
    .A(2'hx),
    .B(\$procmux$2377_Y ),
    .S(\$procmux$2380_CMP ),
    .Y(\$procmux$2379_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2380_CMP0  (
    .A(state_q),
    .Y(\$procmux$2380_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2384  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$2385_CMP ),
    .Y(\$procmux$2384_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2386  (
    .A(2'hx),
    .B(\$procmux$2384_Y ),
    .S(\$procmux$2387_CMP ),
    .Y(\$procmux$2386_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2387_CMP0  (
    .A(state_q),
    .Y(\$procmux$2387_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2391  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2392_CMP ),
    .Y(\$procmux$2391_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2393  (
    .A(1'hx),
    .B(\$procmux$2391_Y ),
    .S(\$procmux$2394_CMP ),
    .Y(\$procmux$2393_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2394_CMP0  (
    .A(state_q),
    .Y(\$procmux$2394_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2398  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$2399_CMP ),
    .Y(\$procmux$2398_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2399_CMP0  (
    .A(state_q),
    .Y(\$procmux$2399_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2402  (
    .A(1'h0),
    .B({ \$ready_o$1 , \$ready_o$13  }),
    .S({ \$procmux$2405_CMP , \$procmux$2403_CMP  }),
    .Y(\$procmux$2402_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2403_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2403_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2405_CMP0  (
    .A(state_q),
    .Y(\$procmux$2405_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2410  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2411_CMP ),
    .Y(\$procmux$2410_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2411_CMP0  (
    .A(state_q),
    .Y(\$procmux$2411_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2415  (
    .A(1'h0),
    .B({ \$req_src_d$2 , \$req_src_d$7  }),
    .S({ \$procmux$2418_CMP , \$procmux$2416_CMP  }),
    .Y(\$procmux$2415_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2416_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2416_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2418_CMP0  (
    .A(state_q),
    .Y(\$procmux$2418_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$14 ;
  assign data_src_d = \$data_src_d$15 ;
  assign state_d = \$state_d$16 ;
  assign ready_o = \$ready_o$17 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$data_src_q$24  = 2'h1;
  assign \$req_src_q$23  = 1'h1;
  assign \$procmux$2341_CMP  = \$10 ;
  assign \$ready_o$11  = \$procmux$2342_Y ;
  assign \$procmux$2346_CMP  = \$10 ;
  assign \$ready_o$13  = \$procmux$2347_Y ;
  assign \$procmux$2351_CMP  = \$10 ;
  assign \$state_d$12  = \$procmux$2352_Y ;
  assign \$procmux$2357_CMP  = \$6 ;
  assign \$state_d$8  = \$procmux$2358_Y ;
  assign \$procmux$2363_CMP  = \$6 ;
  assign \$req_src_d$7  = \$procmux$2364_Y ;
  assign \$state_d$16  = \$procmux$2368_Y ;
  assign \$procmux$2378_CMP  = valid_i;
  assign \$state_d$4  = \$procmux$2379_Y ;
  assign \$procmux$2385_CMP  = valid_i;
  assign \$data_src_d$3  = \$procmux$2386_Y ;
  assign \$procmux$2392_CMP  = valid_i;
  assign \$req_src_d$2  = \$procmux$2393_Y ;
  assign \$ready_o$1  = \$procmux$2398_Y ;
  assign \$ready_o$17  = \$procmux$2402_Y ;
  assign \$data_src_d$15  = \$procmux$2410_Y ;
  assign \$req_src_d$14  = \$procmux$2415_Y ;
  assign \$6  = ack_synced;
  assign \$auto$rtlil.cc:2965:LogicNot$1768  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1770  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$10 ;
  wire \$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1775 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1776 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1777 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1778 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$data_src_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire [1:0] \$data_src_q$24 ;
  wire \$procmux$2191_Y ;
  wire \$procmux$2192_CMP ;
  wire \$procmux$2193_Y ;
  wire \$procmux$2194_CMP ;
  wire \$procmux$2196_Y ;
  wire \$procmux$2197_CMP ;
  wire \$procmux$2198_Y ;
  wire \$procmux$2199_CMP ;
  wire [1:0] \$procmux$2201_Y ;
  wire \$procmux$2202_CMP ;
  wire [1:0] \$procmux$2203_Y ;
  wire \$procmux$2204_CMP ;
  wire [1:0] \$procmux$2207_Y ;
  wire \$procmux$2208_CMP ;
  wire [1:0] \$procmux$2209_Y ;
  wire \$procmux$2210_CMP ;
  wire \$procmux$2213_Y ;
  wire \$procmux$2214_CMP ;
  wire \$procmux$2215_Y ;
  wire \$procmux$2216_CMP ;
  wire [1:0] \$procmux$2219_Y ;
  wire \$procmux$2220_CMP ;
  wire \$procmux$2222_CMP ;
  wire \$procmux$2224_CMP ;
  wire [1:0] \$procmux$2228_Y ;
  wire \$procmux$2229_CMP ;
  wire [1:0] \$procmux$2230_Y ;
  wire \$procmux$2231_CMP ;
  wire [1:0] \$procmux$2235_Y ;
  wire \$procmux$2236_CMP ;
  wire [1:0] \$procmux$2237_Y ;
  wire \$procmux$2238_CMP ;
  wire \$procmux$2242_Y ;
  wire \$procmux$2243_CMP ;
  wire \$procmux$2244_Y ;
  wire \$procmux$2245_CMP ;
  wire \$procmux$2249_Y ;
  wire \$procmux$2250_CMP ;
  wire \$procmux$2253_Y ;
  wire \$procmux$2254_CMP ;
  wire \$procmux$2256_CMP ;
  wire [1:0] \$procmux$2261_Y ;
  wire \$procmux$2262_CMP ;
  wire \$procmux$2266_Y ;
  wire \$procmux$2267_CMP ;
  wire \$procmux$2269_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:139.9-143.12" */
  wire \$ready_o$1 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:161.11-163.14" */
  wire \$ready_o$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$ready_o$13 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$ready_o$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$req_src_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire \$req_src_d$2 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire \$req_src_d$7 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire \$req_src_q$23 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire [1:0] \$state_d$12 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$state_d$16 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$state_d$4 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire [1:0] \$state_d$8 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1775 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1777 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(ack_synced),
    .Y(\$10 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q  (
    .AD(2'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(data_src_d),
    .Q(data_src_q)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2191  (
    .A(1'h1),
    .B(1'hx),
    .S(ack_synced),
    .Y(\$procmux$2191_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2193  (
    .A(1'hx),
    .B(\$procmux$2191_Y ),
    .S(\$procmux$2194_CMP ),
    .Y(\$procmux$2193_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2194_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2194_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2196  (
    .A(\$ready_o$11 ),
    .B(1'h0),
    .S(ack_synced),
    .Y(\$procmux$2196_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2198  (
    .A(1'hx),
    .B(\$procmux$2196_Y ),
    .S(\$procmux$2199_CMP ),
    .Y(\$procmux$2198_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2199_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2199_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2201  (
    .A(2'h0),
    .B(state_q),
    .S(ack_synced),
    .Y(\$procmux$2201_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2203  (
    .A(2'hx),
    .B(\$procmux$2201_Y ),
    .S(\$procmux$2204_CMP ),
    .Y(\$procmux$2203_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2204_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2204_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2207  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$2208_CMP ),
    .Y(\$procmux$2207_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2209  (
    .A(2'hx),
    .B(\$procmux$2207_Y ),
    .S(\$procmux$2210_CMP ),
    .Y(\$procmux$2209_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2210_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2210_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2213  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$2214_CMP ),
    .Y(\$procmux$2213_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2215  (
    .A(1'hx),
    .B(\$procmux$2213_Y ),
    .S(\$procmux$2216_CMP ),
    .Y(\$procmux$2215_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2216_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2216_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2219  (
    .A(2'h0),
    .B({ \$state_d$4 , \$state_d$8 , \$state_d$12  }),
    .S({ \$procmux$2224_CMP , \$procmux$2222_CMP , \$procmux$2220_CMP  }),
    .Y(\$procmux$2219_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2220_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2220_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2222_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2222_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2224_CMP0  (
    .A(state_q),
    .Y(\$procmux$2224_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2228  (
    .A(state_q),
    .B(2'h1),
    .S(\$procmux$2229_CMP ),
    .Y(\$procmux$2228_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2230  (
    .A(2'hx),
    .B(\$procmux$2228_Y ),
    .S(\$procmux$2231_CMP ),
    .Y(\$procmux$2230_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2231_CMP0  (
    .A(state_q),
    .Y(\$procmux$2231_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2235  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$2236_CMP ),
    .Y(\$procmux$2235_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2237  (
    .A(2'hx),
    .B(\$procmux$2235_Y ),
    .S(\$procmux$2238_CMP ),
    .Y(\$procmux$2237_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2238_CMP0  (
    .A(state_q),
    .Y(\$procmux$2238_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2242  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2243_CMP ),
    .Y(\$procmux$2242_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2244  (
    .A(1'hx),
    .B(\$procmux$2242_Y ),
    .S(\$procmux$2245_CMP ),
    .Y(\$procmux$2244_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2245_CMP0  (
    .A(state_q),
    .Y(\$procmux$2245_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2249  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$2250_CMP ),
    .Y(\$procmux$2249_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2250_CMP0  (
    .A(state_q),
    .Y(\$procmux$2250_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2253  (
    .A(1'h0),
    .B({ \$ready_o$1 , \$ready_o$13  }),
    .S({ \$procmux$2256_CMP , \$procmux$2254_CMP  }),
    .Y(\$procmux$2253_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2254_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2254_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2256_CMP0  (
    .A(state_q),
    .Y(\$procmux$2256_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2261  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2262_CMP ),
    .Y(\$procmux$2261_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2262_CMP0  (
    .A(state_q),
    .Y(\$procmux$2262_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2266  (
    .A(1'h0),
    .B({ \$req_src_d$2 , \$req_src_d$7  }),
    .S({ \$procmux$2269_CMP , \$procmux$2267_CMP  }),
    .Y(\$procmux$2266_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2267_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2267_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2269_CMP0  (
    .A(state_q),
    .Y(\$procmux$2269_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$14 ;
  assign data_src_d = \$data_src_d$15 ;
  assign state_d = \$state_d$16 ;
  assign ready_o = \$ready_o$17 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$data_src_q$24  = 2'h1;
  assign \$req_src_q$23  = 1'h1;
  assign \$procmux$2192_CMP  = \$10 ;
  assign \$ready_o$11  = \$procmux$2193_Y ;
  assign \$procmux$2197_CMP  = \$10 ;
  assign \$ready_o$13  = \$procmux$2198_Y ;
  assign \$procmux$2202_CMP  = \$10 ;
  assign \$state_d$12  = \$procmux$2203_Y ;
  assign \$procmux$2208_CMP  = \$6 ;
  assign \$state_d$8  = \$procmux$2209_Y ;
  assign \$procmux$2214_CMP  = \$6 ;
  assign \$req_src_d$7  = \$procmux$2215_Y ;
  assign \$state_d$16  = \$procmux$2219_Y ;
  assign \$procmux$2229_CMP  = valid_i;
  assign \$state_d$4  = \$procmux$2230_Y ;
  assign \$procmux$2236_CMP  = valid_i;
  assign \$data_src_d$3  = \$procmux$2237_Y ;
  assign \$procmux$2243_CMP  = valid_i;
  assign \$req_src_d$2  = \$procmux$2244_Y ;
  assign \$ready_o$1  = \$procmux$2249_Y ;
  assign \$ready_o$17  = \$procmux$2253_Y ;
  assign \$data_src_d$15  = \$procmux$2261_Y ;
  assign \$req_src_d$14  = \$procmux$2266_Y ;
  assign \$6  = ack_synced;
  assign \$auto$rtlil.cc:2965:LogicNot$1776  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1778  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$10 ;
  wire \$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1783 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1784 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1785 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1786 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$data_src_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire [1:0] \$data_src_q$24 ;
  wire \$procmux$2042_Y ;
  wire \$procmux$2043_CMP ;
  wire \$procmux$2044_Y ;
  wire \$procmux$2045_CMP ;
  wire \$procmux$2047_Y ;
  wire \$procmux$2048_CMP ;
  wire \$procmux$2049_Y ;
  wire \$procmux$2050_CMP ;
  wire [1:0] \$procmux$2052_Y ;
  wire \$procmux$2053_CMP ;
  wire [1:0] \$procmux$2054_Y ;
  wire \$procmux$2055_CMP ;
  wire [1:0] \$procmux$2058_Y ;
  wire \$procmux$2059_CMP ;
  wire [1:0] \$procmux$2060_Y ;
  wire \$procmux$2061_CMP ;
  wire \$procmux$2064_Y ;
  wire \$procmux$2065_CMP ;
  wire \$procmux$2066_Y ;
  wire \$procmux$2067_CMP ;
  wire [1:0] \$procmux$2070_Y ;
  wire \$procmux$2071_CMP ;
  wire \$procmux$2073_CMP ;
  wire \$procmux$2075_CMP ;
  wire [1:0] \$procmux$2079_Y ;
  wire \$procmux$2080_CMP ;
  wire [1:0] \$procmux$2081_Y ;
  wire \$procmux$2082_CMP ;
  wire [1:0] \$procmux$2086_Y ;
  wire \$procmux$2087_CMP ;
  wire [1:0] \$procmux$2088_Y ;
  wire \$procmux$2089_CMP ;
  wire \$procmux$2093_Y ;
  wire \$procmux$2094_CMP ;
  wire \$procmux$2095_Y ;
  wire \$procmux$2096_CMP ;
  wire \$procmux$2100_Y ;
  wire \$procmux$2101_CMP ;
  wire \$procmux$2104_Y ;
  wire \$procmux$2105_CMP ;
  wire \$procmux$2107_CMP ;
  wire [1:0] \$procmux$2112_Y ;
  wire \$procmux$2113_CMP ;
  wire \$procmux$2117_Y ;
  wire \$procmux$2118_CMP ;
  wire \$procmux$2120_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:139.9-143.12" */
  wire \$ready_o$1 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:161.11-163.14" */
  wire \$ready_o$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$ready_o$13 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$ready_o$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$req_src_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire \$req_src_d$2 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire \$req_src_d$7 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire \$req_src_q$23 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire [1:0] \$state_d$12 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$state_d$16 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$state_d$4 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire [1:0] \$state_d$8 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1783 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1785 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(ack_synced),
    .Y(\$10 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q  (
    .AD(2'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(data_src_d),
    .Q(data_src_q)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2042  (
    .A(1'h1),
    .B(1'hx),
    .S(ack_synced),
    .Y(\$procmux$2042_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2044  (
    .A(1'hx),
    .B(\$procmux$2042_Y ),
    .S(\$procmux$2045_CMP ),
    .Y(\$procmux$2044_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2045_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2045_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2047  (
    .A(\$ready_o$11 ),
    .B(1'h0),
    .S(ack_synced),
    .Y(\$procmux$2047_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2049  (
    .A(1'hx),
    .B(\$procmux$2047_Y ),
    .S(\$procmux$2050_CMP ),
    .Y(\$procmux$2049_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2050_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2050_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2052  (
    .A(2'h0),
    .B(state_q),
    .S(ack_synced),
    .Y(\$procmux$2052_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2054  (
    .A(2'hx),
    .B(\$procmux$2052_Y ),
    .S(\$procmux$2055_CMP ),
    .Y(\$procmux$2054_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2055_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2055_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2058  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$2059_CMP ),
    .Y(\$procmux$2058_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2060  (
    .A(2'hx),
    .B(\$procmux$2058_Y ),
    .S(\$procmux$2061_CMP ),
    .Y(\$procmux$2060_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2061_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2061_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2064  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$2065_CMP ),
    .Y(\$procmux$2064_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2066  (
    .A(1'hx),
    .B(\$procmux$2064_Y ),
    .S(\$procmux$2067_CMP ),
    .Y(\$procmux$2066_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2067_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2070  (
    .A(2'h0),
    .B({ \$state_d$4 , \$state_d$8 , \$state_d$12  }),
    .S({ \$procmux$2075_CMP , \$procmux$2073_CMP , \$procmux$2071_CMP  }),
    .Y(\$procmux$2070_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2071_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2071_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2073_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2073_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2075_CMP0  (
    .A(state_q),
    .Y(\$procmux$2075_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2079  (
    .A(state_q),
    .B(2'h1),
    .S(\$procmux$2080_CMP ),
    .Y(\$procmux$2079_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2081  (
    .A(2'hx),
    .B(\$procmux$2079_Y ),
    .S(\$procmux$2082_CMP ),
    .Y(\$procmux$2081_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2082_CMP0  (
    .A(state_q),
    .Y(\$procmux$2082_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2086  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$2087_CMP ),
    .Y(\$procmux$2086_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2088  (
    .A(2'hx),
    .B(\$procmux$2086_Y ),
    .S(\$procmux$2089_CMP ),
    .Y(\$procmux$2088_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2089_CMP0  (
    .A(state_q),
    .Y(\$procmux$2089_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2093  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$2094_CMP ),
    .Y(\$procmux$2093_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2095  (
    .A(1'hx),
    .B(\$procmux$2093_Y ),
    .S(\$procmux$2096_CMP ),
    .Y(\$procmux$2095_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2096_CMP0  (
    .A(state_q),
    .Y(\$procmux$2096_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2100  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$2101_CMP ),
    .Y(\$procmux$2100_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2101_CMP0  (
    .A(state_q),
    .Y(\$procmux$2101_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2104  (
    .A(1'h0),
    .B({ \$ready_o$1 , \$ready_o$13  }),
    .S({ \$procmux$2107_CMP , \$procmux$2105_CMP  }),
    .Y(\$procmux$2104_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2105_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2105_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2107_CMP0  (
    .A(state_q),
    .Y(\$procmux$2107_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2112  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2113_CMP ),
    .Y(\$procmux$2112_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2113_CMP0  (
    .A(state_q),
    .Y(\$procmux$2113_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2117  (
    .A(1'h0),
    .B({ \$req_src_d$2 , \$req_src_d$7  }),
    .S({ \$procmux$2120_CMP , \$procmux$2118_CMP  }),
    .Y(\$procmux$2117_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2118_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$2118_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2120_CMP0  (
    .A(state_q),
    .Y(\$procmux$2120_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$14 ;
  assign data_src_d = \$data_src_d$15 ;
  assign state_d = \$state_d$16 ;
  assign ready_o = \$ready_o$17 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$data_src_q$24  = 2'h1;
  assign \$req_src_q$23  = 1'h1;
  assign \$procmux$2043_CMP  = \$10 ;
  assign \$ready_o$11  = \$procmux$2044_Y ;
  assign \$procmux$2048_CMP  = \$10 ;
  assign \$ready_o$13  = \$procmux$2049_Y ;
  assign \$procmux$2053_CMP  = \$10 ;
  assign \$state_d$12  = \$procmux$2054_Y ;
  assign \$procmux$2059_CMP  = \$6 ;
  assign \$state_d$8  = \$procmux$2060_Y ;
  assign \$procmux$2065_CMP  = \$6 ;
  assign \$req_src_d$7  = \$procmux$2066_Y ;
  assign \$state_d$16  = \$procmux$2070_Y ;
  assign \$procmux$2080_CMP  = valid_i;
  assign \$state_d$4  = \$procmux$2081_Y ;
  assign \$procmux$2087_CMP  = valid_i;
  assign \$data_src_d$3  = \$procmux$2088_Y ;
  assign \$procmux$2094_CMP  = valid_i;
  assign \$req_src_d$2  = \$procmux$2095_Y ;
  assign \$ready_o$1  = \$procmux$2100_Y ;
  assign \$ready_o$17  = \$procmux$2104_Y ;
  assign \$data_src_d$15  = \$procmux$2112_Y ;
  assign \$req_src_d$14  = \$procmux$2117_Y ;
  assign \$6  = ack_synced;
  assign \$auto$rtlil.cc:2965:LogicNot$1784  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1786  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$10 ;
  wire \$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1791 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1792 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1793 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1794 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$data_src_d$15 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire [1:0] \$data_src_q$24 ;
  wire \$procmux$1893_Y ;
  wire \$procmux$1894_CMP ;
  wire \$procmux$1895_Y ;
  wire \$procmux$1896_CMP ;
  wire \$procmux$1898_Y ;
  wire \$procmux$1899_CMP ;
  wire \$procmux$1900_Y ;
  wire \$procmux$1901_CMP ;
  wire [1:0] \$procmux$1903_Y ;
  wire \$procmux$1904_CMP ;
  wire [1:0] \$procmux$1905_Y ;
  wire \$procmux$1906_CMP ;
  wire [1:0] \$procmux$1909_Y ;
  wire \$procmux$1910_CMP ;
  wire [1:0] \$procmux$1911_Y ;
  wire \$procmux$1912_CMP ;
  wire \$procmux$1915_Y ;
  wire \$procmux$1916_CMP ;
  wire \$procmux$1917_Y ;
  wire \$procmux$1918_CMP ;
  wire [1:0] \$procmux$1921_Y ;
  wire \$procmux$1922_CMP ;
  wire \$procmux$1924_CMP ;
  wire \$procmux$1926_CMP ;
  wire [1:0] \$procmux$1930_Y ;
  wire \$procmux$1931_CMP ;
  wire [1:0] \$procmux$1932_Y ;
  wire \$procmux$1933_CMP ;
  wire [1:0] \$procmux$1937_Y ;
  wire \$procmux$1938_CMP ;
  wire [1:0] \$procmux$1939_Y ;
  wire \$procmux$1940_CMP ;
  wire \$procmux$1944_Y ;
  wire \$procmux$1945_CMP ;
  wire \$procmux$1946_Y ;
  wire \$procmux$1947_CMP ;
  wire \$procmux$1951_Y ;
  wire \$procmux$1952_CMP ;
  wire \$procmux$1955_Y ;
  wire \$procmux$1956_CMP ;
  wire \$procmux$1958_CMP ;
  wire [1:0] \$procmux$1963_Y ;
  wire \$procmux$1964_CMP ;
  wire \$procmux$1968_Y ;
  wire \$procmux$1969_CMP ;
  wire \$procmux$1971_CMP ;
  /* src = "rtl/common_cells/cdc_4phase.sv:139.9-143.12" */
  wire \$ready_o$1 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:161.11-163.14" */
  wire \$ready_o$11 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$ready_o$13 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$ready_o$17 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire \$req_src_d$14 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire \$req_src_d$2 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire \$req_src_d$7 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:183.7-189.10" */
  wire \$req_src_q$23 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire [1:0] \$state_d$12 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  wire [1:0] \$state_d$16 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$state_d$4 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  wire [1:0] \$state_d$8 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1791 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1793 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(ack_synced),
    .Y(\$10 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_src_q  (
    .AD(2'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(data_src_d),
    .Q(data_src_q)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1893  (
    .A(1'h1),
    .B(1'hx),
    .S(ack_synced),
    .Y(\$procmux$1893_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1895  (
    .A(1'hx),
    .B(\$procmux$1893_Y ),
    .S(\$procmux$1896_CMP ),
    .Y(\$procmux$1895_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1896_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1896_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1898  (
    .A(\$ready_o$11 ),
    .B(1'h0),
    .S(ack_synced),
    .Y(\$procmux$1898_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1900  (
    .A(1'hx),
    .B(\$procmux$1898_Y ),
    .S(\$procmux$1901_CMP ),
    .Y(\$procmux$1900_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1901_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1901_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:159.33-164.12|rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1903  (
    .A(2'h0),
    .B(state_q),
    .S(ack_synced),
    .Y(\$procmux$1903_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1905  (
    .A(2'hx),
    .B(\$procmux$1903_Y ),
    .S(\$procmux$1906_CMP ),
    .Y(\$procmux$1905_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1906_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1906_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1909  (
    .A(state_q),
    .B(2'h2),
    .S(\$procmux$1910_CMP ),
    .Y(\$procmux$1909_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1911  (
    .A(2'hx),
    .B(\$procmux$1909_Y ),
    .S(\$procmux$1912_CMP ),
    .Y(\$procmux$1911_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1912_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1912_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1915  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$1916_CMP ),
    .Y(\$procmux$1915_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1917  (
    .A(1'hx),
    .B(\$procmux$1915_Y ),
    .S(\$procmux$1918_CMP ),
    .Y(\$procmux$1917_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1918_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1918_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1921  (
    .A(2'h0),
    .B({ \$state_d$4 , \$state_d$8 , \$state_d$12  }),
    .S({ \$procmux$1926_CMP , \$procmux$1924_CMP , \$procmux$1922_CMP  }),
    .Y(\$procmux$1921_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1922_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1922_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1924_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1924_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1926_CMP0  (
    .A(state_q),
    .Y(\$procmux$1926_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1930  (
    .A(state_q),
    .B(2'h1),
    .S(\$procmux$1931_CMP ),
    .Y(\$procmux$1930_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1932  (
    .A(2'hx),
    .B(\$procmux$1930_Y ),
    .S(\$procmux$1933_CMP ),
    .Y(\$procmux$1932_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1933_CMP0  (
    .A(state_q),
    .Y(\$procmux$1933_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1937  (
    .A(data_src_q),
    .B(data_i),
    .S(\$procmux$1938_CMP ),
    .Y(\$procmux$1937_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1939  (
    .A(2'hx),
    .B(\$procmux$1937_Y ),
    .S(\$procmux$1940_CMP ),
    .Y(\$procmux$1939_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1940_CMP0  (
    .A(state_q),
    .Y(\$procmux$1940_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1944  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$1945_CMP ),
    .Y(\$procmux$1944_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1946  (
    .A(1'hx),
    .B(\$procmux$1944_Y ),
    .S(\$procmux$1947_CMP ),
    .Y(\$procmux$1946_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1947_CMP0  (
    .A(state_q),
    .Y(\$procmux$1947_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1951  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$1952_CMP ),
    .Y(\$procmux$1951_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1952_CMP0  (
    .A(state_q),
    .Y(\$procmux$1952_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1955  (
    .A(1'h0),
    .B({ \$ready_o$1 , \$ready_o$13  }),
    .S({ \$procmux$1958_CMP , \$procmux$1956_CMP  }),
    .Y(\$procmux$1955_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1956_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1956_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1958_CMP0  (
    .A(state_q),
    .Y(\$procmux$1958_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1963  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$1964_CMP ),
    .Y(\$procmux$1963_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1964_CMP0  (
    .A(state_q),
    .Y(\$procmux$1964_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1968  (
    .A(1'h0),
    .B({ \$req_src_d$2 , \$req_src_d$7  }),
    .S({ \$procmux$1971_CMP , \$procmux$1969_CMP  }),
    .Y(\$procmux$1968_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1969_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$1969_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1971_CMP0  (
    .A(state_q),
    .Y(\$procmux$1971_CMP )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign req_src_d = \$req_src_d$14 ;
  assign data_src_d = \$data_src_d$15 ;
  assign state_d = \$state_d$16 ;
  assign ready_o = \$ready_o$17 ;
  assign async_req_o = req_src_q;
  assign async_data_o = data_src_q;
  assign \$data_src_q$24  = 2'h1;
  assign \$req_src_q$23  = 1'h1;
  assign \$procmux$1894_CMP  = \$10 ;
  assign \$ready_o$11  = \$procmux$1895_Y ;
  assign \$procmux$1899_CMP  = \$10 ;
  assign \$ready_o$13  = \$procmux$1900_Y ;
  assign \$procmux$1904_CMP  = \$10 ;
  assign \$state_d$12  = \$procmux$1905_Y ;
  assign \$procmux$1910_CMP  = \$6 ;
  assign \$state_d$8  = \$procmux$1911_Y ;
  assign \$procmux$1916_CMP  = \$6 ;
  assign \$req_src_d$7  = \$procmux$1917_Y ;
  assign \$state_d$16  = \$procmux$1921_Y ;
  assign \$procmux$1931_CMP  = valid_i;
  assign \$state_d$4  = \$procmux$1932_Y ;
  assign \$procmux$1938_CMP  = valid_i;
  assign \$data_src_d$3  = \$procmux$1939_Y ;
  assign \$procmux$1945_CMP  = valid_i;
  assign \$req_src_d$2  = \$procmux$1946_Y ;
  assign \$ready_o$1  = \$procmux$1951_Y ;
  assign \$ready_o$17  = \$procmux$1955_Y ;
  assign \$data_src_d$15  = \$procmux$1963_Y ;
  assign \$req_src_d$14  = \$procmux$1968_Y ;
  assign \$6  = ack_synced;
  assign \$auto$rtlil.cc:2965:LogicNot$1792  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1794  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$44 ;
  wire \$46 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1747 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1748 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1749 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1750 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_clear_out$22 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [1:0] \$initiator_clear_seq_phase$19 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_isolate_out$21 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_phase_transition_req$20 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  wire [3:0] \$initiator_state_d$1 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  wire [3:0] \$initiator_state_d$14 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  wire [3:0] \$initiator_state_d$15 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  wire [3:0] \$initiator_state_d$16 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  wire [3:0] \$initiator_state_d$17 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [3:0] \$initiator_state_d$18 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  wire [3:0] \$initiator_state_d$4 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  wire [3:0] \$initiator_state_d$7 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  wire [3:0] \$initiator_state_d$8 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:373.7-378.10" */
  wire [3:0] \$initiator_state_q$25 ;
  wire \$procmux$3301_Y ;
  wire \$procmux$3302_CMP ;
  wire \$procmux$3303_CMP ;
  wire \$procmux$3304_CMP ;
  wire \$procmux$3305_CMP ;
  wire \$procmux$3307_Y ;
  wire \$procmux$3308_CMP ;
  wire \$procmux$3309_Y ;
  wire \$procmux$3310_CMP ;
  wire \$procmux$3311_CMP ;
  wire \$procmux$3312_CMP ;
  wire \$procmux$3313_CMP ;
  wire \$procmux$3315_Y ;
  wire \$procmux$3316_CMP ;
  wire \$procmux$3318_Y ;
  wire \$procmux$3319_CMP ;
  wire \$procmux$3323_Y ;
  wire \$procmux$3324_CMP ;
  wire \$procmux$3328_Y ;
  wire \$procmux$3329_CMP ;
  wire \$procmux$3333_Y ;
  wire \$procmux$3334_CMP ;
  wire \$procmux$3336_Y ;
  wire \$procmux$3337_CMP ;
  wire \$procmux$3338_CMP ;
  wire \$procmux$3339_CMP ;
  wire \$procmux$3340_CMP ;
  wire \$procmux$3341_Y ;
  wire \$procmux$3342_CMP ;
  wire \$procmux$3344_Y ;
  wire \$procmux$3345_CMP ;
  wire \$procmux$3346_CMP ;
  wire \$procmux$3347_CMP ;
  wire \$procmux$3348_CMP ;
  wire \$procmux$3349_Y ;
  wire \$procmux$3350_CMP ;
  wire \$procmux$3352_Y ;
  wire \$procmux$3353_CMP ;
  wire \$procmux$3354_CMP ;
  wire \$procmux$3355_CMP ;
  wire \$procmux$3356_CMP ;
  wire \$procmux$3357_Y ;
  wire \$procmux$3358_CMP ;
  wire [1:0] \$procmux$3359_Y ;
  wire \$procmux$3360_CMP ;
  wire [3:0] \$procmux$3362_Y ;
  wire \$procmux$3363_CMP ;
  wire [3:0] \$procmux$3364_Y ;
  wire \$procmux$3365_CMP ;
  wire [3:0] \$procmux$3368_Y ;
  wire \$procmux$3369_CMP ;
  wire [3:0] \$procmux$3370_Y ;
  wire \$procmux$3371_CMP ;
  wire [3:0] \$procmux$3375_Y ;
  wire \$procmux$3376_CMP ;
  wire [3:0] \$procmux$3377_Y ;
  wire \$procmux$3378_CMP ;
  wire [3:0] \$procmux$3383_Y ;
  wire \$procmux$3384_CMP ;
  wire [3:0] \$procmux$3385_Y ;
  wire \$procmux$3386_CMP ;
  wire [3:0] \$procmux$3392_Y ;
  wire \$procmux$3393_CMP ;
  wire [3:0] \$procmux$3395_Y ;
  wire \$procmux$3396_CMP ;
  wire [3:0] \$procmux$3398_Y ;
  wire \$procmux$3399_CMP ;
  wire [3:0] \$procmux$3400_Y ;
  wire \$procmux$3401_CMP ;
  wire [3:0] \$procmux$3409_Y ;
  wire \$procmux$3410_CMP ;
  wire [3:0] \$procmux$3412_Y ;
  wire \$procmux$3413_CMP ;
  wire [3:0] \$procmux$3414_Y ;
  wire \$procmux$3415_CMP ;
  wire [3:0] \$procmux$3423_Y ;
  wire \$procmux$3424_CMP ;
  wire [3:0] \$procmux$3425_Y ;
  wire \$procmux$3426_CMP ;
  wire [3:0] \$procmux$3433_Y ;
  wire \$procmux$3434_CMP ;
  wire [3:0] \$procmux$3435_Y ;
  wire \$procmux$3436_CMP ;
  wire [3:0] \$procmux$3444_Y ;
  wire \$procmux$3445_CMP ;
  wire [3:0] \$procmux$3446_Y ;
  wire \$procmux$3447_CMP ;
  wire [3:0] \$procmux$3456_Y ;
  wire \$procmux$3457_CMP ;
  wire [3:0] \$procmux$3459_Y ;
  wire \$procmux$3460_CMP ;
  wire [3:0] \$procmux$3462_Y ;
  wire \$procmux$3463_CMP ;
  wire [3:0] \$procmux$3464_Y ;
  wire \$procmux$3465_CMP ;
  wire [3:0] \$procmux$3476_Y ;
  wire \$procmux$3477_CMP ;
  wire [3:0] \$procmux$3479_Y ;
  wire \$procmux$3480_CMP ;
  wire [3:0] \$procmux$3481_Y ;
  wire \$procmux$3482_CMP ;
  wire [3:0] \$procmux$3493_Y ;
  wire \$procmux$3494_CMP ;
  wire [3:0] \$procmux$3495_Y ;
  wire \$procmux$3496_CMP ;
  wire [3:0] \$procmux$3499_Y ;
  wire \$procmux$3500_CMP ;
  wire \$procmux$3502_CMP ;
  wire \$procmux$3504_CMP ;
  wire \$procmux$3506_CMP ;
  wire \$procmux$3508_CMP ;
  wire \$procmux$3510_CMP ;
  wire \$procmux$3512_CMP ;
  wire \$procmux$3514_CMP ;
  wire \$procmux$3516_CMP ;
  wire [3:0] \$procmux$3526_Y ;
  wire \$procmux$3527_CMP ;
  wire [3:0] \$procmux$3528_Y ;
  wire \$procmux$3529_CMP ;
  wire \$procmux$3536_Y ;
  wire \$procmux$3537_CMP ;
  wire \$procmux$3539_CMP ;
  wire \$procmux$3541_CMP ;
  wire \$procmux$3547_Y ;
  wire \$procmux$3548_CMP ;
  wire \$procmux$3550_CMP ;
  wire \$procmux$3552_CMP ;
  wire \$procmux$3554_CMP ;
  wire \$procmux$3556_CMP ;
  wire \$procmux$3558_CMP ;
  wire \$procmux$3560_CMP ;
  wire \$procmux$3562_CMP ;
  wire \$procmux$3565_Y ;
  wire \$procmux$3566_CMP ;
  wire \$procmux$3568_CMP ;
  wire \$procmux$3570_CMP ;
  wire \$procmux$3572_CMP ;
  wire \$procmux$3574_CMP ;
  wire \$procmux$3576_CMP ;
  wire [1:0] \$procmux$3581_Y ;
  wire \$procmux$3582_CMP ;
  wire \$procmux$3584_CMP ;
  wire \$procmux$3586_CMP ;
  wire \$procmux$3588_CMP ;
  wire \$procmux$3590_CMP ;
  wire \$procmux$3592_CMP ;
  wire \$procmux$3594_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_clear_out$36 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_clear_out$39 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_clear_out$42 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_isolate_out$35 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_isolate_out$38 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_isolate_out$41 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_phase_ack$34 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_phase_ack$37 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_phase_ack$40 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  wire [1:0] \$receiver_phase_q$32 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1747 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1749 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(\$44 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$initiator_state_q  (
    .AD(4'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .Q(initiator_state_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$receiver_phase_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$receiver_phase_q$32 ),
    .Q(receiver_phase_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3301  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$3305_CMP , \$procmux$3304_CMP , \$procmux$3303_CMP , \$procmux$3302_CMP  }),
    .Y(\$procmux$3301_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3302_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3302_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3303_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3303_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3304_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$3304_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3305_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3305_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3307  (
    .A(\$procmux$3301_Y ),
    .B(1'hx),
    .S(\$procmux$3308_CMP ),
    .Y(\$procmux$3307_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3309  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$3313_CMP , \$procmux$3312_CMP , \$procmux$3311_CMP , \$procmux$3310_CMP  }),
    .Y(\$procmux$3309_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3310_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3310_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3311_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3311_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3312_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$3312_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3313_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3313_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3315  (
    .A(\$procmux$3309_Y ),
    .B(1'hx),
    .S(\$procmux$3316_CMP ),
    .Y(\$procmux$3315_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3318  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$3319_CMP ),
    .Y(\$procmux$3318_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3323  (
    .A(\$receiver_clear_out$39 ),
    .B(\$receiver_clear_out$36 ),
    .S(\$procmux$3324_CMP ),
    .Y(\$procmux$3323_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3328  (
    .A(\$receiver_isolate_out$38 ),
    .B(\$receiver_isolate_out$35 ),
    .S(\$procmux$3329_CMP ),
    .Y(\$procmux$3328_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3333  (
    .A(\$receiver_phase_ack$37 ),
    .B(\$receiver_phase_ack$34 ),
    .S(\$procmux$3334_CMP ),
    .Y(\$procmux$3333_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3336  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$3340_CMP , \$procmux$3339_CMP , \$procmux$3338_CMP , \$procmux$3337_CMP  }),
    .Y(\$procmux$3336_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3337_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3337_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3338_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3338_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3339_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3339_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3340_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3340_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3341  (
    .A(1'hx),
    .B(\$procmux$3336_Y ),
    .S(\$procmux$3342_CMP ),
    .Y(\$procmux$3341_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3344  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$3348_CMP , \$procmux$3347_CMP , \$procmux$3346_CMP , \$procmux$3345_CMP  }),
    .Y(\$procmux$3344_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3345_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3345_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3346_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3346_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3347_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3347_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3348_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3348_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3349  (
    .A(1'hx),
    .B(\$procmux$3344_Y ),
    .S(\$procmux$3350_CMP ),
    .Y(\$procmux$3349_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3352  (
    .A(1'hx),
    .B({ 1'h1, isolate_ack_i, clear_ack_i, 1'h1 }),
    .S({ \$procmux$3356_CMP , \$procmux$3355_CMP , \$procmux$3354_CMP , \$procmux$3353_CMP  }),
    .Y(\$procmux$3352_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3353_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3353_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3354_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3354_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3355_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3355_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3356_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3356_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3357  (
    .A(1'hx),
    .B(\$procmux$3352_Y ),
    .S(\$procmux$3358_CMP ),
    .Y(\$procmux$3357_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:442.7-442.47|rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3359  (
    .A(receiver_phase_q),
    .B(receiver_next_phase),
    .S(\$procmux$3360_CMP ),
    .Y(\$procmux$3359_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:361.11-361.36|rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3362  (
    .A(initiator_state_q),
    .B(4'h0),
    .S(\$procmux$3363_CMP ),
    .Y(\$procmux$3362_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3364  (
    .A(4'hx),
    .B(\$procmux$3362_Y ),
    .S(\$procmux$3365_CMP ),
    .Y(\$procmux$3364_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3365_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3365_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:351.11-351.40|rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3368  (
    .A(initiator_state_q),
    .B(4'h8),
    .S(\$procmux$3369_CMP ),
    .Y(\$procmux$3368_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3370  (
    .A(4'hx),
    .B(\$procmux$3368_Y ),
    .S(\$procmux$3371_CMP ),
    .Y(\$procmux$3370_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3371_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3371_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:341.11-341.42|rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3375  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$3376_CMP ),
    .Y(\$procmux$3375_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3377  (
    .A(4'hx),
    .B(\$procmux$3375_Y ),
    .S(\$procmux$3378_CMP ),
    .Y(\$procmux$3377_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3378_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3378_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:331.11-331.42|rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3383  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$3384_CMP ),
    .Y(\$procmux$3383_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3385  (
    .A(4'hx),
    .B(\$procmux$3383_Y ),
    .S(\$procmux$3386_CMP ),
    .Y(\$procmux$3385_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3386_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3386_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:322.11-322.52|rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3392  (
    .A(initiator_state_q),
    .B(4'h5),
    .S(\$procmux$3393_CMP ),
    .Y(\$procmux$3392_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3395  (
    .A(\$procmux$3392_Y ),
    .B(4'hx),
    .S(\$procmux$3396_CMP ),
    .Y(\$procmux$3395_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3398  (
    .A(\$procmux$3395_Y ),
    .B(4'hx),
    .S(\$procmux$3399_CMP ),
    .Y(\$procmux$3398_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3400  (
    .A(4'hx),
    .B(\$procmux$3398_Y ),
    .S(\$procmux$3401_CMP ),
    .Y(\$procmux$3400_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3401_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3401_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3409  (
    .A(\$initiator_state_d$11 ),
    .B(4'h6),
    .S(\$procmux$3410_CMP ),
    .Y(\$procmux$3409_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3412  (
    .A(\$procmux$3409_Y ),
    .B(4'hx),
    .S(\$procmux$3413_CMP ),
    .Y(\$procmux$3412_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3414  (
    .A(4'hx),
    .B(\$procmux$3412_Y ),
    .S(\$procmux$3415_CMP ),
    .Y(\$procmux$3414_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3415_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3415_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3423  (
    .A(\$initiator_state_d$12 ),
    .B(4'h7),
    .S(\$procmux$3424_CMP ),
    .Y(\$procmux$3423_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3425  (
    .A(4'hx),
    .B(\$procmux$3423_Y ),
    .S(\$procmux$3426_CMP ),
    .Y(\$procmux$3425_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3426_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3426_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:308.11-308.37|rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3433  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$3434_CMP ),
    .Y(\$procmux$3433_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3435  (
    .A(4'hx),
    .B(\$procmux$3433_Y ),
    .S(\$procmux$3436_CMP ),
    .Y(\$procmux$3435_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3436_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3436_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:298.11-298.37|rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3444  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$3445_CMP ),
    .Y(\$procmux$3444_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3446  (
    .A(4'hx),
    .B(\$procmux$3444_Y ),
    .S(\$procmux$3447_CMP ),
    .Y(\$procmux$3446_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3447_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3447_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:289.11-289.54|rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3456  (
    .A(initiator_state_q),
    .B(4'h2),
    .S(\$procmux$3457_CMP ),
    .Y(\$procmux$3456_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3459  (
    .A(\$procmux$3456_Y ),
    .B(4'hx),
    .S(\$procmux$3460_CMP ),
    .Y(\$procmux$3459_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3462  (
    .A(\$procmux$3459_Y ),
    .B(4'hx),
    .S(\$procmux$3463_CMP ),
    .Y(\$procmux$3462_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3464  (
    .A(4'hx),
    .B(\$procmux$3462_Y ),
    .S(\$procmux$3465_CMP ),
    .Y(\$procmux$3464_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3465_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3476  (
    .A(\$initiator_state_d$4 ),
    .B(4'h3),
    .S(\$procmux$3477_CMP ),
    .Y(\$procmux$3476_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3479  (
    .A(\$procmux$3476_Y ),
    .B(4'hx),
    .S(\$procmux$3480_CMP ),
    .Y(\$procmux$3479_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3481  (
    .A(4'hx),
    .B(\$procmux$3479_Y ),
    .S(\$procmux$3482_CMP ),
    .Y(\$procmux$3481_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3482_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3482_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3493  (
    .A(\$initiator_state_d$5 ),
    .B(4'h4),
    .S(\$procmux$3494_CMP ),
    .Y(\$procmux$3493_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3495  (
    .A(4'hx),
    .B(\$procmux$3493_Y ),
    .S(\$procmux$3496_CMP ),
    .Y(\$procmux$3495_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3496_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3496_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd4)
  ) \$procmux$3499  (
    .A(4'h1),
    .B({ \$initiator_state_d$1 , \$initiator_state_d$6 , \$initiator_state_d$7 , \$initiator_state_d$8 , \$initiator_state_d$13 , \$initiator_state_d$14 , \$initiator_state_d$15 , \$initiator_state_d$16 , \$initiator_state_d$17  }),
    .S({ \$procmux$3516_CMP , \$procmux$3514_CMP , \$procmux$3512_CMP , \$procmux$3510_CMP , \$procmux$3508_CMP , \$procmux$3506_CMP , \$procmux$3504_CMP , \$procmux$3502_CMP , \$procmux$3500_CMP  }),
    .Y(\$procmux$3499_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3500_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3500_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3502_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3502_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3504_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3504_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3506_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3506_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3508_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3508_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3510_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3510_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3512_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3512_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3514_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3514_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3516_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3516_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:275.11-275.39|rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3526  (
    .A(initiator_state_q),
    .B(4'h1),
    .S(\$procmux$3527_CMP ),
    .Y(\$procmux$3526_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3528  (
    .A(4'hx),
    .B(\$procmux$3526_Y ),
    .S(\$procmux$3529_CMP ),
    .Y(\$procmux$3528_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3529_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3529_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3536  (
    .A(1'h0),
    .B(3'h7),
    .S({ \$procmux$3541_CMP , \$procmux$3539_CMP , \$procmux$3537_CMP  }),
    .Y(\$procmux$3536_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3537_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3537_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3539_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3539_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3541_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3541_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$3547  (
    .A(1'h0),
    .B(8'hff),
    .S({ \$procmux$3562_CMP , \$procmux$3560_CMP , \$procmux$3558_CMP , \$procmux$3556_CMP , \$procmux$3554_CMP , \$procmux$3552_CMP , \$procmux$3550_CMP , \$procmux$3548_CMP  }),
    .Y(\$procmux$3547_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3548_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3548_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3550_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3550_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3552_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3552_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3554_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3554_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3556_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3556_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3558_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3558_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3560_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3560_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3562_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3562_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$procmux$3565  (
    .A(1'h0),
    .B(6'h3f),
    .S({ \$procmux$3576_CMP , \$procmux$3574_CMP , \$procmux$3572_CMP , \$procmux$3570_CMP , \$procmux$3568_CMP , \$procmux$3566_CMP  }),
    .Y(\$procmux$3565_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3566_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3566_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3568_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3568_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3570_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3570_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3572_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3572_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3574_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3574_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3576_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3576_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd2)
  ) \$procmux$3581  (
    .A(2'h0),
    .B(14'h15ab),
    .S({ \$procmux$3594_CMP , \$procmux$3592_CMP , \$procmux$3590_CMP , \$procmux$3588_CMP , \$procmux$3586_CMP , \$procmux$3584_CMP , \$procmux$3582_CMP  }),
    .Y(\$procmux$3581_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3582_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3582_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3584_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3584_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3586_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3586_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3588_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3588_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3590_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3590_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3592_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3592_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3594_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3594_CMP )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign initiator_state_d = \$initiator_state_d$18 ;
  assign initiator_clear_seq_phase = \$initiator_clear_seq_phase$19 ;
  assign initiator_phase_transition_req = \$initiator_phase_transition_req$20 ;
  assign initiator_isolate_out = \$initiator_isolate_out$21 ;
  assign initiator_clear_out = \$initiator_clear_out$22 ;
  assign receiver_phase_ack = \$receiver_phase_ack$40 ;
  assign receiver_isolate_out = \$receiver_isolate_out$41 ;
  assign receiver_clear_out = \$receiver_clear_out$42 ;
  assign clear_o = \$44 ;
  assign isolate_o = \$46 ;
  assign \$initiator_state_q$25  = 4'h1;
  assign \$procmux$3308_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$39  = \$procmux$3307_Y ;
  assign \$procmux$3316_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$38  = \$procmux$3315_Y ;
  assign \$procmux$3319_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$37  = \$procmux$3318_Y ;
  assign \$procmux$3324_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$42  = \$procmux$3323_Y ;
  assign \$procmux$3329_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$41  = \$procmux$3328_Y ;
  assign \$procmux$3334_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$40  = \$procmux$3333_Y ;
  assign \$procmux$3342_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$36  = \$procmux$3341_Y ;
  assign \$procmux$3350_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$35  = \$procmux$3349_Y ;
  assign \$procmux$3358_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$34  = \$procmux$3357_Y ;
  assign \$procmux$3360_CMP  = \$31 ;
  assign \$receiver_phase_q$32  = \$procmux$3359_Y ;
  assign \$procmux$3363_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$17  = \$procmux$3364_Y ;
  assign \$procmux$3369_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$16  = \$procmux$3370_Y ;
  assign \$procmux$3376_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$15  = \$procmux$3377_Y ;
  assign \$procmux$3384_CMP  = clear_ack_i;
  assign \$initiator_state_d$14  = \$procmux$3385_Y ;
  assign \$procmux$3393_CMP  = clear_ack_i;
  assign \$procmux$3396_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3399_CMP  = \$10 ;
  assign \$initiator_state_d$11  = \$procmux$3400_Y ;
  assign \$procmux$3410_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3413_CMP  = \$10 ;
  assign \$initiator_state_d$12  = \$procmux$3414_Y ;
  assign \$procmux$3424_CMP  = \$10 ;
  assign \$initiator_state_d$13  = \$procmux$3425_Y ;
  assign \$procmux$3434_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$8  = \$procmux$3435_Y ;
  assign \$procmux$3445_CMP  = isolate_ack_i;
  assign \$initiator_state_d$7  = \$procmux$3446_Y ;
  assign \$procmux$3457_CMP  = isolate_ack_i;
  assign \$procmux$3460_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3463_CMP  = \$3 ;
  assign \$initiator_state_d$4  = \$procmux$3464_Y ;
  assign \$procmux$3477_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3480_CMP  = \$3 ;
  assign \$initiator_state_d$5  = \$procmux$3481_Y ;
  assign \$procmux$3494_CMP  = \$3 ;
  assign \$initiator_state_d$6  = \$procmux$3495_Y ;
  assign \$initiator_state_d$18  = \$procmux$3499_Y ;
  assign \$procmux$3527_CMP  = clear_i;
  assign \$initiator_state_d$1  = \$procmux$3528_Y ;
  assign \$initiator_clear_out$22  = \$procmux$3536_Y ;
  assign \$initiator_isolate_out$21  = \$procmux$3547_Y ;
  assign \$initiator_phase_transition_req$20  = \$procmux$3565_Y ;
  assign \$initiator_clear_seq_phase$19  = \$procmux$3581_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1748  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1750  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$44 ;
  wire \$46 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1751 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1752 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1753 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1754 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_clear_out$22 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [1:0] \$initiator_clear_seq_phase$19 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_isolate_out$21 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_phase_transition_req$20 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  wire [3:0] \$initiator_state_d$1 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  wire [3:0] \$initiator_state_d$14 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  wire [3:0] \$initiator_state_d$15 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  wire [3:0] \$initiator_state_d$16 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  wire [3:0] \$initiator_state_d$17 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [3:0] \$initiator_state_d$18 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  wire [3:0] \$initiator_state_d$4 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  wire [3:0] \$initiator_state_d$7 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  wire [3:0] \$initiator_state_d$8 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:373.7-378.10" */
  wire [3:0] \$initiator_state_q$25 ;
  wire \$procmux$3007_Y ;
  wire \$procmux$3008_CMP ;
  wire \$procmux$3009_CMP ;
  wire \$procmux$3010_CMP ;
  wire \$procmux$3011_CMP ;
  wire \$procmux$3013_Y ;
  wire \$procmux$3014_CMP ;
  wire \$procmux$3015_Y ;
  wire \$procmux$3016_CMP ;
  wire \$procmux$3017_CMP ;
  wire \$procmux$3018_CMP ;
  wire \$procmux$3019_CMP ;
  wire \$procmux$3021_Y ;
  wire \$procmux$3022_CMP ;
  wire \$procmux$3024_Y ;
  wire \$procmux$3025_CMP ;
  wire \$procmux$3029_Y ;
  wire \$procmux$3030_CMP ;
  wire \$procmux$3034_Y ;
  wire \$procmux$3035_CMP ;
  wire \$procmux$3039_Y ;
  wire \$procmux$3040_CMP ;
  wire \$procmux$3042_Y ;
  wire \$procmux$3043_CMP ;
  wire \$procmux$3044_CMP ;
  wire \$procmux$3045_CMP ;
  wire \$procmux$3046_CMP ;
  wire \$procmux$3047_Y ;
  wire \$procmux$3048_CMP ;
  wire \$procmux$3050_Y ;
  wire \$procmux$3051_CMP ;
  wire \$procmux$3052_CMP ;
  wire \$procmux$3053_CMP ;
  wire \$procmux$3054_CMP ;
  wire \$procmux$3055_Y ;
  wire \$procmux$3056_CMP ;
  wire \$procmux$3058_Y ;
  wire \$procmux$3059_CMP ;
  wire \$procmux$3060_CMP ;
  wire \$procmux$3061_CMP ;
  wire \$procmux$3062_CMP ;
  wire \$procmux$3063_Y ;
  wire \$procmux$3064_CMP ;
  wire [1:0] \$procmux$3065_Y ;
  wire \$procmux$3066_CMP ;
  wire [3:0] \$procmux$3068_Y ;
  wire \$procmux$3069_CMP ;
  wire [3:0] \$procmux$3070_Y ;
  wire \$procmux$3071_CMP ;
  wire [3:0] \$procmux$3074_Y ;
  wire \$procmux$3075_CMP ;
  wire [3:0] \$procmux$3076_Y ;
  wire \$procmux$3077_CMP ;
  wire [3:0] \$procmux$3081_Y ;
  wire \$procmux$3082_CMP ;
  wire [3:0] \$procmux$3083_Y ;
  wire \$procmux$3084_CMP ;
  wire [3:0] \$procmux$3089_Y ;
  wire \$procmux$3090_CMP ;
  wire [3:0] \$procmux$3091_Y ;
  wire \$procmux$3092_CMP ;
  wire [3:0] \$procmux$3098_Y ;
  wire \$procmux$3099_CMP ;
  wire [3:0] \$procmux$3101_Y ;
  wire \$procmux$3102_CMP ;
  wire [3:0] \$procmux$3104_Y ;
  wire \$procmux$3105_CMP ;
  wire [3:0] \$procmux$3106_Y ;
  wire \$procmux$3107_CMP ;
  wire [3:0] \$procmux$3115_Y ;
  wire \$procmux$3116_CMP ;
  wire [3:0] \$procmux$3118_Y ;
  wire \$procmux$3119_CMP ;
  wire [3:0] \$procmux$3120_Y ;
  wire \$procmux$3121_CMP ;
  wire [3:0] \$procmux$3129_Y ;
  wire \$procmux$3130_CMP ;
  wire [3:0] \$procmux$3131_Y ;
  wire \$procmux$3132_CMP ;
  wire [3:0] \$procmux$3139_Y ;
  wire \$procmux$3140_CMP ;
  wire [3:0] \$procmux$3141_Y ;
  wire \$procmux$3142_CMP ;
  wire [3:0] \$procmux$3150_Y ;
  wire \$procmux$3151_CMP ;
  wire [3:0] \$procmux$3152_Y ;
  wire \$procmux$3153_CMP ;
  wire [3:0] \$procmux$3162_Y ;
  wire \$procmux$3163_CMP ;
  wire [3:0] \$procmux$3165_Y ;
  wire \$procmux$3166_CMP ;
  wire [3:0] \$procmux$3168_Y ;
  wire \$procmux$3169_CMP ;
  wire [3:0] \$procmux$3170_Y ;
  wire \$procmux$3171_CMP ;
  wire [3:0] \$procmux$3182_Y ;
  wire \$procmux$3183_CMP ;
  wire [3:0] \$procmux$3185_Y ;
  wire \$procmux$3186_CMP ;
  wire [3:0] \$procmux$3187_Y ;
  wire \$procmux$3188_CMP ;
  wire [3:0] \$procmux$3199_Y ;
  wire \$procmux$3200_CMP ;
  wire [3:0] \$procmux$3201_Y ;
  wire \$procmux$3202_CMP ;
  wire [3:0] \$procmux$3205_Y ;
  wire \$procmux$3206_CMP ;
  wire \$procmux$3208_CMP ;
  wire \$procmux$3210_CMP ;
  wire \$procmux$3212_CMP ;
  wire \$procmux$3214_CMP ;
  wire \$procmux$3216_CMP ;
  wire \$procmux$3218_CMP ;
  wire \$procmux$3220_CMP ;
  wire \$procmux$3222_CMP ;
  wire [3:0] \$procmux$3232_Y ;
  wire \$procmux$3233_CMP ;
  wire [3:0] \$procmux$3234_Y ;
  wire \$procmux$3235_CMP ;
  wire \$procmux$3242_Y ;
  wire \$procmux$3243_CMP ;
  wire \$procmux$3245_CMP ;
  wire \$procmux$3247_CMP ;
  wire \$procmux$3253_Y ;
  wire \$procmux$3254_CMP ;
  wire \$procmux$3256_CMP ;
  wire \$procmux$3258_CMP ;
  wire \$procmux$3260_CMP ;
  wire \$procmux$3262_CMP ;
  wire \$procmux$3264_CMP ;
  wire \$procmux$3266_CMP ;
  wire \$procmux$3268_CMP ;
  wire \$procmux$3271_Y ;
  wire \$procmux$3272_CMP ;
  wire \$procmux$3274_CMP ;
  wire \$procmux$3276_CMP ;
  wire \$procmux$3278_CMP ;
  wire \$procmux$3280_CMP ;
  wire \$procmux$3282_CMP ;
  wire [1:0] \$procmux$3287_Y ;
  wire \$procmux$3288_CMP ;
  wire \$procmux$3290_CMP ;
  wire \$procmux$3292_CMP ;
  wire \$procmux$3294_CMP ;
  wire \$procmux$3296_CMP ;
  wire \$procmux$3298_CMP ;
  wire \$procmux$3300_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_clear_out$36 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_clear_out$39 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_clear_out$42 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_isolate_out$35 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_isolate_out$38 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_isolate_out$41 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_phase_ack$34 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_phase_ack$37 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_phase_ack$40 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  wire [1:0] \$receiver_phase_q$32 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1751 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1753 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(\$44 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$initiator_state_q  (
    .AD(4'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .Q(initiator_state_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$receiver_phase_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$receiver_phase_q$32 ),
    .Q(receiver_phase_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3007  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$3011_CMP , \$procmux$3010_CMP , \$procmux$3009_CMP , \$procmux$3008_CMP  }),
    .Y(\$procmux$3007_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3008_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3008_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3009_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3009_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3010_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$3010_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3011_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3011_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3013  (
    .A(\$procmux$3007_Y ),
    .B(1'hx),
    .S(\$procmux$3014_CMP ),
    .Y(\$procmux$3013_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3015  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$3019_CMP , \$procmux$3018_CMP , \$procmux$3017_CMP , \$procmux$3016_CMP  }),
    .Y(\$procmux$3015_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3016_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3016_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3017_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3017_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3018_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$3018_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3019_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3019_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3021  (
    .A(\$procmux$3015_Y ),
    .B(1'hx),
    .S(\$procmux$3022_CMP ),
    .Y(\$procmux$3021_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3024  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$3025_CMP ),
    .Y(\$procmux$3024_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3029  (
    .A(\$receiver_clear_out$39 ),
    .B(\$receiver_clear_out$36 ),
    .S(\$procmux$3030_CMP ),
    .Y(\$procmux$3029_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3034  (
    .A(\$receiver_isolate_out$38 ),
    .B(\$receiver_isolate_out$35 ),
    .S(\$procmux$3035_CMP ),
    .Y(\$procmux$3034_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3039  (
    .A(\$receiver_phase_ack$37 ),
    .B(\$receiver_phase_ack$34 ),
    .S(\$procmux$3040_CMP ),
    .Y(\$procmux$3039_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3042  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$3046_CMP , \$procmux$3045_CMP , \$procmux$3044_CMP , \$procmux$3043_CMP  }),
    .Y(\$procmux$3042_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3043_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3043_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3044_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3044_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3045_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3045_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3046_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3046_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3047  (
    .A(1'hx),
    .B(\$procmux$3042_Y ),
    .S(\$procmux$3048_CMP ),
    .Y(\$procmux$3047_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3050  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$3054_CMP , \$procmux$3053_CMP , \$procmux$3052_CMP , \$procmux$3051_CMP  }),
    .Y(\$procmux$3050_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3051_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3051_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3052_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3052_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3053_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3053_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3054_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3054_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3055  (
    .A(1'hx),
    .B(\$procmux$3050_Y ),
    .S(\$procmux$3056_CMP ),
    .Y(\$procmux$3055_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3058  (
    .A(1'hx),
    .B({ 1'h1, isolate_ack_i, clear_ack_i, 1'h1 }),
    .S({ \$procmux$3062_CMP , \$procmux$3061_CMP , \$procmux$3060_CMP , \$procmux$3059_CMP  }),
    .Y(\$procmux$3058_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3059_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3059_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3060_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3060_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3061_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$3061_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3062_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3062_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3063  (
    .A(1'hx),
    .B(\$procmux$3058_Y ),
    .S(\$procmux$3064_CMP ),
    .Y(\$procmux$3063_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:442.7-442.47|rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3065  (
    .A(receiver_phase_q),
    .B(receiver_next_phase),
    .S(\$procmux$3066_CMP ),
    .Y(\$procmux$3065_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:361.11-361.36|rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3068  (
    .A(initiator_state_q),
    .B(4'h0),
    .S(\$procmux$3069_CMP ),
    .Y(\$procmux$3068_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3070  (
    .A(4'hx),
    .B(\$procmux$3068_Y ),
    .S(\$procmux$3071_CMP ),
    .Y(\$procmux$3070_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3071_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3071_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:351.11-351.40|rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3074  (
    .A(initiator_state_q),
    .B(4'h8),
    .S(\$procmux$3075_CMP ),
    .Y(\$procmux$3074_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3076  (
    .A(4'hx),
    .B(\$procmux$3074_Y ),
    .S(\$procmux$3077_CMP ),
    .Y(\$procmux$3076_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3077_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3077_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:341.11-341.42|rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3081  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$3082_CMP ),
    .Y(\$procmux$3081_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3083  (
    .A(4'hx),
    .B(\$procmux$3081_Y ),
    .S(\$procmux$3084_CMP ),
    .Y(\$procmux$3083_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3084_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3084_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:331.11-331.42|rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3089  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$3090_CMP ),
    .Y(\$procmux$3089_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3091  (
    .A(4'hx),
    .B(\$procmux$3089_Y ),
    .S(\$procmux$3092_CMP ),
    .Y(\$procmux$3091_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3092_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3092_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:322.11-322.52|rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3098  (
    .A(initiator_state_q),
    .B(4'h5),
    .S(\$procmux$3099_CMP ),
    .Y(\$procmux$3098_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3101  (
    .A(\$procmux$3098_Y ),
    .B(4'hx),
    .S(\$procmux$3102_CMP ),
    .Y(\$procmux$3101_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3104  (
    .A(\$procmux$3101_Y ),
    .B(4'hx),
    .S(\$procmux$3105_CMP ),
    .Y(\$procmux$3104_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3106  (
    .A(4'hx),
    .B(\$procmux$3104_Y ),
    .S(\$procmux$3107_CMP ),
    .Y(\$procmux$3106_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3107_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3107_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3115  (
    .A(\$initiator_state_d$11 ),
    .B(4'h6),
    .S(\$procmux$3116_CMP ),
    .Y(\$procmux$3115_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3118  (
    .A(\$procmux$3115_Y ),
    .B(4'hx),
    .S(\$procmux$3119_CMP ),
    .Y(\$procmux$3118_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3120  (
    .A(4'hx),
    .B(\$procmux$3118_Y ),
    .S(\$procmux$3121_CMP ),
    .Y(\$procmux$3120_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3121_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3121_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3129  (
    .A(\$initiator_state_d$12 ),
    .B(4'h7),
    .S(\$procmux$3130_CMP ),
    .Y(\$procmux$3129_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3131  (
    .A(4'hx),
    .B(\$procmux$3129_Y ),
    .S(\$procmux$3132_CMP ),
    .Y(\$procmux$3131_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3132_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3132_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:308.11-308.37|rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3139  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$3140_CMP ),
    .Y(\$procmux$3139_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3141  (
    .A(4'hx),
    .B(\$procmux$3139_Y ),
    .S(\$procmux$3142_CMP ),
    .Y(\$procmux$3141_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3142_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3142_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:298.11-298.37|rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3150  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$3151_CMP ),
    .Y(\$procmux$3150_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3152  (
    .A(4'hx),
    .B(\$procmux$3150_Y ),
    .S(\$procmux$3153_CMP ),
    .Y(\$procmux$3152_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3153_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3153_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:289.11-289.54|rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3162  (
    .A(initiator_state_q),
    .B(4'h2),
    .S(\$procmux$3163_CMP ),
    .Y(\$procmux$3162_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3165  (
    .A(\$procmux$3162_Y ),
    .B(4'hx),
    .S(\$procmux$3166_CMP ),
    .Y(\$procmux$3165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3168  (
    .A(\$procmux$3165_Y ),
    .B(4'hx),
    .S(\$procmux$3169_CMP ),
    .Y(\$procmux$3168_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3170  (
    .A(4'hx),
    .B(\$procmux$3168_Y ),
    .S(\$procmux$3171_CMP ),
    .Y(\$procmux$3170_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3171_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3171_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3182  (
    .A(\$initiator_state_d$4 ),
    .B(4'h3),
    .S(\$procmux$3183_CMP ),
    .Y(\$procmux$3182_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3185  (
    .A(\$procmux$3182_Y ),
    .B(4'hx),
    .S(\$procmux$3186_CMP ),
    .Y(\$procmux$3185_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3187  (
    .A(4'hx),
    .B(\$procmux$3185_Y ),
    .S(\$procmux$3188_CMP ),
    .Y(\$procmux$3187_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3188_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3188_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3199  (
    .A(\$initiator_state_d$5 ),
    .B(4'h4),
    .S(\$procmux$3200_CMP ),
    .Y(\$procmux$3199_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3201  (
    .A(4'hx),
    .B(\$procmux$3199_Y ),
    .S(\$procmux$3202_CMP ),
    .Y(\$procmux$3201_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3202_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3202_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd4)
  ) \$procmux$3205  (
    .A(4'h1),
    .B({ \$initiator_state_d$1 , \$initiator_state_d$6 , \$initiator_state_d$7 , \$initiator_state_d$8 , \$initiator_state_d$13 , \$initiator_state_d$14 , \$initiator_state_d$15 , \$initiator_state_d$16 , \$initiator_state_d$17  }),
    .S({ \$procmux$3222_CMP , \$procmux$3220_CMP , \$procmux$3218_CMP , \$procmux$3216_CMP , \$procmux$3214_CMP , \$procmux$3212_CMP , \$procmux$3210_CMP , \$procmux$3208_CMP , \$procmux$3206_CMP  }),
    .Y(\$procmux$3205_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3206_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3206_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3208_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3208_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3210_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3210_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3212_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3212_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3214_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3214_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3216_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3216_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3218_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3218_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3220_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3220_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3222_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3222_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:275.11-275.39|rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3232  (
    .A(initiator_state_q),
    .B(4'h1),
    .S(\$procmux$3233_CMP ),
    .Y(\$procmux$3232_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3234  (
    .A(4'hx),
    .B(\$procmux$3232_Y ),
    .S(\$procmux$3235_CMP ),
    .Y(\$procmux$3234_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3235_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3235_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3242  (
    .A(1'h0),
    .B(3'h7),
    .S({ \$procmux$3247_CMP , \$procmux$3245_CMP , \$procmux$3243_CMP  }),
    .Y(\$procmux$3242_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3243_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3243_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3245_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3245_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3247_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3247_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$3253  (
    .A(1'h0),
    .B(8'hff),
    .S({ \$procmux$3268_CMP , \$procmux$3266_CMP , \$procmux$3264_CMP , \$procmux$3262_CMP , \$procmux$3260_CMP , \$procmux$3258_CMP , \$procmux$3256_CMP , \$procmux$3254_CMP  }),
    .Y(\$procmux$3253_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3254_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3254_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3256_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3256_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3258_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3258_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3260_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3260_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3262_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3262_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3264_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3264_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3266_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3266_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3268_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3268_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$procmux$3271  (
    .A(1'h0),
    .B(6'h3f),
    .S({ \$procmux$3282_CMP , \$procmux$3280_CMP , \$procmux$3278_CMP , \$procmux$3276_CMP , \$procmux$3274_CMP , \$procmux$3272_CMP  }),
    .Y(\$procmux$3271_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3272_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3272_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3274_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3274_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3276_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3276_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3278_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3278_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3280_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3280_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3282_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3282_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd2)
  ) \$procmux$3287  (
    .A(2'h0),
    .B(14'h15ab),
    .S({ \$procmux$3300_CMP , \$procmux$3298_CMP , \$procmux$3296_CMP , \$procmux$3294_CMP , \$procmux$3292_CMP , \$procmux$3290_CMP , \$procmux$3288_CMP  }),
    .Y(\$procmux$3287_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3288_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$3288_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3290_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$3290_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3292_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$3292_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3294_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3294_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3296_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3296_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3298_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3298_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3300_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3300_CMP )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign initiator_state_d = \$initiator_state_d$18 ;
  assign initiator_clear_seq_phase = \$initiator_clear_seq_phase$19 ;
  assign initiator_phase_transition_req = \$initiator_phase_transition_req$20 ;
  assign initiator_isolate_out = \$initiator_isolate_out$21 ;
  assign initiator_clear_out = \$initiator_clear_out$22 ;
  assign receiver_phase_ack = \$receiver_phase_ack$40 ;
  assign receiver_isolate_out = \$receiver_isolate_out$41 ;
  assign receiver_clear_out = \$receiver_clear_out$42 ;
  assign clear_o = \$44 ;
  assign isolate_o = \$46 ;
  assign \$initiator_state_q$25  = 4'h1;
  assign \$procmux$3014_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$39  = \$procmux$3013_Y ;
  assign \$procmux$3022_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$38  = \$procmux$3021_Y ;
  assign \$procmux$3025_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$37  = \$procmux$3024_Y ;
  assign \$procmux$3030_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$42  = \$procmux$3029_Y ;
  assign \$procmux$3035_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$41  = \$procmux$3034_Y ;
  assign \$procmux$3040_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$40  = \$procmux$3039_Y ;
  assign \$procmux$3048_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$36  = \$procmux$3047_Y ;
  assign \$procmux$3056_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$35  = \$procmux$3055_Y ;
  assign \$procmux$3064_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$34  = \$procmux$3063_Y ;
  assign \$procmux$3066_CMP  = \$31 ;
  assign \$receiver_phase_q$32  = \$procmux$3065_Y ;
  assign \$procmux$3069_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$17  = \$procmux$3070_Y ;
  assign \$procmux$3075_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$16  = \$procmux$3076_Y ;
  assign \$procmux$3082_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$15  = \$procmux$3083_Y ;
  assign \$procmux$3090_CMP  = clear_ack_i;
  assign \$initiator_state_d$14  = \$procmux$3091_Y ;
  assign \$procmux$3099_CMP  = clear_ack_i;
  assign \$procmux$3102_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3105_CMP  = \$10 ;
  assign \$initiator_state_d$11  = \$procmux$3106_Y ;
  assign \$procmux$3116_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3119_CMP  = \$10 ;
  assign \$initiator_state_d$12  = \$procmux$3120_Y ;
  assign \$procmux$3130_CMP  = \$10 ;
  assign \$initiator_state_d$13  = \$procmux$3131_Y ;
  assign \$procmux$3140_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$8  = \$procmux$3141_Y ;
  assign \$procmux$3151_CMP  = isolate_ack_i;
  assign \$initiator_state_d$7  = \$procmux$3152_Y ;
  assign \$procmux$3163_CMP  = isolate_ack_i;
  assign \$procmux$3166_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3169_CMP  = \$3 ;
  assign \$initiator_state_d$4  = \$procmux$3170_Y ;
  assign \$procmux$3183_CMP  = initiator_phase_transition_ack;
  assign \$procmux$3186_CMP  = \$3 ;
  assign \$initiator_state_d$5  = \$procmux$3187_Y ;
  assign \$procmux$3200_CMP  = \$3 ;
  assign \$initiator_state_d$6  = \$procmux$3201_Y ;
  assign \$initiator_state_d$18  = \$procmux$3205_Y ;
  assign \$procmux$3233_CMP  = clear_i;
  assign \$initiator_state_d$1  = \$procmux$3234_Y ;
  assign \$initiator_clear_out$22  = \$procmux$3242_Y ;
  assign \$initiator_isolate_out$21  = \$procmux$3253_Y ;
  assign \$initiator_phase_transition_req$20  = \$procmux$3271_Y ;
  assign \$initiator_clear_seq_phase$19  = \$procmux$3287_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1752  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1754  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$44 ;
  wire \$46 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1759 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1760 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1761 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1762 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_clear_out$22 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [1:0] \$initiator_clear_seq_phase$19 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_isolate_out$21 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_phase_transition_req$20 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  wire [3:0] \$initiator_state_d$1 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  wire [3:0] \$initiator_state_d$14 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  wire [3:0] \$initiator_state_d$15 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  wire [3:0] \$initiator_state_d$16 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  wire [3:0] \$initiator_state_d$17 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [3:0] \$initiator_state_d$18 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  wire [3:0] \$initiator_state_d$4 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  wire [3:0] \$initiator_state_d$7 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  wire [3:0] \$initiator_state_d$8 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:373.7-378.10" */
  wire [3:0] \$initiator_state_q$25 ;
  wire \$procmux$2713_Y ;
  wire \$procmux$2714_CMP ;
  wire \$procmux$2715_CMP ;
  wire \$procmux$2716_CMP ;
  wire \$procmux$2717_CMP ;
  wire \$procmux$2719_Y ;
  wire \$procmux$2720_CMP ;
  wire \$procmux$2721_Y ;
  wire \$procmux$2722_CMP ;
  wire \$procmux$2723_CMP ;
  wire \$procmux$2724_CMP ;
  wire \$procmux$2725_CMP ;
  wire \$procmux$2727_Y ;
  wire \$procmux$2728_CMP ;
  wire \$procmux$2730_Y ;
  wire \$procmux$2731_CMP ;
  wire \$procmux$2735_Y ;
  wire \$procmux$2736_CMP ;
  wire \$procmux$2740_Y ;
  wire \$procmux$2741_CMP ;
  wire \$procmux$2745_Y ;
  wire \$procmux$2746_CMP ;
  wire \$procmux$2748_Y ;
  wire \$procmux$2749_CMP ;
  wire \$procmux$2750_CMP ;
  wire \$procmux$2751_CMP ;
  wire \$procmux$2752_CMP ;
  wire \$procmux$2753_Y ;
  wire \$procmux$2754_CMP ;
  wire \$procmux$2756_Y ;
  wire \$procmux$2757_CMP ;
  wire \$procmux$2758_CMP ;
  wire \$procmux$2759_CMP ;
  wire \$procmux$2760_CMP ;
  wire \$procmux$2761_Y ;
  wire \$procmux$2762_CMP ;
  wire \$procmux$2764_Y ;
  wire \$procmux$2765_CMP ;
  wire \$procmux$2766_CMP ;
  wire \$procmux$2767_CMP ;
  wire \$procmux$2768_CMP ;
  wire \$procmux$2769_Y ;
  wire \$procmux$2770_CMP ;
  wire [1:0] \$procmux$2771_Y ;
  wire \$procmux$2772_CMP ;
  wire [3:0] \$procmux$2774_Y ;
  wire \$procmux$2775_CMP ;
  wire [3:0] \$procmux$2776_Y ;
  wire \$procmux$2777_CMP ;
  wire [3:0] \$procmux$2780_Y ;
  wire \$procmux$2781_CMP ;
  wire [3:0] \$procmux$2782_Y ;
  wire \$procmux$2783_CMP ;
  wire [3:0] \$procmux$2787_Y ;
  wire \$procmux$2788_CMP ;
  wire [3:0] \$procmux$2789_Y ;
  wire \$procmux$2790_CMP ;
  wire [3:0] \$procmux$2795_Y ;
  wire \$procmux$2796_CMP ;
  wire [3:0] \$procmux$2797_Y ;
  wire \$procmux$2798_CMP ;
  wire [3:0] \$procmux$2804_Y ;
  wire \$procmux$2805_CMP ;
  wire [3:0] \$procmux$2807_Y ;
  wire \$procmux$2808_CMP ;
  wire [3:0] \$procmux$2810_Y ;
  wire \$procmux$2811_CMP ;
  wire [3:0] \$procmux$2812_Y ;
  wire \$procmux$2813_CMP ;
  wire [3:0] \$procmux$2821_Y ;
  wire \$procmux$2822_CMP ;
  wire [3:0] \$procmux$2824_Y ;
  wire \$procmux$2825_CMP ;
  wire [3:0] \$procmux$2826_Y ;
  wire \$procmux$2827_CMP ;
  wire [3:0] \$procmux$2835_Y ;
  wire \$procmux$2836_CMP ;
  wire [3:0] \$procmux$2837_Y ;
  wire \$procmux$2838_CMP ;
  wire [3:0] \$procmux$2845_Y ;
  wire \$procmux$2846_CMP ;
  wire [3:0] \$procmux$2847_Y ;
  wire \$procmux$2848_CMP ;
  wire [3:0] \$procmux$2856_Y ;
  wire \$procmux$2857_CMP ;
  wire [3:0] \$procmux$2858_Y ;
  wire \$procmux$2859_CMP ;
  wire [3:0] \$procmux$2868_Y ;
  wire \$procmux$2869_CMP ;
  wire [3:0] \$procmux$2871_Y ;
  wire \$procmux$2872_CMP ;
  wire [3:0] \$procmux$2874_Y ;
  wire \$procmux$2875_CMP ;
  wire [3:0] \$procmux$2876_Y ;
  wire \$procmux$2877_CMP ;
  wire [3:0] \$procmux$2888_Y ;
  wire \$procmux$2889_CMP ;
  wire [3:0] \$procmux$2891_Y ;
  wire \$procmux$2892_CMP ;
  wire [3:0] \$procmux$2893_Y ;
  wire \$procmux$2894_CMP ;
  wire [3:0] \$procmux$2905_Y ;
  wire \$procmux$2906_CMP ;
  wire [3:0] \$procmux$2907_Y ;
  wire \$procmux$2908_CMP ;
  wire [3:0] \$procmux$2911_Y ;
  wire \$procmux$2912_CMP ;
  wire \$procmux$2914_CMP ;
  wire \$procmux$2916_CMP ;
  wire \$procmux$2918_CMP ;
  wire \$procmux$2920_CMP ;
  wire \$procmux$2922_CMP ;
  wire \$procmux$2924_CMP ;
  wire \$procmux$2926_CMP ;
  wire \$procmux$2928_CMP ;
  wire [3:0] \$procmux$2938_Y ;
  wire \$procmux$2939_CMP ;
  wire [3:0] \$procmux$2940_Y ;
  wire \$procmux$2941_CMP ;
  wire \$procmux$2948_Y ;
  wire \$procmux$2949_CMP ;
  wire \$procmux$2951_CMP ;
  wire \$procmux$2953_CMP ;
  wire \$procmux$2959_Y ;
  wire \$procmux$2960_CMP ;
  wire \$procmux$2962_CMP ;
  wire \$procmux$2964_CMP ;
  wire \$procmux$2966_CMP ;
  wire \$procmux$2968_CMP ;
  wire \$procmux$2970_CMP ;
  wire \$procmux$2972_CMP ;
  wire \$procmux$2974_CMP ;
  wire \$procmux$2977_Y ;
  wire \$procmux$2978_CMP ;
  wire \$procmux$2980_CMP ;
  wire \$procmux$2982_CMP ;
  wire \$procmux$2984_CMP ;
  wire \$procmux$2986_CMP ;
  wire \$procmux$2988_CMP ;
  wire [1:0] \$procmux$2993_Y ;
  wire \$procmux$2994_CMP ;
  wire \$procmux$2996_CMP ;
  wire \$procmux$2998_CMP ;
  wire \$procmux$3000_CMP ;
  wire \$procmux$3002_CMP ;
  wire \$procmux$3004_CMP ;
  wire \$procmux$3006_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_clear_out$36 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_clear_out$39 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_clear_out$42 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_isolate_out$35 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_isolate_out$38 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_isolate_out$41 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_phase_ack$34 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_phase_ack$37 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_phase_ack$40 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  wire [1:0] \$receiver_phase_q$32 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1759 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1761 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(\$44 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$initiator_state_q  (
    .AD(4'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .Q(initiator_state_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$receiver_phase_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$receiver_phase_q$32 ),
    .Q(receiver_phase_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2713  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$2717_CMP , \$procmux$2716_CMP , \$procmux$2715_CMP , \$procmux$2714_CMP  }),
    .Y(\$procmux$2713_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2714_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2714_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2715_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2715_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2716_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$2716_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2717_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2717_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2719  (
    .A(\$procmux$2713_Y ),
    .B(1'hx),
    .S(\$procmux$2720_CMP ),
    .Y(\$procmux$2719_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2721  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$2725_CMP , \$procmux$2724_CMP , \$procmux$2723_CMP , \$procmux$2722_CMP  }),
    .Y(\$procmux$2721_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2722_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2722_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2723_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2723_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2724_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$2724_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2725_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2725_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2727  (
    .A(\$procmux$2721_Y ),
    .B(1'hx),
    .S(\$procmux$2728_CMP ),
    .Y(\$procmux$2727_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2730  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$2731_CMP ),
    .Y(\$procmux$2730_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2735  (
    .A(\$receiver_clear_out$39 ),
    .B(\$receiver_clear_out$36 ),
    .S(\$procmux$2736_CMP ),
    .Y(\$procmux$2735_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2740  (
    .A(\$receiver_isolate_out$38 ),
    .B(\$receiver_isolate_out$35 ),
    .S(\$procmux$2741_CMP ),
    .Y(\$procmux$2740_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2745  (
    .A(\$receiver_phase_ack$37 ),
    .B(\$receiver_phase_ack$34 ),
    .S(\$procmux$2746_CMP ),
    .Y(\$procmux$2745_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2748  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$2752_CMP , \$procmux$2751_CMP , \$procmux$2750_CMP , \$procmux$2749_CMP  }),
    .Y(\$procmux$2748_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2749_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2749_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2750_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2750_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2751_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2751_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2752_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2752_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2753  (
    .A(1'hx),
    .B(\$procmux$2748_Y ),
    .S(\$procmux$2754_CMP ),
    .Y(\$procmux$2753_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2756  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$2760_CMP , \$procmux$2759_CMP , \$procmux$2758_CMP , \$procmux$2757_CMP  }),
    .Y(\$procmux$2756_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2757_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2757_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2758_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2758_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2759_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2759_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2760_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2760_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2761  (
    .A(1'hx),
    .B(\$procmux$2756_Y ),
    .S(\$procmux$2762_CMP ),
    .Y(\$procmux$2761_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2764  (
    .A(1'hx),
    .B({ 1'h1, isolate_ack_i, clear_ack_i, 1'h1 }),
    .S({ \$procmux$2768_CMP , \$procmux$2767_CMP , \$procmux$2766_CMP , \$procmux$2765_CMP  }),
    .Y(\$procmux$2764_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2765_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2765_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2766_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2766_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2767_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2767_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2768_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2768_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2769  (
    .A(1'hx),
    .B(\$procmux$2764_Y ),
    .S(\$procmux$2770_CMP ),
    .Y(\$procmux$2769_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:442.7-442.47|rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2771  (
    .A(receiver_phase_q),
    .B(receiver_next_phase),
    .S(\$procmux$2772_CMP ),
    .Y(\$procmux$2771_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:361.11-361.36|rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2774  (
    .A(initiator_state_q),
    .B(4'h0),
    .S(\$procmux$2775_CMP ),
    .Y(\$procmux$2774_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2776  (
    .A(4'hx),
    .B(\$procmux$2774_Y ),
    .S(\$procmux$2777_CMP ),
    .Y(\$procmux$2776_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2777_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2777_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:351.11-351.40|rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2780  (
    .A(initiator_state_q),
    .B(4'h8),
    .S(\$procmux$2781_CMP ),
    .Y(\$procmux$2780_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2782  (
    .A(4'hx),
    .B(\$procmux$2780_Y ),
    .S(\$procmux$2783_CMP ),
    .Y(\$procmux$2782_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2783_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2783_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:341.11-341.42|rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2787  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$2788_CMP ),
    .Y(\$procmux$2787_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2789  (
    .A(4'hx),
    .B(\$procmux$2787_Y ),
    .S(\$procmux$2790_CMP ),
    .Y(\$procmux$2789_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2790_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2790_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:331.11-331.42|rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2795  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$2796_CMP ),
    .Y(\$procmux$2795_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2797  (
    .A(4'hx),
    .B(\$procmux$2795_Y ),
    .S(\$procmux$2798_CMP ),
    .Y(\$procmux$2797_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2798_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2798_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:322.11-322.52|rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2804  (
    .A(initiator_state_q),
    .B(4'h5),
    .S(\$procmux$2805_CMP ),
    .Y(\$procmux$2804_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2807  (
    .A(\$procmux$2804_Y ),
    .B(4'hx),
    .S(\$procmux$2808_CMP ),
    .Y(\$procmux$2807_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2810  (
    .A(\$procmux$2807_Y ),
    .B(4'hx),
    .S(\$procmux$2811_CMP ),
    .Y(\$procmux$2810_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2812  (
    .A(4'hx),
    .B(\$procmux$2810_Y ),
    .S(\$procmux$2813_CMP ),
    .Y(\$procmux$2812_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2813_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2813_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2821  (
    .A(\$initiator_state_d$11 ),
    .B(4'h6),
    .S(\$procmux$2822_CMP ),
    .Y(\$procmux$2821_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2824  (
    .A(\$procmux$2821_Y ),
    .B(4'hx),
    .S(\$procmux$2825_CMP ),
    .Y(\$procmux$2824_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2826  (
    .A(4'hx),
    .B(\$procmux$2824_Y ),
    .S(\$procmux$2827_CMP ),
    .Y(\$procmux$2826_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2827_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2827_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2835  (
    .A(\$initiator_state_d$12 ),
    .B(4'h7),
    .S(\$procmux$2836_CMP ),
    .Y(\$procmux$2835_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2837  (
    .A(4'hx),
    .B(\$procmux$2835_Y ),
    .S(\$procmux$2838_CMP ),
    .Y(\$procmux$2837_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2838_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2838_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:308.11-308.37|rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2845  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$2846_CMP ),
    .Y(\$procmux$2845_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2847  (
    .A(4'hx),
    .B(\$procmux$2845_Y ),
    .S(\$procmux$2848_CMP ),
    .Y(\$procmux$2847_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2848_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2848_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:298.11-298.37|rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2856  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$2857_CMP ),
    .Y(\$procmux$2856_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2858  (
    .A(4'hx),
    .B(\$procmux$2856_Y ),
    .S(\$procmux$2859_CMP ),
    .Y(\$procmux$2858_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2859_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2859_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:289.11-289.54|rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2868  (
    .A(initiator_state_q),
    .B(4'h2),
    .S(\$procmux$2869_CMP ),
    .Y(\$procmux$2868_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2871  (
    .A(\$procmux$2868_Y ),
    .B(4'hx),
    .S(\$procmux$2872_CMP ),
    .Y(\$procmux$2871_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2874  (
    .A(\$procmux$2871_Y ),
    .B(4'hx),
    .S(\$procmux$2875_CMP ),
    .Y(\$procmux$2874_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2876  (
    .A(4'hx),
    .B(\$procmux$2874_Y ),
    .S(\$procmux$2877_CMP ),
    .Y(\$procmux$2876_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2877_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2877_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2888  (
    .A(\$initiator_state_d$4 ),
    .B(4'h3),
    .S(\$procmux$2889_CMP ),
    .Y(\$procmux$2888_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2891  (
    .A(\$procmux$2888_Y ),
    .B(4'hx),
    .S(\$procmux$2892_CMP ),
    .Y(\$procmux$2891_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2893  (
    .A(4'hx),
    .B(\$procmux$2891_Y ),
    .S(\$procmux$2894_CMP ),
    .Y(\$procmux$2893_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2894_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2894_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2905  (
    .A(\$initiator_state_d$5 ),
    .B(4'h4),
    .S(\$procmux$2906_CMP ),
    .Y(\$procmux$2905_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2907  (
    .A(4'hx),
    .B(\$procmux$2905_Y ),
    .S(\$procmux$2908_CMP ),
    .Y(\$procmux$2907_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2908_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2908_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd4)
  ) \$procmux$2911  (
    .A(4'h1),
    .B({ \$initiator_state_d$1 , \$initiator_state_d$6 , \$initiator_state_d$7 , \$initiator_state_d$8 , \$initiator_state_d$13 , \$initiator_state_d$14 , \$initiator_state_d$15 , \$initiator_state_d$16 , \$initiator_state_d$17  }),
    .S({ \$procmux$2928_CMP , \$procmux$2926_CMP , \$procmux$2924_CMP , \$procmux$2922_CMP , \$procmux$2920_CMP , \$procmux$2918_CMP , \$procmux$2916_CMP , \$procmux$2914_CMP , \$procmux$2912_CMP  }),
    .Y(\$procmux$2911_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2912_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2912_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2914_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2914_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2916_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2916_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2918_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2918_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2920_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2920_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2922_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2922_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2924_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2924_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2926_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2926_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2928_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2928_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:275.11-275.39|rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2938  (
    .A(initiator_state_q),
    .B(4'h1),
    .S(\$procmux$2939_CMP ),
    .Y(\$procmux$2938_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2940  (
    .A(4'hx),
    .B(\$procmux$2938_Y ),
    .S(\$procmux$2941_CMP ),
    .Y(\$procmux$2940_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2941_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2941_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$2948  (
    .A(1'h0),
    .B(3'h7),
    .S({ \$procmux$2953_CMP , \$procmux$2951_CMP , \$procmux$2949_CMP  }),
    .Y(\$procmux$2948_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2949_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2949_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2951_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2951_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2953_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2953_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$2959  (
    .A(1'h0),
    .B(8'hff),
    .S({ \$procmux$2974_CMP , \$procmux$2972_CMP , \$procmux$2970_CMP , \$procmux$2968_CMP , \$procmux$2966_CMP , \$procmux$2964_CMP , \$procmux$2962_CMP , \$procmux$2960_CMP  }),
    .Y(\$procmux$2959_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2960_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2960_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2962_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2962_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2964_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2964_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2966_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2966_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2968_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2968_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2970_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2970_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2972_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2972_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2974_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2974_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$procmux$2977  (
    .A(1'h0),
    .B(6'h3f),
    .S({ \$procmux$2988_CMP , \$procmux$2986_CMP , \$procmux$2984_CMP , \$procmux$2982_CMP , \$procmux$2980_CMP , \$procmux$2978_CMP  }),
    .Y(\$procmux$2977_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2978_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2978_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2980_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2980_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2982_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2982_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2984_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2984_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2986_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2986_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2988_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2988_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd2)
  ) \$procmux$2993  (
    .A(2'h0),
    .B(14'h15ab),
    .S({ \$procmux$3006_CMP , \$procmux$3004_CMP , \$procmux$3002_CMP , \$procmux$3000_CMP , \$procmux$2998_CMP , \$procmux$2996_CMP , \$procmux$2994_CMP  }),
    .Y(\$procmux$2993_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2994_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2994_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2996_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2996_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2998_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2998_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3000_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$3000_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3002_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$3002_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3004_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$3004_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3006_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$3006_CMP )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign initiator_state_d = \$initiator_state_d$18 ;
  assign initiator_clear_seq_phase = \$initiator_clear_seq_phase$19 ;
  assign initiator_phase_transition_req = \$initiator_phase_transition_req$20 ;
  assign initiator_isolate_out = \$initiator_isolate_out$21 ;
  assign initiator_clear_out = \$initiator_clear_out$22 ;
  assign receiver_phase_ack = \$receiver_phase_ack$40 ;
  assign receiver_isolate_out = \$receiver_isolate_out$41 ;
  assign receiver_clear_out = \$receiver_clear_out$42 ;
  assign clear_o = \$44 ;
  assign isolate_o = \$46 ;
  assign \$initiator_state_q$25  = 4'h1;
  assign \$procmux$2720_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$39  = \$procmux$2719_Y ;
  assign \$procmux$2728_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$38  = \$procmux$2727_Y ;
  assign \$procmux$2731_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$37  = \$procmux$2730_Y ;
  assign \$procmux$2736_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$42  = \$procmux$2735_Y ;
  assign \$procmux$2741_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$41  = \$procmux$2740_Y ;
  assign \$procmux$2746_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$40  = \$procmux$2745_Y ;
  assign \$procmux$2754_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$36  = \$procmux$2753_Y ;
  assign \$procmux$2762_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$35  = \$procmux$2761_Y ;
  assign \$procmux$2770_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$34  = \$procmux$2769_Y ;
  assign \$procmux$2772_CMP  = \$31 ;
  assign \$receiver_phase_q$32  = \$procmux$2771_Y ;
  assign \$procmux$2775_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$17  = \$procmux$2776_Y ;
  assign \$procmux$2781_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$16  = \$procmux$2782_Y ;
  assign \$procmux$2788_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$15  = \$procmux$2789_Y ;
  assign \$procmux$2796_CMP  = clear_ack_i;
  assign \$initiator_state_d$14  = \$procmux$2797_Y ;
  assign \$procmux$2805_CMP  = clear_ack_i;
  assign \$procmux$2808_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2811_CMP  = \$10 ;
  assign \$initiator_state_d$11  = \$procmux$2812_Y ;
  assign \$procmux$2822_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2825_CMP  = \$10 ;
  assign \$initiator_state_d$12  = \$procmux$2826_Y ;
  assign \$procmux$2836_CMP  = \$10 ;
  assign \$initiator_state_d$13  = \$procmux$2837_Y ;
  assign \$procmux$2846_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$8  = \$procmux$2847_Y ;
  assign \$procmux$2857_CMP  = isolate_ack_i;
  assign \$initiator_state_d$7  = \$procmux$2858_Y ;
  assign \$procmux$2869_CMP  = isolate_ack_i;
  assign \$procmux$2872_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2875_CMP  = \$3 ;
  assign \$initiator_state_d$4  = \$procmux$2876_Y ;
  assign \$procmux$2889_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2892_CMP  = \$3 ;
  assign \$initiator_state_d$5  = \$procmux$2893_Y ;
  assign \$procmux$2906_CMP  = \$3 ;
  assign \$initiator_state_d$6  = \$procmux$2907_Y ;
  assign \$initiator_state_d$18  = \$procmux$2911_Y ;
  assign \$procmux$2939_CMP  = clear_i;
  assign \$initiator_state_d$1  = \$procmux$2940_Y ;
  assign \$initiator_clear_out$22  = \$procmux$2948_Y ;
  assign \$initiator_isolate_out$21  = \$procmux$2959_Y ;
  assign \$initiator_phase_transition_req$20  = \$procmux$2977_Y ;
  assign \$initiator_clear_seq_phase$19  = \$procmux$2993_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1760  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1762  = rst_ni;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$44 ;
  wire \$46 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1763 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1764 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1765 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1766 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_clear_out$22 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [1:0] \$initiator_clear_seq_phase$19 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_isolate_out$21 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire \$initiator_phase_transition_req$20 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  wire [3:0] \$initiator_state_d$1 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  wire [3:0] \$initiator_state_d$14 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  wire [3:0] \$initiator_state_d$15 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  wire [3:0] \$initiator_state_d$16 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  wire [3:0] \$initiator_state_d$17 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  wire [3:0] \$initiator_state_d$18 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  wire [3:0] \$initiator_state_d$4 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  wire [3:0] \$initiator_state_d$7 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  wire [3:0] \$initiator_state_d$8 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:373.7-378.10" */
  wire [3:0] \$initiator_state_q$25 ;
  wire \$procmux$2419_Y ;
  wire \$procmux$2420_CMP ;
  wire \$procmux$2421_CMP ;
  wire \$procmux$2422_CMP ;
  wire \$procmux$2423_CMP ;
  wire \$procmux$2425_Y ;
  wire \$procmux$2426_CMP ;
  wire \$procmux$2427_Y ;
  wire \$procmux$2428_CMP ;
  wire \$procmux$2429_CMP ;
  wire \$procmux$2430_CMP ;
  wire \$procmux$2431_CMP ;
  wire \$procmux$2433_Y ;
  wire \$procmux$2434_CMP ;
  wire \$procmux$2436_Y ;
  wire \$procmux$2437_CMP ;
  wire \$procmux$2441_Y ;
  wire \$procmux$2442_CMP ;
  wire \$procmux$2446_Y ;
  wire \$procmux$2447_CMP ;
  wire \$procmux$2451_Y ;
  wire \$procmux$2452_CMP ;
  wire \$procmux$2454_Y ;
  wire \$procmux$2455_CMP ;
  wire \$procmux$2456_CMP ;
  wire \$procmux$2457_CMP ;
  wire \$procmux$2458_CMP ;
  wire \$procmux$2459_Y ;
  wire \$procmux$2460_CMP ;
  wire \$procmux$2462_Y ;
  wire \$procmux$2463_CMP ;
  wire \$procmux$2464_CMP ;
  wire \$procmux$2465_CMP ;
  wire \$procmux$2466_CMP ;
  wire \$procmux$2467_Y ;
  wire \$procmux$2468_CMP ;
  wire \$procmux$2470_Y ;
  wire \$procmux$2471_CMP ;
  wire \$procmux$2472_CMP ;
  wire \$procmux$2473_CMP ;
  wire \$procmux$2474_CMP ;
  wire \$procmux$2475_Y ;
  wire \$procmux$2476_CMP ;
  wire [1:0] \$procmux$2477_Y ;
  wire \$procmux$2478_CMP ;
  wire [3:0] \$procmux$2480_Y ;
  wire \$procmux$2481_CMP ;
  wire [3:0] \$procmux$2482_Y ;
  wire \$procmux$2483_CMP ;
  wire [3:0] \$procmux$2486_Y ;
  wire \$procmux$2487_CMP ;
  wire [3:0] \$procmux$2488_Y ;
  wire \$procmux$2489_CMP ;
  wire [3:0] \$procmux$2493_Y ;
  wire \$procmux$2494_CMP ;
  wire [3:0] \$procmux$2495_Y ;
  wire \$procmux$2496_CMP ;
  wire [3:0] \$procmux$2501_Y ;
  wire \$procmux$2502_CMP ;
  wire [3:0] \$procmux$2503_Y ;
  wire \$procmux$2504_CMP ;
  wire [3:0] \$procmux$2510_Y ;
  wire \$procmux$2511_CMP ;
  wire [3:0] \$procmux$2513_Y ;
  wire \$procmux$2514_CMP ;
  wire [3:0] \$procmux$2516_Y ;
  wire \$procmux$2517_CMP ;
  wire [3:0] \$procmux$2518_Y ;
  wire \$procmux$2519_CMP ;
  wire [3:0] \$procmux$2527_Y ;
  wire \$procmux$2528_CMP ;
  wire [3:0] \$procmux$2530_Y ;
  wire \$procmux$2531_CMP ;
  wire [3:0] \$procmux$2532_Y ;
  wire \$procmux$2533_CMP ;
  wire [3:0] \$procmux$2541_Y ;
  wire \$procmux$2542_CMP ;
  wire [3:0] \$procmux$2543_Y ;
  wire \$procmux$2544_CMP ;
  wire [3:0] \$procmux$2551_Y ;
  wire \$procmux$2552_CMP ;
  wire [3:0] \$procmux$2553_Y ;
  wire \$procmux$2554_CMP ;
  wire [3:0] \$procmux$2562_Y ;
  wire \$procmux$2563_CMP ;
  wire [3:0] \$procmux$2564_Y ;
  wire \$procmux$2565_CMP ;
  wire [3:0] \$procmux$2574_Y ;
  wire \$procmux$2575_CMP ;
  wire [3:0] \$procmux$2577_Y ;
  wire \$procmux$2578_CMP ;
  wire [3:0] \$procmux$2580_Y ;
  wire \$procmux$2581_CMP ;
  wire [3:0] \$procmux$2582_Y ;
  wire \$procmux$2583_CMP ;
  wire [3:0] \$procmux$2594_Y ;
  wire \$procmux$2595_CMP ;
  wire [3:0] \$procmux$2597_Y ;
  wire \$procmux$2598_CMP ;
  wire [3:0] \$procmux$2599_Y ;
  wire \$procmux$2600_CMP ;
  wire [3:0] \$procmux$2611_Y ;
  wire \$procmux$2612_CMP ;
  wire [3:0] \$procmux$2613_Y ;
  wire \$procmux$2614_CMP ;
  wire [3:0] \$procmux$2617_Y ;
  wire \$procmux$2618_CMP ;
  wire \$procmux$2620_CMP ;
  wire \$procmux$2622_CMP ;
  wire \$procmux$2624_CMP ;
  wire \$procmux$2626_CMP ;
  wire \$procmux$2628_CMP ;
  wire \$procmux$2630_CMP ;
  wire \$procmux$2632_CMP ;
  wire \$procmux$2634_CMP ;
  wire [3:0] \$procmux$2644_Y ;
  wire \$procmux$2645_CMP ;
  wire [3:0] \$procmux$2646_Y ;
  wire \$procmux$2647_CMP ;
  wire \$procmux$2654_Y ;
  wire \$procmux$2655_CMP ;
  wire \$procmux$2657_CMP ;
  wire \$procmux$2659_CMP ;
  wire \$procmux$2665_Y ;
  wire \$procmux$2666_CMP ;
  wire \$procmux$2668_CMP ;
  wire \$procmux$2670_CMP ;
  wire \$procmux$2672_CMP ;
  wire \$procmux$2674_CMP ;
  wire \$procmux$2676_CMP ;
  wire \$procmux$2678_CMP ;
  wire \$procmux$2680_CMP ;
  wire \$procmux$2683_Y ;
  wire \$procmux$2684_CMP ;
  wire \$procmux$2686_CMP ;
  wire \$procmux$2688_CMP ;
  wire \$procmux$2690_CMP ;
  wire \$procmux$2692_CMP ;
  wire \$procmux$2694_CMP ;
  wire [1:0] \$procmux$2699_Y ;
  wire \$procmux$2700_CMP ;
  wire \$procmux$2702_CMP ;
  wire \$procmux$2704_CMP ;
  wire \$procmux$2706_CMP ;
  wire \$procmux$2708_CMP ;
  wire \$procmux$2710_CMP ;
  wire \$procmux$2712_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_clear_out$36 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_clear_out$39 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_clear_out$42 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_isolate_out$35 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_isolate_out$38 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_isolate_out$41 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$receiver_phase_ack$34 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$receiver_phase_ack$37 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  wire \$receiver_phase_ack$40 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  wire [1:0] \$receiver_phase_q$32 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1763 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1765 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(\$44 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$initiator_state_q  (
    .AD(4'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .Q(initiator_state_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$receiver_phase_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$receiver_phase_q$32 ),
    .Q(receiver_phase_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2419  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$2423_CMP , \$procmux$2422_CMP , \$procmux$2421_CMP , \$procmux$2420_CMP  }),
    .Y(\$procmux$2419_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2420_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2420_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2421_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2421_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2422_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$2422_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2423_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2423_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2425  (
    .A(\$procmux$2419_Y ),
    .B(1'hx),
    .S(\$procmux$2426_CMP ),
    .Y(\$procmux$2425_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2427  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$2431_CMP , \$procmux$2430_CMP , \$procmux$2429_CMP , \$procmux$2428_CMP  }),
    .Y(\$procmux$2427_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2428_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2428_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2429_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2429_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2430_CMP0  (
    .A(receiver_phase_q),
    .B(2'h1),
    .Y(\$procmux$2430_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2431_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2431_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2433  (
    .A(\$procmux$2427_Y ),
    .B(1'hx),
    .S(\$procmux$2434_CMP ),
    .Y(\$procmux$2433_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2436  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$2437_CMP ),
    .Y(\$procmux$2436_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2441  (
    .A(\$receiver_clear_out$39 ),
    .B(\$receiver_clear_out$36 ),
    .S(\$procmux$2442_CMP ),
    .Y(\$procmux$2441_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2446  (
    .A(\$receiver_isolate_out$38 ),
    .B(\$receiver_isolate_out$35 ),
    .S(\$procmux$2447_CMP ),
    .Y(\$procmux$2446_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2451  (
    .A(\$receiver_phase_ack$37 ),
    .B(\$receiver_phase_ack$34 ),
    .S(\$procmux$2452_CMP ),
    .Y(\$procmux$2451_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2454  (
    .A(1'hx),
    .B(4'h2),
    .S({ \$procmux$2458_CMP , \$procmux$2457_CMP , \$procmux$2456_CMP , \$procmux$2455_CMP  }),
    .Y(\$procmux$2454_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2455_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2455_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2456_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2456_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2457_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2457_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2458_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2458_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2459  (
    .A(1'hx),
    .B(\$procmux$2454_Y ),
    .S(\$procmux$2460_CMP ),
    .Y(\$procmux$2459_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2462  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$2466_CMP , \$procmux$2465_CMP , \$procmux$2464_CMP , \$procmux$2463_CMP  }),
    .Y(\$procmux$2462_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2463_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2463_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2464_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2464_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2465_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2466_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2466_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2467  (
    .A(1'hx),
    .B(\$procmux$2462_Y ),
    .S(\$procmux$2468_CMP ),
    .Y(\$procmux$2467_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2470  (
    .A(1'hx),
    .B({ 1'h1, isolate_ack_i, clear_ack_i, 1'h1 }),
    .S({ \$procmux$2474_CMP , \$procmux$2473_CMP , \$procmux$2472_CMP , \$procmux$2471_CMP  }),
    .Y(\$procmux$2470_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2471_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2471_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2472_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2472_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2473_CMP0  (
    .A(receiver_next_phase),
    .B(2'h1),
    .Y(\$procmux$2473_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2474_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2474_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2475  (
    .A(1'hx),
    .B(\$procmux$2470_Y ),
    .S(\$procmux$2476_CMP ),
    .Y(\$procmux$2475_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:442.7-442.47|rtl/common_cells/cdc_reset_ctrlr.sv:441.14-443.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2477  (
    .A(receiver_phase_q),
    .B(receiver_next_phase),
    .S(\$procmux$2478_CMP ),
    .Y(\$procmux$2477_Y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:361.11-361.36|rtl/common_cells/cdc_reset_ctrlr.sv:360.9-362.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2480  (
    .A(initiator_state_q),
    .B(4'h0),
    .S(\$procmux$2481_CMP ),
    .Y(\$procmux$2480_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2482  (
    .A(4'hx),
    .B(\$procmux$2480_Y ),
    .S(\$procmux$2483_CMP ),
    .Y(\$procmux$2482_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2483_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2483_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:351.11-351.40|rtl/common_cells/cdc_reset_ctrlr.sv:350.9-352.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2486  (
    .A(initiator_state_q),
    .B(4'h8),
    .S(\$procmux$2487_CMP ),
    .Y(\$procmux$2486_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2488  (
    .A(4'hx),
    .B(\$procmux$2486_Y ),
    .S(\$procmux$2489_CMP ),
    .Y(\$procmux$2488_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2489_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2489_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:341.11-341.42|rtl/common_cells/cdc_reset_ctrlr.sv:340.9-342.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2493  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$2494_CMP ),
    .Y(\$procmux$2493_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2495  (
    .A(4'hx),
    .B(\$procmux$2493_Y ),
    .S(\$procmux$2496_CMP ),
    .Y(\$procmux$2495_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2496_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2496_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:331.11-331.42|rtl/common_cells/cdc_reset_ctrlr.sv:330.9-332.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2501  (
    .A(initiator_state_q),
    .B(4'h7),
    .S(\$procmux$2502_CMP ),
    .Y(\$procmux$2501_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2503  (
    .A(4'hx),
    .B(\$procmux$2501_Y ),
    .S(\$procmux$2504_CMP ),
    .Y(\$procmux$2503_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2504_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2504_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:322.11-322.52|rtl/common_cells/cdc_reset_ctrlr.sv:321.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2510  (
    .A(initiator_state_q),
    .B(4'h5),
    .S(\$procmux$2511_CMP ),
    .Y(\$procmux$2510_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2513  (
    .A(\$procmux$2510_Y ),
    .B(4'hx),
    .S(\$procmux$2514_CMP ),
    .Y(\$procmux$2513_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2516  (
    .A(\$procmux$2513_Y ),
    .B(4'hx),
    .S(\$procmux$2517_CMP ),
    .Y(\$procmux$2516_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2518  (
    .A(4'hx),
    .B(\$procmux$2516_Y ),
    .S(\$procmux$2519_CMP ),
    .Y(\$procmux$2518_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2519_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2519_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2527  (
    .A(\$initiator_state_d$11 ),
    .B(4'h6),
    .S(\$procmux$2528_CMP ),
    .Y(\$procmux$2527_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2530  (
    .A(\$procmux$2527_Y ),
    .B(4'hx),
    .S(\$procmux$2531_CMP ),
    .Y(\$procmux$2530_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2532  (
    .A(4'hx),
    .B(\$procmux$2530_Y ),
    .S(\$procmux$2533_CMP ),
    .Y(\$procmux$2532_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2533_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2533_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2541  (
    .A(\$initiator_state_d$12 ),
    .B(4'h7),
    .S(\$procmux$2542_CMP ),
    .Y(\$procmux$2541_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2543  (
    .A(4'hx),
    .B(\$procmux$2541_Y ),
    .S(\$procmux$2544_CMP ),
    .Y(\$procmux$2543_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2544_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2544_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:308.11-308.37|rtl/common_cells/cdc_reset_ctrlr.sv:307.9-309.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2551  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$2552_CMP ),
    .Y(\$procmux$2551_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2553  (
    .A(4'hx),
    .B(\$procmux$2551_Y ),
    .S(\$procmux$2554_CMP ),
    .Y(\$procmux$2553_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2554_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2554_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:298.11-298.37|rtl/common_cells/cdc_reset_ctrlr.sv:297.9-299.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2562  (
    .A(initiator_state_q),
    .B(4'h4),
    .S(\$procmux$2563_CMP ),
    .Y(\$procmux$2562_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2564  (
    .A(4'hx),
    .B(\$procmux$2562_Y ),
    .S(\$procmux$2565_CMP ),
    .Y(\$procmux$2564_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2565_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2565_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:289.11-289.54|rtl/common_cells/cdc_reset_ctrlr.sv:288.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2574  (
    .A(initiator_state_q),
    .B(4'h2),
    .S(\$procmux$2575_CMP ),
    .Y(\$procmux$2574_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2577  (
    .A(\$procmux$2574_Y ),
    .B(4'hx),
    .S(\$procmux$2578_CMP ),
    .Y(\$procmux$2577_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2580  (
    .A(\$procmux$2577_Y ),
    .B(4'hx),
    .S(\$procmux$2581_CMP ),
    .Y(\$procmux$2580_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2582  (
    .A(4'hx),
    .B(\$procmux$2580_Y ),
    .S(\$procmux$2583_CMP ),
    .Y(\$procmux$2582_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2583_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2583_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:287.11-287.48|rtl/common_cells/cdc_reset_ctrlr.sv:286.18-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2594  (
    .A(\$initiator_state_d$4 ),
    .B(4'h3),
    .S(\$procmux$2595_CMP ),
    .Y(\$procmux$2594_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2597  (
    .A(\$procmux$2594_Y ),
    .B(4'hx),
    .S(\$procmux$2598_CMP ),
    .Y(\$procmux$2597_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2599  (
    .A(4'hx),
    .B(\$procmux$2597_Y ),
    .S(\$procmux$2600_CMP ),
    .Y(\$procmux$2599_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2600_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2600_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2611  (
    .A(\$initiator_state_d$5 ),
    .B(4'h4),
    .S(\$procmux$2612_CMP ),
    .Y(\$procmux$2611_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2613  (
    .A(4'hx),
    .B(\$procmux$2611_Y ),
    .S(\$procmux$2614_CMP ),
    .Y(\$procmux$2613_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2614_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2614_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd4)
  ) \$procmux$2617  (
    .A(4'h1),
    .B({ \$initiator_state_d$1 , \$initiator_state_d$6 , \$initiator_state_d$7 , \$initiator_state_d$8 , \$initiator_state_d$13 , \$initiator_state_d$14 , \$initiator_state_d$15 , \$initiator_state_d$16 , \$initiator_state_d$17  }),
    .S({ \$procmux$2634_CMP , \$procmux$2632_CMP , \$procmux$2630_CMP , \$procmux$2628_CMP , \$procmux$2626_CMP , \$procmux$2624_CMP , \$procmux$2622_CMP , \$procmux$2620_CMP , \$procmux$2618_CMP  }),
    .Y(\$procmux$2617_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2618_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2618_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2620_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2620_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2622_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2622_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2624_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2624_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2626_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2626_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2628_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2628_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2630_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2630_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2632_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2632_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2634_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2634_CMP )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:275.11-275.39|rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2644  (
    .A(initiator_state_q),
    .B(4'h1),
    .S(\$procmux$2645_CMP ),
    .Y(\$procmux$2644_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2646  (
    .A(4'hx),
    .B(\$procmux$2644_Y ),
    .S(\$procmux$2647_CMP ),
    .Y(\$procmux$2646_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2647_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2647_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$2654  (
    .A(1'h0),
    .B(3'h7),
    .S({ \$procmux$2659_CMP , \$procmux$2657_CMP , \$procmux$2655_CMP  }),
    .Y(\$procmux$2654_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2655_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2655_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2657_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2657_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2659_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2659_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$2665  (
    .A(1'h0),
    .B(8'hff),
    .S({ \$procmux$2680_CMP , \$procmux$2678_CMP , \$procmux$2676_CMP , \$procmux$2674_CMP , \$procmux$2672_CMP , \$procmux$2670_CMP , \$procmux$2668_CMP , \$procmux$2666_CMP  }),
    .Y(\$procmux$2665_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2666_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2666_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2668_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2668_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2670_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2670_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2672_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2672_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2674_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2674_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2676_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2676_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2678_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2678_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2680_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2680_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$procmux$2683  (
    .A(1'h0),
    .B(6'h3f),
    .S({ \$procmux$2694_CMP , \$procmux$2692_CMP , \$procmux$2690_CMP , \$procmux$2688_CMP , \$procmux$2686_CMP , \$procmux$2684_CMP  }),
    .Y(\$procmux$2683_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2684_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2684_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2686_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2686_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2688_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2688_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2690_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2690_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2692_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2692_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2694_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2694_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd2)
  ) \$procmux$2699  (
    .A(2'h0),
    .B(14'h15ab),
    .S({ \$procmux$2712_CMP , \$procmux$2710_CMP , \$procmux$2708_CMP , \$procmux$2706_CMP , \$procmux$2704_CMP , \$procmux$2702_CMP , \$procmux$2700_CMP  }),
    .Y(\$procmux$2699_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2700_CMP0  (
    .A(initiator_state_q),
    .B(4'h7),
    .Y(\$procmux$2700_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2702_CMP0  (
    .A(initiator_state_q),
    .B(4'h5),
    .Y(\$procmux$2702_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2704_CMP0  (
    .A(initiator_state_q),
    .B(4'h6),
    .Y(\$procmux$2704_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2706_CMP0  (
    .A(initiator_state_q),
    .B(4'h4),
    .Y(\$procmux$2706_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2708_CMP0  (
    .A(initiator_state_q),
    .B(4'h2),
    .Y(\$procmux$2708_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2710_CMP0  (
    .A(initiator_state_q),
    .B(4'h3),
    .Y(\$procmux$2710_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2712_CMP0  (
    .A(initiator_state_q),
    .B(4'h1),
    .Y(\$procmux$2712_CMP )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign initiator_state_d = \$initiator_state_d$18 ;
  assign initiator_clear_seq_phase = \$initiator_clear_seq_phase$19 ;
  assign initiator_phase_transition_req = \$initiator_phase_transition_req$20 ;
  assign initiator_isolate_out = \$initiator_isolate_out$21 ;
  assign initiator_clear_out = \$initiator_clear_out$22 ;
  assign receiver_phase_ack = \$receiver_phase_ack$40 ;
  assign receiver_isolate_out = \$receiver_isolate_out$41 ;
  assign receiver_clear_out = \$receiver_clear_out$42 ;
  assign clear_o = \$44 ;
  assign isolate_o = \$46 ;
  assign \$initiator_state_q$25  = 4'h1;
  assign \$procmux$2426_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$39  = \$procmux$2425_Y ;
  assign \$procmux$2434_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$38  = \$procmux$2433_Y ;
  assign \$procmux$2437_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$37  = \$procmux$2436_Y ;
  assign \$procmux$2442_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$42  = \$procmux$2441_Y ;
  assign \$procmux$2447_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$41  = \$procmux$2446_Y ;
  assign \$procmux$2452_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$40  = \$procmux$2451_Y ;
  assign \$procmux$2460_CMP  = receiver_phase_req;
  assign \$receiver_clear_out$36  = \$procmux$2459_Y ;
  assign \$procmux$2468_CMP  = receiver_phase_req;
  assign \$receiver_isolate_out$35  = \$procmux$2467_Y ;
  assign \$procmux$2476_CMP  = receiver_phase_req;
  assign \$receiver_phase_ack$34  = \$procmux$2475_Y ;
  assign \$procmux$2478_CMP  = \$31 ;
  assign \$receiver_phase_q$32  = \$procmux$2477_Y ;
  assign \$procmux$2481_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$17  = \$procmux$2482_Y ;
  assign \$procmux$2487_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$16  = \$procmux$2488_Y ;
  assign \$procmux$2494_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$15  = \$procmux$2495_Y ;
  assign \$procmux$2502_CMP  = clear_ack_i;
  assign \$initiator_state_d$14  = \$procmux$2503_Y ;
  assign \$procmux$2511_CMP  = clear_ack_i;
  assign \$procmux$2514_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2517_CMP  = \$10 ;
  assign \$initiator_state_d$11  = \$procmux$2518_Y ;
  assign \$procmux$2528_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2531_CMP  = \$10 ;
  assign \$initiator_state_d$12  = \$procmux$2532_Y ;
  assign \$procmux$2542_CMP  = \$10 ;
  assign \$initiator_state_d$13  = \$procmux$2543_Y ;
  assign \$procmux$2552_CMP  = initiator_phase_transition_ack;
  assign \$initiator_state_d$8  = \$procmux$2553_Y ;
  assign \$procmux$2563_CMP  = isolate_ack_i;
  assign \$initiator_state_d$7  = \$procmux$2564_Y ;
  assign \$procmux$2575_CMP  = isolate_ack_i;
  assign \$procmux$2578_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2581_CMP  = \$3 ;
  assign \$initiator_state_d$4  = \$procmux$2582_Y ;
  assign \$procmux$2595_CMP  = initiator_phase_transition_ack;
  assign \$procmux$2598_CMP  = \$3 ;
  assign \$initiator_state_d$5  = \$procmux$2599_Y ;
  assign \$procmux$2612_CMP  = \$3 ;
  assign \$initiator_state_d$6  = \$procmux$2613_Y ;
  assign \$initiator_state_d$18  = \$procmux$2617_Y ;
  assign \$procmux$2645_CMP  = clear_i;
  assign \$initiator_state_d$1  = \$procmux$2646_Y ;
  assign \$initiator_clear_out$22  = \$procmux$2654_Y ;
  assign \$initiator_isolate_out$21  = \$procmux$2665_Y ;
  assign \$initiator_phase_transition_req$20  = \$procmux$2683_Y ;
  assign \$initiator_clear_seq_phase$19  = \$procmux$2699_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1764  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1766  = rst_ni;
endmodule

/* src = "rtl/core_wrap.sv:8.8" */
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o
, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i);
  wire [31:0] \$1 ;
  /* src = "rtl/core_wrap.sv:17.23" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/core_wrap.sv:9.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/core_wrap.sv:44.23" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/core_wrap.sv:33.23" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/core_wrap.sv:32.23" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/core_wrap.sv:36.23" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/core_wrap.sv:29.23" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/core_wrap.sv:35.23" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/core_wrap.sv:28.23" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/core_wrap.sv:30.23" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/core_wrap.sv:34.23" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/core_wrap.sv:31.23" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/core_wrap.sv:39.23" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/core_wrap.sv:42.23" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/core_wrap.sv:48.15" */
  wire [31:0] ibex_boot_addr;
  /* src = "rtl/core_wrap.sv:23.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/core_wrap.sv:25.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/core_wrap.sv:21.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/core_wrap.sv:24.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/core_wrap.sv:20.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/core_wrap.sv:22.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/core_wrap.sv:14.22" */
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  /* src = "rtl/core_wrap.sv:11.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/core_wrap.sv:10.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/core_wrap.sv:12.16" */
  input test_enable_i;
  wire test_enable_i;
  /* src = "rtl/core_wrap.sv:15.15" */
  input timer0_irq_i;
  wire timer0_irq_i;
  /* src = "rtl/core_wrap.sv:68.5" */
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i(ibex_boot_addr),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
  assign ibex_boot_addr = \$1 ;
  assign \$1 [7:0] = 8'h00;
  assign \$1 [31:8] = boot_addr_i[31:8];
endmodule

/* top =  1  */
/* src = "rtl/croc_chip.sv:8.8" */
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  /* src = "rtl/croc_chip.sv:9.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_chip.sv:22.15" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_chip.sv:25.15" */
  inout gpio0_io;
  wire gpio0_io;
  /* src = "rtl/croc_chip.sv:35.15" */
  inout gpio10_io;
  wire gpio10_io;
  /* src = "rtl/croc_chip.sv:36.15" */
  inout gpio11_io;
  wire gpio11_io;
  /* src = "rtl/croc_chip.sv:37.15" */
  inout gpio12_io;
  wire gpio12_io;
  /* src = "rtl/croc_chip.sv:38.15" */
  inout gpio13_io;
  wire gpio13_io;
  /* src = "rtl/croc_chip.sv:39.15" */
  inout gpio14_io;
  wire gpio14_io;
  /* src = "rtl/croc_chip.sv:40.15" */
  inout gpio15_io;
  wire gpio15_io;
  /* src = "rtl/croc_chip.sv:41.15" */
  inout gpio16_io;
  wire gpio16_io;
  /* src = "rtl/croc_chip.sv:42.15" */
  inout gpio17_io;
  wire gpio17_io;
  /* src = "rtl/croc_chip.sv:43.15" */
  inout gpio18_io;
  wire gpio18_io;
  /* src = "rtl/croc_chip.sv:44.15" */
  inout gpio19_io;
  wire gpio19_io;
  /* src = "rtl/croc_chip.sv:26.15" */
  inout gpio1_io;
  wire gpio1_io;
  /* src = "rtl/croc_chip.sv:45.15" */
  inout gpio20_io;
  wire gpio20_io;
  /* src = "rtl/croc_chip.sv:46.15" */
  inout gpio21_io;
  wire gpio21_io;
  /* src = "rtl/croc_chip.sv:47.15" */
  inout gpio22_io;
  wire gpio22_io;
  /* src = "rtl/croc_chip.sv:48.15" */
  inout gpio23_io;
  wire gpio23_io;
  /* src = "rtl/croc_chip.sv:49.15" */
  inout gpio24_io;
  wire gpio24_io;
  /* src = "rtl/croc_chip.sv:50.15" */
  inout gpio25_io;
  wire gpio25_io;
  /* src = "rtl/croc_chip.sv:51.15" */
  inout gpio26_io;
  wire gpio26_io;
  /* src = "rtl/croc_chip.sv:52.15" */
  inout gpio27_io;
  wire gpio27_io;
  /* src = "rtl/croc_chip.sv:53.15" */
  inout gpio28_io;
  wire gpio28_io;
  /* src = "rtl/croc_chip.sv:54.15" */
  inout gpio29_io;
  wire gpio29_io;
  /* src = "rtl/croc_chip.sv:27.15" */
  inout gpio2_io;
  wire gpio2_io;
  /* src = "rtl/croc_chip.sv:55.15" */
  inout gpio30_io;
  wire gpio30_io;
  /* src = "rtl/croc_chip.sv:56.15" */
  inout gpio31_io;
  wire gpio31_io;
  /* src = "rtl/croc_chip.sv:28.15" */
  inout gpio3_io;
  wire gpio3_io;
  /* src = "rtl/croc_chip.sv:29.15" */
  inout gpio4_io;
  wire gpio4_io;
  /* src = "rtl/croc_chip.sv:30.15" */
  inout gpio5_io;
  wire gpio5_io;
  /* src = "rtl/croc_chip.sv:31.15" */
  inout gpio6_io;
  wire gpio6_io;
  /* src = "rtl/croc_chip.sv:32.15" */
  inout gpio7_io;
  wire gpio7_io;
  /* src = "rtl/croc_chip.sv:33.15" */
  inout gpio8_io;
  wire gpio8_io;
  /* src = "rtl/croc_chip.sv:34.15" */
  inout gpio9_io;
  wire gpio9_io;
  /* src = "rtl/croc_chip.sv:13.15" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_chip.sv:16.15" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:17.15" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:15.15" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_chip.sv:14.15" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:11.15" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_chip.sv:10.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_chip.sv:62.11" */
  wire soc_clk_i;
  /* src = "rtl/croc_chip.sv:73.11" */
  wire soc_fetch_en_i;
  /* src = "rtl/croc_chip.sv:78.27" */
  wire [31:0] soc_gpio_i;
  /* src = "rtl/croc_chip.sv:79.27" */
  wire [31:0] soc_gpio_o;
  /* src = "rtl/croc_chip.sv:80.27" */
  wire [31:0] soc_gpio_out_en_o;
  /* src = "rtl/croc_chip.sv:67.11" */
  wire soc_jtag_tck_i;
  /* src = "rtl/croc_chip.sv:70.11" */
  wire soc_jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:71.11" */
  wire soc_jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:69.11" */
  wire soc_jtag_tms_i;
  /* src = "rtl/croc_chip.sv:68.11" */
  wire soc_jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:64.11" */
  wire soc_ref_clk_i;
  /* src = "rtl/croc_chip.sv:63.11" */
  wire soc_rst_ni;
  /* src = "rtl/croc_chip.sv:74.11" */
  wire soc_status_o;
  /* src = "rtl/croc_chip.sv:65.11" */
  wire soc_testmode;
  /* src = "rtl/croc_chip.sv:85.12" */
  wire soc_testmode_i;
  /* src = "rtl/croc_chip.sv:93.70" */
  wire soc_uart_rx_i;
  /* src = "rtl/croc_chip.sv:94.70" */
  wire soc_uart_tx_o;
  /* src = "rtl/croc_chip.sv:23.15" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_chip.sv:19.15" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_chip.sv:20.15" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_chip.sv:57.15" */
  output unused0_o;
  wire unused0_o;
  /* src = "rtl/croc_chip.sv:58.15" */
  output unused1_o;
  wire unused1_o;
  /* src = "rtl/croc_chip.sv:59.15" */
  output unused2_o;
  wire unused2_o;
  /* src = "rtl/croc_chip.sv:60.15" */
  output unused3_o;
  wire unused3_o;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_chip.sv:159.3" */
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:82.27" */
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  /* src = "rtl/croc_chip.sv:96.27" */
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  /* src = "rtl/croc_chip.sv:99.27" */
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  /* src = "rtl/croc_chip.sv:109.27" */
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  /* src = "rtl/croc_chip.sv:110.27" */
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  /* src = "rtl/croc_chip.sv:111.27" */
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  /* src = "rtl/croc_chip.sv:112.27" */
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  /* src = "rtl/croc_chip.sv:113.27" */
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  /* src = "rtl/croc_chip.sv:114.27" */
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  /* src = "rtl/croc_chip.sv:115.27" */
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  /* src = "rtl/croc_chip.sv:116.27" */
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  /* src = "rtl/croc_chip.sv:117.27" */
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  /* src = "rtl/croc_chip.sv:118.27" */
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  /* src = "rtl/croc_chip.sv:100.27" */
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  /* src = "rtl/croc_chip.sv:119.27" */
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  /* src = "rtl/croc_chip.sv:120.27" */
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  /* src = "rtl/croc_chip.sv:121.27" */
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  /* src = "rtl/croc_chip.sv:122.27" */
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  /* src = "rtl/croc_chip.sv:123.27" */
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  /* src = "rtl/croc_chip.sv:124.27" */
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  /* src = "rtl/croc_chip.sv:125.27" */
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  /* src = "rtl/croc_chip.sv:126.27" */
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  /* src = "rtl/croc_chip.sv:127.27" */
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  /* src = "rtl/croc_chip.sv:128.27" */
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  /* src = "rtl/croc_chip.sv:101.27" */
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  /* src = "rtl/croc_chip.sv:129.27" */
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  /* src = "rtl/croc_chip.sv:130.27" */
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  /* src = "rtl/croc_chip.sv:102.27" */
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  /* src = "rtl/croc_chip.sv:103.27" */
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  /* src = "rtl/croc_chip.sv:104.27" */
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  /* src = "rtl/croc_chip.sv:105.27" */
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  /* src = "rtl/croc_chip.sv:106.27" */
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  /* src = "rtl/croc_chip.sv:107.27" */
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  /* src = "rtl/croc_chip.sv:108.27" */
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  /* src = "rtl/croc_chip.sv:87.27" */
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  /* src = "rtl/croc_chip.sv:90.27" */
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  /* src = "rtl/croc_chip.sv:91.27" */
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  /* src = "rtl/croc_chip.sv:89.27" */
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  /* src = "rtl/croc_chip.sv:88.27" */
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  /* src = "rtl/croc_chip.sv:84.27" */
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  /* src = "rtl/croc_chip.sv:83.27" */
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  /* src = "rtl/croc_chip.sv:97.27" */
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  /* src = "rtl/croc_chip.sv:93.27" */
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  /* src = "rtl/croc_chip.sv:94.27" */
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:131.25" */
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  /* src = "rtl/croc_chip.sv:132.25" */
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  /* src = "rtl/croc_chip.sv:133.25" */
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  /* src = "rtl/croc_chip.sv:134.25" */
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:136.46" */
  sg13g2_IOPadVdd pad_vdd0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:137.46" */
  sg13g2_IOPadVdd pad_vdd1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:138.46" */
  sg13g2_IOPadVdd pad_vdd2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:139.46" */
  sg13g2_IOPadVdd pad_vdd3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:146.48" */
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:147.48" */
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:148.48" */
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:149.48" */
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:141.46" */
  sg13g2_IOPadVss pad_vss0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:142.46" */
  sg13g2_IOPadVss pad_vss1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:143.46" */
  sg13g2_IOPadVss pad_vss2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:144.46" */
  sg13g2_IOPadVss pad_vss3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:151.48" */
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:152.48" */
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:153.48" */
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:154.48" */
  sg13g2_IOPadIOVss pad_vssio3 (
  );
  assign soc_testmode_i = 1'h0;
endmodule

/* src = "rtl/croc_domain.sv:8.8" */
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, testmode_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o, interrupts_i
, core_busy_o);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  /* src = "rtl/croc_domain.sv:133.34" */
  wire [443:0] all_periph_obi_req;
  /* src = "rtl/croc_domain.sv:134.34" */
  wire [233:0] all_periph_obi_rsp;
  /* src = "rtl/croc_domain.sv:97.34" */
  wire [369:0] all_sbr_obi_req;
  /* src = "rtl/croc_domain.sv:98.34" */
  wire [194:0] all_sbr_obi_rsp;
  /* src = "rtl/croc_domain.sv:52.16" */
  wire [31:0] boot_addr;
  /* src = "rtl/croc_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_domain.sv:43.16" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/croc_domain.sv:82.17" */
  wire [71:0] core_data_obi_req;
  /* src = "rtl/croc_domain.sv:83.17" */
  wire [36:0] core_data_obi_rsp;
  /* src = "rtl/croc_domain.sv:73.17" */
  wire [71:0] core_instr_obi_req;
  /* src = "rtl/croc_domain.sv:74.17" */
  wire [36:0] core_instr_obi_rsp;
  /* src = "rtl/croc_domain.sv:141.17" */
  wire [73:0] dbg_mem_obi_req;
  /* src = "rtl/croc_domain.sv:142.17" */
  wire [38:0] dbg_mem_obi_rsp;
  /* src = "rtl/croc_domain.sv:88.17" */
  wire [71:0] dbg_req_obi_req;
  /* src = "rtl/croc_domain.sv:89.17" */
  wire [36:0] dbg_req_obi_rsp;
  /* src = "rtl/croc_domain.sv:50.9" */
  wire debug_req;
  /* src = "rtl/croc_domain.sv:228.17" */
  wire [40:0] dmi_req;
  /* src = "rtl/croc_domain.sv:227.35" */
  wire dmi_req_ready;
  /* src = "rtl/croc_domain.sv:227.20" */
  wire dmi_req_valid;
  /* src = "rtl/croc_domain.sv:229.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/croc_domain.sv:227.66" */
  wire dmi_resp_ready;
  /* src = "rtl/croc_domain.sv:227.50" */
  wire dmi_resp_valid;
  /* src = "rtl/croc_domain.sv:227.9" */
  wire dmi_rst_n;
  /* src = "rtl/croc_domain.sv:137.17" */
  wire [73:0] error_obi_req;
  /* src = "rtl/croc_domain.sv:138.17" */
  wire [38:0] error_obi_rsp;
  /* src = "rtl/croc_domain.sv:15.21" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_domain.sv:51.9" */
  wire fetch_enable;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[0].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[0].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[0].bank_req ;
  /* src = "rtl/croc_domain.sv:343.40" */
  wire \gen_sram_bank[0].bank_single_err ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[0].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[0].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[1].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[1].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[1].bank_req ;
  /* src = "rtl/croc_domain.sv:343.40" */
  wire \gen_sram_bank[1].bank_single_err ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[1].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[1].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:26.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_domain.sv:30.32" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/croc_domain.sv:56.9" */
  wire gpio_irq;
  /* src = "rtl/croc_domain.sv:27.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_domain.sv:153.17" */
  wire [73:0] gpio_obi_req;
  /* src = "rtl/croc_domain.sv:154.17" */
  wire [38:0] gpio_obi_rsp;
  /* src = "rtl/croc_domain.sv:28.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* init = 32'd2171776 */
  /* src = "rtl/croc_domain.sv:225.18" */
  wire [31:0] hartinfo;
  /* src = "rtl/croc_domain.sv:59.16" */
  wire [15:0] interrupts;
  /* src = "rtl/croc_domain.sv:42.38" */
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  /* src = "rtl/croc_domain.sv:17.21" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_domain.sv:18.21" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_domain.sv:19.21" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_domain.sv:20.21" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_domain.sv:21.21" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_domain.sv:418.50" */
  wire [2:0] periph_idx;
  /* src = "rtl/croc_domain.sv:13.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_domain.sv:12.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_domain.sv:503.39" */
  wire [3:0] soc_ctrl_hw2reg;
  /* src = "rtl/croc_domain.sv:145.17" */
  wire [73:0] soc_ctrl_obi_req;
  /* src = "rtl/croc_domain.sv:146.17" */
  wire [38:0] soc_ctrl_obi_rsp;
  /* src = "rtl/croc_domain.sv:502.39" */
  wire [66:0] soc_ctrl_reg2hw;
  /* src = "rtl/croc_domain.sv:470.13" */
  wire [69:0] soc_ctrl_reg_req;
  /* src = "rtl/croc_domain.sv:471.13" */
  wire [33:0] soc_ctrl_reg_rsp;
  /* src = "rtl/croc_domain.sv:49.9" */
  wire sram_impl;
  /* src = "rtl/croc_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_domain.sv:57.9" */
  wire timer0_irq0;
  /* src = "rtl/croc_domain.sv:58.9" */
  wire timer0_irq1;
  /* src = "rtl/croc_domain.sv:157.17" */
  wire [73:0] timer_obi_req;
  /* src = "rtl/croc_domain.sv:158.17" */
  wire [38:0] timer_obi_rsp;
  /* src = "rtl/croc_domain.sv:55.9" */
  wire uart_irq;
  /* src = "rtl/croc_domain.sv:149.17" */
  wire [73:0] uart_obi_req;
  /* src = "rtl/croc_domain.sv:150.17" */
  wire [38:0] uart_obi_rsp;
  /* src = "rtl/croc_domain.sv:524.13" */
  wire [69:0] uart_reg_req;
  /* src = "rtl/croc_domain.sv:525.13" */
  wire [33:0] uart_reg_rsp;
  /* src = "rtl/croc_domain.sv:23.21" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_domain.sv:24.21" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_domain.sv:39.24" */
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  /* src = "rtl/croc_domain.sv:40.24" */
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  /* src = "rtl/croc_domain.sv:35.24" */
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  /* src = "rtl/croc_domain.sv:36.24" */
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  /* src = "rtl/croc_domain.sv:111.17" */
  wire [73:0] xbar_error_obi_req;
  /* src = "rtl/croc_domain.sv:112.17" */
  wire [38:0] xbar_error_obi_rsp;
  /* src = "rtl/croc_domain.sv:103.36" */
  wire [147:0] xbar_mem_bank_obi_req;
  /* src = "rtl/croc_domain.sv:104.36" */
  wire [77:0] xbar_mem_bank_obi_rsp;
  /* src = "rtl/croc_domain.sv:107.17" */
  wire [73:0] xbar_periph_obi_req;
  /* src = "rtl/croc_domain.sv:108.17" */
  wire [38:0] xbar_periph_obi_rsp;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(soc_ctrl_obi_req[41]),
    .Y(\$2 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(soc_ctrl_reg2hw[34]),
    .B(fetch_en_i),
    .Y(\$4 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(uart_obi_req[41]),
    .Y(\$6 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(timer_obi_req[41]),
    .Y(\$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_word_addr ),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(sram_impl),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(xbar_mem_bank_obi_req[73:0]),
    .obi_rsp_o(xbar_mem_bank_obi_rsp[38:0]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_word_addr ),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(sram_impl),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(xbar_mem_bank_obi_req[147:74]),
    .obi_rsp_o(xbar_mem_bank_obi_rsp[77:39]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:426.5" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(xbar_periph_obi_req[73:42]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:179.5" */
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(boot_addr),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  /* src = "rtl/croc_domain.sv:258.5" */
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(dbg_mem_obi_req[73:42]),
    .slave_aid_i(dbg_mem_obi_req[4:2]),
    .slave_be_i(dbg_mem_obi_req[40:37]),
    .slave_gnt_o(dbg_mem_obi_rsp[1]),
    .slave_rdata_o(dbg_mem_obi_rsp[38:7]),
    .slave_req_i(dbg_mem_obi_req[0]),
    .slave_rid_o(dbg_mem_obi_rsp[6:4]),
    .slave_rvalid_o(dbg_mem_obi_rsp[0]),
    .slave_wdata_i(dbg_mem_obi_req[36:5]),
    .slave_we_i(dbg_mem_obi_req[41]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:233.5" */
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:584.5" */
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(gpio_obi_req),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:323.5" */
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i(all_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req, core_data_obi_req, dbg_req_obi_req, user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/croc_domain.sv:442.5" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i(all_periph_obi_rsp),
    .rst_ni(rst_ni),
    .sbr_port_req_i(xbar_periph_obi_req),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  /* src = "rtl/croc_domain.sv:461.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(error_obi_req),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:513.5" */
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:480.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(soc_ctrl_obi_req[73:42]),
    .be_i(soc_ctrl_obi_req[40:37]),
    .clk_i(clk_i),
    .gnt_o(soc_ctrl_obi_rsp[1]),
    .id_i(soc_ctrl_obi_req[4:2]),
    .r_id_o(soc_ctrl_obi_rsp[6:4]),
    .r_opc_o(soc_ctrl_obi_rsp[3]),
    .r_rdata_o(soc_ctrl_obi_rsp[38:7]),
    .r_valid_o(soc_ctrl_obi_rsp[0]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(soc_ctrl_obi_req[0]),
    .rst_ni(rst_ni),
    .wdata_i(soc_ctrl_obi_req[36:5]),
    .wen_i(\$2 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:599.5" */
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(timer_obi_req[73:42]),
    .be_i(timer_obi_req[40:37]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(timer_obi_rsp[1]),
    .id_i(timer_obi_req[4:2]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(timer_obi_rsp[6:4]),
    .r_rdata_o(timer_obi_rsp[38:7]),
    .r_valid_o(timer_obi_rsp[0]),
    .ref_clk_i(ref_clk_i),
    .req_i(timer_obi_req[0]),
    .rst_ni(rst_ni),
    .wdata_i(timer_obi_req[36:5]),
    .wen_i(\$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:559.5" */
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  /* src = "rtl/croc_domain.sv:534.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(uart_obi_req[73:42]),
    .be_i(uart_obi_req[40:37]),
    .clk_i(clk_i),
    .gnt_o(uart_obi_rsp[1]),
    .id_i(uart_obi_req[4:2]),
    .r_id_o(uart_obi_rsp[6:4]),
    .r_opc_o(uart_obi_rsp[3]),
    .r_rdata_o(uart_obi_rsp[38:7]),
    .r_valid_o(uart_obi_rsp[0]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(uart_obi_req[0]),
    .rst_ni(rst_ni),
    .wdata_i(uart_obi_req[36:5]),
    .wen_i(\$6 )
  );
  /* src = "rtl/croc_domain.sv:404.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(xbar_error_obi_req),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign interrupts = { 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 };
  assign core_instr_obi_req[2] = 1'h0;
  assign core_instr_obi_req[39] = 1'h0;
  assign core_instr_obi_req[38:35] = 4'hf;
  assign core_instr_obi_req[34:3] = 32'd0;
  assign core_instr_obi_req[1] = 1'h0;
  assign core_data_obi_req[2] = 1'h0;
  assign core_data_obi_req[1] = 1'h0;
  assign dbg_req_obi_req[2] = 1'h0;
  assign dbg_req_obi_req[1] = 1'h0;
  assign xbar_error_obi_req = all_sbr_obi_req[73:0];
  assign all_sbr_obi_rsp[38:0] = xbar_error_obi_rsp;
  assign xbar_periph_obi_req = all_sbr_obi_req[147:74];
  assign all_sbr_obi_rsp[77:39] = xbar_periph_obi_rsp;
  assign xbar_mem_bank_obi_req[73:0] = all_sbr_obi_req[221:148];
  assign all_sbr_obi_rsp[116:78] = xbar_mem_bank_obi_rsp[38:0];
  assign xbar_mem_bank_obi_req[147:74] = all_sbr_obi_req[295:222];
  assign all_sbr_obi_rsp[155:117] = xbar_mem_bank_obi_rsp[77:39];
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
  assign all_sbr_obi_rsp[194:156] = user_sbr_obi_rsp_i;
  assign error_obi_req = all_periph_obi_req[73:0];
  assign all_periph_obi_rsp[38:0] = error_obi_rsp;
  assign dbg_mem_obi_req = all_periph_obi_req[147:74];
  assign all_periph_obi_rsp[77:39] = dbg_mem_obi_rsp;
  assign soc_ctrl_obi_req = all_periph_obi_req[221:148];
  assign all_periph_obi_rsp[116:78] = soc_ctrl_obi_rsp;
  assign uart_obi_req = all_periph_obi_req[295:222];
  assign all_periph_obi_rsp[155:117] = uart_obi_rsp;
  assign gpio_obi_req = all_periph_obi_req[369:296];
  assign all_periph_obi_rsp[194:156] = gpio_obi_rsp;
  assign timer_obi_req = all_periph_obi_req[443:370];
  assign all_periph_obi_rsp[233:195] = timer_obi_rsp;
  assign dbg_mem_obi_rsp[2] = 1'h0;
  assign dbg_mem_obi_rsp[3] = 1'h0;
  assign \gen_sram_bank[0].bank_word_addr  = \gen_sram_bank[0].bank_byte_addr [10:2];
  assign \gen_sram_bank[0].bank_gnt  = 1'h1;
  assign \gen_sram_bank[1].bank_word_addr  = \gen_sram_bank[1].bank_byte_addr [10:2];
  assign \gen_sram_bank[1].bank_gnt  = 1'h1;
  assign soc_ctrl_obi_rsp[2] = 1'h0;
  assign fetch_enable = \$4 ;
  assign boot_addr = soc_ctrl_reg2hw[66:35];
  assign sram_impl = soc_ctrl_reg2hw[0];
  assign soc_ctrl_hw2reg = 4'h0;
  assign uart_obi_rsp[2] = 1'h0;
  assign timer_obi_rsp[3] = 1'h0;
  assign timer_obi_rsp[2] = 1'h0;
  assign hartinfo[0] = 1'h0;
  assign hartinfo[1] = 1'h0;
  assign hartinfo[2] = 1'h0;
  assign hartinfo[3] = 1'h0;
  assign hartinfo[4] = 1'h0;
  assign hartinfo[5] = 1'h0;
  assign hartinfo[6] = 1'h0;
  assign hartinfo[7] = 1'h1;
  assign hartinfo[8] = 1'h1;
  assign hartinfo[9] = 1'h1;
  assign hartinfo[10] = 1'h0;
  assign hartinfo[11] = 1'h0;
  assign hartinfo[12] = 1'h0;
  assign hartinfo[13] = 1'h1;
  assign hartinfo[14] = 1'h0;
  assign hartinfo[15] = 1'h0;
  assign hartinfo[16] = 1'h1;
  assign hartinfo[17] = 1'h0;
  assign hartinfo[18] = 1'h0;
  assign hartinfo[19] = 1'h0;
  assign hartinfo[20] = 1'h0;
  assign hartinfo[21] = 1'h1;
  assign hartinfo[22] = 1'h0;
  assign hartinfo[23] = 1'h0;
  assign hartinfo[24] = 1'h0;
  assign hartinfo[25] = 1'h0;
  assign hartinfo[26] = 1'h0;
  assign hartinfo[27] = 1'h0;
  assign hartinfo[28] = 1'h0;
  assign hartinfo[29] = 1'h0;
  assign hartinfo[30] = 1'h0;
  assign hartinfo[31] = 1'h0;
endmodule

/* src = "rtl/croc_soc.sv:8.8" */
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, testmode_i, gpio_i, gpio_o, gpio_out_en_o);
  /* src = "rtl/croc_soc.sv:11.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_soc.sv:15.16" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_soc.sv:27.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_soc.sv:61.23" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/croc_soc.sv:28.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_soc.sv:29.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/croc_soc.sv:60.29" */
  wire [3:0] interrupts;
  /* src = "rtl/croc_soc.sv:18.16" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_soc.sv:19.16" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_soc.sv:20.16" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_soc.sv:21.16" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_soc.sv:22.16" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_soc.sv:13.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_soc.sv:12.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_soc.sv:16.16" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_soc.sv:32.23" */
  wire synced_fetch_en;
  /* src = "rtl/croc_soc.sv:32.9" */
  wire synced_rst_n;
  /* src = "rtl/croc_soc.sv:14.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_soc.sv:24.16" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_soc.sv:25.16" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_soc.sv:57.15" */
  wire [71:0] user_mgr_obi_req;
  /* src = "rtl/croc_soc.sv:58.15" */
  wire [36:0] user_mgr_obi_rsp;
  /* src = "rtl/croc_soc.sv:53.15" */
  wire [73:0] user_sbr_obi_req;
  /* src = "rtl/croc_soc.sv:54.15" */
  wire [38:0] user_sbr_obi_rsp;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:65.3" */
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:45.7" */
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  /* src = "rtl/croc_soc.sv:34.10" */
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:99.3" */
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

/* src = "rtl/cve2/cve2_alu.sv:9.8" */
module \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$13 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$26 ;
  wire \$28 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire [31:0] \$37 ;
  wire \$40 ;
  wire \$43 ;
  wire [32:0] \$5 ;
  wire \$51 ;
  wire \$58 ;
  wire \$60 ;
  wire [32:0] \$62 ;
  wire [31:0] \$68 ;
  wire [31:0] \$70 ;
  wire [31:0] \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire [33:0] \$9 ;
  /* src = "rtl/cve2/cve2_alu.sv:85.5-91.12" */
  wire [32:0] \$adder_in_a$3 ;
  /* src = "rtl/cve2/cve2_alu.sv:97.5-101.12" */
  wire [32:0] \$adder_in_b$7 ;
  /* src = "rtl/cve2/cve2_alu.sv:60.5-80.12" */
  wire \$adder_op_b_negate$1 ;
  wire [32:0] \$auto$rtlil.cc:2957:Not$16638 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$1612 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$1613 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$1614 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1615 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1616 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1617 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1618 ;
  /* src = "rtl/cve2/cve2_alu.sv:372.5-379.12" */
  wire \$bwlogic_op_b_negate$65 ;
  /* src = "rtl/cve2/cve2_alu.sv:392.5-396.12" */
  wire [31:0] \$bwlogic_result$86 ;
  /* src = "rtl/cve2/cve2_alu.sv:160.5-170.12" */
  wire \$cmp_result$29 ;
  /* src = "rtl/cve2/cve2_alu.sv:120.5-129.12" */
  wire \$cmp_signed$11 ;
  /* src = "rtl/cve2/cve2_alu.sv:137.5-141.8" */
  wire \$is_greater_equal$23 ;
  wire [31:0] \$procmux$3888_Y ;
  wire [7:0] \$procmux$3889_CMP ;
  wire \$procmux$3889_CTRL ;
  wire [4:0] \$procmux$3890_CMP ;
  wire \$procmux$3890_CTRL ;
  wire [4:0] \$procmux$3891_CMP ;
  wire \$procmux$3891_CTRL ;
  wire [5:0] \$procmux$3892_CMP ;
  wire \$procmux$3892_CTRL ;
  wire [31:0] \$procmux$3894_Y ;
  wire \$procmux$3895_CMP ;
  wire \$procmux$3896_CMP ;
  wire \$procmux$3900_Y ;
  wire \$procmux$3901_CMP ;
  wire \$procmux$3910_Y ;
  wire \$procmux$3911_CMP ;
  wire [4:0] \$procmux$3913_Y ;
  wire \$procmux$3914_CMP ;
  wire \$procmux$3916_Y ;
  wire [5:0] \$procmux$3917_CMP ;
  wire \$procmux$3917_CTRL ;
  wire [3:0] \$procmux$3918_CMP ;
  wire \$procmux$3918_CTRL ;
  wire \$procmux$3919_CMP ;
  wire \$procmux$3921_Y ;
  wire \$procmux$3922_CMP ;
  wire \$procmux$3924_Y ;
  wire [4:0] \$procmux$3925_CMP ;
  wire \$procmux$3925_CTRL ;
  wire [32:0] \$procmux$3927_Y ;
  wire \$procmux$3928_CMP ;
  wire \$procmux$3929_CMP ;
  wire [32:0] \$procmux$3931_Y ;
  wire \$procmux$3932_CMP ;
  wire \$procmux$3933_CMP ;
  wire \$procmux$3934_CMP ;
  wire \$procmux$3935_CMP ;
  wire \$procmux$3940_Y ;
  wire [12:0] \$procmux$3941_CMP ;
  wire \$procmux$3941_CTRL ;
  /* src = "rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  wire [31:0] \$result_o$88 ;
  /* src = "rtl/cve2/cve2_alu.sv:283.5-289.8" */
  wire [4:0] \$shift_amt[4:0]$46 ;
  /* src = "rtl/cve2/cve2_alu.sv:305.5-316.12" */
  wire \$shift_left$48 ;
  /* src = "rtl/cve2/cve2_alu.sv:317.5-319.8" */
  wire \$shift_left$49 ;
  /* src = "rtl/cve2/cve2_alu.sv:335.7-339.14" */
  wire [31:0] \$shift_operand$55 ;
  /* src = "rtl/cve2/cve2_alu.sv:332.5-340.8" */
  wire [31:0] \$shift_operand$56 ;
  /* src = "rtl/cve2/cve2_alu.sv:52.16" */
  wire [32:0] adder_in_a;
  /* src = "rtl/cve2/cve2_alu.sv:52.28" */
  wire [32:0] adder_in_b;
  /* src = "rtl/cve2/cve2_alu.sv:48.16" */
  wire adder_op_a_shift1;
  /* src = "rtl/cve2/cve2_alu.sv:49.16" */
  wire adder_op_a_shift2;
  /* src = "rtl/cve2/cve2_alu.sv:50.16" */
  wire adder_op_a_shift3;
  /* src = "rtl/cve2/cve2_alu.sv:51.16" */
  wire adder_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:53.16" */
  wire [31:0] adder_result;
  /* src = "rtl/cve2/cve2_alu.sv:28.29" */
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  /* src = "rtl/cve2/cve2_alu.sv:27.29" */
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:259.16" */
  wire [4:0] bfp_len;
  /* src = "rtl/cve2/cve2_alu.sv:261.16" */
  wire [31:0] bfp_mask;
  /* src = "rtl/cve2/cve2_alu.sv:262.16" */
  wire [31:0] bfp_mask_rev;
  /* src = "rtl/cve2/cve2_alu.sv:260.16" */
  wire [4:0] bfp_off;
  /* src = "rtl/cve2/cve2_alu.sv:258.9" */
  wire bfp_op;
  /* src = "rtl/cve2/cve2_alu.sv:263.16" */
  wire [31:0] bfp_result;
  /* src = "rtl/cve2/cve2_alu.sv:399.16" */
  wire [5:0] bitcnt_result;
  /* src = "rtl/cve2/cve2_alu.sv:407.16" */
  wire [31:0] butterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:362.9" */
  wire bwlogic_and;
  /* src = "rtl/cve2/cve2_alu.sv:365.16" */
  wire [31:0] bwlogic_and_result;
  /* src = "rtl/cve2/cve2_alu.sv:369.9" */
  wire bwlogic_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:363.16" */
  wire [31:0] bwlogic_operand_b;
  /* src = "rtl/cve2/cve2_alu.sv:361.9" */
  wire bwlogic_or;
  /* src = "rtl/cve2/cve2_alu.sv:364.16" */
  wire [31:0] bwlogic_or_result;
  /* src = "rtl/cve2/cve2_alu.sv:367.16" */
  wire [31:0] bwlogic_result;
  /* src = "rtl/cve2/cve2_alu.sv:366.16" */
  wire [31:0] bwlogic_xor_result;
  /* src = "rtl/cve2/cve2_alu.sv:409.16" */
  wire [31:0] clmul_result;
  /* src = "rtl/cve2/cve2_alu.sv:157.9" */
  wire cmp_result;
  /* src = "rtl/cve2/cve2_alu.sv:117.9" */
  wire cmp_signed;
  /* src = "rtl/cve2/cve2_alu.sv:31.29" */
  output comparison_result_o;
  wire comparison_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:1293.18" */
  wire [31:0] \g_no_alu_rvb.unused_butterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:1291.18" */
  wire [63:0] \g_no_alu_rvb.unused_imd_val_q ;
  /* src = "rtl/cve2/cve2_alu.sv:1295.18" */
  wire [31:0] \g_no_alu_rvb.unused_invbutterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:24.29" */
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_alu.sv:23.29" */
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_alu.sv:25.29" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_alu.sv:16.29" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_alu.sv:408.16" */
  wire [31:0] invbutterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:115.9" */
  wire is_equal;
  /* src = "rtl/cve2/cve2_alu.sv:32.29" */
  output is_equal_result_o;
  wire is_equal_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:116.9" */
  wire is_greater_equal;
  /* src = "rtl/cve2/cve2_alu.sv:400.16" */
  wire [31:0] minmax_result;
  /* src = "rtl/cve2/cve2_alu.sv:18.29" */
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:19.29" */
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:21.29" */
  input multdiv_sel_i;
  wire multdiv_sel_i;
  /* src = "rtl/cve2/cve2_alu.sv:410.16" */
  wire [31:0] multicycle_result;
  /* src = "rtl/cve2/cve2_alu.sv:13.29" */
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:36.16" */
  wire [31:0] operand_a_rev;
  /* src = "rtl/cve2/cve2_alu.sv:14.29" */
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:37.16" */
  wire [32:0] operand_b_neg;
  /* src = "rtl/cve2/cve2_alu.sv:12.29" */
  input [6:0] operator_i;
  wire [6:0] operator_i;
  /* src = "rtl/cve2/cve2_alu.sv:401.16" */
  wire [31:0] pack_result;
  /* src = "rtl/cve2/cve2_alu.sv:30.29" */
  output [31:0] result_o;
  wire [31:0] result_o;
  /* src = "rtl/cve2/cve2_alu.sv:404.16" */
  wire [31:0] rev_result;
  /* src = "rtl/cve2/cve2_alu.sv:402.16" */
  wire [31:0] sext_result;
  /* src = "rtl/cve2/cve2_alu.sv:247.15" */
  wire [5:0] shift_amt;
  /* src = "rtl/cve2/cve2_alu.sv:248.15" */
  wire [5:0] shift_amt_compl;
  /* src = "rtl/cve2/cve2_alu.sv:244.15" */
  wire shift_arith;
  /* src = "rtl/cve2/cve2_alu.sv:245.15" */
  wire shift_funnel;
  /* src = "rtl/cve2/cve2_alu.sv:242.15" */
  wire shift_left;
  /* src = "rtl/cve2/cve2_alu.sv:243.15" */
  wire shift_ones;
  /* src = "rtl/cve2/cve2_alu.sv:250.23" */
  wire [31:0] shift_operand;
  /* src = "rtl/cve2/cve2_alu.sv:254.23" */
  wire [31:0] shift_result;
  /* src = "rtl/cve2/cve2_alu.sv:252.23" */
  wire [32:0] shift_result_ext;
  /* src = "rtl/cve2/cve2_alu.sv:251.23" */
  wire [32:0] shift_result_ext_signed;
  /* src = "rtl/cve2/cve2_alu.sv:255.23" */
  wire [31:0] shift_result_rev;
  /* src = "rtl/cve2/cve2_alu.sv:246.15" */
  wire shift_sbmode;
  /* src = "rtl/cve2/cve2_alu.sv:405.16" */
  wire [31:0] shuffle_result;
  /* src = "rtl/cve2/cve2_alu.sv:403.16" */
  wire [31:0] singlebit_result;
  /* src = "rtl/cve2/cve2_alu.sv:1397.9" */
  wire unused_shift_amt_compl;
  /* src = "rtl/cve2/cve2_alu.sv:253.23" */
  wire unused_shift_result_ext;
  /* src = "rtl/cve2/cve2_alu.sv:406.16" */
  wire [31:0] xperm_result;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(adder_result),
    .Y(\$13 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(operand_a_i[31]),
    .B(operand_b_i[31]),
    .Y(\$16 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$16 ),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(adder_result[31]),
    .Y(\$20 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(operand_a_i[31]),
    .B(cmp_signed),
    .Y(\$22 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(is_equal),
    .Y(\$26 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(is_greater_equal),
    .Y(\$28 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(operand_b_i[27:24]),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$31 ),
    .Y(\$33 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$36  (
    .A(32'd32),
    .B({ 27'h0000000, operand_b_i[4:0] }),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd5)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$1612 ),
    .B(\$auto$rtlil.cc:3092:Mux$1613 ),
    .S(instr_first_cycle_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1614 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(operator_i),
    .B(7'h08),
    .Y(\$51 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$53  (
    .A(operand_a_i),
    .B(operand_a_rev),
    .S(shift_left),
    .Y(\$auto$rtlil.cc:3092:Mux$1615 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$54  (
    .A(operand_a_i),
    .B(operand_a_rev),
    .S(shift_left),
    .Y(\$auto$rtlil.cc:3092:Mux$1616 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(shift_arith),
    .B(\$shift_operand$56 [31]),
    .Y(\$58 )
  );
  \$sshr  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd33),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd33)
  ) \$61  (
    .A({ \$60 , \$shift_operand$56  }),
    .B(shift_amt[4:0]),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$63  (
    .A(\$62 [31:0]),
    .B({ \$62 [0], \$62 [1], \$62 [2], \$62 [3], \$62 [4], \$62 [5], \$62 [6], \$62 [7], \$62 [8], \$62 [9], \$62 [10], \$62 [11], \$62 [12], \$62 [13], \$62 [14], \$62 [15], \$62 [16], \$62 [17], \$62 [18], \$62 [19], \$62 [20], \$62 [21], \$62 [22], \$62 [23], \$62 [24], \$62 [25], \$62 [26], \$62 [27], \$62 [28], \$62 [29], \$62 [30], \$62 [31] }),
    .S(shift_left),
    .Y(\$auto$rtlil.cc:3092:Mux$1617 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$67  (
    .A(operand_a_i),
    .B(bwlogic_operand_b),
    .Y(\$68 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$69  (
    .A(operand_a_i),
    .B(bwlogic_operand_b),
    .Y(\$70 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$71  (
    .A(operand_a_i),
    .B(bwlogic_operand_b),
    .Y(\$72 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(operator_i),
    .B(7'h03),
    .Y(\$74 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(operator_i),
    .B(7'h06),
    .Y(\$76 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(\$74 ),
    .B(\$76 ),
    .Y(\$78 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(operator_i),
    .B(7'h04),
    .Y(\$80 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd34),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd34),
    .Y_WIDTH(32'd34)
  ) \$8  (
    .A({ 1'h0, adder_in_a }),
    .B({ 1'h0, adder_in_b }),
    .Y(\$9 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(operator_i),
    .B(7'h07),
    .Y(\$82 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(\$80 ),
    .B(\$82 ),
    .Y(\$84 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd33),
    .Y_WIDTH(32'd33)
  ) \$auto$opt_expr.cc:716:replace_const_cells$16637  (
    .A({ operand_b_i, 1'h0 }),
    .Y(\$auto$rtlil.cc:2957:Not$16638 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$3888  (
    .A(32'd0),
    .B({ \$bwlogic_result$86 , \$9 [32:1], \$auto$rtlil.cc:3092:Mux$1617 , 31'h00000000, \$cmp_result$29  }),
    .S({ \$procmux$3892_CTRL , \$procmux$3891_CTRL , \$procmux$3890_CTRL , \$procmux$3889_CTRL  }),
    .Y(\$procmux$3888_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_ANY  (
    .A(\$procmux$3889_CMP ),
    .Y(\$procmux$3889_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP0  (
    .A(operator_i),
    .B(7'h1d),
    .Y(\$procmux$3889_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP1  (
    .A(operator_i),
    .B(7'h1e),
    .Y(\$procmux$3889_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP2  (
    .A(operator_i),
    .B(7'h1b),
    .Y(\$procmux$3889_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP3  (
    .A(operator_i),
    .B(7'h1c),
    .Y(\$procmux$3889_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP4  (
    .A(operator_i),
    .B(7'h19),
    .Y(\$procmux$3889_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP5  (
    .A(operator_i),
    .B(7'h1a),
    .Y(\$procmux$3889_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP6  (
    .A(operator_i),
    .B(7'h2b),
    .Y(\$procmux$3889_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP7  (
    .A(operator_i),
    .B(7'h2c),
    .Y(\$procmux$3889_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_ANY  (
    .A(\$procmux$3890_CMP ),
    .Y(\$procmux$3890_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP0  (
    .A(operator_i),
    .B(7'h0a),
    .Y(\$procmux$3890_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP1  (
    .A(operator_i),
    .B(7'h09),
    .Y(\$procmux$3890_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP2  (
    .A(operator_i),
    .B(7'h08),
    .Y(\$procmux$3890_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP3  (
    .A(operator_i),
    .B(7'h0c),
    .Y(\$procmux$3890_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP4  (
    .A(operator_i),
    .B(7'h0b),
    .Y(\$procmux$3890_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_ANY  (
    .A(\$procmux$3891_CMP ),
    .Y(\$procmux$3891_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP0  (
    .A(operator_i),
    .Y(\$procmux$3891_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP1  (
    .A(operator_i),
    .B(7'h01),
    .Y(\$procmux$3891_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP2  (
    .A(operator_i),
    .B(7'h16),
    .Y(\$procmux$3891_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP3  (
    .A(operator_i),
    .B(7'h17),
    .Y(\$procmux$3891_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP4  (
    .A(operator_i),
    .B(7'h18),
    .Y(\$procmux$3891_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_ANY  (
    .A(\$procmux$3892_CMP ),
    .Y(\$procmux$3892_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP0  (
    .A(operator_i),
    .B(7'h02),
    .Y(\$procmux$3892_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP1  (
    .A(operator_i),
    .B(7'h05),
    .Y(\$procmux$3892_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP2  (
    .A(operator_i),
    .B(7'h03),
    .Y(\$procmux$3892_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP3  (
    .A(operator_i),
    .B(7'h06),
    .Y(\$procmux$3892_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP4  (
    .A(operator_i),
    .B(7'h04),
    .Y(\$procmux$3892_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP5  (
    .A(operator_i),
    .B(7'h07),
    .Y(\$procmux$3892_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:394.20-394.56|rtl/cve2/cve2_alu.sv:392.5-396.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$3894  (
    .A(\$72 ),
    .B({ \$68 , \$70  }),
    .S({ \$procmux$3896_CMP , \$procmux$3895_CMP  }),
    .Y(\$procmux$3894_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:306.16-306.34|rtl/cve2/cve2_alu.sv:305.5-316.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3910  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$3911_CMP ),
    .Y(\$procmux$3910_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:306.16-306.34|rtl/cve2/cve2_alu.sv:305.5-316.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3911_CMP0  (
    .A(operator_i),
    .B(7'h0a),
    .Y(\$procmux$3911_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3916  (
    .A(\$13 ),
    .B({ \$26 , \$is_greater_equal$23 , \$28  }),
    .S({ \$procmux$3919_CMP , \$procmux$3918_CTRL , \$procmux$3917_CTRL  }),
    .Y(\$procmux$3916_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_ANY  (
    .A(\$procmux$3917_CMP ),
    .Y(\$procmux$3917_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP0  (
    .A(operator_i),
    .B(7'h19),
    .Y(\$procmux$3917_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP1  (
    .A(operator_i),
    .B(7'h1a),
    .Y(\$procmux$3917_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP2  (
    .A(operator_i),
    .B(7'h1f),
    .Y(\$procmux$3917_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP3  (
    .A(operator_i),
    .B(7'h20),
    .Y(\$procmux$3917_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP4  (
    .A(operator_i),
    .B(7'h2b),
    .Y(\$procmux$3917_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP5  (
    .A(operator_i),
    .B(7'h2c),
    .Y(\$procmux$3917_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_ANY  (
    .A(\$procmux$3918_CMP ),
    .Y(\$procmux$3918_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP0  (
    .A(operator_i),
    .B(7'h1b),
    .Y(\$procmux$3918_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP1  (
    .A(operator_i),
    .B(7'h1c),
    .Y(\$procmux$3918_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP2  (
    .A(operator_i),
    .B(7'h21),
    .Y(\$procmux$3918_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP3  (
    .A(operator_i),
    .B(7'h22),
    .Y(\$procmux$3918_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:162.27-162.50|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3919_CMP0  (
    .A(operator_i),
    .B(7'h1e),
    .Y(\$procmux$3919_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:138.7-138.53|rtl/cve2/cve2_alu.sv:137.5-141.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3921  (
    .A(\$20 ),
    .B(\$22 ),
    .S(\$16 ),
    .Y(\$procmux$3921_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3924  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$3925_CTRL ),
    .Y(\$procmux$3924_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_ANY  (
    .A(\$procmux$3925_CMP ),
    .Y(\$procmux$3925_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_CMP0  (
    .A(operator_i),
    .B(7'h1b),
    .Y(\$procmux$3925_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_CMP1  (
    .A(operator_i),
    .B(7'h19),
    .Y(\$procmux$3925_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_CMP2  (
    .A(operator_i),
    .B(7'h2b),
    .Y(\$procmux$3925_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_CMP3  (
    .A(operator_i),
    .B(7'h1f),
    .Y(\$procmux$3925_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_CMP4  (
    .A(operator_i),
    .B(7'h21),
    .Y(\$procmux$3925_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:99.26-99.53|rtl/cve2/cve2_alu.sv:97.5-101.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd33)
  ) \$procmux$3927  (
    .A({ operand_b_i, 1'h0 }),
    .B({ multdiv_operand_b_i, \$5  }),
    .S({ \$procmux$3929_CMP , \$procmux$3928_CMP  }),
    .Y(\$procmux$3927_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:89.26-89.67|rtl/cve2/cve2_alu.sv:85.5-91.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd33)
  ) \$procmux$3931  (
    .A({ operand_a_i, 1'h1 }),
    .B({ multdiv_operand_a_i, operand_a_i[30:0], 2'h1, operand_a_i[29:0], 3'h1, operand_a_i[28:0], 4'h1 }),
    .S({ \$procmux$3935_CMP , \$procmux$3934_CMP , \$procmux$3933_CMP , \$procmux$3932_CMP  }),
    .Y(\$procmux$3931_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3940  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$3941_CTRL ),
    .Y(\$procmux$3940_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd13),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_ANY  (
    .A(\$procmux$3941_CMP ),
    .Y(\$procmux$3941_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP0  (
    .A(operator_i),
    .B(7'h01),
    .Y(\$procmux$3941_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP1  (
    .A(operator_i),
    .B(7'h1d),
    .Y(\$procmux$3941_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP10  (
    .A(operator_i),
    .B(7'h20),
    .Y(\$procmux$3941_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP11  (
    .A(operator_i),
    .B(7'h21),
    .Y(\$procmux$3941_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP12  (
    .A(operator_i),
    .B(7'h22),
    .Y(\$procmux$3941_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP2  (
    .A(operator_i),
    .B(7'h1e),
    .Y(\$procmux$3941_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP3  (
    .A(operator_i),
    .B(7'h1b),
    .Y(\$procmux$3941_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP4  (
    .A(operator_i),
    .B(7'h1c),
    .Y(\$procmux$3941_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP5  (
    .A(operator_i),
    .B(7'h19),
    .Y(\$procmux$3941_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP6  (
    .A(operator_i),
    .B(7'h1a),
    .Y(\$procmux$3941_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP7  (
    .A(operator_i),
    .B(7'h2b),
    .Y(\$procmux$3941_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP8  (
    .A(operator_i),
    .B(7'h2c),
    .Y(\$procmux$3941_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_CMP9  (
    .A(operator_i),
    .B(7'h1f),
    .Y(\$procmux$3941_CMP [9])
  );
  assign operand_a_rev[0] = operand_a_i[31];
  assign operand_a_rev[1] = operand_a_i[30];
  assign operand_a_rev[2] = operand_a_i[29];
  assign operand_a_rev[3] = operand_a_i[28];
  assign operand_a_rev[4] = operand_a_i[27];
  assign operand_a_rev[5] = operand_a_i[26];
  assign operand_a_rev[6] = operand_a_i[25];
  assign operand_a_rev[7] = operand_a_i[24];
  assign operand_a_rev[8] = operand_a_i[23];
  assign operand_a_rev[9] = operand_a_i[22];
  assign operand_a_rev[10] = operand_a_i[21];
  assign operand_a_rev[11] = operand_a_i[20];
  assign operand_a_rev[12] = operand_a_i[19];
  assign operand_a_rev[13] = operand_a_i[18];
  assign operand_a_rev[14] = operand_a_i[17];
  assign operand_a_rev[15] = operand_a_i[16];
  assign operand_a_rev[16] = operand_a_i[15];
  assign operand_a_rev[17] = operand_a_i[14];
  assign operand_a_rev[18] = operand_a_i[13];
  assign operand_a_rev[19] = operand_a_i[12];
  assign operand_a_rev[20] = operand_a_i[11];
  assign operand_a_rev[21] = operand_a_i[10];
  assign operand_a_rev[22] = operand_a_i[9];
  assign operand_a_rev[23] = operand_a_i[8];
  assign operand_a_rev[24] = operand_a_i[7];
  assign operand_a_rev[25] = operand_a_i[6];
  assign operand_a_rev[26] = operand_a_i[5];
  assign operand_a_rev[27] = operand_a_i[4];
  assign operand_a_rev[28] = operand_a_i[3];
  assign operand_a_rev[29] = operand_a_i[2];
  assign operand_a_rev[30] = operand_a_i[1];
  assign operand_a_rev[31] = operand_a_i[0];
  assign adder_op_a_shift1 = 1'h0;
  assign adder_op_a_shift2 = 1'h0;
  assign adder_op_a_shift3 = 1'h0;
  assign adder_op_b_negate = \$adder_op_b_negate$1 ;
  assign adder_in_a = \$adder_in_a$3 ;
  assign operand_b_neg = \$5 ;
  assign adder_in_b = \$adder_in_b$7 ;
  assign adder_result_ext_o = \$9 ;
  assign adder_result = adder_result_ext_o[32:1];
  assign adder_result_o = adder_result;
  assign cmp_signed = \$cmp_signed$11 ;
  assign is_equal = \$13 ;
  assign is_equal_result_o = is_equal;
  assign is_greater_equal = \$is_greater_equal$23 ;
  assign cmp_result = \$cmp_result$29 ;
  assign comparison_result_o = cmp_result;
  assign bfp_op = 1'h0;
  assign bfp_len = { \$33 , operand_b_i[27:24] };
  assign bfp_off = operand_b_i[20:16];
  assign bfp_mask = 32'd0;
  assign bfp_mask_rev[0] = bfp_mask[31];
  assign bfp_mask_rev[1] = bfp_mask[30];
  assign bfp_mask_rev[2] = bfp_mask[29];
  assign bfp_mask_rev[3] = bfp_mask[28];
  assign bfp_mask_rev[4] = bfp_mask[27];
  assign bfp_mask_rev[5] = bfp_mask[26];
  assign bfp_mask_rev[6] = bfp_mask[25];
  assign bfp_mask_rev[7] = bfp_mask[24];
  assign bfp_mask_rev[8] = bfp_mask[23];
  assign bfp_mask_rev[9] = bfp_mask[22];
  assign bfp_mask_rev[10] = bfp_mask[21];
  assign bfp_mask_rev[11] = bfp_mask[20];
  assign bfp_mask_rev[12] = bfp_mask[19];
  assign bfp_mask_rev[13] = bfp_mask[18];
  assign bfp_mask_rev[14] = bfp_mask[17];
  assign bfp_mask_rev[15] = bfp_mask[16];
  assign bfp_mask_rev[16] = bfp_mask[15];
  assign bfp_mask_rev[17] = bfp_mask[14];
  assign bfp_mask_rev[18] = bfp_mask[13];
  assign bfp_mask_rev[19] = bfp_mask[12];
  assign bfp_mask_rev[20] = bfp_mask[11];
  assign bfp_mask_rev[21] = bfp_mask[10];
  assign bfp_mask_rev[22] = bfp_mask[9];
  assign bfp_mask_rev[23] = bfp_mask[8];
  assign bfp_mask_rev[24] = bfp_mask[7];
  assign bfp_mask_rev[25] = bfp_mask[6];
  assign bfp_mask_rev[26] = bfp_mask[5];
  assign bfp_mask_rev[27] = bfp_mask[4];
  assign bfp_mask_rev[28] = bfp_mask[3];
  assign bfp_mask_rev[29] = bfp_mask[2];
  assign bfp_mask_rev[30] = bfp_mask[1];
  assign bfp_mask_rev[31] = bfp_mask[0];
  assign bfp_result = 32'd0;
  assign shift_amt[5] = \$35 ;
  assign shift_amt_compl = \$37 [5:0];
  assign shift_amt[4:0] = \$shift_amt[4:0]$46 ;
  assign shift_sbmode = 1'h0;
  assign shift_left = \$shift_left$49 ;
  assign shift_arith = \$51 ;
  assign shift_ones = 1'h0;
  assign shift_funnel = 1'h0;
  assign shift_operand = \$shift_operand$56 ;
  assign shift_result_ext_signed = \$62 ;
  assign shift_result_ext = \$62 ;
  assign unused_shift_result_ext = \$62 [32];
  assign shift_result = \$auto$rtlil.cc:3092:Mux$1617 ;
  assign shift_result_rev = { \$62 [0], \$62 [1], \$62 [2], \$62 [3], \$62 [4], \$62 [5], \$62 [6], \$62 [7], \$62 [8], \$62 [9], \$62 [10], \$62 [11], \$62 [12], \$62 [13], \$62 [14], \$62 [15], \$62 [16], \$62 [17], \$62 [18], \$62 [19], \$62 [20], \$62 [21], \$62 [22], \$62 [23], \$62 [24], \$62 [25], \$62 [26], \$62 [27], \$62 [28], \$62 [29], \$62 [30], \$62 [31] };
  assign bwlogic_op_b_negate = \$bwlogic_op_b_negate$65 ;
  assign bwlogic_operand_b = \$auto$rtlil.cc:3092:Mux$1618 ;
  assign bwlogic_or_result = \$68 ;
  assign bwlogic_and_result = \$70 ;
  assign bwlogic_xor_result = \$72 ;
  assign bwlogic_or = \$78 ;
  assign bwlogic_and = \$84 ;
  assign bwlogic_result = \$bwlogic_result$86 ;
  assign \g_no_alu_rvb.unused_imd_val_q  = imd_val_q_i;
  assign \g_no_alu_rvb.unused_butterfly_result  = butterfly_result;
  assign \g_no_alu_rvb.unused_invbutterfly_result  = invbutterfly_result;
  assign bitcnt_result = 6'h00;
  assign minmax_result = 32'd0;
  assign pack_result = 32'd0;
  assign sext_result = 32'd0;
  assign singlebit_result = 32'd0;
  assign rev_result = 32'd0;
  assign shuffle_result = 32'd0;
  assign xperm_result = 32'd0;
  assign butterfly_result = 32'd0;
  assign invbutterfly_result = 32'd0;
  assign clmul_result = 32'd0;
  assign multicycle_result = 32'd0;
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign result_o = \$result_o$88 ;
  assign unused_shift_amt_compl = shift_amt_compl[5];
  assign \$shift_operand$56  = \$auto$rtlil.cc:3092:Mux$1615 ;
  assign \$result_o$88  = \$procmux$3888_Y ;
  assign \$bwlogic_result$86  = \$procmux$3894_Y ;
  assign \$bwlogic_op_b_negate$65  = 1'h0;
  assign \$procmux$3901_CMP  = shift_sbmode;
  assign \$shift_left$49  = \$procmux$3900_Y ;
  assign \$shift_left$48  = \$procmux$3910_Y ;
  assign \$procmux$3914_CMP  = bfp_op;
  assign \$shift_amt[4:0]$46  = \$procmux$3913_Y ;
  assign \$cmp_result$29  = \$procmux$3916_Y ;
  assign \$procmux$3922_CMP  = \$18 ;
  assign \$is_greater_equal$23  = \$procmux$3921_Y ;
  assign \$cmp_signed$11  = \$procmux$3924_Y ;
  assign \$adder_in_b$7  = \$procmux$3927_Y ;
  assign \$adder_in_a$3  = \$procmux$3931_Y ;
  assign \$adder_op_b_negate$1  = \$procmux$3940_Y ;
  assign \$5  = \$auto$rtlil.cc:2957:Not$16638 ;
  assign \$procmux$3928_CMP  = \$procmux$3940_Y ;
  assign \$procmux$3929_CMP  = multdiv_sel_i;
  assign \$procmux$3935_CMP  = multdiv_sel_i;
  assign \$procmux$3900_Y  = \$shift_left$48 ;
  assign \$60  = \$58 ;
  assign \$40  = 1'h0;
  assign \$auto$rtlil.cc:3092:Mux$1612  = shift_amt_compl[4:0];
  assign \$43  = 1'h0;
  assign \$auto$rtlil.cc:3092:Mux$1613  = operand_b_i[4:0];
  assign \$procmux$3913_Y  = \$auto$rtlil.cc:3092:Mux$1614 ;
  assign \$auto$rtlil.cc:3092:Mux$1618  = operand_b_i;
  assign \$35  = 1'h0;
  assign \$procmux$3895_CMP  = \$84 ;
  assign \$procmux$3896_CMP  = \$78 ;
  assign \$procmux$3932_CMP  = 1'h0;
  assign \$procmux$3933_CMP  = 1'h0;
  assign \$procmux$3934_CMP  = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_compressed_decoder.sv:16.8" */
module \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$12 ;
  wire \$15 ;
  wire \$2 ;
  wire \$24 ;
  wire \$27 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$39 ;
  wire \$41 ;
  wire \$51 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:120.13-120.77" */
  wire \$illegal_instr_o$13 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:132.17-132.66" */
  wire \$illegal_instr_o$16 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire \$illegal_instr_o$18 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire \$illegal_instr_o$20 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire \$illegal_instr_o$22 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:213.13-213.62" */
  wire \$illegal_instr_o$25 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:220.13-220.64" */
  wire \$illegal_instr_o$28 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:50.13-50.64" */
  wire \$illegal_instr_o$3 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:232.17-232.67" */
  wire \$illegal_instr_o$35 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire \$illegal_instr_o$37 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire \$illegal_instr_o$45 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire \$illegal_instr_o$47 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  wire \$illegal_instr_o$49 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire \$illegal_instr_o$5 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  wire [31:0] \$instr_o$10 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire [31:0] \$instr_o$17 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire [31:0] \$instr_o$19 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire [31:0] \$instr_o$21 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire [31:0] \$instr_o$36 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire [31:0] \$instr_o$4 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  wire [31:0] \$instr_o$42 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  wire [31:0] \$instr_o$43 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire [31:0] \$instr_o$44 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire [31:0] \$instr_o$46 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  wire [31:0] \$instr_o$48 ;
  wire [31:0] \$procmux$6886_Y ;
  wire \$procmux$6887_CMP ;
  wire [31:0] \$procmux$6889_Y ;
  wire \$procmux$6890_CMP ;
  wire [31:0] \$procmux$6892_Y ;
  wire \$procmux$6893_CMP ;
  wire [31:0] \$procmux$6894_Y ;
  wire \$procmux$6895_CMP ;
  wire [31:0] \$procmux$6896_Y ;
  wire \$procmux$6897_CMP ;
  wire [31:0] \$procmux$6903_Y ;
  wire \$procmux$6904_CMP ;
  wire [31:0] \$procmux$6906_Y ;
  wire \$procmux$6907_CMP ;
  wire [31:0] \$procmux$6908_Y ;
  wire \$procmux$6909_CMP ;
  wire [31:0] \$procmux$6910_Y ;
  wire \$procmux$6911_CMP ;
  wire [31:0] \$procmux$6918_Y ;
  wire \$procmux$6919_CMP ;
  wire [31:0] \$procmux$6920_Y ;
  wire \$procmux$6921_CMP ;
  wire [31:0] \$procmux$6922_Y ;
  wire \$procmux$6923_CMP ;
  wire \$procmux$6928_Y ;
  wire \$procmux$6929_CMP ;
  wire \$procmux$6931_Y ;
  wire \$procmux$6932_CMP ;
  wire \$procmux$6933_Y ;
  wire \$procmux$6934_CMP ;
  wire \$procmux$6935_Y ;
  wire \$procmux$6936_CMP ;
  wire \$procmux$6937_Y ;
  wire \$procmux$6938_CMP ;
  wire [31:0] \$procmux$6945_Y ;
  wire \$procmux$6946_CMP ;
  wire [31:0] \$procmux$6947_Y ;
  wire \$procmux$6948_CMP ;
  wire [31:0] \$procmux$6949_Y ;
  wire \$procmux$6950_CMP ;
  wire [31:0] \$procmux$6951_Y ;
  wire \$procmux$6952_CMP ;
  wire \$procmux$6959_Y ;
  wire \$procmux$6960_CMP ;
  wire \$procmux$6961_Y ;
  wire \$procmux$6962_CMP ;
  wire \$procmux$6963_Y ;
  wire \$procmux$6964_CMP ;
  wire \$procmux$6965_Y ;
  wire \$procmux$6966_CMP ;
  wire \$procmux$6972_Y ;
  wire \$procmux$6973_CMP ;
  wire \$procmux$6974_Y ;
  wire \$procmux$6975_CMP ;
  wire \$procmux$6976_Y ;
  wire \$procmux$6977_CMP ;
  wire \$procmux$6982_Y ;
  wire \$procmux$6983_CMP ;
  wire \$procmux$6984_Y ;
  wire \$procmux$6985_CMP ;
  wire \$procmux$6986_Y ;
  wire \$procmux$6987_CMP ;
  wire \$procmux$6993_Y ;
  wire \$procmux$6994_CMP ;
  wire \$procmux$6995_Y ;
  wire \$procmux$6996_CMP ;
  wire \$procmux$6997_Y ;
  wire \$procmux$6998_CMP ;
  wire \$procmux$7000_Y ;
  wire [3:0] \$procmux$7001_CMP ;
  wire \$procmux$7001_CTRL ;
  wire \$procmux$7003_CMP ;
  wire \$procmux$7005_CMP ;
  wire \$procmux$7007_CMP ;
  wire \$procmux$7008_Y ;
  wire \$procmux$7009_CMP ;
  wire [31:0] \$procmux$7012_Y ;
  wire \$procmux$7013_CMP ;
  wire \$procmux$7015_CMP ;
  wire \$procmux$7017_CMP ;
  wire \$procmux$7019_CMP ;
  wire [31:0] \$procmux$7020_Y ;
  wire \$procmux$7021_CMP ;
  wire \$procmux$7025_Y ;
  wire [3:0] \$procmux$7026_CMP ;
  wire \$procmux$7026_CTRL ;
  wire \$procmux$7027_Y ;
  wire \$procmux$7028_CMP ;
  wire \$procmux$7029_Y ;
  wire \$procmux$7030_CMP ;
  wire \$procmux$7031_Y ;
  wire \$procmux$7032_CMP ;
  wire [31:0] \$procmux$7037_Y ;
  wire \$procmux$7038_CMP ;
  wire \$procmux$7039_CMP ;
  wire \$procmux$7040_CMP ;
  wire \$procmux$7041_CMP ;
  wire [31:0] \$procmux$7042_Y ;
  wire \$procmux$7043_CMP ;
  wire [31:0] \$procmux$7044_Y ;
  wire \$procmux$7045_CMP ;
  wire [31:0] \$procmux$7046_Y ;
  wire \$procmux$7047_CMP ;
  wire [31:0] \$procmux$7052_Y ;
  wire \$procmux$7053_CMP ;
  wire \$procmux$7054_CMP ;
  wire [1:0] \$procmux$7056_CMP ;
  wire \$procmux$7056_CTRL ;
  wire [31:0] \$procmux$7057_Y ;
  wire \$procmux$7058_CMP ;
  wire [31:0] \$procmux$7059_Y ;
  wire \$procmux$7060_CMP ;
  wire \$procmux$7066_Y ;
  wire \$procmux$7067_CMP ;
  wire \$procmux$7068_Y ;
  wire [1:0] \$procmux$7069_CMP ;
  wire \$procmux$7069_CTRL ;
  wire \$procmux$7070_Y ;
  wire \$procmux$7071_CMP ;
  wire \$procmux$7072_Y ;
  wire \$procmux$7073_CMP ;
  wire \$procmux$7078_Y ;
  wire \$procmux$7079_CMP ;
  wire [1:0] \$procmux$7081_CMP ;
  wire \$procmux$7081_CTRL ;
  wire \$procmux$7082_Y ;
  wire \$procmux$7083_CMP ;
  wire \$procmux$7084_Y ;
  wire \$procmux$7085_CMP ;
  wire \$procmux$7090_Y ;
  wire \$procmux$7091_CMP ;
  wire \$procmux$7093_Y ;
  wire \$procmux$7094_CMP ;
  wire \$procmux$7095_Y ;
  wire \$procmux$7096_CMP ;
  wire [31:0] \$procmux$7101_Y ;
  wire \$procmux$7102_CMP ;
  wire [31:0] \$procmux$7103_Y ;
  wire \$procmux$7104_CMP ;
  wire [31:0] \$procmux$7105_Y ;
  wire \$procmux$7106_CMP ;
  wire [31:0] \$procmux$7109_Y ;
  wire [1:0] \$procmux$7110_CMP ;
  wire \$procmux$7110_CTRL ;
  wire \$procmux$7112_CMP ;
  wire \$procmux$7115_CMP ;
  wire \$procmux$7116_CMP ;
  wire [1:0] \$procmux$7117_CMP ;
  wire \$procmux$7117_CTRL ;
  wire \$procmux$7118_CMP ;
  wire [31:0] \$procmux$7119_Y ;
  wire \$procmux$7120_CMP ;
  wire \$procmux$7125_Y ;
  wire \$procmux$7126_CMP ;
  wire \$procmux$7129_CMP ;
  wire \$procmux$7130_Y ;
  wire \$procmux$7131_CMP ;
  wire \$procmux$7138_Y ;
  wire \$procmux$7139_CMP ;
  wire \$procmux$7140_Y ;
  wire \$procmux$7141_CMP ;
  wire \$procmux$7142_Y ;
  wire \$procmux$7143_CMP ;
  wire \$procmux$7147_Y ;
  wire [4:0] \$procmux$7148_CMP ;
  wire \$procmux$7148_CTRL ;
  wire \$procmux$7150_CMP ;
  wire \$procmux$7151_Y ;
  wire \$procmux$7152_CMP ;
  wire [31:0] \$procmux$7157_Y ;
  wire \$procmux$7158_CMP ;
  wire \$procmux$7159_CMP ;
  wire \$procmux$7161_CMP ;
  wire [31:0] \$procmux$7162_Y ;
  wire \$procmux$7163_CMP ;
  wire \$procmux$7166_Y ;
  wire \$procmux$7167_CMP ;
  wire \$procmux$7169_CMP ;
  wire \$procmux$7171_CMP ;
  wire [31:0] \$procmux$7174_Y ;
  wire \$procmux$7175_CMP ;
  wire \$procmux$7177_CMP ;
  wire \$procmux$7179_CMP ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:17.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:23.23" */
  output illegal_instr_o;
  wire illegal_instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:20.23" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:21.23" */
  output [31:0] instr_o;
  wire [31:0] instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:22.23" */
  output is_compressed_o;
  wire is_compressed_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:18.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:29.9" */
  wire unused_valid;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:19.23" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(instr_i[12:5]),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ instr_i[12], instr_i[6:2] }),
    .Y(\$12 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(instr_i[11:7]),
    .Y(\$27 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(instr_i[12]),
    .Y(\$30 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(instr_i[6:2]),
    .Y(\$32 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(instr_i[11:7]),
    .Y(\$34 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(instr_i[6:2]),
    .Y(\$39 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(instr_i[11:7]),
    .Y(\$41 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(instr_i[1:0]),
    .B(2'h3),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(instr_i[15]),
    .Y(\$7 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(instr_i[11:7]),
    .B(5'h02),
    .Y(\$9 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6886  (
    .A({ 12'h000, instr_i[11:7], 15'h00e7 }),
    .B(32'd1048691),
    .S(\$procmux$6887_CMP ),
    .Y(\$procmux$6886_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6889  (
    .A(\$procmux$6886_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$6890_CMP ),
    .Y(\$procmux$6889_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6892  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6889_Y ),
    .S(instr_i[12]),
    .Y(\$procmux$6892_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6894  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6892_Y ),
    .S(\$procmux$6895_CMP ),
    .Y(\$procmux$6894_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6895_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6895_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6896  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6894_Y ),
    .S(\$procmux$6897_CMP ),
    .Y(\$procmux$6896_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6897_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6897_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6903  (
    .A(\$instr_o$42 ),
    .B({ 7'h00, instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h33 }),
    .S(\$procmux$6904_CMP ),
    .Y(\$procmux$6903_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6906  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6903_Y ),
    .S(instr_i[12]),
    .Y(\$procmux$6906_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6908  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6906_Y ),
    .S(\$procmux$6909_CMP ),
    .Y(\$procmux$6908_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6909_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6909_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6910  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6908_Y ),
    .S(\$procmux$6911_CMP ),
    .Y(\$procmux$6910_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6911_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6911_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6918  (
    .A(\$instr_o$36 ),
    .B(\$instr_o$43 ),
    .S(instr_i[12]),
    .Y(\$procmux$6918_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6920  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6918_Y ),
    .S(\$procmux$6921_CMP ),
    .Y(\$procmux$6920_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6921_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6921_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6922  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6920_Y ),
    .S(\$procmux$6923_CMP ),
    .Y(\$procmux$6922_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6923_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6923_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:232.44-232.67|rtl/cve2/cve2_compressed_decoder.sv:232.17-232.67" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6928  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6929_CMP ),
    .Y(\$procmux$6928_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6931  (
    .A(\$procmux$6928_Y ),
    .B(1'hx),
    .S(\$procmux$6932_CMP ),
    .Y(\$procmux$6931_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6933  (
    .A(\$procmux$6931_Y ),
    .B(1'hx),
    .S(instr_i[12]),
    .Y(\$procmux$6933_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6935  (
    .A(1'hx),
    .B(\$procmux$6933_Y ),
    .S(\$procmux$6936_CMP ),
    .Y(\$procmux$6935_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6936_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6936_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6937  (
    .A(1'hx),
    .B(\$procmux$6935_Y ),
    .S(\$procmux$6938_CMP ),
    .Y(\$procmux$6937_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6938_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6938_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6945  (
    .A({ 12'h000, instr_i[11:7], 15'h0067 }),
    .B({ 7'h00, instr_i[6:2], 8'h00, instr_i[11:7], 7'h33 }),
    .S(\$procmux$6946_CMP ),
    .Y(\$procmux$6945_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6947  (
    .A(\$procmux$6945_Y ),
    .B(32'hxxxxxxxx),
    .S(instr_i[12]),
    .Y(\$procmux$6947_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6949  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6947_Y ),
    .S(\$procmux$6950_CMP ),
    .Y(\$procmux$6949_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6950_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6950_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6951  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$6949_Y ),
    .S(\$procmux$6952_CMP ),
    .Y(\$procmux$6951_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6952_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6952_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6959  (
    .A(\$illegal_instr_o$35 ),
    .B(1'h0),
    .S(\$procmux$6960_CMP ),
    .Y(\$procmux$6959_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6961  (
    .A(\$procmux$6959_Y ),
    .B(1'hx),
    .S(instr_i[12]),
    .Y(\$procmux$6961_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6963  (
    .A(1'hx),
    .B(\$procmux$6961_Y ),
    .S(\$procmux$6964_CMP ),
    .Y(\$procmux$6963_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6964_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6964_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6965  (
    .A(1'hx),
    .B(\$procmux$6963_Y ),
    .S(\$procmux$6966_CMP ),
    .Y(\$procmux$6965_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6966_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6966_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6972  (
    .A(\$illegal_instr_o$37 ),
    .B(1'h0),
    .S(instr_i[12]),
    .Y(\$procmux$6972_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6974  (
    .A(1'hx),
    .B(\$procmux$6972_Y ),
    .S(\$procmux$6975_CMP ),
    .Y(\$procmux$6974_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6975_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6975_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6976  (
    .A(1'hx),
    .B(\$procmux$6974_Y ),
    .S(\$procmux$6977_CMP ),
    .Y(\$procmux$6976_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6977_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6977_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:220.41-220.64|rtl/cve2/cve2_compressed_decoder.sv:220.13-220.64" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6982  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6983_CMP ),
    .Y(\$procmux$6982_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6984  (
    .A(1'hx),
    .B(\$procmux$6982_Y ),
    .S(\$procmux$6985_CMP ),
    .Y(\$procmux$6984_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6985_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h2),
    .Y(\$procmux$6985_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6986  (
    .A(1'hx),
    .B(\$procmux$6984_Y ),
    .S(\$procmux$6987_CMP ),
    .Y(\$procmux$6986_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6987_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6987_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:213.39-213.62|rtl/cve2/cve2_compressed_decoder.sv:213.13-213.62" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6993  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6994_CMP ),
    .Y(\$procmux$6993_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6995  (
    .A(1'hx),
    .B(\$procmux$6993_Y ),
    .S(\$procmux$6996_CMP ),
    .Y(\$procmux$6995_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6996_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$6996_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6997  (
    .A(1'hx),
    .B(\$procmux$6995_Y ),
    .S(\$procmux$6998_CMP ),
    .Y(\$procmux$6997_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6998_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6998_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$7000  (
    .A(1'h0),
    .B({ \$illegal_instr_o$25 , \$illegal_instr_o$28 , \$illegal_instr_o$45 , 1'h1 }),
    .S({ \$procmux$7007_CMP , \$procmux$7005_CMP , \$procmux$7003_CMP , \$procmux$7001_CTRL  }),
    .Y(\$procmux$7000_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_ANY  (
    .A(\$procmux$7001_CMP ),
    .Y(\$procmux$7001_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h1),
    .Y(\$procmux$7001_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP1  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7001_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP2  (
    .A(instr_i[15:13]),
    .B(3'h5),
    .Y(\$procmux$7001_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP3  (
    .A(instr_i[15:13]),
    .B(3'h7),
    .Y(\$procmux$7001_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7003_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7003_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7005_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h2),
    .Y(\$procmux$7005_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7007_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7007_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7008  (
    .A(1'hx),
    .B(\$procmux$7000_Y ),
    .S(\$procmux$7009_CMP ),
    .Y(\$procmux$7008_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7009_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$7009_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$7012  (
    .A(instr_i),
    .B({ 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 7'h03, \$instr_o$44 , 4'h0, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023 }),
    .S({ \$procmux$7019_CMP , \$procmux$7017_CMP , \$procmux$7015_CMP , \$procmux$7013_CMP  }),
    .Y(\$procmux$7012_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7013_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h6),
    .Y(\$procmux$7013_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7015_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7015_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7017_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h2),
    .Y(\$procmux$7017_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7019_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7019_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7020  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7012_Y ),
    .S(\$procmux$7021_CMP ),
    .Y(\$procmux$7020_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7021_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$7021_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7025  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7026_CTRL ),
    .Y(\$procmux$7025_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_ANY  (
    .A(\$procmux$7026_CMP ),
    .Y(\$procmux$7026_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h4),
    .Y(\$procmux$7026_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP1  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h5),
    .Y(\$procmux$7026_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP2  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h6),
    .Y(\$procmux$7026_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP3  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h7),
    .Y(\$procmux$7026_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7027  (
    .A(1'hx),
    .B(\$procmux$7025_Y ),
    .S(\$procmux$7028_CMP ),
    .Y(\$procmux$7027_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7028_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$7028_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7029  (
    .A(1'hx),
    .B(\$procmux$7027_Y ),
    .S(\$procmux$7030_CMP ),
    .Y(\$procmux$7029_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7030_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7030_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7031  (
    .A(1'hx),
    .B(\$procmux$7029_Y ),
    .S(\$procmux$7032_CMP ),
    .Y(\$procmux$7031_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7032_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7032_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$7037  (
    .A(instr_i),
    .B({ 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 5'h01, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h11, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h19, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h1d, instr_i[9:7], 7'h33 }),
    .S({ \$procmux$7041_CMP , \$procmux$7040_CMP , \$procmux$7039_CMP , \$procmux$7038_CMP  }),
    .Y(\$procmux$7037_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7038_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h3),
    .Y(\$procmux$7038_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7039_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h2),
    .Y(\$procmux$7039_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7040_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h1),
    .Y(\$procmux$7040_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:145.21-146.74|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7041_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .Y(\$procmux$7041_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7042  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7037_Y ),
    .S(\$procmux$7043_CMP ),
    .Y(\$procmux$7042_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7043_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$7043_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7044  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7042_Y ),
    .S(\$procmux$7045_CMP ),
    .Y(\$procmux$7044_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7045_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7045_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7046  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7044_Y ),
    .S(\$procmux$7047_CMP ),
    .Y(\$procmux$7046_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7047_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7047_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$7052  (
    .A(32'hxxxxxxxx),
    .B({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 5'h15, instr_i[9:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 5'h1d, instr_i[9:7], 7'h13, \$instr_o$17  }),
    .S({ \$procmux$7056_CTRL , \$procmux$7054_CMP , \$procmux$7053_CMP  }),
    .Y(\$procmux$7052_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7053_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$7053_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7054_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h2),
    .Y(\$procmux$7054_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_ANY  (
    .A(\$procmux$7056_CMP ),
    .Y(\$procmux$7056_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_CMP0  (
    .A(instr_i[11:10]),
    .Y(\$procmux$7056_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_CMP1  (
    .A(instr_i[11:10]),
    .B(2'h1),
    .Y(\$procmux$7056_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7057  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7052_Y ),
    .S(\$procmux$7058_CMP ),
    .Y(\$procmux$7057_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7058_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7058_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7059  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7057_Y ),
    .S(\$procmux$7060_CMP ),
    .Y(\$procmux$7059_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7060_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7060_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:132.43-132.66|rtl/cve2/cve2_compressed_decoder.sv:132.17-132.66" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7066  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7067_CMP ),
    .Y(\$procmux$7066_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7068  (
    .A(1'hx),
    .B(\$procmux$7066_Y ),
    .S(\$procmux$7069_CTRL ),
    .Y(\$procmux$7068_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7069_ANY  (
    .A(\$procmux$7069_CMP ),
    .Y(\$procmux$7069_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7069_CMP0  (
    .A(instr_i[11:10]),
    .Y(\$procmux$7069_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7069_CMP1  (
    .A(instr_i[11:10]),
    .B(2'h1),
    .Y(\$procmux$7069_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7070  (
    .A(1'hx),
    .B(\$procmux$7068_Y ),
    .S(\$procmux$7071_CMP ),
    .Y(\$procmux$7070_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7071_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7071_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7072  (
    .A(1'hx),
    .B(\$procmux$7070_Y ),
    .S(\$procmux$7073_CMP ),
    .Y(\$procmux$7072_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7073_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7073_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7078  (
    .A(1'h0),
    .B({ \$illegal_instr_o$16 , \$illegal_instr_o$18  }),
    .S({ \$procmux$7081_CTRL , \$procmux$7079_CMP  }),
    .Y(\$procmux$7078_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7079_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$7079_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7081_ANY  (
    .A(\$procmux$7081_CMP ),
    .Y(\$procmux$7081_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7081_CMP0  (
    .A(instr_i[11:10]),
    .Y(\$procmux$7081_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7081_CMP1  (
    .A(instr_i[11:10]),
    .B(2'h1),
    .Y(\$procmux$7081_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7082  (
    .A(1'hx),
    .B(\$procmux$7078_Y ),
    .S(\$procmux$7083_CMP ),
    .Y(\$procmux$7082_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7083_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7083_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7084  (
    .A(1'hx),
    .B(\$procmux$7082_Y ),
    .S(\$procmux$7085_CMP ),
    .Y(\$procmux$7084_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7085_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7085_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:120.54-120.77|rtl/cve2/cve2_compressed_decoder.sv:120.13-120.77" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7090  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7091_CMP ),
    .Y(\$procmux$7090_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7093  (
    .A(1'hx),
    .B(\$procmux$7090_Y ),
    .S(\$procmux$7094_CMP ),
    .Y(\$procmux$7093_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7094_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7094_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7095  (
    .A(1'hx),
    .B(\$procmux$7093_Y ),
    .S(\$procmux$7096_CMP ),
    .Y(\$procmux$7095_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7096_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7096_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7101  (
    .A({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 7'h37 }),
    .B({ instr_i[12], instr_i[12], instr_i[12], instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 24'h010113 }),
    .S(\$procmux$7102_CMP ),
    .Y(\$procmux$7101_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7103  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7101_Y ),
    .S(\$procmux$7104_CMP ),
    .Y(\$procmux$7103_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7104_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7104_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7105  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7103_Y ),
    .S(\$procmux$7106_CMP ),
    .Y(\$procmux$7105_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7106_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7106_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$7109  (
    .A(32'hxxxxxxxx),
    .B({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13, instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$7 , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, \$instr_o$10 , \$instr_o$19 , instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }),
    .S({ \$procmux$7118_CMP , \$procmux$7117_CTRL , \$procmux$7116_CMP , \$procmux$7115_CMP , \$procmux$7112_CMP , \$procmux$7110_CTRL  }),
    .Y(\$procmux$7109_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7110_ANY  (
    .A(\$procmux$7110_CMP ),
    .Y(\$procmux$7110_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7110_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h6),
    .Y(\$procmux$7110_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7110_CMP1  (
    .A(instr_i[15:13]),
    .B(3'h7),
    .Y(\$procmux$7110_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7112_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7112_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7115_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7115_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:105.13-106.62|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7116_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h2),
    .Y(\$procmux$7116_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7117_ANY  (
    .A(\$procmux$7117_CMP ),
    .Y(\$procmux$7117_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7117_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h1),
    .Y(\$procmux$7117_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7117_CMP1  (
    .A(instr_i[15:13]),
    .B(3'h5),
    .Y(\$procmux$7117_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:90.13-91.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7118_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7118_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7119  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7109_Y ),
    .S(\$procmux$7120_CMP ),
    .Y(\$procmux$7119_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7120_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7120_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7125  (
    .A(1'h0),
    .B({ \$illegal_instr_o$13 , \$illegal_instr_o$20  }),
    .S({ \$procmux$7129_CMP , \$procmux$7126_CMP  }),
    .Y(\$procmux$7125_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7126_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7126_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:109.19-121.14|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7129_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7129_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7130  (
    .A(1'hx),
    .B(\$procmux$7125_Y ),
    .S(\$procmux$7131_CMP ),
    .Y(\$procmux$7130_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7131_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7131_CMP )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:50.41-50.64|rtl/cve2/cve2_compressed_decoder.sv:50.13-50.64" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7138  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7139_CMP ),
    .Y(\$procmux$7138_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:46.19-51.14|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7140  (
    .A(1'hx),
    .B(\$procmux$7138_Y ),
    .S(\$procmux$7141_CMP ),
    .Y(\$procmux$7140_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:46.19-51.14|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7141_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7141_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7142  (
    .A(1'hx),
    .B(\$procmux$7140_Y ),
    .S(\$procmux$7143_CMP ),
    .Y(\$procmux$7142_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7143_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7143_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7147  (
    .A(1'h0),
    .B({ \$illegal_instr_o$3 , 1'h1 }),
    .S({ \$procmux$7150_CMP , \$procmux$7148_CTRL  }),
    .Y(\$procmux$7147_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_ANY  (
    .A(\$procmux$7148_CMP ),
    .Y(\$procmux$7148_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h1),
    .Y(\$procmux$7148_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_CMP1  (
    .A(instr_i[15:13]),
    .B(3'h3),
    .Y(\$procmux$7148_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_CMP2  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$7148_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_CMP3  (
    .A(instr_i[15:13]),
    .B(3'h5),
    .Y(\$procmux$7148_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_CMP4  (
    .A(instr_i[15:13]),
    .B(3'h7),
    .Y(\$procmux$7148_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:46.19-51.14|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7150_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7150_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7151  (
    .A(1'hx),
    .B(\$procmux$7147_Y ),
    .S(\$procmux$7152_CMP ),
    .Y(\$procmux$7151_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7152_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7152_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$7157  (
    .A(instr_i),
    .B({ 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023 }),
    .S({ \$procmux$7161_CMP , \$procmux$7159_CMP , \$procmux$7158_CMP  }),
    .Y(\$procmux$7157_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7158_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h6),
    .Y(\$procmux$7158_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:55.13-56.96|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7159_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h2),
    .Y(\$procmux$7159_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:46.19-51.14|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7161_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$7161_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7162  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$7157_Y ),
    .S(\$procmux$7163_CMP ),
    .Y(\$procmux$7162_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7163_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7163_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$7166  (
    .A(1'h0),
    .B({ \$illegal_instr_o$5 , \$illegal_instr_o$22 , \$illegal_instr_o$47  }),
    .S({ \$procmux$7171_CMP , \$procmux$7169_CMP , \$procmux$7167_CMP  }),
    .Y(\$procmux$7166_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7167_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$7167_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7169_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7169_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7171_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7171_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$7174  (
    .A(instr_i),
    .B({ \$instr_o$4 , \$instr_o$21 , \$instr_o$46  }),
    .S({ \$procmux$7179_CMP , \$procmux$7177_CMP , \$procmux$7175_CMP  }),
    .Y(\$procmux$7174_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7175_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$7175_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7177_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h1),
    .Y(\$procmux$7177_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7179_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7179_CMP )
  );
  assign unused_valid = valid_i;
  assign instr_o = \$instr_o$48 ;
  assign illegal_instr_o = \$illegal_instr_o$49 ;
  assign is_compressed_o = \$51 ;
  assign \$procmux$6887_CMP  = \$41 ;
  assign \$procmux$6890_CMP  = \$39 ;
  assign \$procmux$6893_CMP  = \$30 ;
  assign \$instr_o$42  = \$procmux$6896_Y ;
  assign \$procmux$6904_CMP  = \$39 ;
  assign \$procmux$6907_CMP  = \$30 ;
  assign \$instr_o$43  = \$procmux$6910_Y ;
  assign \$procmux$6919_CMP  = \$30 ;
  assign \$instr_o$44  = \$procmux$6922_Y ;
  assign \$procmux$6929_CMP  = \$34 ;
  assign \$procmux$6932_CMP  = \$32 ;
  assign \$procmux$6934_CMP  = \$30 ;
  assign \$illegal_instr_o$35  = \$procmux$6937_Y ;
  assign \$procmux$6946_CMP  = \$32 ;
  assign \$procmux$6948_CMP  = \$30 ;
  assign \$instr_o$36  = \$procmux$6951_Y ;
  assign \$procmux$6960_CMP  = \$32 ;
  assign \$procmux$6962_CMP  = \$30 ;
  assign \$illegal_instr_o$37  = \$procmux$6965_Y ;
  assign \$procmux$6973_CMP  = \$30 ;
  assign \$illegal_instr_o$45  = \$procmux$6976_Y ;
  assign \$procmux$6983_CMP  = \$27 ;
  assign \$illegal_instr_o$28  = \$procmux$6986_Y ;
  assign \$procmux$6994_CMP  = \$24 ;
  assign \$illegal_instr_o$25  = \$procmux$6997_Y ;
  assign \$illegal_instr_o$47  = \$procmux$7008_Y ;
  assign \$instr_o$46  = \$procmux$7020_Y ;
  assign \$illegal_instr_o$18  = \$procmux$7031_Y ;
  assign \$instr_o$17  = \$procmux$7046_Y ;
  assign \$instr_o$19  = \$procmux$7059_Y ;
  assign \$procmux$7067_CMP  = \$15 ;
  assign \$illegal_instr_o$16  = \$procmux$7072_Y ;
  assign \$illegal_instr_o$20  = \$procmux$7084_Y ;
  assign \$procmux$7091_CMP  = \$12 ;
  assign \$illegal_instr_o$13  = \$procmux$7095_Y ;
  assign \$procmux$7102_CMP  = \$9 ;
  assign \$instr_o$10  = \$procmux$7105_Y ;
  assign \$instr_o$21  = \$procmux$7119_Y ;
  assign \$illegal_instr_o$22  = \$procmux$7130_Y ;
  assign \$procmux$7139_CMP  = \$2 ;
  assign \$illegal_instr_o$3  = \$procmux$7142_Y ;
  assign \$illegal_instr_o$5  = \$procmux$7151_Y ;
  assign \$instr_o$4  = \$procmux$7162_Y ;
  assign \$illegal_instr_o$49  = \$procmux$7166_Y ;
  assign \$instr_o$48  = \$procmux$7174_Y ;
  assign \$15  = instr_i[12];
  assign \$24  = instr_i[12];
endmodule

/* src = "rtl/cve2/cve2_controller.sv:12.8" */
module \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i (clk_i, rst_ni, irqs_i, instr_req_o, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o
, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$1 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$11 ;
  wire \$110 ;
  wire \$112 ;
  wire \$13 ;
  wire \$132 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$15 ;
  wire \$152 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$17 ;
  wire \$170 ;
  wire \$172 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$19 ;
  wire \$198 ;
  wire \$200 ;
  wire \$206 ;
  wire \$208 ;
  wire \$21 ;
  wire [31:0] \$211 ;
  wire \$215 ;
  wire \$218 ;
  wire \$23 ;
  wire \$25 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$27 ;
  wire \$29 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$298 ;
  wire \$3 ;
  wire \$300 ;
  wire \$302 ;
  wire \$304 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$7 ;
  wire \$79 ;
  wire \$81 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$9 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$99 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1610 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1611 ;
  wire \$auto$rtlil.cc:3092:Mux$1603 ;
  wire \$auto$rtlil.cc:3092:Mux$1604 ;
  wire \$auto$rtlil.cc:3092:Mux$1605 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1606 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1607 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1608 ;
  wire [6:0] \$auto$rtlil.cc:3092:Mux$1609 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$controller_run_o$273 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [31:0] \$csr_mtval_o$231 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [31:0] \$csr_mtval_o$258 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [31:0] \$csr_mtval_o$286 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire \$csr_restore_dret_id_o$238 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$csr_restore_dret_id_o$245 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_dret_id_o$256 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$csr_restore_dret_id_o$284 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$csr_restore_mret_id_o$244 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_mret_id_o$255 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$csr_restore_mret_id_o$283 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire \$csr_save_cause_o$194 ;
  /* src = "rtl/cve2/cve2_controller.sv:560.9-569.12" */
  wire \$csr_save_cause_o$204 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire \$csr_save_cause_o$224 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$csr_save_cause_o$230 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_save_cause_o$257 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$csr_save_cause_o$285 ;
  /* src = "rtl/cve2/cve2_controller.sv:560.9-569.12" */
  wire \$csr_save_id_o$203 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire \$csr_save_id_o$223 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$csr_save_id_o$229 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_save_id_o$254 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$csr_save_id_o$282 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire \$csr_save_if_o$193 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$csr_save_if_o$281 ;
  /* src = "rtl/cve2/cve2_controller.sv:392.9-397.12" */
  wire \$ctrl_busy_o$143 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$ctrl_busy_o$272 ;
  /* src = "rtl/cve2/cve2_controller.sv:361.9-364.12" */
  wire [3:0] \$ctrl_fsm_ns$133 ;
  /* src = "rtl/cve2/cve2_controller.sv:392.9-397.12" */
  wire [3:0] \$ctrl_fsm_ns$142 ;
  /* src = "rtl/cve2/cve2_controller.sv:402.9-404.12" */
  wire [3:0] \$ctrl_fsm_ns$144 ;
  /* src = "rtl/cve2/cve2_controller.sv:407.9-414.12" */
  wire [3:0] \$ctrl_fsm_ns$145 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire [3:0] \$ctrl_fsm_ns$147 ;
  /* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" */
  wire [3:0] \$ctrl_fsm_ns$149 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire [3:0] \$ctrl_fsm_ns$173 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire [3:0] \$ctrl_fsm_ns$175 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire [3:0] \$ctrl_fsm_ns$177 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [3:0] \$ctrl_fsm_ns$219 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [3:0] \$ctrl_fsm_ns$225 ;
  /* src = "rtl/cve2/cve2_controller.sv:670.20-672.14" */
  wire [3:0] \$ctrl_fsm_ns$233 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire [3:0] \$ctrl_fsm_ns$234 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [3:0] \$ctrl_fsm_ns$239 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [3:0] \$ctrl_fsm_ns$246 ;
  /* src = "rtl/cve2/cve2_controller.sv:689.9-691.12" */
  wire [3:0] \$ctrl_fsm_ns$265 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [3:0] \$ctrl_fsm_ns$266 ;
  /* src = "rtl/cve2/cve2_controller.sv:534.18-538.12" */
  wire [2:0] \$debug_cause_o$195 ;
  /* src = "rtl/cve2/cve2_controller.sv:532.9-538.12" */
  wire [2:0] \$debug_cause_o$196 ;
  /* src = "rtl/cve2/cve2_controller.sv:560.9-569.12" */
  wire [2:0] \$debug_cause_o$201 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [2:0] \$debug_cause_o$279 ;
  /* src = "rtl/cve2/cve2_controller.sv:560.9-569.12" */
  wire \$debug_csr_save_o$202 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$debug_csr_save_o$280 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire \$debug_mode_d$235 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$debug_mode_d$241 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$debug_mode_d$248 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$debug_mode_d$268 ;
  /* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" */
  wire \$ebrk_insn_prio$60 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$ebrk_insn_prio$64 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ebrk_insn_prio$69 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$ebrk_insn_prio$75 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$ecall_insn_prio$63 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ecall_insn_prio$68 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$ecall_insn_prio$74 ;
  /* src = "rtl/cve2/cve2_controller.sv:509.20-513.14" */
  wire [6:0] \$exc_cause_o$185 ;
  /* src = "rtl/cve2/cve2_controller.sv:507.20-513.14" */
  wire [6:0] \$exc_cause_o$186 ;
  /* src = "rtl/cve2/cve2_controller.sv:500.20-513.14" */
  wire [6:0] \$exc_cause_o$187 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire [6:0] \$exc_cause_o$189 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire [6:0] \$exc_cause_o$192 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [6:0] \$exc_cause_o$222 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [6:0] \$exc_cause_o$228 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [6:0] \$exc_cause_o$253 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [6:0] \$exc_cause_o$278 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [1:0] \$exc_pc_mux_o$252 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [1:0] \$exc_pc_mux_o$277 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire \$flush_id$220 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$flush_id$226 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$flush_id$249 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$flush_id$271 ;
  /* src = "rtl/cve2/cve2_controller.sv:407.9-414.12" */
  wire \$halt_if$146 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire \$halt_if$148 ;
  /* src = "rtl/cve2/cve2_controller.sv:461.9-463.12" */
  wire \$halt_if$162 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire \$halt_if$174 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire \$halt_if$176 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire \$halt_if$178 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$halt_if$269 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$illegal_insn_prio$67 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$illegal_insn_prio$73 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$instr_fetch_err_prio$72 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$instr_req_o$274 ;
  /* src = "rtl/cve2/cve2_controller.sv:243.16-245.10" */
  wire \$load_err_prio$57 ;
  /* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" */
  wire \$load_err_prio$59 ;
  /* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" */
  wire \$load_err_prio$62 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$load_err_prio$66 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$load_err_prio$71 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$load_err_prio$77 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$114 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$115 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$116 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$117 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$118 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$119 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$120 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$121 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$122 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$123 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$124 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$125 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$126 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$127 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$128 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$129 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire \$nmi_mode_d$188 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire \$nmi_mode_d$190 ;
  /* src = "rtl/cve2/cve2_controller.sv:662.13-664.16" */
  wire \$nmi_mode_d$232 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$nmi_mode_d$240 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$nmi_mode_d$247 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$nmi_mode_d$267 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire [2:0] \$pc_mux_o$237 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [2:0] \$pc_mux_o$243 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [2:0] \$pc_mux_o$251 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire [2:0] \$pc_mux_o$276 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$pc_set_o$153 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire \$pc_set_o$191 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire \$pc_set_o$221 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$pc_set_o$227 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire \$pc_set_o$236 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$pc_set_o$242 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$pc_set_o$250 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$pc_set_o$275 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_jump_o$154 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$perf_jump_o$287 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_tbranch_o$155 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$perf_tbranch_o$288 ;
  wire [3:0] \$procmux$3943_Y ;
  wire \$procmux$3944_CMP ;
  wire [3:0] \$procmux$3946_Y ;
  wire \$procmux$3947_CMP ;
  wire [3:0] \$procmux$3949_Y ;
  wire \$procmux$3950_CMP ;
  wire [3:0] \$procmux$3952_Y ;
  wire \$procmux$3953_CMP ;
  wire [3:0] \$procmux$3955_Y ;
  wire \$procmux$3956_CMP ;
  wire [3:0] \$procmux$3958_Y ;
  wire \$procmux$3959_CMP ;
  wire [3:0] \$procmux$3960_Y ;
  wire \$procmux$3961_CMP ;
  wire \$procmux$3964_Y ;
  wire \$procmux$3965_CMP ;
  wire \$procmux$3967_Y ;
  wire \$procmux$3968_CMP ;
  wire \$procmux$3970_Y ;
  wire \$procmux$3971_CMP ;
  wire \$procmux$3972_Y ;
  wire \$procmux$3973_CMP ;
  wire [2:0] \$procmux$3976_Y ;
  wire \$procmux$3977_CMP ;
  wire [2:0] \$procmux$3979_Y ;
  wire \$procmux$3980_CMP ;
  wire [2:0] \$procmux$3982_Y ;
  wire \$procmux$3983_CMP ;
  wire [2:0] \$procmux$3984_Y ;
  wire \$procmux$3985_CMP ;
  wire \$procmux$3988_Y ;
  wire \$procmux$3989_CMP ;
  wire \$procmux$3991_Y ;
  wire \$procmux$3992_CMP ;
  wire \$procmux$3994_Y ;
  wire \$procmux$3995_CMP ;
  wire \$procmux$3996_Y ;
  wire \$procmux$3997_CMP ;
  wire \$procmux$4000_Y ;
  wire \$procmux$4001_CMP ;
  wire \$procmux$4003_Y ;
  wire \$procmux$4004_CMP ;
  wire \$procmux$4006_Y ;
  wire \$procmux$4007_CMP ;
  wire \$procmux$4008_Y ;
  wire \$procmux$4009_CMP ;
  wire [3:0] \$procmux$4013_Y ;
  wire \$procmux$4014_CMP ;
  wire [3:0] \$procmux$4016_Y ;
  wire \$procmux$4017_CMP ;
  wire [3:0] \$procmux$4019_Y ;
  wire \$procmux$4020_CMP ;
  wire [3:0] \$procmux$4021_Y ;
  wire \$procmux$4022_CMP ;
  wire [2:0] \$procmux$4027_Y ;
  wire \$procmux$4028_CMP ;
  wire [2:0] \$procmux$4030_Y ;
  wire \$procmux$4031_CMP ;
  wire [2:0] \$procmux$4032_Y ;
  wire \$procmux$4033_CMP ;
  wire \$procmux$4038_Y ;
  wire \$procmux$4039_CMP ;
  wire \$procmux$4041_Y ;
  wire \$procmux$4042_CMP ;
  wire \$procmux$4043_Y ;
  wire \$procmux$4044_CMP ;
  wire \$procmux$4047_Y ;
  wire \$procmux$4048_CMP ;
  wire \$procmux$4049_Y ;
  wire \$procmux$4050_CMP ;
  wire \$procmux$4052_Y ;
  wire \$procmux$4053_CMP ;
  wire \$procmux$4054_Y ;
  wire \$procmux$4055_CMP ;
  wire \$procmux$4059_Y ;
  wire \$procmux$4060_CMP ;
  wire \$procmux$4062_Y ;
  wire \$procmux$4063_CMP ;
  wire \$procmux$4064_Y ;
  wire \$procmux$4065_CMP ;
  wire \$procmux$4069_Y ;
  wire \$procmux$4070_CMP ;
  wire \$procmux$4072_Y ;
  wire \$procmux$4073_CMP ;
  wire \$procmux$4074_Y ;
  wire \$procmux$4075_CMP ;
  wire \$procmux$4079_Y ;
  wire \$procmux$4080_CMP ;
  wire \$procmux$4082_Y ;
  wire \$procmux$4083_CMP ;
  wire \$procmux$4084_Y ;
  wire \$procmux$4085_CMP ;
  wire \$procmux$4089_Y ;
  wire \$procmux$4090_CMP ;
  wire \$procmux$4092_Y ;
  wire \$procmux$4093_CMP ;
  wire \$procmux$4094_Y ;
  wire \$procmux$4095_CMP ;
  wire [3:0] \$procmux$4099_Y ;
  wire \$procmux$4100_CMP ;
  wire [3:0] \$procmux$4102_Y ;
  wire \$procmux$4103_CMP ;
  wire [3:0] \$procmux$4104_Y ;
  wire \$procmux$4105_CMP ;
  wire [2:0] \$procmux$4110_Y ;
  wire \$procmux$4111_CMP ;
  wire [2:0] \$procmux$4112_Y ;
  wire \$procmux$4113_CMP ;
  wire \$procmux$4118_Y ;
  wire \$procmux$4119_CMP ;
  wire \$procmux$4120_Y ;
  wire \$procmux$4121_CMP ;
  wire [3:0] \$procmux$4126_Y ;
  wire \$procmux$4127_CMP ;
  wire [3:0] \$procmux$4128_Y ;
  wire \$procmux$4129_CMP ;
  wire \$procmux$4136_Y ;
  wire \$procmux$4137_CMP ;
  wire \$procmux$4138_Y ;
  wire \$procmux$4139_CMP ;
  wire \$procmux$4140_Y ;
  wire \$procmux$4141_CMP ;
  wire \$procmux$4142_Y ;
  wire \$procmux$4143_CMP ;
  wire \$procmux$4151_Y ;
  wire \$procmux$4152_CMP ;
  wire \$procmux$4153_Y ;
  wire \$procmux$4154_CMP ;
  wire \$procmux$4155_Y ;
  wire \$procmux$4156_CMP ;
  wire [6:0] \$procmux$4163_Y ;
  wire \$procmux$4164_CMP ;
  wire [6:0] \$procmux$4165_Y ;
  wire \$procmux$4166_CMP ;
  wire [6:0] \$procmux$4167_Y ;
  wire \$procmux$4168_CMP ;
  wire [6:0] \$procmux$4169_Y ;
  wire \$procmux$4170_CMP ;
  wire \$procmux$4177_Y ;
  wire \$procmux$4178_CMP ;
  wire \$procmux$4179_Y ;
  wire \$procmux$4180_CMP ;
  wire \$procmux$4181_Y ;
  wire \$procmux$4182_CMP ;
  wire \$procmux$4183_Y ;
  wire \$procmux$4184_CMP ;
  wire \$procmux$4191_Y ;
  wire \$procmux$4192_CMP ;
  wire \$procmux$4193_Y ;
  wire \$procmux$4194_CMP ;
  wire \$procmux$4195_Y ;
  wire \$procmux$4196_CMP ;
  wire \$procmux$4197_Y ;
  wire \$procmux$4198_CMP ;
  wire [3:0] \$procmux$4205_Y ;
  wire \$procmux$4206_CMP ;
  wire [3:0] \$procmux$4207_Y ;
  wire \$procmux$4208_CMP ;
  wire [3:0] \$procmux$4209_Y ;
  wire \$procmux$4210_CMP ;
  wire [3:0] \$procmux$4211_Y ;
  wire \$procmux$4212_CMP ;
  wire [31:0] \$procmux$4216_Y ;
  wire \$procmux$4217_CMP ;
  wire \$procmux$4218_CMP ;
  wire \$procmux$4219_CMP ;
  wire \$procmux$4220_CMP ;
  wire [31:0] \$procmux$4221_Y ;
  wire \$procmux$4222_CMP ;
  wire [31:0] \$procmux$4223_Y ;
  wire \$procmux$4224_CMP ;
  wire \$procmux$4231_Y ;
  wire \$procmux$4232_CMP ;
  wire \$procmux$4233_Y ;
  wire \$procmux$4234_CMP ;
  wire \$procmux$4235_Y ;
  wire \$procmux$4236_CMP ;
  wire \$procmux$4243_Y ;
  wire \$procmux$4244_CMP ;
  wire \$procmux$4245_Y ;
  wire \$procmux$4246_CMP ;
  wire \$procmux$4247_Y ;
  wire \$procmux$4248_CMP ;
  wire [6:0] \$procmux$4252_Y ;
  wire \$procmux$4253_CMP ;
  wire \$procmux$4254_CMP ;
  wire \$procmux$4256_CMP ;
  wire \$procmux$4257_CMP ;
  wire \$procmux$4258_CMP ;
  wire \$procmux$4259_CMP ;
  wire [6:0] \$procmux$4260_Y ;
  wire \$procmux$4261_CMP ;
  wire [6:0] \$procmux$4262_Y ;
  wire \$procmux$4263_CMP ;
  wire \$procmux$4270_Y ;
  wire \$procmux$4271_CMP ;
  wire \$procmux$4272_Y ;
  wire \$procmux$4273_CMP ;
  wire \$procmux$4274_Y ;
  wire \$procmux$4275_CMP ;
  wire \$procmux$4282_Y ;
  wire \$procmux$4283_CMP ;
  wire \$procmux$4284_Y ;
  wire \$procmux$4285_CMP ;
  wire \$procmux$4286_Y ;
  wire \$procmux$4287_CMP ;
  wire [3:0] \$procmux$4294_Y ;
  wire \$procmux$4295_CMP ;
  wire [3:0] \$procmux$4296_Y ;
  wire \$procmux$4297_CMP ;
  wire [3:0] \$procmux$4298_Y ;
  wire \$procmux$4299_CMP ;
  wire [31:0] \$procmux$4303_Y ;
  wire \$procmux$4304_CMP ;
  wire [31:0] \$procmux$4305_Y ;
  wire \$procmux$4306_CMP ;
  wire \$procmux$4310_Y ;
  wire \$procmux$4311_CMP ;
  wire \$procmux$4312_Y ;
  wire \$procmux$4313_CMP ;
  wire \$procmux$4317_Y ;
  wire \$procmux$4318_CMP ;
  wire \$procmux$4319_Y ;
  wire \$procmux$4320_CMP ;
  wire \$procmux$4324_Y ;
  wire \$procmux$4325_CMP ;
  wire \$procmux$4326_Y ;
  wire \$procmux$4327_CMP ;
  wire \$procmux$4331_Y ;
  wire \$procmux$4332_CMP ;
  wire \$procmux$4333_Y ;
  wire \$procmux$4334_CMP ;
  wire [6:0] \$procmux$4338_Y ;
  wire \$procmux$4339_CMP ;
  wire [6:0] \$procmux$4340_Y ;
  wire \$procmux$4341_CMP ;
  wire [1:0] \$procmux$4345_Y ;
  wire \$procmux$4346_CMP ;
  wire [1:0] \$procmux$4347_Y ;
  wire \$procmux$4348_CMP ;
  wire \$procmux$4352_Y ;
  wire \$procmux$4353_CMP ;
  wire \$procmux$4354_Y ;
  wire \$procmux$4355_CMP ;
  wire \$procmux$4359_Y ;
  wire \$procmux$4360_CMP ;
  wire \$procmux$4361_Y ;
  wire \$procmux$4362_CMP ;
  wire \$procmux$4366_Y ;
  wire \$procmux$4367_CMP ;
  wire \$procmux$4368_Y ;
  wire \$procmux$4369_CMP ;
  wire \$procmux$4372_Y ;
  wire \$procmux$4373_CMP ;
  wire \$procmux$4374_Y ;
  wire \$procmux$4375_CMP ;
  wire \$procmux$4378_Y ;
  wire \$procmux$4379_CMP ;
  wire \$procmux$4380_Y ;
  wire \$procmux$4381_CMP ;
  wire \$procmux$4384_Y ;
  wire \$procmux$4385_CMP ;
  wire \$procmux$4386_Y ;
  wire \$procmux$4387_CMP ;
  wire [2:0] \$procmux$4391_Y ;
  wire \$procmux$4392_CMP ;
  wire [2:0] \$procmux$4397_Y ;
  wire \$procmux$4398_CMP ;
  wire [2:0] \$procmux$4400_Y ;
  wire \$procmux$4401_CMP ;
  wire [2:0] \$procmux$4402_Y ;
  wire \$procmux$4403_CMP ;
  wire [2:0] \$procmux$4409_Y ;
  wire \$procmux$4410_CMP ;
  wire [2:0] \$procmux$4411_Y ;
  wire \$procmux$4412_CMP ;
  wire [6:0] \$procmux$4418_Y ;
  wire \$procmux$4419_CMP ;
  wire [6:0] \$procmux$4421_Y ;
  wire \$procmux$4422_CMP ;
  wire [6:0] \$procmux$4424_Y ;
  wire \$procmux$4425_CMP ;
  wire [6:0] \$procmux$4427_Y ;
  wire \$procmux$4428_CMP ;
  wire [6:0] \$procmux$4429_Y ;
  wire \$procmux$4430_CMP ;
  wire [6:0] \$procmux$4431_Y ;
  wire \$procmux$4432_CMP ;
  wire [6:0] \$procmux$4439_Y ;
  wire \$procmux$4440_CMP ;
  wire [6:0] \$procmux$4442_Y ;
  wire \$procmux$4443_CMP ;
  wire [6:0] \$procmux$4445_Y ;
  wire \$procmux$4446_CMP ;
  wire [6:0] \$procmux$4447_Y ;
  wire \$procmux$4448_CMP ;
  wire [6:0] \$procmux$4449_Y ;
  wire \$procmux$4450_CMP ;
  wire [6:0] \$procmux$4457_Y ;
  wire \$procmux$4458_CMP ;
  wire [6:0] \$procmux$4460_Y ;
  wire \$procmux$4461_CMP ;
  wire [6:0] \$procmux$4462_Y ;
  wire \$procmux$4463_CMP ;
  wire [6:0] \$procmux$4464_Y ;
  wire \$procmux$4465_CMP ;
  wire [6:0] \$procmux$4472_Y ;
  wire \$procmux$4473_CMP ;
  wire [6:0] \$procmux$4474_Y ;
  wire \$procmux$4475_CMP ;
  wire [6:0] \$procmux$4476_Y ;
  wire \$procmux$4477_CMP ;
  wire \$procmux$4483_Y ;
  wire \$procmux$4484_CMP ;
  wire \$procmux$4485_Y ;
  wire \$procmux$4486_CMP ;
  wire \$procmux$4487_Y ;
  wire \$procmux$4488_CMP ;
  wire \$procmux$4494_Y ;
  wire \$procmux$4495_CMP ;
  wire \$procmux$4496_Y ;
  wire \$procmux$4497_CMP ;
  wire \$procmux$4503_Y ;
  wire \$procmux$4504_CMP ;
  wire \$procmux$4505_Y ;
  wire \$procmux$4506_CMP ;
  wire [6:0] \$procmux$4512_Y ;
  wire \$procmux$4513_CMP ;
  wire [6:0] \$procmux$4514_Y ;
  wire \$procmux$4515_CMP ;
  wire \$procmux$4521_Y ;
  wire \$procmux$4522_CMP ;
  wire \$procmux$4523_Y ;
  wire \$procmux$4524_CMP ;
  wire \$procmux$4530_Y ;
  wire \$procmux$4531_CMP ;
  wire \$procmux$4532_Y ;
  wire \$procmux$4533_CMP ;
  wire \$procmux$4539_Y ;
  wire \$procmux$4540_CMP ;
  wire \$procmux$4542_Y ;
  wire \$procmux$4543_CMP ;
  wire \$procmux$4544_Y ;
  wire \$procmux$4545_CMP ;
  wire \$procmux$4549_Y ;
  wire \$procmux$4550_CMP ;
  wire [3:0] \$procmux$4556_Y ;
  wire \$procmux$4557_CMP ;
  wire [3:0] \$procmux$4559_Y ;
  wire \$procmux$4560_CMP ;
  wire [3:0] \$procmux$4561_Y ;
  wire \$procmux$4562_CMP ;
  wire [3:0] \$procmux$4566_Y ;
  wire \$procmux$4567_CMP ;
  wire \$procmux$4575_Y ;
  wire \$procmux$4576_CMP ;
  wire \$procmux$4577_Y ;
  wire \$procmux$4578_CMP ;
  wire \$procmux$4582_Y ;
  wire \$procmux$4583_CMP ;
  wire [3:0] \$procmux$4591_Y ;
  wire \$procmux$4592_CMP ;
  wire [3:0] \$procmux$4593_Y ;
  wire \$procmux$4594_CMP ;
  wire [3:0] \$procmux$4598_Y ;
  wire \$procmux$4599_CMP ;
  wire \$procmux$4606_Y ;
  wire \$procmux$4607_CMP ;
  wire \$procmux$4611_Y ;
  wire \$procmux$4612_CMP ;
  wire [3:0] \$procmux$4619_Y ;
  wire \$procmux$4620_CMP ;
  wire [3:0] \$procmux$4624_Y ;
  wire \$procmux$4625_CMP ;
  wire \$procmux$4631_Y ;
  wire \$procmux$4632_CMP ;
  wire \$procmux$4635_Y ;
  wire \$procmux$4636_CMP ;
  wire \$procmux$4642_Y ;
  wire \$procmux$4643_CMP ;
  wire \$procmux$4645_Y ;
  wire \$procmux$4646_CMP ;
  wire \$procmux$4652_Y ;
  wire \$procmux$4653_CMP ;
  wire \$procmux$4655_Y ;
  wire \$procmux$4656_CMP ;
  wire \$procmux$4662_Y ;
  wire \$procmux$4663_CMP ;
  wire \$procmux$4665_Y ;
  wire \$procmux$4666_CMP ;
  wire \$procmux$4672_Y ;
  wire \$procmux$4673_CMP ;
  wire \$procmux$4674_Y ;
  wire \$procmux$4675_CMP ;
  wire [3:0] \$procmux$4681_Y ;
  wire \$procmux$4682_CMP ;
  wire [3:0] \$procmux$4683_Y ;
  wire \$procmux$4684_CMP ;
  wire \$procmux$4691_Y ;
  wire \$procmux$4692_CMP ;
  wire \$procmux$4695_Y ;
  wire \$procmux$4696_CMP ;
  wire [3:0] \$procmux$4703_Y ;
  wire \$procmux$4704_CMP ;
  wire [3:0] \$procmux$4707_Y ;
  wire \$procmux$4708_CMP ;
  wire \$procmux$4715_Y ;
  wire \$procmux$4716_CMP ;
  wire \$procmux$4718_Y ;
  wire \$procmux$4719_CMP ;
  wire [3:0] \$procmux$4726_Y ;
  wire \$procmux$4727_CMP ;
  wire [3:0] \$procmux$4729_Y ;
  wire \$procmux$4730_CMP ;
  wire [3:0] \$procmux$4737_Y ;
  wire \$procmux$4738_CMP ;
  wire [3:0] \$procmux$4739_Y ;
  wire \$procmux$4740_CMP ;
  wire \$procmux$4749_Y ;
  wire \$procmux$4750_CMP ;
  wire \$procmux$4751_Y ;
  wire \$procmux$4752_CMP ;
  wire [3:0] \$procmux$4761_Y ;
  wire \$procmux$4762_CMP ;
  wire [3:0] \$procmux$4763_Y ;
  wire \$procmux$4764_CMP ;
  wire [3:0] \$procmux$4768_Y ;
  wire \$procmux$4769_CMP ;
  wire \$procmux$4771_CMP ;
  wire \$procmux$4773_CMP ;
  wire \$procmux$4775_CMP ;
  wire \$procmux$4780_CMP ;
  wire \$procmux$4784_CMP ;
  wire \$procmux$4786_CMP ;
  wire \$procmux$4787_CMP ;
  wire \$procmux$4788_CMP ;
  wire \$procmux$4790_CMP ;
  wire [3:0] \$procmux$4801_Y ;
  wire \$procmux$4802_CMP ;
  wire [3:0] \$procmux$4803_Y ;
  wire \$procmux$4804_CMP ;
  wire \$procmux$4814_Y ;
  wire \$procmux$4815_CMP ;
  wire \$procmux$4825_Y ;
  wire \$procmux$4826_CMP ;
  wire [31:0] \$procmux$4830_Y ;
  wire \$procmux$4831_CMP ;
  wire \$procmux$4835_Y ;
  wire \$procmux$4836_CMP ;
  wire \$procmux$4838_CMP ;
  wire \$procmux$4840_CMP ;
  wire \$procmux$4842_CMP ;
  wire \$procmux$4846_Y ;
  wire \$procmux$4847_CMP ;
  wire \$procmux$4851_Y ;
  wire \$procmux$4852_CMP ;
  wire \$procmux$4856_Y ;
  wire \$procmux$4857_CMP ;
  wire \$procmux$4859_CMP ;
  wire \$procmux$4864_Y ;
  wire \$procmux$4865_CMP ;
  wire \$procmux$4867_CMP ;
  wire \$procmux$4871_Y ;
  wire \$procmux$4872_CMP ;
  wire \$procmux$4874_CMP ;
  wire [2:0] \$procmux$4878_Y ;
  wire \$procmux$4879_CMP ;
  wire \$procmux$4881_CMP ;
  wire [6:0] \$procmux$4885_Y ;
  wire \$procmux$4886_CMP ;
  wire \$procmux$4888_CMP ;
  wire [1:0] \$procmux$4892_Y ;
  wire \$procmux$4893_CMP ;
  wire \$procmux$4895_CMP ;
  wire \$procmux$4897_CMP ;
  wire [2:0] \$procmux$4902_Y ;
  wire \$procmux$4903_CMP ;
  wire \$procmux$4905_CMP ;
  wire \$procmux$4907_CMP ;
  wire \$procmux$4909_CMP ;
  wire \$procmux$4914_CMP ;
  wire \$procmux$4919_Y ;
  wire \$procmux$4920_CMP ;
  wire \$procmux$4922_CMP ;
  wire \$procmux$4924_CMP ;
  wire \$procmux$4926_CMP ;
  wire \$procmux$4931_CMP ;
  wire \$procmux$4932_CMP ;
  wire \$procmux$4934_CMP ;
  wire \$procmux$4936_Y ;
  wire \$procmux$4937_CMP ;
  wire \$procmux$4938_CMP ;
  wire \$procmux$4939_CMP ;
  wire \$procmux$4940_CMP ;
  wire \$procmux$4941_CMP ;
  wire \$procmux$4942_CMP ;
  wire \$procmux$4944_CMP ;
  wire \$procmux$4955_Y ;
  wire \$procmux$4956_CMP ;
  wire \$procmux$4965_Y ;
  wire \$procmux$4966_CMP ;
  wire \$procmux$4967_CMP ;
  wire \$procmux$4971_Y ;
  wire \$procmux$4972_CMP ;
  wire \$procmux$4974_CMP ;
  wire \$procmux$4976_CMP ;
  wire \$procmux$4978_CMP ;
  wire \$procmux$4979_CMP ;
  wire \$procmux$4989_Y ;
  wire \$procmux$4990_CMP ;
  wire \$procmux$4994_Y ;
  wire \$procmux$4995_CMP ;
  wire \$procmux$5000_CMP ;
  wire \$procmux$5004_CMP ;
  wire \$procmux$5006_CMP ;
  wire \$procmux$5007_CMP ;
  wire \$procmux$5011_Y ;
  wire \$procmux$5012_CMP ;
  wire \$procmux$5014_CMP ;
  wire \$procmux$5016_CMP ;
  wire \$procmux$5020_Y ;
  wire \$procmux$5021_CMP ;
  wire \$procmux$5023_CMP ;
  wire [3:0] \$procmux$5024_Y ;
  wire \$procmux$5025_CMP ;
  wire [3:0] \$procmux$5041_Y ;
  wire \$procmux$5042_CMP ;
  wire [3:0] \$procmux$5057_Y ;
  wire \$procmux$5058_CMP ;
  wire [3:0] \$procmux$5072_Y ;
  wire \$procmux$5073_CMP ;
  wire [3:0] \$procmux$5086_Y ;
  wire \$procmux$5087_CMP ;
  wire [3:0] \$procmux$5099_Y ;
  wire \$procmux$5100_CMP ;
  wire [3:0] \$procmux$5111_Y ;
  wire \$procmux$5112_CMP ;
  wire [3:0] \$procmux$5122_Y ;
  wire \$procmux$5123_CMP ;
  wire [3:0] \$procmux$5132_Y ;
  wire \$procmux$5133_CMP ;
  wire [3:0] \$procmux$5141_Y ;
  wire \$procmux$5142_CMP ;
  wire [3:0] \$procmux$5149_Y ;
  wire \$procmux$5150_CMP ;
  wire [3:0] \$procmux$5156_Y ;
  wire \$procmux$5157_CMP ;
  wire [3:0] \$procmux$5162_Y ;
  wire \$procmux$5163_CMP ;
  wire [3:0] \$procmux$5167_Y ;
  wire \$procmux$5168_CMP ;
  wire [3:0] \$procmux$5171_Y ;
  wire \$procmux$5172_CMP ;
  wire [3:0] \$procmux$5174_Y ;
  wire \$procmux$5175_CMP ;
  wire \$procmux$5176_Y ;
  wire \$procmux$5177_CMP ;
  wire \$procmux$5179_Y ;
  wire \$procmux$5180_CMP ;
  wire \$procmux$5182_Y ;
  wire \$procmux$5183_CMP ;
  wire \$procmux$5185_Y ;
  wire \$procmux$5186_CMP ;
  wire \$procmux$5188_Y ;
  wire \$procmux$5189_CMP ;
  wire \$procmux$5191_Y ;
  wire \$procmux$5192_CMP ;
  wire \$procmux$5195_Y ;
  wire \$procmux$5196_CMP ;
  wire \$procmux$5198_Y ;
  wire \$procmux$5199_CMP ;
  wire \$procmux$5201_Y ;
  wire \$procmux$5202_CMP ;
  wire \$procmux$5204_Y ;
  wire \$procmux$5205_CMP ;
  wire \$procmux$5207_Y ;
  wire \$procmux$5208_CMP ;
  wire \$procmux$5210_Y ;
  wire \$procmux$5211_CMP ;
  wire \$procmux$5213_Y ;
  wire \$procmux$5214_CMP ;
  wire \$procmux$5216_Y ;
  wire \$procmux$5217_CMP ;
  wire \$procmux$5219_Y ;
  wire \$procmux$5220_CMP ;
  wire \$procmux$5222_Y ;
  wire \$procmux$5223_CMP ;
  wire \$procmux$5226_Y ;
  wire \$procmux$5227_CMP ;
  wire \$procmux$5229_Y ;
  wire \$procmux$5230_CMP ;
  wire \$procmux$5232_Y ;
  wire \$procmux$5233_CMP ;
  wire \$procmux$5235_Y ;
  wire \$procmux$5236_CMP ;
  wire \$procmux$5239_Y ;
  wire \$procmux$5240_CMP ;
  wire \$procmux$5242_Y ;
  wire \$procmux$5243_CMP ;
  wire \$procmux$5245_Y ;
  wire \$procmux$5246_CMP ;
  wire \$procmux$5248_Y ;
  wire \$procmux$5249_CMP ;
  wire \$procmux$5251_Y ;
  wire \$procmux$5252_CMP ;
  wire \$procmux$5254_Y ;
  wire \$procmux$5255_CMP ;
  wire \$procmux$5257_Y ;
  wire \$procmux$5258_CMP ;
  wire \$procmux$5260_Y ;
  wire \$procmux$5261_CMP ;
  wire \$procmux$5264_Y ;
  wire \$procmux$5265_CMP ;
  wire \$procmux$5267_Y ;
  wire \$procmux$5268_CMP ;
  wire \$procmux$5270_Y ;
  wire \$procmux$5271_CMP ;
  wire \$procmux$5274_Y ;
  wire \$procmux$5275_CMP ;
  wire \$procmux$5277_Y ;
  wire \$procmux$5278_CMP ;
  wire \$procmux$5280_Y ;
  wire \$procmux$5281_CMP ;
  wire \$procmux$5284_Y ;
  wire \$procmux$5285_CMP ;
  wire \$procmux$5287_Y ;
  wire \$procmux$5288_CMP ;
  wire \$procmux$5290_Y ;
  wire \$procmux$5291_CMP ;
  wire \$procmux$5293_Y ;
  wire \$procmux$5294_CMP ;
  wire \$procmux$5296_Y ;
  wire \$procmux$5297_CMP ;
  wire \$procmux$5299_Y ;
  wire \$procmux$5300_CMP ;
  wire \$procmux$5303_Y ;
  wire \$procmux$5304_CMP ;
  wire \$procmux$5306_Y ;
  wire \$procmux$5307_CMP ;
  wire \$procmux$5310_Y ;
  wire \$procmux$5311_CMP ;
  wire \$procmux$5313_Y ;
  wire \$procmux$5314_CMP ;
  wire \$procmux$5317_Y ;
  wire \$procmux$5318_CMP ;
  wire \$procmux$5320_Y ;
  wire \$procmux$5321_CMP ;
  wire \$procmux$5324_Y ;
  wire \$procmux$5325_CMP ;
  wire \$procmux$5327_Y ;
  wire \$procmux$5328_CMP ;
  wire \$procmux$5330_Y ;
  wire \$procmux$5331_CMP ;
  wire \$procmux$5333_Y ;
  wire \$procmux$5334_CMP ;
  wire \$procmux$5337_Y ;
  wire \$procmux$5338_CMP ;
  wire \$procmux$5341_Y ;
  wire \$procmux$5342_CMP ;
  wire \$procmux$5345_Y ;
  wire \$procmux$5346_CMP ;
  wire \$procmux$5349_Y ;
  wire \$procmux$5350_CMP ;
  wire \$procmux$5353_Y ;
  wire \$procmux$5354_CMP ;
  wire \$procmux$5356_Y ;
  wire \$procmux$5357_CMP ;
  /* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" */
  wire \$retain_id$150 ;
  /* src = "rtl/cve2/cve2_controller.sv:356.5-698.12" */
  wire \$retain_id$270 ;
  /* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" */
  wire \$store_err_prio$58 ;
  /* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" */
  wire \$store_err_prio$61 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$store_err_prio$65 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$store_err_prio$70 ;
  /* src = "rtl/cve2/cve2_controller.sv:233.7-245.10" */
  wire \$store_err_prio$76 ;
  /* src = "rtl/cve2/cve2_controller.sv:58.33" */
  input branch_set_i;
  wire branch_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:14.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_controller.sv:41.33" */
  output controller_run_o;
  wire controller_run_o;
  /* src = "rtl/cve2/cve2_controller.sv:63.33" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_controller.sv:87.33" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_controller.sv:85.33" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_controller.sv:150.9" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_controller.sv:27.33" */
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  /* src = "rtl/cve2/cve2_controller.sv:83.33" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:82.33" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:84.33" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:81.33" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:80.33" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_controller.sv:18.33" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_controller.sv:107.14" */
  wire [3:0] ctrl_fsm_cs;
  /* src = "rtl/cve2/cve2_controller.sv:107.27" */
  wire [3:0] ctrl_fsm_ns;
  /* src = "rtl/cve2/cve2_controller.sv:72.33" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:73.33" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_controller.sv:76.33" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_controller.sv:77.33" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_controller.sv:110.23" */
  wire debug_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:74.33" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:110.9" */
  wire debug_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:71.33" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_controller.sv:75.33" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_controller.sv:135.9" */
  wire do_single_step_d;
  /* src = "rtl/cve2/cve2_controller.sv:136.9" */
  wire do_single_step_q;
  /* src = "rtl/cve2/cve2_controller.sv:147.9" */
  wire dret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:24.33" */
  input dret_insn_i;
  wire dret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:140.9" */
  wire ebreak_into_debug;
  /* src = "rtl/cve2/cve2_controller.sv:149.9" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_controller.sv:26.33" */
  input ebrk_insn_i;
  wire ebrk_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:121.9" */
  wire ebrk_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:145.9" */
  wire ecall_insn;
  /* src = "rtl/cve2/cve2_controller.sv:22.33" */
  input ecall_insn_i;
  wire ecall_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:120.9" */
  wire ecall_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:139.9" */
  wire enter_debug_mode;
  /* src = "rtl/cve2/cve2_controller.sv:137.9" */
  wire enter_debug_mode_prio_d;
  /* src = "rtl/cve2/cve2_controller.sv:138.9" */
  wire enter_debug_mode_prio_q;
  /* src = "rtl/cve2/cve2_controller.sv:50.33" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:49.33" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:113.20" */
  wire exc_req_d;
  /* src = "rtl/cve2/cve2_controller.sv:131.9" */
  wire exc_req_lsu;
  /* src = "rtl/cve2/cve2_controller.sv:113.9" */
  wire exc_req_q;
  /* src = "rtl/cve2/cve2_controller.sv:17.33" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_controller.sv:128.9" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_controller.sv:91.33" */
  output flush_id_o;
  wire flush_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:126.9" */
  wire halt_if;
  /* src = "rtl/cve2/cve2_controller.sv:141.9" */
  wire handle_irq;
  /* src = "rtl/cve2/cve2_controller.sv:40.33" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_controller.sv:129.9" */
  wire illegal_dret;
  /* src = "rtl/cve2/cve2_controller.sv:114.25" */
  wire illegal_insn_d;
  /* src = "rtl/cve2/cve2_controller.sv:21.33" */
  input illegal_insn_i;
  wire illegal_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:119.9" */
  wire illegal_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:114.9" */
  wire illegal_insn_q;
  /* src = "rtl/cve2/cve2_controller.sv:130.9" */
  wire illegal_umode;
  /* src = "rtl/cve2/cve2_controller.sv:32.33" */
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:151.9" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_controller.sv:34.33" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:35.33" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_controller.sv:118.9" */
  wire instr_fetch_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:31.33" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_controller.sv:33.33" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:45.33" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_controller.sv:39.33" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_controller.sv:30.33" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_controller.sv:67.33" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_controller.sv:64.33" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_controller.sv:65.33" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_controller.sv:60.33" */
  input jump_set_i;
  wire jump_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:111.21" */
  wire load_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:54.33" */
  input load_err_i;
  wire load_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:123.9" */
  wire load_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:111.9" */
  wire load_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:53.33" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_controller.sv:142.15" */
  wire [3:0] mfip_id;
  /* src = "rtl/cve2/cve2_controller.sv:146.9" */
  wire mret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:23.33" */
  input mret_insn_i;
  wire mret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:109.21" */
  wire nmi_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:68.33" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:109.9" */
  wire nmi_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:36.33" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:47.33" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:46.33" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_controller.sv:94.33" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_controller.sv:96.33" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_controller.sv:86.33" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_controller.sv:127.9" */
  wire retain_id;
  /* src = "rtl/cve2/cve2_controller.sv:15.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_controller.sv:132.9" */
  wire special_req;
  /* src = "rtl/cve2/cve2_controller.sv:134.9" */
  wire special_req_flush_only;
  /* src = "rtl/cve2/cve2_controller.sv:133.9" */
  wire special_req_pc_change;
  /* src = "rtl/cve2/cve2_controller.sv:125.9" */
  wire stall;
  /* src = "rtl/cve2/cve2_controller.sv:90.33" */
  input stall_id_i;
  wire stall_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:112.22" */
  wire store_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:55.33" */
  input store_err_i;
  wire store_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:122.9" */
  wire store_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:112.9" */
  wire store_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:78.33" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_controller.sv:143.15" */
  wire unused_irq_timer;
  /* src = "rtl/cve2/cve2_controller.sv:148.9" */
  wire wfi_insn;
  /* src = "rtl/cve2/cve2_controller.sv:25.33" */
  input wfi_insn_i;
  wire wfi_insn_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ecall_insn_i),
    .B(instr_valid_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(csr_pipe_flush_i),
    .B(instr_valid_i),
    .Y(\$11 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(\$auto$rtlil.cc:3092:Mux$1604 ),
    .B(debug_ebreakm_i),
    .S(\$99 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1605 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(debug_mode_q),
    .Y(\$102 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(nmi_mode_q),
    .Y(\$104 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$102 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(irq_pending_i),
    .B(csr_mstatus_mie_i),
    .Y(\$108 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(irq_nm_i),
    .B(\$108 ),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(\$106 ),
    .B(\$110 ),
    .Y(\$112 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_fetch_err_i),
    .B(instr_valid_i),
    .Y(\$13 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(irq_nm_i),
    .B(irq_pending_i),
    .Y(\$135 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$135 ),
    .B(debug_req_i),
    .Y(\$137 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(\$137 ),
    .B(debug_mode_q),
    .Y(\$139 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(debug_mode_q),
    .Y(\$15 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(\$139 ),
    .B(debug_single_step_i),
    .Y(\$141 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(branch_set_i),
    .B(jump_set_i),
    .Y(\$152 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(enter_debug_mode),
    .B(handle_irq),
    .Y(\$157 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(stall),
    .B(instr_valid_i),
    .Y(\$159 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(dret_insn),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\$157 ),
    .B(\$159 ),
    .Y(\$161 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(stall),
    .Y(\$164 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(special_req),
    .Y(\$166 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(\$164 ),
    .B(\$166 ),
    .Y(\$168 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(instr_valid_i),
    .Y(\$170 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$171  (
    .A(\$168 ),
    .B(\$170 ),
    .Y(\$172 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$179  (
    .A(nmi_mode_q),
    .Y(\$180 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$19 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(irq_nm_i),
    .B(\$180 ),
    .Y(\$182 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(irqs_i[15:0]),
    .Y(\$184 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(debug_mode_q),
    .Y(\$198 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(ebreak_into_debug),
    .B(\$198 ),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mret_insn_i),
    .B(instr_valid_i),
    .Y(\$3 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(csr_mstatus_tw_i),
    .B(wfi_insn),
    .Y(\$21 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(exc_req_q),
    .B(store_err_q),
    .Y(\$206 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(\$206 ),
    .B(load_err_q),
    .Y(\$208 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$209  (
    .A(2'h0),
    .B(2'h3),
    .S(debug_mode_q),
    .Y(\$auto$rtlil.cc:3092:Mux$1606 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$210  (
    .A(pc_id_i),
    .B(32'd2),
    .Y(\$211 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$212  (
    .A(pc_id_i),
    .B(\$211 ),
    .S(instr_fetch_err_plus2_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1607 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$213  (
    .A(instr_i),
    .B({ 16'h0000, instr_compressed_i }),
    .S(instr_is_compressed_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1608 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$215 )
  );
  \$mux  #(
    .WIDTH(32'd7)
  ) \$216  (
    .A(7'h08),
    .B(7'h0b),
    .S(\$215 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1609 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(debug_mode_q),
    .B(ebreak_into_debug),
    .Y(\$218 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(mret_insn),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$19 ),
    .B(\$23 ),
    .Y(\$25 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(ebrk_insn_prio),
    .B(ebreak_into_debug),
    .Y(\$260 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(illegal_insn_i),
    .B(illegal_dret),
    .Y(\$27 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(\$260 ),
    .Y(\$262 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(enter_debug_mode_prio_q),
    .B(\$262 ),
    .Y(\$264 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$27 ),
    .B(illegal_umode),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$289  (
    .A(stall),
    .Y(\$290 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$291  (
    .A(halt_if),
    .Y(\$292 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$293  (
    .A(\$290 ),
    .B(\$292 ),
    .Y(\$294 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$295  (
    .A(retain_id),
    .Y(\$296 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\$294 ),
    .B(\$296 ),
    .Y(\$298 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(stall),
    .B(retain_id),
    .Y(\$300 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$301  (
    .A(\$300 ),
    .Y(\$302 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$303  (
    .A(\$302 ),
    .B(flush_id),
    .Y(\$304 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1610 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$29 ),
    .B(\$31 ),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(ecall_insn),
    .B(ebrk_insn),
    .Y(\$35 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$35 ),
    .B(illegal_insn_d),
    .Y(\$37 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$37 ),
    .B(instr_fetch_err),
    .Y(\$39 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(dret_insn_i),
    .B(instr_valid_i),
    .Y(\$5 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$39 ),
    .B(\$41 ),
    .Y(\$43 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(store_err_i),
    .B(load_err_i),
    .Y(\$45 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(wfi_insn),
    .B(csr_pipe_flush),
    .Y(\$47 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(mret_insn),
    .B(dret_insn),
    .Y(\$49 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49 ),
    .B(exc_req_d),
    .Y(\$51 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\$51 ),
    .B(exc_req_lsu),
    .Y(\$53 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(special_req_pc_change),
    .B(special_req_flush_only),
    .Y(\$55 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(wfi_insn_i),
    .B(instr_valid_i),
    .Y(\$7 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(debug_mode_q),
    .Y(\$79 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(ebrk_insn_i),
    .B(instr_valid_i),
    .Y(\$9 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$79 ),
    .B(debug_single_step_i),
    .Y(\$81 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(do_single_step_q),
    .B(\$81 ),
    .S(instr_valid_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1603 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(debug_req_i),
    .B(do_single_step_d),
    .Y(\$84 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(debug_mode_q),
    .Y(\$86 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\$84 ),
    .B(\$86 ),
    .Y(\$88 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(debug_mode_q),
    .Y(\$90 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(trigger_match_i),
    .B(\$90 ),
    .Y(\$92 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(enter_debug_mode_prio_d),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(priv_mode_i),
    .Y(\$96 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$97  (
    .A(1'h0),
    .B(debug_ebreaku_i),
    .S(\$96 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1604 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$99 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$ctrl_fsm_cs  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ctrl_fsm_ns),
    .Q(ctrl_fsm_cs)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$debug_mode_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(debug_mode_d),
    .Q(debug_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$do_single_step_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(do_single_step_d),
    .Q(do_single_step_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$enter_debug_mode_prio_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(enter_debug_mode_prio_d),
    .Q(enter_debug_mode_prio_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$exc_req_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(exc_req_d),
    .Q(exc_req_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$illegal_insn_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(illegal_insn_d),
    .Q(illegal_insn_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$load_err_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(load_err_d),
    .Q(load_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$nmi_mode_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(nmi_mode_d),
    .Q(nmi_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$store_err_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(store_err_d),
    .Q(store_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:690.11-690.38|rtl/cve2/cve2_controller.sv:689.9-691.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3943  (
    .A(\$ctrl_fsm_ns$246 ),
    .B(4'h8),
    .S(\$procmux$3944_CMP ),
    .Y(\$procmux$3943_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3946  (
    .A(4'hx),
    .B(\$procmux$3943_Y ),
    .S(\$procmux$3947_CMP ),
    .Y(\$procmux$3946_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3947_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$3947_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:671.13-671.48|rtl/cve2/cve2_controller.sv:670.20-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3949  (
    .A(4'h5),
    .B(4'h2),
    .S(\$procmux$3950_CMP ),
    .Y(\$procmux$3949_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3952  (
    .A(\$procmux$3949_Y ),
    .B(4'hx),
    .S(\$procmux$3953_CMP ),
    .Y(\$procmux$3952_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3955  (
    .A(\$procmux$3952_Y ),
    .B(4'hx),
    .S(\$procmux$3956_CMP ),
    .Y(\$procmux$3955_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3958  (
    .A(\$procmux$3955_Y ),
    .B(4'hx),
    .S(\$procmux$3959_CMP ),
    .Y(\$procmux$3958_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3960  (
    .A(4'hx),
    .B(\$procmux$3958_Y ),
    .S(\$procmux$3961_CMP ),
    .Y(\$procmux$3960_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3961_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$3961_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3964  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$3965_CMP ),
    .Y(\$procmux$3964_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3967  (
    .A(\$procmux$3964_Y ),
    .B(1'hx),
    .S(\$procmux$3968_CMP ),
    .Y(\$procmux$3967_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3970  (
    .A(\$procmux$3967_Y ),
    .B(1'hx),
    .S(\$procmux$3971_CMP ),
    .Y(\$procmux$3970_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3972  (
    .A(1'hx),
    .B(\$procmux$3970_Y ),
    .S(\$procmux$3973_CMP ),
    .Y(\$procmux$3972_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3973_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$3973_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3976  (
    .A(3'h0),
    .B(3'h4),
    .S(\$procmux$3977_CMP ),
    .Y(\$procmux$3976_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3979  (
    .A(\$procmux$3976_Y ),
    .B(3'hx),
    .S(\$procmux$3980_CMP ),
    .Y(\$procmux$3979_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3982  (
    .A(\$procmux$3979_Y ),
    .B(3'hx),
    .S(\$procmux$3983_CMP ),
    .Y(\$procmux$3982_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3984  (
    .A(3'hx),
    .B(\$procmux$3982_Y ),
    .S(\$procmux$3985_CMP ),
    .Y(\$procmux$3984_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3985_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$3985_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3988  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$3989_CMP ),
    .Y(\$procmux$3988_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3991  (
    .A(\$procmux$3988_Y ),
    .B(1'hx),
    .S(\$procmux$3992_CMP ),
    .Y(\$procmux$3991_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3994  (
    .A(\$procmux$3991_Y ),
    .B(1'hx),
    .S(\$procmux$3995_CMP ),
    .Y(\$procmux$3994_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3996  (
    .A(1'hx),
    .B(\$procmux$3994_Y ),
    .S(\$procmux$3997_CMP ),
    .Y(\$procmux$3996_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3997_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$3997_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4000  (
    .A(debug_mode_q),
    .B(1'h0),
    .S(\$procmux$4001_CMP ),
    .Y(\$procmux$4000_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4003  (
    .A(\$procmux$4000_Y ),
    .B(1'hx),
    .S(\$procmux$4004_CMP ),
    .Y(\$procmux$4003_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4006  (
    .A(\$procmux$4003_Y ),
    .B(1'hx),
    .S(\$procmux$4007_CMP ),
    .Y(\$procmux$4006_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4008  (
    .A(1'hx),
    .B(\$procmux$4006_Y ),
    .S(\$procmux$4009_CMP ),
    .Y(\$procmux$4008_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4009_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4009_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4013  (
    .A(\$ctrl_fsm_ns$233 ),
    .B(4'h5),
    .S(\$procmux$4014_CMP ),
    .Y(\$procmux$4013_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4016  (
    .A(\$procmux$4013_Y ),
    .B(4'hx),
    .S(\$procmux$4017_CMP ),
    .Y(\$procmux$4016_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4019  (
    .A(\$procmux$4016_Y ),
    .B(4'hx),
    .S(\$procmux$4020_CMP ),
    .Y(\$procmux$4019_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4021  (
    .A(4'hx),
    .B(\$procmux$4019_Y ),
    .S(\$procmux$4022_CMP ),
    .Y(\$procmux$4021_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4022_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4022_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4027  (
    .A(\$pc_mux_o$237 ),
    .B(3'h3),
    .S(\$procmux$4028_CMP ),
    .Y(\$procmux$4027_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4030  (
    .A(\$procmux$4027_Y ),
    .B(3'hx),
    .S(\$procmux$4031_CMP ),
    .Y(\$procmux$4030_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4032  (
    .A(3'hx),
    .B(\$procmux$4030_Y ),
    .S(\$procmux$4033_CMP ),
    .Y(\$procmux$4032_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4033_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4033_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4038  (
    .A(\$pc_set_o$236 ),
    .B(1'h1),
    .S(\$procmux$4039_CMP ),
    .Y(\$procmux$4038_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4041  (
    .A(\$procmux$4038_Y ),
    .B(1'hx),
    .S(\$procmux$4042_CMP ),
    .Y(\$procmux$4041_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4043  (
    .A(1'hx),
    .B(\$procmux$4041_Y ),
    .S(\$procmux$4044_CMP ),
    .Y(\$procmux$4043_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4044_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4044_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:663.15-663.42|rtl/cve2/cve2_controller.sv:662.13-664.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4047  (
    .A(nmi_mode_q),
    .B(1'h0),
    .S(\$procmux$4048_CMP ),
    .Y(\$procmux$4047_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4049  (
    .A(1'hx),
    .B(\$procmux$4047_Y ),
    .S(\$procmux$4050_CMP ),
    .Y(\$procmux$4049_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4052  (
    .A(\$procmux$4049_Y ),
    .B(1'hx),
    .S(\$procmux$4053_CMP ),
    .Y(\$procmux$4052_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4054  (
    .A(1'hx),
    .B(\$procmux$4052_Y ),
    .S(\$procmux$4055_CMP ),
    .Y(\$procmux$4054_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4055_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4055_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4059  (
    .A(\$csr_restore_dret_id_o$238 ),
    .B(1'h0),
    .S(\$procmux$4060_CMP ),
    .Y(\$procmux$4059_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4062  (
    .A(\$procmux$4059_Y ),
    .B(1'hx),
    .S(\$procmux$4063_CMP ),
    .Y(\$procmux$4062_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4064  (
    .A(1'hx),
    .B(\$procmux$4062_Y ),
    .S(\$procmux$4065_CMP ),
    .Y(\$procmux$4064_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4065_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4065_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4069  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4070_CMP ),
    .Y(\$procmux$4069_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4072  (
    .A(\$procmux$4069_Y ),
    .B(1'hx),
    .S(\$procmux$4073_CMP ),
    .Y(\$procmux$4072_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4074  (
    .A(1'hx),
    .B(\$procmux$4072_Y ),
    .S(\$procmux$4075_CMP ),
    .Y(\$procmux$4074_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4075_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4075_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4079  (
    .A(\$debug_mode_d$235 ),
    .B(debug_mode_q),
    .S(\$procmux$4080_CMP ),
    .Y(\$procmux$4079_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4082  (
    .A(\$procmux$4079_Y ),
    .B(1'hx),
    .S(\$procmux$4083_CMP ),
    .Y(\$procmux$4082_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4084  (
    .A(1'hx),
    .B(\$procmux$4082_Y ),
    .S(\$procmux$4085_CMP ),
    .Y(\$procmux$4084_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4085_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4085_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4089  (
    .A(nmi_mode_q),
    .B(\$nmi_mode_d$232 ),
    .S(\$procmux$4090_CMP ),
    .Y(\$procmux$4089_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4092  (
    .A(\$procmux$4089_Y ),
    .B(1'hx),
    .S(\$procmux$4093_CMP ),
    .Y(\$procmux$4092_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4094  (
    .A(1'hx),
    .B(\$procmux$4092_Y ),
    .S(\$procmux$4095_CMP ),
    .Y(\$procmux$4094_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4095_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4095_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4099  (
    .A(\$ctrl_fsm_ns$234 ),
    .B(4'h5),
    .S(\$procmux$4100_CMP ),
    .Y(\$procmux$4099_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4102  (
    .A(\$procmux$4099_Y ),
    .B(4'hx),
    .S(\$procmux$4103_CMP ),
    .Y(\$procmux$4102_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4104  (
    .A(4'hx),
    .B(\$procmux$4102_Y ),
    .S(\$procmux$4105_CMP ),
    .Y(\$procmux$4104_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4105_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4105_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4110  (
    .A(\$pc_mux_o$243 ),
    .B(3'h2),
    .S(\$procmux$4111_CMP ),
    .Y(\$procmux$4110_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4112  (
    .A(3'hx),
    .B(\$procmux$4110_Y ),
    .S(\$procmux$4113_CMP ),
    .Y(\$procmux$4112_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4113_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4113_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4118  (
    .A(\$pc_set_o$242 ),
    .B(\$pc_set_o$227 ),
    .S(\$procmux$4119_CMP ),
    .Y(\$procmux$4118_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4120  (
    .A(1'hx),
    .B(\$procmux$4118_Y ),
    .S(\$procmux$4121_CMP ),
    .Y(\$procmux$4120_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4121_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4121_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4126  (
    .A(\$ctrl_fsm_ns$239 ),
    .B(\$ctrl_fsm_ns$225 ),
    .S(\$procmux$4127_CMP ),
    .Y(\$procmux$4126_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4128  (
    .A(4'hx),
    .B(\$procmux$4126_Y ),
    .S(\$procmux$4129_CMP ),
    .Y(\$procmux$4128_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4129_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4129_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4136  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$4137_CMP ),
    .Y(\$procmux$4136_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4138  (
    .A(1'hx),
    .B(\$procmux$4136_Y ),
    .S(\$procmux$4139_CMP ),
    .Y(\$procmux$4138_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4140  (
    .A(1'hx),
    .B(\$procmux$4138_Y ),
    .S(\$procmux$4141_CMP ),
    .Y(\$procmux$4140_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4142  (
    .A(1'hx),
    .B(\$procmux$4140_Y ),
    .S(\$procmux$4143_CMP ),
    .Y(\$procmux$4142_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4143_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4143_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4151  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$4152_CMP ),
    .Y(\$procmux$4151_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4153  (
    .A(1'hx),
    .B(\$procmux$4151_Y ),
    .S(\$procmux$4154_CMP ),
    .Y(\$procmux$4153_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4155  (
    .A(1'hx),
    .B(\$procmux$4153_Y ),
    .S(\$procmux$4156_CMP ),
    .Y(\$procmux$4155_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4156_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4156_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4163  (
    .A(7'h03),
    .B(7'h00),
    .S(\$procmux$4164_CMP ),
    .Y(\$procmux$4163_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4165  (
    .A(7'hxx),
    .B(\$procmux$4163_Y ),
    .S(\$procmux$4166_CMP ),
    .Y(\$procmux$4165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4167  (
    .A(7'hxx),
    .B(\$procmux$4165_Y ),
    .S(\$procmux$4168_CMP ),
    .Y(\$procmux$4167_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4169  (
    .A(7'hxx),
    .B(\$procmux$4167_Y ),
    .S(\$procmux$4170_CMP ),
    .Y(\$procmux$4169_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4170_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4170_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4177  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$4178_CMP ),
    .Y(\$procmux$4177_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4179  (
    .A(1'hx),
    .B(\$procmux$4177_Y ),
    .S(\$procmux$4180_CMP ),
    .Y(\$procmux$4179_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4181  (
    .A(1'hx),
    .B(\$procmux$4179_Y ),
    .S(\$procmux$4182_CMP ),
    .Y(\$procmux$4181_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4183  (
    .A(1'hx),
    .B(\$procmux$4181_Y ),
    .S(\$procmux$4184_CMP ),
    .Y(\$procmux$4183_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4184_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4184_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4191  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$4192_CMP ),
    .Y(\$procmux$4191_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4193  (
    .A(1'hx),
    .B(\$procmux$4191_Y ),
    .S(\$procmux$4194_CMP ),
    .Y(\$procmux$4193_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4195  (
    .A(1'hx),
    .B(\$procmux$4193_Y ),
    .S(\$procmux$4196_CMP ),
    .Y(\$procmux$4195_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4197  (
    .A(1'hx),
    .B(\$procmux$4195_Y ),
    .S(\$procmux$4198_CMP ),
    .Y(\$procmux$4197_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4198_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4198_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4205  (
    .A(4'h5),
    .B(4'h9),
    .S(\$procmux$4206_CMP ),
    .Y(\$procmux$4205_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4207  (
    .A(4'hx),
    .B(\$procmux$4205_Y ),
    .S(\$procmux$4208_CMP ),
    .Y(\$procmux$4207_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4209  (
    .A(4'hx),
    .B(\$procmux$4207_Y ),
    .S(\$procmux$4210_CMP ),
    .Y(\$procmux$4209_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4211  (
    .A(4'hx),
    .B(\$procmux$4209_Y ),
    .S(\$procmux$4212_CMP ),
    .Y(\$procmux$4211_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4212_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4212_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$4216  (
    .A(32'd0),
    .B({ \$auto$rtlil.cc:3092:Mux$1607 , \$auto$rtlil.cc:3092:Mux$1608 , lsu_addr_last_i, lsu_addr_last_i }),
    .S({ \$procmux$4220_CMP , \$procmux$4219_CMP , \$procmux$4218_CMP , \$procmux$4217_CMP  }),
    .Y(\$procmux$4216_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4221  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$4216_Y ),
    .S(\$procmux$4222_CMP ),
    .Y(\$procmux$4221_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4223  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$4221_Y ),
    .S(\$procmux$4224_CMP ),
    .Y(\$procmux$4223_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4224_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4224_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4231  (
    .A(1'h1),
    .B(\$csr_save_cause_o$224 ),
    .S(\$procmux$4232_CMP ),
    .Y(\$procmux$4231_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4233  (
    .A(1'hx),
    .B(\$procmux$4231_Y ),
    .S(\$procmux$4234_CMP ),
    .Y(\$procmux$4233_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4235  (
    .A(1'hx),
    .B(\$procmux$4233_Y ),
    .S(\$procmux$4236_CMP ),
    .Y(\$procmux$4235_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4236_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4236_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4243  (
    .A(1'h0),
    .B(\$csr_save_id_o$223 ),
    .S(\$procmux$4244_CMP ),
    .Y(\$procmux$4243_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4245  (
    .A(1'hx),
    .B(\$procmux$4243_Y ),
    .S(\$procmux$4246_CMP ),
    .Y(\$procmux$4245_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4247  (
    .A(1'hx),
    .B(\$procmux$4245_Y ),
    .S(\$procmux$4248_CMP ),
    .Y(\$procmux$4247_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4248_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4248_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd7)
  ) \$procmux$4252  (
    .A(7'h00),
    .B({ 14'h0082, \$auto$rtlil.cc:3092:Mux$1609 , \$exc_cause_o$222 , 14'h0385 }),
    .S({ \$procmux$4259_CMP , \$procmux$4258_CMP , \$procmux$4257_CMP , \$procmux$4256_CMP , \$procmux$4254_CMP , \$procmux$4253_CMP  }),
    .Y(\$procmux$4252_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4260  (
    .A(7'hxx),
    .B(\$procmux$4252_Y ),
    .S(\$procmux$4261_CMP ),
    .Y(\$procmux$4260_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4262  (
    .A(7'hxx),
    .B(\$procmux$4260_Y ),
    .S(\$procmux$4263_CMP ),
    .Y(\$procmux$4262_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4263_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4263_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4270  (
    .A(1'h1),
    .B(\$pc_set_o$221 ),
    .S(\$procmux$4271_CMP ),
    .Y(\$procmux$4270_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4272  (
    .A(1'hx),
    .B(\$procmux$4270_Y ),
    .S(\$procmux$4273_CMP ),
    .Y(\$procmux$4272_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4274  (
    .A(1'hx),
    .B(\$procmux$4272_Y ),
    .S(\$procmux$4275_CMP ),
    .Y(\$procmux$4274_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4275_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4275_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4282  (
    .A(1'h1),
    .B(\$flush_id$220 ),
    .S(\$procmux$4283_CMP ),
    .Y(\$procmux$4282_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4284  (
    .A(1'hx),
    .B(\$procmux$4282_Y ),
    .S(\$procmux$4285_CMP ),
    .Y(\$procmux$4284_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4286  (
    .A(1'hx),
    .B(\$procmux$4284_Y ),
    .S(\$procmux$4287_CMP ),
    .Y(\$procmux$4286_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4287_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4287_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4294  (
    .A(4'h5),
    .B(\$ctrl_fsm_ns$219 ),
    .S(\$procmux$4295_CMP ),
    .Y(\$procmux$4294_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4296  (
    .A(4'hx),
    .B(\$procmux$4294_Y ),
    .S(\$procmux$4297_CMP ),
    .Y(\$procmux$4296_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4298  (
    .A(4'hx),
    .B(\$procmux$4296_Y ),
    .S(\$procmux$4299_CMP ),
    .Y(\$procmux$4298_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4299_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4299_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4303  (
    .A(32'd0),
    .B(\$csr_mtval_o$231 ),
    .S(\$procmux$4304_CMP ),
    .Y(\$procmux$4303_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4305  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$4303_Y ),
    .S(\$procmux$4306_CMP ),
    .Y(\$procmux$4305_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4306_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4306_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4310  (
    .A(1'h0),
    .B(\$csr_save_cause_o$230 ),
    .S(\$procmux$4311_CMP ),
    .Y(\$procmux$4310_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4312  (
    .A(1'hx),
    .B(\$procmux$4310_Y ),
    .S(\$procmux$4313_CMP ),
    .Y(\$procmux$4312_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4313_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4313_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4317  (
    .A(\$csr_restore_dret_id_o$245 ),
    .B(1'h0),
    .S(\$procmux$4318_CMP ),
    .Y(\$procmux$4317_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4319  (
    .A(1'hx),
    .B(\$procmux$4317_Y ),
    .S(\$procmux$4320_CMP ),
    .Y(\$procmux$4319_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4320_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4320_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4324  (
    .A(\$csr_restore_mret_id_o$244 ),
    .B(1'h0),
    .S(\$procmux$4325_CMP ),
    .Y(\$procmux$4324_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4326  (
    .A(1'hx),
    .B(\$procmux$4324_Y ),
    .S(\$procmux$4327_CMP ),
    .Y(\$procmux$4326_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4327_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4327_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4331  (
    .A(1'h0),
    .B(\$csr_save_id_o$229 ),
    .S(\$procmux$4332_CMP ),
    .Y(\$procmux$4331_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4333  (
    .A(1'hx),
    .B(\$procmux$4331_Y ),
    .S(\$procmux$4334_CMP ),
    .Y(\$procmux$4333_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4334_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4334_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4338  (
    .A(7'h00),
    .B(\$exc_cause_o$228 ),
    .S(\$procmux$4339_CMP ),
    .Y(\$procmux$4338_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4340  (
    .A(7'hxx),
    .B(\$procmux$4338_Y ),
    .S(\$procmux$4341_CMP ),
    .Y(\$procmux$4340_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4341_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4341_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4345  (
    .A(2'h1),
    .B(\$auto$rtlil.cc:3092:Mux$1606 ),
    .S(\$procmux$4346_CMP ),
    .Y(\$procmux$4345_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4347  (
    .A(2'hx),
    .B(\$procmux$4345_Y ),
    .S(\$procmux$4348_CMP ),
    .Y(\$procmux$4347_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4348_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4348_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4352  (
    .A(1'h1),
    .B(\$flush_id$226 ),
    .S(\$procmux$4353_CMP ),
    .Y(\$procmux$4352_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4354  (
    .A(1'hx),
    .B(\$procmux$4352_Y ),
    .S(\$procmux$4355_CMP ),
    .Y(\$procmux$4354_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4355_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4355_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4359  (
    .A(\$debug_mode_d$241 ),
    .B(debug_mode_q),
    .S(\$procmux$4360_CMP ),
    .Y(\$procmux$4359_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4361  (
    .A(1'hx),
    .B(\$procmux$4359_Y ),
    .S(\$procmux$4362_CMP ),
    .Y(\$procmux$4361_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4362_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4362_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4366  (
    .A(\$nmi_mode_d$240 ),
    .B(nmi_mode_q),
    .S(\$procmux$4367_CMP ),
    .Y(\$procmux$4366_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4368  (
    .A(1'hx),
    .B(\$procmux$4366_Y ),
    .S(\$procmux$4369_CMP ),
    .Y(\$procmux$4368_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4369_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4369_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:560.49-569.12|rtl/cve2/cve2_controller.sv:560.9-569.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4372  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4373_CMP ),
    .Y(\$procmux$4372_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4374  (
    .A(1'hx),
    .B(\$procmux$4372_Y ),
    .S(\$procmux$4375_CMP ),
    .Y(\$procmux$4374_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4375_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4375_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:560.49-569.12|rtl/cve2/cve2_controller.sv:560.9-569.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4378  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4379_CMP ),
    .Y(\$procmux$4378_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4380  (
    .A(1'hx),
    .B(\$procmux$4378_Y ),
    .S(\$procmux$4381_CMP ),
    .Y(\$procmux$4380_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4381_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4381_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:560.49-569.12|rtl/cve2/cve2_controller.sv:560.9-569.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4384  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4385_CMP ),
    .Y(\$procmux$4384_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4386  (
    .A(1'hx),
    .B(\$procmux$4384_Y ),
    .S(\$procmux$4387_CMP ),
    .Y(\$procmux$4386_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4387_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4387_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4391  (
    .A(3'hx),
    .B(3'h1),
    .S(\$procmux$4392_CMP ),
    .Y(\$procmux$4391_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4392_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4392_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:535.11-535.45|rtl/cve2/cve2_controller.sv:534.18-538.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4397  (
    .A(3'h4),
    .B(3'h3),
    .S(\$procmux$4398_CMP ),
    .Y(\$procmux$4397_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4400  (
    .A(\$procmux$4397_Y ),
    .B(3'hx),
    .S(\$procmux$4401_CMP ),
    .Y(\$procmux$4400_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4402  (
    .A(3'hx),
    .B(\$procmux$4400_Y ),
    .S(\$procmux$4403_CMP ),
    .Y(\$procmux$4402_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4403_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4403_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4409  (
    .A(\$debug_cause_o$195 ),
    .B(3'h2),
    .S(\$procmux$4410_CMP ),
    .Y(\$procmux$4409_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4411  (
    .A(3'hx),
    .B(\$procmux$4409_Y ),
    .S(\$procmux$4412_CMP ),
    .Y(\$procmux$4411_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4412_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4412_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:510.13-510.52|rtl/cve2/cve2_controller.sv:509.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4418  (
    .A(7'h47),
    .B(7'h43),
    .S(\$procmux$4419_CMP ),
    .Y(\$procmux$4418_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4421  (
    .A(\$procmux$4418_Y ),
    .B(7'hxx),
    .S(\$procmux$4422_CMP ),
    .Y(\$procmux$4421_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4424  (
    .A(\$procmux$4421_Y ),
    .B(7'hxx),
    .S(\$procmux$4425_CMP ),
    .Y(\$procmux$4424_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4427  (
    .A(\$procmux$4424_Y ),
    .B(7'hxx),
    .S(\$procmux$4428_CMP ),
    .Y(\$procmux$4427_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4429  (
    .A(7'hxx),
    .B(\$procmux$4427_Y ),
    .S(\$procmux$4430_CMP ),
    .Y(\$procmux$4429_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4431  (
    .A(7'hxx),
    .B(\$procmux$4429_Y ),
    .S(\$procmux$4432_CMP ),
    .Y(\$procmux$4431_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4432_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4432_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4439  (
    .A(\$exc_cause_o$185 ),
    .B(7'h4b),
    .S(\$procmux$4440_CMP ),
    .Y(\$procmux$4439_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4442  (
    .A(\$procmux$4439_Y ),
    .B(7'hxx),
    .S(\$procmux$4443_CMP ),
    .Y(\$procmux$4442_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4445  (
    .A(\$procmux$4442_Y ),
    .B(7'hxx),
    .S(\$procmux$4446_CMP ),
    .Y(\$procmux$4445_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4447  (
    .A(7'hxx),
    .B(\$procmux$4445_Y ),
    .S(\$procmux$4448_CMP ),
    .Y(\$procmux$4447_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4449  (
    .A(7'hxx),
    .B(\$procmux$4447_Y ),
    .S(\$procmux$4450_CMP ),
    .Y(\$procmux$4449_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4450_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4450_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4457  (
    .A(\$exc_cause_o$186 ),
    .B({ 3'h5, \$mfip_id$129  }),
    .S(\$procmux$4458_CMP ),
    .Y(\$procmux$4457_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4460  (
    .A(\$procmux$4457_Y ),
    .B(7'hxx),
    .S(\$procmux$4461_CMP ),
    .Y(\$procmux$4460_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4462  (
    .A(7'hxx),
    .B(\$procmux$4460_Y ),
    .S(\$procmux$4463_CMP ),
    .Y(\$procmux$4462_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4464  (
    .A(7'hxx),
    .B(\$procmux$4462_Y ),
    .S(\$procmux$4465_CMP ),
    .Y(\$procmux$4464_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4465_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4472  (
    .A(\$exc_cause_o$187 ),
    .B(7'h60),
    .S(\$procmux$4473_CMP ),
    .Y(\$procmux$4472_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4474  (
    .A(7'hxx),
    .B(\$procmux$4472_Y ),
    .S(\$procmux$4475_CMP ),
    .Y(\$procmux$4474_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4476  (
    .A(7'hxx),
    .B(\$procmux$4474_Y ),
    .S(\$procmux$4477_CMP ),
    .Y(\$procmux$4476_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4477_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4477_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4483  (
    .A(nmi_mode_q),
    .B(1'h1),
    .S(\$procmux$4484_CMP ),
    .Y(\$procmux$4483_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4485  (
    .A(1'hx),
    .B(\$procmux$4483_Y ),
    .S(\$procmux$4486_CMP ),
    .Y(\$procmux$4485_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4487  (
    .A(1'hx),
    .B(\$procmux$4485_Y ),
    .S(\$procmux$4488_CMP ),
    .Y(\$procmux$4487_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4488_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4488_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4494  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4495_CMP ),
    .Y(\$procmux$4494_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4496  (
    .A(1'hx),
    .B(\$procmux$4494_Y ),
    .S(\$procmux$4497_CMP ),
    .Y(\$procmux$4496_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4497_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4497_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4503  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4504_CMP ),
    .Y(\$procmux$4503_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4505  (
    .A(1'hx),
    .B(\$procmux$4503_Y ),
    .S(\$procmux$4506_CMP ),
    .Y(\$procmux$4505_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4506_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4506_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4512  (
    .A(7'h00),
    .B(\$exc_cause_o$189 ),
    .S(\$procmux$4513_CMP ),
    .Y(\$procmux$4512_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4514  (
    .A(7'hxx),
    .B(\$procmux$4512_Y ),
    .S(\$procmux$4515_CMP ),
    .Y(\$procmux$4514_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4515_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4515_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4521  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4522_CMP ),
    .Y(\$procmux$4521_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4523  (
    .A(1'hx),
    .B(\$procmux$4521_Y ),
    .S(\$procmux$4524_CMP ),
    .Y(\$procmux$4523_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4524_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4524_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4530  (
    .A(nmi_mode_q),
    .B(\$nmi_mode_d$188 ),
    .S(\$procmux$4531_CMP ),
    .Y(\$procmux$4530_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4532  (
    .A(1'hx),
    .B(\$procmux$4530_Y ),
    .S(\$procmux$4533_CMP ),
    .Y(\$procmux$4532_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4533_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4533_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4539  (
    .A(\$halt_if$162 ),
    .B(1'h1),
    .S(\$procmux$4540_CMP ),
    .Y(\$procmux$4539_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4542  (
    .A(\$procmux$4539_Y ),
    .B(1'hx),
    .S(\$procmux$4543_CMP ),
    .Y(\$procmux$4542_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4544  (
    .A(1'hx),
    .B(\$procmux$4542_Y ),
    .S(\$procmux$4545_CMP ),
    .Y(\$procmux$4544_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4549  (
    .A(1'hx),
    .B(\$procmux$4544_Y ),
    .S(\$procmux$4550_CMP ),
    .Y(\$procmux$4549_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4550_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4550_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4556  (
    .A(\$ctrl_fsm_ns$149 ),
    .B(4'h7),
    .S(\$procmux$4557_CMP ),
    .Y(\$procmux$4556_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4559  (
    .A(\$procmux$4556_Y ),
    .B(4'hx),
    .S(\$procmux$4560_CMP ),
    .Y(\$procmux$4559_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4561  (
    .A(4'hx),
    .B(\$procmux$4559_Y ),
    .S(\$procmux$4562_CMP ),
    .Y(\$procmux$4561_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4566  (
    .A(4'hx),
    .B(\$procmux$4561_Y ),
    .S(\$procmux$4567_CMP ),
    .Y(\$procmux$4566_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4567_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4567_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4575  (
    .A(\$halt_if$174 ),
    .B(1'h1),
    .S(\$procmux$4576_CMP ),
    .Y(\$procmux$4575_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4577  (
    .A(1'hx),
    .B(\$procmux$4575_Y ),
    .S(\$procmux$4578_CMP ),
    .Y(\$procmux$4577_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4582  (
    .A(1'hx),
    .B(\$procmux$4577_Y ),
    .S(\$procmux$4583_CMP ),
    .Y(\$procmux$4582_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4583_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4583_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4591  (
    .A(\$ctrl_fsm_ns$173 ),
    .B(4'h8),
    .S(\$procmux$4592_CMP ),
    .Y(\$procmux$4591_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4593  (
    .A(4'hx),
    .B(\$procmux$4591_Y ),
    .S(\$procmux$4594_CMP ),
    .Y(\$procmux$4593_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4598  (
    .A(4'hx),
    .B(\$procmux$4593_Y ),
    .S(\$procmux$4599_CMP ),
    .Y(\$procmux$4598_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4599_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4599_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4606  (
    .A(\$halt_if$162 ),
    .B(\$halt_if$176 ),
    .S(\$procmux$4607_CMP ),
    .Y(\$procmux$4606_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4611  (
    .A(1'hx),
    .B(\$procmux$4606_Y ),
    .S(\$procmux$4612_CMP ),
    .Y(\$procmux$4611_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4612_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4612_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4619  (
    .A(\$ctrl_fsm_ns$149 ),
    .B(\$ctrl_fsm_ns$175 ),
    .S(\$procmux$4620_CMP ),
    .Y(\$procmux$4619_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4624  (
    .A(4'hx),
    .B(\$procmux$4619_Y ),
    .S(\$procmux$4625_CMP ),
    .Y(\$procmux$4624_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4625_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4625_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:462.11-462.26|rtl/cve2/cve2_controller.sv:461.9-463.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4631  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4632_CMP ),
    .Y(\$procmux$4631_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4635  (
    .A(1'hx),
    .B(\$procmux$4631_Y ),
    .S(\$procmux$4636_CMP ),
    .Y(\$procmux$4635_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4636_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4636_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4642  (
    .A(1'h0),
    .B(branch_set_i),
    .S(\$procmux$4643_CMP ),
    .Y(\$procmux$4642_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4645  (
    .A(1'hx),
    .B(\$procmux$4642_Y ),
    .S(\$procmux$4646_CMP ),
    .Y(\$procmux$4645_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4646_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4646_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4652  (
    .A(1'h0),
    .B(jump_set_i),
    .S(\$procmux$4653_CMP ),
    .Y(\$procmux$4652_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4655  (
    .A(1'hx),
    .B(\$procmux$4652_Y ),
    .S(\$procmux$4656_CMP ),
    .Y(\$procmux$4655_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4656_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4656_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4662  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4663_CMP ),
    .Y(\$procmux$4662_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4665  (
    .A(1'hx),
    .B(\$procmux$4662_Y ),
    .S(\$procmux$4666_CMP ),
    .Y(\$procmux$4665_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4666_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4666_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4672  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4673_CMP ),
    .Y(\$procmux$4672_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4674  (
    .A(1'hx),
    .B(\$procmux$4672_Y ),
    .S(\$procmux$4675_CMP ),
    .Y(\$procmux$4674_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4675_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4675_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4681  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .S(\$procmux$4682_CMP ),
    .Y(\$procmux$4681_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4683  (
    .A(4'hx),
    .B(\$procmux$4681_Y ),
    .S(\$procmux$4684_CMP ),
    .Y(\$procmux$4683_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4684_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4684_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4691  (
    .A(\$halt_if$146 ),
    .B(1'h1),
    .S(\$procmux$4692_CMP ),
    .Y(\$procmux$4691_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4695  (
    .A(1'hx),
    .B(\$procmux$4691_Y ),
    .S(\$procmux$4696_CMP ),
    .Y(\$procmux$4695_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4696_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4696_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4703  (
    .A(\$ctrl_fsm_ns$145 ),
    .B(4'h8),
    .S(\$procmux$4704_CMP ),
    .Y(\$procmux$4703_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4707  (
    .A(4'hx),
    .B(\$procmux$4703_Y ),
    .S(\$procmux$4708_CMP ),
    .Y(\$procmux$4707_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4708_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4708_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:407.25-414.12|rtl/cve2/cve2_controller.sv:407.9-414.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4715  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4716_CMP ),
    .Y(\$procmux$4715_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4718  (
    .A(1'hx),
    .B(\$procmux$4715_Y ),
    .S(\$procmux$4719_CMP ),
    .Y(\$procmux$4718_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4719_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4719_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:407.25-414.12|rtl/cve2/cve2_controller.sv:407.9-414.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4726  (
    .A(\$ctrl_fsm_ns$144 ),
    .B(4'h7),
    .S(\$procmux$4727_CMP ),
    .Y(\$procmux$4726_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4729  (
    .A(4'hx),
    .B(\$procmux$4726_Y ),
    .S(\$procmux$4730_CMP ),
    .Y(\$procmux$4729_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4730_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4730_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:403.11-403.32|rtl/cve2/cve2_controller.sv:402.9-404.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4737  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .S(\$procmux$4738_CMP ),
    .Y(\$procmux$4737_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4739  (
    .A(4'hx),
    .B(\$procmux$4737_Y ),
    .S(\$procmux$4740_CMP ),
    .Y(\$procmux$4739_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4740_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4740_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:393.11-393.37|rtl/cve2/cve2_controller.sv:392.9-397.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4749  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4750_CMP ),
    .Y(\$procmux$4749_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4751  (
    .A(1'hx),
    .B(\$procmux$4749_Y ),
    .S(\$procmux$4752_CMP ),
    .Y(\$procmux$4751_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4752_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$4752_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:393.11-393.37|rtl/cve2/cve2_controller.sv:392.9-397.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4761  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .S(\$procmux$4762_CMP ),
    .Y(\$procmux$4761_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4763  (
    .A(4'hx),
    .B(\$procmux$4761_Y ),
    .S(\$procmux$4764_CMP ),
    .Y(\$procmux$4763_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4764_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$4764_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd4)
  ) \$procmux$4768  (
    .A(4'h0),
    .B({ \$ctrl_fsm_ns$133 , 8'h43, \$ctrl_fsm_ns$142 , \$ctrl_fsm_ns$147 , \$ctrl_fsm_ns$177 , 12'h555, \$ctrl_fsm_ns$265  }),
    .S({ \$procmux$4790_CMP , \$procmux$4788_CMP , \$procmux$4787_CMP , \$procmux$4786_CMP , \$procmux$4784_CMP , \$procmux$4780_CMP , \$procmux$4775_CMP , \$procmux$4773_CMP , \$procmux$4771_CMP , \$procmux$4769_CMP  }),
    .Y(\$procmux$4768_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4769_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4769_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4771_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4771_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4773_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4773_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4775_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4775_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4780_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4780_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4784_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4784_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4786_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$4786_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4787_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h2),
    .Y(\$procmux$4787_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4788_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h1),
    .Y(\$procmux$4788_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4790_CMP0  (
    .A(ctrl_fsm_cs),
    .Y(\$procmux$4790_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:363.11-363.34|rtl/cve2/cve2_controller.sv:361.9-364.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4801  (
    .A(ctrl_fsm_cs),
    .B(4'h1),
    .S(\$procmux$4802_CMP ),
    .Y(\$procmux$4801_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4803  (
    .A(4'hx),
    .B(\$procmux$4801_Y ),
    .S(\$procmux$4804_CMP ),
    .Y(\$procmux$4803_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4804_CMP0  (
    .A(ctrl_fsm_cs),
    .Y(\$procmux$4804_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4814  (
    .A(1'h0),
    .B(\$perf_tbranch_o$155 ),
    .S(\$procmux$4815_CMP ),
    .Y(\$procmux$4814_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4815_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4815_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4825  (
    .A(1'h0),
    .B(\$perf_jump_o$154 ),
    .S(\$procmux$4826_CMP ),
    .Y(\$procmux$4825_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4826_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4826_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4830  (
    .A(32'd0),
    .B(\$csr_mtval_o$258 ),
    .S(\$procmux$4831_CMP ),
    .Y(\$procmux$4830_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4831_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4831_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$4835  (
    .A(1'h0),
    .B({ \$csr_save_cause_o$194 , 1'h1, \$csr_save_cause_o$204 , \$csr_save_cause_o$257  }),
    .S({ \$procmux$4842_CMP , \$procmux$4840_CMP , \$procmux$4838_CMP , \$procmux$4836_CMP  }),
    .Y(\$procmux$4835_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4836_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4836_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4838_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4838_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4840_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4840_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4842_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4842_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4846  (
    .A(1'h0),
    .B(\$csr_restore_dret_id_o$256 ),
    .S(\$procmux$4847_CMP ),
    .Y(\$procmux$4846_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4847_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4847_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4851  (
    .A(1'h0),
    .B(\$csr_restore_mret_id_o$255 ),
    .S(\$procmux$4852_CMP ),
    .Y(\$procmux$4851_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4852_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4852_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4856  (
    .A(1'h0),
    .B({ \$csr_save_id_o$203 , \$csr_save_id_o$254  }),
    .S({ \$procmux$4859_CMP , \$procmux$4857_CMP  }),
    .Y(\$procmux$4856_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4857_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4857_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4859_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4859_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4864  (
    .A(1'h0),
    .B({ \$csr_save_if_o$193 , 1'h1 }),
    .S({ \$procmux$4867_CMP , \$procmux$4865_CMP  }),
    .Y(\$procmux$4864_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4865_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4865_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4867_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4867_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4871  (
    .A(1'h0),
    .B({ 1'h1, \$debug_csr_save_o$202  }),
    .S({ \$procmux$4874_CMP , \$procmux$4872_CMP  }),
    .Y(\$procmux$4871_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4872_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4872_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4874_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4874_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd3)
  ) \$procmux$4878  (
    .A(3'h1),
    .B({ \$debug_cause_o$196 , \$debug_cause_o$201  }),
    .S({ \$procmux$4881_CMP , \$procmux$4879_CMP  }),
    .Y(\$procmux$4878_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4879_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4879_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4881_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4881_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$4885  (
    .A(7'h00),
    .B({ \$exc_cause_o$192 , \$exc_cause_o$253  }),
    .S({ \$procmux$4888_CMP , \$procmux$4886_CMP  }),
    .Y(\$procmux$4885_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4886_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4886_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4888_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4888_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$4892  (
    .A(2'h1),
    .B({ 4'ha, \$exc_pc_mux_o$252  }),
    .S({ \$procmux$4897_CMP , \$procmux$4895_CMP , \$procmux$4893_CMP  }),
    .Y(\$procmux$4892_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4893_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4893_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4895_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4895_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4897_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4897_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$4902  (
    .A(3'h0),
    .B({ 12'h292, \$pc_mux_o$251  }),
    .S({ \$procmux$4914_CMP , \$procmux$4909_CMP , \$procmux$4907_CMP , \$procmux$4905_CMP , \$procmux$4903_CMP  }),
    .Y(\$procmux$4902_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4903_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4903_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4905_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4905_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4907_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4907_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4909_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4909_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4914_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4914_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd1)
  ) \$procmux$4919  (
    .A(1'h0),
    .B({ 2'h3, \$pc_set_o$153 , \$pc_set_o$191 , 2'h3, \$pc_set_o$250  }),
    .S({ \$procmux$4934_CMP , \$procmux$4932_CMP , \$procmux$4931_CMP , \$procmux$4926_CMP , \$procmux$4924_CMP , \$procmux$4922_CMP , \$procmux$4920_CMP  }),
    .Y(\$procmux$4919_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4920_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4920_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4922_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4922_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4924_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4924_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4926_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4926_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4931_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4931_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4932_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h1),
    .Y(\$procmux$4932_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4934_CMP0  (
    .A(ctrl_fsm_cs),
    .Y(\$procmux$4934_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd1)
  ) \$procmux$4936  (
    .A(1'h0),
    .B(7'h7f),
    .S({ \$procmux$4944_CMP , \$procmux$4942_CMP , \$procmux$4941_CMP , \$procmux$4940_CMP , \$procmux$4939_CMP , \$procmux$4938_CMP , \$procmux$4937_CMP  }),
    .Y(\$procmux$4936_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4937_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4937_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4938_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4938_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4939_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4939_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4940_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$4940_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4941_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4941_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4942_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$4942_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4944_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h1),
    .Y(\$procmux$4944_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4955  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$4956_CMP ),
    .Y(\$procmux$4955_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4956_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4956_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4965  (
    .A(1'h1),
    .B({ 1'h0, \$ctrl_busy_o$143  }),
    .S({ \$procmux$4967_CMP , \$procmux$4966_CMP  }),
    .Y(\$procmux$4965_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4966_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$4966_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4967_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h2),
    .Y(\$procmux$4967_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$4971  (
    .A(1'h0),
    .B({ 4'hf, \$flush_id$249  }),
    .S({ \$procmux$4979_CMP , \$procmux$4978_CMP , \$procmux$4976_CMP , \$procmux$4974_CMP , \$procmux$4972_CMP  }),
    .Y(\$procmux$4971_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4972_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4972_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4974_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4974_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4976_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4976_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4978_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$4978_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4979_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h2),
    .Y(\$procmux$4979_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4989  (
    .A(1'h0),
    .B(\$retain_id$150 ),
    .S(\$procmux$4990_CMP ),
    .Y(\$procmux$4989_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4990_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$4990_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$4994  (
    .A(1'h0),
    .B({ 2'h3, \$halt_if$148 , \$halt_if$178 , 1'h1 }),
    .S({ \$procmux$5007_CMP , \$procmux$5006_CMP , \$procmux$5004_CMP , \$procmux$5000_CMP , \$procmux$4995_CMP  }),
    .Y(\$procmux$4994_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4995_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$4995_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5000_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h5),
    .Y(\$procmux$5000_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5004_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h4),
    .Y(\$procmux$5004_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5006_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h3),
    .Y(\$procmux$5006_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5007_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h2),
    .Y(\$procmux$5007_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$5011  (
    .A(debug_mode_q),
    .B({ 2'h3, \$debug_mode_d$248  }),
    .S({ \$procmux$5016_CMP , \$procmux$5014_CMP , \$procmux$5012_CMP  }),
    .Y(\$procmux$5011_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5012_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$5012_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5014_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$5014_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5016_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$5016_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$5020  (
    .A(nmi_mode_q),
    .B({ \$nmi_mode_d$190 , \$nmi_mode_d$247  }),
    .S({ \$procmux$5023_CMP , \$procmux$5021_CMP  }),
    .Y(\$procmux$5020_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5021_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .Y(\$procmux$5021_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5023_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h7),
    .Y(\$procmux$5023_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5024  (
    .A(\$mfip_id$128 ),
    .B(4'h0),
    .S(\$procmux$5025_CMP ),
    .Y(\$procmux$5024_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5041  (
    .A(\$mfip_id$127 ),
    .B(4'h1),
    .S(\$procmux$5042_CMP ),
    .Y(\$procmux$5041_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5057  (
    .A(\$mfip_id$126 ),
    .B(4'h2),
    .S(\$procmux$5058_CMP ),
    .Y(\$procmux$5057_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5072  (
    .A(\$mfip_id$125 ),
    .B(4'h3),
    .S(\$procmux$5073_CMP ),
    .Y(\$procmux$5072_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5086  (
    .A(\$mfip_id$124 ),
    .B(4'h4),
    .S(\$procmux$5087_CMP ),
    .Y(\$procmux$5086_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5099  (
    .A(\$mfip_id$123 ),
    .B(4'h5),
    .S(\$procmux$5100_CMP ),
    .Y(\$procmux$5099_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5111  (
    .A(\$mfip_id$122 ),
    .B(4'h6),
    .S(\$procmux$5112_CMP ),
    .Y(\$procmux$5111_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5122  (
    .A(\$mfip_id$121 ),
    .B(4'h7),
    .S(\$procmux$5123_CMP ),
    .Y(\$procmux$5122_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5132  (
    .A(\$mfip_id$120 ),
    .B(4'h8),
    .S(\$procmux$5133_CMP ),
    .Y(\$procmux$5132_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5141  (
    .A(\$mfip_id$119 ),
    .B(4'h9),
    .S(\$procmux$5142_CMP ),
    .Y(\$procmux$5141_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5149  (
    .A(\$mfip_id$118 ),
    .B(4'ha),
    .S(\$procmux$5150_CMP ),
    .Y(\$procmux$5149_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5156  (
    .A(\$mfip_id$117 ),
    .B(4'hb),
    .S(\$procmux$5157_CMP ),
    .Y(\$procmux$5156_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5162  (
    .A(\$mfip_id$116 ),
    .B(4'hc),
    .S(\$procmux$5163_CMP ),
    .Y(\$procmux$5162_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5167  (
    .A(\$mfip_id$115 ),
    .B(4'hd),
    .S(\$procmux$5168_CMP ),
    .Y(\$procmux$5167_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5171  (
    .A(\$mfip_id$114 ),
    .B(4'he),
    .S(\$procmux$5172_CMP ),
    .Y(\$procmux$5171_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5174  (
    .A(4'h0),
    .B(4'hf),
    .S(\$procmux$5175_CMP ),
    .Y(\$procmux$5174_Y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:244.9-244.31|rtl/cve2/cve2_controller.sv:243.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5176  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5177_CMP ),
    .Y(\$procmux$5176_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5179  (
    .A(\$procmux$5176_Y ),
    .B(1'hx),
    .S(\$procmux$5180_CMP ),
    .Y(\$procmux$5179_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5182  (
    .A(\$procmux$5179_Y ),
    .B(1'hx),
    .S(\$procmux$5183_CMP ),
    .Y(\$procmux$5182_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5185  (
    .A(\$procmux$5182_Y ),
    .B(1'hx),
    .S(\$procmux$5186_CMP ),
    .Y(\$procmux$5185_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5188  (
    .A(\$procmux$5185_Y ),
    .B(1'hx),
    .S(\$procmux$5189_CMP ),
    .Y(\$procmux$5188_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5191  (
    .A(\$procmux$5188_Y ),
    .B(1'hx),
    .S(\$procmux$5192_CMP ),
    .Y(\$procmux$5191_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5195  (
    .A(\$load_err_prio$57 ),
    .B(1'h0),
    .S(\$procmux$5196_CMP ),
    .Y(\$procmux$5195_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5198  (
    .A(\$procmux$5195_Y ),
    .B(1'hx),
    .S(\$procmux$5199_CMP ),
    .Y(\$procmux$5198_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5201  (
    .A(\$procmux$5198_Y ),
    .B(1'hx),
    .S(\$procmux$5202_CMP ),
    .Y(\$procmux$5201_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5204  (
    .A(\$procmux$5201_Y ),
    .B(1'hx),
    .S(\$procmux$5205_CMP ),
    .Y(\$procmux$5204_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5207  (
    .A(\$procmux$5204_Y ),
    .B(1'hx),
    .S(\$procmux$5208_CMP ),
    .Y(\$procmux$5207_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5210  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5211_CMP ),
    .Y(\$procmux$5210_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5213  (
    .A(\$procmux$5210_Y ),
    .B(1'hx),
    .S(\$procmux$5214_CMP ),
    .Y(\$procmux$5213_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5216  (
    .A(\$procmux$5213_Y ),
    .B(1'hx),
    .S(\$procmux$5217_CMP ),
    .Y(\$procmux$5216_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5219  (
    .A(\$procmux$5216_Y ),
    .B(1'hx),
    .S(\$procmux$5220_CMP ),
    .Y(\$procmux$5219_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5222  (
    .A(\$procmux$5219_Y ),
    .B(1'hx),
    .S(\$procmux$5223_CMP ),
    .Y(\$procmux$5222_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5226  (
    .A(\$load_err_prio$59 ),
    .B(1'h0),
    .S(\$procmux$5227_CMP ),
    .Y(\$procmux$5226_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5229  (
    .A(\$procmux$5226_Y ),
    .B(1'hx),
    .S(\$procmux$5230_CMP ),
    .Y(\$procmux$5229_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5232  (
    .A(\$procmux$5229_Y ),
    .B(1'hx),
    .S(\$procmux$5233_CMP ),
    .Y(\$procmux$5232_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5235  (
    .A(\$procmux$5232_Y ),
    .B(1'hx),
    .S(\$procmux$5236_CMP ),
    .Y(\$procmux$5235_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5239  (
    .A(\$store_err_prio$58 ),
    .B(1'h0),
    .S(\$procmux$5240_CMP ),
    .Y(\$procmux$5239_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5242  (
    .A(\$procmux$5239_Y ),
    .B(1'hx),
    .S(\$procmux$5243_CMP ),
    .Y(\$procmux$5242_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5245  (
    .A(\$procmux$5242_Y ),
    .B(1'hx),
    .S(\$procmux$5246_CMP ),
    .Y(\$procmux$5245_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5248  (
    .A(\$procmux$5245_Y ),
    .B(1'hx),
    .S(\$procmux$5249_CMP ),
    .Y(\$procmux$5248_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5251  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5252_CMP ),
    .Y(\$procmux$5251_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5254  (
    .A(\$procmux$5251_Y ),
    .B(1'hx),
    .S(\$procmux$5255_CMP ),
    .Y(\$procmux$5254_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5257  (
    .A(\$procmux$5254_Y ),
    .B(1'hx),
    .S(\$procmux$5258_CMP ),
    .Y(\$procmux$5257_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5260  (
    .A(\$procmux$5257_Y ),
    .B(1'hx),
    .S(\$procmux$5261_CMP ),
    .Y(\$procmux$5260_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5264  (
    .A(\$load_err_prio$62 ),
    .B(1'h0),
    .S(\$procmux$5265_CMP ),
    .Y(\$procmux$5264_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5267  (
    .A(\$procmux$5264_Y ),
    .B(1'hx),
    .S(\$procmux$5268_CMP ),
    .Y(\$procmux$5267_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5270  (
    .A(\$procmux$5267_Y ),
    .B(1'hx),
    .S(\$procmux$5271_CMP ),
    .Y(\$procmux$5270_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5274  (
    .A(\$store_err_prio$61 ),
    .B(1'h0),
    .S(\$procmux$5275_CMP ),
    .Y(\$procmux$5274_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5277  (
    .A(\$procmux$5274_Y ),
    .B(1'hx),
    .S(\$procmux$5278_CMP ),
    .Y(\$procmux$5277_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5280  (
    .A(\$procmux$5277_Y ),
    .B(1'hx),
    .S(\$procmux$5281_CMP ),
    .Y(\$procmux$5280_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5284  (
    .A(\$ebrk_insn_prio$60 ),
    .B(1'h0),
    .S(\$procmux$5285_CMP ),
    .Y(\$procmux$5284_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5287  (
    .A(\$procmux$5284_Y ),
    .B(1'hx),
    .S(\$procmux$5288_CMP ),
    .Y(\$procmux$5287_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5290  (
    .A(\$procmux$5287_Y ),
    .B(1'hx),
    .S(\$procmux$5291_CMP ),
    .Y(\$procmux$5290_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5293  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5294_CMP ),
    .Y(\$procmux$5293_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5296  (
    .A(\$procmux$5293_Y ),
    .B(1'hx),
    .S(\$procmux$5297_CMP ),
    .Y(\$procmux$5296_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5299  (
    .A(\$procmux$5296_Y ),
    .B(1'hx),
    .S(\$procmux$5300_CMP ),
    .Y(\$procmux$5299_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5303  (
    .A(\$load_err_prio$66 ),
    .B(1'h0),
    .S(\$procmux$5304_CMP ),
    .Y(\$procmux$5303_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5306  (
    .A(\$procmux$5303_Y ),
    .B(1'hx),
    .S(\$procmux$5307_CMP ),
    .Y(\$procmux$5306_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5310  (
    .A(\$store_err_prio$65 ),
    .B(1'h0),
    .S(\$procmux$5311_CMP ),
    .Y(\$procmux$5310_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5313  (
    .A(\$procmux$5310_Y ),
    .B(1'hx),
    .S(\$procmux$5314_CMP ),
    .Y(\$procmux$5313_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5317  (
    .A(\$ebrk_insn_prio$64 ),
    .B(1'h0),
    .S(\$procmux$5318_CMP ),
    .Y(\$procmux$5317_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5320  (
    .A(\$procmux$5317_Y ),
    .B(1'hx),
    .S(\$procmux$5321_CMP ),
    .Y(\$procmux$5320_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5324  (
    .A(\$ecall_insn_prio$63 ),
    .B(1'h0),
    .S(\$procmux$5325_CMP ),
    .Y(\$procmux$5324_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5327  (
    .A(\$procmux$5324_Y ),
    .B(1'hx),
    .S(\$procmux$5328_CMP ),
    .Y(\$procmux$5327_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5330  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5331_CMP ),
    .Y(\$procmux$5330_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5333  (
    .A(\$procmux$5330_Y ),
    .B(1'hx),
    .S(\$procmux$5334_CMP ),
    .Y(\$procmux$5333_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5337  (
    .A(\$load_err_prio$71 ),
    .B(1'h0),
    .S(\$procmux$5338_CMP ),
    .Y(\$procmux$5337_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5341  (
    .A(\$store_err_prio$70 ),
    .B(1'h0),
    .S(\$procmux$5342_CMP ),
    .Y(\$procmux$5341_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5345  (
    .A(\$ebrk_insn_prio$69 ),
    .B(1'h0),
    .S(\$procmux$5346_CMP ),
    .Y(\$procmux$5345_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5349  (
    .A(\$ecall_insn_prio$68 ),
    .B(1'h0),
    .S(\$procmux$5350_CMP ),
    .Y(\$procmux$5349_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5353  (
    .A(\$illegal_insn_prio$67 ),
    .B(1'h0),
    .S(\$procmux$5354_CMP ),
    .Y(\$procmux$5353_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5356  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5357_CMP ),
    .Y(\$procmux$5356_Y )
  );
  assign load_err_d = load_err_i;
  assign store_err_d = store_err_i;
  assign ecall_insn = \$1 ;
  assign mret_insn = \$3 ;
  assign dret_insn = \$5 ;
  assign wfi_insn = \$7 ;
  assign ebrk_insn = \$9 ;
  assign csr_pipe_flush = \$11 ;
  assign instr_fetch_err = \$13 ;
  assign illegal_dret = \$17 ;
  assign illegal_umode = \$25 ;
  assign illegal_insn_d = \$33 ;
  assign exc_req_d = \$43 ;
  assign exc_req_lsu = \$45 ;
  assign special_req_flush_only = \$47 ;
  assign special_req_pc_change = \$53 ;
  assign special_req = \$55 ;
  assign instr_fetch_err_prio = \$instr_fetch_err_prio$72 ;
  assign illegal_insn_prio = \$illegal_insn_prio$73 ;
  assign ecall_insn_prio = \$ecall_insn_prio$74 ;
  assign ebrk_insn_prio = \$ebrk_insn_prio$75 ;
  assign store_err_prio = \$store_err_prio$76 ;
  assign load_err_prio = \$load_err_prio$77 ;
  assign do_single_step_d = \$auto$rtlil.cc:3092:Mux$1603 ;
  assign enter_debug_mode_prio_d = \$88 ;
  assign enter_debug_mode = \$94 ;
  assign ebreak_into_debug = \$auto$rtlil.cc:3092:Mux$1605 ;
  assign handle_irq = \$112 ;
  assign mfip_id = \$mfip_id$129 ;
  assign unused_irq_timer = irqs_i[17];
  assign ctrl_fsm_ns = \$ctrl_fsm_ns$266 ;
  assign nmi_mode_d = \$nmi_mode_d$267 ;
  assign debug_mode_d = \$debug_mode_d$268 ;
  assign halt_if = \$halt_if$269 ;
  assign retain_id = \$retain_id$270 ;
  assign flush_id = \$flush_id$271 ;
  assign ctrl_busy_o = \$ctrl_busy_o$272 ;
  assign controller_run_o = \$controller_run_o$273 ;
  assign instr_req_o = \$instr_req_o$274 ;
  assign pc_set_o = \$pc_set_o$275 ;
  assign pc_mux_o = \$pc_mux_o$276 ;
  assign exc_pc_mux_o = \$exc_pc_mux_o$277 ;
  assign exc_cause_o = \$exc_cause_o$278 ;
  assign debug_cause_o = \$debug_cause_o$279 ;
  assign debug_csr_save_o = \$debug_csr_save_o$280 ;
  assign csr_save_if_o = \$csr_save_if_o$281 ;
  assign csr_save_id_o = \$csr_save_id_o$282 ;
  assign csr_restore_mret_id_o = \$csr_restore_mret_id_o$283 ;
  assign csr_restore_dret_id_o = \$csr_restore_dret_id_o$284 ;
  assign csr_save_cause_o = \$csr_save_cause_o$285 ;
  assign csr_mtval_o = \$csr_mtval_o$286 ;
  assign perf_jump_o = \$perf_jump_o$287 ;
  assign perf_tbranch_o = \$perf_tbranch_o$288 ;
  assign flush_id_o = flush_id;
  assign debug_mode_o = debug_mode_q;
  assign nmi_mode_o = nmi_mode_q;
  assign stall = stall_id_i;
  assign id_in_ready_o = \$298 ;
  assign instr_valid_clear_o = \$304 ;
  assign \$procmux$3944_CMP  = \$264 ;
  assign \$ctrl_fsm_ns$265  = \$procmux$3946_Y ;
  assign \$procmux$3950_CMP  = wfi_insn;
  assign \$procmux$3953_CMP  = dret_insn;
  assign \$procmux$3956_CMP  = mret_insn;
  assign \$procmux$3959_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$233  = \$procmux$3960_Y ;
  assign \$procmux$3965_CMP  = dret_insn;
  assign \$procmux$3968_CMP  = mret_insn;
  assign \$procmux$3971_CMP  = \$208 ;
  assign \$csr_restore_dret_id_o$238  = \$procmux$3972_Y ;
  assign \$procmux$3977_CMP  = dret_insn;
  assign \$procmux$3980_CMP  = mret_insn;
  assign \$procmux$3983_CMP  = \$208 ;
  assign \$pc_mux_o$237  = \$procmux$3984_Y ;
  assign \$procmux$3989_CMP  = dret_insn;
  assign \$procmux$3992_CMP  = mret_insn;
  assign \$procmux$3995_CMP  = \$208 ;
  assign \$pc_set_o$236  = \$procmux$3996_Y ;
  assign \$procmux$4001_CMP  = dret_insn;
  assign \$procmux$4004_CMP  = mret_insn;
  assign \$procmux$4007_CMP  = \$208 ;
  assign \$debug_mode_d$235  = \$procmux$4008_Y ;
  assign \$procmux$4014_CMP  = dret_insn;
  assign \$procmux$4017_CMP  = mret_insn;
  assign \$procmux$4020_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$234  = \$procmux$4021_Y ;
  assign \$procmux$4028_CMP  = mret_insn;
  assign \$procmux$4031_CMP  = \$208 ;
  assign \$pc_mux_o$243  = \$procmux$4032_Y ;
  assign \$procmux$4039_CMP  = mret_insn;
  assign \$procmux$4042_CMP  = \$208 ;
  assign \$pc_set_o$242  = \$procmux$4043_Y ;
  assign \$procmux$4048_CMP  = nmi_mode_q;
  assign \$procmux$4050_CMP  = mret_insn;
  assign \$procmux$4053_CMP  = \$208 ;
  assign \$nmi_mode_d$232  = \$procmux$4054_Y ;
  assign \$procmux$4060_CMP  = mret_insn;
  assign \$procmux$4063_CMP  = \$208 ;
  assign \$csr_restore_dret_id_o$245  = \$procmux$4064_Y ;
  assign \$procmux$4070_CMP  = mret_insn;
  assign \$procmux$4073_CMP  = \$208 ;
  assign \$csr_restore_mret_id_o$244  = \$procmux$4074_Y ;
  assign \$procmux$4080_CMP  = mret_insn;
  assign \$procmux$4083_CMP  = \$208 ;
  assign \$debug_mode_d$241  = \$procmux$4084_Y ;
  assign \$procmux$4090_CMP  = mret_insn;
  assign \$procmux$4093_CMP  = \$208 ;
  assign \$nmi_mode_d$240  = \$procmux$4094_Y ;
  assign \$procmux$4100_CMP  = mret_insn;
  assign \$procmux$4103_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$239  = \$procmux$4104_Y ;
  assign \$procmux$4111_CMP  = \$208 ;
  assign \$pc_mux_o$251  = \$procmux$4112_Y ;
  assign \$procmux$4119_CMP  = \$208 ;
  assign \$pc_set_o$250  = \$procmux$4120_Y ;
  assign \$procmux$4127_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$246  = \$procmux$4128_Y ;
  assign \$procmux$4137_CMP  = \$218 ;
  assign \$procmux$4141_CMP  = \$208 ;
  assign \$csr_save_cause_o$224  = \$procmux$4142_Y ;
  assign \$procmux$4154_CMP  = \$208 ;
  assign \$csr_save_id_o$223  = \$procmux$4155_Y ;
  assign \$procmux$4164_CMP  = \$218 ;
  assign \$procmux$4168_CMP  = \$208 ;
  assign \$exc_cause_o$222  = \$procmux$4169_Y ;
  assign \$procmux$4178_CMP  = \$218 ;
  assign \$procmux$4182_CMP  = \$208 ;
  assign \$pc_set_o$221  = \$procmux$4183_Y ;
  assign \$procmux$4192_CMP  = \$218 ;
  assign \$procmux$4196_CMP  = \$208 ;
  assign \$flush_id$220  = \$procmux$4197_Y ;
  assign \$procmux$4206_CMP  = \$218 ;
  assign \$procmux$4210_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$219  = \$procmux$4211_Y ;
  assign \$procmux$4222_CMP  = \$208 ;
  assign \$csr_mtval_o$231  = \$procmux$4223_Y ;
  assign \$procmux$4234_CMP  = \$208 ;
  assign \$csr_save_cause_o$230  = \$procmux$4235_Y ;
  assign \$procmux$4246_CMP  = \$208 ;
  assign \$csr_save_id_o$229  = \$procmux$4247_Y ;
  assign \$procmux$4261_CMP  = \$208 ;
  assign \$exc_cause_o$228  = \$procmux$4262_Y ;
  assign \$procmux$4273_CMP  = \$208 ;
  assign \$pc_set_o$227  = \$procmux$4274_Y ;
  assign \$procmux$4285_CMP  = \$208 ;
  assign \$flush_id$226  = \$procmux$4286_Y ;
  assign \$procmux$4297_CMP  = \$208 ;
  assign \$ctrl_fsm_ns$225  = \$procmux$4298_Y ;
  assign \$procmux$4304_CMP  = \$208 ;
  assign \$csr_mtval_o$258  = \$procmux$4305_Y ;
  assign \$procmux$4311_CMP  = \$208 ;
  assign \$csr_save_cause_o$257  = \$procmux$4312_Y ;
  assign \$procmux$4318_CMP  = \$208 ;
  assign \$csr_restore_dret_id_o$256  = \$procmux$4319_Y ;
  assign \$procmux$4325_CMP  = \$208 ;
  assign \$csr_restore_mret_id_o$255  = \$procmux$4326_Y ;
  assign \$procmux$4332_CMP  = \$208 ;
  assign \$csr_save_id_o$254  = \$procmux$4333_Y ;
  assign \$procmux$4339_CMP  = \$208 ;
  assign \$exc_cause_o$253  = \$procmux$4340_Y ;
  assign \$procmux$4346_CMP  = \$208 ;
  assign \$exc_pc_mux_o$252  = \$procmux$4347_Y ;
  assign \$procmux$4353_CMP  = \$208 ;
  assign \$flush_id$249  = \$procmux$4354_Y ;
  assign \$procmux$4360_CMP  = \$208 ;
  assign \$debug_mode_d$248  = \$procmux$4361_Y ;
  assign \$procmux$4367_CMP  = \$208 ;
  assign \$nmi_mode_d$247  = \$procmux$4368_Y ;
  assign \$procmux$4373_CMP  = \$200 ;
  assign \$csr_save_cause_o$204  = \$procmux$4374_Y ;
  assign \$procmux$4379_CMP  = \$200 ;
  assign \$csr_save_id_o$203  = \$procmux$4380_Y ;
  assign \$procmux$4385_CMP  = \$200 ;
  assign \$debug_csr_save_o$202  = \$procmux$4386_Y ;
  assign \$debug_cause_o$201  = \$procmux$4391_Y ;
  assign \$procmux$4398_CMP  = debug_req_i;
  assign \$procmux$4401_CMP  = trigger_match_i;
  assign \$debug_cause_o$195  = \$procmux$4402_Y ;
  assign \$procmux$4410_CMP  = trigger_match_i;
  assign \$debug_cause_o$196  = \$procmux$4411_Y ;
  assign \$procmux$4419_CMP  = irqs_i[18];
  assign \$procmux$4422_CMP  = irqs_i[16];
  assign \$procmux$4425_CMP  = \$184 ;
  assign \$procmux$4428_CMP  = \$182 ;
  assign \$procmux$4430_CMP  = handle_irq;
  assign \$exc_cause_o$185  = \$procmux$4431_Y ;
  assign \$procmux$4440_CMP  = irqs_i[16];
  assign \$procmux$4443_CMP  = \$184 ;
  assign \$procmux$4446_CMP  = \$182 ;
  assign \$procmux$4448_CMP  = handle_irq;
  assign \$exc_cause_o$186  = \$procmux$4449_Y ;
  assign \$procmux$4458_CMP  = \$184 ;
  assign \$procmux$4461_CMP  = \$182 ;
  assign \$procmux$4463_CMP  = handle_irq;
  assign \$exc_cause_o$187  = \$procmux$4464_Y ;
  assign \$procmux$4473_CMP  = \$182 ;
  assign \$procmux$4475_CMP  = handle_irq;
  assign \$exc_cause_o$189  = \$procmux$4476_Y ;
  assign \$procmux$4484_CMP  = \$182 ;
  assign \$procmux$4486_CMP  = handle_irq;
  assign \$nmi_mode_d$188  = \$procmux$4487_Y ;
  assign \$procmux$4495_CMP  = handle_irq;
  assign \$csr_save_cause_o$194  = \$procmux$4496_Y ;
  assign \$procmux$4504_CMP  = handle_irq;
  assign \$csr_save_if_o$193  = \$procmux$4505_Y ;
  assign \$procmux$4513_CMP  = handle_irq;
  assign \$exc_cause_o$192  = \$procmux$4514_Y ;
  assign \$procmux$4522_CMP  = handle_irq;
  assign \$pc_set_o$191  = \$procmux$4523_Y ;
  assign \$procmux$4531_CMP  = handle_irq;
  assign \$nmi_mode_d$190  = \$procmux$4532_Y ;
  assign \$procmux$4540_CMP  = handle_irq;
  assign \$procmux$4543_CMP  = enter_debug_mode;
  assign \$procmux$4545_CMP  = \$172 ;
  assign \$halt_if$174  = \$procmux$4549_Y ;
  assign \$procmux$4557_CMP  = handle_irq;
  assign \$procmux$4560_CMP  = enter_debug_mode;
  assign \$procmux$4562_CMP  = \$172 ;
  assign \$ctrl_fsm_ns$173  = \$procmux$4566_Y ;
  assign \$procmux$4576_CMP  = enter_debug_mode;
  assign \$procmux$4578_CMP  = \$172 ;
  assign \$halt_if$176  = \$procmux$4582_Y ;
  assign \$procmux$4592_CMP  = enter_debug_mode;
  assign \$procmux$4594_CMP  = \$172 ;
  assign \$ctrl_fsm_ns$175  = \$procmux$4598_Y ;
  assign \$procmux$4607_CMP  = \$172 ;
  assign \$halt_if$178  = \$procmux$4611_Y ;
  assign \$procmux$4620_CMP  = \$172 ;
  assign \$ctrl_fsm_ns$177  = \$procmux$4624_Y ;
  assign \$procmux$4632_CMP  = \$161 ;
  assign \$halt_if$162  = \$procmux$4635_Y ;
  assign \$procmux$4643_CMP  = \$152 ;
  assign \$perf_tbranch_o$155  = \$procmux$4645_Y ;
  assign \$procmux$4653_CMP  = \$152 ;
  assign \$perf_jump_o$154  = \$procmux$4655_Y ;
  assign \$procmux$4663_CMP  = \$152 ;
  assign \$pc_set_o$153  = \$procmux$4665_Y ;
  assign \$procmux$4673_CMP  = special_req;
  assign \$retain_id$150  = \$procmux$4674_Y ;
  assign \$procmux$4682_CMP  = special_req;
  assign \$ctrl_fsm_ns$149  = \$procmux$4683_Y ;
  assign \$procmux$4692_CMP  = enter_debug_mode;
  assign \$halt_if$148  = \$procmux$4695_Y ;
  assign \$procmux$4704_CMP  = enter_debug_mode;
  assign \$ctrl_fsm_ns$147  = \$procmux$4707_Y ;
  assign \$procmux$4716_CMP  = handle_irq;
  assign \$halt_if$146  = \$procmux$4718_Y ;
  assign \$procmux$4727_CMP  = handle_irq;
  assign \$ctrl_fsm_ns$145  = \$procmux$4729_Y ;
  assign \$procmux$4738_CMP  = id_in_ready_o;
  assign \$ctrl_fsm_ns$144  = \$procmux$4739_Y ;
  assign \$procmux$4750_CMP  = \$141 ;
  assign \$ctrl_busy_o$143  = \$procmux$4751_Y ;
  assign \$procmux$4762_CMP  = \$141 ;
  assign \$ctrl_fsm_ns$142  = \$procmux$4763_Y ;
  assign \$ctrl_fsm_ns$266  = \$procmux$4768_Y ;
  assign \$procmux$4802_CMP  = \$132 ;
  assign \$ctrl_fsm_ns$133  = \$procmux$4803_Y ;
  assign \$perf_tbranch_o$288  = \$procmux$4814_Y ;
  assign \$perf_jump_o$287  = \$procmux$4825_Y ;
  assign \$csr_mtval_o$286  = \$procmux$4830_Y ;
  assign \$csr_save_cause_o$285  = \$procmux$4835_Y ;
  assign \$csr_restore_dret_id_o$284  = \$procmux$4846_Y ;
  assign \$csr_restore_mret_id_o$283  = \$procmux$4851_Y ;
  assign \$csr_save_id_o$282  = \$procmux$4856_Y ;
  assign \$csr_save_if_o$281  = \$procmux$4864_Y ;
  assign \$debug_csr_save_o$280  = \$procmux$4871_Y ;
  assign \$debug_cause_o$279  = \$procmux$4878_Y ;
  assign \$exc_cause_o$278  = \$procmux$4885_Y ;
  assign \$exc_pc_mux_o$277  = \$procmux$4892_Y ;
  assign \$pc_mux_o$276  = \$procmux$4902_Y ;
  assign \$pc_set_o$275  = \$procmux$4919_Y ;
  assign \$instr_req_o$274  = \$procmux$4936_Y ;
  assign \$controller_run_o$273  = \$procmux$4955_Y ;
  assign \$ctrl_busy_o$272  = \$procmux$4965_Y ;
  assign \$flush_id$271  = \$procmux$4971_Y ;
  assign \$retain_id$270  = \$procmux$4989_Y ;
  assign \$halt_if$269  = \$procmux$4994_Y ;
  assign \$debug_mode_d$268  = \$procmux$5011_Y ;
  assign \$nmi_mode_d$267  = \$procmux$5020_Y ;
  assign \$procmux$5025_CMP  = irqs_i[0];
  assign \$mfip_id$129  = \$procmux$5024_Y ;
  assign \$procmux$5042_CMP  = irqs_i[1];
  assign \$mfip_id$128  = \$procmux$5041_Y ;
  assign \$procmux$5058_CMP  = irqs_i[2];
  assign \$mfip_id$127  = \$procmux$5057_Y ;
  assign \$procmux$5073_CMP  = irqs_i[3];
  assign \$mfip_id$126  = \$procmux$5072_Y ;
  assign \$procmux$5087_CMP  = irqs_i[4];
  assign \$mfip_id$125  = \$procmux$5086_Y ;
  assign \$procmux$5100_CMP  = irqs_i[5];
  assign \$mfip_id$124  = \$procmux$5099_Y ;
  assign \$procmux$5112_CMP  = irqs_i[6];
  assign \$mfip_id$123  = \$procmux$5111_Y ;
  assign \$procmux$5123_CMP  = irqs_i[7];
  assign \$mfip_id$122  = \$procmux$5122_Y ;
  assign \$procmux$5133_CMP  = irqs_i[8];
  assign \$mfip_id$121  = \$procmux$5132_Y ;
  assign \$procmux$5142_CMP  = irqs_i[9];
  assign \$mfip_id$120  = \$procmux$5141_Y ;
  assign \$procmux$5150_CMP  = irqs_i[10];
  assign \$mfip_id$119  = \$procmux$5149_Y ;
  assign \$procmux$5157_CMP  = irqs_i[11];
  assign \$mfip_id$118  = \$procmux$5156_Y ;
  assign \$procmux$5163_CMP  = irqs_i[12];
  assign \$mfip_id$117  = \$procmux$5162_Y ;
  assign \$procmux$5168_CMP  = irqs_i[13];
  assign \$mfip_id$116  = \$procmux$5167_Y ;
  assign \$procmux$5172_CMP  = irqs_i[14];
  assign \$mfip_id$115  = \$procmux$5171_Y ;
  assign \$procmux$5175_CMP  = irqs_i[15];
  assign \$mfip_id$114  = \$procmux$5174_Y ;
  assign \$procmux$5177_CMP  = load_err_q;
  assign \$procmux$5180_CMP  = store_err_q;
  assign \$procmux$5183_CMP  = ebrk_insn;
  assign \$procmux$5186_CMP  = ecall_insn;
  assign \$procmux$5189_CMP  = illegal_insn_q;
  assign \$procmux$5192_CMP  = instr_fetch_err;
  assign \$load_err_prio$57  = \$procmux$5191_Y ;
  assign \$procmux$5196_CMP  = store_err_q;
  assign \$procmux$5199_CMP  = ebrk_insn;
  assign \$procmux$5202_CMP  = ecall_insn;
  assign \$procmux$5205_CMP  = illegal_insn_q;
  assign \$procmux$5208_CMP  = instr_fetch_err;
  assign \$load_err_prio$59  = \$procmux$5207_Y ;
  assign \$procmux$5211_CMP  = store_err_q;
  assign \$procmux$5214_CMP  = ebrk_insn;
  assign \$procmux$5217_CMP  = ecall_insn;
  assign \$procmux$5220_CMP  = illegal_insn_q;
  assign \$procmux$5223_CMP  = instr_fetch_err;
  assign \$store_err_prio$58  = \$procmux$5222_Y ;
  assign \$procmux$5227_CMP  = ebrk_insn;
  assign \$procmux$5230_CMP  = ecall_insn;
  assign \$procmux$5233_CMP  = illegal_insn_q;
  assign \$procmux$5236_CMP  = instr_fetch_err;
  assign \$load_err_prio$62  = \$procmux$5235_Y ;
  assign \$procmux$5240_CMP  = ebrk_insn;
  assign \$procmux$5243_CMP  = ecall_insn;
  assign \$procmux$5246_CMP  = illegal_insn_q;
  assign \$procmux$5249_CMP  = instr_fetch_err;
  assign \$store_err_prio$61  = \$procmux$5248_Y ;
  assign \$procmux$5252_CMP  = ebrk_insn;
  assign \$procmux$5255_CMP  = ecall_insn;
  assign \$procmux$5258_CMP  = illegal_insn_q;
  assign \$procmux$5261_CMP  = instr_fetch_err;
  assign \$ebrk_insn_prio$60  = \$procmux$5260_Y ;
  assign \$procmux$5265_CMP  = ecall_insn;
  assign \$procmux$5268_CMP  = illegal_insn_q;
  assign \$procmux$5271_CMP  = instr_fetch_err;
  assign \$load_err_prio$66  = \$procmux$5270_Y ;
  assign \$procmux$5275_CMP  = ecall_insn;
  assign \$procmux$5278_CMP  = illegal_insn_q;
  assign \$procmux$5281_CMP  = instr_fetch_err;
  assign \$store_err_prio$65  = \$procmux$5280_Y ;
  assign \$procmux$5285_CMP  = ecall_insn;
  assign \$procmux$5288_CMP  = illegal_insn_q;
  assign \$procmux$5291_CMP  = instr_fetch_err;
  assign \$ebrk_insn_prio$64  = \$procmux$5290_Y ;
  assign \$procmux$5294_CMP  = ecall_insn;
  assign \$procmux$5297_CMP  = illegal_insn_q;
  assign \$procmux$5300_CMP  = instr_fetch_err;
  assign \$ecall_insn_prio$63  = \$procmux$5299_Y ;
  assign \$procmux$5304_CMP  = illegal_insn_q;
  assign \$procmux$5307_CMP  = instr_fetch_err;
  assign \$load_err_prio$71  = \$procmux$5306_Y ;
  assign \$procmux$5311_CMP  = illegal_insn_q;
  assign \$procmux$5314_CMP  = instr_fetch_err;
  assign \$store_err_prio$70  = \$procmux$5313_Y ;
  assign \$procmux$5318_CMP  = illegal_insn_q;
  assign \$procmux$5321_CMP  = instr_fetch_err;
  assign \$ebrk_insn_prio$69  = \$procmux$5320_Y ;
  assign \$procmux$5325_CMP  = illegal_insn_q;
  assign \$procmux$5328_CMP  = instr_fetch_err;
  assign \$ecall_insn_prio$68  = \$procmux$5327_Y ;
  assign \$procmux$5331_CMP  = illegal_insn_q;
  assign \$procmux$5334_CMP  = instr_fetch_err;
  assign \$illegal_insn_prio$67  = \$procmux$5333_Y ;
  assign \$procmux$5338_CMP  = instr_fetch_err;
  assign \$load_err_prio$77  = \$procmux$5337_Y ;
  assign \$procmux$5342_CMP  = instr_fetch_err;
  assign \$store_err_prio$76  = \$procmux$5341_Y ;
  assign \$procmux$5346_CMP  = instr_fetch_err;
  assign \$ebrk_insn_prio$75  = \$procmux$5345_Y ;
  assign \$procmux$5350_CMP  = instr_fetch_err;
  assign \$ecall_insn_prio$74  = \$procmux$5349_Y ;
  assign \$procmux$5354_CMP  = instr_fetch_err;
  assign \$illegal_insn_prio$73  = \$procmux$5353_Y ;
  assign \$procmux$5357_CMP  = instr_fetch_err;
  assign \$instr_fetch_err_prio$72  = \$procmux$5356_Y ;
  assign \$132  = fetch_enable_i;
  assign \$procmux$4194_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4283_CMP  = \$procmux$5345_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1611  = rst_ni;
  assign \$procmux$4208_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4295_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4180_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4271_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4139_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4152_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4166_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4217_CMP  = \$procmux$5337_Y ;
  assign \$procmux$4218_CMP  = \$procmux$5341_Y ;
  assign \$procmux$4219_CMP  = \$procmux$5353_Y ;
  assign \$procmux$4220_CMP  = \$procmux$5356_Y ;
  assign \$procmux$4232_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4244_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4253_CMP  = \$procmux$5337_Y ;
  assign \$procmux$4254_CMP  = \$procmux$5341_Y ;
  assign \$procmux$4256_CMP  = \$procmux$5345_Y ;
  assign \$procmux$4257_CMP  = \$procmux$5349_Y ;
  assign \$procmux$4258_CMP  = \$procmux$5353_Y ;
  assign \$procmux$4259_CMP  = \$procmux$5356_Y ;
endmodule

/* src = "rtl/cve2/cve2_core.sv:15.8" */
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, core_busy_o, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i
, test_en_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, crash_dump_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire [11:0] \$auto$rtlil.cc:3092:Mux$211 ;
  /* src = "rtl/cve2/cve2_core.sv:177.16" */
  wire [31:0] alu_adder_result_ex;
  /* src = "rtl/cve2/cve2_core.sv:174.16" */
  wire [31:0] alu_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:175.16" */
  wire [31:0] alu_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:173.16" */
  wire [6:0] alu_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:36.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_core.sv:146.16" */
  wire branch_decision;
  /* src = "rtl/cve2/cve2_core.sv:145.16" */
  wire [31:0] branch_target_ex;
  /* src = "rtl/cve2/cve2_core.sv:30.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_core.sv:106.40" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/cve2/cve2_core.sv:67.40" */
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  /* src = "rtl/cve2/cve2_core.sv:191.16" */
  wire csr_access;
  /* src = "rtl/cve2/cve2_core.sv:194.16" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_core.sv:226.26" */
  wire [31:0] csr_depc;
  /* src = "rtl/cve2/cve2_core.sv:226.16" */
  wire [31:0] csr_mepc;
  /* src = "rtl/cve2/cve2_core.sv:225.16" */
  wire csr_mstatus_mie;
  /* src = "rtl/cve2/cve2_core.sv:243.16" */
  wire csr_mstatus_tw;
  /* src = "rtl/cve2/cve2_core.sv:242.16" */
  wire [31:0] csr_mtval;
  /* src = "rtl/cve2/cve2_core.sv:241.16" */
  wire [31:0] csr_mtvec;
  /* src = "rtl/cve2/cve2_core.sv:240.16" */
  wire csr_mtvec_init;
  /* src = "rtl/cve2/cve2_core.sv:192.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_core.sv:193.16" */
  wire csr_op_en;
  /* src = "rtl/cve2/cve2_core.sv:229.17" */
  wire [135:0] csr_pmp_addr;
  /* src = "rtl/cve2/cve2_core.sv:230.17" */
  wire [23:0] csr_pmp_cfg;
  /* src = "rtl/cve2/cve2_core.sv:231.17" */
  wire [2:0] csr_pmp_mseccfg;
  /* src = "rtl/cve2/cve2_core.sv:195.16" */
  wire [31:0] csr_rdata;
  /* src = "rtl/cve2/cve2_core.sv:238.16" */
  wire csr_restore_dret_id;
  /* src = "rtl/cve2/cve2_core.sv:237.16" */
  wire csr_restore_mret_id;
  /* src = "rtl/cve2/cve2_core.sv:239.16" */
  wire csr_save_cause;
  /* src = "rtl/cve2/cve2_core.sv:236.16" */
  wire csr_save_id;
  /* src = "rtl/cve2/cve2_core.sv:235.16" */
  wire csr_save_if;
  /* src = "rtl/cve2/cve2_core.sv:196.16" */
  wire [31:0] csr_wdata;
  /* src = "rtl/cve2/cve2_core.sv:149.16" */
  wire ctrl_busy;
  /* src = "rtl/cve2/cve2_core.sv:52.40" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:51.40" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_core.sv:55.40" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_core.sv:48.40" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:54.40" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:47.40" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_core.sv:233.17" */
  wire data_req_out;
  /* src = "rtl/cve2/cve2_core.sv:49.40" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:53.40" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_core.sv:50.40" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_core.sv:249.16" */
  wire [2:0] debug_cause;
  /* src = "rtl/cve2/cve2_core.sv:250.16" */
  wire debug_csr_save;
  /* src = "rtl/cve2/cve2_core.sv:252.16" */
  wire debug_ebreakm;
  /* src = "rtl/cve2/cve2_core.sv:253.16" */
  wire debug_ebreaku;
  /* src = "rtl/cve2/cve2_core.sv:248.16" */
  wire debug_mode;
  /* src = "rtl/cve2/cve2_core.sv:66.40" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_core.sv:251.16" */
  wire debug_single_step;
  /* src = "rtl/cve2/cve2_core.sv:182.16" */
  wire div_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:184.16" */
  wire div_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:220.16" */
  wire en_wb;
  /* src = "rtl/cve2/cve2_core.sv:210.16" */
  wire ex_valid;
  /* src = "rtl/cve2/cve2_core.sv:135.16" */
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_core.sv:134.16" */
  wire [1:0] exc_pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:105.40" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_core.sv:799.18" */
  wire [135:0] \g_no_pmp.unused_csr_pmp_addr ;
  /* src = "rtl/cve2/cve2_core.sv:800.18" */
  wire [23:0] \g_no_pmp.unused_csr_pmp_cfg ;
  /* src = "rtl/cve2/cve2_core.sv:801.19" */
  wire [2:0] \g_no_pmp.unused_csr_pmp_mseccfg ;
  /* src = "rtl/cve2/cve2_core.sv:798.16" */
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  /* src = "rtl/cve2/cve2_core.sv:35.40" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_core.sv:209.16" */
  wire id_in_ready;
  /* src = "rtl/cve2/cve2_core.sv:150.16" */
  wire if_busy;
  /* src = "rtl/cve2/cve2_core.sv:123.16" */
  wire illegal_c_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:197.16" */
  wire illegal_csr_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:273.16" */
  wire illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:126.16" */
  wire [67:0] imd_val_d_ex;
  /* src = "rtl/cve2/cve2_core.sv:127.16" */
  wire [67:0] imd_val_q_ex;
  /* src = "rtl/cve2/cve2_core.sv:128.16" */
  wire [1:0] imd_val_we_ex;
  /* src = "rtl/cve2/cve2_core.sv:42.40" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:44.40" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_core.sv:121.16" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_core.sv:122.16" */
  wire instr_fetch_err_plus2;
  /* src = "rtl/cve2/cve2_core.sv:130.16" */
  wire instr_first_cycle_id;
  /* src = "rtl/cve2/cve2_core.sv:40.40" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:258.16" */
  wire instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:119.16" */
  wire instr_is_compressed_id;
  /* src = "rtl/cve2/cve2_core.sv:114.16" */
  wire instr_new_id;
  /* src = "rtl/cve2/cve2_core.sv:120.16" */
  wire instr_perf_count_id;
  /* src = "rtl/cve2/cve2_core.sv:116.16" */
  wire [31:0] instr_rdata_alu_id;
  /* src = "rtl/cve2/cve2_core.sv:118.16" */
  wire [15:0] instr_rdata_c_id;
  /* src = "rtl/cve2/cve2_core.sv:43.40" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:115.16" */
  wire [31:0] instr_rdata_id;
  /* src = "rtl/cve2/cve2_core.sv:217.16" */
  wire instr_req_gated;
  /* src = "rtl/cve2/cve2_core.sv:216.16" */
  wire instr_req_int;
  /* src = "rtl/cve2/cve2_core.sv:39.40" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_core.sv:41.40" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:131.16" */
  wire instr_valid_clear;
  /* src = "rtl/cve2/cve2_core.sv:113.16" */
  wire instr_valid_id;
  /* src = "rtl/cve2/cve2_core.sv:60.40" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_core.sv:61.40" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_core.sv:62.40" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_core.sv:63.40" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_core.sv:58.40" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_core.sv:59.40" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_core.sv:224.16" */
  wire [18:0] irqs;
  /* src = "rtl/cve2/cve2_core.sv:141.16" */
  wire lsu_addr_incr_req;
  /* src = "rtl/cve2/cve2_core.sv:142.16" */
  wire [31:0] lsu_addr_last;
  /* src = "rtl/cve2/cve2_core.sv:151.16" */
  wire lsu_busy;
  /* src = "rtl/cve2/cve2_core.sv:137.16" */
  wire lsu_load_err;
  /* src = "rtl/cve2/cve2_core.sv:205.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_core.sv:213.16" */
  wire lsu_resp_err;
  /* src = "rtl/cve2/cve2_core.sv:212.16" */
  wire lsu_resp_valid;
  /* src = "rtl/cve2/cve2_core.sv:204.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_core.sv:138.16" */
  wire lsu_store_err;
  /* src = "rtl/cve2/cve2_core.sv:203.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_core.sv:206.16" */
  wire [31:0] lsu_wdata;
  /* src = "rtl/cve2/cve2_core.sv:202.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_core.sv:181.16" */
  wire mult_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:183.16" */
  wire mult_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:187.16" */
  wire [31:0] multdiv_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:188.16" */
  wire [31:0] multdiv_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:185.16" */
  wire [1:0] multdiv_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:186.16" */
  wire [1:0] multdiv_signed_mode_ex;
  /* src = "rtl/cve2/cve2_core.sv:223.16" */
  wire nmi_mode;
  /* src = "rtl/cve2/cve2_core.sv:125.16" */
  wire [31:0] pc_id;
  /* src = "rtl/cve2/cve2_core.sv:124.16" */
  wire [31:0] pc_if;
  /* src = "rtl/cve2/cve2_core.sv:133.16" */
  wire [2:0] pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:132.16" */
  wire pc_set;
  /* src = "rtl/cve2/cve2_core.sv:267.16" */
  wire perf_branch;
  /* src = "rtl/cve2/cve2_core.sv:265.16" */
  wire perf_div_wait;
  /* src = "rtl/cve2/cve2_core.sv:263.16" */
  wire perf_dside_wait;
  /* src = "rtl/cve2/cve2_core.sv:261.16" */
  wire perf_instr_ret_compressed_wb;
  /* src = "rtl/cve2/cve2_core.sv:260.16" */
  wire perf_instr_ret_wb;
  /* src = "rtl/cve2/cve2_core.sv:262.16" */
  wire perf_iside_wait;
  /* src = "rtl/cve2/cve2_core.sv:266.16" */
  wire perf_jump;
  /* src = "rtl/cve2/cve2_core.sv:269.16" */
  wire perf_load;
  /* src = "rtl/cve2/cve2_core.sv:270.16" */
  wire perf_store;
  /* src = "rtl/cve2/cve2_core.sv:268.16" */
  wire perf_tbranch;
  /* src = "rtl/cve2/cve2_core.sv:264.16" */
  wire perf_wfi_wait;
  /* src = "rtl/cve2/cve2_core.sv:232.17" */
  wire [2:0] pmp_req_err;
  /* src = "rtl/cve2/cve2_core.sv:244.16" */
  wire [1:0] priv_mode_id;
  /* src = "rtl/cve2/cve2_core.sv:245.16" */
  wire [1:0] priv_mode_lsu;
  /* src = "rtl/cve2/cve2_core.sv:178.16" */
  wire [31:0] result_ex;
  /* src = "rtl/cve2/cve2_core.sv:154.16" */
  wire [4:0] rf_raddr_a;
  /* src = "rtl/cve2/cve2_core.sv:156.16" */
  wire [4:0] rf_raddr_b;
  /* src = "rtl/cve2/cve2_core.sv:155.16" */
  wire [31:0] rf_rdata_a;
  /* src = "rtl/cve2/cve2_core.sv:157.16" */
  wire [31:0] rf_rdata_b;
  /* src = "rtl/cve2/cve2_core.sv:158.16" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_core.sv:159.16" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_core.sv:168.16" */
  wire [4:0] rf_waddr_id;
  /* src = "rtl/cve2/cve2_core.sv:160.16" */
  wire [4:0] rf_waddr_wb;
  /* src = "rtl/cve2/cve2_core.sv:169.16" */
  wire [31:0] rf_wdata_id;
  /* src = "rtl/cve2/cve2_core.sv:164.16" */
  wire [31:0] rf_wdata_lsu;
  /* src = "rtl/cve2/cve2_core.sv:161.16" */
  wire [31:0] rf_wdata_wb;
  /* src = "rtl/cve2/cve2_core.sv:170.16" */
  wire rf_we_id;
  /* src = "rtl/cve2/cve2_core.sv:166.16" */
  wire rf_we_lsu;
  /* src = "rtl/cve2/cve2_core.sv:165.16" */
  wire rf_we_wb;
  /* src = "rtl/cve2/cve2_core.sv:31.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_core.sv:33.40" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_core.sv:254.16" */
  wire trigger_match;
  /* src = "rtl/cve2/cve2_core.sv:273.33" */
  wire unused_illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:1342.30" */
  wire unused_instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:1342.9" */
  wire unused_instr_new_id;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ctrl_busy),
    .B(if_busy),
    .Y(\$1 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(lsu_load_err),
    .B(lsu_store_err),
    .Y(\$13 )
  );
  \$mux  #(
    .WIDTH(32'd12)
  ) \$14  (
    .A(12'h000),
    .B(alu_operand_b_ex[11:0]),
    .S(csr_access),
    .Y(\$auto$rtlil.cc:3092:Mux$211 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(lsu_busy),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(instr_valid_id),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(id_in_ready),
    .B(\$5 ),
    .Y(\$7 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:680.5" */
  \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(csr_wdata),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(priv_mode_lsu),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  /* src = "rtl/cve2/cve2_core.sv:490.5" */
  \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:357.5" */
  \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_int),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  /* src = "rtl/cve2/cve2_core.sv:290.5" */
  \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:532.24" */
  \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_out),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:646.5" */
  \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  /* src = "rtl/cve2/cve2_core.sv:578.5" */
  \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign core_busy_o = \$3 ;
  assign perf_iside_wait = \$7 ;
  assign instr_req_gated = instr_req_int;
  assign unused_illegal_insn_id = illegal_insn_id;
  assign data_req_o = \$11 ;
  assign lsu_resp_err = \$13 ;
  assign crash_dump_o[127:96] = pc_id;
  assign crash_dump_o[95:64] = pc_if;
  assign crash_dump_o[63:32] = lsu_addr_last;
  assign crash_dump_o[31:0] = csr_mepc;
  assign csr_wdata = alu_operand_a_ex;
  assign csr_addr = \$auto$rtlil.cc:3092:Mux$211 ;
  assign \g_no_pmp.unused_priv_lvl_ls  = priv_mode_lsu;
  assign \g_no_pmp.unused_csr_pmp_addr  = csr_pmp_addr;
  assign \g_no_pmp.unused_csr_pmp_cfg  = csr_pmp_cfg;
  assign \g_no_pmp.unused_csr_pmp_mseccfg  = csr_pmp_mseccfg;
  assign pmp_req_err[2] = 1'h0;
  assign pmp_req_err[1] = 1'h0;
  assign pmp_req_err[0] = 1'h0;
  assign unused_instr_id_done = instr_id_done;
  assign unused_instr_new_id = instr_new_id;
  assign \$9  = 1'h1;
  assign \$11  = data_req_out;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire [63:0] \$1 ;
  wire \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1647 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1648 ;
  /* src = "rtl/cve2/cve2_counter.sv:42.14-46.8" */
  wire [63:0] \$counter_d$6 ;
  /* src = "rtl/cve2/cve2_counter.sv:40.5-46.8" */
  wire [63:0] \$counter_d$7 ;
  /* src = "rtl/cve2/cve2_counter.sv:34.5-37.8" */
  wire [63:0] \$counter_load$5 ;
  wire [63:0] \$procmux$3837_Y ;
  wire \$procmux$3838_CMP ;
  wire [63:0] \$procmux$3840_Y ;
  wire \$procmux$3841_CMP ;
  wire [63:0] \$procmux$3845_Y ;
  wire \$procmux$3846_CMP ;
  wire [63:0] \$procmux$3848_Y ;
  wire \$procmux$3849_CMP ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd64),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter),
    .B(64'h0000000000000001),
    .Y(\$1 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(\$4 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1647 )
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$counter_q  (
    .AD(64'h0000000000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:43.7-43.49|rtl/cve2/cve2_counter.sv:42.14-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3837  (
    .A(counter_q),
    .B(\$1 ),
    .S(\$procmux$3838_CMP ),
    .Y(\$procmux$3837_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3840  (
    .A(\$procmux$3837_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$3841_CMP ),
    .Y(\$procmux$3840_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3845  (
    .A(\$counter_d$6 ),
    .B(\$counter_load$5 ),
    .S(\$procmux$3846_CMP ),
    .Y(\$procmux$3845_Y )
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3848  (
    .A({ counter_q[63:32], counter_val_i }),
    .B({ counter_val_i, counter_q[31:0] }),
    .S(\$procmux$3849_CMP ),
    .Y(\$procmux$3848_Y )
  );
  assign counter_upd = \$1 ;
  assign counter_load = \$counter_load$5 ;
  assign we = \$4 ;
  assign counter_d = \$counter_d$7 ;
  assign counter = counter_q;
  assign counter_val_upd_o = 64'h0000000000000000;
  assign counter_val_o = counter;
  assign \$procmux$3838_CMP  = counter_inc_i;
  assign \$procmux$3841_CMP  = \$4 ;
  assign \$counter_d$6  = \$procmux$3840_Y ;
  assign \$procmux$3846_CMP  = \$4 ;
  assign \$counter_d$7  = \$procmux$3845_Y ;
  assign \$procmux$3849_CMP  = counterh_we_i;
  assign \$counter_load$5  = \$procmux$3848_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1648  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire [63:0] \$1 ;
  wire \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1649 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1650 ;
  /* src = "rtl/cve2/cve2_counter.sv:42.14-46.8" */
  wire [63:0] \$counter_d$6 ;
  /* src = "rtl/cve2/cve2_counter.sv:40.5-46.8" */
  wire [63:0] \$counter_d$7 ;
  /* src = "rtl/cve2/cve2_counter.sv:34.5-37.8" */
  wire [63:0] \$counter_load$5 ;
  wire [63:0] \$procmux$3823_Y ;
  wire \$procmux$3824_CMP ;
  wire [63:0] \$procmux$3826_Y ;
  wire \$procmux$3827_CMP ;
  wire [63:0] \$procmux$3831_Y ;
  wire \$procmux$3832_CMP ;
  wire [63:0] \$procmux$3834_Y ;
  wire \$procmux$3835_CMP ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd64),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter),
    .B(64'h0000000000000001),
    .Y(\$1 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(\$4 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1649 )
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$counter_q  (
    .AD(64'h0000000000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:43.7-43.49|rtl/cve2/cve2_counter.sv:42.14-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3823  (
    .A(counter_q),
    .B(\$1 ),
    .S(\$procmux$3824_CMP ),
    .Y(\$procmux$3823_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3826  (
    .A(\$procmux$3823_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$3827_CMP ),
    .Y(\$procmux$3826_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3831  (
    .A(\$counter_d$6 ),
    .B(\$counter_load$5 ),
    .S(\$procmux$3832_CMP ),
    .Y(\$procmux$3831_Y )
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3834  (
    .A({ counter_q[63:32], counter_val_i }),
    .B({ counter_val_i, counter_q[31:0] }),
    .S(\$procmux$3835_CMP ),
    .Y(\$procmux$3834_Y )
  );
  assign counter_upd = \$1 ;
  assign counter_load = \$counter_load$5 ;
  assign we = \$4 ;
  assign counter_d = \$counter_d$7 ;
  assign counter = counter_q;
  assign counter_val_upd_o = counter_upd;
  assign counter_val_o = counter;
  assign \$procmux$3824_CMP  = counter_inc_i;
  assign \$procmux$3827_CMP  = \$4 ;
  assign \$counter_d$6  = \$procmux$3826_Y ;
  assign \$procmux$3832_CMP  = \$4 ;
  assign \$counter_d$7  = \$procmux$3831_Y ;
  assign \$procmux$3835_CMP  = counterh_we_i;
  assign \$counter_load$5  = \$procmux$3834_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1650  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_cs_registers.sv:15.8" */
module \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i (clk_i, rst_ni, boot_addr_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire \$1 ;
  wire \$11 ;
  wire \$127 ;
  wire \$152 ;
  wire \$16 ;
  wire \$18 ;
  wire [31:0] \$181 ;
  wire [31:0] \$183 ;
  wire [31:0] \$185 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire [18:0] \$198 ;
  wire \$20 ;
  wire \$200 ;
  wire \$203 ;
  wire \$208 ;
  wire \$210 ;
  wire \$212 ;
  wire \$214 ;
  wire \$219 ;
  wire \$22 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$248 ;
  wire \$250 ;
  wire \$252 ;
  wire \$3 ;
  wire \$5 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$9 ;
  wire [5:0] \$auto$rtlil.cc:2957:Not$968 ;
  wire [5:0] \$auto$rtlil.cc:2957:Not$973 ;
  wire [5:0] \$auto$rtlil.cc:2957:Not$978 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$1003 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$1025 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1019 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1020 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1026 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1027 ;
  wire [31:0] \$auto$rtlil.cc:3004:And$16668 ;
  wire [31:0] \$auto$rtlil.cc:3004:And$16670 ;
  wire \$auto$rtlil.cc:3009:Lt$1006 ;
  wire \$auto$rtlil.cc:3009:Lt$1013 ;
  wire \$auto$rtlil.cc:3011:Eq$1000 ;
  wire \$auto$rtlil.cc:3011:Eq$1001 ;
  wire \$auto$rtlil.cc:3011:Eq$1002 ;
  wire \$auto$rtlil.cc:3011:Eq$1022 ;
  wire \$auto$rtlil.cc:3011:Eq$1023 ;
  wire \$auto$rtlil.cc:3011:Eq$1024 ;
  wire \$auto$rtlil.cc:3011:Eq$983 ;
  wire \$auto$rtlil.cc:3011:Eq$984 ;
  wire \$auto$rtlil.cc:3011:Eq$985 ;
  wire \$auto$rtlil.cc:3011:Eq$986 ;
  wire \$auto$rtlil.cc:3011:Eq$987 ;
  wire \$auto$rtlil.cc:3011:Eq$988 ;
  wire \$auto$rtlil.cc:3011:Eq$989 ;
  wire \$auto$rtlil.cc:3011:Eq$990 ;
  wire \$auto$rtlil.cc:3011:Eq$991 ;
  wire \$auto$rtlil.cc:3011:Eq$992 ;
  wire \$auto$rtlil.cc:3011:Eq$993 ;
  wire \$auto$rtlil.cc:3011:Eq$994 ;
  wire \$auto$rtlil.cc:3011:Eq$995 ;
  wire \$auto$rtlil.cc:3011:Eq$996 ;
  wire \$auto$rtlil.cc:3011:Eq$997 ;
  wire \$auto$rtlil.cc:3011:Eq$998 ;
  wire \$auto$rtlil.cc:3011:Eq$999 ;
  wire \$auto$rtlil.cc:3015:Ge$1005 ;
  wire \$auto$rtlil.cc:3015:Ge$1012 ;
  wire \$auto$rtlil.cc:3015:Ge$969 ;
  wire \$auto$rtlil.cc:3015:Ge$974 ;
  wire \$auto$rtlil.cc:3015:Ge$979 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1007 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1014 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1004 ;
  wire \$auto$rtlil.cc:3092:Mux$1008 ;
  wire \$auto$rtlil.cc:3092:Mux$1015 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1021 ;
  wire \$auto$rtlil.cc:3092:Mux$1028 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$971 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$972 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$976 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$977 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$981 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$982 ;
  wire [31:0] \$auto$rtlil.cc:3093:Bwmux$1011 ;
  wire [31:0] \$auto$rtlil.cc:3093:Bwmux$1018 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$970 ;
  wire [63:0] \$auto$rtlil.cc:3113:Bmux$975 ;
  wire [63:0] \$auto$rtlil.cc:3113:Bmux$980 ;
  wire [31:0] \$auto$rtlil.cc:3114:Demux$1009 ;
  wire [31:0] \$auto$rtlil.cc:3114:Demux$1010 ;
  wire [31:0] \$auto$rtlil.cc:3114:Demux$1016 ;
  wire [31:0] \$auto$rtlil.cc:3114:Demux$1017 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  wire [31:0] \$csr_rdata_int$38 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  wire [31:0] \$csr_wdata_int$186 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$dcsr_d$101 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [31:0] \$dcsr_d$117 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [1:0] \$dcsr_d[1:0]$145 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [1:0] \$dcsr_d[1:0]$169 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  wire [1:0] \$dcsr_d[1:0]$78 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [2:0] \$dcsr_d[8:6]$146 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [2:0] \$dcsr_d[8:6]$170 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dcsr_en$102 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$dcsr_en$118 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$dcsr_en$147 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$dcsr_en$171 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$depc_d$148 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [31:0] \$depc_d$172 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$depc_en$103 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$depc_en$119 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$depc_en$149 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$depc_en$173 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch0_en$104 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$dscratch0_en$120 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch1_en$105 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$dscratch1_en$121 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  wire [31:0] \$exception_pc$125 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [31:0] \$exception_pc$159 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:337.9-344.12" */
  wire \$illegal_csr$13 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:348.9-352.12" */
  wire \$illegal_csr$14 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  wire \$illegal_csr$39 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.7-480.10" */
  wire \$illegal_csr$61 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:473.5-481.8" */
  wire \$illegal_csr$62 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [6:0] \$mcause_d$132 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [6:0] \$mcause_d$141 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [6:0] \$mcause_d$157 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [6:0] \$mcause_d$165 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mcause_en$114 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mcause_en$133 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mcause_en$142 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mcause_en$158 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$mcause_en$166 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcause_en$98 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1155.5-1160.8" */
  wire [2:0] \$mcountinhibit_d$204 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcountinhibit_we$106 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mcountinhibit_we$122 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mepc_d$130 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mepc_d$139 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [31:0] \$mepc_d$155 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [31:0] \$mepc_d$163 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mepc_en$113 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mepc_en$131 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mepc_en$140 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mepc_en$156 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$mepc_en$164 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mepc_en$97 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$mhpmcounter_we$107 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [31:0] \$mhpmcounter_we$123 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$mhpmcounterh_we$108 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [31:0] \$mhpmcounterh_we$124 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mie_en$111 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mie_en$95 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mscratch_en$112 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mscratch_en$96 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mstack_en$136 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstack_en$150 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$mstack_en$174 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [5:0] \$mstatus_d$109 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [5:0] \$mstatus_d$93 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  wire \$mstatus_d[1]$153 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  wire [1:0] \$mstatus_d[3:2]$71 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [2:0] \$mstatus_d[4:2]$154 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [4:0] \$mstatus_d[5:1]$161 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [3:0] \$mstatus_d[5:2]$128 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [3:0] \$mstatus_d[5:2]$137 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mstatus_en$110 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mstatus_en$129 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstatus_en$138 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$mstatus_en$162 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mstatus_en$94 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mtval_d$134 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mtval_d$143 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [31:0] \$mtval_d$167 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mtval_en$115 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mtval_en$135 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mtval_en$144 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire \$mtval_en$168 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtval_en$99 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtvec_en$100 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mtvec_en$116 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  wire [1:0] \$priv_lvl_d$160 ;
  wire [31:0] \$procmux$11227_Y ;
  wire \$procmux$11228_CMP ;
  wire \$procmux$11229_CMP ;
  wire \$procmux$11230_CMP ;
  wire \$procmux$11231_CMP ;
  wire [2:0] \$procmux$11233_Y ;
  wire \$procmux$11234_CMP ;
  wire [3:0] \$procmux$11238_Y ;
  wire \$procmux$11239_CMP ;
  wire \$procmux$11242_CMP ;
  wire \$procmux$11246_Y ;
  wire \$procmux$11247_CMP ;
  wire \$procmux$11249_Y ;
  wire \$procmux$11250_CMP ;
  wire [6:0] \$procmux$11254_Y ;
  wire \$procmux$11255_CMP ;
  wire [6:0] \$procmux$11257_Y ;
  wire \$procmux$11258_CMP ;
  wire \$procmux$11262_Y ;
  wire \$procmux$11263_CMP ;
  wire \$procmux$11265_Y ;
  wire \$procmux$11266_CMP ;
  wire [31:0] \$procmux$11270_Y ;
  wire \$procmux$11271_CMP ;
  wire [31:0] \$procmux$11273_Y ;
  wire \$procmux$11274_CMP ;
  wire \$procmux$11277_Y ;
  wire \$procmux$11278_CMP ;
  wire \$procmux$11279_Y ;
  wire \$procmux$11280_CMP ;
  wire \$procmux$11285_Y ;
  wire \$procmux$11286_CMP ;
  wire [2:0] \$procmux$11290_Y ;
  wire \$procmux$11291_CMP ;
  wire [2:0] \$procmux$11293_Y ;
  wire \$procmux$11294_CMP ;
  wire \$procmux$11299_Y ;
  wire \$procmux$11300_CMP ;
  wire \$procmux$11302_Y ;
  wire \$procmux$11303_CMP ;
  wire \$procmux$11305_Y ;
  wire \$procmux$11306_CMP ;
  wire [31:0] \$procmux$11311_Y ;
  wire \$procmux$11312_CMP ;
  wire [31:0] \$procmux$11314_Y ;
  wire \$procmux$11315_CMP ;
  wire [31:0] \$procmux$11317_Y ;
  wire \$procmux$11318_CMP ;
  wire \$procmux$11323_Y ;
  wire \$procmux$11324_CMP ;
  wire \$procmux$11326_Y ;
  wire \$procmux$11327_CMP ;
  wire \$procmux$11329_Y ;
  wire \$procmux$11330_CMP ;
  wire [6:0] \$procmux$11335_Y ;
  wire \$procmux$11336_CMP ;
  wire [6:0] \$procmux$11338_Y ;
  wire \$procmux$11339_CMP ;
  wire [6:0] \$procmux$11341_Y ;
  wire \$procmux$11342_CMP ;
  wire \$procmux$11347_Y ;
  wire \$procmux$11348_CMP ;
  wire \$procmux$11350_Y ;
  wire \$procmux$11351_CMP ;
  wire \$procmux$11353_Y ;
  wire \$procmux$11354_CMP ;
  wire [31:0] \$procmux$11359_Y ;
  wire \$procmux$11360_CMP ;
  wire [31:0] \$procmux$11362_Y ;
  wire \$procmux$11363_CMP ;
  wire [31:0] \$procmux$11365_Y ;
  wire \$procmux$11366_CMP ;
  wire \$procmux$11371_Y ;
  wire \$procmux$11372_CMP ;
  wire \$procmux$11374_Y ;
  wire \$procmux$11375_CMP ;
  wire \$procmux$11377_Y ;
  wire \$procmux$11378_CMP ;
  wire [3:0] \$procmux$11383_Y ;
  wire \$procmux$11384_CMP ;
  wire [3:0] \$procmux$11386_Y ;
  wire \$procmux$11387_CMP ;
  wire [3:0] \$procmux$11389_Y ;
  wire \$procmux$11390_CMP ;
  wire \$procmux$11397_Y ;
  wire \$procmux$11398_CMP ;
  wire \$procmux$11400_Y ;
  wire \$procmux$11401_CMP ;
  wire \$procmux$11407_Y ;
  wire \$procmux$11408_CMP ;
  wire \$procmux$11410_Y ;
  wire \$procmux$11411_CMP ;
  wire [31:0] \$procmux$11417_Y ;
  wire \$procmux$11418_CMP ;
  wire [31:0] \$procmux$11420_Y ;
  wire \$procmux$11421_CMP ;
  wire \$procmux$11427_Y ;
  wire \$procmux$11428_CMP ;
  wire \$procmux$11430_Y ;
  wire \$procmux$11431_CMP ;
  wire [2:0] \$procmux$11437_Y ;
  wire \$procmux$11438_CMP ;
  wire [2:0] \$procmux$11440_Y ;
  wire \$procmux$11441_CMP ;
  wire [1:0] \$procmux$11447_Y ;
  wire \$procmux$11448_CMP ;
  wire [1:0] \$procmux$11450_Y ;
  wire \$procmux$11451_CMP ;
  wire \$procmux$11458_Y ;
  wire \$procmux$11459_CMP ;
  wire \$procmux$11461_Y ;
  wire \$procmux$11462_CMP ;
  wire [31:0] \$procmux$11469_Y ;
  wire \$procmux$11470_CMP ;
  wire [31:0] \$procmux$11472_Y ;
  wire \$procmux$11473_CMP ;
  wire \$procmux$11480_Y ;
  wire \$procmux$11481_CMP ;
  wire \$procmux$11483_Y ;
  wire \$procmux$11484_CMP ;
  wire [6:0] \$procmux$11491_Y ;
  wire \$procmux$11492_CMP ;
  wire [6:0] \$procmux$11494_Y ;
  wire \$procmux$11495_CMP ;
  wire \$procmux$11502_Y ;
  wire \$procmux$11503_CMP ;
  wire \$procmux$11505_Y ;
  wire \$procmux$11506_CMP ;
  wire [31:0] \$procmux$11513_Y ;
  wire \$procmux$11514_CMP ;
  wire [31:0] \$procmux$11516_Y ;
  wire \$procmux$11517_CMP ;
  wire \$procmux$11524_Y ;
  wire \$procmux$11525_CMP ;
  wire \$procmux$11527_Y ;
  wire \$procmux$11528_CMP ;
  wire [3:0] \$procmux$11535_Y ;
  wire \$procmux$11536_CMP ;
  wire [3:0] \$procmux$11538_Y ;
  wire \$procmux$11539_CMP ;
  wire [31:0] \$procmux$11546_Y ;
  wire \$procmux$11547_CMP ;
  wire [31:0] \$procmux$11548_Y ;
  wire \$procmux$11549_CMP ;
  wire \$procmux$11556_Y ;
  wire \$procmux$11557_CMP ;
  wire \$procmux$11564_Y ;
  wire \$procmux$11565_CMP ;
  wire [31:0] \$procmux$11572_Y ;
  wire \$procmux$11573_CMP ;
  wire \$procmux$11580_Y ;
  wire \$procmux$11581_CMP ;
  wire [2:0] \$procmux$11588_Y ;
  wire \$procmux$11589_CMP ;
  wire [1:0] \$procmux$11596_Y ;
  wire \$procmux$11597_CMP ;
  wire \$procmux$11604_Y ;
  wire \$procmux$11605_CMP ;
  wire [31:0] \$procmux$11612_Y ;
  wire \$procmux$11613_CMP ;
  wire \$procmux$11618_Y ;
  wire \$procmux$11619_CMP ;
  wire \$procmux$11622_CMP ;
  wire [6:0] \$procmux$11627_Y ;
  wire \$procmux$11628_CMP ;
  wire \$procmux$11631_CMP ;
  wire \$procmux$11636_Y ;
  wire \$procmux$11637_CMP ;
  wire \$procmux$11640_CMP ;
  wire [31:0] \$procmux$11645_Y ;
  wire \$procmux$11646_CMP ;
  wire \$procmux$11649_CMP ;
  wire \$procmux$11654_Y ;
  wire \$procmux$11655_CMP ;
  wire \$procmux$11658_CMP ;
  wire \$procmux$11663_Y ;
  wire \$procmux$11664_CMP ;
  wire \$procmux$11666_Y ;
  wire \$procmux$11667_CMP ;
  wire \$procmux$11669_Y ;
  wire \$procmux$11670_CMP ;
  wire [1:0] \$procmux$11675_Y ;
  wire \$procmux$11676_CMP ;
  wire \$procmux$11677_CMP ;
  wire \$procmux$11680_CMP ;
  wire [31:0] \$procmux$11687_Y ;
  wire \$procmux$11688_CMP ;
  wire [1:0] \$procmux$11697_Y ;
  wire \$procmux$11698_CMP ;
  wire [1:0] \$procmux$11699_Y ;
  wire \$procmux$11700_CMP ;
  wire [1:0] \$procmux$11701_Y ;
  wire \$procmux$11702_CMP ;
  wire [1:0] \$procmux$11717_Y ;
  wire \$procmux$11718_CMP ;
  wire [1:0] \$procmux$11719_Y ;
  wire \$procmux$11720_CMP ;
  wire [1:0] \$procmux$11721_Y ;
  wire \$procmux$11722_CMP ;
  wire [31:0] \$procmux$11724_Y ;
  wire [30:0] \$procmux$11725_CMP ;
  wire \$procmux$11725_CTRL ;
  wire [31:0] \$procmux$11726_Y ;
  wire \$procmux$11727_CMP ;
  wire [31:0] \$procmux$11730_Y ;
  wire [30:0] \$procmux$11731_CMP ;
  wire \$procmux$11731_CTRL ;
  wire [31:0] \$procmux$11732_Y ;
  wire \$procmux$11733_CMP ;
  wire \$procmux$11737_Y ;
  wire \$procmux$11738_CMP ;
  wire \$procmux$11739_Y ;
  wire \$procmux$11740_CMP ;
  wire \$procmux$11745_Y ;
  wire \$procmux$11746_CMP ;
  wire \$procmux$11747_Y ;
  wire \$procmux$11748_CMP ;
  wire \$procmux$11754_Y ;
  wire \$procmux$11755_CMP ;
  wire \$procmux$11756_Y ;
  wire \$procmux$11757_CMP ;
  wire \$procmux$11764_Y ;
  wire \$procmux$11765_CMP ;
  wire \$procmux$11766_Y ;
  wire \$procmux$11767_CMP ;
  wire \$procmux$11776_Y ;
  wire \$procmux$11777_CMP ;
  wire \$procmux$11778_Y ;
  wire \$procmux$11779_CMP ;
  wire [31:0] \$procmux$11788_Y ;
  wire \$procmux$11789_CMP ;
  wire [31:0] \$procmux$11790_Y ;
  wire \$procmux$11791_CMP ;
  wire \$procmux$11800_Y ;
  wire \$procmux$11801_CMP ;
  wire \$procmux$11802_Y ;
  wire \$procmux$11803_CMP ;
  wire \$procmux$11813_Y ;
  wire \$procmux$11814_CMP ;
  wire \$procmux$11815_Y ;
  wire \$procmux$11816_CMP ;
  wire \$procmux$11827_Y ;
  wire \$procmux$11828_CMP ;
  wire \$procmux$11829_Y ;
  wire \$procmux$11830_CMP ;
  wire \$procmux$11842_Y ;
  wire \$procmux$11843_CMP ;
  wire \$procmux$11844_Y ;
  wire \$procmux$11845_CMP ;
  wire \$procmux$11858_Y ;
  wire \$procmux$11859_CMP ;
  wire \$procmux$11860_Y ;
  wire \$procmux$11861_CMP ;
  wire \$procmux$11875_Y ;
  wire \$procmux$11876_CMP ;
  wire \$procmux$11877_Y ;
  wire \$procmux$11878_CMP ;
  wire \$procmux$11894_Y ;
  wire \$procmux$11895_CMP ;
  wire \$procmux$11896_Y ;
  wire \$procmux$11897_CMP ;
  wire [5:0] \$procmux$11913_Y ;
  wire \$procmux$11914_CMP ;
  wire [5:0] \$procmux$11915_Y ;
  wire \$procmux$11916_CMP ;
  wire [31:0] \$procmux$11918_Y ;
  wire \$procmux$11919_CMP ;
  wire [31:0] \$procmux$11921_Y ;
  wire \$procmux$11922_CMP ;
  wire \$procmux$11924_Y ;
  wire \$procmux$11925_CMP ;
  wire \$procmux$11927_Y ;
  wire \$procmux$11928_CMP ;
  wire \$procmux$11930_Y ;
  wire \$procmux$11931_CMP ;
  wire \$procmux$11933_Y ;
  wire \$procmux$11934_CMP ;
  wire \$procmux$11936_Y ;
  wire \$procmux$11937_CMP ;
  wire [31:0] \$procmux$11939_Y ;
  wire \$procmux$11940_CMP ;
  wire \$procmux$11942_Y ;
  wire \$procmux$11943_CMP ;
  wire \$procmux$11945_Y ;
  wire \$procmux$11946_CMP ;
  wire \$procmux$11948_Y ;
  wire \$procmux$11949_CMP ;
  wire \$procmux$11951_Y ;
  wire \$procmux$11952_CMP ;
  wire \$procmux$11954_Y ;
  wire \$procmux$11955_CMP ;
  wire \$procmux$11957_Y ;
  wire \$procmux$11958_CMP ;
  wire \$procmux$11960_Y ;
  wire \$procmux$11961_CMP ;
  wire [5:0] \$procmux$11963_Y ;
  wire \$procmux$11964_CMP ;
  wire \$procmux$11967_Y ;
  wire \$procmux$11968_CMP ;
  wire \$procmux$12006_Y ;
  wire \$procmux$12007_CMP ;
  wire \$procmux$12045_Y ;
  wire \$procmux$12046_CMP ;
  wire \$procmux$12048_Y ;
  wire \$procmux$12049_CMP ;
  wire \$procmux$12050_CMP ;
  wire \$procmux$12051_CMP ;
  wire \$procmux$12052_CMP ;
  wire \$procmux$12053_CMP ;
  wire \$procmux$12054_CMP ;
  wire \$procmux$12055_CMP ;
  wire [30:0] \$procmux$12056_CMP ;
  wire \$procmux$12056_CTRL ;
  wire [30:0] \$procmux$12057_CMP ;
  wire \$procmux$12057_CTRL ;
  wire [28:0] \$procmux$12058_CMP ;
  wire \$procmux$12058_CTRL ;
  wire \$procmux$12059_CMP ;
  wire \$procmux$12060_CMP ;
  wire \$procmux$12061_CMP ;
  wire \$procmux$12062_CMP ;
  wire \$procmux$12063_CMP ;
  wire \$procmux$12064_CMP ;
  wire \$procmux$12065_CMP ;
  wire \$procmux$12066_CMP ;
  wire \$procmux$12067_CMP ;
  wire \$procmux$12068_CMP ;
  wire \$procmux$12069_CMP ;
  wire \$procmux$12070_CMP ;
  wire \$procmux$12071_CMP ;
  wire \$procmux$12072_CMP ;
  wire \$procmux$12073_CMP ;
  wire \$procmux$12074_CMP ;
  wire \$procmux$12075_CMP ;
  wire \$procmux$12076_CMP ;
  wire \$procmux$12077_CMP ;
  wire \$procmux$12078_CMP ;
  wire \$procmux$12079_CMP ;
  wire \$procmux$12080_CMP ;
  wire \$procmux$12081_CMP ;
  wire \$procmux$12082_CMP ;
  wire \$procmux$12083_CMP ;
  wire \$procmux$12084_CMP ;
  wire \$procmux$12085_CMP ;
  wire \$procmux$12086_CMP ;
  wire \$procmux$12087_CMP ;
  wire \$procmux$12088_CMP ;
  wire \$procmux$12089_CMP ;
  wire \$procmux$12090_CMP ;
  wire \$procmux$12091_CMP ;
  wire \$procmux$12092_CMP ;
  wire \$procmux$12093_CMP ;
  wire \$procmux$12094_CMP ;
  wire [1:0] \$procmux$12095_CMP ;
  wire \$procmux$12095_CTRL ;
  wire \$procmux$12096_CMP ;
  wire \$procmux$12097_CMP ;
  wire \$procmux$12098_CMP ;
  wire \$procmux$12099_CMP ;
  wire \$procmux$12100_CMP ;
  wire \$procmux$12101_CMP ;
  wire \$procmux$12102_CMP ;
  wire [31:0] \$procmux$12108_Y ;
  wire \$procmux$12109_CMP ;
  wire \$procmux$12110_CMP ;
  wire \$procmux$12111_CMP ;
  wire [30:0] \$procmux$12112_CMP ;
  wire \$procmux$12112_CTRL ;
  wire [30:0] \$procmux$12113_CMP ;
  wire \$procmux$12113_CTRL ;
  wire [28:0] \$procmux$12114_CMP ;
  wire \$procmux$12114_CTRL ;
  wire \$procmux$12115_CMP ;
  wire \$procmux$12116_CMP ;
  wire \$procmux$12117_CMP ;
  wire \$procmux$12118_CMP ;
  wire \$procmux$12119_CMP ;
  wire \$procmux$12120_CMP ;
  wire \$procmux$12121_CMP ;
  wire \$procmux$12122_CMP ;
  wire \$procmux$12123_CMP ;
  wire \$procmux$12124_CMP ;
  wire \$procmux$12125_CMP ;
  wire \$procmux$12126_CMP ;
  wire \$procmux$12127_CMP ;
  wire \$procmux$12128_CMP ;
  wire \$procmux$12129_CMP ;
  wire \$procmux$12130_CMP ;
  wire \$procmux$12131_CMP ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:43.32" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:98.32" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:99.32" */
  input branch_taken_i;
  wire branch_taken_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:29.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:46.32" */
  input csr_access_i;
  wire csr_access_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:246.32" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:47.32" */
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:73.32" */
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:88.32" */
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:62.32" */
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:61.32" */
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:38.32" */
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:89.32" */
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:42.32" */
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:41.32" */
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:50.32" */
  input csr_op_en_i;
  wire csr_op_en_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:49.32" */
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:66.34" */
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:65.34" */
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:67.34" */
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:228.16" */
  wire [31:0] csr_rdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:51.32" */
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:86.32" */
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:85.32" */
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:87.32" */
  input csr_save_cause_i;
  wire csr_save_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:84.32" */
  input csr_save_id_i;
  wire csr_save_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:83.32" */
  input csr_save_if_i;
  wire csr_save_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:48.32" */
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:227.16" */
  wire [31:0] csr_wdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:229.16" */
  wire csr_we_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:230.16" */
  wire csr_wr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.24" */
  wire [31:0] dcsr_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:181.16" */
  wire dcsr_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.16" */
  wire [31:0] dcsr_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:71.32" */
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:72.32" */
  input debug_csr_save_i;
  wire debug_csr_save_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:75.32" */
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:76.32" */
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:70.32" */
  input debug_mode_i;
  wire debug_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:74.32" */
  output debug_single_step_o;
  wire debug_single_step_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.24" */
  wire [31:0] depc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:183.16" */
  wire depc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.16" */
  wire [31:0] depc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:104.32" */
  input div_wait_i;
  wire div_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.16" */
  wire dscratch0_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:184.16" */
  wire [31:0] dscratch0_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.30" */
  wire dscratch1_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:185.16" */
  wire [31:0] dscratch1_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:102.32" */
  input dside_wait_i;
  wire dside_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:161.16" */
  wire [31:0] exception_pc;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1292.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_incr ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1290.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1291.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounterh_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1325.31" */
  wire \gen_trigger_regs.selected_tmatch_control ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1326.31" */
  wire [31:0] \gen_trigger_regs.selected_tmatch_value ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1321.31" */
  wire \gen_trigger_regs.tmatch_control_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1322.31" */
  wire \gen_trigger_regs.tmatch_control_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1330.31" */
  wire \gen_trigger_regs.tmatch_control_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1323.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1324.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1331.31" */
  wire \gen_trigger_regs.tmatch_value_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1333.31" */
  wire \gen_trigger_regs.trigger_match ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.31" */
  wire \gen_trigger_regs.tselect_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.42" */
  wire \gen_trigger_regs.tselect_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1329.31" */
  wire \gen_trigger_regs.tselect_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:33.32" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:233.16" */
  wire illegal_csr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:90.32" */
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:234.16" */
  wire illegal_csr_priv;
  /* src = "rtl/cve2/cve2_cs_registers.sv:235.16" */
  wire illegal_csr_write;
  /* src = "rtl/cve2/cve2_cs_registers.sv:95.32" */
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:94.32" */
  input instr_ret_i;
  wire instr_ret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:56.32" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:57.32" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:59.32" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:54.32" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:55.32" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:60.32" */
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:96.32" */
  input iside_wait_i;
  wire iside_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:97.32" */
  input jump_i;
  wire jump_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.26" */
  wire [6:0] mcause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:174.16" */
  wire mcause_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.16" */
  wire [6:0] mcause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:201.32" */
  wire [31:0] mcountinhibit;
  /* src = "rtl/cve2/cve2_cs_registers.sv:203.32" */
  wire [2:0] mcountinhibit_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:203.49" */
  wire [2:0] mcountinhibit_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:204.32" */
  wire mcountinhibit_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:100.32" */
  input mem_load_i;
  wire mem_load_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:101.32" */
  input mem_store_i;
  wire mem_store_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.24" */
  wire [31:0] mepc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:172.16" */
  wire mepc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.16" */
  wire [31:0] mepc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:209.16" */
  wire [2047:0] mhpmcounter;
  /* src = "rtl/cve2/cve2_cs_registers.sv:214.16" */
  wire [4:0] mhpmcounter_idx;
  /* src = "rtl/cve2/cve2_cs_registers.sv:212.16" */
  wire [31:0] mhpmcounter_incr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:210.16" */
  wire [31:0] mhpmcounter_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:211.16" */
  wire [31:0] mhpmcounterh_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:213.16" */
  wire [1023:0] mhpmevent;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.23" */
  wire [18:0] mie_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:168.16" */
  wire mie_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.16" */
  wire [18:0] mie_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:219.16" */
  wire [63:0] minstret_raw;
  /* src = "rtl/cve2/cve2_cs_registers.sv:179.16" */
  wire [18:0] mip;
  /* src = "rtl/cve2/cve2_cs_registers.sv:170.16" */
  wire mscratch_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:169.16" */
  wire [31:0] mscratch_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.32" */
  wire [6:0] mstack_cause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.16" */
  wire [6:0] mstack_cause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.26" */
  wire [2:0] mstack_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:191.16" */
  wire mstack_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.30" */
  wire [31:0] mstack_epc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.16" */
  wire [31:0] mstack_epc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.16" */
  wire [2:0] mstack_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.27" */
  wire [5:0] mstatus_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:166.16" */
  wire mstatus_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.16" */
  wire [5:0] mstatus_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.25" */
  wire [31:0] mtval_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:176.16" */
  wire mtval_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.16" */
  wire [31:0] mtval_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.25" */
  wire [31:0] mtvec_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:178.16" */
  wire mtvec_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.16" */
  wire [31:0] mtvec_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:58.32" */
  input nmi_mode_i;
  wire nmi_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:80.32" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:79.32" */
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:196.32" */
  wire [511:0] pmp_addr_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:197.32" */
  wire [127:0] pmp_cfg_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:198.32" */
  wire [2:0] pmp_mseccfg;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.28" */
  wire [1:0] priv_lvl_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.16" */
  wire [1:0] priv_lvl_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:36.32" */
  output [1:0] priv_mode_id_o;
  wire [1:0] priv_mode_id_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:37.32" */
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:30.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_cs_registers.sv:223.16" */
  wire [31:0] tmatch_control_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:224.16" */
  wire [31:0] tmatch_value_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:77.32" */
  output trigger_match_o;
  wire trigger_match_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:222.16" */
  wire [31:0] tselect_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:237.16" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:238.16" */
  wire [2:0] unused_csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:217.16" */
  wire unused_mhpmcounter_incr_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:215.16" */
  wire unused_mhpmcounter_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:216.16" */
  wire unused_mhpmcounterh_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:103.32" */
  input wfi_wait_i;
  wire wfi_wait_i;
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(csr_addr[9:8]),
    .B(priv_lvl_q),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(csr_access_i),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(debug_mode_i),
    .Y(\$127 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(debug_mode_i),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(mstatus_q[3:2]),
    .B(2'h3),
    .Y(\$152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(debug_mode_i),
    .Y(\$18 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1019 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$178  (
    .A(priv_lvl_q),
    .B(mstatus_q[3:2]),
    .S(mstatus_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1021 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$180  (
    .A(csr_wdata_i),
    .B(csr_rdata_o),
    .Y(\$181 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$182  (
    .A(csr_wdata_i),
    .Y(\$183 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$184  (
    .A(\$183 ),
    .B(csr_rdata_o),
    .Y(\$185 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(csr_op_i),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3011:Eq$1022 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(csr_op_i),
    .B(2'h2),
    .Y(\$auto$rtlil.cc:3011:Eq$1023 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(csr_op_i),
    .B(2'h3),
    .Y(\$auto$rtlil.cc:3011:Eq$1024 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(debug_mode_i),
    .Y(\$20 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A({ \$auto$rtlil.cc:3011:Eq$1024 , \$auto$rtlil.cc:3011:Eq$1023 , \$auto$rtlil.cc:3011:Eq$1022  }),
    .Y(\$auto$rtlil.cc:2964:ReduceBool$1025 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(csr_wr),
    .B(csr_op_en_i),
    .Y(\$192 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(illegal_csr_insn_o),
    .Y(\$194 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$192 ),
    .B(\$194 ),
    .Y(\$196 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd19),
    .Y_WIDTH(32'd19)
  ) \$197  (
    .A(mip),
    .B(mie_q),
    .Y(\$198 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(irqs_o),
    .Y(\$200 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(csr_addr[11:10]),
    .B(2'h3),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(mcountinhibit[0]),
    .Y(\$208 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(debug_mode_i),
    .Y(\$22 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$211  (
    .A(mcountinhibit[2]),
    .Y(\$212 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$213  (
    .A(mhpmcounter_incr[2]),
    .B(\$212 ),
    .Y(\$214 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$216  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1026 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A(csr_we_int),
    .B(debug_mode_i),
    .Y(\$219 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(csr_addr_i),
    .B(12'h7a0),
    .Y(\$221 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(\$219 ),
    .B(\$221 ),
    .Y(\$223 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(\gen_trigger_regs.tselect_q ),
    .Y(\$225 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(\$225 ),
    .B(csr_we_int),
    .Y(\$227 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(\$227 ),
    .B(debug_mode_i),
    .Y(\$229 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$23  (
    .A({ 1'h0, mhpmcounter_idx }),
    .Y(\$auto$rtlil.cc:2957:Not$968 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(csr_addr_i),
    .B(12'h7a1),
    .Y(\$231 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(\$229 ),
    .B(\$231 ),
    .Y(\$233 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(\gen_trigger_regs.tselect_q ),
    .Y(\$235 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(\$235 ),
    .B(csr_we_int),
    .Y(\$237 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$237 ),
    .B(debug_mode_i),
    .Y(\$239 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:2957:Not$968 ),
    .B(6'h20),
    .Y(\$auto$rtlil.cc:3015:Ge$969 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(csr_addr_i),
    .B(12'h7a2),
    .Y(\$241 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\$239 ),
    .B(\$241 ),
    .Y(\$243 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(csr_wdata_int),
    .B(32'd1),
    .Y(\$245 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$246  (
    .A(1'h0),
    .B(csr_wdata_int[0]),
    .S(\$245 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1028 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(pc_if_i),
    .B(\gen_trigger_regs.tmatch_value_q ),
    .Y(\$248 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(\gen_trigger_regs.tmatch_control_q ),
    .B(\$248 ),
    .Y(\$250 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$25  (
    .A(1024'h0000000100000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(\$auto$rtlil.cc:2957:Not$968 [4:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$970 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$26  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$970 ),
    .S(\$auto$rtlil.cc:3015:Ge$969 ),
    .Y(\$auto$rtlil.cc:3092:Mux$971 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$27  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3092:Mux$971 ),
    .S(\$auto$rtlil.cc:2957:Not$968 [5]),
    .Y(\$auto$rtlil.cc:3092:Mux$972 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$28  (
    .A({ 1'h0, mhpmcounter_idx }),
    .Y(\$auto$rtlil.cc:2957:Not$973 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(\$auto$rtlil.cc:2957:Not$973 ),
    .B(6'h20),
    .Y(\$auto$rtlil.cc:3015:Ge$974 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$30  (
    .A(mhpmcounter),
    .S(\$auto$rtlil.cc:2957:Not$973 [4:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$975 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$31  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$975 ),
    .S(\$auto$rtlil.cc:3015:Ge$974 ),
    .Y(\$auto$rtlil.cc:3092:Mux$976 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$32  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3092:Mux$976 ),
    .S(\$auto$rtlil.cc:2957:Not$973 [5]),
    .Y(\$auto$rtlil.cc:3092:Mux$977 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$33  (
    .A({ 1'h0, mhpmcounter_idx }),
    .Y(\$auto$rtlil.cc:2957:Not$978 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$auto$rtlil.cc:2957:Not$978 ),
    .B(6'h20),
    .Y(\$auto$rtlil.cc:3015:Ge$979 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$35  (
    .A(mhpmcounter),
    .S(\$auto$rtlil.cc:2957:Not$978 [4:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$980 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$36  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$980 ),
    .S(\$auto$rtlil.cc:3015:Ge$979 ),
    .Y(\$auto$rtlil.cc:3092:Mux$981 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$37  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3092:Mux$981 ),
    .S(\$auto$rtlil.cc:2957:Not$978 [5]),
    .Y(\$auto$rtlil.cc:3092:Mux$982 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .B(csr_wr),
    .Y(\$5 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(csr_addr),
    .B(12'h3a0),
    .Y(\$auto$rtlil.cc:3011:Eq$983 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(csr_addr),
    .B(12'h3a1),
    .Y(\$auto$rtlil.cc:3011:Eq$984 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(csr_addr),
    .B(12'h3a2),
    .Y(\$auto$rtlil.cc:3011:Eq$985 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(csr_addr),
    .B(12'h3a3),
    .Y(\$auto$rtlil.cc:3011:Eq$986 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(csr_addr),
    .B(12'h3b0),
    .Y(\$auto$rtlil.cc:3011:Eq$987 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(csr_addr),
    .B(12'h3b1),
    .Y(\$auto$rtlil.cc:3011:Eq$988 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(csr_addr),
    .B(12'h3b2),
    .Y(\$auto$rtlil.cc:3011:Eq$989 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(csr_addr),
    .B(12'h3b3),
    .Y(\$auto$rtlil.cc:3011:Eq$990 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(csr_addr),
    .B(12'h3b4),
    .Y(\$auto$rtlil.cc:3011:Eq$991 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(csr_addr),
    .B(12'h3b5),
    .Y(\$auto$rtlil.cc:3011:Eq$992 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(csr_addr),
    .B(12'h3b6),
    .Y(\$auto$rtlil.cc:3011:Eq$993 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(csr_addr),
    .B(12'h3b7),
    .Y(\$auto$rtlil.cc:3011:Eq$994 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(csr_addr),
    .B(12'h3b8),
    .Y(\$auto$rtlil.cc:3011:Eq$995 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(csr_addr),
    .B(12'h3b9),
    .Y(\$auto$rtlil.cc:3011:Eq$996 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(csr_addr),
    .B(12'h3ba),
    .Y(\$auto$rtlil.cc:3011:Eq$997 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_addr),
    .B(12'h3bb),
    .Y(\$auto$rtlil.cc:3011:Eq$998 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(csr_addr),
    .B(12'h3bc),
    .Y(\$auto$rtlil.cc:3011:Eq$999 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(csr_addr),
    .B(12'h3bd),
    .Y(\$auto$rtlil.cc:3011:Eq$1000 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(csr_addr),
    .B(12'h3be),
    .Y(\$auto$rtlil.cc:3011:Eq$1001 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(csr_addr),
    .B(12'h3bf),
    .Y(\$auto$rtlil.cc:3011:Eq$1002 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(illegal_csr),
    .B(illegal_csr_write),
    .Y(\$7 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd20),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A({ \$auto$rtlil.cc:3011:Eq$1002 , \$auto$rtlil.cc:3011:Eq$1001 , \$auto$rtlil.cc:3011:Eq$1000 , \$auto$rtlil.cc:3011:Eq$999 , \$auto$rtlil.cc:3011:Eq$998 , \$auto$rtlil.cc:3011:Eq$997 , \$auto$rtlil.cc:3011:Eq$996 , \$auto$rtlil.cc:3011:Eq$995 , \$auto$rtlil.cc:3011:Eq$994 , \$auto$rtlil.cc:3011:Eq$993 , \$auto$rtlil.cc:3011:Eq$992 , \$auto$rtlil.cc:3011:Eq$991 , \$auto$rtlil.cc:3011:Eq$990 , \$auto$rtlil.cc:3011:Eq$989 , \$auto$rtlil.cc:3011:Eq$988 , \$auto$rtlil.cc:3011:Eq$987 , \$auto$rtlil.cc:3011:Eq$986 , \$auto$rtlil.cc:3011:Eq$985 , \$auto$rtlil.cc:3011:Eq$984 , \$auto$rtlil.cc:3011:Eq$983  }),
    .Y(\$auto$rtlil.cc:2964:ReduceBool$1003 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$64  (
    .A({ csr_wdata_int[31:8], 8'h01 }),
    .B({ boot_addr_i[31:8], 8'h01 }),
    .S(csr_mtvec_init_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1004 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(csr_wdata_int[12:11]),
    .B(2'h3),
    .Y(\$66 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(csr_wdata_int[12:11]),
    .Y(\$68 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$66 ),
    .B(\$68 ),
    .Y(\$70 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(csr_wdata_int[1:0]),
    .B(2'h3),
    .Y(\$73 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(csr_wdata_int[1:0]),
    .Y(\$75 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A({ 1'h0, mhpmcounter_idx }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1005 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .B(illegal_csr_priv),
    .Y(\$9 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A({ 1'h0, mhpmcounter_idx }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$1006 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(\$auto$rtlil.cc:3015:Ge$1005 ),
    .B(\$auto$rtlil.cc:3009:Lt$1006 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1007 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1007 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1008 )
  );
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$83  (
    .A(\$auto$rtlil.cc:3092:Mux$1008 ),
    .S(mhpmcounter_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1009 )
  );
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$84  (
    .A(\$auto$rtlil.cc:3092:Mux$1008 ),
    .S(mhpmcounter_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1010 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A({ 1'h0, mhpmcounter_idx }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1012 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A({ 1'h0, mhpmcounter_idx }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$1013 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\$auto$rtlil.cc:3015:Ge$1012 ),
    .B(\$auto$rtlil.cc:3009:Lt$1013 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1014 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$89  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1014 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1015 )
  );
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$90  (
    .A(\$auto$rtlil.cc:3092:Mux$1015 ),
    .S(mhpmcounter_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1016 )
  );
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$91  (
    .A(\$auto$rtlil.cc:3092:Mux$1015 ),
    .S(mhpmcounter_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1017 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1303.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$mcountinhibit_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(mcountinhibit_d),
    .Q(mcountinhibit_q)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:704.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$priv_lvl_q  (
    .AD(2'h3),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(priv_lvl_d),
    .Q(priv_lvl_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$11227  (
    .A(32'hxxxxxxxx),
    .B({ csr_wdata_i, \$181 , \$185 , csr_wdata_i }),
    .S({ \$procmux$11231_CMP , \$procmux$11230_CMP , \$procmux$11229_CMP , \$procmux$11228_CMP  }),
    .Y(\$procmux$11227_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11228_CMP0  (
    .A(csr_op_i),
    .Y(\$procmux$11228_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:722.21-722.64|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11229_CMP0  (
    .A(csr_op_i),
    .B(2'h3),
    .Y(\$procmux$11229_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:721.21-721.64|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11230_CMP0  (
    .A(csr_op_i),
    .B(2'h2),
    .Y(\$procmux$11230_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:720.21-720.50|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11231_CMP0  (
    .A(csr_op_i),
    .B(2'h1),
    .Y(\$procmux$11231_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:1157.7-1157.85|rtl/cve2/cve2_cs_registers.sv:1155.5-1160.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11233  (
    .A(mcountinhibit_q),
    .B({ \$csr_wdata_int$186 [2], 1'h0, \$csr_wdata_int$186 [0] }),
    .S(\$procmux$11234_CMP ),
    .Y(\$procmux$11233_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$11238  (
    .A(\$mstatus_d$109 [5:2]),
    .B({ \$mstatus_d[5:2]$137 , mstatus_q[4], \$mstatus_d[4:2]$154  }),
    .S({ \$procmux$11242_CMP , \$procmux$11239_CMP  }),
    .Y(\$procmux$11238_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11246  (
    .A(\$mcause_en$114 ),
    .B(1'h1),
    .S(\$procmux$11247_CMP ),
    .Y(\$procmux$11246_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11249  (
    .A(1'hx),
    .B(\$procmux$11246_Y ),
    .S(\$procmux$11250_CMP ),
    .Y(\$procmux$11249_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11254  (
    .A({ \$csr_wdata_int$186 [31], \$csr_wdata_int$186 [5:0] }),
    .B(mstack_cause_q),
    .S(\$procmux$11255_CMP ),
    .Y(\$procmux$11254_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11257  (
    .A(7'hxx),
    .B(\$procmux$11254_Y ),
    .S(\$procmux$11258_CMP ),
    .Y(\$procmux$11257_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11262  (
    .A(\$mepc_en$113 ),
    .B(1'h1),
    .S(\$procmux$11263_CMP ),
    .Y(\$procmux$11262_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11265  (
    .A(1'hx),
    .B(\$procmux$11262_Y ),
    .S(\$procmux$11266_CMP ),
    .Y(\$procmux$11265_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11270  (
    .A({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .B(mstack_epc_q),
    .S(\$procmux$11271_CMP ),
    .Y(\$procmux$11270_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11273  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11270_Y ),
    .S(\$procmux$11274_CMP ),
    .Y(\$procmux$11273_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:677.11-677.33|rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11277  (
    .A(\$mstatus_d$109 [1]),
    .B(1'h0),
    .S(\$procmux$11278_CMP ),
    .Y(\$procmux$11277_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11279  (
    .A(1'hx),
    .B(\$procmux$11277_Y ),
    .S(\$procmux$11280_CMP ),
    .Y(\$procmux$11279_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11285  (
    .A(\$mstatus_d$109 [1]),
    .B(\$mstatus_d[1]$153 ),
    .S(\$procmux$11286_CMP ),
    .Y(\$procmux$11285_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11290  (
    .A(3'h4),
    .B(mstack_q),
    .S(\$procmux$11291_CMP ),
    .Y(\$procmux$11290_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11293  (
    .A(3'hx),
    .B(\$procmux$11290_Y ),
    .S(\$procmux$11294_CMP ),
    .Y(\$procmux$11293_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11299  (
    .A(1'h1),
    .B(\$mtval_en$115 ),
    .S(debug_mode_i),
    .Y(\$procmux$11299_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11302  (
    .A(\$procmux$11299_Y ),
    .B(1'hx),
    .S(\$procmux$11303_CMP ),
    .Y(\$procmux$11302_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11305  (
    .A(1'hx),
    .B(\$procmux$11302_Y ),
    .S(\$procmux$11306_CMP ),
    .Y(\$procmux$11305_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11311  (
    .A(csr_mtval_i),
    .B(\$csr_wdata_int$186 ),
    .S(debug_mode_i),
    .Y(\$procmux$11311_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11314  (
    .A(\$procmux$11311_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$11315_CMP ),
    .Y(\$procmux$11314_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11317  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11314_Y ),
    .S(\$procmux$11318_CMP ),
    .Y(\$procmux$11317_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11323  (
    .A(1'h1),
    .B(\$mcause_en$114 ),
    .S(debug_mode_i),
    .Y(\$procmux$11323_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11326  (
    .A(\$procmux$11323_Y ),
    .B(1'hx),
    .S(\$procmux$11327_CMP ),
    .Y(\$procmux$11326_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11329  (
    .A(1'hx),
    .B(\$procmux$11326_Y ),
    .S(\$procmux$11330_CMP ),
    .Y(\$procmux$11329_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11335  (
    .A(csr_mcause_i),
    .B({ \$csr_wdata_int$186 [31], \$csr_wdata_int$186 [5:0] }),
    .S(debug_mode_i),
    .Y(\$procmux$11335_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11338  (
    .A(\$procmux$11335_Y ),
    .B(7'hxx),
    .S(\$procmux$11339_CMP ),
    .Y(\$procmux$11338_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11341  (
    .A(7'hxx),
    .B(\$procmux$11338_Y ),
    .S(\$procmux$11342_CMP ),
    .Y(\$procmux$11341_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11347  (
    .A(1'h1),
    .B(\$mepc_en$113 ),
    .S(debug_mode_i),
    .Y(\$procmux$11347_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11350  (
    .A(\$procmux$11347_Y ),
    .B(1'hx),
    .S(\$procmux$11351_CMP ),
    .Y(\$procmux$11350_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11353  (
    .A(1'hx),
    .B(\$procmux$11350_Y ),
    .S(\$procmux$11354_CMP ),
    .Y(\$procmux$11353_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11359  (
    .A(\$exception_pc$125 ),
    .B({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .S(debug_mode_i),
    .Y(\$procmux$11359_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11362  (
    .A(\$procmux$11359_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$11363_CMP ),
    .Y(\$procmux$11362_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11365  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11362_Y ),
    .S(\$procmux$11366_CMP ),
    .Y(\$procmux$11365_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11371  (
    .A(1'h1),
    .B(\$mstatus_en$110 ),
    .S(debug_mode_i),
    .Y(\$procmux$11371_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11374  (
    .A(\$procmux$11371_Y ),
    .B(1'hx),
    .S(\$procmux$11375_CMP ),
    .Y(\$procmux$11374_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11377  (
    .A(1'hx),
    .B(\$procmux$11374_Y ),
    .S(\$procmux$11378_CMP ),
    .Y(\$procmux$11377_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11383  (
    .A({ 1'h0, mstatus_q[5], priv_lvl_q }),
    .B(\$mstatus_d$109 [5:2]),
    .S(debug_mode_i),
    .Y(\$procmux$11383_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11386  (
    .A(\$procmux$11383_Y ),
    .B(4'hx),
    .S(\$procmux$11387_CMP ),
    .Y(\$procmux$11386_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11389  (
    .A(4'hx),
    .B(\$procmux$11386_Y ),
    .S(\$procmux$11390_CMP ),
    .Y(\$procmux$11389_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11397  (
    .A(\$mstack_en$136 ),
    .B(1'h0),
    .S(\$procmux$11398_CMP ),
    .Y(\$procmux$11397_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11400  (
    .A(1'hx),
    .B(\$procmux$11397_Y ),
    .S(\$procmux$11401_CMP ),
    .Y(\$procmux$11400_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11407  (
    .A(\$depc_en$119 ),
    .B(1'h1),
    .S(\$procmux$11408_CMP ),
    .Y(\$procmux$11407_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11410  (
    .A(1'hx),
    .B(\$procmux$11407_Y ),
    .S(\$procmux$11411_CMP ),
    .Y(\$procmux$11410_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11417  (
    .A({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .B(\$exception_pc$125 ),
    .S(\$procmux$11418_CMP ),
    .Y(\$procmux$11417_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11420  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11417_Y ),
    .S(\$procmux$11421_CMP ),
    .Y(\$procmux$11420_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11427  (
    .A(\$dcsr_en$118 ),
    .B(1'h1),
    .S(\$procmux$11428_CMP ),
    .Y(\$procmux$11427_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11430  (
    .A(1'hx),
    .B(\$procmux$11427_Y ),
    .S(\$procmux$11431_CMP ),
    .Y(\$procmux$11430_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11437  (
    .A(\$dcsr_d$117 [8:6]),
    .B(debug_cause_i),
    .S(\$procmux$11438_CMP ),
    .Y(\$procmux$11437_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11440  (
    .A(3'hx),
    .B(\$procmux$11437_Y ),
    .S(\$procmux$11441_CMP ),
    .Y(\$procmux$11440_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11447  (
    .A(\$dcsr_d$117 [1:0]),
    .B(priv_lvl_q),
    .S(\$procmux$11448_CMP ),
    .Y(\$procmux$11447_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11450  (
    .A(2'hx),
    .B(\$procmux$11447_Y ),
    .S(\$procmux$11451_CMP ),
    .Y(\$procmux$11450_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11458  (
    .A(\$mtval_en$135 ),
    .B(\$mtval_en$115 ),
    .S(\$procmux$11459_CMP ),
    .Y(\$procmux$11458_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11461  (
    .A(1'hx),
    .B(\$procmux$11458_Y ),
    .S(\$procmux$11462_CMP ),
    .Y(\$procmux$11461_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11469  (
    .A(\$mtval_d$134 ),
    .B(\$csr_wdata_int$186 ),
    .S(\$procmux$11470_CMP ),
    .Y(\$procmux$11469_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11472  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11469_Y ),
    .S(\$procmux$11473_CMP ),
    .Y(\$procmux$11472_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11480  (
    .A(\$mcause_en$133 ),
    .B(\$mcause_en$114 ),
    .S(\$procmux$11481_CMP ),
    .Y(\$procmux$11480_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11483  (
    .A(1'hx),
    .B(\$procmux$11480_Y ),
    .S(\$procmux$11484_CMP ),
    .Y(\$procmux$11483_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11491  (
    .A(\$mcause_d$132 ),
    .B({ \$csr_wdata_int$186 [31], \$csr_wdata_int$186 [5:0] }),
    .S(\$procmux$11492_CMP ),
    .Y(\$procmux$11491_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11494  (
    .A(7'hxx),
    .B(\$procmux$11491_Y ),
    .S(\$procmux$11495_CMP ),
    .Y(\$procmux$11494_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11502  (
    .A(\$mepc_en$131 ),
    .B(\$mepc_en$113 ),
    .S(\$procmux$11503_CMP ),
    .Y(\$procmux$11502_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11505  (
    .A(1'hx),
    .B(\$procmux$11502_Y ),
    .S(\$procmux$11506_CMP ),
    .Y(\$procmux$11505_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11513  (
    .A(\$mepc_d$130 ),
    .B({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .S(\$procmux$11514_CMP ),
    .Y(\$procmux$11513_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11516  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11513_Y ),
    .S(\$procmux$11517_CMP ),
    .Y(\$procmux$11516_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11524  (
    .A(\$mstatus_en$129 ),
    .B(\$mstatus_en$110 ),
    .S(\$procmux$11525_CMP ),
    .Y(\$procmux$11524_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11527  (
    .A(1'hx),
    .B(\$procmux$11524_Y ),
    .S(\$procmux$11528_CMP ),
    .Y(\$procmux$11527_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11535  (
    .A(\$mstatus_d[5:2]$128 ),
    .B(\$mstatus_d$109 [5:2]),
    .S(\$procmux$11536_CMP ),
    .Y(\$procmux$11535_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11538  (
    .A(4'hx),
    .B(\$procmux$11535_Y ),
    .S(\$procmux$11539_CMP ),
    .Y(\$procmux$11538_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:628.13-628.36|rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11546  (
    .A(pc_id_i),
    .B(pc_if_i),
    .S(\$procmux$11547_CMP ),
    .Y(\$procmux$11546_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11548  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11546_Y ),
    .S(\$procmux$11549_CMP ),
    .Y(\$procmux$11548_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11556  (
    .A(1'h0),
    .B(\$mstack_en$150 ),
    .S(\$procmux$11557_CMP ),
    .Y(\$procmux$11556_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11564  (
    .A(\$depc_en$119 ),
    .B(\$depc_en$149 ),
    .S(\$procmux$11565_CMP ),
    .Y(\$procmux$11564_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11572  (
    .A({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .B(\$depc_d$148 ),
    .S(\$procmux$11573_CMP ),
    .Y(\$procmux$11572_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11580  (
    .A(\$dcsr_en$118 ),
    .B(\$dcsr_en$147 ),
    .S(\$procmux$11581_CMP ),
    .Y(\$procmux$11580_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11588  (
    .A(\$dcsr_d$117 [8:6]),
    .B(\$dcsr_d[8:6]$146 ),
    .S(\$procmux$11589_CMP ),
    .Y(\$procmux$11588_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11596  (
    .A(\$dcsr_d$117 [1:0]),
    .B(\$dcsr_d[1:0]$145 ),
    .S(\$procmux$11597_CMP ),
    .Y(\$procmux$11596_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11604  (
    .A(\$mtval_en$115 ),
    .B(\$mtval_en$144 ),
    .S(\$procmux$11605_CMP ),
    .Y(\$procmux$11604_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11612  (
    .A(\$csr_wdata_int$186 ),
    .B(\$mtval_d$143 ),
    .S(\$procmux$11613_CMP ),
    .Y(\$procmux$11612_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11618  (
    .A(\$mcause_en$114 ),
    .B({ \$mcause_en$142 , \$mcause_en$158  }),
    .S({ \$procmux$11622_CMP , \$procmux$11619_CMP  }),
    .Y(\$procmux$11618_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$11627  (
    .A({ \$csr_wdata_int$186 [31], \$csr_wdata_int$186 [5:0] }),
    .B({ \$mcause_d$141 , \$mcause_d$157  }),
    .S({ \$procmux$11631_CMP , \$procmux$11628_CMP  }),
    .Y(\$procmux$11627_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11636  (
    .A(\$mepc_en$113 ),
    .B({ \$mepc_en$140 , \$mepc_en$156  }),
    .S({ \$procmux$11640_CMP , \$procmux$11637_CMP  }),
    .Y(\$procmux$11636_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$11645  (
    .A({ \$csr_wdata_int$186 [31:1], 1'h0 }),
    .B({ \$mepc_d$139 , \$mepc_d$155  }),
    .S({ \$procmux$11649_CMP , \$procmux$11646_CMP  }),
    .Y(\$procmux$11645_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11654  (
    .A(\$mstatus_en$110 ),
    .B({ \$mstatus_en$138 , 1'h1 }),
    .S({ \$procmux$11658_CMP , \$procmux$11655_CMP  }),
    .Y(\$procmux$11654_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11663  (
    .A(1'h1),
    .B(1'h0),
    .S(debug_mode_i),
    .Y(\$procmux$11663_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11666  (
    .A(\$procmux$11663_Y ),
    .B(1'hx),
    .S(\$procmux$11667_CMP ),
    .Y(\$procmux$11666_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11669  (
    .A(1'hx),
    .B(\$procmux$11666_Y ),
    .S(\$procmux$11670_CMP ),
    .Y(\$procmux$11669_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$11675  (
    .A(priv_lvl_q),
    .B({ 2'h3, dcsr_q[1:0], mstatus_q[3:2] }),
    .S({ \$procmux$11680_CMP , \$procmux$11677_CMP , \$procmux$11676_CMP  }),
    .Y(\$procmux$11675_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11687  (
    .A(pc_id_i),
    .B(\$exception_pc$125 ),
    .S(\$procmux$11688_CMP ),
    .Y(\$procmux$11687_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:561.13-561.37|rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11697  (
    .A(\$csr_wdata_int$186 [1:0]),
    .B(2'h3),
    .S(\$procmux$11698_CMP ),
    .Y(\$procmux$11697_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11699  (
    .A(2'hx),
    .B(\$procmux$11697_Y ),
    .S(\$procmux$11700_CMP ),
    .Y(\$procmux$11699_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11700_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b0),
    .Y(\$procmux$11700_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11701  (
    .A(2'hx),
    .B(\$procmux$11699_Y ),
    .S(\$procmux$11702_CMP ),
    .Y(\$procmux$11701_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:535.13-535.40|rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11717  (
    .A(\$csr_wdata_int$186 [12:11]),
    .B(2'h3),
    .S(\$procmux$11718_CMP ),
    .Y(\$procmux$11717_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11719  (
    .A(2'hx),
    .B(\$procmux$11717_Y ),
    .S(\$procmux$11720_CMP ),
    .Y(\$procmux$11719_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11720_CMP0  (
    .A(csr_addr_i),
    .B(12'h300),
    .Y(\$procmux$11720_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11721  (
    .A(2'hx),
    .B(\$procmux$11719_Y ),
    .S(\$procmux$11722_CMP ),
    .Y(\$procmux$11721_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11724  (
    .A(32'd0),
    .B(\$auto$rtlil.cc:3093:Bwmux$1018 ),
    .S(\$procmux$11725_CTRL ),
    .Y(\$procmux$11724_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_ANY  (
    .A(\$procmux$11725_CMP ),
    .Y(\$procmux$11725_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP0  (
    .A(csr_addr_i),
    .B(12'hb80),
    .Y(\$procmux$11725_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP1  (
    .A(csr_addr_i),
    .B(12'hb82),
    .Y(\$procmux$11725_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP10  (
    .A(csr_addr_i),
    .B(12'hb8b),
    .Y(\$procmux$11725_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP11  (
    .A(csr_addr_i),
    .B(12'hb8c),
    .Y(\$procmux$11725_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP12  (
    .A(csr_addr_i),
    .B(12'hb8d),
    .Y(\$procmux$11725_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP13  (
    .A(csr_addr_i),
    .B(12'hb8e),
    .Y(\$procmux$11725_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP14  (
    .A(csr_addr_i),
    .B(12'hb8f),
    .Y(\$procmux$11725_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP15  (
    .A(csr_addr_i),
    .B(12'hb90),
    .Y(\$procmux$11725_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP16  (
    .A(csr_addr_i),
    .B(12'hb91),
    .Y(\$procmux$11725_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP17  (
    .A(csr_addr_i),
    .B(12'hb92),
    .Y(\$procmux$11725_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP18  (
    .A(csr_addr_i),
    .B(12'hb93),
    .Y(\$procmux$11725_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP19  (
    .A(csr_addr_i),
    .B(12'hb94),
    .Y(\$procmux$11725_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP2  (
    .A(csr_addr_i),
    .B(12'hb83),
    .Y(\$procmux$11725_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP20  (
    .A(csr_addr_i),
    .B(12'hb95),
    .Y(\$procmux$11725_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP21  (
    .A(csr_addr_i),
    .B(12'hb96),
    .Y(\$procmux$11725_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP22  (
    .A(csr_addr_i),
    .B(12'hb97),
    .Y(\$procmux$11725_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP23  (
    .A(csr_addr_i),
    .B(12'hb98),
    .Y(\$procmux$11725_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP24  (
    .A(csr_addr_i),
    .B(12'hb99),
    .Y(\$procmux$11725_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP25  (
    .A(csr_addr_i),
    .B(12'hb9a),
    .Y(\$procmux$11725_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP26  (
    .A(csr_addr_i),
    .B(12'hb9b),
    .Y(\$procmux$11725_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP27  (
    .A(csr_addr_i),
    .B(12'hb9c),
    .Y(\$procmux$11725_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP28  (
    .A(csr_addr_i),
    .B(12'hb9d),
    .Y(\$procmux$11725_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP29  (
    .A(csr_addr_i),
    .B(12'hb9e),
    .Y(\$procmux$11725_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP3  (
    .A(csr_addr_i),
    .B(12'hb84),
    .Y(\$procmux$11725_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP30  (
    .A(csr_addr_i),
    .B(12'hb9f),
    .Y(\$procmux$11725_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP4  (
    .A(csr_addr_i),
    .B(12'hb85),
    .Y(\$procmux$11725_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP5  (
    .A(csr_addr_i),
    .B(12'hb86),
    .Y(\$procmux$11725_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP6  (
    .A(csr_addr_i),
    .B(12'hb87),
    .Y(\$procmux$11725_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP7  (
    .A(csr_addr_i),
    .B(12'hb88),
    .Y(\$procmux$11725_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP8  (
    .A(csr_addr_i),
    .B(12'hb89),
    .Y(\$procmux$11725_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP9  (
    .A(csr_addr_i),
    .B(12'hb8a),
    .Y(\$procmux$11725_CMP [9])
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11726  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11724_Y ),
    .S(\$procmux$11727_CMP ),
    .Y(\$procmux$11726_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11730  (
    .A(32'd0),
    .B(\$auto$rtlil.cc:3093:Bwmux$1011 ),
    .S(\$procmux$11731_CTRL ),
    .Y(\$procmux$11730_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_ANY  (
    .A(\$procmux$11731_CMP ),
    .Y(\$procmux$11731_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP0  (
    .A(csr_addr_i),
    .B(12'hb00),
    .Y(\$procmux$11731_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP1  (
    .A(csr_addr_i),
    .B(12'hb02),
    .Y(\$procmux$11731_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP10  (
    .A(csr_addr_i),
    .B(12'hb0b),
    .Y(\$procmux$11731_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP11  (
    .A(csr_addr_i),
    .B(12'hb0c),
    .Y(\$procmux$11731_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP12  (
    .A(csr_addr_i),
    .B(12'hb0d),
    .Y(\$procmux$11731_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP13  (
    .A(csr_addr_i),
    .B(12'hb0e),
    .Y(\$procmux$11731_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP14  (
    .A(csr_addr_i),
    .B(12'hb0f),
    .Y(\$procmux$11731_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP15  (
    .A(csr_addr_i),
    .B(12'hb10),
    .Y(\$procmux$11731_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP16  (
    .A(csr_addr_i),
    .B(12'hb11),
    .Y(\$procmux$11731_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP17  (
    .A(csr_addr_i),
    .B(12'hb12),
    .Y(\$procmux$11731_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP18  (
    .A(csr_addr_i),
    .B(12'hb13),
    .Y(\$procmux$11731_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP19  (
    .A(csr_addr_i),
    .B(12'hb14),
    .Y(\$procmux$11731_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP2  (
    .A(csr_addr_i),
    .B(12'hb03),
    .Y(\$procmux$11731_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP20  (
    .A(csr_addr_i),
    .B(12'hb15),
    .Y(\$procmux$11731_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP21  (
    .A(csr_addr_i),
    .B(12'hb16),
    .Y(\$procmux$11731_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP22  (
    .A(csr_addr_i),
    .B(12'hb17),
    .Y(\$procmux$11731_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP23  (
    .A(csr_addr_i),
    .B(12'hb18),
    .Y(\$procmux$11731_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP24  (
    .A(csr_addr_i),
    .B(12'hb19),
    .Y(\$procmux$11731_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP25  (
    .A(csr_addr_i),
    .B(12'hb1a),
    .Y(\$procmux$11731_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP26  (
    .A(csr_addr_i),
    .B(12'hb1b),
    .Y(\$procmux$11731_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP27  (
    .A(csr_addr_i),
    .B(12'hb1c),
    .Y(\$procmux$11731_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP28  (
    .A(csr_addr_i),
    .B(12'hb1d),
    .Y(\$procmux$11731_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP29  (
    .A(csr_addr_i),
    .B(12'hb1e),
    .Y(\$procmux$11731_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP3  (
    .A(csr_addr_i),
    .B(12'hb04),
    .Y(\$procmux$11731_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP30  (
    .A(csr_addr_i),
    .B(12'hb1f),
    .Y(\$procmux$11731_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP4  (
    .A(csr_addr_i),
    .B(12'hb05),
    .Y(\$procmux$11731_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP5  (
    .A(csr_addr_i),
    .B(12'hb06),
    .Y(\$procmux$11731_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP6  (
    .A(csr_addr_i),
    .B(12'hb07),
    .Y(\$procmux$11731_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP7  (
    .A(csr_addr_i),
    .B(12'hb08),
    .Y(\$procmux$11731_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP8  (
    .A(csr_addr_i),
    .B(12'hb09),
    .Y(\$procmux$11731_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP9  (
    .A(csr_addr_i),
    .B(12'hb0a),
    .Y(\$procmux$11731_CMP [9])
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11732  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11730_Y ),
    .S(\$procmux$11733_CMP ),
    .Y(\$procmux$11732_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11737  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11738_CMP ),
    .Y(\$procmux$11737_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11738_CMP0  (
    .A(csr_addr_i),
    .B(12'h320),
    .Y(\$procmux$11738_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11739  (
    .A(1'hx),
    .B(\$procmux$11737_Y ),
    .S(\$procmux$11740_CMP ),
    .Y(\$procmux$11739_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11745  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11746_CMP ),
    .Y(\$procmux$11745_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11746_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b3),
    .Y(\$procmux$11746_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11747  (
    .A(1'hx),
    .B(\$procmux$11745_Y ),
    .S(\$procmux$11748_CMP ),
    .Y(\$procmux$11747_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11754  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11755_CMP ),
    .Y(\$procmux$11754_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11755_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b2),
    .Y(\$procmux$11755_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11756  (
    .A(1'hx),
    .B(\$procmux$11754_Y ),
    .S(\$procmux$11757_CMP ),
    .Y(\$procmux$11756_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11764  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11765_CMP ),
    .Y(\$procmux$11764_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11765_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b1),
    .Y(\$procmux$11765_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11766  (
    .A(1'hx),
    .B(\$procmux$11764_Y ),
    .S(\$procmux$11767_CMP ),
    .Y(\$procmux$11766_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11776  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11777_CMP ),
    .Y(\$procmux$11776_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11777_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b0),
    .Y(\$procmux$11777_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11778  (
    .A(1'hx),
    .B(\$procmux$11776_Y ),
    .S(\$procmux$11779_CMP ),
    .Y(\$procmux$11778_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11788  (
    .A(dcsr_q),
    .B({ 16'h4000, \$csr_wdata_int$186 [15], 1'h0, \$csr_wdata_int$186 [13:12], 3'h0, dcsr_q[8:6], 3'h0, \$csr_wdata_int$186 [2], \$dcsr_d[1:0]$78  }),
    .S(\$procmux$11789_CMP ),
    .Y(\$procmux$11788_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11789_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b0),
    .Y(\$procmux$11789_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11790  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$11788_Y ),
    .S(\$procmux$11791_CMP ),
    .Y(\$procmux$11790_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11800  (
    .A(csr_mtvec_init_i),
    .B(1'h1),
    .S(\$procmux$11801_CMP ),
    .Y(\$procmux$11800_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11801_CMP0  (
    .A(csr_addr_i),
    .B(12'h305),
    .Y(\$procmux$11801_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11802  (
    .A(1'hx),
    .B(\$procmux$11800_Y ),
    .S(\$procmux$11803_CMP ),
    .Y(\$procmux$11802_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11813  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11814_CMP ),
    .Y(\$procmux$11813_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11814_CMP0  (
    .A(csr_addr_i),
    .B(12'h343),
    .Y(\$procmux$11814_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11815  (
    .A(1'hx),
    .B(\$procmux$11813_Y ),
    .S(\$procmux$11816_CMP ),
    .Y(\$procmux$11815_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11827  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11828_CMP ),
    .Y(\$procmux$11827_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11828_CMP0  (
    .A(csr_addr_i),
    .B(12'h342),
    .Y(\$procmux$11828_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11829  (
    .A(1'hx),
    .B(\$procmux$11827_Y ),
    .S(\$procmux$11830_CMP ),
    .Y(\$procmux$11829_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11842  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11843_CMP ),
    .Y(\$procmux$11842_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11843_CMP0  (
    .A(csr_addr_i),
    .B(12'h341),
    .Y(\$procmux$11843_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11844  (
    .A(1'hx),
    .B(\$procmux$11842_Y ),
    .S(\$procmux$11845_CMP ),
    .Y(\$procmux$11844_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11858  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11859_CMP ),
    .Y(\$procmux$11858_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11859_CMP0  (
    .A(csr_addr_i),
    .B(12'h340),
    .Y(\$procmux$11859_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11860  (
    .A(1'hx),
    .B(\$procmux$11858_Y ),
    .S(\$procmux$11861_CMP ),
    .Y(\$procmux$11860_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11875  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11876_CMP ),
    .Y(\$procmux$11875_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11876_CMP0  (
    .A(csr_addr_i),
    .B(12'h304),
    .Y(\$procmux$11876_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11877  (
    .A(1'hx),
    .B(\$procmux$11875_Y ),
    .S(\$procmux$11878_CMP ),
    .Y(\$procmux$11877_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11894  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$11895_CMP ),
    .Y(\$procmux$11894_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11895_CMP0  (
    .A(csr_addr_i),
    .B(12'h300),
    .Y(\$procmux$11895_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11896  (
    .A(1'hx),
    .B(\$procmux$11894_Y ),
    .S(\$procmux$11897_CMP ),
    .Y(\$procmux$11896_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11913  (
    .A(mstatus_q),
    .B({ \$csr_wdata_int$186 [3], \$csr_wdata_int$186 [7], \$mstatus_d[3:2]$71 , \$csr_wdata_int$186 [17], \$csr_wdata_int$186 [21] }),
    .S(\$procmux$11914_CMP ),
    .Y(\$procmux$11913_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11914_CMP0  (
    .A(csr_addr_i),
    .B(12'h300),
    .Y(\$procmux$11914_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11915  (
    .A(6'hxx),
    .B(\$procmux$11913_Y ),
    .S(\$procmux$11916_CMP ),
    .Y(\$procmux$11915_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11918  (
    .A(32'd0),
    .B(\$mhpmcounterh_we$108 ),
    .S(\$procmux$11919_CMP ),
    .Y(\$procmux$11918_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11921  (
    .A(32'd0),
    .B(\$mhpmcounter_we$107 ),
    .S(\$procmux$11922_CMP ),
    .Y(\$procmux$11921_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11924  (
    .A(1'h0),
    .B(\$mcountinhibit_we$106 ),
    .S(\$procmux$11925_CMP ),
    .Y(\$procmux$11924_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11927  (
    .A(1'h0),
    .B(\$dscratch1_en$105 ),
    .S(\$procmux$11928_CMP ),
    .Y(\$procmux$11927_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11930  (
    .A(1'h0),
    .B(\$dscratch0_en$104 ),
    .S(\$procmux$11931_CMP ),
    .Y(\$procmux$11930_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11933  (
    .A(1'h0),
    .B(\$depc_en$103 ),
    .S(\$procmux$11934_CMP ),
    .Y(\$procmux$11933_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11936  (
    .A(1'h0),
    .B(\$dcsr_en$102 ),
    .S(\$procmux$11937_CMP ),
    .Y(\$procmux$11936_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11939  (
    .A(dcsr_q),
    .B(\$dcsr_d$101 ),
    .S(\$procmux$11940_CMP ),
    .Y(\$procmux$11939_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11942  (
    .A(csr_mtvec_init_i),
    .B(\$mtvec_en$100 ),
    .S(\$procmux$11943_CMP ),
    .Y(\$procmux$11942_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11945  (
    .A(1'h0),
    .B(\$mtval_en$99 ),
    .S(\$procmux$11946_CMP ),
    .Y(\$procmux$11945_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11948  (
    .A(1'h0),
    .B(\$mcause_en$98 ),
    .S(\$procmux$11949_CMP ),
    .Y(\$procmux$11948_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11951  (
    .A(1'h0),
    .B(\$mepc_en$97 ),
    .S(\$procmux$11952_CMP ),
    .Y(\$procmux$11951_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11954  (
    .A(1'h0),
    .B(\$mscratch_en$96 ),
    .S(\$procmux$11955_CMP ),
    .Y(\$procmux$11954_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11957  (
    .A(1'h0),
    .B(\$mie_en$95 ),
    .S(\$procmux$11958_CMP ),
    .Y(\$procmux$11957_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11960  (
    .A(1'h0),
    .B(\$mstatus_en$94 ),
    .S(\$procmux$11961_CMP ),
    .Y(\$procmux$11960_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11963  (
    .A(mstatus_q),
    .B(\$mstatus_d$93 ),
    .S(\$procmux$11964_CMP ),
    .Y(\$procmux$11963_Y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:479.9-479.28|rtl/cve2/cve2_cs_registers.sv:474.7-480.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11967  (
    .A(\$illegal_csr$39 ),
    .B(1'h1),
    .S(\$procmux$11968_CMP ),
    .Y(\$procmux$11967_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:348.9-352.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12006  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$12007_CMP ),
    .Y(\$procmux$12006_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:348.9-352.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12007_CMP0  (
    .A(csr_addr_i),
    .B(12'h757),
    .Y(\$procmux$12007_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:337.9-344.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12045  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$12046_CMP ),
    .Y(\$procmux$12045_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:337.9-344.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12046_CMP0  (
    .A(csr_addr_i),
    .B(12'h747),
    .Y(\$procmux$12046_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd54),
    .WIDTH(32'd1)
  ) \$procmux$12048  (
    .A(1'h1),
    .B({ 17'h00000, \$illegal_csr$13 , \$illegal_csr$14 , 20'h00000, \$16 , \$18 , \$20 , \$22 , 11'h000 }),
    .S({ \$procmux$12102_CMP , \$procmux$12101_CMP , \$procmux$12100_CMP , \$procmux$12099_CMP , \$procmux$12098_CMP , \$procmux$12097_CMP , \$procmux$12096_CMP , \$procmux$12095_CTRL , \$procmux$12094_CMP , \$procmux$12093_CMP , \$procmux$12092_CMP , \$procmux$12091_CMP , \$procmux$12090_CMP , \$procmux$12089_CMP , \$procmux$12088_CMP , \$procmux$12087_CMP , \$procmux$12086_CMP , \$procmux$12085_CMP , \$procmux$12084_CMP , \$procmux$12083_CMP , \$procmux$12082_CMP , \$procmux$12081_CMP , \$procmux$12080_CMP , \$procmux$12079_CMP , \$procmux$12078_CMP , \$procmux$12077_CMP , \$procmux$12076_CMP , \$procmux$12075_CMP , \$procmux$12074_CMP , \$procmux$12073_CMP , \$procmux$12072_CMP , \$procmux$12071_CMP , \$procmux$12070_CMP , \$procmux$12069_CMP , \$procmux$12068_CMP , \$procmux$12067_CMP , \$procmux$12066_CMP , \$procmux$12065_CMP , \$procmux$12064_CMP , \$procmux$12063_CMP , \$procmux$12062_CMP , \$procmux$12061_CMP , \$procmux$12060_CMP , \$procmux$12059_CMP , \$procmux$12058_CTRL , \$procmux$12057_CTRL , \$procmux$12056_CTRL , \$procmux$12055_CMP , \$procmux$12054_CMP , \$procmux$12053_CMP , \$procmux$12052_CMP , \$procmux$12051_CMP , \$procmux$12050_CMP , \$procmux$12049_CMP  }),
    .Y(\$procmux$12048_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12049_CMP0  (
    .A(csr_addr_i),
    .B(12'h7c1),
    .Y(\$procmux$12049_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:458.21-461.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12050_CMP0  (
    .A(csr_addr_i),
    .B(12'h7aa),
    .Y(\$procmux$12050_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:454.21-457.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12051_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a8),
    .Y(\$procmux$12051_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:450.19-453.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12052_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a3),
    .Y(\$procmux$12052_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12053_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a2),
    .Y(\$procmux$12053_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:442.19-445.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12054_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a1),
    .Y(\$procmux$12054_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:438.20-441.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12055_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a0),
    .Y(\$procmux$12055_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_ANY  (
    .A(\$procmux$12056_CMP ),
    .Y(\$procmux$12056_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP0  (
    .A(csr_addr_i),
    .B(12'hb80),
    .Y(\$procmux$12056_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP1  (
    .A(csr_addr_i),
    .B(12'hb82),
    .Y(\$procmux$12056_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP10  (
    .A(csr_addr_i),
    .B(12'hb8b),
    .Y(\$procmux$12056_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP11  (
    .A(csr_addr_i),
    .B(12'hb8c),
    .Y(\$procmux$12056_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP12  (
    .A(csr_addr_i),
    .B(12'hb8d),
    .Y(\$procmux$12056_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP13  (
    .A(csr_addr_i),
    .B(12'hb8e),
    .Y(\$procmux$12056_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP14  (
    .A(csr_addr_i),
    .B(12'hb8f),
    .Y(\$procmux$12056_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP15  (
    .A(csr_addr_i),
    .B(12'hb90),
    .Y(\$procmux$12056_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP16  (
    .A(csr_addr_i),
    .B(12'hb91),
    .Y(\$procmux$12056_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP17  (
    .A(csr_addr_i),
    .B(12'hb92),
    .Y(\$procmux$12056_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP18  (
    .A(csr_addr_i),
    .B(12'hb93),
    .Y(\$procmux$12056_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP19  (
    .A(csr_addr_i),
    .B(12'hb94),
    .Y(\$procmux$12056_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP2  (
    .A(csr_addr_i),
    .B(12'hb83),
    .Y(\$procmux$12056_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP20  (
    .A(csr_addr_i),
    .B(12'hb95),
    .Y(\$procmux$12056_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP21  (
    .A(csr_addr_i),
    .B(12'hb96),
    .Y(\$procmux$12056_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP22  (
    .A(csr_addr_i),
    .B(12'hb97),
    .Y(\$procmux$12056_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP23  (
    .A(csr_addr_i),
    .B(12'hb98),
    .Y(\$procmux$12056_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP24  (
    .A(csr_addr_i),
    .B(12'hb99),
    .Y(\$procmux$12056_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP25  (
    .A(csr_addr_i),
    .B(12'hb9a),
    .Y(\$procmux$12056_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP26  (
    .A(csr_addr_i),
    .B(12'hb9b),
    .Y(\$procmux$12056_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP27  (
    .A(csr_addr_i),
    .B(12'hb9c),
    .Y(\$procmux$12056_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP28  (
    .A(csr_addr_i),
    .B(12'hb9d),
    .Y(\$procmux$12056_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP29  (
    .A(csr_addr_i),
    .B(12'hb9e),
    .Y(\$procmux$12056_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP3  (
    .A(csr_addr_i),
    .B(12'hb84),
    .Y(\$procmux$12056_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP30  (
    .A(csr_addr_i),
    .B(12'hb9f),
    .Y(\$procmux$12056_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP4  (
    .A(csr_addr_i),
    .B(12'hb85),
    .Y(\$procmux$12056_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP5  (
    .A(csr_addr_i),
    .B(12'hb86),
    .Y(\$procmux$12056_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP6  (
    .A(csr_addr_i),
    .B(12'hb87),
    .Y(\$procmux$12056_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP7  (
    .A(csr_addr_i),
    .B(12'hb88),
    .Y(\$procmux$12056_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP8  (
    .A(csr_addr_i),
    .B(12'hb89),
    .Y(\$procmux$12056_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_CMP9  (
    .A(csr_addr_i),
    .B(12'hb8a),
    .Y(\$procmux$12056_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_ANY  (
    .A(\$procmux$12057_CMP ),
    .Y(\$procmux$12057_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP0  (
    .A(csr_addr_i),
    .B(12'hb00),
    .Y(\$procmux$12057_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP1  (
    .A(csr_addr_i),
    .B(12'hb02),
    .Y(\$procmux$12057_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP10  (
    .A(csr_addr_i),
    .B(12'hb0b),
    .Y(\$procmux$12057_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP11  (
    .A(csr_addr_i),
    .B(12'hb0c),
    .Y(\$procmux$12057_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP12  (
    .A(csr_addr_i),
    .B(12'hb0d),
    .Y(\$procmux$12057_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP13  (
    .A(csr_addr_i),
    .B(12'hb0e),
    .Y(\$procmux$12057_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP14  (
    .A(csr_addr_i),
    .B(12'hb0f),
    .Y(\$procmux$12057_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP15  (
    .A(csr_addr_i),
    .B(12'hb10),
    .Y(\$procmux$12057_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP16  (
    .A(csr_addr_i),
    .B(12'hb11),
    .Y(\$procmux$12057_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP17  (
    .A(csr_addr_i),
    .B(12'hb12),
    .Y(\$procmux$12057_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP18  (
    .A(csr_addr_i),
    .B(12'hb13),
    .Y(\$procmux$12057_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP19  (
    .A(csr_addr_i),
    .B(12'hb14),
    .Y(\$procmux$12057_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP2  (
    .A(csr_addr_i),
    .B(12'hb03),
    .Y(\$procmux$12057_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP20  (
    .A(csr_addr_i),
    .B(12'hb15),
    .Y(\$procmux$12057_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP21  (
    .A(csr_addr_i),
    .B(12'hb16),
    .Y(\$procmux$12057_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP22  (
    .A(csr_addr_i),
    .B(12'hb17),
    .Y(\$procmux$12057_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP23  (
    .A(csr_addr_i),
    .B(12'hb18),
    .Y(\$procmux$12057_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP24  (
    .A(csr_addr_i),
    .B(12'hb19),
    .Y(\$procmux$12057_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP25  (
    .A(csr_addr_i),
    .B(12'hb1a),
    .Y(\$procmux$12057_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP26  (
    .A(csr_addr_i),
    .B(12'hb1b),
    .Y(\$procmux$12057_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP27  (
    .A(csr_addr_i),
    .B(12'hb1c),
    .Y(\$procmux$12057_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP28  (
    .A(csr_addr_i),
    .B(12'hb1d),
    .Y(\$procmux$12057_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP29  (
    .A(csr_addr_i),
    .B(12'hb1e),
    .Y(\$procmux$12057_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP3  (
    .A(csr_addr_i),
    .B(12'hb04),
    .Y(\$procmux$12057_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP30  (
    .A(csr_addr_i),
    .B(12'hb1f),
    .Y(\$procmux$12057_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP4  (
    .A(csr_addr_i),
    .B(12'hb05),
    .Y(\$procmux$12057_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP5  (
    .A(csr_addr_i),
    .B(12'hb06),
    .Y(\$procmux$12057_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP6  (
    .A(csr_addr_i),
    .B(12'hb07),
    .Y(\$procmux$12057_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP7  (
    .A(csr_addr_i),
    .B(12'hb08),
    .Y(\$procmux$12057_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP8  (
    .A(csr_addr_i),
    .B(12'hb09),
    .Y(\$procmux$12057_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP9  (
    .A(csr_addr_i),
    .B(12'hb0a),
    .Y(\$procmux$12057_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd29),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_ANY  (
    .A(\$procmux$12058_CMP ),
    .Y(\$procmux$12058_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP0  (
    .A(csr_addr_i),
    .B(12'h323),
    .Y(\$procmux$12058_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP1  (
    .A(csr_addr_i),
    .B(12'h324),
    .Y(\$procmux$12058_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP10  (
    .A(csr_addr_i),
    .B(12'h32d),
    .Y(\$procmux$12058_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP11  (
    .A(csr_addr_i),
    .B(12'h32e),
    .Y(\$procmux$12058_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP12  (
    .A(csr_addr_i),
    .B(12'h32f),
    .Y(\$procmux$12058_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP13  (
    .A(csr_addr_i),
    .B(12'h330),
    .Y(\$procmux$12058_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP14  (
    .A(csr_addr_i),
    .B(12'h331),
    .Y(\$procmux$12058_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP15  (
    .A(csr_addr_i),
    .B(12'h332),
    .Y(\$procmux$12058_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP16  (
    .A(csr_addr_i),
    .B(12'h333),
    .Y(\$procmux$12058_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP17  (
    .A(csr_addr_i),
    .B(12'h334),
    .Y(\$procmux$12058_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP18  (
    .A(csr_addr_i),
    .B(12'h335),
    .Y(\$procmux$12058_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP19  (
    .A(csr_addr_i),
    .B(12'h336),
    .Y(\$procmux$12058_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP2  (
    .A(csr_addr_i),
    .B(12'h325),
    .Y(\$procmux$12058_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP20  (
    .A(csr_addr_i),
    .B(12'h337),
    .Y(\$procmux$12058_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP21  (
    .A(csr_addr_i),
    .B(12'h338),
    .Y(\$procmux$12058_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP22  (
    .A(csr_addr_i),
    .B(12'h339),
    .Y(\$procmux$12058_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP23  (
    .A(csr_addr_i),
    .B(12'h33a),
    .Y(\$procmux$12058_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP24  (
    .A(csr_addr_i),
    .B(12'h33b),
    .Y(\$procmux$12058_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP25  (
    .A(csr_addr_i),
    .B(12'h33c),
    .Y(\$procmux$12058_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP26  (
    .A(csr_addr_i),
    .B(12'h33d),
    .Y(\$procmux$12058_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP27  (
    .A(csr_addr_i),
    .B(12'h33e),
    .Y(\$procmux$12058_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP28  (
    .A(csr_addr_i),
    .B(12'h33f),
    .Y(\$procmux$12058_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP3  (
    .A(csr_addr_i),
    .B(12'h326),
    .Y(\$procmux$12058_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP4  (
    .A(csr_addr_i),
    .B(12'h327),
    .Y(\$procmux$12058_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP5  (
    .A(csr_addr_i),
    .B(12'h328),
    .Y(\$procmux$12058_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP6  (
    .A(csr_addr_i),
    .B(12'h329),
    .Y(\$procmux$12058_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP7  (
    .A(csr_addr_i),
    .B(12'h32a),
    .Y(\$procmux$12058_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP8  (
    .A(csr_addr_i),
    .B(12'h32b),
    .Y(\$procmux$12058_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP9  (
    .A(csr_addr_i),
    .B(12'h32c),
    .Y(\$procmux$12058_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:399.26-399.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12059_CMP0  (
    .A(csr_addr_i),
    .B(12'h320),
    .Y(\$procmux$12059_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:393.22-396.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12060_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b3),
    .Y(\$procmux$12060_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:389.22-392.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12061_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b2),
    .Y(\$procmux$12061_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:385.16-388.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12062_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b1),
    .Y(\$procmux$12062_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:381.17-384.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12063_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b0),
    .Y(\$procmux$12063_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:379.22-379.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12064_CMP0  (
    .A(csr_addr_i),
    .B(12'h3bf),
    .Y(\$procmux$12064_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:378.22-378.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12065_CMP0  (
    .A(csr_addr_i),
    .B(12'h3be),
    .Y(\$procmux$12065_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:377.22-377.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12066_CMP0  (
    .A(csr_addr_i),
    .B(12'h3bd),
    .Y(\$procmux$12066_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:376.22-376.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12067_CMP0  (
    .A(csr_addr_i),
    .B(12'h3bc),
    .Y(\$procmux$12067_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:375.22-375.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12068_CMP0  (
    .A(csr_addr_i),
    .B(12'h3bb),
    .Y(\$procmux$12068_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:374.22-374.57|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12069_CMP0  (
    .A(csr_addr_i),
    .B(12'h3ba),
    .Y(\$procmux$12069_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:373.22-373.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12070_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b9),
    .Y(\$procmux$12070_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:372.22-372.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12071_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b8),
    .Y(\$procmux$12071_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:371.22-371.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12072_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b7),
    .Y(\$procmux$12072_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:370.22-370.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12073_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b6),
    .Y(\$procmux$12073_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:369.22-369.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12074_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b5),
    .Y(\$procmux$12074_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:368.22-368.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12075_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b4),
    .Y(\$procmux$12075_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:367.22-367.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12076_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b3),
    .Y(\$procmux$12076_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:366.22-366.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12077_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b2),
    .Y(\$procmux$12077_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:365.22-365.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12078_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b1),
    .Y(\$procmux$12078_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:364.22-364.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12079_CMP0  (
    .A(csr_addr_i),
    .B(12'h3b0),
    .Y(\$procmux$12079_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:362.22-363.77|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12080_CMP0  (
    .A(csr_addr_i),
    .B(12'h3a3),
    .Y(\$procmux$12080_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:360.22-361.76|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12081_CMP0  (
    .A(csr_addr_i),
    .B(12'h3a2),
    .Y(\$procmux$12081_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:358.22-359.76|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12082_CMP0  (
    .A(csr_addr_i),
    .B(12'h3a1),
    .Y(\$procmux$12082_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:356.22-357.76|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12083_CMP0  (
    .A(csr_addr_i),
    .B(12'h3a0),
    .Y(\$procmux$12083_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:348.9-352.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12084_CMP0  (
    .A(csr_addr_i),
    .B(12'h757),
    .Y(\$procmux$12084_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:337.9-344.12|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12085_CMP0  (
    .A(csr_addr_i),
    .B(12'h747),
    .Y(\$procmux$12085_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12086_CMP0  (
    .A(csr_addr_i),
    .B(12'h344),
    .Y(\$procmux$12086_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:325.18-325.42|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12087_CMP0  (
    .A(csr_addr_i),
    .B(12'h343),
    .Y(\$procmux$12087_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:322.19-322.71|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12088_CMP0  (
    .A(csr_addr_i),
    .B(12'h342),
    .Y(\$procmux$12088_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:319.17-319.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12089_CMP0  (
    .A(csr_addr_i),
    .B(12'h341),
    .Y(\$procmux$12089_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:316.18-316.42|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12090_CMP0  (
    .A(csr_addr_i),
    .B(12'h305),
    .Y(\$procmux$12090_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:313.21-313.48|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12091_CMP0  (
    .A(csr_addr_i),
    .B(12'h340),
    .Y(\$procmux$12091_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:310.9-310.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12092_CMP0  (
    .A(csr_addr_i),
    .B(12'h306),
    .Y(\$procmux$12092_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:300.16-306.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12093_CMP0  (
    .A(csr_addr_i),
    .B(12'h304),
    .Y(\$procmux$12093_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12094_CMP0  (
    .A(csr_addr_i),
    .B(12'h301),
    .Y(\$procmux$12094_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_ANY  (
    .A(\$procmux$12095_CMP ),
    .Y(\$procmux$12095_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_CMP0  (
    .A(csr_addr_i),
    .B(12'h30a),
    .Y(\$procmux$12095_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_CMP1  (
    .A(csr_addr_i),
    .B(12'h31a),
    .Y(\$procmux$12095_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:290.21-290.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12096_CMP0  (
    .A(csr_addr_i),
    .B(12'h310),
    .Y(\$procmux$12096_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:280.20-287.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12097_CMP0  (
    .A(csr_addr_i),
    .B(12'h300),
    .Y(\$procmux$12097_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:277.23-277.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12098_CMP0  (
    .A(csr_addr_i),
    .B(12'hf15),
    .Y(\$procmux$12098_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12099_CMP0  (
    .A(csr_addr_i),
    .B(12'hf14),
    .Y(\$procmux$12099_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:273.19-273.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12100_CMP0  (
    .A(csr_addr_i),
    .B(12'hf13),
    .Y(\$procmux$12100_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12101_CMP0  (
    .A(csr_addr_i),
    .B(12'hf12),
    .Y(\$procmux$12101_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12102_CMP0  (
    .A(csr_addr_i),
    .B(12'hf11),
    .Y(\$procmux$12102_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd23),
    .WIDTH(32'd32)
  ) \$procmux$12108  (
    .A(32'd0),
    .B({ 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040100104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, mtvec_q, mepc_q, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, depc_q, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit_q, \$auto$rtlil.cc:3092:Mux$972 , \$auto$rtlil.cc:3092:Mux$977 [31:0], \$auto$rtlil.cc:3092:Mux$982 [63:32], 31'h00000000, \gen_trigger_regs.tselect_q , 29'h05000209, \gen_trigger_regs.tmatch_control_q , 2'h0, \gen_trigger_regs.tmatch_value_q  }),
    .S({ \$procmux$12131_CMP , \$procmux$12130_CMP , \$procmux$12129_CMP , \$procmux$12128_CMP , \$procmux$12127_CMP , \$procmux$12126_CMP , \$procmux$12125_CMP , \$procmux$12124_CMP , \$procmux$12123_CMP , \$procmux$12122_CMP , \$procmux$12121_CMP , \$procmux$12120_CMP , \$procmux$12119_CMP , \$procmux$12118_CMP , \$procmux$12117_CMP , \$procmux$12116_CMP , \$procmux$12115_CMP , \$procmux$12114_CTRL , \$procmux$12113_CTRL , \$procmux$12112_CTRL , \$procmux$12111_CMP , \$procmux$12110_CMP , \$procmux$12109_CMP  }),
    .Y(\$procmux$12108_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12109_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a2),
    .Y(\$procmux$12109_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:442.19-445.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12110_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a1),
    .Y(\$procmux$12110_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:438.20-441.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12111_CMP0  (
    .A(csr_addr_i),
    .B(12'h7a0),
    .Y(\$procmux$12111_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_ANY  (
    .A(\$procmux$12112_CMP ),
    .Y(\$procmux$12112_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP0  (
    .A(csr_addr_i),
    .B(12'hb80),
    .Y(\$procmux$12112_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP1  (
    .A(csr_addr_i),
    .B(12'hb82),
    .Y(\$procmux$12112_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP10  (
    .A(csr_addr_i),
    .B(12'hb8b),
    .Y(\$procmux$12112_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP11  (
    .A(csr_addr_i),
    .B(12'hb8c),
    .Y(\$procmux$12112_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP12  (
    .A(csr_addr_i),
    .B(12'hb8d),
    .Y(\$procmux$12112_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP13  (
    .A(csr_addr_i),
    .B(12'hb8e),
    .Y(\$procmux$12112_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP14  (
    .A(csr_addr_i),
    .B(12'hb8f),
    .Y(\$procmux$12112_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP15  (
    .A(csr_addr_i),
    .B(12'hb90),
    .Y(\$procmux$12112_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP16  (
    .A(csr_addr_i),
    .B(12'hb91),
    .Y(\$procmux$12112_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP17  (
    .A(csr_addr_i),
    .B(12'hb92),
    .Y(\$procmux$12112_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP18  (
    .A(csr_addr_i),
    .B(12'hb93),
    .Y(\$procmux$12112_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP19  (
    .A(csr_addr_i),
    .B(12'hb94),
    .Y(\$procmux$12112_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP2  (
    .A(csr_addr_i),
    .B(12'hb83),
    .Y(\$procmux$12112_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP20  (
    .A(csr_addr_i),
    .B(12'hb95),
    .Y(\$procmux$12112_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP21  (
    .A(csr_addr_i),
    .B(12'hb96),
    .Y(\$procmux$12112_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP22  (
    .A(csr_addr_i),
    .B(12'hb97),
    .Y(\$procmux$12112_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP23  (
    .A(csr_addr_i),
    .B(12'hb98),
    .Y(\$procmux$12112_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP24  (
    .A(csr_addr_i),
    .B(12'hb99),
    .Y(\$procmux$12112_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP25  (
    .A(csr_addr_i),
    .B(12'hb9a),
    .Y(\$procmux$12112_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP26  (
    .A(csr_addr_i),
    .B(12'hb9b),
    .Y(\$procmux$12112_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP27  (
    .A(csr_addr_i),
    .B(12'hb9c),
    .Y(\$procmux$12112_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP28  (
    .A(csr_addr_i),
    .B(12'hb9d),
    .Y(\$procmux$12112_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP29  (
    .A(csr_addr_i),
    .B(12'hb9e),
    .Y(\$procmux$12112_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP3  (
    .A(csr_addr_i),
    .B(12'hb84),
    .Y(\$procmux$12112_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP30  (
    .A(csr_addr_i),
    .B(12'hb9f),
    .Y(\$procmux$12112_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP4  (
    .A(csr_addr_i),
    .B(12'hb85),
    .Y(\$procmux$12112_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP5  (
    .A(csr_addr_i),
    .B(12'hb86),
    .Y(\$procmux$12112_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP6  (
    .A(csr_addr_i),
    .B(12'hb87),
    .Y(\$procmux$12112_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP7  (
    .A(csr_addr_i),
    .B(12'hb88),
    .Y(\$procmux$12112_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP8  (
    .A(csr_addr_i),
    .B(12'hb89),
    .Y(\$procmux$12112_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12112_CMP9  (
    .A(csr_addr_i),
    .B(12'hb8a),
    .Y(\$procmux$12112_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_ANY  (
    .A(\$procmux$12113_CMP ),
    .Y(\$procmux$12113_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP0  (
    .A(csr_addr_i),
    .B(12'hb00),
    .Y(\$procmux$12113_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP1  (
    .A(csr_addr_i),
    .B(12'hb02),
    .Y(\$procmux$12113_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP10  (
    .A(csr_addr_i),
    .B(12'hb0b),
    .Y(\$procmux$12113_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP11  (
    .A(csr_addr_i),
    .B(12'hb0c),
    .Y(\$procmux$12113_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP12  (
    .A(csr_addr_i),
    .B(12'hb0d),
    .Y(\$procmux$12113_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP13  (
    .A(csr_addr_i),
    .B(12'hb0e),
    .Y(\$procmux$12113_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP14  (
    .A(csr_addr_i),
    .B(12'hb0f),
    .Y(\$procmux$12113_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP15  (
    .A(csr_addr_i),
    .B(12'hb10),
    .Y(\$procmux$12113_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP16  (
    .A(csr_addr_i),
    .B(12'hb11),
    .Y(\$procmux$12113_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP17  (
    .A(csr_addr_i),
    .B(12'hb12),
    .Y(\$procmux$12113_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP18  (
    .A(csr_addr_i),
    .B(12'hb13),
    .Y(\$procmux$12113_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP19  (
    .A(csr_addr_i),
    .B(12'hb14),
    .Y(\$procmux$12113_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP2  (
    .A(csr_addr_i),
    .B(12'hb03),
    .Y(\$procmux$12113_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP20  (
    .A(csr_addr_i),
    .B(12'hb15),
    .Y(\$procmux$12113_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP21  (
    .A(csr_addr_i),
    .B(12'hb16),
    .Y(\$procmux$12113_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP22  (
    .A(csr_addr_i),
    .B(12'hb17),
    .Y(\$procmux$12113_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP23  (
    .A(csr_addr_i),
    .B(12'hb18),
    .Y(\$procmux$12113_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP24  (
    .A(csr_addr_i),
    .B(12'hb19),
    .Y(\$procmux$12113_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP25  (
    .A(csr_addr_i),
    .B(12'hb1a),
    .Y(\$procmux$12113_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP26  (
    .A(csr_addr_i),
    .B(12'hb1b),
    .Y(\$procmux$12113_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP27  (
    .A(csr_addr_i),
    .B(12'hb1c),
    .Y(\$procmux$12113_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP28  (
    .A(csr_addr_i),
    .B(12'hb1d),
    .Y(\$procmux$12113_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP29  (
    .A(csr_addr_i),
    .B(12'hb1e),
    .Y(\$procmux$12113_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP3  (
    .A(csr_addr_i),
    .B(12'hb04),
    .Y(\$procmux$12113_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP30  (
    .A(csr_addr_i),
    .B(12'hb1f),
    .Y(\$procmux$12113_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP4  (
    .A(csr_addr_i),
    .B(12'hb05),
    .Y(\$procmux$12113_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP5  (
    .A(csr_addr_i),
    .B(12'hb06),
    .Y(\$procmux$12113_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP6  (
    .A(csr_addr_i),
    .B(12'hb07),
    .Y(\$procmux$12113_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP7  (
    .A(csr_addr_i),
    .B(12'hb08),
    .Y(\$procmux$12113_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP8  (
    .A(csr_addr_i),
    .B(12'hb09),
    .Y(\$procmux$12113_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.9-421.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12113_CMP9  (
    .A(csr_addr_i),
    .B(12'hb0a),
    .Y(\$procmux$12113_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd29),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_ANY  (
    .A(\$procmux$12114_CMP ),
    .Y(\$procmux$12114_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP0  (
    .A(csr_addr_i),
    .B(12'h323),
    .Y(\$procmux$12114_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP1  (
    .A(csr_addr_i),
    .B(12'h324),
    .Y(\$procmux$12114_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP10  (
    .A(csr_addr_i),
    .B(12'h32d),
    .Y(\$procmux$12114_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP11  (
    .A(csr_addr_i),
    .B(12'h32e),
    .Y(\$procmux$12114_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP12  (
    .A(csr_addr_i),
    .B(12'h32f),
    .Y(\$procmux$12114_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP13  (
    .A(csr_addr_i),
    .B(12'h330),
    .Y(\$procmux$12114_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP14  (
    .A(csr_addr_i),
    .B(12'h331),
    .Y(\$procmux$12114_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP15  (
    .A(csr_addr_i),
    .B(12'h332),
    .Y(\$procmux$12114_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP16  (
    .A(csr_addr_i),
    .B(12'h333),
    .Y(\$procmux$12114_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP17  (
    .A(csr_addr_i),
    .B(12'h334),
    .Y(\$procmux$12114_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP18  (
    .A(csr_addr_i),
    .B(12'h335),
    .Y(\$procmux$12114_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP19  (
    .A(csr_addr_i),
    .B(12'h336),
    .Y(\$procmux$12114_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP2  (
    .A(csr_addr_i),
    .B(12'h325),
    .Y(\$procmux$12114_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP20  (
    .A(csr_addr_i),
    .B(12'h337),
    .Y(\$procmux$12114_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP21  (
    .A(csr_addr_i),
    .B(12'h338),
    .Y(\$procmux$12114_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP22  (
    .A(csr_addr_i),
    .B(12'h339),
    .Y(\$procmux$12114_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP23  (
    .A(csr_addr_i),
    .B(12'h33a),
    .Y(\$procmux$12114_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP24  (
    .A(csr_addr_i),
    .B(12'h33b),
    .Y(\$procmux$12114_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP25  (
    .A(csr_addr_i),
    .B(12'h33c),
    .Y(\$procmux$12114_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP26  (
    .A(csr_addr_i),
    .B(12'h33d),
    .Y(\$procmux$12114_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP27  (
    .A(csr_addr_i),
    .B(12'h33e),
    .Y(\$procmux$12114_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP28  (
    .A(csr_addr_i),
    .B(12'h33f),
    .Y(\$procmux$12114_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP3  (
    .A(csr_addr_i),
    .B(12'h326),
    .Y(\$procmux$12114_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP4  (
    .A(csr_addr_i),
    .B(12'h327),
    .Y(\$procmux$12114_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP5  (
    .A(csr_addr_i),
    .B(12'h328),
    .Y(\$procmux$12114_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP6  (
    .A(csr_addr_i),
    .B(12'h329),
    .Y(\$procmux$12114_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP7  (
    .A(csr_addr_i),
    .B(12'h32a),
    .Y(\$procmux$12114_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP8  (
    .A(csr_addr_i),
    .B(12'h32b),
    .Y(\$procmux$12114_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12114_CMP9  (
    .A(csr_addr_i),
    .B(12'h32c),
    .Y(\$procmux$12114_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:399.26-399.56|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12115_CMP0  (
    .A(csr_addr_i),
    .B(12'h320),
    .Y(\$procmux$12115_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:393.22-396.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12116_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b3),
    .Y(\$procmux$12116_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:389.22-392.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12117_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b2),
    .Y(\$procmux$12117_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:385.16-388.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12118_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b1),
    .Y(\$procmux$12118_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:381.17-384.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12119_CMP0  (
    .A(csr_addr_i),
    .B(12'h7b0),
    .Y(\$procmux$12119_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12120_CMP0  (
    .A(csr_addr_i),
    .B(12'h344),
    .Y(\$procmux$12120_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:325.18-325.42|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12121_CMP0  (
    .A(csr_addr_i),
    .B(12'h343),
    .Y(\$procmux$12121_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:322.19-322.71|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12122_CMP0  (
    .A(csr_addr_i),
    .B(12'h342),
    .Y(\$procmux$12122_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:319.17-319.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12123_CMP0  (
    .A(csr_addr_i),
    .B(12'h341),
    .Y(\$procmux$12123_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:316.18-316.42|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12124_CMP0  (
    .A(csr_addr_i),
    .B(12'h305),
    .Y(\$procmux$12124_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:313.21-313.48|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12125_CMP0  (
    .A(csr_addr_i),
    .B(12'h340),
    .Y(\$procmux$12125_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:300.16-306.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12126_CMP0  (
    .A(csr_addr_i),
    .B(12'h304),
    .Y(\$procmux$12126_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12127_CMP0  (
    .A(csr_addr_i),
    .B(12'h301),
    .Y(\$procmux$12127_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:280.20-287.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12128_CMP0  (
    .A(csr_addr_i),
    .B(12'h300),
    .Y(\$procmux$12128_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12129_CMP0  (
    .A(csr_addr_i),
    .B(12'hf14),
    .Y(\$procmux$12129_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12130_CMP0  (
    .A(csr_addr_i),
    .B(12'hf12),
    .Y(\$procmux$12130_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12131_CMP0  (
    .A(csr_addr_i),
    .B(12'hf11),
    .Y(\$procmux$12131_CMP )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1372.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_control_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tmatch_control_d ),
    .wr_en_i(\gen_trigger_regs.tmatch_control_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1385.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_value_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tmatch_value_d ),
    .wr_en_i(\gen_trigger_regs.tmatch_value_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1358.7" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr  \gen_trigger_regs.u_tselect_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tselect_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tselect_d ),
    .wr_en_i(\gen_trigger_regs.tselect_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1210.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$210 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1226.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$214 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:871.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:885.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(depc_q),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:899.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:913.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:824.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:778.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(mepc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:796.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i(mie_d),
    .wr_en_i(mie_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:810.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:956.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstack_cause_d),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:928.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstack_d),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:942.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstack_epc_d),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:764.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:838.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:851.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(mtvec_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtvec_d),
    .wr_en_i(mtvec_en)
  );
  assign unused_boot_addr = boot_addr_i[7:0];
  assign csr_addr = csr_addr_i;
  assign unused_csr_addr = csr_addr[7:5];
  assign mhpmcounter_idx = csr_addr[4:0];
  assign illegal_csr_priv = \$1 ;
  assign illegal_csr_write = \$5 ;
  assign illegal_csr_insn_o = \$11 ;
  assign mip[18] = irq_software_i;
  assign mip[17] = irq_timer_i;
  assign mip[16] = irq_external_i;
  assign mip[15:0] = irq_fast_i;
  assign csr_rdata_int = \$csr_rdata_int$38 ;
  assign illegal_csr = \$illegal_csr$62 ;
  assign exception_pc = \$exception_pc$159 ;
  assign priv_lvl_d = \$priv_lvl_d$160 ;
  assign mstatus_d = { \$mstatus_d[5:1]$161 , \$mstatus_d$109 [0] };
  assign mstatus_en = \$mstatus_en$162 ;
  assign mie_en = \$mie_en$111 ;
  assign mscratch_en = \$mscratch_en$112 ;
  assign mepc_d = \$mepc_d$163 ;
  assign mepc_en = \$mepc_en$164 ;
  assign mcause_d = \$mcause_d$165 ;
  assign mcause_en = \$mcause_en$166 ;
  assign mtval_d = \$mtval_d$167 ;
  assign mtval_en = \$mtval_en$168 ;
  assign mtvec_d = \$auto$rtlil.cc:3092:Mux$1004 ;
  assign mtvec_en = \$mtvec_en$116 ;
  assign dcsr_d = { \$dcsr_d$117 [31:9], \$dcsr_d[8:6]$170 , \$dcsr_d$117 [5:2], \$dcsr_d[1:0]$169  };
  assign dcsr_en = \$dcsr_en$171 ;
  assign depc_d = \$depc_d$172 ;
  assign depc_en = \$depc_en$173 ;
  assign dscratch0_en = \$dscratch0_en$120 ;
  assign dscratch1_en = \$dscratch1_en$121 ;
  assign mstack_d = mstatus_q[4:2];
  assign mstack_en = \$mstack_en$174 ;
  assign mstack_epc_d = mepc_q;
  assign mstack_cause_d = mcause_q;
  assign mcountinhibit_we = \$mcountinhibit_we$122 ;
  assign mhpmcounter_we = \$mhpmcounter_we$123 ;
  assign mhpmcounterh_we = \$mhpmcounterh_we$124 ;
  assign priv_mode_id_o = priv_lvl_q;
  assign priv_mode_lsu_o = \$auto$rtlil.cc:3092:Mux$1021 ;
  assign csr_wdata_int = \$csr_wdata_int$186 ;
  assign csr_wr = \$auto$rtlil.cc:2964:ReduceBool$1025 ;
  assign csr_we_int = \$196 ;
  assign csr_rdata_o = csr_rdata_int;
  assign csr_mepc_o = mepc_q;
  assign csr_depc_o = depc_q;
  assign csr_mtvec_o = mtvec_q;
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign debug_single_step_o = dcsr_q[2];
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign irqs_o = \$198 ;
  assign irq_pending_o = \$200 ;
  assign mie_d[18] = csr_wdata_int[3];
  assign mie_d[17] = csr_wdata_int[7];
  assign mie_d[16] = csr_wdata_int[11];
  assign mie_d[15:0] = csr_wdata_int[31:16];
  assign pmp_addr_rdata[511:480] = 32'd0;
  assign pmp_cfg_rdata[127:120] = 8'h00;
  assign pmp_addr_rdata[479:448] = 32'd0;
  assign pmp_cfg_rdata[119:112] = 8'h00;
  assign pmp_addr_rdata[447:416] = 32'd0;
  assign pmp_cfg_rdata[111:104] = 8'h00;
  assign pmp_addr_rdata[415:384] = 32'd0;
  assign pmp_cfg_rdata[103:96] = 8'h00;
  assign pmp_addr_rdata[383:352] = 32'd0;
  assign pmp_cfg_rdata[95:88] = 8'h00;
  assign pmp_addr_rdata[351:320] = 32'd0;
  assign pmp_cfg_rdata[87:80] = 8'h00;
  assign pmp_addr_rdata[319:288] = 32'd0;
  assign pmp_cfg_rdata[79:72] = 8'h00;
  assign pmp_addr_rdata[287:256] = 32'd0;
  assign pmp_cfg_rdata[71:64] = 8'h00;
  assign pmp_addr_rdata[255:224] = 32'd0;
  assign pmp_cfg_rdata[63:56] = 8'h00;
  assign pmp_addr_rdata[223:192] = 32'd0;
  assign pmp_cfg_rdata[55:48] = 8'h00;
  assign pmp_addr_rdata[191:160] = 32'd0;
  assign pmp_cfg_rdata[47:40] = 8'h00;
  assign pmp_addr_rdata[159:128] = 32'd0;
  assign pmp_cfg_rdata[39:32] = 8'h00;
  assign pmp_addr_rdata[127:96] = 32'd0;
  assign pmp_cfg_rdata[31:24] = 8'h00;
  assign pmp_addr_rdata[95:64] = 32'd0;
  assign pmp_cfg_rdata[23:16] = 8'h00;
  assign pmp_addr_rdata[63:32] = 32'd0;
  assign pmp_cfg_rdata[15:8] = 8'h00;
  assign pmp_addr_rdata[31:0] = 32'd0;
  assign pmp_cfg_rdata[7:0] = 8'h00;
  assign csr_pmp_cfg_o[23:18] = 6'h00;
  assign csr_pmp_addr_o[135:102] = 34'h000000000;
  assign csr_pmp_cfg_o[17:12] = 6'h00;
  assign csr_pmp_addr_o[101:68] = 34'h000000000;
  assign csr_pmp_cfg_o[11:6] = 6'h00;
  assign csr_pmp_addr_o[67:34] = 34'h000000000;
  assign csr_pmp_cfg_o[5:0] = 6'h00;
  assign csr_pmp_addr_o[33:0] = 34'h000000000;
  assign pmp_mseccfg = 3'h0;
  assign csr_pmp_mseccfg_o = pmp_mseccfg;
  assign mcountinhibit_d = \$mcountinhibit_d$204 ;
  assign mhpmcounter_incr = { 19'h00000, div_wait_i, wfi_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i, instr_ret_i, 2'h1 };
  assign mhpmevent = 1024'h0000000100000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign mhpmcounter[1919:1856] = minstret_raw;
  assign mhpmcounter[1983:1920] = 64'h0000000000000000;
  assign unused_mhpmcounter_we_1 = mhpmcounter_we[1];
  assign unused_mhpmcounterh_we_1 = mhpmcounterh_we[1];
  assign unused_mhpmcounter_incr_1 = mhpmcounter_incr[1];
  assign mhpmcounter[1855:1792] = 64'h0000000000000000;
  assign mhpmcounter[1791:1728] = 64'h0000000000000000;
  assign mhpmcounter[1727:1664] = 64'h0000000000000000;
  assign mhpmcounter[1663:1600] = 64'h0000000000000000;
  assign mhpmcounter[1599:1536] = 64'h0000000000000000;
  assign mhpmcounter[1535:1472] = 64'h0000000000000000;
  assign mhpmcounter[1471:1408] = 64'h0000000000000000;
  assign mhpmcounter[1407:1344] = 64'h0000000000000000;
  assign mhpmcounter[1343:1280] = 64'h0000000000000000;
  assign mhpmcounter[1279:1216] = 64'h0000000000000000;
  assign mhpmcounter[1215:1152] = 64'h0000000000000000;
  assign mhpmcounter[1151:1088] = 64'h0000000000000000;
  assign mhpmcounter[1087:1024] = 64'h0000000000000000;
  assign mhpmcounter[1023:960] = 64'h0000000000000000;
  assign mhpmcounter[959:896] = 64'h0000000000000000;
  assign mhpmcounter[895:832] = 64'h0000000000000000;
  assign mhpmcounter[831:768] = 64'h0000000000000000;
  assign mhpmcounter[767:704] = 64'h0000000000000000;
  assign mhpmcounter[703:640] = 64'h0000000000000000;
  assign mhpmcounter[639:576] = 64'h0000000000000000;
  assign mhpmcounter[575:512] = 64'h0000000000000000;
  assign mhpmcounter[511:448] = 64'h0000000000000000;
  assign mhpmcounter[447:384] = 64'h0000000000000000;
  assign mhpmcounter[383:320] = 64'h0000000000000000;
  assign mhpmcounter[319:256] = 64'h0000000000000000;
  assign mhpmcounter[255:192] = 64'h0000000000000000;
  assign mhpmcounter[191:128] = 64'h0000000000000000;
  assign mhpmcounter[127:64] = 64'h0000000000000000;
  assign mhpmcounter[63:0] = 64'h0000000000000000;
  assign mcountinhibit = { 29'h1fffffff, mcountinhibit_q };
  assign \g_mcountinhibit_reduced.unused_mhphcounter_we  = mhpmcounter_we[31:3];
  assign \g_mcountinhibit_reduced.unused_mhphcounterh_we  = mhpmcounterh_we[31:3];
  assign \g_mcountinhibit_reduced.unused_mhphcounter_incr  = mhpmcounter_incr[31:3];
  assign \gen_trigger_regs.tselect_we  = \$223 ;
  assign \gen_trigger_regs.tmatch_control_we  = \$233 ;
  assign \gen_trigger_regs.tmatch_value_we  = \$243 ;
  assign \gen_trigger_regs.tselect_d  = \$auto$rtlil.cc:3092:Mux$1028 ;
  assign \gen_trigger_regs.tmatch_control_d  = csr_wdata_int[2];
  assign \gen_trigger_regs.tmatch_value_d  = csr_wdata_int;
  assign tselect_rdata = { 31'h00000000, \gen_trigger_regs.tselect_q  };
  assign \gen_trigger_regs.selected_tmatch_control  = \gen_trigger_regs.tmatch_control_q ;
  assign \gen_trigger_regs.selected_tmatch_value  = \gen_trigger_regs.tmatch_value_q ;
  assign tmatch_control_rdata = { 29'h05000209, \gen_trigger_regs.selected_tmatch_control , 2'h0 };
  assign tmatch_value_rdata = \gen_trigger_regs.selected_tmatch_value ;
  assign \gen_trigger_regs.trigger_match  = \$250 ;
  assign trigger_match_o = \$252 ;
  assign \$csr_wdata_int$186  = \$procmux$11227_Y ;
  assign \$procmux$11234_CMP  = \$203 ;
  assign \$mcountinhibit_d$204  = \$procmux$11233_Y ;
  assign \$mstatus_d[5:1]$161 [4:1] = \$procmux$11238_Y ;
  assign \$procmux$11247_CMP  = nmi_mode_i;
  assign \$mcause_en$158  = \$procmux$11249_Y ;
  assign \$procmux$11255_CMP  = nmi_mode_i;
  assign \$mcause_d$157  = \$procmux$11257_Y ;
  assign \$procmux$11263_CMP  = nmi_mode_i;
  assign \$mepc_en$156  = \$procmux$11265_Y ;
  assign \$procmux$11271_CMP  = nmi_mode_i;
  assign \$mepc_d$155  = \$procmux$11273_Y ;
  assign \$procmux$11278_CMP  = \$152 ;
  assign \$mstatus_d[1]$153  = \$procmux$11279_Y ;
  assign \$mstatus_d[5:1]$161 [0] = \$procmux$11285_Y ;
  assign \$procmux$11291_CMP  = nmi_mode_i;
  assign \$mstatus_d[4:2]$154  = \$procmux$11293_Y ;
  assign \$procmux$11300_CMP  = \$127 ;
  assign \$procmux$11303_CMP  = debug_csr_save_i;
  assign \$mtval_en$135  = \$procmux$11305_Y ;
  assign \$procmux$11312_CMP  = \$127 ;
  assign \$procmux$11315_CMP  = debug_csr_save_i;
  assign \$mtval_d$134  = \$procmux$11317_Y ;
  assign \$procmux$11324_CMP  = \$127 ;
  assign \$procmux$11327_CMP  = debug_csr_save_i;
  assign \$mcause_en$133  = \$procmux$11329_Y ;
  assign \$procmux$11336_CMP  = \$127 ;
  assign \$procmux$11339_CMP  = debug_csr_save_i;
  assign \$mcause_d$132  = \$procmux$11341_Y ;
  assign \$procmux$11348_CMP  = \$127 ;
  assign \$procmux$11351_CMP  = debug_csr_save_i;
  assign \$mepc_en$131  = \$procmux$11353_Y ;
  assign \$procmux$11360_CMP  = \$127 ;
  assign \$procmux$11363_CMP  = debug_csr_save_i;
  assign \$mepc_d$130  = \$procmux$11365_Y ;
  assign \$procmux$11372_CMP  = \$127 ;
  assign \$procmux$11375_CMP  = debug_csr_save_i;
  assign \$mstatus_en$129  = \$procmux$11377_Y ;
  assign \$procmux$11384_CMP  = \$127 ;
  assign \$procmux$11387_CMP  = debug_csr_save_i;
  assign \$mstatus_d[5:2]$128  = \$procmux$11389_Y ;
  assign \$procmux$11398_CMP  = debug_csr_save_i;
  assign \$mstack_en$150  = \$procmux$11400_Y ;
  assign \$procmux$11408_CMP  = debug_csr_save_i;
  assign \$depc_en$149  = \$procmux$11410_Y ;
  assign \$procmux$11418_CMP  = debug_csr_save_i;
  assign \$depc_d$148  = \$procmux$11420_Y ;
  assign \$procmux$11428_CMP  = debug_csr_save_i;
  assign \$dcsr_en$147  = \$procmux$11430_Y ;
  assign \$procmux$11438_CMP  = debug_csr_save_i;
  assign \$dcsr_d[8:6]$146  = \$procmux$11440_Y ;
  assign \$procmux$11448_CMP  = debug_csr_save_i;
  assign \$dcsr_d[1:0]$145  = \$procmux$11450_Y ;
  assign \$procmux$11459_CMP  = debug_csr_save_i;
  assign \$mtval_en$144  = \$procmux$11461_Y ;
  assign \$procmux$11470_CMP  = debug_csr_save_i;
  assign \$mtval_d$143  = \$procmux$11472_Y ;
  assign \$procmux$11481_CMP  = debug_csr_save_i;
  assign \$mcause_en$142  = \$procmux$11483_Y ;
  assign \$procmux$11492_CMP  = debug_csr_save_i;
  assign \$mcause_d$141  = \$procmux$11494_Y ;
  assign \$procmux$11503_CMP  = debug_csr_save_i;
  assign \$mepc_en$140  = \$procmux$11505_Y ;
  assign \$procmux$11514_CMP  = debug_csr_save_i;
  assign \$mepc_d$139  = \$procmux$11516_Y ;
  assign \$procmux$11525_CMP  = debug_csr_save_i;
  assign \$mstatus_en$138  = \$procmux$11527_Y ;
  assign \$procmux$11536_CMP  = debug_csr_save_i;
  assign \$mstatus_d[5:2]$137  = \$procmux$11538_Y ;
  assign \$exception_pc$125  = \$procmux$11548_Y ;
  assign \$mstack_en$174  = \$procmux$11556_Y ;
  assign \$depc_en$173  = \$procmux$11564_Y ;
  assign \$depc_d$172  = \$procmux$11572_Y ;
  assign \$dcsr_en$171  = \$procmux$11580_Y ;
  assign \$dcsr_d[8:6]$170  = \$procmux$11588_Y ;
  assign \$dcsr_d[1:0]$169  = \$procmux$11596_Y ;
  assign \$mtval_en$168  = \$procmux$11604_Y ;
  assign \$mtval_d$167  = \$procmux$11612_Y ;
  assign \$mcause_en$166  = \$procmux$11618_Y ;
  assign \$mcause_d$165  = \$procmux$11627_Y ;
  assign \$mepc_en$164  = \$procmux$11636_Y ;
  assign \$mepc_d$163  = \$procmux$11645_Y ;
  assign \$mstatus_en$162  = \$procmux$11654_Y ;
  assign \$procmux$11664_CMP  = \$127 ;
  assign \$procmux$11667_CMP  = debug_csr_save_i;
  assign \$mstack_en$136  = \$procmux$11669_Y ;
  assign \$priv_lvl_d$160  = \$procmux$11675_Y ;
  assign \$exception_pc$159  = \$procmux$11687_Y ;
  assign \$procmux$11698_CMP  = \$77 ;
  assign \$procmux$11702_CMP  = csr_we_int;
  assign \$dcsr_d[1:0]$78  = \$procmux$11701_Y ;
  assign \$procmux$11718_CMP  = \$70 ;
  assign \$procmux$11722_CMP  = csr_we_int;
  assign \$mstatus_d[3:2]$71  = \$procmux$11721_Y ;
  assign \$procmux$11727_CMP  = csr_we_int;
  assign \$mhpmcounterh_we$108  = \$procmux$11726_Y ;
  assign \$procmux$11733_CMP  = csr_we_int;
  assign \$mhpmcounter_we$107  = \$procmux$11732_Y ;
  assign \$procmux$11740_CMP  = csr_we_int;
  assign \$mcountinhibit_we$106  = \$procmux$11739_Y ;
  assign \$procmux$11748_CMP  = csr_we_int;
  assign \$dscratch1_en$105  = \$procmux$11747_Y ;
  assign \$procmux$11757_CMP  = csr_we_int;
  assign \$dscratch0_en$104  = \$procmux$11756_Y ;
  assign \$procmux$11767_CMP  = csr_we_int;
  assign \$depc_en$103  = \$procmux$11766_Y ;
  assign \$procmux$11779_CMP  = csr_we_int;
  assign \$dcsr_en$102  = \$procmux$11778_Y ;
  assign \$procmux$11791_CMP  = csr_we_int;
  assign \$dcsr_d$101  = \$procmux$11790_Y ;
  assign \$procmux$11803_CMP  = csr_we_int;
  assign \$mtvec_en$100  = \$procmux$11802_Y ;
  assign \$procmux$11816_CMP  = csr_we_int;
  assign \$mtval_en$99  = \$procmux$11815_Y ;
  assign \$procmux$11830_CMP  = csr_we_int;
  assign \$mcause_en$98  = \$procmux$11829_Y ;
  assign \$procmux$11845_CMP  = csr_we_int;
  assign \$mepc_en$97  = \$procmux$11844_Y ;
  assign \$procmux$11861_CMP  = csr_we_int;
  assign \$mscratch_en$96  = \$procmux$11860_Y ;
  assign \$procmux$11878_CMP  = csr_we_int;
  assign \$mie_en$95  = \$procmux$11877_Y ;
  assign \$procmux$11897_CMP  = csr_we_int;
  assign \$mstatus_en$94  = \$procmux$11896_Y ;
  assign \$procmux$11916_CMP  = csr_we_int;
  assign \$mstatus_d$93  = \$procmux$11915_Y ;
  assign \$procmux$11919_CMP  = csr_we_int;
  assign \$mhpmcounterh_we$124  = \$procmux$11918_Y ;
  assign \$procmux$11922_CMP  = csr_we_int;
  assign \$mhpmcounter_we$123  = \$procmux$11921_Y ;
  assign \$procmux$11925_CMP  = csr_we_int;
  assign \$mcountinhibit_we$122  = \$procmux$11924_Y ;
  assign \$procmux$11928_CMP  = csr_we_int;
  assign \$dscratch1_en$121  = \$procmux$11927_Y ;
  assign \$procmux$11931_CMP  = csr_we_int;
  assign \$dscratch0_en$120  = \$procmux$11930_Y ;
  assign \$procmux$11934_CMP  = csr_we_int;
  assign \$depc_en$119  = \$procmux$11933_Y ;
  assign \$procmux$11937_CMP  = csr_we_int;
  assign \$dcsr_en$118  = \$procmux$11936_Y ;
  assign \$procmux$11940_CMP  = csr_we_int;
  assign \$dcsr_d$117  = \$procmux$11939_Y ;
  assign \$procmux$11943_CMP  = csr_we_int;
  assign \$mtvec_en$116  = \$procmux$11942_Y ;
  assign \$procmux$11946_CMP  = csr_we_int;
  assign \$mtval_en$115  = \$procmux$11945_Y ;
  assign \$procmux$11949_CMP  = csr_we_int;
  assign \$mcause_en$114  = \$procmux$11948_Y ;
  assign \$procmux$11952_CMP  = csr_we_int;
  assign \$mepc_en$113  = \$procmux$11951_Y ;
  assign \$procmux$11955_CMP  = csr_we_int;
  assign \$mscratch_en$112  = \$procmux$11954_Y ;
  assign \$procmux$11958_CMP  = csr_we_int;
  assign \$mie_en$111  = \$procmux$11957_Y ;
  assign \$procmux$11961_CMP  = csr_we_int;
  assign \$mstatus_en$110  = \$procmux$11960_Y ;
  assign \$procmux$11964_CMP  = csr_we_int;
  assign \$mstatus_d$109  = \$procmux$11963_Y ;
  assign \$illegal_csr$62  = \$illegal_csr$61 ;
  assign \$procmux$11968_CMP  = \$auto$rtlil.cc:2964:ReduceBool$1003 ;
  assign \$illegal_csr$61  = \$procmux$11967_Y ;
  assign \$illegal_csr$14  = \$procmux$12006_Y ;
  assign \$illegal_csr$13  = \$procmux$12045_Y ;
  assign \$illegal_csr$39  = \$procmux$12048_Y ;
  assign \$csr_rdata_int$38  = \$procmux$12108_Y ;
  assign \$auto$rtlil.cc:3093:Bwmux$1018  = \$auto$rtlil.cc:3004:And$16668 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1011  = \$auto$rtlil.cc:3004:And$16670 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1020  = rst_ni;
  assign \$203  = mcountinhibit_we;
  assign \$210  = \$208 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1027  = rst_ni;
  assign \$252  = \$250 ;
  assign \$procmux$11239_CMP  = csr_restore_mret_i;
  assign \$procmux$11242_CMP  = csr_save_cause_i;
  assign \$procmux$11294_CMP  = csr_restore_mret_i;
  assign \$procmux$11390_CMP  = csr_save_cause_i;
  assign \$procmux$11539_CMP  = csr_save_cause_i;
  assign \$procmux$11250_CMP  = csr_restore_mret_i;
  assign \$procmux$11258_CMP  = csr_restore_mret_i;
  assign \$procmux$11266_CMP  = csr_restore_mret_i;
  assign \$procmux$11274_CMP  = csr_restore_mret_i;
  assign \$procmux$11280_CMP  = csr_restore_mret_i;
  assign \$procmux$11286_CMP  = csr_restore_mret_i;
  assign \$procmux$11306_CMP  = csr_save_cause_i;
  assign \$procmux$11318_CMP  = csr_save_cause_i;
  assign \$procmux$11330_CMP  = csr_save_cause_i;
  assign \$procmux$11342_CMP  = csr_save_cause_i;
  assign \$procmux$11354_CMP  = csr_save_cause_i;
  assign \$procmux$11547_CMP  = csr_save_if_i;
  assign \$procmux$11549_CMP  = csr_save_cause_i;
  assign \$procmux$11366_CMP  = csr_save_cause_i;
  assign \$procmux$11378_CMP  = csr_save_cause_i;
  assign \$procmux$11670_CMP  = csr_save_cause_i;
  assign \$procmux$11401_CMP  = csr_save_cause_i;
  assign \$procmux$11411_CMP  = csr_save_cause_i;
  assign \$procmux$11421_CMP  = csr_save_cause_i;
  assign \$procmux$11431_CMP  = csr_save_cause_i;
  assign \$procmux$11441_CMP  = csr_save_cause_i;
  assign \$procmux$11451_CMP  = csr_save_cause_i;
  assign \$procmux$11462_CMP  = csr_save_cause_i;
  assign \$procmux$11473_CMP  = csr_save_cause_i;
  assign \$procmux$11484_CMP  = csr_save_cause_i;
  assign \$procmux$11495_CMP  = csr_save_cause_i;
  assign \$procmux$11506_CMP  = csr_save_cause_i;
  assign \$procmux$11517_CMP  = csr_save_cause_i;
  assign \$procmux$11528_CMP  = csr_save_cause_i;
  assign \$procmux$11557_CMP  = csr_save_cause_i;
  assign \$procmux$11565_CMP  = csr_save_cause_i;
  assign \$procmux$11573_CMP  = csr_save_cause_i;
  assign \$procmux$11581_CMP  = csr_save_cause_i;
  assign \$procmux$11589_CMP  = csr_save_cause_i;
  assign \$procmux$11597_CMP  = csr_save_cause_i;
  assign \$procmux$11605_CMP  = csr_save_cause_i;
  assign \$procmux$11613_CMP  = csr_save_cause_i;
  assign \$procmux$11619_CMP  = csr_restore_mret_i;
  assign \$procmux$11622_CMP  = csr_save_cause_i;
  assign \$procmux$11628_CMP  = csr_restore_mret_i;
  assign \$procmux$11631_CMP  = csr_save_cause_i;
  assign \$procmux$11637_CMP  = csr_restore_mret_i;
  assign \$procmux$11640_CMP  = csr_save_cause_i;
  assign \$procmux$11646_CMP  = csr_restore_mret_i;
  assign \$procmux$11649_CMP  = csr_save_cause_i;
  assign \$procmux$11655_CMP  = csr_restore_mret_i;
  assign \$procmux$11658_CMP  = csr_save_cause_i;
  assign \$procmux$11676_CMP  = csr_restore_mret_i;
  assign \$procmux$11677_CMP  = csr_restore_dret_i;
  assign \$procmux$11680_CMP  = csr_save_cause_i;
  assign \$procmux$11688_CMP  = csr_save_cause_i;
  assign \$auto$rtlil.cc:3004:And$16670  = \$auto$rtlil.cc:3114:Demux$1010 ;
  assign \$auto$rtlil.cc:3004:And$16668  = \$auto$rtlil.cc:3114:Demux$1017 ;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1653 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1654 ;
  wire \$procmux$3818_Y ;
  wire \$procmux$3819_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1653 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rdata_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3818  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3819_CMP ),
    .Y(\$procmux$3818_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3819_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3818_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1654  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1655 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1656 ;
  wire [31:0] \$procmux$3816_Y ;
  wire \$procmux$3817_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1655 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3816  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3817_CMP ),
    .Y(\$procmux$3816_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3817_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3816_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1656  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1651 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1652 ;
  wire \$procmux$3820_Y ;
  wire \$procmux$3821_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1651 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rdata_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3820  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3821_CMP ),
    .Y(\$procmux$3820_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3821_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3820_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1652  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1633 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1634 ;
  wire [31:0] \$procmux$3862_Y ;
  wire \$procmux$3863_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1633 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd1073741827),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3862  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3863_CMP ),
    .Y(\$procmux$3862_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3863_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3862_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1634  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1635 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1636 ;
  wire [31:0] \$procmux$3860_Y ;
  wire \$procmux$3861_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1635 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3860  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3861_CMP ),
    .Y(\$procmux$3860_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3861_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3860_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1636  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1637 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1638 ;
  wire [31:0] \$procmux$3858_Y ;
  wire \$procmux$3859_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1637 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3858  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3859_CMP ),
    .Y(\$procmux$3858_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3859_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3858_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1638  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1639 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1640 ;
  wire [31:0] \$procmux$3856_Y ;
  wire \$procmux$3857_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1639 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3856  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3857_CMP ),
    .Y(\$procmux$3856_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3857_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3856_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1640  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1627 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1628 ;
  wire [6:0] \$procmux$3868_Y ;
  wire \$procmux$3869_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [6:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1627 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$rdata_q  (
    .AD(7'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$3868  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3869_CMP ),
    .Y(\$procmux$3868_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3869_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3868_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1628  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1621 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1622 ;
  wire [31:0] \$procmux$3874_Y ;
  wire \$procmux$3875_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1621 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3874  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3875_CMP ),
    .Y(\$procmux$3874_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3875_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3874_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1622  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1623 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1624 ;
  wire [18:0] \$procmux$3872_Y ;
  wire \$procmux$3873_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [18:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [18:0] rd_data_o;
  wire [18:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [18:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1623 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd19)
  ) \$driver$rdata_q  (
    .AD(19'h00000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd19)
  ) \$procmux$3872  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3873_CMP ),
    .Y(\$procmux$3872_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3873_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3872_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1624  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1625 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1626 ;
  wire [31:0] \$procmux$3870_Y ;
  wire \$procmux$3871_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1625 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3870  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3871_CMP ),
    .Y(\$procmux$3870_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3871_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3870_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1626  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1645 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1646 ;
  wire [6:0] \$procmux$3850_Y ;
  wire \$procmux$3851_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [6:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1645 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$rdata_q  (
    .AD(7'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$3850  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3851_CMP ),
    .Y(\$procmux$3850_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3851_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3850_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1646  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1641 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1642 ;
  wire [2:0] \$procmux$3854_Y ;
  wire \$procmux$3855_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [2:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [2:0] rd_data_o;
  wire [2:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [2:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1641 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$rdata_q  (
    .AD(3'h4),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3854  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3855_CMP ),
    .Y(\$procmux$3854_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3855_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3854_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1642  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1643 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1644 ;
  wire [31:0] \$procmux$3852_Y ;
  wire \$procmux$3853_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1643 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3852  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3853_CMP ),
    .Y(\$procmux$3852_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3853_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3852_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1644  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1619 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1620 ;
  wire [5:0] \$procmux$3876_Y ;
  wire \$procmux$3877_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [5:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [5:0] rd_data_o;
  wire [5:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [5:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1619 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$rdata_q  (
    .AD(6'h0c),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$3876  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3877_CMP ),
    .Y(\$procmux$3876_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3877_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3876_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1620  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1629 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1630 ;
  wire [31:0] \$procmux$3866_Y ;
  wire \$procmux$3867_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1629 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3866  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3867_CMP ),
    .Y(\$procmux$3866_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3867_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3866_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1630  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1631 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1632 ;
  wire [31:0] \$procmux$3864_Y ;
  wire \$procmux$3865_CMP ;
  /* src = "rtl/cve2/cve2_csr.sv:31.14-33.8" */
  wire [31:0] \$rdata_q$3 ;
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1631 )
  );
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q  (
    .AD(32'd1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$3 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_csr.sv:32.7-32.28|rtl/cve2/cve2_csr.sv:31.14-33.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3864  (
    .A(rdata_q),
    .B(wr_data_i),
    .S(\$procmux$3865_CMP ),
    .Y(\$procmux$3864_Y )
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
  assign \$procmux$3865_CMP  = wr_en_i;
  assign \$rdata_q$3  = \$procmux$3864_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1632  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_decoder.sv:16.8" */
module \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o, multdiv_signed_mode_o
, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$147 ;
  wire \$15 ;
  wire \$152 ;
  wire \$154 ;
  wire \$170 ;
  wire \$186 ;
  wire \$188 ;
  wire \$190 ;
  wire \$23 ;
  wire \$3 ;
  wire \$30 ;
  wire \$35 ;
  wire \$38 ;
  wire \$43 ;
  wire \$48 ;
  wire \$52 ;
  wire \$58 ;
  wire \$7 ;
  wire \$71 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$86 ;
  wire \$9 ;
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$135 ;
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$139 ;
  /* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$144 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [1:0] \$alu_op_a_mux_sel_o$167 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1142.11-1147.14" */
  wire [1:0] \$alu_op_a_mux_sel_o$171 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$174 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$179 ;
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12" */
  wire \$alu_op_b_mux_sel_o$136 ;
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  wire \$alu_op_b_mux_sel_o$140 ;
  /* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  wire \$alu_op_b_mux_sel_o$145 ;
  /* src = "rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  wire \$alu_op_b_mux_sel_o$149 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire \$alu_op_b_mux_sel_o$168 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  wire \$alu_op_b_mux_sel_o$175 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire \$alu_op_b_mux_sel_o$180 ;
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12" */
  wire [6:0] \$alu_operator_o$134 ;
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  wire [6:0] \$alu_operator_o$138 ;
  /* src = "rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  wire [6:0] \$alu_operator_o$141 ;
  /* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  wire [6:0] \$alu_operator_o$143 ;
  /* src = "rtl/cve2/cve2_decoder.sv:804.13-867.16" */
  wire [6:0] \$alu_operator_o$150 ;
  /* src = "rtl/cve2/cve2_decoder.sv:908.24-910.18" */
  wire [6:0] \$alu_operator_o$155 ;
  /* src = "rtl/cve2/cve2_decoder.sv:906.15-910.18" */
  wire [6:0] \$alu_operator_o$156 ;
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16" */
  wire [6:0] \$alu_operator_o$157 ;
  /* src = "rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  wire [6:0] \$alu_operator_o$158 ;
  /* src = "rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  wire [6:0] \$alu_operator_o$159 ;
  /* src = "rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  wire [6:0] \$alu_operator_o$162 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [6:0] \$alu_operator_o$166 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire [6:0] \$alu_operator_o$178 ;
  wire \$auto$proc_rom.cc:154:do_switch$1815 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$1598 ;
  wire \$auto$rtlil.cc:3092:Mux$1599 ;
  wire \$auto$rtlil.cc:3092:Mux$1600 ;
  wire \$auto$rtlil.cc:3092:Mux$1601 ;
  wire \$auto$rtlil.cc:3092:Mux$1602 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$branch_in_dec_o$123 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$branch_in_dec_o$131 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$csr_access_o$101 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$csr_access_o$117 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$csr_access_o$127 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$csr_illegal$103 ;
  /* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  wire \$csr_illegal$88 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$csr_illegal$91 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire [1:0] \$csr_op$105 ;
  /* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  wire [1:0] \$csr_op$89 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire [1:0] \$csr_op$93 ;
  /* src = "rtl/cve2/cve2_decoder.sv:190.5-193.8" */
  wire [1:0] \$csr_op_o$16 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$data_req_o$118 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$data_req_o$128 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$data_sign_extension_o$121 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire [1:0] \$data_type_o$120 ;
  /* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  wire [1:0] \$data_type_o$28 ;
  /* src = "rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  wire [1:0] \$data_type_o$33 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$data_we_o$119 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$data_we_o$129 ;
  /* src = "rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  wire \$div_sel_o$161 ;
  /* src = "rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  wire \$div_sel_o$164 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire \$div_sel_o$182 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$dret_insn_o$108 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$dret_insn_o$75 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$dret_insn_o$96 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$ebrk_insn_o$106 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$ebrk_insn_o$73 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$ebrk_insn_o$94 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$ecall_insn_o$109 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$ecall_insn_o$76 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$ecall_insn_o$97 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$illegal_insn$102 ;
  /* src = "rtl/cve2/cve2_decoder.sv:639.5-641.8" */
  wire \$illegal_insn$124 ;
  /* src = "rtl/cve2/cve2_decoder.sv:261.9-263.12" */
  wire \$illegal_insn$24 ;
  /* src = "rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  wire \$illegal_insn$25 ;
  /* src = "rtl/cve2/cve2_decoder.sv:295.9-297.12" */
  wire \$illegal_insn$26 ;
  /* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  wire \$illegal_insn$27 ;
  /* src = "rtl/cve2/cve2_decoder.sv:322.13-324.16" */
  wire \$illegal_insn$31 ;
  /* src = "rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  wire \$illegal_insn$32 ;
  /* src = "rtl/cve2/cve2_decoder.sv:366.17-370.20" */
  wire \$illegal_insn$39 ;
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  wire \$illegal_insn$40 ;
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  wire \$illegal_insn$41 ;
  /* src = "rtl/cve2/cve2_decoder.sv:411.28-415.22" */
  wire \$illegal_insn$45 ;
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22" */
  wire \$illegal_insn$46 ;
  /* src = "rtl/cve2/cve2_decoder.sv:420.28-424.22" */
  wire \$illegal_insn$49 ;
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22" */
  wire \$illegal_insn$50 ;
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22" */
  wire \$illegal_insn$53 ;
  /* src = "rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  wire \$illegal_insn$54 ;
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  wire \$illegal_insn$55 ;
  /* src = "rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  wire \$illegal_insn$56 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire \$illegal_insn$59 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire \$illegal_insn$62 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$illegal_insn$66 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$illegal_insn$72 ;
  /* src = "rtl/cve2/cve2_decoder.sv:609.11-611.14" */
  wire \$illegal_insn$84 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$illegal_insn$90 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  wire \$imm_a_mux_sel_o$172 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire \$imm_a_mux_sel_o$176 ;
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12" */
  wire [2:0] \$imm_b_mux_sel_o$133 ;
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  wire [2:0] \$imm_b_mux_sel_o$137 ;
  /* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  wire [2:0] \$imm_b_mux_sel_o$142 ;
  /* src = "rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  wire [2:0] \$imm_b_mux_sel_o$148 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [2:0] \$imm_b_mux_sel_o$165 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  wire [2:0] \$imm_b_mux_sel_o$173 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire [2:0] \$imm_b_mux_sel_o$177 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$jump_in_dec_o$122 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$jump_in_dec_o$130 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$jump_in_dec_o$69 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$jump_set_o$111 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$jump_set_o$126 ;
  /* src = "rtl/cve2/cve2_decoder.sv:240.9-247.12" */
  wire \$jump_set_o$19 ;
  /* src = "rtl/cve2/cve2_decoder.sv:253.9-260.12" */
  wire \$jump_set_o$21 ;
  /* src = "rtl/cve2/cve2_decoder.sv:573.13-575.16" */
  wire \$jump_set_o$65 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$jump_set_o$68 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$mret_insn_o$107 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$mret_insn_o$74 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$mret_insn_o$95 ;
  /* src = "rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  wire \$mult_sel_o$160 ;
  /* src = "rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  wire \$mult_sel_o$163 ;
  /* src = "rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  wire \$mult_sel_o$181 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire [1:0] \$multdiv_operator_o$115 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire [1:0] \$multdiv_operator_o$60 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire [1:0] \$multdiv_operator_o$63 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire [1:0] \$multdiv_signed_mode_o$116 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire [1:0] \$multdiv_signed_mode_o$61 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire [1:0] \$multdiv_signed_mode_o$64 ;
  wire [1:0] \$procmux$5360_Y ;
  wire \$procmux$5361_CMP ;
  wire [1:0] \$procmux$5363_Y ;
  wire \$procmux$5364_CMP ;
  wire [1:0] \$procmux$5365_Y ;
  wire \$procmux$5366_CMP ;
  wire \$procmux$5371_Y ;
  wire \$procmux$5372_CMP ;
  wire [1:0] \$procmux$5376_Y ;
  wire \$procmux$5377_CMP ;
  wire [1:0] \$procmux$5378_Y ;
  wire \$procmux$5379_CMP ;
  wire [2:0] \$procmux$5384_Y ;
  wire \$procmux$5385_CMP ;
  wire \$procmux$5389_Y ;
  wire \$procmux$5390_CMP ;
  wire \$procmux$5391_Y ;
  wire \$procmux$5392_CMP ;
  wire \$procmux$5398_Y ;
  wire \$procmux$5399_CMP ;
  wire [1:0] \$procmux$5403_Y ;
  wire \$procmux$5404_CMP ;
  wire \$procmux$5405_CMP ;
  wire [1:0] \$procmux$5406_Y ;
  wire \$procmux$5407_CMP ;
  wire [6:0] \$procmux$5411_Y ;
  wire \$procmux$5412_CMP ;
  wire \$procmux$5413_CMP ;
  wire [6:0] \$procmux$5414_Y ;
  wire \$procmux$5415_CMP ;
  wire [2:0] \$procmux$5419_Y ;
  wire \$procmux$5420_CMP ;
  wire [2:0] \$procmux$5421_Y ;
  wire \$procmux$5422_CMP ;
  wire \$procmux$5480_Y ;
  wire \$procmux$5481_CMP ;
  wire \$procmux$5482_Y ;
  wire \$procmux$5483_CMP ;
  wire \$procmux$5541_Y ;
  wire \$procmux$5542_CMP ;
  wire \$procmux$5543_Y ;
  wire \$procmux$5544_CMP ;
  wire [6:0] \$procmux$5549_Y ;
  wire \$procmux$5550_CMP ;
  wire \$procmux$5551_CMP ;
  wire \$procmux$5552_CMP ;
  wire \$procmux$5553_CMP ;
  wire \$procmux$5554_CMP ;
  wire \$procmux$5555_CMP ;
  wire \$procmux$5556_CMP ;
  wire \$procmux$5557_CMP ;
  wire \$procmux$5558_CMP ;
  wire \$procmux$5559_CMP ;
  wire \$procmux$5560_CMP ;
  wire \$procmux$5561_CMP ;
  wire \$procmux$5562_CMP ;
  wire \$procmux$5563_CMP ;
  wire \$procmux$5564_CMP ;
  wire \$procmux$5565_CMP ;
  wire \$procmux$5566_CMP ;
  wire [6:0] \$procmux$5568_Y ;
  wire \$procmux$5569_CMP ;
  wire [6:0] \$procmux$5570_Y ;
  wire \$procmux$5571_CMP ;
  wire \$procmux$5577_Y ;
  wire \$procmux$5578_CMP ;
  wire \$procmux$5579_Y ;
  wire \$procmux$5580_CMP ;
  wire \$procmux$5586_Y ;
  wire \$procmux$5587_CMP ;
  wire \$procmux$5588_Y ;
  wire \$procmux$5589_CMP ;
  wire [6:0] \$procmux$5595_Y ;
  wire \$procmux$5596_CMP ;
  wire [6:0] \$procmux$5597_Y ;
  wire \$procmux$5598_CMP ;
  wire [6:0] \$procmux$5604_Y ;
  wire \$procmux$5605_CMP ;
  wire [6:0] \$procmux$5606_Y ;
  wire \$procmux$5607_CMP ;
  wire [6:0] \$procmux$5612_Y ;
  wire \$procmux$5613_CMP ;
  wire [6:0] \$procmux$5615_Y ;
  wire \$procmux$5616_CMP ;
  wire [6:0] \$procmux$5617_Y ;
  wire \$procmux$5618_CMP ;
  wire [6:0] \$procmux$5619_Y ;
  wire \$procmux$5620_CMP ;
  wire [6:0] \$procmux$5627_Y ;
  wire \$procmux$5628_CMP ;
  wire [6:0] \$procmux$5629_Y ;
  wire \$procmux$5630_CMP ;
  wire [6:0] \$procmux$5631_Y ;
  wire \$procmux$5632_CMP ;
  wire [6:0] \$procmux$5638_Y ;
  wire \$procmux$5639_CMP ;
  wire [6:0] \$procmux$5640_Y ;
  wire \$procmux$5641_CMP ;
  wire [6:0] \$procmux$5647_Y ;
  wire \$procmux$5648_CMP ;
  wire \$procmux$5649_CMP ;
  wire \$procmux$5650_CMP ;
  wire \$procmux$5651_CMP ;
  wire \$procmux$5652_CMP ;
  wire \$procmux$5653_CMP ;
  wire \$procmux$5654_CMP ;
  wire \$procmux$5655_CMP ;
  wire [6:0] \$procmux$5656_Y ;
  wire \$procmux$5657_CMP ;
  wire \$procmux$5666_Y ;
  wire \$procmux$5667_CMP ;
  wire \$procmux$5668_Y ;
  wire \$procmux$5669_CMP ;
  wire [2:0] \$procmux$5678_Y ;
  wire \$procmux$5679_CMP ;
  wire [2:0] \$procmux$5680_Y ;
  wire \$procmux$5681_CMP ;
  wire \$procmux$5692_Y ;
  wire \$procmux$5693_CMP ;
  wire \$procmux$5695_Y ;
  wire \$procmux$5696_CMP ;
  wire [1:0] \$procmux$5707_Y ;
  wire \$procmux$5708_CMP ;
  wire [1:0] \$procmux$5710_Y ;
  wire \$procmux$5711_CMP ;
  wire [6:0] \$procmux$5722_Y ;
  wire \$procmux$5723_CMP ;
  wire [6:0] \$procmux$5725_Y ;
  wire \$procmux$5726_CMP ;
  wire [2:0] \$procmux$5737_Y ;
  wire \$procmux$5738_CMP ;
  wire [2:0] \$procmux$5740_Y ;
  wire \$procmux$5741_CMP ;
  wire [6:0] \$procmux$5752_Y ;
  wire \$procmux$5753_CMP ;
  wire \$procmux$5754_CMP ;
  wire \$procmux$5755_CMP ;
  wire \$procmux$5756_CMP ;
  wire \$procmux$5757_CMP ;
  wire \$procmux$5758_CMP ;
  wire [6:0] \$procmux$5759_Y ;
  wire \$procmux$5760_CMP ;
  wire \$procmux$5773_Y ;
  wire \$procmux$5774_CMP ;
  wire [1:0] \$procmux$5786_Y ;
  wire \$procmux$5787_CMP ;
  wire [1:0] \$procmux$5788_Y ;
  wire \$procmux$5789_CMP ;
  wire [6:0] \$procmux$5802_Y ;
  wire \$procmux$5803_CMP ;
  wire [2:0] \$procmux$5815_Y ;
  wire \$procmux$5816_CMP ;
  wire [2:0] \$procmux$5817_Y ;
  wire \$procmux$5818_CMP ;
  wire \$procmux$5832_Y ;
  wire \$procmux$5833_CMP ;
  wire [1:0] \$procmux$5847_Y ;
  wire \$procmux$5848_CMP ;
  wire [6:0] \$procmux$5862_Y ;
  wire \$procmux$5863_CMP ;
  wire [2:0] \$procmux$5876_Y ;
  wire \$procmux$5877_CMP ;
  wire [2:0] \$procmux$5878_Y ;
  wire \$procmux$5879_CMP ;
  wire \$procmux$5884_Y ;
  wire \$procmux$5885_CMP ;
  wire \$procmux$5890_Y ;
  wire \$procmux$5891_CMP ;
  wire \$procmux$5894_Y ;
  wire \$procmux$5895_CMP ;
  wire \$procmux$5897_CMP ;
  wire \$procmux$5899_CMP ;
  wire \$procmux$5902_CMP ;
  wire \$procmux$5905_CMP ;
  wire \$procmux$5907_CMP ;
  wire \$procmux$5909_CMP ;
  wire [1:0] \$procmux$5912_Y ;
  wire \$procmux$5913_CMP ;
  wire \$procmux$5915_CMP ;
  wire \$procmux$5917_CMP ;
  wire \$procmux$5919_CMP ;
  wire \$procmux$5920_CMP ;
  wire \$procmux$5921_CMP ;
  wire \$procmux$5923_CMP ;
  wire \$procmux$5926_CMP ;
  wire \$procmux$5928_CMP ;
  wire \$procmux$5930_CMP ;
  wire [6:0] \$procmux$5934_Y ;
  wire \$procmux$5935_CMP ;
  wire \$procmux$5937_CMP ;
  wire \$procmux$5939_CMP ;
  wire \$procmux$5940_CMP ;
  wire \$procmux$5941_CMP ;
  wire \$procmux$5942_CMP ;
  wire \$procmux$5944_CMP ;
  wire \$procmux$5947_CMP ;
  wire \$procmux$5949_CMP ;
  wire \$procmux$5951_CMP ;
  wire [2:0] \$procmux$5954_Y ;
  wire \$procmux$5955_CMP ;
  wire \$procmux$5957_CMP ;
  wire \$procmux$5959_CMP ;
  wire \$procmux$5960_CMP ;
  wire \$procmux$5962_CMP ;
  wire \$procmux$5965_CMP ;
  wire \$procmux$5967_CMP ;
  wire \$procmux$5969_CMP ;
  wire \$procmux$5972_Y ;
  wire \$procmux$5973_CMP ;
  wire \$procmux$5974_Y ;
  wire \$procmux$5975_CMP ;
  wire \$procmux$5978_Y ;
  wire \$procmux$5979_CMP ;
  wire \$procmux$5982_Y ;
  wire \$procmux$5983_CMP ;
  wire \$procmux$5986_Y ;
  wire \$procmux$5987_CMP ;
  wire \$procmux$5990_Y ;
  wire \$procmux$5991_CMP ;
  wire \$procmux$5994_Y ;
  wire \$procmux$5995_CMP ;
  wire \$procmux$5998_Y ;
  wire \$procmux$5999_CMP ;
  wire \$procmux$6002_Y ;
  wire \$procmux$6003_CMP ;
  wire [1:0] \$procmux$6007_Y ;
  wire \$procmux$6008_CMP ;
  wire \$procmux$6009_CMP ;
  wire \$procmux$6010_CMP ;
  wire [1:0] \$procmux$6013_Y ;
  wire \$procmux$6014_CMP ;
  wire [1:0] \$procmux$6015_Y ;
  wire \$procmux$6016_CMP ;
  wire \$procmux$6019_Y ;
  wire \$procmux$6020_CMP ;
  wire \$procmux$6021_CMP ;
  wire \$procmux$6022_CMP ;
  wire \$procmux$6025_Y ;
  wire \$procmux$6026_CMP ;
  wire \$procmux$6027_Y ;
  wire \$procmux$6028_CMP ;
  wire \$procmux$6030_Y ;
  wire \$procmux$6031_CMP ;
  wire \$procmux$6033_Y ;
  wire \$procmux$6034_CMP ;
  wire \$procmux$6035_Y ;
  wire \$procmux$6036_CMP ;
  wire \$procmux$6043_Y ;
  wire \$procmux$6044_CMP ;
  wire \$procmux$6045_Y ;
  wire \$procmux$6046_CMP ;
  wire \$procmux$6049_Y ;
  wire \$procmux$6050_CMP ;
  wire \$procmux$6052_Y ;
  wire \$procmux$6053_CMP ;
  wire \$procmux$6054_Y ;
  wire \$procmux$6055_CMP ;
  wire \$procmux$6059_Y ;
  wire \$procmux$6060_CMP ;
  wire \$procmux$6061_Y ;
  wire \$procmux$6062_CMP ;
  wire \$procmux$6063_Y ;
  wire \$procmux$6064_CMP ;
  wire \$procmux$6072_Y ;
  wire \$procmux$6073_CMP ;
  wire \$procmux$6074_Y ;
  wire \$procmux$6075_CMP ;
  wire \$procmux$6076_Y ;
  wire \$procmux$6077_CMP ;
  wire \$procmux$6082_Y ;
  wire \$procmux$6083_CMP ;
  wire \$procmux$6084_Y ;
  wire \$procmux$6085_CMP ;
  wire \$procmux$6086_Y ;
  wire \$procmux$6087_CMP ;
  wire \$procmux$6093_Y ;
  wire \$procmux$6094_CMP ;
  wire \$procmux$6095_Y ;
  wire \$procmux$6096_CMP ;
  wire \$procmux$6097_Y ;
  wire \$procmux$6098_CMP ;
  wire \$procmux$6105_Y ;
  wire \$procmux$6106_CMP ;
  wire \$procmux$6107_Y ;
  wire \$procmux$6108_CMP ;
  wire \$procmux$6109_Y ;
  wire \$procmux$6110_CMP ;
  wire \$procmux$6114_Y ;
  wire \$procmux$6115_CMP ;
  wire \$procmux$6116_CMP ;
  wire \$procmux$6117_CMP ;
  wire \$procmux$6118_CMP ;
  wire \$procmux$6119_CMP ;
  wire \$procmux$6120_Y ;
  wire \$procmux$6121_CMP ;
  wire \$procmux$6122_Y ;
  wire \$procmux$6123_CMP ;
  wire \$procmux$6128_Y ;
  wire \$procmux$6129_CMP ;
  wire \$procmux$6130_Y ;
  wire \$procmux$6131_CMP ;
  wire \$procmux$6136_Y ;
  wire \$procmux$6137_CMP ;
  wire \$procmux$6138_Y ;
  wire \$procmux$6139_CMP ;
  wire \$procmux$6144_Y ;
  wire \$procmux$6145_CMP ;
  wire \$procmux$6146_Y ;
  wire \$procmux$6147_CMP ;
  wire \$procmux$6152_Y ;
  wire \$procmux$6153_CMP ;
  wire \$procmux$6154_Y ;
  wire \$procmux$6155_CMP ;
  wire \$procmux$6160_Y ;
  wire \$procmux$6161_CMP ;
  wire \$procmux$6162_Y ;
  wire \$procmux$6163_CMP ;
  wire \$procmux$6168_Y ;
  wire \$procmux$6169_CMP ;
  wire \$procmux$6170_Y ;
  wire \$procmux$6171_CMP ;
  wire \$procmux$6176_Y ;
  wire \$procmux$6177_CMP ;
  wire \$procmux$6178_Y ;
  wire \$procmux$6179_CMP ;
  wire \$procmux$6184_Y ;
  wire \$procmux$6185_CMP ;
  wire \$procmux$6186_Y ;
  wire \$procmux$6187_CMP ;
  wire [1:0] \$procmux$6192_Y ;
  wire \$procmux$6193_CMP ;
  wire [1:0] \$procmux$6194_Y ;
  wire \$procmux$6195_CMP ;
  wire \$procmux$6200_Y ;
  wire \$procmux$6201_CMP ;
  wire \$procmux$6202_Y ;
  wire \$procmux$6203_CMP ;
  wire \$procmux$6208_Y ;
  wire \$procmux$6209_CMP ;
  wire \$procmux$6210_Y ;
  wire \$procmux$6211_CMP ;
  wire \$procmux$6215_Y ;
  wire \$procmux$6216_CMP ;
  wire \$procmux$6217_Y ;
  wire \$procmux$6218_CMP ;
  wire \$procmux$6219_Y ;
  wire \$procmux$6220_CMP ;
  wire \$procmux$6225_Y ;
  wire \$procmux$6226_CMP ;
  wire \$procmux$6227_Y ;
  wire \$procmux$6228_CMP ;
  wire \$procmux$6233_Y ;
  wire \$procmux$6234_CMP ;
  wire \$procmux$6235_Y ;
  wire \$procmux$6236_CMP ;
  wire \$procmux$6243_Y ;
  wire \$procmux$6244_CMP ;
  wire \$procmux$6248_Y ;
  wire \$procmux$6249_CMP ;
  wire \$procmux$6250_CMP ;
  wire \$procmux$6251_Y ;
  wire \$procmux$6252_CMP ;
  wire \$procmux$6268_Y ;
  wire [9:0] \$procmux$6269_CMP ;
  wire \$procmux$6269_CTRL ;
  wire \$procmux$6271_Y ;
  wire \$procmux$6272_CMP ;
  wire \$procmux$6273_Y ;
  wire \$procmux$6274_CMP ;
  wire [1:0] \$procmux$6280_Y ;
  wire \$procmux$6281_CMP ;
  wire \$procmux$6282_CMP ;
  wire \$procmux$6283_CMP ;
  wire \$procmux$6284_CMP ;
  wire [1:0] \$procmux$6286_Y ;
  wire \$procmux$6287_CMP ;
  wire [1:0] \$procmux$6288_Y ;
  wire \$procmux$6289_CMP ;
  wire [1:0] \$procmux$6294_Y ;
  wire \$procmux$6295_CMP ;
  wire \$procmux$6296_CMP ;
  wire \$procmux$6297_CMP ;
  wire \$procmux$6298_CMP ;
  wire \$procmux$6299_CMP ;
  wire \$procmux$6300_CMP ;
  wire \$procmux$6301_CMP ;
  wire [1:0] \$procmux$6303_Y ;
  wire \$procmux$6304_CMP ;
  wire [1:0] \$procmux$6305_Y ;
  wire \$procmux$6306_CMP ;
  wire \$procmux$6312_Y ;
  wire \$procmux$6313_CMP ;
  wire \$procmux$6314_Y ;
  wire \$procmux$6315_CMP ;
  wire [1:0] \$procmux$6321_Y ;
  wire \$procmux$6322_CMP ;
  wire [1:0] \$procmux$6323_Y ;
  wire \$procmux$6324_CMP ;
  wire [1:0] \$procmux$6330_Y ;
  wire \$procmux$6331_CMP ;
  wire [1:0] \$procmux$6332_Y ;
  wire \$procmux$6333_CMP ;
  wire \$procmux$6341_Y ;
  wire \$procmux$6342_CMP ;
  wire \$procmux$6344_Y ;
  wire \$procmux$6345_CMP ;
  wire \$procmux$6346_Y ;
  wire \$procmux$6347_CMP ;
  wire \$procmux$6348_Y ;
  wire \$procmux$6349_CMP ;
  wire \$procmux$6357_Y ;
  wire \$procmux$6358_CMP ;
  wire \$procmux$6360_Y ;
  wire \$procmux$6361_CMP ;
  wire \$procmux$6362_Y ;
  wire \$procmux$6363_CMP ;
  wire \$procmux$6364_Y ;
  wire \$procmux$6365_CMP ;
  wire \$procmux$6374_Y ;
  wire \$procmux$6375_CMP ;
  wire \$procmux$6377_Y ;
  wire \$procmux$6378_CMP ;
  wire \$procmux$6379_Y ;
  wire \$procmux$6380_CMP ;
  wire \$procmux$6381_Y ;
  wire \$procmux$6382_CMP ;
  wire \$procmux$6390_Y ;
  wire \$procmux$6391_CMP ;
  wire \$procmux$6393_Y ;
  wire \$procmux$6394_CMP ;
  wire \$procmux$6395_Y ;
  wire \$procmux$6396_CMP ;
  wire \$procmux$6397_Y ;
  wire \$procmux$6398_CMP ;
  wire \$procmux$6406_Y ;
  wire \$procmux$6407_CMP ;
  wire \$procmux$6409_Y ;
  wire \$procmux$6410_CMP ;
  wire \$procmux$6411_Y ;
  wire \$procmux$6412_CMP ;
  wire \$procmux$6413_Y ;
  wire \$procmux$6414_CMP ;
  wire \$procmux$6421_Y ;
  wire \$procmux$6422_CMP ;
  wire \$procmux$6424_CMP ;
  wire \$procmux$6425_CMP ;
  wire [1:0] \$procmux$6426_CMP ;
  wire \$procmux$6426_CTRL ;
  wire \$procmux$6428_Y ;
  wire \$procmux$6429_CMP ;
  wire \$procmux$6430_Y ;
  wire \$procmux$6431_CMP ;
  wire \$procmux$6432_Y ;
  wire \$procmux$6433_CMP ;
  wire \$procmux$6440_Y ;
  wire \$procmux$6441_CMP ;
  wire \$procmux$6442_Y ;
  wire \$procmux$6443_CMP ;
  wire \$procmux$6444_Y ;
  wire \$procmux$6445_CMP ;
  wire \$procmux$6453_Y ;
  wire \$procmux$6454_CMP ;
  wire \$procmux$6455_Y ;
  wire \$procmux$6456_CMP ;
  wire \$procmux$6457_Y ;
  wire \$procmux$6458_CMP ;
  wire \$procmux$6459_Y ;
  wire \$procmux$6460_CMP ;
  wire \$procmux$6470_Y ;
  wire \$procmux$6471_CMP ;
  wire \$procmux$6472_Y ;
  wire \$procmux$6473_CMP ;
  wire \$procmux$6474_Y ;
  wire \$procmux$6475_CMP ;
  wire \$procmux$6483_Y ;
  wire \$procmux$6484_CMP ;
  wire \$procmux$6486_CMP ;
  wire \$procmux$6487_CMP ;
  wire \$procmux$6488_Y ;
  wire \$procmux$6489_CMP ;
  wire \$procmux$6490_Y ;
  wire \$procmux$6491_CMP ;
  wire \$procmux$6497_Y ;
  wire \$procmux$6498_CMP ;
  wire \$procmux$6500_CMP ;
  wire [5:0] \$procmux$6501_CMP ;
  wire \$procmux$6501_CTRL ;
  wire \$procmux$6502_Y ;
  wire \$procmux$6503_CMP ;
  wire \$procmux$6512_Y ;
  wire \$procmux$6513_CMP ;
  wire \$procmux$6514_Y ;
  wire \$procmux$6515_CMP ;
  wire \$procmux$6516_Y ;
  wire \$procmux$6517_CMP ;
  wire [1:0] \$procmux$6528_Y ;
  wire \$procmux$6529_CMP ;
  wire \$procmux$6530_CMP ;
  wire [1:0] \$procmux$6531_Y ;
  wire \$procmux$6532_CMP ;
  wire \$procmux$6542_Y ;
  wire \$procmux$6543_CMP ;
  wire \$procmux$6544_CMP ;
  wire \$procmux$6545_CMP ;
  wire \$procmux$6546_Y ;
  wire \$procmux$6547_CMP ;
  wire [1:0] \$procmux$6558_Y ;
  wire \$procmux$6559_CMP ;
  wire \$procmux$6560_CMP ;
  wire [1:0] \$procmux$6562_Y ;
  wire \$procmux$6563_CMP ;
  wire \$procmux$6573_Y ;
  wire \$procmux$6574_CMP ;
  wire \$procmux$6575_CMP ;
  wire \$procmux$6576_CMP ;
  wire \$procmux$6578_Y ;
  wire \$procmux$6579_CMP ;
  wire \$procmux$6588_Y ;
  wire \$procmux$6589_CMP ;
  wire \$procmux$6590_Y ;
  wire \$procmux$6591_CMP ;
  wire \$procmux$6602_Y ;
  wire [5:0] \$procmux$6603_CMP ;
  wire \$procmux$6603_CTRL ;
  wire \$procmux$6604_Y ;
  wire \$procmux$6605_CMP ;
  wire \$procmux$6616_Y ;
  wire \$procmux$6617_CMP ;
  wire \$procmux$6619_Y ;
  wire \$procmux$6620_CMP ;
  wire \$procmux$6632_Y ;
  wire \$procmux$6633_CMP ;
  wire \$procmux$6634_Y ;
  wire \$procmux$6635_CMP ;
  wire \$procmux$6647_Y ;
  wire \$procmux$6648_CMP ;
  wire \$procmux$6649_Y ;
  wire \$procmux$6650_CMP ;
  wire \$procmux$6663_Y ;
  wire \$procmux$6664_CMP ;
  wire \$procmux$6665_Y ;
  wire \$procmux$6666_CMP ;
  wire \$procmux$6679_Y ;
  wire \$procmux$6680_CMP ;
  wire \$procmux$6681_Y ;
  wire \$procmux$6682_CMP ;
  wire \$procmux$6693_Y ;
  wire \$procmux$6694_CMP ;
  wire \$procmux$6698_Y ;
  wire \$procmux$6699_CMP ;
  wire \$procmux$6702_CMP ;
  wire \$procmux$6704_CMP ;
  wire \$procmux$6713_Y ;
  wire \$procmux$6714_CMP ;
  wire [1:0] \$procmux$6723_Y ;
  wire \$procmux$6724_CMP ;
  wire \$procmux$6727_CMP ;
  wire \$procmux$6738_Y ;
  wire \$procmux$6739_CMP ;
  wire \$procmux$6748_Y ;
  wire \$procmux$6749_CMP ;
  wire \$procmux$6752_CMP ;
  wire \$procmux$6755_Y ;
  wire \$procmux$6756_CMP ;
  wire [1:0] \$procmux$6761_Y ;
  wire \$procmux$6762_CMP ;
  wire [1:0] \$procmux$6767_Y ;
  wire \$procmux$6768_CMP ;
  wire \$procmux$6773_Y ;
  wire \$procmux$6774_CMP ;
  wire \$procmux$6777_CMP ;
  wire \$procmux$6779_CMP ;
  wire \$procmux$6782_Y ;
  wire \$procmux$6783_CMP ;
  wire \$procmux$6785_CMP ;
  wire \$procmux$6787_CMP ;
  wire \$procmux$6789_CMP ;
  wire \$procmux$6792_CMP ;
  wire \$procmux$6794_CMP ;
  wire \$procmux$6797_CMP ;
  wire \$procmux$6800_Y ;
  wire \$procmux$6801_CMP ;
  wire \$procmux$6805_Y ;
  wire \$procmux$6806_CMP ;
  wire \$procmux$6809_CMP ;
  wire \$procmux$6811_CMP ;
  wire \$procmux$6814_Y ;
  wire \$procmux$6815_CMP ;
  wire \$procmux$6818_Y ;
  wire \$procmux$6819_CMP ;
  wire \$procmux$6822_Y ;
  wire \$procmux$6823_CMP ;
  wire \$procmux$6826_Y ;
  wire \$procmux$6827_CMP ;
  wire \$procmux$6830_Y ;
  wire \$procmux$6831_CMP ;
  wire [1:0] \$procmux$6834_Y ;
  wire \$procmux$6835_CMP ;
  wire \$procmux$6838_Y ;
  wire \$procmux$6839_CMP ;
  wire \$procmux$6841_CMP ;
  wire \$procmux$6843_CMP ;
  wire \$procmux$6845_CMP ;
  wire \$procmux$6846_CMP ;
  wire \$procmux$6847_CMP ;
  wire \$procmux$6850_CMP ;
  wire \$procmux$6852_CMP ;
  wire \$procmux$6855_Y ;
  wire \$procmux$6856_CMP ;
  wire \$procmux$6859_Y ;
  wire \$procmux$6860_CMP ;
  wire \$procmux$6862_CMP ;
  wire \$procmux$6864_CMP ;
  wire \$procmux$6866_CMP ;
  wire \$procmux$6867_CMP ;
  wire \$procmux$6868_CMP ;
  wire \$procmux$6870_CMP ;
  wire \$procmux$6873_CMP ;
  wire \$procmux$6875_CMP ;
  wire \$procmux$6878_CMP ;
  wire \$procmux$6879_CMP ;
  wire [1:0] \$procmux$6880_Y ;
  wire \$procmux$6881_CMP ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$rf_ren_a_o$100 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$rf_ren_a_o$113 ;
  /* src = "rtl/cve2/cve2_decoder.sv:618.11-620.14" */
  wire \$rf_ren_a_o$87 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$rf_ren_b_o$114 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$rf_wdata_sel_o$112 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$rf_wdata_sel_o$99 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$rf_we$104 ;
  /* src = "rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  wire \$rf_we$125 ;
  /* src = "rtl/cve2/cve2_decoder.sv:240.9-247.12" */
  wire \$rf_we$18 ;
  /* src = "rtl/cve2/cve2_decoder.sv:253.9-260.12" */
  wire \$rf_we$20 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$rf_we$67 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$rf_we$92 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$wfi_insn_o$110 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$wfi_insn_o$77 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$wfi_insn_o$98 ;
  /* src = "rtl/cve2/cve2_decoder.sv:67.32" */
  output alu_multicycle_o;
  wire alu_multicycle_o;
  /* src = "rtl/cve2/cve2_decoder.sv:63.32" */
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:65.32" */
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:62.32" */
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:92.32" */
  output branch_in_dec_o;
  wire branch_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:21.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_decoder.sv:79.32" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_decoder.sv:99.16" */
  wire csr_illegal;
  /* src = "rtl/cve2/cve2_decoder.sv:114.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_decoder.sv:80.32" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_decoder.sv:83.32" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_decoder.sv:87.32" */
  output data_sign_extension_o;
  wire data_sign_extension_o;
  /* src = "rtl/cve2/cve2_decoder.sv:85.32" */
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:84.32" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:71.32" */
  output div_en_o;
  wire div_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:73.32" */
  output div_sel_o;
  wire div_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:29.32" */
  output dret_insn_o;
  wire dret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:26.32" */
  output ebrk_insn_o;
  wire ebrk_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:30.32" */
  output ecall_insn_o;
  wire ecall_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:149.11" */
  wire \gen_no_rs3_flop.unused_clk ;
  /* src = "rtl/cve2/cve2_decoder.sv:150.11" */
  wire \gen_no_rs3_flop.unused_rst_n ;
  /* src = "rtl/cve2/cve2_decoder.sv:40.32" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_decoder.sv:97.16" */
  wire illegal_insn;
  /* src = "rtl/cve2/cve2_decoder.sv:25.32" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:98.16" */
  wire illegal_reg_rv32e;
  /* src = "rtl/cve2/cve2_decoder.sv:43.33" */
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:44.33" */
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:47.33" */
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:45.33" */
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:49.33" */
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:46.33" */
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:48.33" */
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:102.16" */
  wire [31:0] instr;
  /* src = "rtl/cve2/cve2_decoder.sv:103.16" */
  wire [31:0] instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:35.32" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_decoder.sv:109.15" */
  wire [4:0] instr_rd;
  /* src = "rtl/cve2/cve2_decoder.sv:37.32" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_decoder.sv:36.32" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_decoder.sv:106.15" */
  wire [4:0] instr_rs1;
  /* src = "rtl/cve2/cve2_decoder.sv:107.15" */
  wire [4:0] instr_rs2;
  /* src = "rtl/cve2/cve2_decoder.sv:108.15" */
  wire [4:0] instr_rs3;
  /* src = "rtl/cve2/cve2_decoder.sv:91.32" */
  output jump_in_dec_o;
  wire jump_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:32.32" */
  output jump_set_o;
  wire jump_set_o;
  /* src = "rtl/cve2/cve2_decoder.sv:27.32" */
  output mret_insn_o;
  wire mret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:70.32" */
  output mult_en_o;
  wire mult_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:72.32" */
  output mult_sel_o;
  wire mult_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:75.32" */
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:76.32" */
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  /* src = "rtl/cve2/cve2_decoder.sv:116.16" */
  wire [6:0] opcode;
  /* src = "rtl/cve2/cve2_decoder.sv:117.16" */
  wire [6:0] opcode_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:55.32" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:56.32" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:58.32" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:59.32" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:57.32" */
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  /* src = "rtl/cve2/cve2_decoder.sv:53.32" */
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:100.16" */
  wire rf_we;
  /* src = "rtl/cve2/cve2_decoder.sv:54.32" */
  output rf_we_o;
  wire rf_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:22.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_decoder.sv:104.16" */
  wire [9:0] unused_instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:111.16" */
  wire use_rs3_d;
  /* src = "rtl/cve2/cve2_decoder.sv:112.16" */
  wire use_rs3_q;
  /* src = "rtl/cve2/cve2_decoder.sv:31.32" */
  output wfi_insn_o;
  wire wfi_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:50.33" */
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  reg [0:0] \$auto$proc_rom.cc:155:do_switch$1816  [31:0];
  initial begin
    \$auto$proc_rom.cc:155:do_switch$1816 [0] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [1] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [2] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [3] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [4] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [5] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [6] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [7] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [8] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [9] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [10] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [11] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [12] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [13] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [14] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [15] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [16] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [17] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [18] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [19] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [20] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [21] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [22] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [23] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [24] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [25] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [26] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [27] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [28] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [29] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [30] = 1'h1;
    \$auto$proc_rom.cc:155:do_switch$1816 [31] = 1'h1;
  end
  assign \$auto$proc_rom.cc:154:do_switch$1815  = \$auto$proc_rom.cc:155:do_switch$1816 [instr[24:20]];
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_first_cycle_i),
    .Y(\$1 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$7 ),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_rs1),
    .Y(\$13 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(instr_alu[14]),
    .Y(\$147 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(instr_alu[31:27]),
    .Y(\$152 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(instr_alu[31:27]),
    .B(5'h08),
    .Y(\$154 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(instr_alu[14:12]),
    .Y(\$170 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$183  (
    .A(mult_sel_o),
    .B(1'h0),
    .S(illegal_insn),
    .Y(\$auto$rtlil.cc:3092:Mux$1601 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$184  (
    .A(div_sel_o),
    .B(1'h0),
    .S(illegal_insn),
    .Y(\$auto$rtlil.cc:3092:Mux$1602 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(instr[14:12]),
    .Y(\$23 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(instr[14]),
    .Y(\$30 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(instr[26:25]),
    .Y(\$35 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(1'h1),
    .B(1'h0),
    .S(\$35 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1599 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(instr[26]),
    .Y(\$38 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(instr[26:25]),
    .Y(\$43 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$44  (
    .A(1'h1),
    .B(1'h0),
    .S(\$43 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1600 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(instr[24:20]),
    .B(5'h07),
    .Y(\$48 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(instr[26]),
    .Y(\$52 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A({ instr[26], instr[13:12] }),
    .B(3'h5),
    .Y(\$58 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(csr_op),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(instr[14:12]),
    .Y(\$71 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(instr_rs1),
    .Y(\$79 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(csr_op),
    .B(2'h3),
    .Y(\$9 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(instr_rd),
    .Y(\$81 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$79 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(instr[14]),
    .Y(\$86 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1144.13-1144.43|rtl/cve2/cve2_decoder.sv:1142.11-1147.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5360  (
    .A(2'h0),
    .B(2'h3),
    .S(\$procmux$5361_CMP ),
    .Y(\$procmux$5360_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.41-1136.12|rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5363  (
    .A(\$procmux$5360_Y ),
    .B(2'hx),
    .S(\$procmux$5364_CMP ),
    .Y(\$procmux$5363_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5365  (
    .A(2'hx),
    .B(\$procmux$5363_Y ),
    .S(\$procmux$5366_CMP ),
    .Y(\$procmux$5365_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5366_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5366_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5371  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$5372_CMP ),
    .Y(\$procmux$5371_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5372_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5372_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.41-1136.12|rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5376  (
    .A(\$alu_op_a_mux_sel_o$171 ),
    .B(2'h0),
    .S(\$procmux$5377_CMP ),
    .Y(\$procmux$5376_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5378  (
    .A(2'hx),
    .B(\$procmux$5376_Y ),
    .S(\$procmux$5379_CMP ),
    .Y(\$procmux$5378_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5379_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5379_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5384  (
    .A(3'hx),
    .B(3'h0),
    .S(\$procmux$5385_CMP ),
    .Y(\$procmux$5384_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5385_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5385_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.41-1136.12|rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5389  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$5390_CMP ),
    .Y(\$procmux$5389_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5391  (
    .A(1'hx),
    .B(\$procmux$5389_Y ),
    .S(\$procmux$5392_CMP ),
    .Y(\$procmux$5391_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5392_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5392_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5398  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$5399_CMP ),
    .Y(\$procmux$5398_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5399_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5399_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$5403  (
    .A(2'h3),
    .B(4'h2),
    .S({ \$procmux$5405_CMP , \$procmux$5404_CMP  }),
    .Y(\$procmux$5403_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5404_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5404_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1114.19-1119.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5405_CMP0  (
    .A(instr_alu[14:12]),
    .Y(\$procmux$5405_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5406  (
    .A(2'hx),
    .B(\$procmux$5403_Y ),
    .S(\$procmux$5407_CMP ),
    .Y(\$procmux$5406_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5407_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5407_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$5411  (
    .A(7'h2c),
    .B(14'h0000),
    .S({ \$procmux$5413_CMP , \$procmux$5412_CMP  }),
    .Y(\$procmux$5411_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5412_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5412_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1114.19-1119.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5413_CMP0  (
    .A(instr_alu[14:12]),
    .Y(\$procmux$5413_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5414  (
    .A(7'hxx),
    .B(\$procmux$5411_Y ),
    .S(\$procmux$5415_CMP ),
    .Y(\$procmux$5414_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5415_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5415_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5419  (
    .A(3'h0),
    .B(3'h5),
    .S(\$procmux$5420_CMP ),
    .Y(\$procmux$5419_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5420_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5420_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5421  (
    .A(3'hx),
    .B(\$procmux$5419_Y ),
    .S(\$procmux$5422_CMP ),
    .Y(\$procmux$5421_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5422_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5422_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5480  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$5481_CMP ),
    .Y(\$procmux$5480_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5482  (
    .A(1'hx),
    .B(\$procmux$5480_Y ),
    .S(\$procmux$5483_CMP ),
    .Y(\$procmux$5482_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5483_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5483_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5541  (
    .A(1'h0),
    .B(1'hx),
    .S(\$procmux$5542_CMP ),
    .Y(\$procmux$5541_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5543  (
    .A(1'hx),
    .B(\$procmux$5541_Y ),
    .S(\$procmux$5544_CMP ),
    .Y(\$procmux$5543_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5544_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5544_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$pmux  #(
    .S_WIDTH(32'd17),
    .WIDTH(32'd7)
  ) \$procmux$5549  (
    .A(7'h2c),
    .B(119'h0002ac103082848800000000000000),
    .S({ \$procmux$5566_CMP , \$procmux$5565_CMP , \$procmux$5564_CMP , \$procmux$5563_CMP , \$procmux$5562_CMP , \$procmux$5561_CMP , \$procmux$5560_CMP , \$procmux$5559_CMP , \$procmux$5558_CMP , \$procmux$5557_CMP , \$procmux$5556_CMP , \$procmux$5555_CMP , \$procmux$5554_CMP , \$procmux$5553_CMP , \$procmux$5552_CMP , \$procmux$5551_CMP , \$procmux$5550_CMP  }),
    .Y(\$procmux$5549_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5550_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00f),
    .Y(\$procmux$5550_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1094.36-1097.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5551_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00e),
    .Y(\$procmux$5551_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1090.36-1093.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5552_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00d),
    .Y(\$procmux$5552_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1086.36-1089.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5553_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00c),
    .Y(\$procmux$5553_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1082.36-1085.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5554_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00b),
    .Y(\$procmux$5554_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1078.36-1081.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5555_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h00a),
    .Y(\$procmux$5555_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1074.36-1077.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5556_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h009),
    .Y(\$procmux$5556_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1070.36-1073.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5557_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h008),
    .Y(\$procmux$5557_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:976.36-976.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5558_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h105),
    .Y(\$procmux$5558_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:975.36-975.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5559_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h005),
    .Y(\$procmux$5559_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:974.36-974.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5560_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h001),
    .Y(\$procmux$5560_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:973.36-973.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5561_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h007),
    .Y(\$procmux$5561_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:972.36-972.60|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5562_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h006),
    .Y(\$procmux$5562_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:971.36-971.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5563_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h004),
    .Y(\$procmux$5563_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:969.36-969.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5564_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h002),
    .Y(\$procmux$5564_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:968.36-968.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5565_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .B(10'h100),
    .Y(\$procmux$5565_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:967.36-967.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5566_CMP0  (
    .A({ instr_alu[31:25], instr_alu[14:12] }),
    .Y(\$procmux$5566_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5568  (
    .A(\$procmux$5549_Y ),
    .B(7'hxx),
    .S(\$procmux$5569_CMP ),
    .Y(\$procmux$5568_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5570  (
    .A(7'hxx),
    .B(\$procmux$5568_Y ),
    .S(\$procmux$5571_CMP ),
    .Y(\$procmux$5570_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5571_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5571_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5577  (
    .A(\$div_sel_o$161 ),
    .B(1'h0),
    .S(\$procmux$5578_CMP ),
    .Y(\$procmux$5577_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5579  (
    .A(1'hx),
    .B(\$procmux$5577_Y ),
    .S(\$procmux$5580_CMP ),
    .Y(\$procmux$5579_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5580_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5580_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5586  (
    .A(\$mult_sel_o$160 ),
    .B(1'h0),
    .S(\$procmux$5587_CMP ),
    .Y(\$procmux$5586_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5588  (
    .A(1'hx),
    .B(\$procmux$5586_Y ),
    .S(\$procmux$5589_CMP ),
    .Y(\$procmux$5588_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5589_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5589_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5595  (
    .A(\$alu_operator_o$159 ),
    .B(7'h2c),
    .S(\$procmux$5596_CMP ),
    .Y(\$procmux$5595_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5597  (
    .A(7'hxx),
    .B(\$procmux$5595_Y ),
    .S(\$procmux$5598_CMP ),
    .Y(\$procmux$5597_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5598_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5598_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5604  (
    .A(7'hxx),
    .B(\$alu_operator_o$156 ),
    .S(\$procmux$5605_CMP ),
    .Y(\$procmux$5604_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5605_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h5),
    .Y(\$procmux$5605_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5606  (
    .A(7'hxx),
    .B(\$procmux$5604_Y ),
    .S(\$procmux$5607_CMP ),
    .Y(\$procmux$5606_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5607_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5607_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:909.17-909.42|rtl/cve2/cve2_decoder.sv:908.24-910.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5612  (
    .A(7'h2c),
    .B(7'h08),
    .S(\$procmux$5613_CMP ),
    .Y(\$procmux$5612_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:907.17-907.42|rtl/cve2/cve2_decoder.sv:906.15-910.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5615  (
    .A(\$procmux$5612_Y ),
    .B(7'hxx),
    .S(\$procmux$5616_CMP ),
    .Y(\$procmux$5615_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5617  (
    .A(7'hxx),
    .B(\$procmux$5615_Y ),
    .S(\$procmux$5618_CMP ),
    .Y(\$procmux$5617_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5618_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h5),
    .Y(\$procmux$5618_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5619  (
    .A(7'hxx),
    .B(\$procmux$5617_Y ),
    .S(\$procmux$5620_CMP ),
    .Y(\$procmux$5619_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5620_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5620_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:907.17-907.42|rtl/cve2/cve2_decoder.sv:906.15-910.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5627  (
    .A(\$alu_operator_o$155 ),
    .B(7'h09),
    .S(\$procmux$5628_CMP ),
    .Y(\$procmux$5627_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5629  (
    .A(7'hxx),
    .B(\$procmux$5627_Y ),
    .S(\$procmux$5630_CMP ),
    .Y(\$procmux$5629_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5630_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h5),
    .Y(\$procmux$5630_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5631  (
    .A(7'hxx),
    .B(\$procmux$5629_Y ),
    .S(\$procmux$5632_CMP ),
    .Y(\$procmux$5631_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5632_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5632_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:804.13-867.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5638  (
    .A(7'hxx),
    .B(7'h0a),
    .S(\$procmux$5639_CMP ),
    .Y(\$procmux$5638_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:804.13-867.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5639_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5639_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5640  (
    .A(7'hxx),
    .B(\$procmux$5638_Y ),
    .S(\$procmux$5641_CMP ),
    .Y(\$procmux$5640_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5641_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5641_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd7)
  ) \$procmux$5647  (
    .A(7'hxx),
    .B({ 42'h002b5808184, \$alu_operator_o$150 , \$alu_operator_o$157  }),
    .S({ \$procmux$5655_CMP , \$procmux$5654_CMP , \$procmux$5653_CMP , \$procmux$5652_CMP , \$procmux$5651_CMP , \$procmux$5650_CMP , \$procmux$5649_CMP , \$procmux$5648_CMP  }),
    .Y(\$procmux$5647_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5648_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h5),
    .Y(\$procmux$5648_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:804.13-867.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5649_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5649_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:801.19-801.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5650_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h7),
    .Y(\$procmux$5650_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:800.19-800.43|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5651_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h6),
    .Y(\$procmux$5651_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:799.19-799.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5652_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h4),
    .Y(\$procmux$5652_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:798.19-798.45|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5653_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h3),
    .Y(\$procmux$5653_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:797.19-797.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5654_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h2),
    .Y(\$procmux$5654_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:796.19-796.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5655_CMP0  (
    .A(instr_alu[14:12]),
    .Y(\$procmux$5655_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5656  (
    .A(7'hxx),
    .B(\$procmux$5647_Y ),
    .S(\$procmux$5657_CMP ),
    .Y(\$procmux$5656_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5657_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5657_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:755.29-759.12|rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5666  (
    .A(1'h1),
    .B(1'h0),
    .S(instr_rdata_alu_i[14]),
    .Y(\$procmux$5666_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5668  (
    .A(1'hx),
    .B(\$procmux$5666_Y ),
    .S(\$procmux$5669_CMP ),
    .Y(\$procmux$5668_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5669_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5669_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:755.29-759.12|rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5678  (
    .A(3'h1),
    .B(3'h0),
    .S(instr_rdata_alu_i[14]),
    .Y(\$procmux$5678_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5680  (
    .A(3'hx),
    .B(\$procmux$5678_Y ),
    .S(\$procmux$5681_CMP ),
    .Y(\$procmux$5680_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5681_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5681_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5692  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$5693_CMP ),
    .Y(\$procmux$5692_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5695  (
    .A(1'hx),
    .B(\$procmux$5692_Y ),
    .S(\$procmux$5696_CMP ),
    .Y(\$procmux$5695_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5696_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5696_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5707  (
    .A(2'h2),
    .B(2'h0),
    .S(\$procmux$5708_CMP ),
    .Y(\$procmux$5707_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5710  (
    .A(2'hx),
    .B(\$procmux$5707_Y ),
    .S(\$procmux$5711_CMP ),
    .Y(\$procmux$5710_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5711_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5711_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5722  (
    .A(7'h00),
    .B(\$alu_operator_o$141 ),
    .S(\$procmux$5723_CMP ),
    .Y(\$procmux$5722_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5725  (
    .A(7'hxx),
    .B(\$procmux$5722_Y ),
    .S(\$procmux$5726_CMP ),
    .Y(\$procmux$5725_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5726_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5726_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5737  (
    .A(3'h2),
    .B(3'h0),
    .S(\$procmux$5738_CMP ),
    .Y(\$procmux$5737_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5740  (
    .A(3'hx),
    .B(\$procmux$5737_Y ),
    .S(\$procmux$5741_CMP ),
    .Y(\$procmux$5740_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5741_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5741_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:726.20-726.45|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd7)
  ) \$procmux$5752  (
    .A(7'h2c),
    .B(42'h0e9e326cd1c),
    .S({ \$procmux$5758_CMP , \$procmux$5757_CMP , \$procmux$5756_CMP , \$procmux$5755_CMP , \$procmux$5754_CMP , \$procmux$5753_CMP  }),
    .Y(\$procmux$5752_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:726.20-726.45|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5753_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h7),
    .Y(\$procmux$5753_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:725.20-725.45|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5754_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h6),
    .Y(\$procmux$5754_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:724.20-724.44|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5755_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h5),
    .Y(\$procmux$5755_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:723.20-723.44|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5756_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h4),
    .Y(\$procmux$5756_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:722.20-722.44|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5757_CMP0  (
    .A(instr_alu[14:12]),
    .B(3'h1),
    .Y(\$procmux$5757_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:721.20-721.44|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5758_CMP0  (
    .A(instr_alu[14:12]),
    .Y(\$procmux$5758_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5759  (
    .A(7'hxx),
    .B(\$procmux$5752_Y ),
    .S(\$procmux$5760_CMP ),
    .Y(\$procmux$5759_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5760_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5760_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5773  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$5774_CMP ),
    .Y(\$procmux$5773_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5774_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5774_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.34-709.12|rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5786  (
    .A(2'h2),
    .B(2'h0),
    .S(\$procmux$5787_CMP ),
    .Y(\$procmux$5786_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5788  (
    .A(2'hx),
    .B(\$procmux$5786_Y ),
    .S(\$procmux$5789_CMP ),
    .Y(\$procmux$5788_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5789_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5789_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5802  (
    .A(7'hxx),
    .B(7'h00),
    .S(\$procmux$5803_CMP ),
    .Y(\$procmux$5802_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5803_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5803_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.34-709.12|rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5815  (
    .A(3'h5),
    .B(3'h0),
    .S(\$procmux$5816_CMP ),
    .Y(\$procmux$5815_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5817  (
    .A(3'hx),
    .B(\$procmux$5815_Y ),
    .S(\$procmux$5818_CMP ),
    .Y(\$procmux$5817_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5818_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5818_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5832  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$5833_CMP ),
    .Y(\$procmux$5832_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5833_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5833_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5847  (
    .A(2'hx),
    .B(2'h2),
    .S(\$procmux$5848_CMP ),
    .Y(\$procmux$5847_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5848_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5848_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5862  (
    .A(7'hxx),
    .B(7'h00),
    .S(\$procmux$5863_CMP ),
    .Y(\$procmux$5862_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5863_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5863_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.34-692.12|rtl/cve2/cve2_decoder.sv:686.9-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5876  (
    .A(3'h5),
    .B(3'h4),
    .S(\$procmux$5877_CMP ),
    .Y(\$procmux$5876_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5878  (
    .A(3'hx),
    .B(\$procmux$5876_Y ),
    .S(\$procmux$5879_CMP ),
    .Y(\$procmux$5878_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5879_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5879_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5884  (
    .A(1'h0),
    .B(\$div_sel_o$164 ),
    .S(\$procmux$5885_CMP ),
    .Y(\$procmux$5884_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5885_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5885_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5890  (
    .A(1'h0),
    .B(\$mult_sel_o$163 ),
    .S(\$procmux$5891_CMP ),
    .Y(\$procmux$5890_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5891_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5891_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd1)
  ) \$procmux$5894  (
    .A(1'h1),
    .B({ \$alu_op_b_mux_sel_o$136 , \$alu_op_b_mux_sel_o$140 , \$alu_op_b_mux_sel_o$145 , \$alu_op_b_mux_sel_o$149 , 1'h0, \$alu_op_b_mux_sel_o$168 , \$alu_op_b_mux_sel_o$175  }),
    .S({ \$procmux$5909_CMP , \$procmux$5907_CMP , \$procmux$5905_CMP , \$procmux$5902_CMP , \$procmux$5899_CMP , \$procmux$5897_CMP , \$procmux$5895_CMP  }),
    .Y(\$procmux$5894_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5895_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5895_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5897_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5897_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5899_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5899_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5902_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5902_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5905_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5905_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5907_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5907_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5909_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5909_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd2)
  ) \$procmux$5912  (
    .A(2'h3),
    .B({ \$alu_op_a_mux_sel_o$135 , \$alu_op_a_mux_sel_o$139 , \$alu_op_a_mux_sel_o$144 , 10'h020, \$alu_op_a_mux_sel_o$167 , \$alu_op_a_mux_sel_o$174  }),
    .S({ \$procmux$5930_CMP , \$procmux$5928_CMP , \$procmux$5926_CMP , \$procmux$5923_CMP , \$procmux$5921_CMP , \$procmux$5920_CMP , \$procmux$5919_CMP , \$procmux$5917_CMP , \$procmux$5915_CMP , \$procmux$5913_CMP  }),
    .Y(\$procmux$5912_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5913_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5913_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5915_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5915_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5917_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5917_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5919_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5919_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:783.21-788.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5920_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h17),
    .Y(\$procmux$5920_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:762.20-769.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5921_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h03),
    .Y(\$procmux$5921_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5923_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5923_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5926_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5926_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5928_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5928_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5930_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5930_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd7)
  ) \$procmux$5934  (
    .A(7'h2c),
    .B({ \$alu_operator_o$134 , \$alu_operator_o$138 , \$alu_operator_o$143 , 28'h0000000, \$alu_operator_o$158 , \$alu_operator_o$162 , \$alu_operator_o$166  }),
    .S({ \$procmux$5951_CMP , \$procmux$5949_CMP , \$procmux$5947_CMP , \$procmux$5944_CMP , \$procmux$5942_CMP , \$procmux$5941_CMP , \$procmux$5940_CMP , \$procmux$5939_CMP , \$procmux$5937_CMP , \$procmux$5935_CMP  }),
    .Y(\$procmux$5934_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5935_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5935_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5937_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h33),
    .Y(\$procmux$5937_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5939_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h13),
    .Y(\$procmux$5939_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:783.21-788.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5940_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h17),
    .Y(\$procmux$5940_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:775.19-781.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5941_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h37),
    .Y(\$procmux$5941_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:762.20-769.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5942_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h03),
    .Y(\$procmux$5942_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5944_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5944_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5947_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5947_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5949_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5949_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5951_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5951_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd3)
  ) \$procmux$5954  (
    .A(3'h0),
    .B({ \$imm_b_mux_sel_o$133 , \$imm_b_mux_sel_o$137 , \$imm_b_mux_sel_o$142 , \$imm_b_mux_sel_o$148 , 6'h1b, \$imm_b_mux_sel_o$165 , \$imm_b_mux_sel_o$173  }),
    .S({ \$procmux$5969_CMP , \$procmux$5967_CMP , \$procmux$5965_CMP , \$procmux$5962_CMP , \$procmux$5960_CMP , \$procmux$5959_CMP , \$procmux$5957_CMP , \$procmux$5955_CMP  }),
    .Y(\$procmux$5954_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5955_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5955_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5957_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h0f),
    .Y(\$procmux$5957_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:783.21-788.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5959_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h17),
    .Y(\$procmux$5959_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:775.19-781.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5960_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h37),
    .Y(\$procmux$5960_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5962_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h23),
    .Y(\$procmux$5962_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5965_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h63),
    .Y(\$procmux$5965_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5967_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h67),
    .Y(\$procmux$5967_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5969_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5969_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5972  (
    .A(1'h1),
    .B(\$imm_a_mux_sel_o$172 ),
    .S(\$procmux$5973_CMP ),
    .Y(\$procmux$5972_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5973_CMP0  (
    .A(instr_alu[6:0]),
    .B(7'h73),
    .Y(\$procmux$5973_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5974  (
    .A(\$branch_in_dec_o$123 ),
    .B(1'h0),
    .S(\$procmux$5975_CMP ),
    .Y(\$procmux$5974_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5978  (
    .A(\$jump_in_dec_o$122 ),
    .B(1'h0),
    .S(\$procmux$5979_CMP ),
    .Y(\$procmux$5978_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5982  (
    .A(\$data_we_o$119 ),
    .B(1'h0),
    .S(\$procmux$5983_CMP ),
    .Y(\$procmux$5982_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5986  (
    .A(\$data_req_o$118 ),
    .B(1'h0),
    .S(\$procmux$5987_CMP ),
    .Y(\$procmux$5986_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5990  (
    .A(\$csr_access_o$117 ),
    .B(1'h0),
    .S(\$procmux$5991_CMP ),
    .Y(\$procmux$5990_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5994  (
    .A(\$jump_set_o$111 ),
    .B(1'h0),
    .S(\$procmux$5995_CMP ),
    .Y(\$procmux$5994_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5998  (
    .A(\$rf_we$104 ),
    .B(1'h0),
    .S(\$procmux$5999_CMP ),
    .Y(\$procmux$5998_Y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:640.7-640.27|rtl/cve2/cve2_decoder.sv:639.5-641.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6002  (
    .A(\$illegal_insn$102 ),
    .B(1'h1),
    .S(\$procmux$6003_CMP ),
    .Y(\$procmux$6002_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$6007  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$procmux$6010_CMP , \$procmux$6009_CMP , \$procmux$6008_CMP  }),
    .Y(\$procmux$6007_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6008_CMP0  (
    .A(instr[13:12]),
    .B(2'h3),
    .Y(\$procmux$6008_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:624.22-624.42|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6009_CMP0  (
    .A(instr[13:12]),
    .B(2'h2),
    .Y(\$procmux$6009_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:623.22-623.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6010_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6010_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6013  (
    .A(\$procmux$6007_Y ),
    .B(2'hx),
    .S(\$procmux$6014_CMP ),
    .Y(\$procmux$6013_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6015  (
    .A(2'hx),
    .B(\$procmux$6013_Y ),
    .S(\$procmux$6016_CMP ),
    .Y(\$procmux$6015_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6016_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6016_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6019  (
    .A(1'h1),
    .B(3'h0),
    .S({ \$procmux$6022_CMP , \$procmux$6021_CMP , \$procmux$6020_CMP  }),
    .Y(\$procmux$6019_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6020_CMP0  (
    .A(instr[13:12]),
    .B(2'h3),
    .Y(\$procmux$6020_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:624.22-624.42|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6021_CMP0  (
    .A(instr[13:12]),
    .B(2'h2),
    .Y(\$procmux$6021_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:623.22-623.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6022_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6022_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6025  (
    .A(\$procmux$6019_Y ),
    .B(1'hx),
    .S(\$procmux$6026_CMP ),
    .Y(\$procmux$6025_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6027  (
    .A(1'hx),
    .B(\$procmux$6025_Y ),
    .S(\$procmux$6028_CMP ),
    .Y(\$procmux$6027_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6028_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6028_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:619.13-619.39|rtl/cve2/cve2_decoder.sv:618.11-620.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6030  (
    .A(1'h1),
    .B(1'h0),
    .S(instr_rdata_i[14]),
    .Y(\$procmux$6030_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6033  (
    .A(\$procmux$6030_Y ),
    .B(1'hx),
    .S(\$procmux$6034_CMP ),
    .Y(\$procmux$6033_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6035  (
    .A(1'hx),
    .B(\$procmux$6033_Y ),
    .S(\$procmux$6036_CMP ),
    .Y(\$procmux$6035_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6036_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6036_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6043  (
    .A(\$csr_illegal$88 ),
    .B(\$illegal_insn$84 ),
    .S(\$procmux$6044_CMP ),
    .Y(\$procmux$6043_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6045  (
    .A(1'hx),
    .B(\$procmux$6043_Y ),
    .S(\$procmux$6046_CMP ),
    .Y(\$procmux$6045_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6046_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6046_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:610.13-610.33|rtl/cve2/cve2_decoder.sv:609.11-611.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6049  (
    .A(\$illegal_insn$72 ),
    .B(1'h1),
    .S(\$procmux$6050_CMP ),
    .Y(\$procmux$6049_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6052  (
    .A(1'hx),
    .B(\$procmux$6049_Y ),
    .S(\$procmux$6053_CMP ),
    .Y(\$procmux$6052_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6054  (
    .A(1'hx),
    .B(\$procmux$6052_Y ),
    .S(\$procmux$6055_CMP ),
    .Y(\$procmux$6054_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6055_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6055_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6059  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6060_CMP ),
    .Y(\$procmux$6059_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6060_CMP0  (
    .A(instr[31:20]),
    .B(12'h105),
    .Y(\$procmux$6060_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6061  (
    .A(1'hx),
    .B(\$procmux$6059_Y ),
    .S(\$procmux$6062_CMP ),
    .Y(\$procmux$6061_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6063  (
    .A(1'hx),
    .B(\$procmux$6061_Y ),
    .S(\$procmux$6064_CMP ),
    .Y(\$procmux$6063_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6064_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6064_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:589.15-589.35|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6072  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6073_CMP ),
    .Y(\$procmux$6072_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:589.15-589.35|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6073_CMP0  (
    .A(instr[31:20]),
    .Y(\$procmux$6073_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6074  (
    .A(1'hx),
    .B(\$procmux$6072_Y ),
    .S(\$procmux$6075_CMP ),
    .Y(\$procmux$6074_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6076  (
    .A(1'hx),
    .B(\$procmux$6074_Y ),
    .S(\$procmux$6077_CMP ),
    .Y(\$procmux$6076_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6077_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6077_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:599.15-599.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6082  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6083_CMP ),
    .Y(\$procmux$6082_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:599.15-599.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6083_CMP0  (
    .A(instr[31:20]),
    .B(12'h7b2),
    .Y(\$procmux$6083_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6084  (
    .A(1'hx),
    .B(\$procmux$6082_Y ),
    .S(\$procmux$6085_CMP ),
    .Y(\$procmux$6084_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6086  (
    .A(1'hx),
    .B(\$procmux$6084_Y ),
    .S(\$procmux$6087_CMP ),
    .Y(\$procmux$6086_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6087_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6087_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:596.15-596.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6093  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6094_CMP ),
    .Y(\$procmux$6093_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:596.15-596.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6094_CMP0  (
    .A(instr[31:20]),
    .B(12'h302),
    .Y(\$procmux$6094_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6095  (
    .A(1'hx),
    .B(\$procmux$6093_Y ),
    .S(\$procmux$6096_CMP ),
    .Y(\$procmux$6095_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6097  (
    .A(1'hx),
    .B(\$procmux$6095_Y ),
    .S(\$procmux$6098_CMP ),
    .Y(\$procmux$6097_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6098_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6098_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:593.15-593.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6105  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6106_CMP ),
    .Y(\$procmux$6105_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:593.15-593.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6106_CMP0  (
    .A(instr[31:20]),
    .B(12'h001),
    .Y(\$procmux$6106_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6107  (
    .A(1'hx),
    .B(\$procmux$6105_Y ),
    .S(\$procmux$6108_CMP ),
    .Y(\$procmux$6107_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6109  (
    .A(1'hx),
    .B(\$procmux$6107_Y ),
    .S(\$procmux$6110_CMP ),
    .Y(\$procmux$6109_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6110_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6110_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$6114  (
    .A(1'h1),
    .B(5'h00),
    .S({ \$procmux$6119_CMP , \$procmux$6118_CMP , \$procmux$6117_CMP , \$procmux$6116_CMP , \$procmux$6115_CMP  }),
    .Y(\$procmux$6114_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6115_CMP0  (
    .A(instr[31:20]),
    .B(12'h105),
    .Y(\$procmux$6115_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:599.15-599.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6116_CMP0  (
    .A(instr[31:20]),
    .B(12'h7b2),
    .Y(\$procmux$6116_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:596.15-596.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6117_CMP0  (
    .A(instr[31:20]),
    .B(12'h302),
    .Y(\$procmux$6117_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:593.15-593.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6118_CMP0  (
    .A(instr[31:20]),
    .B(12'h001),
    .Y(\$procmux$6118_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:589.15-589.35|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6119_CMP0  (
    .A(instr[31:20]),
    .Y(\$procmux$6119_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6120  (
    .A(1'hx),
    .B(\$procmux$6114_Y ),
    .S(\$procmux$6121_CMP ),
    .Y(\$procmux$6120_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6122  (
    .A(1'hx),
    .B(\$procmux$6120_Y ),
    .S(\$procmux$6123_CMP ),
    .Y(\$procmux$6122_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6123_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6123_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6128  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6129_CMP ),
    .Y(\$procmux$6128_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6130  (
    .A(1'hx),
    .B(\$procmux$6128_Y ),
    .S(\$procmux$6131_CMP ),
    .Y(\$procmux$6130_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6131_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6131_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6136  (
    .A(\$rf_ren_a_o$87 ),
    .B(1'h0),
    .S(\$procmux$6137_CMP ),
    .Y(\$procmux$6136_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6138  (
    .A(1'hx),
    .B(\$procmux$6136_Y ),
    .S(\$procmux$6139_CMP ),
    .Y(\$procmux$6138_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6139_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6139_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6144  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6145_CMP ),
    .Y(\$procmux$6144_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6146  (
    .A(1'hx),
    .B(\$procmux$6144_Y ),
    .S(\$procmux$6147_CMP ),
    .Y(\$procmux$6146_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6147_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6147_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6152  (
    .A(1'h0),
    .B(\$wfi_insn_o$77 ),
    .S(\$procmux$6153_CMP ),
    .Y(\$procmux$6152_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6154  (
    .A(1'hx),
    .B(\$procmux$6152_Y ),
    .S(\$procmux$6155_CMP ),
    .Y(\$procmux$6154_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6155_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6155_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6160  (
    .A(1'h0),
    .B(\$ecall_insn_o$76 ),
    .S(\$procmux$6161_CMP ),
    .Y(\$procmux$6160_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6162  (
    .A(1'hx),
    .B(\$procmux$6160_Y ),
    .S(\$procmux$6163_CMP ),
    .Y(\$procmux$6162_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6163_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6163_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6168  (
    .A(1'h0),
    .B(\$dret_insn_o$75 ),
    .S(\$procmux$6169_CMP ),
    .Y(\$procmux$6168_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6170  (
    .A(1'hx),
    .B(\$procmux$6168_Y ),
    .S(\$procmux$6171_CMP ),
    .Y(\$procmux$6170_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6171_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6171_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6176  (
    .A(1'h0),
    .B(\$mret_insn_o$74 ),
    .S(\$procmux$6177_CMP ),
    .Y(\$procmux$6176_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6178  (
    .A(1'hx),
    .B(\$procmux$6176_Y ),
    .S(\$procmux$6179_CMP ),
    .Y(\$procmux$6178_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6179_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6179_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6184  (
    .A(1'h0),
    .B(\$ebrk_insn_o$73 ),
    .S(\$procmux$6185_CMP ),
    .Y(\$procmux$6184_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6186  (
    .A(1'hx),
    .B(\$procmux$6184_Y ),
    .S(\$procmux$6187_CMP ),
    .Y(\$procmux$6186_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6187_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6187_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6192  (
    .A(\$csr_op$89 ),
    .B(2'h0),
    .S(\$procmux$6193_CMP ),
    .Y(\$procmux$6192_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6194  (
    .A(2'hx),
    .B(\$procmux$6192_Y ),
    .S(\$procmux$6195_CMP ),
    .Y(\$procmux$6194_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6195_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6195_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6200  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6201_CMP ),
    .Y(\$procmux$6200_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6202  (
    .A(1'hx),
    .B(\$procmux$6200_Y ),
    .S(\$procmux$6203_CMP ),
    .Y(\$procmux$6202_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6203_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6203_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6208  (
    .A(\$csr_illegal$88 ),
    .B(1'h0),
    .S(\$procmux$6209_CMP ),
    .Y(\$procmux$6208_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6210  (
    .A(1'hx),
    .B(\$procmux$6208_Y ),
    .S(\$procmux$6211_CMP ),
    .Y(\$procmux$6210_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6211_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6211_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:574.15-574.39|rtl/cve2/cve2_decoder.sv:573.13-575.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6215  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6216_CMP ),
    .Y(\$procmux$6215_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6217  (
    .A(1'hx),
    .B(\$procmux$6215_Y ),
    .S(\$procmux$6218_CMP ),
    .Y(\$procmux$6217_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6218_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6218_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6219  (
    .A(1'hx),
    .B(\$procmux$6217_Y ),
    .S(\$procmux$6220_CMP ),
    .Y(\$procmux$6219_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6220_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6220_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6225  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6226_CMP ),
    .Y(\$procmux$6225_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6226_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6226_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6227  (
    .A(1'hx),
    .B(\$procmux$6225_Y ),
    .S(\$procmux$6228_CMP ),
    .Y(\$procmux$6227_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6228_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6228_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6233  (
    .A(1'h0),
    .B(\$jump_set_o$65 ),
    .S(\$procmux$6234_CMP ),
    .Y(\$procmux$6233_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6234_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6234_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6235  (
    .A(1'hx),
    .B(\$procmux$6233_Y ),
    .S(\$procmux$6236_CMP ),
    .Y(\$procmux$6235_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6236_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6236_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6243  (
    .A(1'hx),
    .B(1'h0),
    .S(\$procmux$6244_CMP ),
    .Y(\$procmux$6243_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6244_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6244_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6248  (
    .A(1'h1),
    .B(2'h0),
    .S({ \$procmux$6250_CMP , \$procmux$6249_CMP  }),
    .Y(\$procmux$6248_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6249_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6249_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:563.13-563.36|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6250_CMP0  (
    .A(instr[14:12]),
    .Y(\$procmux$6250_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6251  (
    .A(1'hx),
    .B(\$procmux$6248_Y ),
    .S(\$procmux$6252_CMP ),
    .Y(\$procmux$6251_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6252_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6252_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6268  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6269_CTRL ),
    .Y(\$procmux$6268_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_ANY  (
    .A(\$procmux$6269_CMP ),
    .Y(\$procmux$6269_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .Y(\$procmux$6269_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP1  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h100),
    .Y(\$procmux$6269_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP2  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h002),
    .Y(\$procmux$6269_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP3  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h003),
    .Y(\$procmux$6269_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP4  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h004),
    .Y(\$procmux$6269_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP5  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h006),
    .Y(\$procmux$6269_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP6  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h007),
    .Y(\$procmux$6269_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP7  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h001),
    .Y(\$procmux$6269_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP8  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h005),
    .Y(\$procmux$6269_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP9  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h105),
    .Y(\$procmux$6269_CMP [9])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6271  (
    .A(\$procmux$6268_Y ),
    .B(1'hx),
    .S(\$procmux$6272_CMP ),
    .Y(\$procmux$6271_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6273  (
    .A(1'hx),
    .B(\$procmux$6271_Y ),
    .S(\$procmux$6274_CMP ),
    .Y(\$procmux$6273_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6274_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6274_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd2)
  ) \$procmux$6280  (
    .A(2'h0),
    .B(8'hdf),
    .S({ \$procmux$6284_CMP , \$procmux$6283_CMP , \$procmux$6282_CMP , \$procmux$6281_CMP  }),
    .Y(\$procmux$6280_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6281_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00e),
    .Y(\$procmux$6281_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:528.36-532.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6282_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00c),
    .Y(\$procmux$6282_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:518.36-522.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6283_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00a),
    .Y(\$procmux$6283_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:513.36-517.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6284_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h009),
    .Y(\$procmux$6284_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6286  (
    .A(\$procmux$6280_Y ),
    .B(2'hx),
    .S(\$procmux$6287_CMP ),
    .Y(\$procmux$6286_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6288  (
    .A(2'hx),
    .B(\$procmux$6286_Y ),
    .S(\$procmux$6289_CMP ),
    .Y(\$procmux$6288_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6289_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6289_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd2)
  ) \$procmux$6294  (
    .A(2'h0),
    .B(14'h15af),
    .S({ \$procmux$6301_CMP , \$procmux$6300_CMP , \$procmux$6299_CMP , \$procmux$6298_CMP , \$procmux$6297_CMP , \$procmux$6296_CMP , \$procmux$6295_CMP  }),
    .Y(\$procmux$6294_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6295_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00f),
    .Y(\$procmux$6295_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6296_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00e),
    .Y(\$procmux$6296_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:533.36-537.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6297_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00d),
    .Y(\$procmux$6297_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:528.36-532.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6298_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00c),
    .Y(\$procmux$6298_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:523.36-527.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6299_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00b),
    .Y(\$procmux$6299_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:518.36-522.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6300_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h00a),
    .Y(\$procmux$6300_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:513.36-517.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6301_CMP0  (
    .A({ instr[31:25], instr[14:12] }),
    .B(10'h009),
    .Y(\$procmux$6301_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6303  (
    .A(\$procmux$6294_Y ),
    .B(2'hx),
    .S(\$procmux$6304_CMP ),
    .Y(\$procmux$6303_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6305  (
    .A(2'hx),
    .B(\$procmux$6303_Y ),
    .S(\$procmux$6306_CMP ),
    .Y(\$procmux$6305_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6306_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6306_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6312  (
    .A(\$illegal_insn$59 ),
    .B(1'h1),
    .S(\$procmux$6313_CMP ),
    .Y(\$procmux$6312_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6314  (
    .A(1'hx),
    .B(\$procmux$6312_Y ),
    .S(\$procmux$6315_CMP ),
    .Y(\$procmux$6314_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6315_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6315_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6321  (
    .A(\$multdiv_signed_mode_o$61 ),
    .B(2'h0),
    .S(\$procmux$6322_CMP ),
    .Y(\$procmux$6321_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6323  (
    .A(2'hx),
    .B(\$procmux$6321_Y ),
    .S(\$procmux$6324_CMP ),
    .Y(\$procmux$6323_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6324_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6324_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6330  (
    .A(\$multdiv_operator_o$60 ),
    .B(2'h0),
    .S(\$procmux$6331_CMP ),
    .Y(\$procmux$6330_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6332  (
    .A(2'hx),
    .B(\$procmux$6330_Y ),
    .S(\$procmux$6333_CMP ),
    .Y(\$procmux$6332_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6333_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6333_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6341  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$6342_CMP ),
    .Y(\$procmux$6341_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6342_CMP0  (
    .A(instr[31:27]),
    .B(5'h01),
    .Y(\$procmux$6342_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6344  (
    .A(\$procmux$6341_Y ),
    .B(1'hx),
    .S(\$procmux$6345_CMP ),
    .Y(\$procmux$6344_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6346  (
    .A(1'hx),
    .B(\$procmux$6344_Y ),
    .S(\$procmux$6347_CMP ),
    .Y(\$procmux$6346_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6347_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6347_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6348  (
    .A(1'hx),
    .B(\$procmux$6346_Y ),
    .S(\$procmux$6349_CMP ),
    .Y(\$procmux$6348_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6349_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6349_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6357  (
    .A(1'hx),
    .B(\$illegal_insn$49 ),
    .S(\$procmux$6358_CMP ),
    .Y(\$procmux$6357_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6358_CMP0  (
    .A(instr[31:27]),
    .B(5'h05),
    .Y(\$procmux$6358_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6360  (
    .A(\$procmux$6357_Y ),
    .B(1'hx),
    .S(\$procmux$6361_CMP ),
    .Y(\$procmux$6360_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6362  (
    .A(1'hx),
    .B(\$procmux$6360_Y ),
    .S(\$procmux$6363_CMP ),
    .Y(\$procmux$6362_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6363_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6363_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6364  (
    .A(1'hx),
    .B(\$procmux$6362_Y ),
    .S(\$procmux$6365_CMP ),
    .Y(\$procmux$6364_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6365_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6365_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6374  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$6375_CMP ),
    .Y(\$procmux$6374_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6375_CMP0  (
    .A(instr[31:27]),
    .B(5'h05),
    .Y(\$procmux$6375_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6377  (
    .A(\$procmux$6374_Y ),
    .B(1'hx),
    .S(\$procmux$6378_CMP ),
    .Y(\$procmux$6377_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6379  (
    .A(1'hx),
    .B(\$procmux$6377_Y ),
    .S(\$procmux$6380_CMP ),
    .Y(\$procmux$6379_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6380_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6380_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6381  (
    .A(1'hx),
    .B(\$procmux$6379_Y ),
    .S(\$procmux$6382_CMP ),
    .Y(\$procmux$6381_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6382_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6382_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6390  (
    .A(1'hx),
    .B(\$illegal_insn$45 ),
    .S(\$procmux$6391_CMP ),
    .Y(\$procmux$6390_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6391_CMP0  (
    .A(instr[31:27]),
    .B(5'h0d),
    .Y(\$procmux$6391_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6393  (
    .A(\$procmux$6390_Y ),
    .B(1'hx),
    .S(\$procmux$6394_CMP ),
    .Y(\$procmux$6393_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6395  (
    .A(1'hx),
    .B(\$procmux$6393_Y ),
    .S(\$procmux$6396_CMP ),
    .Y(\$procmux$6395_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6396_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6396_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6397  (
    .A(1'hx),
    .B(\$procmux$6395_Y ),
    .S(\$procmux$6398_CMP ),
    .Y(\$procmux$6397_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6398_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6398_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6406  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$6407_CMP ),
    .Y(\$procmux$6406_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6407_CMP0  (
    .A(instr[31:27]),
    .B(5'h0d),
    .Y(\$procmux$6407_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6409  (
    .A(\$procmux$6406_Y ),
    .B(1'hx),
    .S(\$procmux$6410_CMP ),
    .Y(\$procmux$6409_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6411  (
    .A(1'hx),
    .B(\$procmux$6409_Y ),
    .S(\$procmux$6412_CMP ),
    .Y(\$procmux$6411_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6412_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6412_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6413  (
    .A(1'hx),
    .B(\$procmux$6411_Y ),
    .S(\$procmux$6414_CMP ),
    .Y(\$procmux$6413_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6414_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6414_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$6421  (
    .A(1'h1),
    .B({ \$auto$rtlil.cc:3092:Mux$1600 , \$illegal_insn$46 , \$illegal_insn$50 , \$illegal_insn$53  }),
    .S({ \$procmux$6426_CTRL , \$procmux$6425_CMP , \$procmux$6424_CMP , \$procmux$6422_CMP  }),
    .Y(\$procmux$6421_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6422_CMP0  (
    .A(instr[31:27]),
    .B(5'h01),
    .Y(\$procmux$6422_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:418.19-424.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6424_CMP0  (
    .A(instr[31:27]),
    .B(5'h05),
    .Y(\$procmux$6424_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:409.19-415.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6425_CMP0  (
    .A(instr[31:27]),
    .B(5'h0d),
    .Y(\$procmux$6425_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_ANY  (
    .A(\$procmux$6426_CMP ),
    .Y(\$procmux$6426_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_CMP0  (
    .A(instr[31:27]),
    .Y(\$procmux$6426_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_CMP1  (
    .A(instr[31:27]),
    .B(5'h08),
    .Y(\$procmux$6426_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6428  (
    .A(\$procmux$6421_Y ),
    .B(1'hx),
    .S(\$procmux$6429_CMP ),
    .Y(\$procmux$6428_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6430  (
    .A(1'hx),
    .B(\$procmux$6428_Y ),
    .S(\$procmux$6431_CMP ),
    .Y(\$procmux$6430_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6431_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6431_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6432  (
    .A(1'hx),
    .B(\$procmux$6430_Y ),
    .S(\$procmux$6433_CMP ),
    .Y(\$procmux$6432_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6433_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6433_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6440  (
    .A(\$illegal_insn$54 ),
    .B(1'h1),
    .S(\$procmux$6441_CMP ),
    .Y(\$procmux$6440_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6442  (
    .A(1'hx),
    .B(\$procmux$6440_Y ),
    .S(\$procmux$6443_CMP ),
    .Y(\$procmux$6442_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6443_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6443_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6444  (
    .A(1'hx),
    .B(\$procmux$6442_Y ),
    .S(\$procmux$6445_CMP ),
    .Y(\$procmux$6444_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6445_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6445_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6453  (
    .A(1'h1),
    .B(\$auto$proc_rom.cc:154:do_switch$1815 ),
    .S(\$procmux$6454_CMP ),
    .Y(\$procmux$6453_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6454_CMP0  (
    .A(instr[26:25]),
    .Y(\$procmux$6454_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6455  (
    .A(1'hx),
    .B(\$procmux$6453_Y ),
    .S(\$procmux$6456_CMP ),
    .Y(\$procmux$6455_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6456_CMP0  (
    .A(instr[31:27]),
    .B(5'h0c),
    .Y(\$procmux$6456_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6457  (
    .A(1'hx),
    .B(\$procmux$6455_Y ),
    .S(\$procmux$6458_CMP ),
    .Y(\$procmux$6457_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6458_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6458_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6459  (
    .A(1'hx),
    .B(\$procmux$6457_Y ),
    .S(\$procmux$6460_CMP ),
    .Y(\$procmux$6459_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6460_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6460_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:366.17-370.20|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6470  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$6471_CMP ),
    .Y(\$procmux$6470_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:366.17-370.20|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6471_CMP0  (
    .A(instr[31:27]),
    .B(5'h01),
    .Y(\$procmux$6471_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6472  (
    .A(1'hx),
    .B(\$procmux$6470_Y ),
    .S(\$procmux$6473_CMP ),
    .Y(\$procmux$6472_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6473_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6473_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6474  (
    .A(1'hx),
    .B(\$procmux$6472_Y ),
    .S(\$procmux$6475_CMP ),
    .Y(\$procmux$6474_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6475_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6475_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6483  (
    .A(1'h1),
    .B({ \$auto$rtlil.cc:3092:Mux$1599 , \$illegal_insn$39 , \$illegal_insn$40  }),
    .S({ \$procmux$6487_CMP , \$procmux$6486_CMP , \$procmux$6484_CMP  }),
    .Y(\$procmux$6483_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6484_CMP0  (
    .A(instr[31:27]),
    .B(5'h0c),
    .Y(\$procmux$6484_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:366.17-370.20|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6486_CMP0  (
    .A(instr[31:27]),
    .B(5'h01),
    .Y(\$procmux$6486_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:358.26-358.79|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6487_CMP0  (
    .A(instr[31:27]),
    .Y(\$procmux$6487_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6488  (
    .A(1'hx),
    .B(\$procmux$6483_Y ),
    .S(\$procmux$6489_CMP ),
    .Y(\$procmux$6488_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6489_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6489_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6490  (
    .A(1'hx),
    .B(\$procmux$6488_Y ),
    .S(\$procmux$6491_CMP ),
    .Y(\$procmux$6490_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6491_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6491_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6497  (
    .A(1'hx),
    .B({ 1'h0, \$illegal_insn$41 , \$illegal_insn$55  }),
    .S({ \$procmux$6501_CTRL , \$procmux$6500_CMP , \$procmux$6498_CMP  }),
    .Y(\$procmux$6497_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6498_CMP0  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6498_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6500_CMP0  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6500_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_ANY  (
    .A(\$procmux$6501_CMP ),
    .Y(\$procmux$6501_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP0  (
    .A(instr[14:12]),
    .Y(\$procmux$6501_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP1  (
    .A(instr[14:12]),
    .B(3'h2),
    .Y(\$procmux$6501_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP2  (
    .A(instr[14:12]),
    .B(3'h3),
    .Y(\$procmux$6501_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP3  (
    .A(instr[14:12]),
    .B(3'h4),
    .Y(\$procmux$6501_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP4  (
    .A(instr[14:12]),
    .B(3'h6),
    .Y(\$procmux$6501_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP5  (
    .A(instr[14:12]),
    .B(3'h7),
    .Y(\$procmux$6501_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6502  (
    .A(1'hx),
    .B(\$procmux$6497_Y ),
    .S(\$procmux$6503_CMP ),
    .Y(\$procmux$6502_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6503_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6503_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:323.15-323.35|rtl/cve2/cve2_decoder.sv:322.13-324.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6512  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6513_CMP ),
    .Y(\$procmux$6512_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6514  (
    .A(1'hx),
    .B(\$procmux$6512_Y ),
    .S(\$procmux$6515_CMP ),
    .Y(\$procmux$6514_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6515_CMP0  (
    .A(instr[13:12]),
    .B(2'h2),
    .Y(\$procmux$6515_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6516  (
    .A(1'hx),
    .B(\$procmux$6514_Y ),
    .S(\$procmux$6517_CMP ),
    .Y(\$procmux$6516_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6517_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6517_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:319.18-319.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$6528  (
    .A(2'h0),
    .B(4'h9),
    .S({ \$procmux$6530_CMP , \$procmux$6529_CMP  }),
    .Y(\$procmux$6528_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:319.18-319.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6529_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6529_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:318.18-318.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6530_CMP0  (
    .A(instr[13:12]),
    .Y(\$procmux$6530_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6531  (
    .A(2'hx),
    .B(\$procmux$6528_Y ),
    .S(\$procmux$6532_CMP ),
    .Y(\$procmux$6531_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6532_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6532_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6542  (
    .A(1'h1),
    .B({ 2'h0, \$illegal_insn$31  }),
    .S({ \$procmux$6545_CMP , \$procmux$6544_CMP , \$procmux$6543_CMP  }),
    .Y(\$procmux$6542_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6543_CMP0  (
    .A(instr[13:12]),
    .B(2'h2),
    .Y(\$procmux$6543_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:319.18-319.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6544_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6544_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:318.18-318.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6545_CMP0  (
    .A(instr[13:12]),
    .Y(\$procmux$6545_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6546  (
    .A(1'hx),
    .B(\$procmux$6542_Y ),
    .S(\$procmux$6547_CMP ),
    .Y(\$procmux$6546_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6547_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6547_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:302.20-302.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$6558  (
    .A(2'h0),
    .B(4'h9),
    .S({ \$procmux$6560_CMP , \$procmux$6559_CMP  }),
    .Y(\$procmux$6558_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:302.20-302.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6559_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6559_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:301.20-301.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6560_CMP0  (
    .A(instr[13:12]),
    .Y(\$procmux$6560_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6562  (
    .A(2'hx),
    .B(\$procmux$6558_Y ),
    .S(\$procmux$6563_CMP ),
    .Y(\$procmux$6562_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6563_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6563_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:303.20-303.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6573  (
    .A(1'h1),
    .B({ \$illegal_insn$26 , \$illegal_insn$26 , \$illegal_insn$26  }),
    .S({ \$procmux$6576_CMP , \$procmux$6575_CMP , \$procmux$6574_CMP  }),
    .Y(\$procmux$6573_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:303.20-303.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6574_CMP0  (
    .A(instr[13:12]),
    .B(2'h2),
    .Y(\$procmux$6574_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:302.20-302.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6575_CMP0  (
    .A(instr[13:12]),
    .B(2'h1),
    .Y(\$procmux$6575_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:301.20-301.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6576_CMP0  (
    .A(instr[13:12]),
    .Y(\$procmux$6576_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6578  (
    .A(1'hx),
    .B(\$procmux$6573_Y ),
    .S(\$procmux$6579_CMP ),
    .Y(\$procmux$6578_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6579_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6579_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:296.11-296.31|rtl/cve2/cve2_decoder.sv:295.9-297.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6588  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6589_CMP ),
    .Y(\$procmux$6588_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6590  (
    .A(1'hx),
    .B(\$procmux$6588_Y ),
    .S(\$procmux$6591_CMP ),
    .Y(\$procmux$6590_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6591_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6591_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6602  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6603_CTRL ),
    .Y(\$procmux$6602_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_ANY  (
    .A(\$procmux$6603_CMP ),
    .Y(\$procmux$6603_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP0  (
    .A(instr[14:12]),
    .Y(\$procmux$6603_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP1  (
    .A(instr[14:12]),
    .B(3'h1),
    .Y(\$procmux$6603_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP2  (
    .A(instr[14:12]),
    .B(3'h4),
    .Y(\$procmux$6603_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP3  (
    .A(instr[14:12]),
    .B(3'h5),
    .Y(\$procmux$6603_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP4  (
    .A(instr[14:12]),
    .B(3'h6),
    .Y(\$procmux$6603_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_CMP5  (
    .A(instr[14:12]),
    .B(3'h7),
    .Y(\$procmux$6603_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6604  (
    .A(1'hx),
    .B(\$procmux$6602_Y ),
    .S(\$procmux$6605_CMP ),
    .Y(\$procmux$6604_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6605_CMP0  (
    .A(instr[6:0]),
    .B(7'h63),
    .Y(\$procmux$6605_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:262.11-262.31|rtl/cve2/cve2_decoder.sv:261.9-263.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6616  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6617_CMP ),
    .Y(\$procmux$6616_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6619  (
    .A(1'hx),
    .B(\$procmux$6616_Y ),
    .S(\$procmux$6620_CMP ),
    .Y(\$procmux$6619_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6620_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6620_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:253.34-257.12|rtl/cve2/cve2_decoder.sv:253.9-260.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6632  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6633_CMP ),
    .Y(\$procmux$6632_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6634  (
    .A(1'hx),
    .B(\$procmux$6632_Y ),
    .S(\$procmux$6635_CMP ),
    .Y(\$procmux$6634_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6635_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6635_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:253.34-257.12|rtl/cve2/cve2_decoder.sv:253.9-260.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6647  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6648_CMP ),
    .Y(\$procmux$6647_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6649  (
    .A(1'hx),
    .B(\$procmux$6647_Y ),
    .S(\$procmux$6650_CMP ),
    .Y(\$procmux$6649_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6650_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6650_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:240.34-244.12|rtl/cve2/cve2_decoder.sv:240.9-247.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6663  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$6664_CMP ),
    .Y(\$procmux$6663_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6665  (
    .A(1'hx),
    .B(\$procmux$6663_Y ),
    .S(\$procmux$6666_CMP ),
    .Y(\$procmux$6665_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6666_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6666_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:240.34-244.12|rtl/cve2/cve2_decoder.sv:240.9-247.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6679  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6680_CMP ),
    .Y(\$procmux$6679_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6681  (
    .A(1'hx),
    .B(\$procmux$6679_Y ),
    .S(\$procmux$6682_CMP ),
    .Y(\$procmux$6681_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6682_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6682_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6693  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6694_CMP ),
    .Y(\$procmux$6693_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6694_CMP0  (
    .A(instr[6:0]),
    .B(7'h63),
    .Y(\$procmux$6694_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6698  (
    .A(1'h0),
    .B({ 2'h3, \$jump_in_dec_o$69  }),
    .S({ \$procmux$6704_CMP , \$procmux$6702_CMP , \$procmux$6699_CMP  }),
    .Y(\$procmux$6698_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6699_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6699_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6702_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6702_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6704_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6704_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6713  (
    .A(1'h0),
    .B(\$30 ),
    .S(\$procmux$6714_CMP ),
    .Y(\$procmux$6713_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6714_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6714_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$6723  (
    .A(2'h0),
    .B({ \$data_type_o$28 , \$data_type_o$33  }),
    .S({ \$procmux$6727_CMP , \$procmux$6724_CMP  }),
    .Y(\$procmux$6723_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6724_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6724_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6727_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6727_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6738  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$6739_CMP ),
    .Y(\$procmux$6738_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6739_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6739_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6748  (
    .A(1'h0),
    .B(2'h3),
    .S({ \$procmux$6752_CMP , \$procmux$6749_CMP  }),
    .Y(\$procmux$6748_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6749_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6749_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6752_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6752_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6755  (
    .A(1'h0),
    .B(\$csr_access_o$101 ),
    .S(\$procmux$6756_CMP ),
    .Y(\$procmux$6755_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6756_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6756_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6761  (
    .A(2'h0),
    .B(\$multdiv_signed_mode_o$64 ),
    .S(\$procmux$6762_CMP ),
    .Y(\$procmux$6761_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6762_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6762_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6767  (
    .A(2'h0),
    .B(\$multdiv_operator_o$63 ),
    .S(\$procmux$6768_CMP ),
    .Y(\$procmux$6767_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6768_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6768_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6773  (
    .A(1'h0),
    .B(3'h7),
    .S({ \$procmux$6779_CMP , \$procmux$6777_CMP , \$procmux$6774_CMP  }),
    .Y(\$procmux$6773_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6774_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6774_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6777_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6777_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6779_CMP0  (
    .A(instr[6:0]),
    .B(7'h63),
    .Y(\$procmux$6779_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd1)
  ) \$procmux$6782  (
    .A(1'h0),
    .B({ 6'h3f, \$rf_ren_a_o$100  }),
    .S({ \$procmux$6797_CMP , \$procmux$6794_CMP , \$procmux$6792_CMP , \$procmux$6789_CMP , \$procmux$6787_CMP , \$procmux$6785_CMP , \$procmux$6783_CMP  }),
    .Y(\$procmux$6782_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6783_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6783_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6785_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6785_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6787_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6787_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6789_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6789_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6792_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6792_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6794_CMP0  (
    .A(instr[6:0]),
    .B(7'h63),
    .Y(\$procmux$6794_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6797_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6797_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6800  (
    .A(1'h0),
    .B(\$rf_wdata_sel_o$99 ),
    .S(\$procmux$6801_CMP ),
    .Y(\$procmux$6800_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6801_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6801_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6805  (
    .A(1'h0),
    .B({ \$jump_set_o$19 , \$jump_set_o$21 , \$jump_set_o$68  }),
    .S({ \$procmux$6811_CMP , \$procmux$6809_CMP , \$procmux$6806_CMP  }),
    .Y(\$procmux$6805_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6806_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6806_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6809_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6809_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6811_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6811_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6814  (
    .A(1'h0),
    .B(\$wfi_insn_o$98 ),
    .S(\$procmux$6815_CMP ),
    .Y(\$procmux$6814_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6815_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6815_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6818  (
    .A(1'h0),
    .B(\$ecall_insn_o$97 ),
    .S(\$procmux$6819_CMP ),
    .Y(\$procmux$6818_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6819_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6819_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6822  (
    .A(1'h0),
    .B(\$dret_insn_o$96 ),
    .S(\$procmux$6823_CMP ),
    .Y(\$procmux$6822_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6823_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6823_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6826  (
    .A(1'h0),
    .B(\$mret_insn_o$95 ),
    .S(\$procmux$6827_CMP ),
    .Y(\$procmux$6826_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6827_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6827_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6830  (
    .A(1'h0),
    .B(\$ebrk_insn_o$94 ),
    .S(\$procmux$6831_CMP ),
    .Y(\$procmux$6830_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6831_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6831_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6834  (
    .A(2'h0),
    .B(\$csr_op$93 ),
    .S(\$procmux$6835_CMP ),
    .Y(\$procmux$6834_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6835_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6835_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$6838  (
    .A(1'h0),
    .B({ \$rf_we$18 , \$rf_we$20 , 4'hf, \$rf_we$67 , \$rf_we$92  }),
    .S({ \$procmux$6852_CMP , \$procmux$6850_CMP , \$procmux$6847_CMP , \$procmux$6846_CMP , \$procmux$6845_CMP , \$procmux$6843_CMP , \$procmux$6841_CMP , \$procmux$6839_CMP  }),
    .Y(\$procmux$6838_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6839_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6839_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6841_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6841_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6843_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6843_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6845_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6845_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:341.9-341.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6846_CMP0  (
    .A(instr[6:0]),
    .B(7'h17),
    .Y(\$procmux$6846_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:337.9-337.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6847_CMP0  (
    .A(instr[6:0]),
    .B(7'h37),
    .Y(\$procmux$6847_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6850_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6850_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6852_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6852_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6855  (
    .A(1'h0),
    .B(\$csr_illegal$91 ),
    .S(\$procmux$6856_CMP ),
    .Y(\$procmux$6855_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6856_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6856_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd11),
    .WIDTH(32'd1)
  ) \$procmux$6859  (
    .A(1'h1),
    .B({ 1'h0, \$illegal_insn$24 , \$illegal_insn$25 , \$illegal_insn$27 , \$illegal_insn$32 , 2'h0, \$illegal_insn$56 , \$illegal_insn$62 , \$illegal_insn$66 , \$illegal_insn$90  }),
    .S({ \$procmux$6879_CMP , \$procmux$6878_CMP , \$procmux$6875_CMP , \$procmux$6873_CMP , \$procmux$6870_CMP , \$procmux$6868_CMP , \$procmux$6867_CMP , \$procmux$6866_CMP , \$procmux$6864_CMP , \$procmux$6862_CMP , \$procmux$6860_CMP  }),
    .Y(\$procmux$6859_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6860_CMP0  (
    .A(instr[6:0]),
    .B(7'h73),
    .Y(\$procmux$6860_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6862_CMP0  (
    .A(instr[6:0]),
    .B(7'h0f),
    .Y(\$procmux$6862_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6864_CMP0  (
    .A(instr[6:0]),
    .B(7'h33),
    .Y(\$procmux$6864_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6866_CMP0  (
    .A(instr[6:0]),
    .B(7'h13),
    .Y(\$procmux$6866_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:341.9-341.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6867_CMP0  (
    .A(instr[6:0]),
    .B(7'h17),
    .Y(\$procmux$6867_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:337.9-337.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6868_CMP0  (
    .A(instr[6:0]),
    .B(7'h37),
    .Y(\$procmux$6868_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6870_CMP0  (
    .A(instr[6:0]),
    .B(7'h03),
    .Y(\$procmux$6870_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6873_CMP0  (
    .A(instr[6:0]),
    .B(7'h23),
    .Y(\$procmux$6873_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6875_CMP0  (
    .A(instr[6:0]),
    .B(7'h63),
    .Y(\$procmux$6875_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6878_CMP0  (
    .A(instr[6:0]),
    .B(7'h67),
    .Y(\$procmux$6878_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6879_CMP0  (
    .A(instr[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6879_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:192.7-192.30|rtl/cve2/cve2_decoder.sv:190.5-193.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6880  (
    .A(\$csr_op$105 ),
    .B(2'h0),
    .S(\$procmux$6881_CMP ),
    .Y(\$procmux$6880_Y )
  );
  assign instr = instr_rdata_i;
  assign instr_alu = instr_rdata_alu_i;
  assign imm_i_type_o = { instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31:20] };
  assign imm_s_type_o = { instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31:25], instr[11:7] };
  assign imm_b_type_o = { instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[7], instr[30:25], instr[11:8], 1'h0 };
  assign imm_u_type_o = { instr[31:12], 12'h000 };
  assign imm_j_type_o = { instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[31], instr[19:12], instr[20], instr[30:21], 1'h0 };
  assign zimm_rs1_type_o = { 27'h0000000, instr_rs1 };
  assign \gen_no_rs3_flop.unused_clk  = clk_i;
  assign \gen_no_rs3_flop.unused_rst_n  = rst_ni;
  assign use_rs3_q = use_rs3_d;
  assign instr_rs1 = instr[19:15];
  assign instr_rs2 = instr[24:20];
  assign instr_rs3 = instr[31:27];
  assign rf_raddr_a_o = \$auto$rtlil.cc:3092:Mux$1598 ;
  assign rf_raddr_b_o = instr_rs2;
  assign instr_rd = instr[11:7];
  assign rf_waddr_o = instr_rd;
  assign illegal_reg_rv32e = 1'h0;
  assign csr_op_o = \$csr_op_o$16 ;
  assign illegal_insn = \$illegal_insn$124 ;
  assign csr_illegal = \$csr_illegal$103 ;
  assign rf_we = \$rf_we$125 ;
  assign csr_op = \$csr_op$105 ;
  assign opcode = instr[6:0];
  assign ebrk_insn_o = \$ebrk_insn_o$106 ;
  assign mret_insn_o = \$mret_insn_o$107 ;
  assign dret_insn_o = \$dret_insn_o$108 ;
  assign ecall_insn_o = \$ecall_insn_o$109 ;
  assign wfi_insn_o = \$wfi_insn_o$110 ;
  assign jump_set_o = \$jump_set_o$126 ;
  assign rf_wdata_sel_o = \$rf_wdata_sel_o$112 ;
  assign rf_ren_a_o = \$rf_ren_a_o$113 ;
  assign rf_ren_b_o = \$rf_ren_b_o$114 ;
  assign multdiv_operator_o = \$multdiv_operator_o$115 ;
  assign multdiv_signed_mode_o = \$multdiv_signed_mode_o$116 ;
  assign csr_access_o = \$csr_access_o$127 ;
  assign data_req_o = \$data_req_o$128 ;
  assign data_we_o = \$data_we_o$129 ;
  assign data_type_o = \$data_type_o$120 ;
  assign data_sign_extension_o = \$data_sign_extension_o$121 ;
  assign jump_in_dec_o = \$jump_in_dec_o$130 ;
  assign branch_in_dec_o = \$branch_in_dec_o$131 ;
  assign use_rs3_d = 1'h0;
  assign opcode_alu = instr_alu[6:0];
  assign imm_a_mux_sel_o = \$imm_a_mux_sel_o$176 ;
  assign imm_b_mux_sel_o = \$imm_b_mux_sel_o$177 ;
  assign alu_operator_o = \$alu_operator_o$178 ;
  assign alu_op_a_mux_sel_o = \$alu_op_a_mux_sel_o$179 ;
  assign alu_op_b_mux_sel_o = \$alu_op_b_mux_sel_o$180 ;
  assign alu_multicycle_o = 1'h0;
  assign mult_sel_o = \$mult_sel_o$181 ;
  assign div_sel_o = \$div_sel_o$182 ;
  assign mult_en_o = \$auto$rtlil.cc:3092:Mux$1601 ;
  assign div_en_o = \$auto$rtlil.cc:3092:Mux$1602 ;
  assign illegal_insn_o = \$186 ;
  assign rf_we_o = \$190 ;
  assign unused_instr_alu = { instr_alu[19:15], instr_alu[11:7] };
  assign \$procmux$5361_CMP  = instr_alu[14];
  assign \$procmux$5364_CMP  = \$170 ;
  assign \$alu_op_a_mux_sel_o$171  = \$procmux$5365_Y ;
  assign \$alu_op_b_mux_sel_o$175  = \$procmux$5371_Y ;
  assign \$procmux$5377_CMP  = \$170 ;
  assign \$alu_op_a_mux_sel_o$174  = \$procmux$5378_Y ;
  assign \$imm_b_mux_sel_o$173  = \$procmux$5384_Y ;
  assign \$procmux$5390_CMP  = \$170 ;
  assign \$imm_a_mux_sel_o$172  = \$procmux$5391_Y ;
  assign \$alu_op_b_mux_sel_o$168  = \$procmux$5398_Y ;
  assign \$alu_op_a_mux_sel_o$167  = \$procmux$5406_Y ;
  assign \$alu_operator_o$166  = \$procmux$5414_Y ;
  assign \$imm_b_mux_sel_o$165  = \$procmux$5421_Y ;
  assign \$procmux$5481_CMP  = instr_alu[26];
  assign \$div_sel_o$161  = \$procmux$5482_Y ;
  assign \$procmux$5542_CMP  = instr_alu[26];
  assign \$mult_sel_o$160  = \$procmux$5543_Y ;
  assign \$procmux$5569_CMP  = instr_alu[26];
  assign \$alu_operator_o$159  = \$procmux$5570_Y ;
  assign \$procmux$5578_CMP  = instr_alu[26];
  assign \$div_sel_o$164  = \$procmux$5579_Y ;
  assign \$procmux$5587_CMP  = instr_alu[26];
  assign \$mult_sel_o$163  = \$procmux$5588_Y ;
  assign \$procmux$5596_CMP  = instr_alu[26];
  assign \$alu_operator_o$162  = \$procmux$5597_Y ;
  assign \$alu_operator_o$157  = \$procmux$5606_Y ;
  assign \$procmux$5613_CMP  = \$154 ;
  assign \$procmux$5616_CMP  = \$152 ;
  assign \$alu_operator_o$155  = \$procmux$5619_Y ;
  assign \$procmux$5628_CMP  = \$152 ;
  assign \$alu_operator_o$156  = \$procmux$5631_Y ;
  assign \$alu_operator_o$150  = \$procmux$5640_Y ;
  assign \$alu_operator_o$158  = \$procmux$5656_Y ;
  assign \$procmux$5667_CMP  = \$147 ;
  assign \$alu_op_b_mux_sel_o$149  = \$procmux$5668_Y ;
  assign \$procmux$5679_CMP  = \$147 ;
  assign \$imm_b_mux_sel_o$148  = \$procmux$5680_Y ;
  assign \$procmux$5693_CMP  = instr_first_cycle_i;
  assign \$alu_op_b_mux_sel_o$145  = \$procmux$5695_Y ;
  assign \$procmux$5708_CMP  = instr_first_cycle_i;
  assign \$alu_op_a_mux_sel_o$144  = \$procmux$5710_Y ;
  assign \$procmux$5723_CMP  = instr_first_cycle_i;
  assign \$alu_operator_o$143  = \$procmux$5725_Y ;
  assign \$procmux$5738_CMP  = instr_first_cycle_i;
  assign \$imm_b_mux_sel_o$142  = \$procmux$5740_Y ;
  assign \$alu_operator_o$141  = \$procmux$5759_Y ;
  assign \$alu_op_b_mux_sel_o$140  = \$procmux$5773_Y ;
  assign \$procmux$5787_CMP  = instr_first_cycle_i;
  assign \$alu_op_a_mux_sel_o$139  = \$procmux$5788_Y ;
  assign \$alu_operator_o$138  = \$procmux$5802_Y ;
  assign \$procmux$5816_CMP  = instr_first_cycle_i;
  assign \$imm_b_mux_sel_o$137  = \$procmux$5817_Y ;
  assign \$alu_op_b_mux_sel_o$136  = \$procmux$5832_Y ;
  assign \$alu_op_a_mux_sel_o$135  = \$procmux$5847_Y ;
  assign \$alu_operator_o$134  = \$procmux$5862_Y ;
  assign \$procmux$5877_CMP  = instr_first_cycle_i;
  assign \$imm_b_mux_sel_o$133  = \$procmux$5878_Y ;
  assign \$div_sel_o$182  = \$procmux$5884_Y ;
  assign \$mult_sel_o$181  = \$procmux$5890_Y ;
  assign \$alu_op_b_mux_sel_o$180  = \$procmux$5894_Y ;
  assign \$alu_op_a_mux_sel_o$179  = \$procmux$5912_Y ;
  assign \$alu_operator_o$178  = \$procmux$5934_Y ;
  assign \$imm_b_mux_sel_o$177  = \$procmux$5954_Y ;
  assign \$imm_a_mux_sel_o$176  = \$procmux$5972_Y ;
  assign \$procmux$5975_CMP  = \$illegal_insn$124 ;
  assign \$branch_in_dec_o$131  = \$procmux$5974_Y ;
  assign \$procmux$5979_CMP  = \$illegal_insn$124 ;
  assign \$jump_in_dec_o$130  = \$procmux$5978_Y ;
  assign \$procmux$5983_CMP  = \$illegal_insn$124 ;
  assign \$data_we_o$129  = \$procmux$5982_Y ;
  assign \$procmux$5987_CMP  = \$illegal_insn$124 ;
  assign \$data_req_o$128  = \$procmux$5986_Y ;
  assign \$procmux$5991_CMP  = \$illegal_insn$124 ;
  assign \$csr_access_o$127  = \$procmux$5990_Y ;
  assign \$procmux$5995_CMP  = \$illegal_insn$124 ;
  assign \$jump_set_o$126  = \$procmux$5994_Y ;
  assign \$procmux$5999_CMP  = \$illegal_insn$124 ;
  assign \$rf_we$125  = \$procmux$5998_Y ;
  assign \$procmux$6003_CMP  = illegal_c_insn_i;
  assign \$illegal_insn$124  = \$procmux$6002_Y ;
  assign \$procmux$6014_CMP  = \$71 ;
  assign \$csr_op$89  = \$procmux$6015_Y ;
  assign \$procmux$6026_CMP  = \$71 ;
  assign \$csr_illegal$88  = \$procmux$6027_Y ;
  assign \$procmux$6031_CMP  = \$86 ;
  assign \$procmux$6034_CMP  = \$71 ;
  assign \$rf_ren_a_o$87  = \$procmux$6035_Y ;
  assign \$procmux$6044_CMP  = \$71 ;
  assign \$illegal_insn$90  = \$procmux$6045_Y ;
  assign \$procmux$6050_CMP  = \$83 ;
  assign \$procmux$6053_CMP  = \$71 ;
  assign \$illegal_insn$84  = \$procmux$6054_Y ;
  assign \$procmux$6062_CMP  = \$71 ;
  assign \$wfi_insn_o$77  = \$procmux$6063_Y ;
  assign \$procmux$6075_CMP  = \$71 ;
  assign \$ecall_insn_o$76  = \$procmux$6076_Y ;
  assign \$procmux$6085_CMP  = \$71 ;
  assign \$dret_insn_o$75  = \$procmux$6086_Y ;
  assign \$procmux$6096_CMP  = \$71 ;
  assign \$mret_insn_o$74  = \$procmux$6097_Y ;
  assign \$procmux$6108_CMP  = \$71 ;
  assign \$ebrk_insn_o$73  = \$procmux$6109_Y ;
  assign \$procmux$6121_CMP  = \$71 ;
  assign \$illegal_insn$72  = \$procmux$6122_Y ;
  assign \$procmux$6129_CMP  = \$71 ;
  assign \$csr_access_o$101  = \$procmux$6130_Y ;
  assign \$procmux$6137_CMP  = \$71 ;
  assign \$rf_ren_a_o$100  = \$procmux$6138_Y ;
  assign \$procmux$6145_CMP  = \$71 ;
  assign \$rf_wdata_sel_o$99  = \$procmux$6146_Y ;
  assign \$procmux$6153_CMP  = \$71 ;
  assign \$wfi_insn_o$98  = \$procmux$6154_Y ;
  assign \$procmux$6161_CMP  = \$71 ;
  assign \$ecall_insn_o$97  = \$procmux$6162_Y ;
  assign \$procmux$6169_CMP  = \$71 ;
  assign \$dret_insn_o$96  = \$procmux$6170_Y ;
  assign \$procmux$6177_CMP  = \$71 ;
  assign \$mret_insn_o$95  = \$procmux$6178_Y ;
  assign \$procmux$6185_CMP  = \$71 ;
  assign \$ebrk_insn_o$94  = \$procmux$6186_Y ;
  assign \$procmux$6193_CMP  = \$71 ;
  assign \$csr_op$93  = \$procmux$6194_Y ;
  assign \$procmux$6201_CMP  = \$71 ;
  assign \$rf_we$92  = \$procmux$6202_Y ;
  assign \$procmux$6209_CMP  = \$71 ;
  assign \$csr_illegal$91  = \$procmux$6210_Y ;
  assign \$procmux$6216_CMP  = instr_first_cycle_i;
  assign \$jump_set_o$65  = \$procmux$6219_Y ;
  assign \$jump_in_dec_o$69  = \$procmux$6227_Y ;
  assign \$jump_set_o$68  = \$procmux$6235_Y ;
  assign \$rf_we$67  = \$procmux$6243_Y ;
  assign \$illegal_insn$66  = \$procmux$6251_Y ;
  assign \$procmux$6272_CMP  = \$58 ;
  assign \$illegal_insn$59  = \$procmux$6273_Y ;
  assign \$procmux$6287_CMP  = \$58 ;
  assign \$multdiv_signed_mode_o$61  = \$procmux$6288_Y ;
  assign \$procmux$6304_CMP  = \$58 ;
  assign \$multdiv_operator_o$60  = \$procmux$6305_Y ;
  assign \$procmux$6313_CMP  = \$58 ;
  assign \$illegal_insn$62  = \$procmux$6314_Y ;
  assign \$procmux$6322_CMP  = \$58 ;
  assign \$multdiv_signed_mode_o$64  = \$procmux$6323_Y ;
  assign \$procmux$6331_CMP  = \$58 ;
  assign \$multdiv_operator_o$63  = \$procmux$6332_Y ;
  assign \$procmux$6345_CMP  = instr[26];
  assign \$illegal_insn$53  = \$procmux$6348_Y ;
  assign \$procmux$6361_CMP  = instr[26];
  assign \$illegal_insn$50  = \$procmux$6364_Y ;
  assign \$procmux$6378_CMP  = instr[26];
  assign \$illegal_insn$49  = \$procmux$6381_Y ;
  assign \$procmux$6394_CMP  = instr[26];
  assign \$illegal_insn$46  = \$procmux$6397_Y ;
  assign \$procmux$6410_CMP  = instr[26];
  assign \$illegal_insn$45  = \$procmux$6413_Y ;
  assign \$procmux$6429_CMP  = instr[26];
  assign \$illegal_insn$54  = \$procmux$6432_Y ;
  assign \$procmux$6441_CMP  = instr[26];
  assign \$illegal_insn$55  = \$procmux$6444_Y ;
  assign \$illegal_insn$40  = \$procmux$6459_Y ;
  assign \$illegal_insn$39  = \$procmux$6474_Y ;
  assign \$illegal_insn$41  = \$procmux$6490_Y ;
  assign \$illegal_insn$56  = \$procmux$6502_Y ;
  assign \$procmux$6513_CMP  = instr[14];
  assign \$illegal_insn$31  = \$procmux$6516_Y ;
  assign \$data_type_o$33  = \$procmux$6531_Y ;
  assign \$illegal_insn$32  = \$procmux$6546_Y ;
  assign \$data_type_o$28  = \$procmux$6562_Y ;
  assign \$illegal_insn$27  = \$procmux$6578_Y ;
  assign \$procmux$6589_CMP  = instr[14];
  assign \$illegal_insn$26  = \$procmux$6590_Y ;
  assign \$illegal_insn$25  = \$procmux$6604_Y ;
  assign \$procmux$6617_CMP  = \$23 ;
  assign \$illegal_insn$24  = \$procmux$6619_Y ;
  assign \$procmux$6633_CMP  = instr_first_cycle_i;
  assign \$rf_we$20  = \$procmux$6634_Y ;
  assign \$procmux$6648_CMP  = instr_first_cycle_i;
  assign \$jump_set_o$21  = \$procmux$6649_Y ;
  assign \$procmux$6664_CMP  = instr_first_cycle_i;
  assign \$rf_we$18  = \$procmux$6665_Y ;
  assign \$procmux$6680_CMP  = instr_first_cycle_i;
  assign \$jump_set_o$19  = \$procmux$6681_Y ;
  assign \$branch_in_dec_o$123  = \$procmux$6693_Y ;
  assign \$jump_in_dec_o$122  = \$procmux$6698_Y ;
  assign \$data_sign_extension_o$121  = \$procmux$6713_Y ;
  assign \$data_type_o$120  = \$procmux$6723_Y ;
  assign \$data_we_o$119  = \$procmux$6738_Y ;
  assign \$data_req_o$118  = \$procmux$6748_Y ;
  assign \$csr_access_o$117  = \$procmux$6755_Y ;
  assign \$multdiv_signed_mode_o$116  = \$procmux$6761_Y ;
  assign \$multdiv_operator_o$115  = \$procmux$6767_Y ;
  assign \$rf_ren_b_o$114  = \$procmux$6773_Y ;
  assign \$rf_ren_a_o$113  = \$procmux$6782_Y ;
  assign \$rf_wdata_sel_o$112  = \$procmux$6800_Y ;
  assign \$jump_set_o$111  = \$procmux$6805_Y ;
  assign \$wfi_insn_o$110  = \$procmux$6814_Y ;
  assign \$ecall_insn_o$109  = \$procmux$6818_Y ;
  assign \$dret_insn_o$108  = \$procmux$6822_Y ;
  assign \$mret_insn_o$107  = \$procmux$6826_Y ;
  assign \$ebrk_insn_o$106  = \$procmux$6830_Y ;
  assign \$csr_op$105  = \$procmux$6834_Y ;
  assign \$rf_we$104  = \$procmux$6838_Y ;
  assign \$csr_illegal$103  = \$procmux$6855_Y ;
  assign \$illegal_insn$102  = \$procmux$6859_Y ;
  assign \$procmux$6881_CMP  = \$15 ;
  assign \$csr_op_o$16  = \$procmux$6880_Y ;
  assign \$3  = 1'h0;
  assign \$auto$rtlil.cc:3092:Mux$1598  = instr_rs1;
  assign \$186  = \$procmux$6002_Y ;
  assign \$188  = 1'h1;
  assign \$190  = \$procmux$5998_Y ;
endmodule

/* src = "rtl/cve2/cve2_ex_block.sv:11.8" */
module \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire [33:0] \$1 ;
  wire \$11 ;
  wire [33:0] \$4 ;
  wire \$9 ;
  wire [33:0] \$auto$rtlil.cc:3092:Mux$852 ;
  wire [33:0] \$auto$rtlil.cc:3092:Mux$853 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$854 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$855 ;
  wire \$auto$rtlil.cc:3092:Mux$856 ;
  /* src = "rtl/cve2/cve2_ex_block.sv:40.33" */
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:53.16" */
  wire [33:0] alu_adder_result_ext;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.16" */
  wire alu_cmp_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:58.16" */
  wire [63:0] alu_imd_val_d;
  /* src = "rtl/cve2/cve2_ex_block.sv:57.16" */
  wire [63:0] alu_imd_val_q;
  /* src = "rtl/cve2/cve2_ex_block.sv:59.16" */
  wire [1:0] alu_imd_val_we;
  /* src = "rtl/cve2/cve2_ex_block.sv:22.33" */
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.32" */
  wire alu_is_equal_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:20.33" */
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:21.33" */
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:19.33" */
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.16" */
  wire [31:0] alu_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:43.33" */
  output branch_decision_o;
  wire branch_decision_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:42.33" */
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:15.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:27.33" */
  input div_en_i;
  wire div_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:29.33" */
  input div_sel_i;
  wire div_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:45.33" */
  output ex_valid_o;
  wire ex_valid_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:36.33" */
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:37.33" */
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:35.33" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:26.33" */
  input mult_en_i;
  wire mult_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:28.33" */
  input mult_sel_i;
  wire mult_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.39" */
  wire [32:0] multdiv_alu_operand_a;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.16" */
  wire [32:0] multdiv_alu_operand_b;
  /* src = "rtl/cve2/cve2_ex_block.sv:61.16" */
  wire [1:0] multdiv_imd_val_we;
  /* src = "rtl/cve2/cve2_ex_block.sv:31.33" */
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:32.33" */
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:25.33" */
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.28" */
  wire [31:0] multdiv_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:56.16" */
  wire multdiv_sel;
  /* src = "rtl/cve2/cve2_ex_block.sv:30.33" */
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:55.16" */
  wire multdiv_valid;
  /* src = "rtl/cve2/cve2_ex_block.sv:41.33" */
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:16.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_ex_block.sv:60.16" */
  reg [33:0] multdiv_imd_val_d [1:0];
  assign \$4  = multdiv_imd_val_d[32'd1];
  assign \$1  = multdiv_imd_val_d[32'd0];
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$9 ),
    .Y(\$11 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(alu_imd_val_we),
    .Y(\$9 )
  );
  /* src = "rtl/cve2/cve2_ex_block.sv:97.5" */
  \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(alu_cmp_result),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i(alu_imd_val_q),
    .imd_val_we_o(alu_imd_val_we),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(33'h000000000),
    .multdiv_operand_b_i(33'h000000000),
    .multdiv_sel_i(1'h0),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(alu_result)
  );
  assign multdiv_sel = 1'h0;
  assign imd_val_d_o[67:34] = \$auto$rtlil.cc:3092:Mux$852 ;
  assign imd_val_d_o[33:0] = \$auto$rtlil.cc:3092:Mux$853 ;
  assign imd_val_we_o = \$auto$rtlil.cc:3092:Mux$854 ;
  assign alu_imd_val_q = { imd_val_q_i[65:34], imd_val_q_i[31:0] };
  assign result_ex_o = \$auto$rtlil.cc:3092:Mux$855 ;
  assign branch_decision_o = alu_cmp_result;
  assign branch_target_o = alu_adder_result_ex_o;
  assign multdiv_alu_operand_a = 33'h000000000;
  assign multdiv_alu_operand_b = 33'h000000000;
  assign multdiv_result = 32'd0;
  assign multdiv_valid = 1'h0;
  assign ex_valid_o = \$auto$rtlil.cc:3092:Mux$856 ;
  assign \$auto$rtlil.cc:3092:Mux$852  = { 2'h0, alu_imd_val_d[63:32] };
  assign \$auto$rtlil.cc:3092:Mux$853  = { 2'h0, alu_imd_val_d[31:0] };
  assign \$auto$rtlil.cc:3092:Mux$854  = alu_imd_val_we;
  assign \$auto$rtlil.cc:3092:Mux$855  = alu_result;
  assign \$auto$rtlil.cc:3092:Mux$856  = \$11 ;
endmodule

/* src = "rtl/cve2/cve2_fetch_fifo.sv:15.8" */
module \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$10 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$123 ;
  wire \$127 ;
  wire \$129 ;
  wire \$131 ;
  wire \$133 ;
  wire \$136 ;
  wire \$138 ;
  wire \$14 ;
  wire \$140 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$36 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$62 ;
  wire [30:0] \$64 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1726 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1727 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1735 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1736 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1737 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1738 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1739 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1740 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1741 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1742 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1718 ;
  wire \$auto$rtlil.cc:3092:Mux$1719 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1720 ;
  wire \$auto$rtlil.cc:3092:Mux$1721 ;
  wire \$auto$rtlil.cc:3092:Mux$1722 ;
  wire \$auto$rtlil.cc:3092:Mux$1723 ;
  wire \$auto$rtlil.cc:3092:Mux$1724 ;
  wire [30:0] \$auto$rtlil.cc:3092:Mux$1725 ;
  wire \$auto$rtlil.cc:3092:Mux$1728 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1729 ;
  wire \$auto$rtlil.cc:3092:Mux$1730 ;
  wire \$auto$rtlil.cc:3092:Mux$1731 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1732 ;
  wire \$auto$rtlil.cc:3092:Mux$1733 ;
  wire \$auto$rtlil.cc:3092:Mux$1734 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire \$err_q[0]$148 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire \$err_q[1]$153 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire \$err_q[2]$158 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:154.14-156.8" */
  wire [30:0] \$instr_addr_q$69 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  wire \$out_err_o$54 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  wire \$out_err_plus2_o$55 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  wire [31:0] \$out_rdata_o$53 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  wire \$out_valid_o$51 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  wire \$out_valid_o$52 ;
  wire \$procmux$3595_Y ;
  wire \$procmux$3596_CMP ;
  wire [31:0] \$procmux$3597_Y ;
  wire \$procmux$3598_CMP ;
  wire \$procmux$3599_Y ;
  wire \$procmux$3600_CMP ;
  wire [31:0] \$procmux$3601_Y ;
  wire \$procmux$3602_CMP ;
  wire \$procmux$3603_Y ;
  wire \$procmux$3604_CMP ;
  wire [31:0] \$procmux$3605_Y ;
  wire \$procmux$3606_CMP ;
  wire [30:0] \$procmux$3607_Y ;
  wire \$procmux$3608_CMP ;
  wire \$procmux$3611_Y ;
  wire \$procmux$3612_CMP ;
  wire \$procmux$3615_Y ;
  wire \$procmux$3616_CMP ;
  wire [31:0] \$procmux$3619_Y ;
  wire \$procmux$3620_CMP ;
  wire \$procmux$3623_Y ;
  wire \$procmux$3624_CMP ;
  wire \$procmux$3627_Y ;
  wire \$procmux$3628_CMP ;
  wire \$procmux$3629_Y ;
  wire \$procmux$3630_CMP ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire [31:0] \$rdata_q[31:0]$147 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire [31:0] \$rdata_q[63:32]$152 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  wire [31:0] \$rdata_q[95:64]$157 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:57.29" */
  wire addr_incr_two;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.29" */
  wire aligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:23.31" */
  output [1:0] busy_o;
  wire [1:0] busy_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:22.31" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:18.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:48.29" */
  wire [2:0] entry_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.29" */
  wire err;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.29" */
  wire [2:0] err_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.51" */
  wire err_plus2;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.40" */
  wire [2:0] err_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.36" */
  wire err_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:27.31" */
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:29.31" */
  input in_err_i;
  wire in_err_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:28.31" */
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:26.31" */
  input in_valid_i;
  wire in_valid_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.29" */
  wire [30:0] instr_addr_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:60.29" */
  wire instr_addr_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:58.29" */
  wire [30:0] instr_addr_next;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.43" */
  wire [30:0] instr_addr_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:46.29" */
  wire [2:0] lowest_free_entry;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:34.31" */
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:36.31" */
  output out_err_o;
  wire out_err_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:37.31" */
  output out_err_plus2_o;
  wire out_err_plus2_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:35.31" */
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:33.31" */
  input out_ready_i;
  wire out_ready_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:32.31" */
  output out_valid_o;
  wire out_valid_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:50.29" */
  wire pop_fifo;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.29" */
  wire [31:0] rdata;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.29" */
  wire [95:0] rdata_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.40" */
  wire [95:0] rdata_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.36" */
  wire [31:0] rdata_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:19.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.52" */
  wire unaligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:61.29" */
  wire unused_addr_in;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.29" */
  wire valid;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.29" */
  wire [2:0] valid_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.43" */
  wire [2:0] valid_popped;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.29" */
  wire [2:0] valid_pushed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.40" */
  wire [2:0] valid_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.36" */
  wire valid_unaligned;
  \$mux  #(
    .WIDTH(32'd32)
  ) \$0  (
    .A(in_rdata_i),
    .B(rdata_q[31:0]),
    .S(valid_q[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1718 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(in_err_i),
    .B(err_q[0]),
    .S(valid_q[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1719 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(in_err_i),
    .B(err_q[1]),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1730 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(valid_q[1]),
    .Y(\$102 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\$102 ),
    .B(valid_q[0]),
    .Y(\$104 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(in_valid_i),
    .B(lowest_free_entry[1]),
    .Y(\$106 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(\$106 ),
    .B(valid_q[1]),
    .Y(\$108 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$109  (
    .A(valid_pushed[1]),
    .B(valid_pushed[2]),
    .S(pop_fifo),
    .Y(\$auto$rtlil.cc:3092:Mux$1731 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(clear_i),
    .Y(\$111 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(valid_popped[1]),
    .B(\$111 ),
    .Y(\$113 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(valid_pushed[2]),
    .B(pop_fifo),
    .Y(\$115 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(in_valid_i),
    .B(lowest_free_entry[1]),
    .Y(\$117 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(pop_fifo),
    .Y(\$119 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(\$117 ),
    .B(\$119 ),
    .Y(\$121 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(\$115 ),
    .B(\$121 ),
    .Y(\$123 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$124  (
    .A(in_rdata_i),
    .B(rdata_q[95:64]),
    .S(valid_q[2]),
    .Y(\$auto$rtlil.cc:3092:Mux$1732 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$125  (
    .A(in_err_i),
    .B(err_q[2]),
    .S(valid_q[2]),
    .Y(\$auto$rtlil.cc:3092:Mux$1733 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(valid_q[2]),
    .Y(\$127 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\$127 ),
    .B(valid_q[1]),
    .Y(\$129 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(in_err_i),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(in_valid_i),
    .B(lowest_free_entry[2]),
    .Y(\$131 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(valid_q[2]),
    .B(\$131 ),
    .Y(\$133 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$134  (
    .A(valid_pushed[2]),
    .B(1'h0),
    .S(pop_fifo),
    .Y(\$auto$rtlil.cc:3092:Mux$1734 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(clear_i),
    .Y(\$136 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(valid_popped[2]),
    .B(\$136 ),
    .Y(\$138 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(in_valid_i),
    .B(lowest_free_entry[2]),
    .Y(\$140 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1735 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1737 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$6 ),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1739 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1741 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(unaligned_is_compressed),
    .Y(\$18 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(err_q[1]),
    .B(\$18 ),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(\$3 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$20 ),
    .B(err_q[0]),
    .Y(\$22 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$23  (
    .A(\$16 ),
    .B(\$22 ),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1721 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(in_err_i),
    .B(valid_q[0]),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(err_q[0]),
    .Y(\$27 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$25 ),
    .B(\$27 ),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(err_q[0]),
    .Y(\$31 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(err_q[1]),
    .B(\$31 ),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$34  (
    .A(\$29 ),
    .B(\$33 ),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1722 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(\$36 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$37  (
    .A(\$36 ),
    .B(1'h1),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1723 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(rdata[17:16]),
    .B(2'h3),
    .Y(\$39 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A({ in_rdata_i[15:0], rdata[31:16] }),
    .B({ rdata_q[47:32], rdata[31:16] }),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1720 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(err),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$39 ),
    .B(\$41 ),
    .Y(\$43 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(rdata[1:0]),
    .B(2'h3),
    .Y(\$45 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(err),
    .Y(\$47 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$45 ),
    .B(\$47 ),
    .Y(\$49 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(valid_q[0]),
    .B(err_q[0]),
    .Y(\$6 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(out_ready_i),
    .B(out_valid_o),
    .Y(\$57 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(clear_i),
    .B(\$57 ),
    .Y(\$59 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$60  (
    .A(aligned_is_compressed),
    .B(unaligned_is_compressed),
    .S(instr_addr_q[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1724 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(addr_incr_two),
    .Y(\$62 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd31),
    .Y_WIDTH(32'd31)
  ) \$63  (
    .A(instr_addr_q),
    .B({ 29'h00000000, \$62 , addr_incr_two }),
    .Y(\$64 )
  );
  \$mux  #(
    .WIDTH(32'd31)
  ) \$65  (
    .A(instr_addr_next),
    .B(in_addr_i[31:1]),
    .S(clear_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1725 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1726 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(valid_q[0]),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(out_ready_i),
    .B(out_valid_o),
    .Y(\$71 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(aligned_is_compressed),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$73 ),
    .B(out_addr_o[1]),
    .Y(\$75 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$71 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(valid_q[0]),
    .Y(\$79 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(in_valid_i),
    .B(lowest_free_entry[0]),
    .Y(\$81 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$81 ),
    .B(valid_q[0]),
    .Y(\$83 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(valid_pushed[0]),
    .B(valid_pushed[1]),
    .S(pop_fifo),
    .Y(\$auto$rtlil.cc:3092:Mux$1728 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(clear_i),
    .Y(\$86 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(valid_popped[0]),
    .B(\$86 ),
    .Y(\$88 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(valid_pushed[1]),
    .B(pop_fifo),
    .Y(\$90 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(unaligned_is_compressed),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(in_valid_i),
    .B(lowest_free_entry[0]),
    .Y(\$92 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(pop_fifo),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(\$92 ),
    .B(\$94 ),
    .Y(\$96 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\$90 ),
    .B(\$96 ),
    .Y(\$98 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$99  (
    .A(in_rdata_i),
    .B(rdata_q[63:32]),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$1729 )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$err_q[0:0]  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$err_q[0]$148 ),
    .Q(err_q[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$err_q[1:1]  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$err_q[1]$153 ),
    .Q(err_q[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$err_q[2:2]  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$err_q[2]$158 ),
    .Q(err_q[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:151.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd31)
  ) \$driver$instr_addr_q  (
    .AD(31'h00000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_addr_q$69 ),
    .Q(instr_addr_q)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q[0]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q[31:0]$147 ),
    .Q(rdata_q[31:0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q[1]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q[63:32]$152 ),
    .Q(rdata_q[63:32])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rdata_q[2]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q[95:64]$157 ),
    .Q(rdata_q[95:64])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:219.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$valid_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(valid_d),
    .Q(valid_q)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3595  (
    .A(err_q[1]),
    .B(\$auto$rtlil.cc:3092:Mux$1733 ),
    .S(\$procmux$3596_CMP ),
    .Y(\$procmux$3595_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3597  (
    .A(rdata_q[63:32]),
    .B(\$auto$rtlil.cc:3092:Mux$1732 ),
    .S(\$procmux$3598_CMP ),
    .Y(\$procmux$3597_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3599  (
    .A(err_q[0]),
    .B(\$auto$rtlil.cc:3092:Mux$1730 ),
    .S(\$procmux$3600_CMP ),
    .Y(\$procmux$3599_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3601  (
    .A(rdata_q[31:0]),
    .B(\$auto$rtlil.cc:3092:Mux$1729 ),
    .S(\$procmux$3602_CMP ),
    .Y(\$procmux$3601_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3603  (
    .A(err_q[2]),
    .B(in_err_i),
    .S(\$procmux$3604_CMP ),
    .Y(\$procmux$3603_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:232.35-235.12|rtl/cve2/cve2_fetch_fifo.sv:232.18-235.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3605  (
    .A(rdata_q[95:64]),
    .B(in_rdata_i),
    .S(\$procmux$3606_CMP ),
    .Y(\$procmux$3605_Y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:155.7-155.36|rtl/cve2/cve2_fetch_fifo.sv:154.14-156.8" */
  \$mux  #(
    .WIDTH(32'd31)
  ) \$procmux$3607  (
    .A(instr_addr_q),
    .B(\$auto$rtlil.cc:3092:Mux$1725 ),
    .S(\$procmux$3608_CMP ),
    .Y(\$procmux$3607_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3611  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$1722 ),
    .S(\$procmux$3612_CMP ),
    .Y(\$procmux$3611_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3615  (
    .A(\$auto$rtlil.cc:3092:Mux$1719 ),
    .B(\$auto$rtlil.cc:3092:Mux$1721 ),
    .S(\$procmux$3616_CMP ),
    .Y(\$procmux$3615_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3619  (
    .A(\$auto$rtlil.cc:3092:Mux$1718 ),
    .B(\$auto$rtlil.cc:3092:Mux$1720 ),
    .S(\$procmux$3620_CMP ),
    .Y(\$procmux$3619_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3623  (
    .A(\$3 ),
    .B(\$out_valid_o$51 ),
    .S(\$procmux$3624_CMP ),
    .Y(\$procmux$3623_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3627  (
    .A(\$auto$rtlil.cc:3092:Mux$1723 ),
    .B(\$3 ),
    .S(\$procmux$3628_CMP ),
    .Y(\$procmux$3627_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3629  (
    .A(1'hx),
    .B(\$procmux$3627_Y ),
    .S(\$procmux$3630_CMP ),
    .Y(\$procmux$3629_Y )
  );
  assign rdata = \$auto$rtlil.cc:3092:Mux$1718 ;
  assign err = \$auto$rtlil.cc:3092:Mux$1719 ;
  assign valid = \$3 ;
  assign rdata_unaligned = \$auto$rtlil.cc:3092:Mux$1720 ;
  assign err_unaligned = \$auto$rtlil.cc:3092:Mux$1721 ;
  assign err_plus2 = \$auto$rtlil.cc:3092:Mux$1722 ;
  assign valid_unaligned = \$auto$rtlil.cc:3092:Mux$1723 ;
  assign unaligned_is_compressed = \$43 ;
  assign aligned_is_compressed = \$49 ;
  assign out_valid_o = \$out_valid_o$52 ;
  assign out_rdata_o = \$out_rdata_o$53 ;
  assign out_err_o = \$out_err_o$54 ;
  assign out_err_plus2_o = \$out_err_plus2_o$55 ;
  assign instr_addr_en = \$59 ;
  assign addr_incr_two = \$auto$rtlil.cc:3092:Mux$1724 ;
  assign instr_addr_next = \$64 ;
  assign instr_addr_d = \$auto$rtlil.cc:3092:Mux$1725 ;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign unused_addr_in = in_addr_i[0];
  assign busy_o = valid_q[2:1];
  assign pop_fifo = \$77 ;
  assign lowest_free_entry[0] = \$79 ;
  assign valid_pushed[0] = \$83 ;
  assign valid_popped[0] = \$auto$rtlil.cc:3092:Mux$1728 ;
  assign valid_d[0] = \$88 ;
  assign entry_en[0] = \$98 ;
  assign rdata_d[31:0] = \$auto$rtlil.cc:3092:Mux$1729 ;
  assign err_d[0] = \$auto$rtlil.cc:3092:Mux$1730 ;
  assign lowest_free_entry[1] = \$104 ;
  assign valid_pushed[1] = \$108 ;
  assign valid_popped[1] = \$auto$rtlil.cc:3092:Mux$1731 ;
  assign valid_d[1] = \$113 ;
  assign entry_en[1] = \$123 ;
  assign rdata_d[63:32] = \$auto$rtlil.cc:3092:Mux$1732 ;
  assign err_d[1] = \$auto$rtlil.cc:3092:Mux$1733 ;
  assign lowest_free_entry[2] = \$129 ;
  assign valid_pushed[2] = \$133 ;
  assign valid_popped[2] = \$auto$rtlil.cc:3092:Mux$1734 ;
  assign valid_d[2] = \$138 ;
  assign entry_en[2] = \$140 ;
  assign rdata_d[95:64] = in_rdata_i;
  assign err_d[2] = in_err_i;
  assign \$procmux$3596_CMP  = entry_en[1];
  assign \$err_q[1]$153  = \$procmux$3595_Y ;
  assign \$procmux$3598_CMP  = entry_en[1];
  assign \$rdata_q[63:32]$152  = \$procmux$3597_Y ;
  assign \$procmux$3600_CMP  = entry_en[0];
  assign \$err_q[0]$148  = \$procmux$3599_Y ;
  assign \$procmux$3602_CMP  = entry_en[0];
  assign \$rdata_q[31:0]$147  = \$procmux$3601_Y ;
  assign \$procmux$3604_CMP  = entry_en[2];
  assign \$err_q[2]$158  = \$procmux$3603_Y ;
  assign \$procmux$3606_CMP  = entry_en[2];
  assign \$rdata_q[95:64]$157  = \$procmux$3605_Y ;
  assign \$procmux$3608_CMP  = instr_addr_en;
  assign \$instr_addr_q$69  = \$procmux$3607_Y ;
  assign \$procmux$3612_CMP  = out_addr_o[1];
  assign \$out_err_plus2_o$55  = \$procmux$3611_Y ;
  assign \$procmux$3616_CMP  = out_addr_o[1];
  assign \$out_err_o$54  = \$procmux$3615_Y ;
  assign \$procmux$3620_CMP  = out_addr_o[1];
  assign \$out_rdata_o$53  = \$procmux$3619_Y ;
  assign \$procmux$3624_CMP  = out_addr_o[1];
  assign \$out_valid_o$52  = \$procmux$3623_Y ;
  assign \$procmux$3628_CMP  = unaligned_is_compressed;
  assign \$procmux$3630_CMP  = out_addr_o[1];
  assign \$out_valid_o$51  = \$procmux$3629_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1727  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1736  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1738  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1740  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1742  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_id_stage.sv:19.8" */
module \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i (clk_i, rst_ni, irqs_i, instr_req_o, instr_rdata_i, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o
, exc_cause_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o
, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$1 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$142 ;
  wire \$15 ;
  wire \$157 ;
  wire \$17 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$19 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$198 ;
  wire \$200 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$24 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$3 ;
  wire \$32 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$5 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  wire [31:0] \$alu_operand_a$27 ;
  wire \$auto$rtlil.cc:2965:LogicNot$837 ;
  wire \$auto$rtlil.cc:2965:LogicNot$838 ;
  wire \$auto$rtlil.cc:2965:LogicNot$839 ;
  wire \$auto$rtlil.cc:2965:LogicNot$840 ;
  wire \$auto$rtlil.cc:2965:LogicNot$844 ;
  wire \$auto$rtlil.cc:2965:LogicNot$845 ;
  wire \$auto$rtlil.cc:2965:LogicNot$846 ;
  wire \$auto$rtlil.cc:2965:LogicNot$847 ;
  wire \$auto$rtlil.cc:2965:LogicNot$848 ;
  wire \$auto$rtlil.cc:2965:LogicNot$849 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$831 ;
  wire \$auto$rtlil.cc:3092:Mux$832 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$833 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$834 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$835 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$836 ;
  wire \$auto$rtlil.cc:3092:Mux$841 ;
  wire \$auto$rtlil.cc:3092:Mux$842 ;
  wire \$auto$rtlil.cc:3092:Mux$843 ;
  wire \$auto$rtlil.cc:3092:Mux$850 ;
  wire \$auto$rtlil.cc:3092:Mux$851 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$branch_set_raw_d$147 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$branch_set_raw_d$163 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$branch_set_raw_d$172 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10" */
  wire \$csr_pipe_flush$75 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:431.7-436.10" */
  wire \$csr_pipe_flush$96 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:430.14-437.8" */
  wire \$csr_pipe_flush$97 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  wire \$csr_pipe_flush$98 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  wire \$id_fsm_d$145 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$id_fsm_d$154 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  wire \$id_fsm_d$162 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$id_fsm_d$170 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$id_fsm_d$179 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:611.14-613.8" */
  wire \$id_fsm_q$139 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:308.16-310.10" */
  wire [33:0] \$imd_val_q[33:0]$41 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:308.16-310.10" */
  wire [33:0] \$imd_val_q[67:34]$37 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  wire [31:0] \$imm_b$30 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$jump_set_raw$148 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$jump_set_raw$164 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$jump_set_raw$173 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$perf_branch_o$155 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$perf_branch_o$171 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$perf_branch_o$180 ;
  wire \$procmux$12746_Y ;
  wire \$procmux$12747_CMP ;
  wire \$procmux$12749_Y ;
  wire \$procmux$12750_CMP ;
  wire \$procmux$12751_Y ;
  wire \$procmux$12752_CMP ;
  wire \$procmux$12754_Y ;
  wire \$procmux$12755_CMP ;
  wire \$procmux$12757_Y ;
  wire \$procmux$12758_CMP ;
  wire \$procmux$12759_Y ;
  wire \$procmux$12760_CMP ;
  wire \$procmux$12762_Y ;
  wire \$procmux$12763_CMP ;
  wire \$procmux$12765_Y ;
  wire \$procmux$12766_CMP ;
  wire \$procmux$12767_Y ;
  wire \$procmux$12768_CMP ;
  wire \$procmux$12770_Y ;
  wire \$procmux$12771_CMP ;
  wire \$procmux$12773_Y ;
  wire \$procmux$12774_CMP ;
  wire \$procmux$12775_Y ;
  wire \$procmux$12776_CMP ;
  wire \$procmux$12777_Y ;
  wire \$procmux$12778_CMP ;
  wire \$procmux$12779_Y ;
  wire \$procmux$12780_CMP ;
  wire \$procmux$12781_Y ;
  wire \$procmux$12782_CMP ;
  wire \$procmux$12785_Y ;
  wire \$procmux$12786_CMP ;
  wire \$procmux$12788_CMP ;
  wire \$procmux$12789_Y ;
  wire \$procmux$12790_CMP ;
  wire \$procmux$12793_Y ;
  wire \$procmux$12794_CMP ;
  wire \$procmux$12796_CMP ;
  wire \$procmux$12797_Y ;
  wire \$procmux$12798_CMP ;
  wire \$procmux$12801_Y ;
  wire \$procmux$12802_CMP ;
  wire \$procmux$12804_CMP ;
  wire \$procmux$12805_Y ;
  wire \$procmux$12806_CMP ;
  wire \$procmux$12809_Y ;
  wire \$procmux$12810_CMP ;
  wire \$procmux$12812_CMP ;
  wire \$procmux$12813_Y ;
  wire \$procmux$12814_CMP ;
  wire \$procmux$12817_Y ;
  wire \$procmux$12818_CMP ;
  wire \$procmux$12820_CMP ;
  wire \$procmux$12821_Y ;
  wire \$procmux$12822_CMP ;
  wire \$procmux$12828_Y ;
  wire \$procmux$12829_CMP ;
  wire \$procmux$12830_Y ;
  wire \$procmux$12831_CMP ;
  wire \$procmux$12832_Y ;
  wire \$procmux$12833_CMP ;
  wire \$procmux$12834_Y ;
  wire \$procmux$12835_CMP ;
  wire \$procmux$12841_Y ;
  wire \$procmux$12842_CMP ;
  wire \$procmux$12843_Y ;
  wire \$procmux$12844_CMP ;
  wire \$procmux$12845_Y ;
  wire \$procmux$12846_CMP ;
  wire \$procmux$12847_Y ;
  wire \$procmux$12848_CMP ;
  wire \$procmux$12854_Y ;
  wire \$procmux$12855_CMP ;
  wire \$procmux$12856_Y ;
  wire \$procmux$12857_CMP ;
  wire \$procmux$12858_Y ;
  wire \$procmux$12859_CMP ;
  wire \$procmux$12860_Y ;
  wire \$procmux$12861_CMP ;
  wire \$procmux$12864_Y ;
  wire \$procmux$12865_CMP ;
  wire \$procmux$12866_CMP ;
  wire \$procmux$12867_CMP ;
  wire \$procmux$12869_CMP ;
  wire \$procmux$12870_CMP ;
  wire \$procmux$12871_Y ;
  wire \$procmux$12872_CMP ;
  wire \$procmux$12873_Y ;
  wire \$procmux$12874_CMP ;
  wire \$procmux$12879_Y ;
  wire \$procmux$12880_CMP ;
  wire \$procmux$12881_Y ;
  wire \$procmux$12882_CMP ;
  wire \$procmux$12883_Y ;
  wire \$procmux$12884_CMP ;
  wire \$procmux$12887_Y ;
  wire \$procmux$12888_CMP ;
  wire \$procmux$12889_Y ;
  wire \$procmux$12890_CMP ;
  wire \$procmux$12891_Y ;
  wire \$procmux$12892_CMP ;
  wire \$procmux$12895_Y ;
  wire \$procmux$12896_CMP ;
  wire \$procmux$12898_CMP ;
  wire \$procmux$12899_Y ;
  wire \$procmux$12900_CMP ;
  wire \$procmux$12901_Y ;
  wire \$procmux$12902_CMP ;
  wire \$procmux$12906_Y ;
  wire \$procmux$12907_CMP ;
  wire \$procmux$12908_Y ;
  wire \$procmux$12909_CMP ;
  wire \$procmux$12910_Y ;
  wire \$procmux$12911_CMP ;
  wire \$procmux$12916_Y ;
  wire \$procmux$12917_CMP ;
  wire \$procmux$12918_Y ;
  wire \$procmux$12919_CMP ;
  wire \$procmux$12920_Y ;
  wire \$procmux$12921_CMP ;
  wire \$procmux$12928_Y ;
  wire \$procmux$12929_CMP ;
  wire \$procmux$12930_Y ;
  wire \$procmux$12931_CMP ;
  wire \$procmux$12932_Y ;
  wire \$procmux$12933_CMP ;
  wire \$procmux$12937_Y ;
  wire \$procmux$12938_CMP ;
  wire \$procmux$12939_Y ;
  wire \$procmux$12940_CMP ;
  wire \$procmux$12941_Y ;
  wire \$procmux$12942_CMP ;
  wire \$procmux$12947_Y ;
  wire \$procmux$12948_CMP ;
  wire \$procmux$12949_Y ;
  wire \$procmux$12950_CMP ;
  wire \$procmux$12951_Y ;
  wire \$procmux$12952_CMP ;
  wire \$procmux$12955_Y ;
  wire \$procmux$12956_CMP ;
  wire \$procmux$12957_Y ;
  wire \$procmux$12958_CMP ;
  wire \$procmux$12961_Y ;
  wire \$procmux$12962_CMP ;
  wire \$procmux$12963_Y ;
  wire \$procmux$12964_CMP ;
  wire \$procmux$12967_Y ;
  wire \$procmux$12968_CMP ;
  wire \$procmux$12969_Y ;
  wire \$procmux$12970_CMP ;
  wire \$procmux$12973_Y ;
  wire \$procmux$12974_CMP ;
  wire \$procmux$12975_Y ;
  wire \$procmux$12976_CMP ;
  wire \$procmux$12978_Y ;
  wire \$procmux$12979_CMP ;
  wire \$procmux$12981_Y ;
  wire \$procmux$12982_CMP ;
  wire \$procmux$12984_Y ;
  wire \$procmux$12985_CMP ;
  wire \$procmux$12987_Y ;
  wire \$procmux$12988_CMP ;
  wire \$procmux$12990_Y ;
  wire \$procmux$12991_CMP ;
  wire \$procmux$12993_Y ;
  wire \$procmux$12994_CMP ;
  wire \$procmux$12996_Y ;
  wire \$procmux$12997_CMP ;
  wire \$procmux$12999_Y ;
  wire \$procmux$13000_CMP ;
  wire \$procmux$13002_Y ;
  wire \$procmux$13003_CMP ;
  wire \$procmux$13004_Y ;
  wire \$procmux$13005_CMP ;
  wire \$procmux$13006_Y ;
  wire \$procmux$13007_CMP ;
  wire \$procmux$13008_Y ;
  wire \$procmux$13009_CMP ;
  wire \$procmux$13011_Y ;
  wire \$procmux$13012_CMP ;
  wire \$procmux$13014_Y ;
  wire \$procmux$13015_CMP ;
  wire \$procmux$13017_Y ;
  wire \$procmux$13018_CMP ;
  wire \$procmux$13022_Y ;
  wire \$procmux$13023_CMP ;
  wire \$procmux$13025_Y ;
  wire \$procmux$13026_CMP ;
  wire \$procmux$13027_Y ;
  wire \$procmux$13028_CMP ;
  wire [31:0] \$procmux$13029_Y ;
  wire \$procmux$13030_CMP ;
  wire \$procmux$13031_CMP ;
  wire [33:0] \$procmux$13032_Y ;
  wire \$procmux$13033_CMP ;
  wire [33:0] \$procmux$13034_Y ;
  wire \$procmux$13035_CMP ;
  wire [31:0] \$procmux$13038_Y ;
  wire \$procmux$13039_CMP ;
  wire \$procmux$13040_CMP ;
  wire \$procmux$13041_CMP ;
  wire \$procmux$13042_CMP ;
  wire \$procmux$13043_CMP ;
  wire \$procmux$13044_CMP ;
  wire [31:0] \$procmux$13045_Y ;
  wire \$procmux$13046_CMP ;
  wire \$procmux$13047_CMP ;
  wire \$procmux$13048_CMP ;
  wire \$procmux$13049_CMP ;
  /* src = "rtl/cve2/cve2_id_stage.sv:325.5-329.12" */
  wire [31:0] \$rf_wdata_id_o$49 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  wire \$rf_we_raw$144 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$rf_we_raw$152 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:682.11-684.14" */
  wire \$rf_we_raw$158 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$rf_we_raw$168 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$rf_we_raw$177 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$stall_alu$153 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$stall_alu$169 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$stall_alu$178 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$stall_branch$150 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  wire \$stall_branch$160 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$stall_branch$166 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$stall_branch$175 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$stall_jump$151 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  wire \$stall_jump$161 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$stall_jump$167 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$stall_jump$176 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  wire \$stall_multdiv$143 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$stall_multdiv$149 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  wire \$stall_multdiv$159 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$stall_multdiv$165 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  wire \$stall_multdiv$174 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:217.16" */
  wire alu_multicycle_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:215.16" */
  wire [1:0] alu_op_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:215.34" */
  wire [1:0] alu_op_a_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:216.16" */
  wire alu_op_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:216.34" */
  wire alu_op_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:242.16" */
  wire [31:0] alu_operand_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:62.37" */
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:243.16" */
  wire [31:0] alu_operand_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:63.37" */
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:214.16" */
  wire [6:0] alu_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:61.37" */
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:43.37" */
  input branch_decision_i;
  wire branch_decision_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:165.16" */
  wire branch_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:167.40" */
  wire branch_jump_set_done_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:167.16" */
  wire branch_jump_set_done_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.16" */
  wire branch_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.28" */
  wire branch_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.44" */
  wire branch_set_raw_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:563.9" */
  wire branch_set_raw_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:24.37" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:176.16" */
  wire controller_run;
  /* src = "rtl/cve2/cve2_id_stage.sv:81.37" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:105.37" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:91.37" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:89.37" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:83.37" */
  output csr_op_en_o;
  wire csr_op_en_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:82.37" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:240.16" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_id_stage.sv:126.37" */
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:87.37" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:86.37" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:88.37" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:85.37" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:84.37" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:28.37" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:237.16" */
  wire data_req_allowed;
  /* src = "rtl/cve2/cve2_id_stage.sv:116.37" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:117.37" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:120.37" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:121.37" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:115.37" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:118.37" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:119.37" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.27" */
  wire div_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:72.37" */
  output div_en_ex_o;
  wire div_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.16" */
  wire div_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:74.37" */
  output div_sel_ex_o;
  wire div_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:161.16" */
  wire dret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:159.16" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_id_stage.sv:162.16" */
  wire ecall_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:141.37" */
  output en_wb_o;
  wire en_wb_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:58.37" */
  input ex_valid_i;
  wire ex_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:49.37" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:48.37" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:27.37" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:182.16" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:606.22" */
  wire id_fsm_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:606.12" */
  wire id_fsm_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:40.37" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:51.37" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:92.37" */
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:158.16" */
  wire illegal_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:29.37" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:67.37" */
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:220.16" */
  wire [67:0] imd_val_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:68.37" */
  output [67:0] imd_val_q_ex_o;
  wire [67:0] imd_val_q_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:66.37" */
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:193.16" */
  wire [31:0] imm_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:222.16" */
  wire imm_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:194.16" */
  wire [31:0] imm_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:223.16" */
  wire [2:0] imm_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:223.31" */
  wire [2:0] imm_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:188.16" */
  wire [31:0] imm_b_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:186.16" */
  wire [31:0] imm_i_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:190.16" */
  wire [31:0] imm_j_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:187.16" */
  wire [31:0] imm_s_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:189.16" */
  wire [31:0] imm_u_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:175.16" */
  wire instr_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:174.16" */
  wire instr_executing;
  /* src = "rtl/cve2/cve2_id_stage.sv:173.16" */
  wire instr_executing_spec;
  /* src = "rtl/cve2/cve2_id_stage.sv:52.37" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:53.37" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:172.16" */
  wire instr_first_cycle;
  /* src = "rtl/cve2/cve2_id_stage.sv:38.37" */
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:152.37" */
  output instr_id_done_o;
  wire instr_id_done_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:36.37" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:142.37" */
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:34.37" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:35.37" */
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:33.37" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:37.37" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:39.37" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:32.37" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:108.37" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:106.37" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:107.37" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:168.16" */
  wire jump_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:170.16" */
  wire jump_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:169.16" */
  wire jump_set_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:170.26" */
  wire jump_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:101.37" */
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:102.37" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:111.37" */
  input lsu_load_err_i;
  wire lsu_load_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:236.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_id_stage.sv:236.25" */
  wire lsu_req_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:95.37" */
  output lsu_req_o;
  wire lsu_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:59.37" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:235.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_id_stage.sv:98.37" */
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:112.37" */
  input lsu_store_err_i;
  wire lsu_store_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:234.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:97.37" */
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:99.37" */
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:233.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_id_stage.sv:96.37" */
  output lsu_we_o;
  wire lsu_we_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:160.16" */
  wire mret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:226.28" */
  wire mult_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:71.37" */
  output mult_en_ex_o;
  wire mult_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:226.16" */
  wire mult_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:73.37" */
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:228.16" */
  wire multdiv_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:77.37" */
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:78.37" */
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:229.16" */
  wire [1:0] multdiv_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:75.37" */
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:230.16" */
  wire [1:0] multdiv_signed_mode;
  /* src = "rtl/cve2/cve2_id_stage.sv:76.37" */
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:183.16" */
  wire multicycle_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:109.37" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:55.37" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:47.37" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:46.37" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:146.37" */
  output perf_branch_o;
  wire perf_branch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:151.37" */
  output perf_div_wait_o;
  wire perf_div_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:148.37" */
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:145.37" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:147.37" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:150.37" */
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:90.37" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:125.37" */
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:129.37" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:131.37" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:210.16" */
  wire [31:0] rf_rdata_a_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:130.37" */
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:211.16" */
  wire [31:0] rf_rdata_b_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:132.37" */
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:200.16" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:201.16" */
  wire rf_ren_a_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:133.37" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:200.26" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:201.30" */
  wire rf_ren_b_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:134.37" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:137.37" */
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:138.37" */
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:198.16" */
  wire rf_wdata_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:199.16" */
  wire rf_we_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:139.37" */
  output rf_we_id_o;
  wire rf_we_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:199.27" */
  wire rf_we_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:25.37" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_id_stage.sv:218.16" */
  wire stall_alu;
  /* src = "rtl/cve2/cve2_id_stage.sv:179.16" */
  wire stall_branch;
  /* src = "rtl/cve2/cve2_id_stage.sv:181.16" */
  wire stall_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:180.16" */
  wire stall_jump;
  /* src = "rtl/cve2/cve2_id_stage.sv:177.16" */
  wire stall_mem;
  /* src = "rtl/cve2/cve2_id_stage.sv:178.16" */
  wire stall_multdiv;
  /* src = "rtl/cve2/cve2_id_stage.sv:122.37" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:272.15" */
  wire [1:0] unused_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:273.15" */
  wire [2:0] unused_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:748.11" */
  wire unused_data_req_done_ex;
  /* src = "rtl/cve2/cve2_id_stage.sv:163.16" */
  wire wfi_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:191.16" */
  wire [31:0] zimm_rs1_type;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_fetch_err_i),
    .Y(\$1 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(instr_fetch_err_i),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(instr_valid_i),
    .B(\$100 ),
    .Y(\$102 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(mult_en_dec),
    .B(div_en_dec),
    .Y(\$104 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(data_req_allowed),
    .B(lsu_req_dec),
    .Y(\$106 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(1'h0),
    .B(\$106 ),
    .S(instr_executing),
    .Y(\$auto$rtlil.cc:3092:Mux$841 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$108  (
    .A(1'h0),
    .B(mult_en_dec),
    .S(instr_executing),
    .Y(\$auto$rtlil.cc:3092:Mux$842 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$109  (
    .A(1'h0),
    .B(div_en_dec),
    .S(instr_executing),
    .Y(\$auto$rtlil.cc:3092:Mux$843 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(csr_access_o),
    .B(instr_executing),
    .Y(\$111 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(\$111 ),
    .B(instr_id_done_o),
    .Y(\$113 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$844 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(branch_set_raw),
    .B(jump_set_raw),
    .Y(\$118 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\$118 ),
    .B(branch_jump_set_done_q),
    .Y(\$120 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_valid_i),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$121  (
    .A(instr_valid_clear_o),
    .Y(\$122 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(\$120 ),
    .B(\$122 ),
    .Y(\$124 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$846 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(branch_jump_set_done_q),
    .Y(\$129 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(jump_set_raw),
    .B(\$129 ),
    .Y(\$131 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(branch_jump_set_done_q),
    .Y(\$133 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(branch_set_raw),
    .B(\$133 ),
    .Y(\$135 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$848 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(illegal_insn_o),
    .Y(\$15 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(ex_valid_i),
    .Y(\$142 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$146  (
    .A(1'h0),
    .B(1'h1),
    .S(branch_decision_i),
    .Y(\$auto$rtlil.cc:3092:Mux$850 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(rf_we_dec),
    .B(ex_valid_i),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(rf_ren_b_dec),
    .Y(\$19 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(stall_mem),
    .B(stall_multdiv),
    .Y(\$182 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(\$182 ),
    .B(stall_jump),
    .Y(\$184 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$184 ),
    .B(stall_branch),
    .Y(\$186 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(\$186 ),
    .B(stall_alu),
    .Y(\$188 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(stall_id),
    .Y(\$190 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(flush_id),
    .Y(\$192 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(\$190 ),
    .B(\$192 ),
    .Y(\$194 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$194 ),
    .B(instr_executing),
    .Y(\$196 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(id_fsm_q),
    .Y(\$198 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(instr_valid_i),
    .B(\$198 ),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(instr_valid_i),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$20  (
    .A(alu_op_a_mux_sel_dec),
    .B(2'h1),
    .S(lsu_addr_incr_req_i),
    .Y(\$auto$rtlil.cc:3092:Mux$831 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$201  (
    .A(ex_valid_i),
    .B(lsu_resp_valid_i),
    .S(lsu_req_dec),
    .Y(\$auto$rtlil.cc:3092:Mux$851 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(lsu_resp_valid_i),
    .Y(\$203 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(\$203 ),
    .B(instr_first_cycle),
    .Y(\$205 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(lsu_req_dec),
    .B(\$205 ),
    .Y(\$207 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(instr_valid_i),
    .B(\$207 ),
    .Y(\$209 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(alu_op_b_mux_sel_dec),
    .B(1'h1),
    .S(lsu_addr_incr_req_i),
    .Y(\$auto$rtlil.cc:3092:Mux$832 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(instr_fetch_err_i),
    .Y(\$211 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(instr_valid_i),
    .B(\$211 ),
    .Y(\$213 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(\$213 ),
    .B(controller_run),
    .Y(\$215 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$216  (
    .A(instr_executing),
    .B(lsu_req_dec),
    .Y(\$217 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A(lsu_resp_valid_i),
    .Y(\$219 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$22  (
    .A(imm_b_mux_sel_dec),
    .B(3'h6),
    .S(lsu_addr_incr_req_i),
    .Y(\$auto$rtlil.cc:3092:Mux$833 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(\$217 ),
    .B(\$219 ),
    .Y(\$221 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(ebrk_insn),
    .Y(\$223 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(ecall_insn_dec),
    .Y(\$225 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(\$223 ),
    .B(\$225 ),
    .Y(\$227 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(illegal_insn_dec),
    .Y(\$229 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(imm_a_mux_sel),
    .Y(\$24 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(\$227 ),
    .B(\$229 ),
    .Y(\$231 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(debug_mode_o),
    .Y(\$233 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(dret_insn_dec),
    .B(\$233 ),
    .Y(\$235 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(\$235 ),
    .Y(\$237 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$231 ),
    .B(\$237 ),
    .Y(\$239 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(illegal_csr_insn_i),
    .Y(\$241 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\$239 ),
    .B(\$241 ),
    .Y(\$243 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(instr_fetch_err_i),
    .Y(\$245 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(\$243 ),
    .B(\$245 ),
    .Y(\$247 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(stall_multdiv),
    .B(div_en_dec),
    .Y(\$249 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A(zimm_rs1_type),
    .B(32'd0),
    .S(imm_a_mux_sel),
    .Y(\$auto$rtlil.cc:3092:Mux$834 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$29  (
    .A(32'd4),
    .B(32'd2),
    .S(instr_is_compressed_i),
    .Y(\$auto$rtlil.cc:3092:Mux$835 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$33  (
    .A(rf_rdata_b_fwd),
    .B(imm_b),
    .S(\$32 ),
    .Y(\$auto$rtlil.cc:3092:Mux$836 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$837 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$839 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(illegal_insn_o),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(rf_we_raw),
    .B(instr_executing),
    .Y(\$43 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(illegal_csr_insn_i),
    .Y(\$45 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$43 ),
    .B(\$45 ),
    .Y(\$47 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(csr_op_o),
    .B(2'h1),
    .Y(\$54 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_op_o),
    .B(2'h2),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$52 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(instr_rdata_i[31:20]),
    .B(12'h300),
    .Y(\$62 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(instr_rdata_i[31:20]),
    .B(12'h304),
    .Y(\$64 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(\$62 ),
    .B(\$64 ),
    .Y(\$66 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(instr_rdata_i[31:20]),
    .B(12'h747),
    .Y(\$68 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$66 ),
    .B(\$68 ),
    .Y(\$70 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(instr_rdata_i[31:25]),
    .B(7'h1d),
    .Y(\$72 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\$70 ),
    .B(\$72 ),
    .Y(\$74 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(csr_op_o),
    .Y(\$79 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .B(rf_ren_a_dec),
    .Y(\$9 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(instr_rdata_i[31:20]),
    .B(12'h7b0),
    .Y(\$83 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(instr_rdata_i[31:20]),
    .B(12'h7b1),
    .Y(\$85 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(\$85 ),
    .Y(\$87 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(instr_rdata_i[31:20]),
    .B(12'h7b2),
    .Y(\$89 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$87 ),
    .B(\$89 ),
    .Y(\$91 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(instr_rdata_i[31:20]),
    .B(12'h7b3),
    .Y(\$93 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$91 ),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(illegal_insn_dec),
    .B(illegal_csr_insn_i),
    .Y(\$100 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:583.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_jump_set_done_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(branch_jump_set_done_d),
    .Q(branch_jump_set_done_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:565.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_set_raw_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(branch_set_raw_d),
    .Q(branch_set_raw_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:608.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$id_fsm_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$id_fsm_q$139 ),
    .Q(id_fsm_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:305.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$driver$imd_val_q[0]  (
    .AD(34'h000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$imd_val_q[67:34]$37 ),
    .Q(imd_val_q[67:34])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:305.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$driver$imd_val_q[1]  (
    .AD(34'h000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$imd_val_q[33:0]$41 ),
    .Q(imd_val_q[33:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12746  (
    .A(id_fsm_q),
    .B(1'h0),
    .S(\$procmux$12747_CMP ),
    .Y(\$procmux$12746_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12749  (
    .A(1'hx),
    .B(\$procmux$12746_Y ),
    .S(\$procmux$12750_CMP ),
    .Y(\$procmux$12749_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12751  (
    .A(1'hx),
    .B(\$procmux$12749_Y ),
    .S(\$procmux$12752_CMP ),
    .Y(\$procmux$12751_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12754  (
    .A(jump_in_dec),
    .B(1'h0),
    .S(\$procmux$12755_CMP ),
    .Y(\$procmux$12754_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12757  (
    .A(1'hx),
    .B(\$procmux$12754_Y ),
    .S(\$procmux$12758_CMP ),
    .Y(\$procmux$12757_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12759  (
    .A(1'hx),
    .B(\$procmux$12757_Y ),
    .S(\$procmux$12760_CMP ),
    .Y(\$procmux$12759_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12762  (
    .A(branch_in_dec),
    .B(1'h0),
    .S(\$procmux$12763_CMP ),
    .Y(\$procmux$12762_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12765  (
    .A(1'hx),
    .B(\$procmux$12762_Y ),
    .S(\$procmux$12766_CMP ),
    .Y(\$procmux$12765_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12767  (
    .A(1'hx),
    .B(\$procmux$12765_Y ),
    .S(\$procmux$12768_CMP ),
    .Y(\$procmux$12767_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12770  (
    .A(\$104 ),
    .B(1'h0),
    .S(\$procmux$12771_CMP ),
    .Y(\$procmux$12770_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12773  (
    .A(1'hx),
    .B(\$procmux$12770_Y ),
    .S(\$procmux$12774_CMP ),
    .Y(\$procmux$12773_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12775  (
    .A(1'hx),
    .B(\$procmux$12773_Y ),
    .S(\$procmux$12776_CMP ),
    .Y(\$procmux$12775_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:683.13-683.54|rtl/cve2/cve2_id_stage.sv:682.11-684.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12777  (
    .A(rf_we_dec),
    .B(\$157 ),
    .S(\$procmux$12778_CMP ),
    .Y(\$procmux$12777_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12779  (
    .A(1'hx),
    .B(\$procmux$12777_Y ),
    .S(\$procmux$12780_CMP ),
    .Y(\$procmux$12779_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12781  (
    .A(1'hx),
    .B(\$procmux$12779_Y ),
    .S(\$procmux$12782_CMP ),
    .Y(\$procmux$12781_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12785  (
    .A(1'hx),
    .B({ \$id_fsm_d$154 , \$id_fsm_d$162  }),
    .S({ \$procmux$12788_CMP , \$procmux$12786_CMP  }),
    .Y(\$procmux$12785_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12788_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12788_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12789  (
    .A(1'hx),
    .B(\$procmux$12785_Y ),
    .S(\$procmux$12790_CMP ),
    .Y(\$procmux$12789_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12793  (
    .A(1'hx),
    .B({ \$rf_we_raw$152 , \$rf_we_raw$158  }),
    .S({ \$procmux$12796_CMP , \$procmux$12794_CMP  }),
    .Y(\$procmux$12793_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12796_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12796_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12797  (
    .A(1'hx),
    .B(\$procmux$12793_Y ),
    .S(\$procmux$12798_CMP ),
    .Y(\$procmux$12797_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12801  (
    .A(1'hx),
    .B({ \$stall_jump$151 , \$stall_jump$161  }),
    .S({ \$procmux$12804_CMP , \$procmux$12802_CMP  }),
    .Y(\$procmux$12801_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12804_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12804_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12805  (
    .A(1'hx),
    .B(\$procmux$12801_Y ),
    .S(\$procmux$12806_CMP ),
    .Y(\$procmux$12805_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12809  (
    .A(1'hx),
    .B({ \$stall_branch$150 , \$stall_branch$160  }),
    .S({ \$procmux$12812_CMP , \$procmux$12810_CMP  }),
    .Y(\$procmux$12809_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12812_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12812_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12813  (
    .A(1'hx),
    .B(\$procmux$12809_Y ),
    .S(\$procmux$12814_CMP ),
    .Y(\$procmux$12813_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12817  (
    .A(1'hx),
    .B({ \$stall_multdiv$149 , \$stall_multdiv$159  }),
    .S({ \$procmux$12820_CMP , \$procmux$12818_CMP  }),
    .Y(\$procmux$12817_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12820_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12820_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12821  (
    .A(1'hx),
    .B(\$procmux$12817_Y ),
    .S(\$procmux$12822_CMP ),
    .Y(\$procmux$12821_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:644.32-650.18|rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12828  (
    .A(1'h1),
    .B(id_fsm_q),
    .S(ex_valid_i),
    .Y(\$procmux$12828_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12830  (
    .A(1'hx),
    .B(\$procmux$12828_Y ),
    .S(\$procmux$12831_CMP ),
    .Y(\$procmux$12830_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12832  (
    .A(\$procmux$12830_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12832_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12833_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12833_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12834  (
    .A(1'hx),
    .B(\$procmux$12832_Y ),
    .S(\$procmux$12835_CMP ),
    .Y(\$procmux$12834_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:644.32-650.18|rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12841  (
    .A(1'h0),
    .B(rf_we_dec),
    .S(ex_valid_i),
    .Y(\$procmux$12841_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12843  (
    .A(1'hx),
    .B(\$procmux$12841_Y ),
    .S(\$procmux$12844_CMP ),
    .Y(\$procmux$12843_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12845  (
    .A(\$procmux$12843_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12845_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12846_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12846_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12847  (
    .A(1'hx),
    .B(\$procmux$12845_Y ),
    .S(\$procmux$12848_CMP ),
    .Y(\$procmux$12847_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:644.32-650.18|rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12854  (
    .A(1'h1),
    .B(1'h0),
    .S(ex_valid_i),
    .Y(\$procmux$12854_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12856  (
    .A(1'hx),
    .B(\$procmux$12854_Y ),
    .S(\$procmux$12857_CMP ),
    .Y(\$procmux$12856_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12858  (
    .A(\$procmux$12856_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12858_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12859_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12859_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12860  (
    .A(1'hx),
    .B(\$procmux$12858_Y ),
    .S(\$procmux$12861_CMP ),
    .Y(\$procmux$12860_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$12864  (
    .A(1'h0),
    .B({ 1'h1, \$id_fsm_d$145 , \$auto$rtlil.cc:3092:Mux$850 , 2'h3 }),
    .S({ \$procmux$12870_CMP , \$procmux$12869_CMP , \$procmux$12867_CMP , \$procmux$12866_CMP , \$procmux$12865_CMP  }),
    .Y(\$procmux$12864_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12871  (
    .A(\$procmux$12864_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12871_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12872_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12872_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12873  (
    .A(1'hx),
    .B(\$procmux$12871_Y ),
    .S(\$procmux$12874_CMP ),
    .Y(\$procmux$12873_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:652.28-663.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12879  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12880_CMP ),
    .Y(\$procmux$12879_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12881  (
    .A(\$procmux$12879_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12881_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12882_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12882_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12883  (
    .A(1'hx),
    .B(\$procmux$12881_Y ),
    .S(\$procmux$12884_CMP ),
    .Y(\$procmux$12883_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12887  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12888_CMP ),
    .Y(\$procmux$12887_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12889  (
    .A(\$procmux$12887_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12889_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12890_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12890_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12891  (
    .A(1'hx),
    .B(\$procmux$12889_Y ),
    .S(\$procmux$12892_CMP ),
    .Y(\$procmux$12891_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12895  (
    .A(rf_we_dec),
    .B({ \$rf_we_raw$144 , 1'h0 }),
    .S({ \$procmux$12898_CMP , \$procmux$12896_CMP  }),
    .Y(\$procmux$12895_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12899  (
    .A(\$procmux$12895_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12899_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12900_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12900_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12901  (
    .A(1'hx),
    .B(\$procmux$12899_Y ),
    .S(\$procmux$12902_CMP ),
    .Y(\$procmux$12901_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:664.26-669.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12906  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12907_CMP ),
    .Y(\$procmux$12906_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12908  (
    .A(\$procmux$12906_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12908_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12909_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12909_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12910  (
    .A(1'hx),
    .B(\$procmux$12908_Y ),
    .S(\$procmux$12911_CMP ),
    .Y(\$procmux$12910_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:652.28-663.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12916  (
    .A(1'h0),
    .B(branch_decision_i),
    .S(\$procmux$12917_CMP ),
    .Y(\$procmux$12916_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12918  (
    .A(\$procmux$12916_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12918_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12919_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12919_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12920  (
    .A(1'hx),
    .B(\$procmux$12918_Y ),
    .S(\$procmux$12921_CMP ),
    .Y(\$procmux$12920_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12928  (
    .A(1'h0),
    .B(\$stall_multdiv$143 ),
    .S(\$procmux$12929_CMP ),
    .Y(\$procmux$12928_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12930  (
    .A(\$procmux$12928_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12930_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12931_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12931_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12932  (
    .A(1'hx),
    .B(\$procmux$12930_Y ),
    .S(\$procmux$12933_CMP ),
    .Y(\$procmux$12932_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:664.26-669.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12937  (
    .A(1'h0),
    .B(jump_set_dec),
    .S(\$procmux$12938_CMP ),
    .Y(\$procmux$12937_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12939  (
    .A(\$procmux$12937_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12939_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12940_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12940_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12941  (
    .A(1'hx),
    .B(\$procmux$12939_Y ),
    .S(\$procmux$12942_CMP ),
    .Y(\$procmux$12941_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:652.28-663.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12947  (
    .A(1'h0),
    .B(branch_decision_i),
    .S(\$procmux$12948_CMP ),
    .Y(\$procmux$12947_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12949  (
    .A(\$procmux$12947_Y ),
    .B(1'hx),
    .S(id_fsm_q),
    .Y(\$procmux$12949_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12950_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12950_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12951  (
    .A(1'hx),
    .B(\$procmux$12949_Y ),
    .S(\$procmux$12952_CMP ),
    .Y(\$procmux$12951_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12955  (
    .A(\$perf_branch_o$155 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$12955_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12956_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12956_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12957  (
    .A(1'hx),
    .B(\$procmux$12955_Y ),
    .S(\$procmux$12958_CMP ),
    .Y(\$procmux$12957_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12961  (
    .A(\$stall_alu$153 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$12961_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12962_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12962_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12963  (
    .A(1'hx),
    .B(\$procmux$12961_Y ),
    .S(\$procmux$12964_CMP ),
    .Y(\$procmux$12963_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12967  (
    .A(\$jump_set_raw$148 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$12967_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12968_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12968_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12969  (
    .A(1'hx),
    .B(\$procmux$12967_Y ),
    .S(\$procmux$12970_CMP ),
    .Y(\$procmux$12969_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12973  (
    .A(\$branch_set_raw_d$147 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$12973_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12974_CMP0  (
    .A(id_fsm_q),
    .Y(\$procmux$12974_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12975  (
    .A(1'hx),
    .B(\$procmux$12973_Y ),
    .S(\$procmux$12976_CMP ),
    .Y(\$procmux$12975_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12978  (
    .A(1'h0),
    .B(\$perf_branch_o$171 ),
    .S(\$procmux$12979_CMP ),
    .Y(\$procmux$12978_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12981  (
    .A(id_fsm_q),
    .B(\$id_fsm_d$170 ),
    .S(\$procmux$12982_CMP ),
    .Y(\$procmux$12981_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12984  (
    .A(1'h0),
    .B(\$stall_alu$169 ),
    .S(\$procmux$12985_CMP ),
    .Y(\$procmux$12984_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12987  (
    .A(rf_we_dec),
    .B(\$rf_we_raw$168 ),
    .S(\$procmux$12988_CMP ),
    .Y(\$procmux$12987_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12990  (
    .A(1'h0),
    .B(\$stall_jump$167 ),
    .S(\$procmux$12991_CMP ),
    .Y(\$procmux$12990_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12993  (
    .A(1'h0),
    .B(\$stall_branch$166 ),
    .S(\$procmux$12994_CMP ),
    .Y(\$procmux$12993_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12996  (
    .A(1'h0),
    .B(\$stall_multdiv$165 ),
    .S(\$procmux$12997_CMP ),
    .Y(\$procmux$12996_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12999  (
    .A(1'h0),
    .B(\$jump_set_raw$164 ),
    .S(\$procmux$13000_CMP ),
    .Y(\$procmux$12999_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13002  (
    .A(1'h0),
    .B(\$branch_set_raw_d$163 ),
    .S(\$procmux$13003_CMP ),
    .Y(\$procmux$13002_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:612.7-612.28|rtl/cve2/cve2_id_stage.sv:611.14-613.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13004  (
    .A(id_fsm_q),
    .B(\$id_fsm_d$179 ),
    .S(\$procmux$13005_CMP ),
    .Y(\$procmux$13004_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:435.9-435.31|rtl/cve2/cve2_id_stage.sv:431.7-436.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13006  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13007_CMP ),
    .Y(\$procmux$13006_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:431.7-436.10|rtl/cve2/cve2_id_stage.sv:430.14-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13008  (
    .A(1'hx),
    .B(\$procmux$13006_Y ),
    .S(\$procmux$13009_CMP ),
    .Y(\$procmux$13008_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13011  (
    .A(\$procmux$13008_Y ),
    .B(1'hx),
    .S(\$procmux$13012_CMP ),
    .Y(\$procmux$13011_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:431.7-436.10|rtl/cve2/cve2_id_stage.sv:430.14-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13014  (
    .A(1'h0),
    .B(\$csr_pipe_flush$96 ),
    .S(\$procmux$13015_CMP ),
    .Y(\$procmux$13014_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13017  (
    .A(\$procmux$13014_Y ),
    .B(1'hx),
    .S(\$procmux$13018_CMP ),
    .Y(\$procmux$13017_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13022  (
    .A(\$csr_pipe_flush$97 ),
    .B(\$csr_pipe_flush$75 ),
    .S(\$procmux$13023_CMP ),
    .Y(\$procmux$13022_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:428.9-428.31|rtl/cve2/cve2_id_stage.sv:423.7-429.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13025  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13026_CMP ),
    .Y(\$procmux$13025_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13027  (
    .A(1'hx),
    .B(\$procmux$13025_Y ),
    .S(\$procmux$13028_CMP ),
    .Y(\$procmux$13027_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:327.18-327.46|rtl/cve2/cve2_id_stage.sv:325.5-329.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$13029  (
    .A(32'hxxxxxxxx),
    .B({ result_ex_i, csr_rdata_i }),
    .S({ \$procmux$13031_CMP , \$procmux$13030_CMP  }),
    .Y(\$procmux$13029_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:326.18-326.46|rtl/cve2/cve2_id_stage.sv:325.5-329.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13031_CMP0  (
    .A(rf_wdata_sel),
    .Y(\$procmux$13031_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:309.9-309.43|rtl/cve2/cve2_id_stage.sv:308.16-310.10" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$13032  (
    .A(imd_val_q[33:0]),
    .B(imd_val_d_ex_i[33:0]),
    .S(\$procmux$13033_CMP ),
    .Y(\$procmux$13032_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:309.9-309.43|rtl/cve2/cve2_id_stage.sv:308.16-310.10" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$13034  (
    .A(imd_val_q[67:34]),
    .B(imd_val_d_ex_i[67:34]),
    .S(\$procmux$13035_CMP ),
    .Y(\$procmux$13034_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$13038  (
    .A(32'd4),
    .B({ imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, \$auto$rtlil.cc:3092:Mux$835  }),
    .S({ \$procmux$13044_CMP , \$procmux$13043_CMP , \$procmux$13042_CMP , \$procmux$13041_CMP , \$procmux$13040_CMP , \$procmux$13039_CMP  }),
    .Y(\$procmux$13038_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13039_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h5),
    .Y(\$procmux$13039_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:282.24-282.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13040_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h4),
    .Y(\$procmux$13040_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:281.24-281.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13041_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h3),
    .Y(\$procmux$13041_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:280.24-280.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13042_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h2),
    .Y(\$procmux$13042_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:279.24-279.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13043_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h1),
    .Y(\$procmux$13043_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:278.24-278.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13044_CMP0  (
    .A(imm_b_mux_sel),
    .Y(\$procmux$13044_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$13045  (
    .A(32'hxxxxxxxx),
    .B({ rf_rdata_a_i, lsu_addr_last_i, pc_id_i, \$auto$rtlil.cc:3092:Mux$834  }),
    .S({ \$procmux$13049_CMP , \$procmux$13048_CMP , \$procmux$13047_CMP , \$procmux$13046_CMP  }),
    .Y(\$procmux$13045_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13046_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h3),
    .Y(\$procmux$13046_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:266.20-266.44|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13047_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h2),
    .Y(\$procmux$13047_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:265.20-265.52|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13048_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h1),
    .Y(\$procmux$13048_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:264.20-264.51|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13049_CMP0  (
    .A(alu_op_a_mux_sel),
    .Y(\$procmux$13049_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:447.5" */
  \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(wfi_insn_dec)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:340.5" */
  \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext),
    .data_type_o(lsu_type),
    .data_we_o(lsu_we),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(instr_first_cycle),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator),
    .multdiv_signed_mode_o(multdiv_signed_mode),
    .rf_raddr_a_o(rf_raddr_a_o),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o(rf_waddr_id_o),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(wfi_insn_dec),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  assign rf_ren_a = \$9 ;
  assign rf_ren_b = \$19 ;
  assign rf_ren_a_o = rf_ren_a;
  assign rf_ren_b_o = rf_ren_b;
  assign alu_op_a_mux_sel = \$auto$rtlil.cc:3092:Mux$831 ;
  assign alu_op_b_mux_sel = \$auto$rtlil.cc:3092:Mux$832 ;
  assign imm_b_mux_sel = \$auto$rtlil.cc:3092:Mux$833 ;
  assign imm_a = \$auto$rtlil.cc:3092:Mux$834 ;
  assign alu_operand_a = \$alu_operand_a$27 ;
  assign imm_b = \$imm_b$30 ;
  assign alu_operand_b = \$auto$rtlil.cc:3092:Mux$836 ;
  assign imd_val_q_ex_o = imd_val_q;
  assign rf_we_id_o = \$47 ;
  assign rf_wdata_id_o = \$rf_wdata_id_o$49 ;
  assign csr_pipe_flush = \$csr_pipe_flush$98 ;
  assign illegal_insn_o = \$102 ;
  assign multdiv_en_dec = \$104 ;
  assign lsu_req = \$auto$rtlil.cc:3092:Mux$841 ;
  assign mult_en_id = \$auto$rtlil.cc:3092:Mux$842 ;
  assign div_en_id = \$auto$rtlil.cc:3092:Mux$843 ;
  assign lsu_req_o = lsu_req;
  assign lsu_we_o = lsu_we;
  assign lsu_type_o = lsu_type;
  assign lsu_sign_ext_o = lsu_sign_ext;
  assign lsu_wdata_o = rf_rdata_b_fwd;
  assign csr_op_en_o = \$113 ;
  assign alu_operator_ex_o = alu_operator;
  assign alu_operand_a_ex_o = alu_operand_a;
  assign alu_operand_b_ex_o = alu_operand_b;
  assign mult_en_ex_o = mult_en_id;
  assign div_en_ex_o = div_en_id;
  assign multdiv_operator_ex_o = multdiv_operator;
  assign multdiv_signed_mode_ex_o = multdiv_signed_mode;
  assign multdiv_operand_a_ex_o = rf_rdata_a_fwd;
  assign multdiv_operand_b_ex_o = rf_rdata_b_fwd;
  assign branch_set_raw = branch_set_raw_q;
  assign branch_jump_set_done_d = \$124 ;
  assign jump_set = \$131 ;
  assign branch_set = \$135 ;
  assign branch_set_raw_d = \$branch_set_raw_d$172 ;
  assign jump_set_raw = \$jump_set_raw$173 ;
  assign stall_multdiv = \$stall_multdiv$174 ;
  assign stall_branch = \$stall_branch$175 ;
  assign stall_jump = \$stall_jump$176 ;
  assign rf_we_raw = \$rf_we_raw$177 ;
  assign stall_alu = \$stall_alu$178 ;
  assign id_fsm_d = \$id_fsm_d$179 ;
  assign perf_branch_o = \$perf_branch_o$180 ;
  assign stall_id = \$188 ;
  assign instr_done = \$196 ;
  assign instr_first_cycle = \$200 ;
  assign instr_first_cycle_id_o = instr_first_cycle;
  assign multicycle_done = \$auto$rtlil.cc:3092:Mux$851 ;
  assign data_req_allowed = instr_first_cycle;
  assign stall_mem = \$209 ;
  assign instr_executing_spec = \$215 ;
  assign instr_executing = instr_executing_spec;
  assign rf_rdata_a_fwd = rf_rdata_a_i;
  assign rf_rdata_b_fwd = rf_rdata_b_i;
  assign perf_dside_wait_o = \$221 ;
  assign instr_id_done_o = instr_done;
  assign instr_perf_count_id_o = \$247 ;
  assign en_wb_o = instr_done;
  assign perf_wfi_wait_o = wfi_insn_dec;
  assign perf_div_wait_o = \$249 ;
  assign \$procmux$12747_CMP  = multicycle_done;
  assign \$procmux$12750_CMP  = id_fsm_q;
  assign \$procmux$12752_CMP  = instr_executing_spec;
  assign \$id_fsm_d$162  = \$procmux$12751_Y ;
  assign \$procmux$12755_CMP  = multicycle_done;
  assign \$procmux$12758_CMP  = id_fsm_q;
  assign \$procmux$12760_CMP  = instr_executing_spec;
  assign \$stall_jump$161  = \$procmux$12759_Y ;
  assign \$procmux$12763_CMP  = multicycle_done;
  assign \$procmux$12766_CMP  = id_fsm_q;
  assign \$procmux$12768_CMP  = instr_executing_spec;
  assign \$stall_branch$160  = \$procmux$12767_Y ;
  assign \$procmux$12771_CMP  = multicycle_done;
  assign \$procmux$12774_CMP  = id_fsm_q;
  assign \$procmux$12776_CMP  = instr_executing_spec;
  assign \$stall_multdiv$159  = \$procmux$12775_Y ;
  assign \$procmux$12778_CMP  = multdiv_en_dec;
  assign \$procmux$12780_CMP  = id_fsm_q;
  assign \$procmux$12782_CMP  = instr_executing_spec;
  assign \$rf_we_raw$158  = \$procmux$12781_Y ;
  assign \$procmux$12786_CMP  = id_fsm_q;
  assign \$procmux$12790_CMP  = instr_executing_spec;
  assign \$id_fsm_d$170  = \$procmux$12789_Y ;
  assign \$procmux$12794_CMP  = id_fsm_q;
  assign \$procmux$12798_CMP  = instr_executing_spec;
  assign \$rf_we_raw$168  = \$procmux$12797_Y ;
  assign \$procmux$12802_CMP  = id_fsm_q;
  assign \$procmux$12806_CMP  = instr_executing_spec;
  assign \$stall_jump$167  = \$procmux$12805_Y ;
  assign \$procmux$12810_CMP  = id_fsm_q;
  assign \$procmux$12814_CMP  = instr_executing_spec;
  assign \$stall_branch$166  = \$procmux$12813_Y ;
  assign \$procmux$12818_CMP  = id_fsm_q;
  assign \$procmux$12822_CMP  = instr_executing_spec;
  assign \$stall_multdiv$165  = \$procmux$12821_Y ;
  assign \$procmux$12829_CMP  = \$142 ;
  assign \$procmux$12835_CMP  = instr_executing_spec;
  assign \$id_fsm_d$145  = \$procmux$12834_Y ;
  assign \$procmux$12842_CMP  = \$142 ;
  assign \$procmux$12848_CMP  = instr_executing_spec;
  assign \$rf_we_raw$144  = \$procmux$12847_Y ;
  assign \$procmux$12855_CMP  = \$142 ;
  assign \$procmux$12861_CMP  = instr_executing_spec;
  assign \$stall_multdiv$143  = \$procmux$12860_Y ;
  assign \$procmux$12874_CMP  = instr_executing_spec;
  assign \$id_fsm_d$154  = \$procmux$12873_Y ;
  assign \$procmux$12884_CMP  = instr_executing_spec;
  assign \$perf_branch_o$155  = \$procmux$12883_Y ;
  assign \$procmux$12892_CMP  = instr_executing_spec;
  assign \$stall_alu$153  = \$procmux$12891_Y ;
  assign \$procmux$12902_CMP  = instr_executing_spec;
  assign \$rf_we_raw$152  = \$procmux$12901_Y ;
  assign \$procmux$12911_CMP  = instr_executing_spec;
  assign \$stall_jump$151  = \$procmux$12910_Y ;
  assign \$procmux$12921_CMP  = instr_executing_spec;
  assign \$stall_branch$150  = \$procmux$12920_Y ;
  assign \$procmux$12933_CMP  = instr_executing_spec;
  assign \$stall_multdiv$149  = \$procmux$12932_Y ;
  assign \$procmux$12942_CMP  = instr_executing_spec;
  assign \$jump_set_raw$148  = \$procmux$12941_Y ;
  assign \$procmux$12952_CMP  = instr_executing_spec;
  assign \$branch_set_raw_d$147  = \$procmux$12951_Y ;
  assign \$procmux$12958_CMP  = instr_executing_spec;
  assign \$perf_branch_o$171  = \$procmux$12957_Y ;
  assign \$procmux$12964_CMP  = instr_executing_spec;
  assign \$stall_alu$169  = \$procmux$12963_Y ;
  assign \$procmux$12970_CMP  = instr_executing_spec;
  assign \$jump_set_raw$164  = \$procmux$12969_Y ;
  assign \$procmux$12976_CMP  = instr_executing_spec;
  assign \$branch_set_raw_d$163  = \$procmux$12975_Y ;
  assign \$procmux$12979_CMP  = instr_executing_spec;
  assign \$perf_branch_o$180  = \$procmux$12978_Y ;
  assign \$procmux$12982_CMP  = instr_executing_spec;
  assign \$id_fsm_d$179  = \$procmux$12981_Y ;
  assign \$procmux$12985_CMP  = instr_executing_spec;
  assign \$stall_alu$178  = \$procmux$12984_Y ;
  assign \$procmux$12988_CMP  = instr_executing_spec;
  assign \$rf_we_raw$177  = \$procmux$12987_Y ;
  assign \$procmux$12991_CMP  = instr_executing_spec;
  assign \$stall_jump$176  = \$procmux$12990_Y ;
  assign \$procmux$12994_CMP  = instr_executing_spec;
  assign \$stall_branch$175  = \$procmux$12993_Y ;
  assign \$procmux$12997_CMP  = instr_executing_spec;
  assign \$stall_multdiv$174  = \$procmux$12996_Y ;
  assign \$procmux$13000_CMP  = instr_executing_spec;
  assign \$jump_set_raw$173  = \$procmux$12999_Y ;
  assign \$procmux$13003_CMP  = instr_executing_spec;
  assign \$branch_set_raw_d$172  = \$procmux$13002_Y ;
  assign \$procmux$13005_CMP  = instr_executing;
  assign \$id_fsm_q$139  = \$procmux$13004_Y ;
  assign \$procmux$13007_CMP  = \$95 ;
  assign \$procmux$13009_CMP  = \$81 ;
  assign \$procmux$13012_CMP  = \$60 ;
  assign \$csr_pipe_flush$96  = \$procmux$13011_Y ;
  assign \$procmux$13015_CMP  = \$81 ;
  assign \$procmux$13018_CMP  = \$60 ;
  assign \$csr_pipe_flush$97  = \$procmux$13017_Y ;
  assign \$procmux$13023_CMP  = \$60 ;
  assign \$csr_pipe_flush$98  = \$procmux$13022_Y ;
  assign \$procmux$13026_CMP  = \$74 ;
  assign \$procmux$13028_CMP  = \$60 ;
  assign \$csr_pipe_flush$75  = \$procmux$13027_Y ;
  assign \$procmux$13030_CMP  = rf_wdata_sel;
  assign \$rf_wdata_id_o$49  = \$procmux$13029_Y ;
  assign \$procmux$13033_CMP  = imd_val_we_ex_i[1];
  assign \$imd_val_q[33:0]$41  = \$procmux$13032_Y ;
  assign \$procmux$13035_CMP  = imd_val_we_ex_i[0];
  assign \$imd_val_q[67:34]$37  = \$procmux$13034_Y ;
  assign \$imm_b$30  = \$procmux$13038_Y ;
  assign \$alu_operand_a$27  = \$procmux$13045_Y ;
  assign \$procmux$12857_CMP  = \$104 ;
  assign \$procmux$12929_CMP  = \$104 ;
  assign \$procmux$12907_CMP  = jump_in_dec;
  assign \$procmux$12917_CMP  = branch_in_dec;
  assign \$procmux$12888_CMP  = alu_multicycle_dec;
  assign \$52  = csr_op_en_o;
  assign \$77  = csr_op_en_o;
  assign \$32  = alu_op_b_mux_sel;
  assign \$auto$rtlil.cc:2965:LogicNot$840  = rst_ni;
  assign \$procmux$12844_CMP  = \$104 ;
  assign \$procmux$12896_CMP  = alu_multicycle_dec;
  assign \$procmux$12898_CMP  = \$104 ;
  assign \$auto$rtlil.cc:2965:LogicNot$845  = rst_ni;
  assign \$procmux$12938_CMP  = jump_in_dec;
  assign \$auto$rtlil.cc:2965:LogicNot$847  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$849  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$838  = rst_ni;
  assign \$procmux$12831_CMP  = \$104 ;
  assign \$procmux$12865_CMP  = alu_multicycle_dec;
  assign \$procmux$12866_CMP  = jump_in_dec;
  assign \$procmux$12867_CMP  = branch_in_dec;
  assign \$procmux$12869_CMP  = \$104 ;
  assign \$procmux$12870_CMP  = lsu_req_dec;
  assign \$procmux$12880_CMP  = branch_in_dec;
  assign \$procmux$12948_CMP  = branch_in_dec;
endmodule

/* src = "rtl/cve2/cve2_if_stage.sv:15.8" */
module \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, exc_cause, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$827 ;
  wire \$auto$rtlil.cc:2965:LogicNot$828 ;
  wire \$auto$rtlil.cc:2965:LogicNot$829 ;
  wire \$auto$rtlil.cc:2965:LogicNot$830 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  wire [31:0] \$exc_pc$1 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  wire [31:0] \$fetch_addr_n$3 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire \$illegal_c_insn_id_o$60 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire \$instr_fetch_err_o$58 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire \$instr_fetch_err_plus2_o$59 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire \$instr_is_compressed_id_o$57 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire [31:0] \$instr_rdata_alu_id_o$55 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire [15:0] \$instr_rdata_c_id_o$56 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire [31:0] \$instr_rdata_id_o$54 ;
  /* src = "rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  wire [31:0] \$pc_id_o$61 ;
  wire [31:0] \$procmux$13050_Y ;
  wire \$procmux$13051_CMP ;
  wire \$procmux$13052_Y ;
  wire \$procmux$13053_CMP ;
  wire \$procmux$13054_Y ;
  wire \$procmux$13055_CMP ;
  wire \$procmux$13056_Y ;
  wire \$procmux$13057_CMP ;
  wire \$procmux$13058_Y ;
  wire \$procmux$13059_CMP ;
  wire [15:0] \$procmux$13060_Y ;
  wire \$procmux$13061_CMP ;
  wire [31:0] \$procmux$13062_Y ;
  wire \$procmux$13063_CMP ;
  wire [31:0] \$procmux$13064_Y ;
  wire \$procmux$13065_CMP ;
  wire [31:0] \$procmux$13067_Y ;
  wire \$procmux$13068_CMP ;
  wire \$procmux$13069_CMP ;
  wire \$procmux$13070_CMP ;
  wire \$procmux$13071_CMP ;
  wire [31:0] \$procmux$13072_Y ;
  wire \$procmux$13073_CMP ;
  wire \$procmux$13074_CMP ;
  wire \$procmux$13075_CMP ;
  wire \$procmux$13076_CMP ;
  /* src = "rtl/cve2/cve2_if_stage.sv:22.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:83.22" */
  wire branch_req;
  /* src = "rtl/cve2/cve2_if_stage.sv:61.39" */
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:19.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:66.39" */
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:64.39" */
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:68.39" */
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:69.39" */
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:58.39" */
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_if_stage.sv:102.22" */
  wire [31:0] exc_pc;
  /* src = "rtl/cve2/cve2_if_stage.sv:57.39" */
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:90.22" */
  wire [31:0] fetch_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:84.22" */
  wire [31:0] fetch_addr_n;
  /* src = "rtl/cve2/cve2_if_stage.sv:91.22" */
  wire fetch_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:92.22" */
  wire fetch_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:89.22" */
  wire [31:0] fetch_rdata;
  /* src = "rtl/cve2/cve2_if_stage.sv:88.22" */
  wire fetch_ready;
  /* src = "rtl/cve2/cve2_if_stage.sv:87.22" */
  wire fetch_valid;
  /* src = "rtl/cve2/cve2_if_stage.sv:72.39" */
  input id_in_ready_i;
  wire id_in_ready_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:75.39" */
  output if_busy_o;
  wire if_busy_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:107.22" */
  wire if_id_pipe_reg_we;
  /* src = "rtl/cve2/cve2_if_stage.sv:99.22" */
  wire if_instr_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:100.22" */
  wire if_instr_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:98.22" */
  wire if_instr_pmp_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:95.22" */
  wire illegal_c_insn;
  /* src = "rtl/cve2/cve2_if_stage.sv:46.39" */
  output illegal_c_insn_id_o;
  wire illegal_c_insn_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:27.39" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:94.22" */
  wire [31:0] instr_decompressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:31.39" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:44.39" */
  output instr_fetch_err_o;
  wire instr_fetch_err_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:45.39" */
  output instr_fetch_err_plus2_o;
  wire instr_fetch_err_plus2_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:28.39" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:96.22" */
  wire instr_is_compressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:42.39" */
  output instr_is_compressed_id_o;
  wire instr_is_compressed_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.22" */
  wire instr_new_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:35.39" */
  output instr_new_id_o;
  wire instr_new_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.38" */
  wire instr_new_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:37.39" */
  output [31:0] instr_rdata_alu_id_o;
  wire [31:0] instr_rdata_alu_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:39.39" */
  output [15:0] instr_rdata_c_id_o;
  wire [15:0] instr_rdata_c_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:30.39" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:36.39" */
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:26.39" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:29.39" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:54.39" */
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.22" */
  wire instr_valid_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:34.39" */
  output instr_valid_id_o;
  wire instr_valid_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.40" */
  wire instr_valid_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:104.22" */
  wire [6:0] irq_id;
  /* src = "rtl/cve2/cve2_if_stage.sv:49.39" */
  output [31:0] pc_id_o;
  wire [31:0] pc_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:48.39" */
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:56.39" */
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:109.22" */
  wire [2:0] pc_mux_internal;
  /* src = "rtl/cve2/cve2_if_stage.sv:55.39" */
  input pc_set_i;
  wire pc_set_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:50.39" */
  input pmp_err_if_i;
  wire pmp_err_if_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:51.39" */
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:82.22" */
  wire prefetch_busy;
  /* src = "rtl/cve2/cve2_if_stage.sv:23.40" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:20.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_if_stage.sv:111.22" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:112.22" */
  wire [7:0] unused_csr_mtvec;
  /* src = "rtl/cve2/cve2_if_stage.sv:85.22" */
  wire unused_fetch_addr_n0;
  /* src = "rtl/cve2/cve2_if_stage.sv:105.22" */
  wire unused_irq_bit;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(fetch_addr[2]),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11 ),
    .B(pmp_err_if_plus2_i),
    .Y(\$13 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(pmp_err_if_i),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(fetch_err),
    .B(if_instr_pmp_err),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(instr_is_compressed),
    .Y(\$19 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(fetch_addr[2]),
    .B(\$19 ),
    .Y(\$21 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21 ),
    .B(pmp_err_if_plus2_i),
    .Y(\$23 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$23 ),
    .B(fetch_err_plus2),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(pmp_err_if_i),
    .Y(\$27 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$25 ),
    .B(\$27 ),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(fetch_err),
    .Y(\$31 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(fetch_valid),
    .B(\$31 ),
    .Y(\$33 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(fetch_valid),
    .B(id_in_ready_i),
    .Y(\$35 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(pc_set_i),
    .Y(\$37 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$35 ),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(pc_mux_i),
    .Y(\$5 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(instr_valid_clear_i),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(instr_valid_id_q),
    .B(\$41 ),
    .Y(\$43 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$39 ),
    .B(\$43 ),
    .Y(\$45 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(fetch_valid),
    .B(id_in_ready_i),
    .Y(\$47 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$827 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$829 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5 ),
    .B(pc_set_i),
    .Y(\$7 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(instr_is_compressed),
    .Y(\$9 )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$illegal_c_insn_id_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$illegal_c_insn_id_o$60 ),
    .Q(illegal_c_insn_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_fetch_err_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_fetch_err_o$58 ),
    .Q(instr_fetch_err_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_fetch_err_plus2_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_fetch_err_plus2_o$59 ),
    .Q(instr_fetch_err_plus2_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_is_compressed_id_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_is_compressed_id_o$57 ),
    .Q(instr_is_compressed_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_new_id_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(instr_new_id_d),
    .Q(instr_new_id_q)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$instr_rdata_alu_id_o  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_rdata_alu_id_o$55 ),
    .Q(instr_rdata_alu_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$driver$instr_rdata_c_id_o  (
    .AD(16'h0000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_rdata_c_id_o$56 ),
    .Q(instr_rdata_c_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$instr_rdata_id_o  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$instr_rdata_id_o$54 ),
    .Q(instr_rdata_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_valid_id_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(instr_valid_id_d),
    .Q(instr_valid_id_q)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$pc_id_o  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$pc_id_o$61 ),
    .Q(pc_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13050  (
    .A(pc_id_o),
    .B(fetch_addr),
    .S(\$procmux$13051_CMP ),
    .Y(\$procmux$13050_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13052  (
    .A(illegal_c_insn_id_o),
    .B(illegal_c_insn),
    .S(\$procmux$13053_CMP ),
    .Y(\$procmux$13052_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13054  (
    .A(instr_fetch_err_plus2_o),
    .B(\$29 ),
    .S(\$procmux$13055_CMP ),
    .Y(\$procmux$13054_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13056  (
    .A(instr_fetch_err_o),
    .B(\$17 ),
    .S(\$procmux$13057_CMP ),
    .Y(\$procmux$13056_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13058  (
    .A(instr_is_compressed_id_o),
    .B(instr_is_compressed),
    .S(\$procmux$13059_CMP ),
    .Y(\$procmux$13058_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$13060  (
    .A(instr_rdata_c_id_o),
    .B(fetch_rdata[15:0]),
    .S(\$procmux$13061_CMP ),
    .Y(\$procmux$13060_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13062  (
    .A(instr_rdata_alu_id_o),
    .B(instr_decompressed),
    .S(\$procmux$13063_CMP ),
    .Y(\$procmux$13062_Y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:247.37-257.8|rtl/cve2/cve2_if_stage.sv:247.14-257.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13064  (
    .A(instr_rdata_id_o),
    .B(instr_decompressed),
    .S(\$procmux$13065_CMP ),
    .Y(\$procmux$13064_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$13067  (
    .A({ boot_addr_i[31:8], 8'h00 }),
    .B({ branch_target_ex_i, \$exc_pc$1 , csr_mepc_i, csr_depc_i }),
    .S({ \$procmux$13071_CMP , \$procmux$13070_CMP , \$procmux$13069_CMP , \$procmux$13068_CMP  }),
    .Y(\$procmux$13067_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13068_CMP0  (
    .A(pc_mux_internal),
    .B(3'h4),
    .Y(\$procmux$13068_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:141.16-141.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13069_CMP0  (
    .A(pc_mux_internal),
    .B(3'h3),
    .Y(\$procmux$13069_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:140.16-140.38|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13070_CMP0  (
    .A(pc_mux_internal),
    .B(3'h2),
    .Y(\$procmux$13070_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:139.16-139.50|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13071_CMP0  (
    .A(pc_mux_internal),
    .B(3'h1),
    .Y(\$procmux$13071_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$13072  (
    .A(32'hxxxxxxxx),
    .B({ csr_mtvec_i[31:8], 8'h00, csr_mtvec_i[31:8], exc_cause[5:0], 66'h00000080000000810 }),
    .S({ \$procmux$13076_CMP , \$procmux$13075_CMP , \$procmux$13074_CMP , \$procmux$13073_CMP  }),
    .Y(\$procmux$13072_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13073_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h3),
    .Y(\$procmux$13073_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:126.23-126.43|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13074_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h2),
    .Y(\$procmux$13074_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:125.23-125.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13075_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h1),
    .Y(\$procmux$13075_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:124.23-124.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13076_CMP0  (
    .A(exc_pc_mux_i),
    .Y(\$procmux$13076_CMP )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:203.27" */
  \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$33 )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:152.5" */
  \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(fetch_addr),
    .branch_i(branch_req),
    .busy_o(prefetch_busy),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(fetch_ready),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_mtvec = csr_mtvec_i[7:0];
  assign irq_id = exc_cause;
  assign unused_irq_bit = irq_id[6];
  assign exc_pc = \$exc_pc$1 ;
  assign pc_mux_internal = pc_mux_i;
  assign fetch_addr_n = \$fetch_addr_n$3 ;
  assign csr_mtvec_init_o = \$7 ;
  assign unused_fetch_addr_n0 = fetch_addr_n[0];
  assign branch_req = pc_set_i;
  assign pc_if_o = fetch_addr;
  assign if_busy_o = prefetch_busy;
  assign if_instr_pmp_err = \$15 ;
  assign if_instr_err = \$17 ;
  assign if_instr_err_plus2 = \$29 ;
  assign instr_valid_id_d = \$45 ;
  assign instr_new_id_d = \$47 ;
  assign instr_valid_id_o = instr_valid_id_q;
  assign instr_new_id_o = instr_new_id_q;
  assign if_id_pipe_reg_we = instr_new_id_d;
  assign fetch_ready = id_in_ready_i;
  assign \$procmux$13051_CMP  = if_id_pipe_reg_we;
  assign \$pc_id_o$61  = \$procmux$13050_Y ;
  assign \$procmux$13053_CMP  = if_id_pipe_reg_we;
  assign \$illegal_c_insn_id_o$60  = \$procmux$13052_Y ;
  assign \$procmux$13055_CMP  = if_id_pipe_reg_we;
  assign \$instr_fetch_err_plus2_o$59  = \$procmux$13054_Y ;
  assign \$procmux$13057_CMP  = if_id_pipe_reg_we;
  assign \$instr_fetch_err_o$58  = \$procmux$13056_Y ;
  assign \$procmux$13059_CMP  = if_id_pipe_reg_we;
  assign \$instr_is_compressed_id_o$57  = \$procmux$13058_Y ;
  assign \$procmux$13061_CMP  = if_id_pipe_reg_we;
  assign \$instr_rdata_c_id_o$56  = \$procmux$13060_Y ;
  assign \$procmux$13063_CMP  = if_id_pipe_reg_we;
  assign \$instr_rdata_alu_id_o$55  = \$procmux$13062_Y ;
  assign \$procmux$13065_CMP  = if_id_pipe_reg_we;
  assign \$instr_rdata_id_o$54  = \$procmux$13064_Y ;
  assign \$fetch_addr_n$3  = \$procmux$13067_Y ;
  assign \$exc_pc$1  = \$procmux$13072_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$828  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$830  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_load_store_unit.sv:16.8" */
module \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, busy_o, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i
, addr_incr_req_o, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, perf_load_o, perf_store_o);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$124 ;
  wire \$126 ;
  wire \$132 ;
  wire \$134 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$2 ;
  wire \$34 ;
  wire \$37 ;
  wire \$40 ;
  wire \$43 ;
  wire \$48 ;
  wire \$51 ;
  wire \$54 ;
  wire \$57 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$78 ;
  wire \$95 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$addr_incr_req_o$148 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:213.14-215.8" */
  wire [31:0] \$addr_last_q$29 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$addr_update$117 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire \$addr_update$127 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$addr_update$135 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$addr_update$140 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire \$addr_update$81 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$addr_update$85 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire \$addr_update$96 ;
  wire \$auto$rtlil.cc:2965:LogicNot$857 ;
  wire \$auto$rtlil.cc:2965:LogicNot$858 ;
  wire \$auto$rtlil.cc:2965:LogicNot$859 ;
  wire \$auto$rtlil.cc:2965:LogicNot$860 ;
  wire \$auto$rtlil.cc:2965:LogicNot$862 ;
  wire \$auto$rtlil.cc:2965:LogicNot$863 ;
  wire \$auto$rtlil.cc:2965:LogicNot$867 ;
  wire \$auto$rtlil.cc:2965:LogicNot$868 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$861 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$864 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$865 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$866 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire \$ctrl_update$128 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$ctrl_update$141 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire \$ctrl_update$82 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$ctrl_update$86 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire \$ctrl_update$97 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  wire [3:0] \$data_be$10 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  wire [3:0] \$data_be$11 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  wire [3:0] \$data_be$3 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  wire [3:0] \$data_be$4 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  wire [3:0] \$data_be$5 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  wire [3:0] \$data_be$8 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  wire [3:0] \$data_be$9 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  wire [31:0] \$data_rdata_ext$61 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$data_req_o$147 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$data_req_o$91 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  wire \$data_sign_ext_q$23 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  wire [1:0] \$data_type_q$22 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  wire [31:0] \$data_wdata$13 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  wire \$data_we_q$24 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:405.11-409.14" */
  wire \$handle_misaligned_d$115 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$handle_misaligned_d$119 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire \$handle_misaligned_d$129 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$handle_misaligned_d$143 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire \$handle_misaligned_d$83 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$handle_misaligned_d$87 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire \$handle_misaligned_d$98 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:405.11-409.14" */
  wire [2:0] \$ls_fsm_ns$116 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire [2:0] \$ls_fsm_ns$122 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire [2:0] \$ls_fsm_ns$130 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire [2:0] \$ls_fsm_ns$139 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire [2:0] \$ls_fsm_ns$146 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire [2:0] \$ls_fsm_ns$84 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire [2:0] \$ls_fsm_ns$90 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire [2:0] \$ls_fsm_ns$99 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$lsu_err_d$121 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$lsu_err_d$138 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$lsu_err_d$145 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$lsu_err_d$89 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$perf_load_o$149 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_load_o$92 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$perf_store_o$150 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_store_o$93 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$pmp_err_d$120 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$pmp_err_d$137 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$pmp_err_d$144 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$pmp_err_d$88 ;
  wire [2:0] \$procmux$12195_Y ;
  wire \$procmux$12196_CMP ;
  wire [2:0] \$procmux$12197_Y ;
  wire \$procmux$12198_CMP ;
  wire \$procmux$12200_Y ;
  wire \$procmux$12201_CMP ;
  wire \$procmux$12202_Y ;
  wire \$procmux$12203_CMP ;
  wire \$procmux$12205_Y ;
  wire \$procmux$12206_CMP ;
  wire \$procmux$12207_Y ;
  wire \$procmux$12208_CMP ;
  wire \$procmux$12210_Y ;
  wire \$procmux$12211_CMP ;
  wire \$procmux$12212_Y ;
  wire \$procmux$12213_CMP ;
  wire \$procmux$12215_Y ;
  wire \$procmux$12216_CMP ;
  wire \$procmux$12217_Y ;
  wire \$procmux$12218_CMP ;
  wire [2:0] \$procmux$12221_Y ;
  wire \$procmux$12222_CMP ;
  wire [2:0] \$procmux$12223_Y ;
  wire \$procmux$12224_CMP ;
  wire \$procmux$12227_Y ;
  wire \$procmux$12228_CMP ;
  wire \$procmux$12229_Y ;
  wire \$procmux$12230_CMP ;
  wire \$procmux$12233_Y ;
  wire \$procmux$12234_CMP ;
  wire \$procmux$12235_Y ;
  wire \$procmux$12236_CMP ;
  wire \$procmux$12239_Y ;
  wire \$procmux$12240_CMP ;
  wire \$procmux$12241_Y ;
  wire \$procmux$12242_CMP ;
  wire [2:0] \$procmux$12246_Y ;
  wire \$procmux$12247_CMP ;
  wire [2:0] \$procmux$12249_Y ;
  wire \$procmux$12250_CMP ;
  wire [2:0] \$procmux$12251_Y ;
  wire \$procmux$12252_CMP ;
  wire \$procmux$12256_Y ;
  wire \$procmux$12257_CMP ;
  wire \$procmux$12259_Y ;
  wire \$procmux$12260_CMP ;
  wire \$procmux$12261_Y ;
  wire \$procmux$12262_CMP ;
  wire [2:0] \$procmux$12268_Y ;
  wire \$procmux$12269_CMP ;
  wire [2:0] \$procmux$12270_Y ;
  wire \$procmux$12271_CMP ;
  wire \$procmux$12277_Y ;
  wire \$procmux$12278_CMP ;
  wire \$procmux$12279_Y ;
  wire \$procmux$12280_CMP ;
  wire \$procmux$12285_Y ;
  wire \$procmux$12286_CMP ;
  wire \$procmux$12287_Y ;
  wire \$procmux$12288_CMP ;
  wire \$procmux$12293_Y ;
  wire \$procmux$12294_CMP ;
  wire \$procmux$12295_Y ;
  wire \$procmux$12296_CMP ;
  wire \$procmux$12301_Y ;
  wire \$procmux$12302_CMP ;
  wire \$procmux$12303_Y ;
  wire \$procmux$12304_CMP ;
  wire \$procmux$12309_Y ;
  wire \$procmux$12310_CMP ;
  wire \$procmux$12311_Y ;
  wire \$procmux$12312_CMP ;
  wire [2:0] \$procmux$12317_Y ;
  wire \$procmux$12318_CMP ;
  wire [2:0] \$procmux$12319_Y ;
  wire \$procmux$12320_CMP ;
  wire \$procmux$12325_Y ;
  wire \$procmux$12326_CMP ;
  wire \$procmux$12327_Y ;
  wire \$procmux$12328_CMP ;
  wire \$procmux$12333_Y ;
  wire \$procmux$12334_CMP ;
  wire \$procmux$12335_Y ;
  wire \$procmux$12336_CMP ;
  wire \$procmux$12341_Y ;
  wire \$procmux$12342_CMP ;
  wire \$procmux$12343_Y ;
  wire \$procmux$12344_CMP ;
  wire [2:0] \$procmux$12347_Y ;
  wire \$procmux$12348_CMP ;
  wire \$procmux$12350_CMP ;
  wire \$procmux$12352_CMP ;
  wire \$procmux$12354_CMP ;
  wire \$procmux$12356_CMP ;
  wire [2:0] \$procmux$12363_Y ;
  wire \$procmux$12364_CMP ;
  wire [2:0] \$procmux$12365_Y ;
  wire \$procmux$12366_CMP ;
  wire [2:0] \$procmux$12367_Y ;
  wire \$procmux$12368_CMP ;
  wire \$procmux$12375_Y ;
  wire \$procmux$12376_CMP ;
  wire \$procmux$12377_Y ;
  wire \$procmux$12378_CMP ;
  wire \$procmux$12379_Y ;
  wire \$procmux$12380_CMP ;
  wire \$procmux$12387_Y ;
  wire \$procmux$12388_CMP ;
  wire \$procmux$12389_Y ;
  wire \$procmux$12390_CMP ;
  wire \$procmux$12391_Y ;
  wire \$procmux$12392_CMP ;
  wire \$procmux$12399_Y ;
  wire \$procmux$12400_CMP ;
  wire \$procmux$12401_Y ;
  wire \$procmux$12402_CMP ;
  wire \$procmux$12403_Y ;
  wire \$procmux$12404_CMP ;
  wire \$procmux$12411_Y ;
  wire \$procmux$12412_CMP ;
  wire \$procmux$12413_Y ;
  wire \$procmux$12414_CMP ;
  wire \$procmux$12421_Y ;
  wire \$procmux$12422_CMP ;
  wire \$procmux$12423_Y ;
  wire \$procmux$12424_CMP ;
  wire \$procmux$12431_Y ;
  wire \$procmux$12432_CMP ;
  wire \$procmux$12433_Y ;
  wire \$procmux$12434_CMP ;
  wire [2:0] \$procmux$12441_Y ;
  wire \$procmux$12442_CMP ;
  wire [2:0] \$procmux$12443_Y ;
  wire \$procmux$12444_CMP ;
  wire \$procmux$12451_Y ;
  wire \$procmux$12452_CMP ;
  wire \$procmux$12453_Y ;
  wire \$procmux$12454_CMP ;
  wire \$procmux$12461_Y ;
  wire \$procmux$12462_CMP ;
  wire \$procmux$12463_Y ;
  wire \$procmux$12464_CMP ;
  wire \$procmux$12471_Y ;
  wire \$procmux$12472_CMP ;
  wire \$procmux$12473_Y ;
  wire \$procmux$12474_CMP ;
  wire \$procmux$12481_Y ;
  wire \$procmux$12482_CMP ;
  wire \$procmux$12483_Y ;
  wire \$procmux$12484_CMP ;
  wire \$procmux$12491_Y ;
  wire \$procmux$12492_CMP ;
  wire \$procmux$12493_Y ;
  wire \$procmux$12494_CMP ;
  wire \$procmux$12501_Y ;
  wire \$procmux$12502_CMP ;
  wire \$procmux$12509_Y ;
  wire \$procmux$12510_CMP ;
  wire \$procmux$12513_Y ;
  wire \$procmux$12514_CMP ;
  wire \$procmux$12516_CMP ;
  wire \$procmux$12518_CMP ;
  wire \$procmux$12522_Y ;
  wire \$procmux$12523_CMP ;
  wire \$procmux$12525_CMP ;
  wire \$procmux$12527_CMP ;
  wire \$procmux$12529_CMP ;
  wire \$procmux$12532_Y ;
  wire \$procmux$12533_CMP ;
  wire \$procmux$12535_CMP ;
  wire \$procmux$12537_CMP ;
  wire \$procmux$12540_Y ;
  wire \$procmux$12541_CMP ;
  wire \$procmux$12543_CMP ;
  wire \$procmux$12545_CMP ;
  wire \$procmux$12549_Y ;
  wire \$procmux$12550_CMP ;
  wire \$procmux$12552_CMP ;
  wire \$procmux$12554_CMP ;
  wire \$procmux$12556_CMP ;
  wire \$procmux$12559_Y ;
  wire \$procmux$12560_CMP ;
  wire \$procmux$12562_CMP ;
  wire \$procmux$12566_Y ;
  wire \$procmux$12567_CMP ;
  wire \$procmux$12569_CMP ;
  wire \$procmux$12571_CMP ;
  wire \$procmux$12574_Y ;
  wire \$procmux$12575_CMP ;
  wire \$procmux$12577_CMP ;
  wire \$procmux$12579_CMP ;
  wire \$procmux$12581_CMP ;
  wire \$procmux$12583_CMP ;
  wire [31:0] \$procmux$12584_Y ;
  wire [1:0] \$procmux$12585_CMP ;
  wire \$procmux$12585_CTRL ;
  wire \$procmux$12586_CMP ;
  wire \$procmux$12587_CMP ;
  wire [31:0] \$procmux$12589_Y ;
  wire \$procmux$12590_CMP ;
  wire [31:0] \$procmux$12591_Y ;
  wire \$procmux$12592_CMP ;
  wire [31:0] \$procmux$12595_Y ;
  wire \$procmux$12596_CMP ;
  wire [31:0] \$procmux$12597_Y ;
  wire \$procmux$12598_CMP ;
  wire [31:0] \$procmux$12602_Y ;
  wire \$procmux$12603_CMP ;
  wire [31:0] \$procmux$12604_Y ;
  wire \$procmux$12605_CMP ;
  wire [31:0] \$procmux$12607_Y ;
  wire \$procmux$12608_CMP ;
  wire \$procmux$12610_CMP ;
  wire \$procmux$12612_CMP ;
  wire \$procmux$12614_CMP ;
  wire [31:0] \$procmux$12619_Y ;
  wire \$procmux$12620_CMP ;
  wire [31:0] \$procmux$12621_Y ;
  wire \$procmux$12622_CMP ;
  wire [31:0] \$procmux$12624_Y ;
  wire \$procmux$12625_CMP ;
  wire [31:0] \$procmux$12626_Y ;
  wire \$procmux$12627_CMP ;
  wire [31:0] \$procmux$12630_Y ;
  wire \$procmux$12631_CMP ;
  wire [31:0] \$procmux$12632_Y ;
  wire \$procmux$12633_CMP ;
  wire [31:0] \$procmux$12637_Y ;
  wire \$procmux$12638_CMP ;
  wire [31:0] \$procmux$12639_Y ;
  wire \$procmux$12640_CMP ;
  wire [31:0] \$procmux$12642_Y ;
  wire \$procmux$12643_CMP ;
  wire \$procmux$12645_CMP ;
  wire \$procmux$12647_CMP ;
  wire \$procmux$12649_CMP ;
  wire [31:0] \$procmux$12654_Y ;
  wire \$procmux$12655_CMP ;
  wire [31:0] \$procmux$12656_Y ;
  wire \$procmux$12657_CMP ;
  wire [31:0] \$procmux$12658_Y ;
  wire \$procmux$12659_CMP ;
  wire \$procmux$12660_CMP ;
  wire \$procmux$12661_CMP ;
  wire \$procmux$12662_CMP ;
  wire [31:0] \$procmux$12663_Y ;
  wire \$procmux$12664_CMP ;
  wire \$procmux$12665_Y ;
  wire \$procmux$12666_CMP ;
  wire \$procmux$12667_Y ;
  wire \$procmux$12668_CMP ;
  wire [1:0] \$procmux$12669_Y ;
  wire \$procmux$12670_CMP ;
  wire [1:0] \$procmux$12671_Y ;
  wire \$procmux$12672_CMP ;
  wire [23:0] \$procmux$12673_Y ;
  wire \$procmux$12674_CMP ;
  wire [31:0] \$procmux$12675_Y ;
  wire \$procmux$12676_CMP ;
  wire \$procmux$12677_CMP ;
  wire \$procmux$12678_CMP ;
  wire \$procmux$12679_CMP ;
  wire [3:0] \$procmux$12680_Y ;
  wire \$procmux$12681_CMP ;
  wire \$procmux$12682_CMP ;
  wire \$procmux$12683_CMP ;
  wire \$procmux$12684_CMP ;
  wire [3:0] \$procmux$12685_Y ;
  wire [1:0] \$procmux$12686_CMP ;
  wire \$procmux$12686_CTRL ;
  wire [3:0] \$procmux$12690_Y ;
  wire \$procmux$12691_CMP ;
  wire [3:0] \$procmux$12692_Y ;
  wire \$procmux$12693_CMP ;
  wire [3:0] \$procmux$12696_Y ;
  wire \$procmux$12697_CMP ;
  wire \$procmux$12698_CMP ;
  wire \$procmux$12699_CMP ;
  wire \$procmux$12700_CMP ;
  wire [3:0] \$procmux$12701_Y ;
  wire \$procmux$12702_CMP ;
  wire [3:0] \$procmux$12703_Y ;
  wire \$procmux$12704_CMP ;
  wire [3:0] \$procmux$12706_Y ;
  wire [1:0] \$procmux$12707_CMP ;
  wire \$procmux$12707_CTRL ;
  wire \$procmux$12709_CMP ;
  wire \$procmux$12711_CMP ;
  wire [3:0] \$procmux$12714_Y ;
  wire \$procmux$12715_CMP ;
  wire \$procmux$12716_CMP ;
  wire \$procmux$12717_CMP ;
  wire \$procmux$12718_CMP ;
  wire [3:0] \$procmux$12720_Y ;
  wire \$procmux$12721_CMP ;
  wire [3:0] \$procmux$12722_Y ;
  wire \$procmux$12723_CMP ;
  wire [3:0] \$procmux$12729_Y ;
  wire \$procmux$12730_CMP ;
  wire [3:0] \$procmux$12731_Y ;
  wire \$procmux$12732_CMP ;
  wire [3:0] \$procmux$12736_Y ;
  wire \$procmux$12737_CMP ;
  wire \$procmux$12738_CMP ;
  wire \$procmux$12739_CMP ;
  wire \$procmux$12740_CMP ;
  wire [3:0] \$procmux$12741_Y ;
  wire \$procmux$12742_CMP ;
  wire [3:0] \$procmux$12743_Y ;
  wire \$procmux$12744_CMP ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" */
  wire [31:0] \$rdata_b_ext$49 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" */
  wire [31:0] \$rdata_b_ext$52 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" */
  wire [31:0] \$rdata_b_ext$55 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" */
  wire [31:0] \$rdata_b_ext$58 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  wire [31:0] \$rdata_b_ext$59 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:237.9-241.12" */
  wire [31:0] \$rdata_h_ext$35 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:245.9-249.12" */
  wire [31:0] \$rdata_h_ext$38 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:253.9-257.12" */
  wire [31:0] \$rdata_h_ext$41 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12" */
  wire [31:0] \$rdata_h_ext$44 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  wire [31:0] \$rdata_h_ext$45 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  wire [1:0] \$rdata_offset_q$21 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:184.14-186.8" */
  wire [23:0] \$rdata_q$17 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$rdata_update$118 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$rdata_update$136 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  wire \$rdata_update$142 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  wire [31:0] \$rdata_w_ext$31 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:44.24" */
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:46.24" */
  output addr_incr_req_o;
  wire addr_incr_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.30" */
  wire [31:0] addr_last_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:48.24" */
  output [31:0] addr_last_o;
  wire [31:0] addr_last_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.17" */
  wire [31:0] addr_last_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:68.17" */
  wire addr_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:58.24" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:69.17" */
  wire ctrl_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:64.17" */
  wire [31:0] data_addr;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:28.24" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:65.17" */
  wire [31:0] data_addr_w_aligned;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:79.17" */
  wire [3:0] data_be;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:30.24" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:25.24" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:23.24" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:77.17" */
  wire [1:0] data_offset;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:93.17" */
  wire data_or_pmp_err;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:26.24" */
  input data_pmp_err_i;
  wire data_pmp_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:82.17" */
  wire [31:0] data_rdata_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:32.24" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:22.24" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:24.24" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:74.17" */
  wire data_sign_ext_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:73.17" */
  wire [1:0] data_type_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:80.17" */
  wire [31:0] data_wdata;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:31.24" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:29.24" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:75.17" */
  wire data_we_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.38" */
  wire handle_misaligned_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.17" */
  wire handle_misaligned_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:55.24" */
  output load_err_o;
  wire load_err_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.12" */
  wire [2:0] ls_fsm_cs;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.23" */
  wire [2:0] ls_fsm_ns;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.28" */
  wire lsu_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.17" */
  wire lsu_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:40.24" */
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:41.24" */
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:42.24" */
  input lsu_req_i;
  wire lsu_req_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:52.24" */
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:38.24" */
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:36.24" */
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:37.24" */
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:35.24" */
  input lsu_we_i;
  wire lsu_we_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:60.24" */
  output perf_load_o;
  wire perf_load_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:61.24" */
  output perf_store_o;
  wire perf_store_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.28" */
  wire pmp_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.17" */
  wire pmp_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:86.17" */
  wire [31:0] rdata_b_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:85.17" */
  wire [31:0] rdata_h_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:72.17" */
  wire [1:0] rdata_offset_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:71.17" */
  wire [23:0] rdata_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:70.17" */
  wire rdata_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:84.17" */
  wire [31:0] rdata_w_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:88.17" */
  wire split_misaligned_access;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:56.24" */
  output store_err_o;
  wire store_err_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(handle_misaligned_q),
    .Y(\$2 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$101 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(data_err_i),
    .B(pmp_err_q),
    .Y(\$103 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(data_we_q),
    .Y(\$105 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$106  (
    .A(3'h3),
    .B(3'h0),
    .S(data_gnt_i),
    .Y(\$auto$rtlil.cc:3092:Mux$866 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(data_err_i),
    .B(pmp_err_q),
    .Y(\$108 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\$108 ),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(data_gnt_i),
    .B(\$110 ),
    .Y(\$112 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(data_gnt_i),
    .Y(\$114 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(data_gnt_i),
    .B(pmp_err_q),
    .Y(\$124 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(lsu_err_q),
    .Y(\$126 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(data_err_i),
    .Y(\$132 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(data_we_q),
    .Y(\$134 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$857 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$867 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(lsu_err_q),
    .B(data_err_i),
    .Y(\$155 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(\$155 ),
    .B(pmp_err_q),
    .Y(\$157 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$159 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(ls_fsm_cs),
    .Y(\$161 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$162  (
    .A(\$159 ),
    .B(\$161 ),
    .Y(\$163 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(ls_fsm_cs),
    .Y(\$165 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(\$165 ),
    .B(data_rvalid_i),
    .Y(\$167 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(data_or_pmp_err),
    .Y(\$169 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(\$167 ),
    .B(\$169 ),
    .Y(\$171 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(data_we_q),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(\$171 ),
    .B(\$173 ),
    .Y(\$175 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(data_we_q),
    .Y(\$177 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(data_or_pmp_err),
    .B(\$177 ),
    .Y(\$179 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(\$179 ),
    .B(lsu_resp_valid_o),
    .Y(\$181 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$182  (
    .A(data_or_pmp_err),
    .B(data_we_q),
    .Y(\$183 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(\$183 ),
    .B(lsu_resp_valid_o),
    .Y(\$185 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(ls_fsm_cs),
    .Y(\$187 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$859 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A(data_addr),
    .B(data_addr_w_aligned),
    .S(addr_incr_req_o),
    .Y(\$auto$rtlil.cc:3092:Mux$861 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$862 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(data_sign_ext_q),
    .Y(\$34 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(data_sign_ext_q),
    .Y(\$37 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(data_sign_ext_q),
    .Y(\$40 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(data_sign_ext_q),
    .Y(\$43 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(data_sign_ext_q),
    .Y(\$48 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(data_sign_ext_q),
    .Y(\$51 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(data_sign_ext_q),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(data_sign_ext_q),
    .Y(\$57 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(handle_misaligned_q),
    .Y(\$7 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(lsu_type_i),
    .Y(\$63 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(data_offset),
    .Y(\$65 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(lsu_type_i),
    .B(2'h1),
    .Y(\$69 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$71 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$69 ),
    .B(\$71 ),
    .Y(\$73 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$67 ),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(lsu_we_i),
    .Y(\$78 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$79  (
    .A(3'h0),
    .B(3'h2),
    .S(split_misaligned_access),
    .Y(\$auto$rtlil.cc:3092:Mux$864 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$80  (
    .A(3'h3),
    .B(3'h1),
    .S(split_misaligned_access),
    .Y(\$auto$rtlil.cc:3092:Mux$865 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(data_gnt_i),
    .B(pmp_err_q),
    .Y(\$95 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:210.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$addr_last_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$addr_last_q$29 ),
    .Q(addr_last_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$data_sign_ext_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$data_sign_ext_q$23 ),
    .Q(data_sign_ext_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$data_type_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$data_type_q$22 ),
    .Q(data_type_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$data_we_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$data_we_q$24 ),
    .Q(data_we_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$handle_misaligned_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(handle_misaligned_d),
    .Q(handle_misaligned_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$ls_fsm_cs  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ls_fsm_ns),
    .Q(ls_fsm_cs)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$lsu_err_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(lsu_err_d),
    .Q(lsu_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$pmp_err_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(pmp_err_d),
    .Q(pmp_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$rdata_offset_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_offset_q$21 ),
    .Q(rdata_offset_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:181.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$driver$rdata_q  (
    .AD(24'h000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rdata_q$17 ),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12195  (
    .A(ls_fsm_cs),
    .B(3'h0),
    .S(\$procmux$12196_CMP ),
    .Y(\$procmux$12195_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12197  (
    .A(3'hx),
    .B(\$procmux$12195_Y ),
    .S(\$procmux$12198_CMP ),
    .Y(\$procmux$12197_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12198_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12198_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12200  (
    .A(lsu_err_q),
    .B(data_err_i),
    .S(\$procmux$12201_CMP ),
    .Y(\$procmux$12200_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12202  (
    .A(1'hx),
    .B(\$procmux$12200_Y ),
    .S(\$procmux$12203_CMP ),
    .Y(\$procmux$12202_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12203_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12203_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12205  (
    .A(pmp_err_q),
    .B(data_pmp_err_i),
    .S(\$procmux$12206_CMP ),
    .Y(\$procmux$12205_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12207  (
    .A(1'hx),
    .B(\$procmux$12205_Y ),
    .S(\$procmux$12208_CMP ),
    .Y(\$procmux$12207_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12208_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12208_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12210  (
    .A(1'h0),
    .B(\$134 ),
    .S(\$procmux$12211_CMP ),
    .Y(\$procmux$12210_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12212  (
    .A(1'hx),
    .B(\$procmux$12210_Y ),
    .S(\$procmux$12213_CMP ),
    .Y(\$procmux$12212_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12213_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12213_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12215  (
    .A(1'h0),
    .B(\$132 ),
    .S(\$procmux$12216_CMP ),
    .Y(\$procmux$12215_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12217  (
    .A(1'hx),
    .B(\$procmux$12215_Y ),
    .S(\$procmux$12218_CMP ),
    .Y(\$procmux$12217_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12218_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12218_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12221  (
    .A(ls_fsm_cs),
    .B(3'h0),
    .S(\$procmux$12222_CMP ),
    .Y(\$procmux$12221_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12223  (
    .A(3'hx),
    .B(\$procmux$12221_Y ),
    .S(\$procmux$12224_CMP ),
    .Y(\$procmux$12223_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12224_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12224_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12227  (
    .A(handle_misaligned_q),
    .B(1'h0),
    .S(\$procmux$12228_CMP ),
    .Y(\$procmux$12227_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12229  (
    .A(1'hx),
    .B(\$procmux$12227_Y ),
    .S(\$procmux$12230_CMP ),
    .Y(\$procmux$12229_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12230_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12230_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12233  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12234_CMP ),
    .Y(\$procmux$12233_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12235  (
    .A(1'hx),
    .B(\$procmux$12233_Y ),
    .S(\$procmux$12236_CMP ),
    .Y(\$procmux$12235_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12236_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12236_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12239  (
    .A(1'h0),
    .B(\$126 ),
    .S(\$procmux$12240_CMP ),
    .Y(\$procmux$12239_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12241  (
    .A(1'hx),
    .B(\$procmux$12239_Y ),
    .S(\$procmux$12242_CMP ),
    .Y(\$procmux$12241_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12242_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12242_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:405.27-409.14|rtl/cve2/cve2_load_store_unit.sv:405.11-409.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12246  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .S(\$procmux$12247_CMP ),
    .Y(\$procmux$12246_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12249  (
    .A(\$procmux$12246_Y ),
    .B(3'hx),
    .S(\$procmux$12250_CMP ),
    .Y(\$procmux$12249_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12251  (
    .A(3'hx),
    .B(\$procmux$12249_Y ),
    .S(\$procmux$12252_CMP ),
    .Y(\$procmux$12251_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12252_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12252_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:405.27-409.14|rtl/cve2/cve2_load_store_unit.sv:405.11-409.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12256  (
    .A(handle_misaligned_q),
    .B(1'h0),
    .S(\$procmux$12257_CMP ),
    .Y(\$procmux$12256_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12259  (
    .A(\$procmux$12256_Y ),
    .B(1'hx),
    .S(\$procmux$12260_CMP ),
    .Y(\$procmux$12259_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12261  (
    .A(1'hx),
    .B(\$procmux$12259_Y ),
    .S(\$procmux$12262_CMP ),
    .Y(\$procmux$12261_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12262_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12262_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12268  (
    .A(\$ls_fsm_ns$116 ),
    .B(\$auto$rtlil.cc:3092:Mux$866 ),
    .S(\$procmux$12269_CMP ),
    .Y(\$procmux$12268_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12270  (
    .A(3'hx),
    .B(\$procmux$12268_Y ),
    .S(\$procmux$12271_CMP ),
    .Y(\$procmux$12270_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12271_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12271_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12277  (
    .A(\$handle_misaligned_d$115 ),
    .B(\$114 ),
    .S(\$procmux$12278_CMP ),
    .Y(\$procmux$12277_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12279  (
    .A(1'hx),
    .B(\$procmux$12277_Y ),
    .S(\$procmux$12280_CMP ),
    .Y(\$procmux$12279_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12280_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12280_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12285  (
    .A(lsu_err_q),
    .B(\$103 ),
    .S(\$procmux$12286_CMP ),
    .Y(\$procmux$12285_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12287  (
    .A(1'hx),
    .B(\$procmux$12285_Y ),
    .S(\$procmux$12288_CMP ),
    .Y(\$procmux$12287_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12288_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12288_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12293  (
    .A(pmp_err_q),
    .B(data_pmp_err_i),
    .S(\$procmux$12294_CMP ),
    .Y(\$procmux$12293_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12295  (
    .A(1'hx),
    .B(\$procmux$12293_Y ),
    .S(\$procmux$12296_CMP ),
    .Y(\$procmux$12295_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12296_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12296_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12301  (
    .A(1'h0),
    .B(\$105 ),
    .S(\$procmux$12302_CMP ),
    .Y(\$procmux$12301_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12303  (
    .A(1'hx),
    .B(\$procmux$12301_Y ),
    .S(\$procmux$12304_CMP ),
    .Y(\$procmux$12303_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12304_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12304_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12309  (
    .A(1'h0),
    .B(\$112 ),
    .S(\$procmux$12310_CMP ),
    .Y(\$procmux$12309_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12311  (
    .A(1'hx),
    .B(\$procmux$12309_Y ),
    .S(\$procmux$12312_CMP ),
    .Y(\$procmux$12311_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12312_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12312_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12317  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .S(\$procmux$12318_CMP ),
    .Y(\$procmux$12317_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12319  (
    .A(3'hx),
    .B(\$procmux$12317_Y ),
    .S(\$procmux$12320_CMP ),
    .Y(\$procmux$12319_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12320_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12320_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12325  (
    .A(handle_misaligned_q),
    .B(1'h1),
    .S(\$procmux$12326_CMP ),
    .Y(\$procmux$12325_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12327  (
    .A(1'hx),
    .B(\$procmux$12325_Y ),
    .S(\$procmux$12328_CMP ),
    .Y(\$procmux$12327_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12328_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12328_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12333  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12334_CMP ),
    .Y(\$procmux$12333_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12335  (
    .A(1'hx),
    .B(\$procmux$12333_Y ),
    .S(\$procmux$12336_CMP ),
    .Y(\$procmux$12335_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12336_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12336_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12341  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12342_CMP ),
    .Y(\$procmux$12341_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12343  (
    .A(1'hx),
    .B(\$procmux$12341_Y ),
    .S(\$procmux$12344_CMP ),
    .Y(\$procmux$12343_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12344_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12344_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$12347  (
    .A(3'h0),
    .B({ \$ls_fsm_ns$90 , \$ls_fsm_ns$99 , \$ls_fsm_ns$122 , \$ls_fsm_ns$130 , \$ls_fsm_ns$139  }),
    .S({ \$procmux$12356_CMP , \$procmux$12354_CMP , \$procmux$12352_CMP , \$procmux$12350_CMP , \$procmux$12348_CMP  }),
    .Y(\$procmux$12347_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12348_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12348_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12350_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12350_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12352_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12352_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12354_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12354_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12356_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12356_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12363  (
    .A(\$auto$rtlil.cc:3092:Mux$865 ),
    .B(\$auto$rtlil.cc:3092:Mux$864 ),
    .S(\$procmux$12364_CMP ),
    .Y(\$procmux$12363_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12365  (
    .A(3'hx),
    .B(\$procmux$12363_Y ),
    .S(\$procmux$12366_CMP ),
    .Y(\$procmux$12365_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12367  (
    .A(3'hx),
    .B(\$procmux$12365_Y ),
    .S(\$procmux$12368_CMP ),
    .Y(\$procmux$12367_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12368_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12368_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12375  (
    .A(handle_misaligned_q),
    .B(\$75 ),
    .S(\$procmux$12376_CMP ),
    .Y(\$procmux$12375_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12377  (
    .A(1'hx),
    .B(\$procmux$12375_Y ),
    .S(\$procmux$12378_CMP ),
    .Y(\$procmux$12377_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12379  (
    .A(1'hx),
    .B(\$procmux$12377_Y ),
    .S(\$procmux$12380_CMP ),
    .Y(\$procmux$12379_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12380_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12380_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12387  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12388_CMP ),
    .Y(\$procmux$12387_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12389  (
    .A(1'hx),
    .B(\$procmux$12387_Y ),
    .S(\$procmux$12390_CMP ),
    .Y(\$procmux$12389_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12391  (
    .A(1'hx),
    .B(\$procmux$12389_Y ),
    .S(\$procmux$12392_CMP ),
    .Y(\$procmux$12391_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12392_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12392_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12399  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12400_CMP ),
    .Y(\$procmux$12399_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12401  (
    .A(1'hx),
    .B(\$procmux$12399_Y ),
    .S(\$procmux$12402_CMP ),
    .Y(\$procmux$12401_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12403  (
    .A(1'hx),
    .B(\$procmux$12401_Y ),
    .S(\$procmux$12404_CMP ),
    .Y(\$procmux$12403_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12404_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12404_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12411  (
    .A(1'h0),
    .B(lsu_we_i),
    .S(\$procmux$12412_CMP ),
    .Y(\$procmux$12411_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12413  (
    .A(1'hx),
    .B(\$procmux$12411_Y ),
    .S(\$procmux$12414_CMP ),
    .Y(\$procmux$12413_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12414_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12414_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12421  (
    .A(1'h0),
    .B(\$78 ),
    .S(\$procmux$12422_CMP ),
    .Y(\$procmux$12421_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12423  (
    .A(1'hx),
    .B(\$procmux$12421_Y ),
    .S(\$procmux$12424_CMP ),
    .Y(\$procmux$12423_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12424_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12424_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12431  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$12432_CMP ),
    .Y(\$procmux$12431_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12433  (
    .A(1'hx),
    .B(\$procmux$12431_Y ),
    .S(\$procmux$12434_CMP ),
    .Y(\$procmux$12433_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12434_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12434_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12441  (
    .A(ls_fsm_cs),
    .B(\$ls_fsm_ns$84 ),
    .S(\$procmux$12442_CMP ),
    .Y(\$procmux$12441_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12443  (
    .A(3'hx),
    .B(\$procmux$12441_Y ),
    .S(\$procmux$12444_CMP ),
    .Y(\$procmux$12443_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12444_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12444_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12451  (
    .A(lsu_err_q),
    .B(1'h0),
    .S(\$procmux$12452_CMP ),
    .Y(\$procmux$12451_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12453  (
    .A(1'hx),
    .B(\$procmux$12451_Y ),
    .S(\$procmux$12454_CMP ),
    .Y(\$procmux$12453_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12454_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12454_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12461  (
    .A(1'h0),
    .B(data_pmp_err_i),
    .S(\$procmux$12462_CMP ),
    .Y(\$procmux$12461_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12463  (
    .A(1'hx),
    .B(\$procmux$12461_Y ),
    .S(\$procmux$12464_CMP ),
    .Y(\$procmux$12463_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12464_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12464_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12471  (
    .A(handle_misaligned_q),
    .B(\$handle_misaligned_d$83 ),
    .S(\$procmux$12472_CMP ),
    .Y(\$procmux$12471_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12473  (
    .A(1'hx),
    .B(\$procmux$12471_Y ),
    .S(\$procmux$12474_CMP ),
    .Y(\$procmux$12473_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12474_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12474_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12481  (
    .A(1'h0),
    .B(\$ctrl_update$82 ),
    .S(\$procmux$12482_CMP ),
    .Y(\$procmux$12481_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12483  (
    .A(1'hx),
    .B(\$procmux$12481_Y ),
    .S(\$procmux$12484_CMP ),
    .Y(\$procmux$12483_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12484_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12484_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12491  (
    .A(1'h0),
    .B(\$addr_update$81 ),
    .S(\$procmux$12492_CMP ),
    .Y(\$procmux$12491_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12493  (
    .A(1'hx),
    .B(\$procmux$12491_Y ),
    .S(\$procmux$12494_CMP ),
    .Y(\$procmux$12493_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12494_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12494_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12501  (
    .A(1'h0),
    .B(\$perf_store_o$93 ),
    .S(\$procmux$12502_CMP ),
    .Y(\$procmux$12501_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12502_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12502_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12509  (
    .A(1'h0),
    .B(\$perf_load_o$92 ),
    .S(\$procmux$12510_CMP ),
    .Y(\$procmux$12509_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12510_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12510_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12513  (
    .A(1'h0),
    .B({ 1'h1, handle_misaligned_q, 1'h1 }),
    .S({ \$procmux$12518_CMP , \$procmux$12516_CMP , \$procmux$12514_CMP  }),
    .Y(\$procmux$12513_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12514_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12514_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12516_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12516_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12518_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12518_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$12522  (
    .A(1'h0),
    .B({ \$data_req_o$91 , 3'h7 }),
    .S({ \$procmux$12529_CMP , \$procmux$12527_CMP , \$procmux$12525_CMP , \$procmux$12523_CMP  }),
    .Y(\$procmux$12522_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12523_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12523_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12525_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12525_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12527_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12527_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12529_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12529_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12532  (
    .A(lsu_err_q),
    .B({ \$lsu_err_d$89 , \$lsu_err_d$121 , \$lsu_err_d$138  }),
    .S({ \$procmux$12537_CMP , \$procmux$12535_CMP , \$procmux$12533_CMP  }),
    .Y(\$procmux$12532_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12533_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12533_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12535_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12535_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12537_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12537_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12540  (
    .A(pmp_err_q),
    .B({ \$pmp_err_d$88 , \$pmp_err_d$120 , \$pmp_err_d$137  }),
    .S({ \$procmux$12545_CMP , \$procmux$12543_CMP , \$procmux$12541_CMP  }),
    .Y(\$procmux$12540_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12541_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12541_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12543_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12543_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12545_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12545_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$12549  (
    .A(handle_misaligned_q),
    .B({ \$handle_misaligned_d$87 , \$handle_misaligned_d$98 , \$handle_misaligned_d$119 , \$handle_misaligned_d$129  }),
    .S({ \$procmux$12556_CMP , \$procmux$12554_CMP , \$procmux$12552_CMP , \$procmux$12550_CMP  }),
    .Y(\$procmux$12549_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12550_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12550_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12552_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12552_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12554_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12554_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12556_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12556_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12559  (
    .A(1'h0),
    .B({ \$rdata_update$118 , \$rdata_update$136  }),
    .S({ \$procmux$12562_CMP , \$procmux$12560_CMP  }),
    .Y(\$procmux$12559_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12560_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12560_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12562_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12562_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12566  (
    .A(1'h0),
    .B({ \$ctrl_update$86 , \$ctrl_update$97 , \$ctrl_update$128  }),
    .S({ \$procmux$12571_CMP , \$procmux$12569_CMP , \$procmux$12567_CMP  }),
    .Y(\$procmux$12566_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12567_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12567_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12569_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12569_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12571_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12571_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$12574  (
    .A(1'h0),
    .B({ \$addr_update$85 , \$addr_update$96 , \$addr_update$117 , \$addr_update$127 , \$addr_update$135  }),
    .S({ \$procmux$12583_CMP , \$procmux$12581_CMP , \$procmux$12579_CMP , \$procmux$12577_CMP , \$procmux$12575_CMP  }),
    .Y(\$procmux$12574_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12575_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12575_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12577_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h3),
    .Y(\$procmux$12577_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12579_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h2),
    .Y(\$procmux$12579_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12581_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h1),
    .Y(\$procmux$12581_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12583_CMP0  (
    .A(ls_fsm_cs),
    .Y(\$procmux$12583_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$12584  (
    .A(32'hxxxxxxxx),
    .B({ \$rdata_w_ext$31 , \$rdata_h_ext$45 , \$rdata_b_ext$59  }),
    .S({ \$procmux$12587_CMP , \$procmux$12586_CMP , \$procmux$12585_CTRL  }),
    .Y(\$procmux$12584_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_ANY  (
    .A(\$procmux$12585_CMP ),
    .Y(\$procmux$12585_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_CMP0  (
    .A(data_type_q),
    .B(2'h2),
    .Y(\$procmux$12585_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_CMP1  (
    .A(data_type_q),
    .B(2'h3),
    .Y(\$procmux$12585_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12586_CMP0  (
    .A(data_type_q),
    .B(2'h1),
    .Y(\$procmux$12586_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:314.20-314.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12587_CMP0  (
    .A(data_type_q),
    .Y(\$procmux$12587_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12589  (
    .A({ 24'h000000, data_rdata_i[31:24] }),
    .B({ data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31:24] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12589_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12591  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12589_Y ),
    .S(\$procmux$12592_CMP ),
    .Y(\$procmux$12591_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12592_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12592_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12595  (
    .A({ 24'h000000, data_rdata_i[23:16] }),
    .B({ data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23:16] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12595_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12597  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12595_Y ),
    .S(\$procmux$12598_CMP ),
    .Y(\$procmux$12597_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12598_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12598_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12602  (
    .A({ 24'h000000, data_rdata_i[15:8] }),
    .B({ data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15:8] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12602_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12604  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12602_Y ),
    .S(\$procmux$12605_CMP ),
    .Y(\$procmux$12604_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12605_CMP0  (
    .A(rdata_offset_q),
    .B(2'h1),
    .Y(\$procmux$12605_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$12607  (
    .A(32'hxxxxxxxx),
    .B({ \$rdata_b_ext$49 , \$rdata_b_ext$52 , \$rdata_b_ext$55 , \$rdata_b_ext$58  }),
    .S({ \$procmux$12614_CMP , \$procmux$12612_CMP , \$procmux$12610_CMP , \$procmux$12608_CMP  }),
    .Y(\$procmux$12607_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12608_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12608_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12610_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12610_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12612_CMP0  (
    .A(rdata_offset_q),
    .B(2'h1),
    .Y(\$procmux$12612_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:276.9-280.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12614_CMP0  (
    .A(rdata_offset_q),
    .Y(\$procmux$12614_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12619  (
    .A({ 24'h000000, data_rdata_i[7:0] }),
    .B({ data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7:0] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12619_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:276.9-280.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12621  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12619_Y ),
    .S(\$procmux$12622_CMP ),
    .Y(\$procmux$12621_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:276.9-280.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12622_CMP0  (
    .A(rdata_offset_q),
    .Y(\$procmux$12622_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:262.11-262.71|rtl/cve2/cve2_load_store_unit.sv:261.9-265.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12624  (
    .A({ 16'h0000, data_rdata_i[7:0], rdata_q[23:16] }),
    .B({ data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7:0], rdata_q[23:16] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12624_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12626  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12624_Y ),
    .S(\$procmux$12627_CMP ),
    .Y(\$procmux$12626_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12627_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12627_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:254.11-254.57|rtl/cve2/cve2_load_store_unit.sv:253.9-257.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12630  (
    .A({ 16'h0000, data_rdata_i[31:16] }),
    .B({ data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31:16] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12630_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:253.9-257.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12632  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12630_Y ),
    .S(\$procmux$12633_CMP ),
    .Y(\$procmux$12632_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:253.9-257.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12633_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12633_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:246.11-246.56|rtl/cve2/cve2_load_store_unit.sv:245.9-249.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12637  (
    .A({ 16'h0000, data_rdata_i[23:8] }),
    .B({ data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23:8] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12637_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:245.9-249.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12639  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12637_Y ),
    .S(\$procmux$12640_CMP ),
    .Y(\$procmux$12639_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:245.9-249.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12640_CMP0  (
    .A(rdata_offset_q),
    .B(2'h1),
    .Y(\$procmux$12640_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$12642  (
    .A(32'hxxxxxxxx),
    .B({ \$rdata_h_ext$35 , \$rdata_h_ext$38 , \$rdata_h_ext$41 , \$rdata_h_ext$44  }),
    .S({ \$procmux$12649_CMP , \$procmux$12647_CMP , \$procmux$12645_CMP , \$procmux$12643_CMP  }),
    .Y(\$procmux$12642_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12643_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12643_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:253.9-257.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12645_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12645_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:245.9-249.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12647_CMP0  (
    .A(rdata_offset_q),
    .B(2'h1),
    .Y(\$procmux$12647_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:237.9-241.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12649_CMP0  (
    .A(rdata_offset_q),
    .Y(\$procmux$12649_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:238.11-238.56|rtl/cve2/cve2_load_store_unit.sv:237.9-241.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12654  (
    .A({ 16'h0000, data_rdata_i[15:0] }),
    .B({ data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15:0] }),
    .S(data_sign_ext_q),
    .Y(\$procmux$12654_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:237.9-241.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12656  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$12654_Y ),
    .S(\$procmux$12657_CMP ),
    .Y(\$procmux$12656_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:237.9-241.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12657_CMP0  (
    .A(rdata_offset_q),
    .Y(\$procmux$12657_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$12658  (
    .A(32'hxxxxxxxx),
    .B({ data_rdata_i, data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }),
    .S({ \$procmux$12662_CMP , \$procmux$12661_CMP , \$procmux$12660_CMP , \$procmux$12659_CMP  }),
    .Y(\$procmux$12658_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12659_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12659_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:223.16-223.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12660_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12660_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:222.16-222.66|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12661_CMP0  (
    .A(rdata_offset_q),
    .B(2'h1),
    .Y(\$procmux$12661_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:221.16-221.50|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12662_CMP0  (
    .A(rdata_offset_q),
    .Y(\$procmux$12662_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:214.7-214.34|rtl/cve2/cve2_load_store_unit.sv:213.14-215.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12663  (
    .A(addr_last_q),
    .B(\$auto$rtlil.cc:3092:Mux$861 ),
    .S(\$procmux$12664_CMP ),
    .Y(\$procmux$12663_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.31-201.8|rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12665  (
    .A(data_we_q),
    .B(lsu_we_i),
    .S(\$procmux$12666_CMP ),
    .Y(\$procmux$12665_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.31-201.8|rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12667  (
    .A(data_sign_ext_q),
    .B(lsu_sign_ext_i),
    .S(\$procmux$12668_CMP ),
    .Y(\$procmux$12667_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.31-201.8|rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12669  (
    .A(data_type_q),
    .B(lsu_type_i),
    .S(\$procmux$12670_CMP ),
    .Y(\$procmux$12669_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:196.31-201.8|rtl/cve2/cve2_load_store_unit.sv:196.14-201.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12671  (
    .A(rdata_offset_q),
    .B(adder_result_ex_i[1:0]),
    .S(\$procmux$12672_CMP ),
    .Y(\$procmux$12671_Y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:185.7-185.37|rtl/cve2/cve2_load_store_unit.sv:184.14-186.8" */
  \$mux  #(
    .WIDTH(32'd24)
  ) \$procmux$12673  (
    .A(rdata_q),
    .B(data_rdata_i[31:8]),
    .S(\$procmux$12674_CMP ),
    .Y(\$procmux$12673_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$12675  (
    .A(32'hxxxxxxxx),
    .B({ lsu_wdata_i, lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }),
    .S({ \$procmux$12679_CMP , \$procmux$12678_CMP , \$procmux$12677_CMP , \$procmux$12676_CMP  }),
    .Y(\$procmux$12675_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12676_CMP0  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$procmux$12676_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12677_CMP0  (
    .A(data_offset),
    .B(2'h2),
    .Y(\$procmux$12677_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12678_CMP0  (
    .A(data_offset),
    .B(2'h1),
    .Y(\$procmux$12678_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:168.16-168.48|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12679_CMP0  (
    .A(data_offset),
    .Y(\$procmux$12679_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) \$procmux$12680  (
    .A(4'hx),
    .B(16'h1248),
    .S({ \$procmux$12684_CMP , \$procmux$12683_CMP , \$procmux$12682_CMP , \$procmux$12681_CMP  }),
    .Y(\$procmux$12680_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12681_CMP0  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$procmux$12681_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:150.20-150.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12682_CMP0  (
    .A(data_offset),
    .B(2'h2),
    .Y(\$procmux$12682_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:149.20-149.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12683_CMP0  (
    .A(data_offset),
    .B(2'h1),
    .Y(\$procmux$12683_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:148.20-148.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12684_CMP0  (
    .A(data_offset),
    .Y(\$procmux$12684_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12685  (
    .A(4'hx),
    .B(\$procmux$12680_Y ),
    .S(\$procmux$12686_CTRL ),
    .Y(\$procmux$12685_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_ANY  (
    .A(\$procmux$12686_CMP ),
    .Y(\$procmux$12686_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_CMP0  (
    .A(lsu_type_i),
    .B(2'h2),
    .Y(\$procmux$12686_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_CMP1  (
    .A(lsu_type_i),
    .B(2'h3),
    .Y(\$procmux$12686_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12690  (
    .A(\$data_be$8 ),
    .B(4'h1),
    .S(handle_misaligned_q),
    .Y(\$procmux$12690_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12692  (
    .A(4'hx),
    .B(\$procmux$12690_Y ),
    .S(\$procmux$12693_CMP ),
    .Y(\$procmux$12692_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12693_CMP0  (
    .A(lsu_type_i),
    .B(2'h1),
    .Y(\$procmux$12693_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) \$procmux$12696  (
    .A(4'hx),
    .B(16'h36c8),
    .S({ \$procmux$12700_CMP , \$procmux$12699_CMP , \$procmux$12698_CMP , \$procmux$12697_CMP  }),
    .Y(\$procmux$12696_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12697_CMP0  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$procmux$12697_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:136.22-136.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12698_CMP0  (
    .A(data_offset),
    .B(2'h2),
    .Y(\$procmux$12698_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:135.22-135.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12699_CMP0  (
    .A(data_offset),
    .B(2'h1),
    .Y(\$procmux$12699_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:134.22-134.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12700_CMP0  (
    .A(data_offset),
    .Y(\$procmux$12700_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12701  (
    .A(\$procmux$12696_Y ),
    .B(4'hx),
    .S(handle_misaligned_q),
    .Y(\$procmux$12701_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12703  (
    .A(4'hx),
    .B(\$procmux$12701_Y ),
    .S(\$procmux$12704_CMP ),
    .Y(\$procmux$12703_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12704_CMP0  (
    .A(lsu_type_i),
    .B(2'h1),
    .Y(\$procmux$12704_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$12706  (
    .A(4'hx),
    .B({ \$data_be$5 , \$data_be$9 , \$data_be$10  }),
    .S({ \$procmux$12711_CMP , \$procmux$12709_CMP , \$procmux$12707_CTRL  }),
    .Y(\$procmux$12706_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12707_ANY  (
    .A(\$procmux$12707_CMP ),
    .Y(\$procmux$12707_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12707_CMP0  (
    .A(lsu_type_i),
    .B(2'h2),
    .Y(\$procmux$12707_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12707_CMP1  (
    .A(lsu_type_i),
    .B(2'h3),
    .Y(\$procmux$12707_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12709_CMP0  (
    .A(lsu_type_i),
    .B(2'h1),
    .Y(\$procmux$12709_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12711_CMP0  (
    .A(lsu_type_i),
    .Y(\$procmux$12711_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) \$procmux$12714  (
    .A(4'hx),
    .B(16'h0137),
    .S({ \$procmux$12718_CMP , \$procmux$12717_CMP , \$procmux$12716_CMP , \$procmux$12715_CMP  }),
    .Y(\$procmux$12714_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12715_CMP0  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$procmux$12715_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:124.22-124.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12716_CMP0  (
    .A(data_offset),
    .B(2'h2),
    .Y(\$procmux$12716_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:123.22-123.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12717_CMP0  (
    .A(data_offset),
    .B(2'h1),
    .Y(\$procmux$12717_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:122.22-122.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12718_CMP0  (
    .A(data_offset),
    .Y(\$procmux$12718_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12720  (
    .A(4'hx),
    .B(\$procmux$12714_Y ),
    .S(handle_misaligned_q),
    .Y(\$procmux$12720_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12722  (
    .A(4'hx),
    .B(\$procmux$12720_Y ),
    .S(\$procmux$12723_CMP ),
    .Y(\$procmux$12722_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12723_CMP0  (
    .A(lsu_type_i),
    .Y(\$procmux$12723_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12729  (
    .A(\$data_be$3 ),
    .B(\$data_be$4 ),
    .S(handle_misaligned_q),
    .Y(\$procmux$12729_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12731  (
    .A(4'hx),
    .B(\$procmux$12729_Y ),
    .S(\$procmux$12732_CMP ),
    .Y(\$procmux$12731_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12732_CMP0  (
    .A(lsu_type_i),
    .Y(\$procmux$12732_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) \$procmux$12736  (
    .A(4'hx),
    .B(16'hfec8),
    .S({ \$procmux$12740_CMP , \$procmux$12739_CMP , \$procmux$12738_CMP , \$procmux$12737_CMP  }),
    .Y(\$procmux$12736_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12737_CMP0  (
    .A(data_offset),
    .B(2'h3),
    .Y(\$procmux$12737_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:116.22-116.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12738_CMP0  (
    .A(data_offset),
    .B(2'h2),
    .Y(\$procmux$12738_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:115.22-115.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12739_CMP0  (
    .A(data_offset),
    .B(2'h1),
    .Y(\$procmux$12739_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:114.22-114.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12740_CMP0  (
    .A(data_offset),
    .Y(\$procmux$12740_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12741  (
    .A(\$procmux$12736_Y ),
    .B(4'hx),
    .S(handle_misaligned_q),
    .Y(\$procmux$12741_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12743  (
    .A(4'hx),
    .B(\$procmux$12741_Y ),
    .S(\$procmux$12744_CMP ),
    .Y(\$procmux$12743_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12744_CMP0  (
    .A(lsu_type_i),
    .Y(\$procmux$12744_CMP )
  );
  assign data_addr = adder_result_ex_i;
  assign data_offset = data_addr[1:0];
  assign data_be = \$data_be$11 ;
  assign data_wdata = \$data_wdata$13 ;
  assign addr_last_d = \$auto$rtlil.cc:3092:Mux$861 ;
  assign rdata_w_ext = \$rdata_w_ext$31 ;
  assign rdata_h_ext = \$rdata_h_ext$45 ;
  assign rdata_b_ext = \$rdata_b_ext$59 ;
  assign data_rdata_ext = \$data_rdata_ext$61 ;
  assign split_misaligned_access = \$75 ;
  assign addr_update = \$addr_update$140 ;
  assign ctrl_update = \$ctrl_update$141 ;
  assign rdata_update = \$rdata_update$142 ;
  assign handle_misaligned_d = \$handle_misaligned_d$143 ;
  assign pmp_err_d = \$pmp_err_d$144 ;
  assign lsu_err_d = \$lsu_err_d$145 ;
  assign ls_fsm_ns = \$ls_fsm_ns$146 ;
  assign data_req_o = \$data_req_o$147 ;
  assign addr_incr_req_o = \$addr_incr_req_o$148 ;
  assign perf_load_o = \$perf_load_o$149 ;
  assign perf_store_o = \$perf_store_o$150 ;
  assign data_or_pmp_err = \$157 ;
  assign lsu_resp_valid_o = \$163 ;
  assign lsu_rdata_valid_o = \$175 ;
  assign lsu_rdata_o = data_rdata_ext;
  assign data_addr_w_aligned = { data_addr[31:2], 2'h0 };
  assign data_addr_o = data_addr_w_aligned;
  assign data_wdata_o = data_wdata;
  assign data_we_o = lsu_we_i;
  assign data_be_o = data_be;
  assign addr_last_o = addr_last_q;
  assign load_err_o = \$181 ;
  assign store_err_o = \$185 ;
  assign busy_o = \$187 ;
  assign \$procmux$12196_CMP  = data_rvalid_i;
  assign \$ls_fsm_ns$139  = \$procmux$12197_Y ;
  assign \$procmux$12201_CMP  = data_rvalid_i;
  assign \$lsu_err_d$138  = \$procmux$12202_Y ;
  assign \$procmux$12206_CMP  = data_rvalid_i;
  assign \$pmp_err_d$137  = \$procmux$12207_Y ;
  assign \$procmux$12211_CMP  = data_rvalid_i;
  assign \$rdata_update$136  = \$procmux$12212_Y ;
  assign \$procmux$12216_CMP  = data_rvalid_i;
  assign \$addr_update$135  = \$procmux$12217_Y ;
  assign \$procmux$12222_CMP  = \$124 ;
  assign \$ls_fsm_ns$130  = \$procmux$12223_Y ;
  assign \$procmux$12228_CMP  = \$124 ;
  assign \$handle_misaligned_d$129  = \$procmux$12229_Y ;
  assign \$procmux$12234_CMP  = \$124 ;
  assign \$ctrl_update$128  = \$procmux$12235_Y ;
  assign \$procmux$12240_CMP  = \$124 ;
  assign \$addr_update$127  = \$procmux$12241_Y ;
  assign \$procmux$12247_CMP  = data_gnt_i;
  assign \$procmux$12250_CMP  = \$101 ;
  assign \$ls_fsm_ns$116  = \$procmux$12251_Y ;
  assign \$procmux$12257_CMP  = data_gnt_i;
  assign \$procmux$12260_CMP  = \$101 ;
  assign \$handle_misaligned_d$115  = \$procmux$12261_Y ;
  assign \$procmux$12269_CMP  = \$101 ;
  assign \$ls_fsm_ns$122  = \$procmux$12270_Y ;
  assign \$procmux$12278_CMP  = \$101 ;
  assign \$handle_misaligned_d$119  = \$procmux$12279_Y ;
  assign \$procmux$12286_CMP  = \$101 ;
  assign \$lsu_err_d$121  = \$procmux$12287_Y ;
  assign \$procmux$12294_CMP  = \$101 ;
  assign \$pmp_err_d$120  = \$procmux$12295_Y ;
  assign \$procmux$12302_CMP  = \$101 ;
  assign \$rdata_update$118  = \$procmux$12303_Y ;
  assign \$procmux$12310_CMP  = \$101 ;
  assign \$addr_update$117  = \$procmux$12311_Y ;
  assign \$procmux$12318_CMP  = \$95 ;
  assign \$ls_fsm_ns$99  = \$procmux$12319_Y ;
  assign \$procmux$12326_CMP  = \$95 ;
  assign \$handle_misaligned_d$98  = \$procmux$12327_Y ;
  assign \$procmux$12334_CMP  = \$95 ;
  assign \$ctrl_update$97  = \$procmux$12335_Y ;
  assign \$procmux$12342_CMP  = \$95 ;
  assign \$addr_update$96  = \$procmux$12343_Y ;
  assign \$ls_fsm_ns$146  = \$procmux$12347_Y ;
  assign \$procmux$12364_CMP  = data_gnt_i;
  assign \$procmux$12366_CMP  = lsu_req_i;
  assign \$ls_fsm_ns$84  = \$procmux$12367_Y ;
  assign \$procmux$12376_CMP  = data_gnt_i;
  assign \$procmux$12378_CMP  = lsu_req_i;
  assign \$handle_misaligned_d$83  = \$procmux$12379_Y ;
  assign \$procmux$12388_CMP  = data_gnt_i;
  assign \$procmux$12390_CMP  = lsu_req_i;
  assign \$ctrl_update$82  = \$procmux$12391_Y ;
  assign \$procmux$12400_CMP  = data_gnt_i;
  assign \$procmux$12402_CMP  = lsu_req_i;
  assign \$addr_update$81  = \$procmux$12403_Y ;
  assign \$procmux$12412_CMP  = lsu_req_i;
  assign \$perf_store_o$93  = \$procmux$12413_Y ;
  assign \$procmux$12422_CMP  = lsu_req_i;
  assign \$perf_load_o$92  = \$procmux$12423_Y ;
  assign \$procmux$12432_CMP  = lsu_req_i;
  assign \$data_req_o$91  = \$procmux$12433_Y ;
  assign \$procmux$12442_CMP  = lsu_req_i;
  assign \$ls_fsm_ns$90  = \$procmux$12443_Y ;
  assign \$procmux$12452_CMP  = lsu_req_i;
  assign \$lsu_err_d$89  = \$procmux$12453_Y ;
  assign \$procmux$12462_CMP  = lsu_req_i;
  assign \$pmp_err_d$88  = \$procmux$12463_Y ;
  assign \$procmux$12472_CMP  = lsu_req_i;
  assign \$handle_misaligned_d$87  = \$procmux$12473_Y ;
  assign \$procmux$12482_CMP  = lsu_req_i;
  assign \$ctrl_update$86  = \$procmux$12483_Y ;
  assign \$procmux$12492_CMP  = lsu_req_i;
  assign \$addr_update$85  = \$procmux$12493_Y ;
  assign \$perf_store_o$150  = \$procmux$12501_Y ;
  assign \$perf_load_o$149  = \$procmux$12509_Y ;
  assign \$addr_incr_req_o$148  = \$procmux$12513_Y ;
  assign \$data_req_o$147  = \$procmux$12522_Y ;
  assign \$lsu_err_d$145  = \$procmux$12532_Y ;
  assign \$pmp_err_d$144  = \$procmux$12540_Y ;
  assign \$handle_misaligned_d$143  = \$procmux$12549_Y ;
  assign \$rdata_update$142  = \$procmux$12559_Y ;
  assign \$ctrl_update$141  = \$procmux$12566_Y ;
  assign \$addr_update$140  = \$procmux$12574_Y ;
  assign \$data_rdata_ext$61  = \$procmux$12584_Y ;
  assign \$procmux$12590_CMP  = \$57 ;
  assign \$rdata_b_ext$58  = \$procmux$12591_Y ;
  assign \$procmux$12596_CMP  = \$54 ;
  assign \$rdata_b_ext$55  = \$procmux$12597_Y ;
  assign \$procmux$12603_CMP  = \$51 ;
  assign \$rdata_b_ext$52  = \$procmux$12604_Y ;
  assign \$rdata_b_ext$59  = \$procmux$12607_Y ;
  assign \$procmux$12620_CMP  = \$48 ;
  assign \$rdata_b_ext$49  = \$procmux$12621_Y ;
  assign \$procmux$12625_CMP  = \$43 ;
  assign \$rdata_h_ext$44  = \$procmux$12626_Y ;
  assign \$procmux$12631_CMP  = \$40 ;
  assign \$rdata_h_ext$41  = \$procmux$12632_Y ;
  assign \$procmux$12638_CMP  = \$37 ;
  assign \$rdata_h_ext$38  = \$procmux$12639_Y ;
  assign \$rdata_h_ext$45  = \$procmux$12642_Y ;
  assign \$procmux$12655_CMP  = \$34 ;
  assign \$rdata_h_ext$35  = \$procmux$12656_Y ;
  assign \$rdata_w_ext$31  = \$procmux$12658_Y ;
  assign \$procmux$12664_CMP  = addr_update;
  assign \$addr_last_q$29  = \$procmux$12663_Y ;
  assign \$procmux$12666_CMP  = ctrl_update;
  assign \$data_we_q$24  = \$procmux$12665_Y ;
  assign \$procmux$12668_CMP  = ctrl_update;
  assign \$data_sign_ext_q$23  = \$procmux$12667_Y ;
  assign \$procmux$12670_CMP  = ctrl_update;
  assign \$data_type_q$22  = \$procmux$12669_Y ;
  assign \$procmux$12672_CMP  = ctrl_update;
  assign \$rdata_offset_q$21  = \$procmux$12671_Y ;
  assign \$procmux$12674_CMP  = rdata_update;
  assign \$rdata_q$17  = \$procmux$12673_Y ;
  assign \$data_wdata$13  = \$procmux$12675_Y ;
  assign \$data_be$10  = \$procmux$12685_Y ;
  assign \$procmux$12691_CMP  = \$7 ;
  assign \$data_be$9  = \$procmux$12692_Y ;
  assign \$procmux$12702_CMP  = \$7 ;
  assign \$data_be$8  = \$procmux$12703_Y ;
  assign \$data_be$11  = \$procmux$12706_Y ;
  assign \$procmux$12721_CMP  = \$2 ;
  assign \$data_be$4  = \$procmux$12722_Y ;
  assign \$procmux$12730_CMP  = \$2 ;
  assign \$data_be$5  = \$procmux$12731_Y ;
  assign \$procmux$12742_CMP  = \$2 ;
  assign \$data_be$3  = \$procmux$12743_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$858  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$860  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$863  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$868  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_prefetch_buffer.sv:12.8" */
module \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, addr_o, req_i, addr_i, rdata_o, busy_o, branch_i, ready_i, valid_o, err_o, err_plus2_o);
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$47 ;
  wire \$49 ;
  wire [1:0] \$5 ;
  wire [31:0] \$51 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$93 ;
  wire \$95 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1586 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1587 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1588 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1590 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1591 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1596 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1597 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1589 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1592 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1593 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1594 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1595 ;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:171.14-173.8" */
  wire [31:0] \$fetch_addr_q$55 ;
  wire [31:0] \$procmux$7180_Y ;
  wire \$procmux$7181_CMP ;
  wire [31:0] \$procmux$7182_Y ;
  wire \$procmux$7183_CMP ;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:154.14-156.8" */
  wire [31:0] \$stored_addr_q$38 ;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:20.23" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:26.23" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.24" */
  wire [1:0] branch_discard_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.60" */
  wire [1:0] branch_discard_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.42" */
  wire [1:0] branch_discard_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:19.23" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:39.23" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:14.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.24" */
  wire discard_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.39" */
  wire discard_req_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:27.23" */
  output err_o;
  wire err_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:28.23" */
  output err_plus2_o;
  wire err_plus2_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.24" */
  wire [31:0] fetch_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:54.24" */
  wire fetch_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.38" */
  wire [31:0] fetch_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:58.24" */
  wire [31:0] fifo_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:61.24" */
  wire [1:0] fifo_busy;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:60.24" */
  wire fifo_clear;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:59.24" */
  wire fifo_ready;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:57.24" */
  wire fifo_valid;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.24" */
  wire [31:0] instr_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:33.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.36" */
  wire [31:0] instr_addr_w_aligned;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:35.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:32.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:34.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:31.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:36.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:25.23" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.24" */
  wire [1:0] rdata_outstanding_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.66" */
  wire [1:0] rdata_outstanding_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:49.24" */
  wire [1:0] rdata_outstanding_rev;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.45" */
  wire [1:0] rdata_outstanding_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:23.23" */
  input ready_i;
  wire ready_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:17.23" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:15.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.24" */
  wire [31:0] stored_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:52.24" */
  wire stored_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.39" */
  wire [31:0] stored_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.24" */
  wire valid_new_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:24.23" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:63.24" */
  wire valid_raw;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.39" */
  wire valid_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.24" */
  wire valid_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.37" */
  wire valid_req_q;
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(rdata_outstanding_q),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(req_i),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(rdata_outstanding_q[1]),
    .Y(\$14 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$12 ),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(valid_req_q),
    .B(valid_new_req),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(instr_gnt_i),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(instr_req_o),
    .Y(\$3 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(valid_req),
    .B(\$20 ),
    .Y(\$22 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(branch_i),
    .B(discard_req_q),
    .Y(\$24 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(valid_req_q),
    .B(\$24 ),
    .Y(\$26 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(valid_req_q),
    .Y(\$28 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(valid_new_req),
    .B(\$28 ),
    .Y(\$30 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(instr_gnt_i),
    .Y(\$32 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$30 ),
    .B(\$32 ),
    .Y(\$34 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1587 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(valid_req_q),
    .Y(\$40 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$4  (
    .A(fifo_busy),
    .B(rdata_outstanding_rev),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(valid_new_req),
    .B(\$40 ),
    .Y(\$42 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(branch_i),
    .B(\$42 ),
    .Y(\$44 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$45  (
    .A({ fetch_addr_q[31:2], 2'h0 }),
    .B(addr_i),
    .S(branch_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1589 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(valid_req_q),
    .Y(\$47 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(valid_new_req),
    .B(\$47 ),
    .Y(\$49 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$50  (
    .A(\$auto$rtlil.cc:3092:Mux$1589 ),
    .B({ 29'h00000000, \$49 , 2'h0 }),
    .Y(\$51 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1590 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$56  (
    .A(fetch_addr_q),
    .B(addr_i),
    .S(branch_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1592 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$57  (
    .A(\$auto$rtlil.cc:3092:Mux$1592 ),
    .B(stored_addr_q),
    .S(valid_req_q),
    .Y(\$auto$rtlil.cc:3092:Mux$1593 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(valid_req),
    .B(instr_gnt_i),
    .Y(\$59 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5 ),
    .Y(\$7 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$59 ),
    .B(rdata_outstanding_q[0]),
    .Y(\$61 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(valid_req),
    .B(instr_gnt_i),
    .Y(\$63 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$63 ),
    .B(discard_req_d),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(branch_i),
    .B(rdata_outstanding_q[0]),
    .Y(\$67 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\$65 ),
    .B(\$67 ),
    .Y(\$69 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$69 ),
    .B(branch_discard_q[0]),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(valid_req),
    .B(instr_gnt_i),
    .Y(\$73 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$73 ),
    .B(rdata_outstanding_q[0]),
    .Y(\$75 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(rdata_outstanding_q[1]),
    .Y(\$77 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(valid_req),
    .B(instr_gnt_i),
    .Y(\$79 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1586 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$79 ),
    .B(discard_req_d),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$81 ),
    .B(rdata_outstanding_q[0]),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(branch_i),
    .B(rdata_outstanding_q[1]),
    .Y(\$85 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(\$85 ),
    .Y(\$87 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\$87 ),
    .B(branch_discard_q[1]),
    .Y(\$89 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(fifo_ready),
    .B(branch_i),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$90  (
    .A(rdata_outstanding_n),
    .B({ 1'h0, rdata_outstanding_n[1] }),
    .S(instr_rvalid_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1594 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$91  (
    .A(branch_discard_n),
    .B({ 1'h0, branch_discard_n[1] }),
    .S(instr_rvalid_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1595 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(branch_discard_q[0]),
    .Y(\$93 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(instr_rvalid_i),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1596 )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$branch_discard_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(branch_discard_s),
    .Q(branch_discard_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$discard_req_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(discard_req_d),
    .Q(discard_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:168.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$fetch_addr_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$fetch_addr_q$55 ),
    .Q(fetch_addr_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$rdata_outstanding_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(rdata_outstanding_s),
    .Q(rdata_outstanding_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$stored_addr_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$stored_addr_q$38 ),
    .Q(stored_addr_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$valid_req_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(valid_req_d),
    .Q(valid_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:172.7-172.36|rtl/cve2/cve2_prefetch_buffer.sv:171.14-173.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7180  (
    .A(fetch_addr_q),
    .B(\$51 ),
    .S(\$procmux$7181_CMP ),
    .Y(\$procmux$7180_Y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:155.7-155.38|rtl/cve2/cve2_prefetch_buffer.sv:154.14-156.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7182  (
    .A(stored_addr_q),
    .B(\$auto$rtlil.cc:3092:Mux$1593 ),
    .S(\$procmux$7183_CMP ),
    .Y(\$procmux$7182_Y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:92.5" */
  \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(fifo_clear),
    .clk_i(clk_i),
    .in_addr_i(fifo_addr),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_raw),
    .rst_ni(rst_ni)
  );
  assign busy_o = \$3 ;
  assign fifo_clear = branch_i;
  assign rdata_outstanding_rev[0] = rdata_outstanding_q[1];
  assign rdata_outstanding_rev[1] = rdata_outstanding_q[0];
  assign fifo_ready = \$auto$rtlil.cc:2965:LogicNot$1586 ;
  assign valid_new_req = \$16 ;
  assign valid_req = \$18 ;
  assign valid_req_d = \$22 ;
  assign discard_req_d = \$26 ;
  assign stored_addr_en = \$34 ;
  assign stored_addr_d = instr_addr;
  assign fetch_addr_en = \$44 ;
  assign fetch_addr_d = \$51 ;
  assign instr_addr = \$auto$rtlil.cc:3092:Mux$1593 ;
  assign instr_addr_w_aligned = { instr_addr[31:2], 2'h0 };
  assign rdata_outstanding_n[0] = \$61 ;
  assign branch_discard_n[0] = \$71 ;
  assign rdata_outstanding_n[1] = \$77 ;
  assign branch_discard_n[1] = \$89 ;
  assign rdata_outstanding_s = \$auto$rtlil.cc:3092:Mux$1594 ;
  assign branch_discard_s = \$auto$rtlil.cc:3092:Mux$1595 ;
  assign fifo_valid = \$95 ;
  assign fifo_addr = addr_i;
  assign instr_req_o = valid_req;
  assign instr_addr_o = instr_addr_w_aligned;
  assign valid_o = valid_raw;
  assign \$procmux$7181_CMP  = fetch_addr_en;
  assign \$fetch_addr_q$55  = \$procmux$7180_Y ;
  assign \$procmux$7183_CMP  = stored_addr_en;
  assign \$stored_addr_q$38  = \$procmux$7182_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1597  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1588  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1591  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_register_file_ff.sv:13.8" */
module \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire \$11 ;
  wire \$14 ;
  wire \$17 ;
  wire \$2 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$32 ;
  wire \$35 ;
  wire \$38 ;
  wire \$41 ;
  wire \$44 ;
  wire \$47 ;
  wire \$5 ;
  wire \$50 ;
  wire \$53 ;
  wire \$56 ;
  wire \$59 ;
  wire \$62 ;
  wire \$65 ;
  wire \$68 ;
  wire \$71 ;
  wire \$74 ;
  wire \$77 ;
  wire \$8 ;
  wire \$80 ;
  wire \$83 ;
  wire \$86 ;
  wire \$89 ;
  wire \$92 ;
  wire \$auto$rtlil.cc:2965:LogicNot$900 ;
  wire \$auto$rtlil.cc:2965:LogicNot$901 ;
  wire \$auto$rtlil.cc:2965:LogicNot$902 ;
  wire \$auto$rtlil.cc:2965:LogicNot$903 ;
  wire \$auto$rtlil.cc:2965:LogicNot$904 ;
  wire \$auto$rtlil.cc:2965:LogicNot$905 ;
  wire \$auto$rtlil.cc:2965:LogicNot$906 ;
  wire \$auto$rtlil.cc:2965:LogicNot$907 ;
  wire \$auto$rtlil.cc:2965:LogicNot$908 ;
  wire \$auto$rtlil.cc:2965:LogicNot$909 ;
  wire \$auto$rtlil.cc:2965:LogicNot$910 ;
  wire \$auto$rtlil.cc:2965:LogicNot$911 ;
  wire \$auto$rtlil.cc:2965:LogicNot$912 ;
  wire \$auto$rtlil.cc:2965:LogicNot$913 ;
  wire \$auto$rtlil.cc:2965:LogicNot$914 ;
  wire \$auto$rtlil.cc:2965:LogicNot$915 ;
  wire \$auto$rtlil.cc:2965:LogicNot$916 ;
  wire \$auto$rtlil.cc:2965:LogicNot$917 ;
  wire \$auto$rtlil.cc:2965:LogicNot$918 ;
  wire \$auto$rtlil.cc:2965:LogicNot$919 ;
  wire \$auto$rtlil.cc:2965:LogicNot$920 ;
  wire \$auto$rtlil.cc:2965:LogicNot$921 ;
  wire \$auto$rtlil.cc:2965:LogicNot$922 ;
  wire \$auto$rtlil.cc:2965:LogicNot$923 ;
  wire \$auto$rtlil.cc:2965:LogicNot$924 ;
  wire \$auto$rtlil.cc:2965:LogicNot$925 ;
  wire \$auto$rtlil.cc:2965:LogicNot$926 ;
  wire \$auto$rtlil.cc:2965:LogicNot$927 ;
  wire \$auto$rtlil.cc:2965:LogicNot$928 ;
  wire \$auto$rtlil.cc:2965:LogicNot$929 ;
  wire \$auto$rtlil.cc:2965:LogicNot$930 ;
  wire \$auto$rtlil.cc:2965:LogicNot$931 ;
  wire \$auto$rtlil.cc:2965:LogicNot$932 ;
  wire \$auto$rtlil.cc:2965:LogicNot$933 ;
  wire \$auto$rtlil.cc:2965:LogicNot$934 ;
  wire \$auto$rtlil.cc:2965:LogicNot$935 ;
  wire \$auto$rtlil.cc:2965:LogicNot$936 ;
  wire \$auto$rtlil.cc:2965:LogicNot$937 ;
  wire \$auto$rtlil.cc:2965:LogicNot$938 ;
  wire \$auto$rtlil.cc:2965:LogicNot$939 ;
  wire \$auto$rtlil.cc:2965:LogicNot$940 ;
  wire \$auto$rtlil.cc:2965:LogicNot$941 ;
  wire \$auto$rtlil.cc:2965:LogicNot$942 ;
  wire \$auto$rtlil.cc:2965:LogicNot$943 ;
  wire \$auto$rtlil.cc:2965:LogicNot$944 ;
  wire \$auto$rtlil.cc:2965:LogicNot$945 ;
  wire \$auto$rtlil.cc:2965:LogicNot$946 ;
  wire \$auto$rtlil.cc:2965:LogicNot$947 ;
  wire \$auto$rtlil.cc:2965:LogicNot$948 ;
  wire \$auto$rtlil.cc:2965:LogicNot$949 ;
  wire \$auto$rtlil.cc:2965:LogicNot$950 ;
  wire \$auto$rtlil.cc:2965:LogicNot$951 ;
  wire \$auto$rtlil.cc:2965:LogicNot$952 ;
  wire \$auto$rtlil.cc:2965:LogicNot$953 ;
  wire \$auto$rtlil.cc:2965:LogicNot$954 ;
  wire \$auto$rtlil.cc:2965:LogicNot$955 ;
  wire \$auto$rtlil.cc:2965:LogicNot$956 ;
  wire \$auto$rtlil.cc:2965:LogicNot$957 ;
  wire \$auto$rtlil.cc:2965:LogicNot$958 ;
  wire \$auto$rtlil.cc:2965:LogicNot$959 ;
  wire \$auto$rtlil.cc:2965:LogicNot$960 ;
  wire \$auto$rtlil.cc:2965:LogicNot$961 ;
  wire \$auto$rtlil.cc:3009:Lt$962 ;
  wire \$auto$rtlil.cc:3009:Lt$965 ;
  wire \$auto$rtlil.cc:3092:Mux$869 ;
  wire \$auto$rtlil.cc:3092:Mux$870 ;
  wire \$auto$rtlil.cc:3092:Mux$871 ;
  wire \$auto$rtlil.cc:3092:Mux$872 ;
  wire \$auto$rtlil.cc:3092:Mux$873 ;
  wire \$auto$rtlil.cc:3092:Mux$874 ;
  wire \$auto$rtlil.cc:3092:Mux$875 ;
  wire \$auto$rtlil.cc:3092:Mux$876 ;
  wire \$auto$rtlil.cc:3092:Mux$877 ;
  wire \$auto$rtlil.cc:3092:Mux$878 ;
  wire \$auto$rtlil.cc:3092:Mux$879 ;
  wire \$auto$rtlil.cc:3092:Mux$880 ;
  wire \$auto$rtlil.cc:3092:Mux$881 ;
  wire \$auto$rtlil.cc:3092:Mux$882 ;
  wire \$auto$rtlil.cc:3092:Mux$883 ;
  wire \$auto$rtlil.cc:3092:Mux$884 ;
  wire \$auto$rtlil.cc:3092:Mux$885 ;
  wire \$auto$rtlil.cc:3092:Mux$886 ;
  wire \$auto$rtlil.cc:3092:Mux$887 ;
  wire \$auto$rtlil.cc:3092:Mux$888 ;
  wire \$auto$rtlil.cc:3092:Mux$889 ;
  wire \$auto$rtlil.cc:3092:Mux$890 ;
  wire \$auto$rtlil.cc:3092:Mux$891 ;
  wire \$auto$rtlil.cc:3092:Mux$892 ;
  wire \$auto$rtlil.cc:3092:Mux$893 ;
  wire \$auto$rtlil.cc:3092:Mux$894 ;
  wire \$auto$rtlil.cc:3092:Mux$895 ;
  wire \$auto$rtlil.cc:3092:Mux$896 ;
  wire \$auto$rtlil.cc:3092:Mux$897 ;
  wire \$auto$rtlil.cc:3092:Mux$898 ;
  wire \$auto$rtlil.cc:3092:Mux$899 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$964 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$967 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$963 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$966 ;
  wire [31:0] \$procmux$12132_Y ;
  wire \$procmux$12133_CMP ;
  wire [31:0] \$procmux$12134_Y ;
  wire \$procmux$12135_CMP ;
  wire [31:0] \$procmux$12136_Y ;
  wire \$procmux$12137_CMP ;
  wire [31:0] \$procmux$12138_Y ;
  wire \$procmux$12139_CMP ;
  wire [31:0] \$procmux$12140_Y ;
  wire \$procmux$12141_CMP ;
  wire [31:0] \$procmux$12142_Y ;
  wire \$procmux$12143_CMP ;
  wire [31:0] \$procmux$12144_Y ;
  wire \$procmux$12145_CMP ;
  wire [31:0] \$procmux$12146_Y ;
  wire \$procmux$12147_CMP ;
  wire [31:0] \$procmux$12148_Y ;
  wire \$procmux$12149_CMP ;
  wire [31:0] \$procmux$12150_Y ;
  wire \$procmux$12151_CMP ;
  wire [31:0] \$procmux$12152_Y ;
  wire \$procmux$12153_CMP ;
  wire [31:0] \$procmux$12154_Y ;
  wire \$procmux$12155_CMP ;
  wire [31:0] \$procmux$12156_Y ;
  wire \$procmux$12157_CMP ;
  wire [31:0] \$procmux$12158_Y ;
  wire \$procmux$12159_CMP ;
  wire [31:0] \$procmux$12160_Y ;
  wire \$procmux$12161_CMP ;
  wire [31:0] \$procmux$12162_Y ;
  wire \$procmux$12163_CMP ;
  wire [31:0] \$procmux$12164_Y ;
  wire \$procmux$12165_CMP ;
  wire [31:0] \$procmux$12166_Y ;
  wire \$procmux$12167_CMP ;
  wire [31:0] \$procmux$12168_Y ;
  wire \$procmux$12169_CMP ;
  wire [31:0] \$procmux$12170_Y ;
  wire \$procmux$12171_CMP ;
  wire [31:0] \$procmux$12172_Y ;
  wire \$procmux$12173_CMP ;
  wire [31:0] \$procmux$12174_Y ;
  wire \$procmux$12175_CMP ;
  wire [31:0] \$procmux$12176_Y ;
  wire \$procmux$12177_CMP ;
  wire [31:0] \$procmux$12178_Y ;
  wire \$procmux$12179_CMP ;
  wire [31:0] \$procmux$12180_Y ;
  wire \$procmux$12181_CMP ;
  wire [31:0] \$procmux$12182_Y ;
  wire \$procmux$12183_CMP ;
  wire [31:0] \$procmux$12184_Y ;
  wire \$procmux$12185_CMP ;
  wire [31:0] \$procmux$12186_Y ;
  wire \$procmux$12187_CMP ;
  wire [31:0] \$procmux$12188_Y ;
  wire \$procmux$12189_CMP ;
  wire [31:0] \$procmux$12190_Y ;
  wire \$procmux$12191_CMP ;
  wire [31:0] \$procmux$12192_Y ;
  wire \$procmux$12193_CMP ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[127:96]$109 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[159:128]$113 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[191:160]$117 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[223:192]$121 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[255:224]$125 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[287:256]$129 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[319:288]$133 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[31:0]$97 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[351:320]$137 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[383:352]$141 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[415:384]$145 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[447:416]$149 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[479:448]$153 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[511:480]$157 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[543:512]$161 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[575:544]$165 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[607:576]$169 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[639:608]$173 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[63:32]$101 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[671:640]$177 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[703:672]$181 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[735:704]$185 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[767:736]$189 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[799:768]$193 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[831:800]$197 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[863:832]$201 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[895:864]$205 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[927:896]$209 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[959:928]$213 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[95:64]$105 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  wire [31:0] \$rf_reg_q[991:960]$217 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:19.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:25.32" */
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:29.32" */
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:26.32" */
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:30.32" */
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:43.40" */
  wire [1023:0] rf_reg;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:44.40" */
  wire [991:0] rf_reg_q;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:20.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:22.32" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:73.9" */
  wire unused_test_en;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:34.32" */
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:35.32" */
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:45.40" */
  wire [30:0] we_a_dec;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:36.32" */
  input we_a_i;
  wire we_a_i;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(waddr_a_i),
    .B(5'h01),
    .Y(\$2 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(waddr_a_i),
    .B(5'h04),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$904 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$906 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$908 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$910 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$912 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$12  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$11 ),
    .Y(\$auto$rtlil.cc:3092:Mux$872 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$914 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$916 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(waddr_a_i),
    .B(5'h05),
    .Y(\$14 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$918 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$920 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$922 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$924 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$926 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$873 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$928 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$930 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$159  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$932 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(waddr_a_i),
    .B(5'h06),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$934 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$936 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$171  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$938 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$175  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$940 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$179  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$942 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$874 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$944 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$946 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(waddr_a_i),
    .B(5'h07),
    .Y(\$20 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$948 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$950 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$952 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$203  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$954 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$956 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$875 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$211  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$958 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$215  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$960 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A({ 1'h0, raddr_a_i }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$962 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$219  (
    .A(rf_reg),
    .S(raddr_a_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$963 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(waddr_a_i),
    .B(5'h08),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$220  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$963 ),
    .S(\$auto$rtlil.cc:3009:Lt$962 ),
    .Y(\$auto$rtlil.cc:3092:Mux$964 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A({ 1'h0, raddr_b_i }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$965 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$222  (
    .A(rf_reg),
    .S(raddr_b_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$966 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$223  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$966 ),
    .S(\$auto$rtlil.cc:3009:Lt$965 ),
    .Y(\$auto$rtlil.cc:3092:Mux$967 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$876 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(waddr_a_i),
    .B(5'h09),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$877 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(waddr_a_i),
    .B(5'h0a),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$3  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$2 ),
    .Y(\$auto$rtlil.cc:3092:Mux$869 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$878 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(waddr_a_i),
    .B(5'h0b),
    .Y(\$32 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$33  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$32 ),
    .Y(\$auto$rtlil.cc:3092:Mux$879 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(waddr_a_i),
    .B(5'h0c),
    .Y(\$35 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$35 ),
    .Y(\$auto$rtlil.cc:3092:Mux$880 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(waddr_a_i),
    .B(5'h0d),
    .Y(\$38 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$39  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$38 ),
    .Y(\$auto$rtlil.cc:3092:Mux$881 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(waddr_a_i),
    .B(5'h02),
    .Y(\$5 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(waddr_a_i),
    .B(5'h0e),
    .Y(\$41 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$42  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$41 ),
    .Y(\$auto$rtlil.cc:3092:Mux$882 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(waddr_a_i),
    .B(5'h0f),
    .Y(\$44 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$45  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$44 ),
    .Y(\$auto$rtlil.cc:3092:Mux$883 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(waddr_a_i),
    .B(5'h10),
    .Y(\$47 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$48  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$47 ),
    .Y(\$auto$rtlil.cc:3092:Mux$884 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(waddr_a_i),
    .B(5'h11),
    .Y(\$50 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$51  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$50 ),
    .Y(\$auto$rtlil.cc:3092:Mux$885 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(waddr_a_i),
    .B(5'h12),
    .Y(\$53 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$54  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$53 ),
    .Y(\$auto$rtlil.cc:3092:Mux$886 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(waddr_a_i),
    .B(5'h13),
    .Y(\$56 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$57  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$56 ),
    .Y(\$auto$rtlil.cc:3092:Mux$887 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(waddr_a_i),
    .B(5'h14),
    .Y(\$59 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$6  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$5 ),
    .Y(\$auto$rtlil.cc:3092:Mux$870 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$60  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$59 ),
    .Y(\$auto$rtlil.cc:3092:Mux$888 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(waddr_a_i),
    .B(5'h15),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$63  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$62 ),
    .Y(\$auto$rtlil.cc:3092:Mux$889 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(waddr_a_i),
    .B(5'h16),
    .Y(\$65 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$66  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$65 ),
    .Y(\$auto$rtlil.cc:3092:Mux$890 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(waddr_a_i),
    .B(5'h17),
    .Y(\$68 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$69  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$68 ),
    .Y(\$auto$rtlil.cc:3092:Mux$891 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(waddr_a_i),
    .B(5'h03),
    .Y(\$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(waddr_a_i),
    .B(5'h18),
    .Y(\$71 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$72  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$71 ),
    .Y(\$auto$rtlil.cc:3092:Mux$892 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(waddr_a_i),
    .B(5'h19),
    .Y(\$74 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$74 ),
    .Y(\$auto$rtlil.cc:3092:Mux$893 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(waddr_a_i),
    .B(5'h1a),
    .Y(\$77 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$78  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$77 ),
    .Y(\$auto$rtlil.cc:3092:Mux$894 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(waddr_a_i),
    .B(5'h1b),
    .Y(\$80 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$81  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$80 ),
    .Y(\$auto$rtlil.cc:3092:Mux$895 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(waddr_a_i),
    .B(5'h1c),
    .Y(\$83 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$83 ),
    .Y(\$auto$rtlil.cc:3092:Mux$896 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(waddr_a_i),
    .B(5'h1d),
    .Y(\$86 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$87  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$86 ),
    .Y(\$auto$rtlil.cc:3092:Mux$897 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(waddr_a_i),
    .B(5'h1e),
    .Y(\$89 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$9  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$8 ),
    .Y(\$auto$rtlil.cc:3092:Mux$871 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$90  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$89 ),
    .Y(\$auto$rtlil.cc:3092:Mux$898 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(waddr_a_i),
    .B(5'h1f),
    .Y(\$92 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$93  (
    .A(1'h0),
    .B(we_a_i),
    .S(\$92 ),
    .Y(\$auto$rtlil.cc:3092:Mux$899 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$900 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$902 )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[10]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[319:288]$133 ),
    .Q(rf_reg_q[319:288])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[11]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[351:320]$137 ),
    .Q(rf_reg_q[351:320])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[12]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[383:352]$141 ),
    .Q(rf_reg_q[383:352])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[13]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[415:384]$145 ),
    .Q(rf_reg_q[415:384])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[14]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[447:416]$149 ),
    .Q(rf_reg_q[447:416])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[15]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[479:448]$153 ),
    .Q(rf_reg_q[479:448])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[16]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[511:480]$157 ),
    .Q(rf_reg_q[511:480])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[17]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[543:512]$161 ),
    .Q(rf_reg_q[543:512])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[18]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[575:544]$165 ),
    .Q(rf_reg_q[575:544])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[19]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[607:576]$169 ),
    .Q(rf_reg_q[607:576])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[1]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[31:0]$97 ),
    .Q(rf_reg_q[31:0])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[20]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[639:608]$173 ),
    .Q(rf_reg_q[639:608])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[21]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[671:640]$177 ),
    .Q(rf_reg_q[671:640])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[22]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[703:672]$181 ),
    .Q(rf_reg_q[703:672])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[23]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[735:704]$185 ),
    .Q(rf_reg_q[735:704])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[24]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[767:736]$189 ),
    .Q(rf_reg_q[767:736])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[25]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[799:768]$193 ),
    .Q(rf_reg_q[799:768])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[26]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[831:800]$197 ),
    .Q(rf_reg_q[831:800])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[27]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[863:832]$201 ),
    .Q(rf_reg_q[863:832])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[28]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[895:864]$205 ),
    .Q(rf_reg_q[895:864])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[29]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[927:896]$209 ),
    .Q(rf_reg_q[927:896])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[2]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[63:32]$101 ),
    .Q(rf_reg_q[63:32])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[30]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[959:928]$213 ),
    .Q(rf_reg_q[959:928])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[31]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[991:960]$217 ),
    .Q(rf_reg_q[991:960])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[3]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[95:64]$105 ),
    .Q(rf_reg_q[95:64])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[4]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[127:96]$109 ),
    .Q(rf_reg_q[127:96])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[5]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[159:128]$113 ),
    .Q(rf_reg_q[159:128])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[6]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[191:160]$117 ),
    .Q(rf_reg_q[191:160])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[7]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[223:192]$121 ),
    .Q(rf_reg_q[223:192])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[8]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[255:224]$125 ),
    .Q(rf_reg_q[255:224])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$rf_reg_q[9]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$rf_reg_q[287:256]$129 ),
    .Q(rf_reg_q[287:256])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12132  (
    .A(rf_reg_q[959:928]),
    .B(wdata_a_i),
    .S(\$procmux$12133_CMP ),
    .Y(\$procmux$12132_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12134  (
    .A(rf_reg_q[927:896]),
    .B(wdata_a_i),
    .S(\$procmux$12135_CMP ),
    .Y(\$procmux$12134_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12136  (
    .A(rf_reg_q[895:864]),
    .B(wdata_a_i),
    .S(\$procmux$12137_CMP ),
    .Y(\$procmux$12136_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12138  (
    .A(rf_reg_q[863:832]),
    .B(wdata_a_i),
    .S(\$procmux$12139_CMP ),
    .Y(\$procmux$12138_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12140  (
    .A(rf_reg_q[831:800]),
    .B(wdata_a_i),
    .S(\$procmux$12141_CMP ),
    .Y(\$procmux$12140_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12142  (
    .A(rf_reg_q[799:768]),
    .B(wdata_a_i),
    .S(\$procmux$12143_CMP ),
    .Y(\$procmux$12142_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12144  (
    .A(rf_reg_q[767:736]),
    .B(wdata_a_i),
    .S(\$procmux$12145_CMP ),
    .Y(\$procmux$12144_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12146  (
    .A(rf_reg_q[735:704]),
    .B(wdata_a_i),
    .S(\$procmux$12147_CMP ),
    .Y(\$procmux$12146_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12148  (
    .A(rf_reg_q[703:672]),
    .B(wdata_a_i),
    .S(\$procmux$12149_CMP ),
    .Y(\$procmux$12148_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12150  (
    .A(rf_reg_q[671:640]),
    .B(wdata_a_i),
    .S(\$procmux$12151_CMP ),
    .Y(\$procmux$12150_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12152  (
    .A(rf_reg_q[639:608]),
    .B(wdata_a_i),
    .S(\$procmux$12153_CMP ),
    .Y(\$procmux$12152_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12154  (
    .A(rf_reg_q[607:576]),
    .B(wdata_a_i),
    .S(\$procmux$12155_CMP ),
    .Y(\$procmux$12154_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12156  (
    .A(rf_reg_q[575:544]),
    .B(wdata_a_i),
    .S(\$procmux$12157_CMP ),
    .Y(\$procmux$12156_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12158  (
    .A(rf_reg_q[543:512]),
    .B(wdata_a_i),
    .S(\$procmux$12159_CMP ),
    .Y(\$procmux$12158_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12160  (
    .A(rf_reg_q[511:480]),
    .B(wdata_a_i),
    .S(\$procmux$12161_CMP ),
    .Y(\$procmux$12160_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12162  (
    .A(rf_reg_q[479:448]),
    .B(wdata_a_i),
    .S(\$procmux$12163_CMP ),
    .Y(\$procmux$12162_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12164  (
    .A(rf_reg_q[447:416]),
    .B(wdata_a_i),
    .S(\$procmux$12165_CMP ),
    .Y(\$procmux$12164_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12166  (
    .A(rf_reg_q[415:384]),
    .B(wdata_a_i),
    .S(\$procmux$12167_CMP ),
    .Y(\$procmux$12166_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12168  (
    .A(rf_reg_q[383:352]),
    .B(wdata_a_i),
    .S(\$procmux$12169_CMP ),
    .Y(\$procmux$12168_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12170  (
    .A(rf_reg_q[351:320]),
    .B(wdata_a_i),
    .S(\$procmux$12171_CMP ),
    .Y(\$procmux$12170_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12172  (
    .A(rf_reg_q[319:288]),
    .B(wdata_a_i),
    .S(\$procmux$12173_CMP ),
    .Y(\$procmux$12172_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12174  (
    .A(rf_reg_q[287:256]),
    .B(wdata_a_i),
    .S(\$procmux$12175_CMP ),
    .Y(\$procmux$12174_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12176  (
    .A(rf_reg_q[255:224]),
    .B(wdata_a_i),
    .S(\$procmux$12177_CMP ),
    .Y(\$procmux$12176_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12178  (
    .A(rf_reg_q[223:192]),
    .B(wdata_a_i),
    .S(\$procmux$12179_CMP ),
    .Y(\$procmux$12178_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12180  (
    .A(rf_reg_q[191:160]),
    .B(wdata_a_i),
    .S(\$procmux$12181_CMP ),
    .Y(\$procmux$12180_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12182  (
    .A(rf_reg_q[159:128]),
    .B(wdata_a_i),
    .S(\$procmux$12183_CMP ),
    .Y(\$procmux$12182_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12184  (
    .A(rf_reg_q[127:96]),
    .B(wdata_a_i),
    .S(\$procmux$12185_CMP ),
    .Y(\$procmux$12184_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12186  (
    .A(rf_reg_q[95:64]),
    .B(wdata_a_i),
    .S(\$procmux$12187_CMP ),
    .Y(\$procmux$12186_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12188  (
    .A(rf_reg_q[63:32]),
    .B(wdata_a_i),
    .S(\$procmux$12189_CMP ),
    .Y(\$procmux$12188_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12190  (
    .A(rf_reg_q[31:0]),
    .B(wdata_a_i),
    .S(\$procmux$12191_CMP ),
    .Y(\$procmux$12190_Y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:59.9-59.34|rtl/cve2/cve2_register_file_ff.sv:58.16-60.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12192  (
    .A(rf_reg_q[991:960]),
    .B(wdata_a_i),
    .S(\$procmux$12193_CMP ),
    .Y(\$procmux$12192_Y )
  );
  assign we_a_dec = { \$auto$rtlil.cc:3092:Mux$899 , \$auto$rtlil.cc:3092:Mux$898 , \$auto$rtlil.cc:3092:Mux$897 , \$auto$rtlil.cc:3092:Mux$896 , \$auto$rtlil.cc:3092:Mux$895 , \$auto$rtlil.cc:3092:Mux$894 , \$auto$rtlil.cc:3092:Mux$893 , \$auto$rtlil.cc:3092:Mux$892 , \$auto$rtlil.cc:3092:Mux$891 , \$auto$rtlil.cc:3092:Mux$890 , \$auto$rtlil.cc:3092:Mux$889 , \$auto$rtlil.cc:3092:Mux$888 , \$auto$rtlil.cc:3092:Mux$887 , \$auto$rtlil.cc:3092:Mux$886 , \$auto$rtlil.cc:3092:Mux$885 , \$auto$rtlil.cc:3092:Mux$884 , \$auto$rtlil.cc:3092:Mux$883 , \$auto$rtlil.cc:3092:Mux$882 , \$auto$rtlil.cc:3092:Mux$881 , \$auto$rtlil.cc:3092:Mux$880 , \$auto$rtlil.cc:3092:Mux$879 , \$auto$rtlil.cc:3092:Mux$878 , \$auto$rtlil.cc:3092:Mux$877 , \$auto$rtlil.cc:3092:Mux$876 , \$auto$rtlil.cc:3092:Mux$875 , \$auto$rtlil.cc:3092:Mux$874 , \$auto$rtlil.cc:3092:Mux$873 , \$auto$rtlil.cc:3092:Mux$872 , \$auto$rtlil.cc:3092:Mux$871 , \$auto$rtlil.cc:3092:Mux$870 , \$auto$rtlil.cc:3092:Mux$869  };
  assign rf_reg[31:0] = 32'd0;
  assign rf_reg[1023:32] = rf_reg_q;
  assign rdata_a_o = \$auto$rtlil.cc:3092:Mux$964 ;
  assign rdata_b_o = \$auto$rtlil.cc:3092:Mux$967 ;
  assign unused_test_en = test_en_i;
  assign \$procmux$12133_CMP  = we_a_dec[29];
  assign \$rf_reg_q[959:928]$213  = \$procmux$12132_Y ;
  assign \$procmux$12135_CMP  = we_a_dec[28];
  assign \$rf_reg_q[927:896]$209  = \$procmux$12134_Y ;
  assign \$procmux$12137_CMP  = we_a_dec[27];
  assign \$rf_reg_q[895:864]$205  = \$procmux$12136_Y ;
  assign \$procmux$12139_CMP  = we_a_dec[26];
  assign \$rf_reg_q[863:832]$201  = \$procmux$12138_Y ;
  assign \$procmux$12141_CMP  = we_a_dec[25];
  assign \$rf_reg_q[831:800]$197  = \$procmux$12140_Y ;
  assign \$procmux$12143_CMP  = we_a_dec[24];
  assign \$rf_reg_q[799:768]$193  = \$procmux$12142_Y ;
  assign \$procmux$12145_CMP  = we_a_dec[23];
  assign \$rf_reg_q[767:736]$189  = \$procmux$12144_Y ;
  assign \$procmux$12147_CMP  = we_a_dec[22];
  assign \$rf_reg_q[735:704]$185  = \$procmux$12146_Y ;
  assign \$procmux$12149_CMP  = we_a_dec[21];
  assign \$rf_reg_q[703:672]$181  = \$procmux$12148_Y ;
  assign \$procmux$12151_CMP  = we_a_dec[20];
  assign \$rf_reg_q[671:640]$177  = \$procmux$12150_Y ;
  assign \$procmux$12153_CMP  = we_a_dec[19];
  assign \$rf_reg_q[639:608]$173  = \$procmux$12152_Y ;
  assign \$procmux$12155_CMP  = we_a_dec[18];
  assign \$rf_reg_q[607:576]$169  = \$procmux$12154_Y ;
  assign \$procmux$12157_CMP  = we_a_dec[17];
  assign \$rf_reg_q[575:544]$165  = \$procmux$12156_Y ;
  assign \$procmux$12159_CMP  = we_a_dec[16];
  assign \$rf_reg_q[543:512]$161  = \$procmux$12158_Y ;
  assign \$procmux$12161_CMP  = we_a_dec[15];
  assign \$rf_reg_q[511:480]$157  = \$procmux$12160_Y ;
  assign \$procmux$12163_CMP  = we_a_dec[14];
  assign \$rf_reg_q[479:448]$153  = \$procmux$12162_Y ;
  assign \$procmux$12165_CMP  = we_a_dec[13];
  assign \$rf_reg_q[447:416]$149  = \$procmux$12164_Y ;
  assign \$procmux$12167_CMP  = we_a_dec[12];
  assign \$rf_reg_q[415:384]$145  = \$procmux$12166_Y ;
  assign \$procmux$12169_CMP  = we_a_dec[11];
  assign \$rf_reg_q[383:352]$141  = \$procmux$12168_Y ;
  assign \$procmux$12171_CMP  = we_a_dec[10];
  assign \$rf_reg_q[351:320]$137  = \$procmux$12170_Y ;
  assign \$procmux$12173_CMP  = we_a_dec[9];
  assign \$rf_reg_q[319:288]$133  = \$procmux$12172_Y ;
  assign \$procmux$12175_CMP  = we_a_dec[8];
  assign \$rf_reg_q[287:256]$129  = \$procmux$12174_Y ;
  assign \$procmux$12177_CMP  = we_a_dec[7];
  assign \$rf_reg_q[255:224]$125  = \$procmux$12176_Y ;
  assign \$procmux$12179_CMP  = we_a_dec[6];
  assign \$rf_reg_q[223:192]$121  = \$procmux$12178_Y ;
  assign \$procmux$12181_CMP  = we_a_dec[5];
  assign \$rf_reg_q[191:160]$117  = \$procmux$12180_Y ;
  assign \$procmux$12183_CMP  = we_a_dec[4];
  assign \$rf_reg_q[159:128]$113  = \$procmux$12182_Y ;
  assign \$procmux$12185_CMP  = we_a_dec[3];
  assign \$rf_reg_q[127:96]$109  = \$procmux$12184_Y ;
  assign \$procmux$12187_CMP  = we_a_dec[2];
  assign \$rf_reg_q[95:64]$105  = \$procmux$12186_Y ;
  assign \$procmux$12189_CMP  = we_a_dec[1];
  assign \$rf_reg_q[63:32]$101  = \$procmux$12188_Y ;
  assign \$procmux$12191_CMP  = we_a_dec[0];
  assign \$rf_reg_q[31:0]$97  = \$procmux$12190_Y ;
  assign \$procmux$12193_CMP  = we_a_dec[30];
  assign \$rf_reg_q[991:960]$217  = \$procmux$12192_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$901  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$907  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$903  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$905  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$909  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$911  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$913  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$915  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$917  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$919  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$921  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$923  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$927  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$929  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$931  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$933  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$935  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$937  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$939  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$941  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$945  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$947  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$949  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$951  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$953  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$955  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$957  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$959  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$925  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$943  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$961  = rst_ni;
endmodule

/* src = "rtl/cve2/cve2_wb.sv:14.8" */
module \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$1 ;
  wire [31:0] \$11 ;
  wire [31:0] \$13 ;
  wire [31:0] \$15 ;
  wire \$17 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/cve2/cve2_wb.sv:16.36" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_wb.sv:18.36" */
  input en_wb_i;
  wire en_wb_i;
  /* src = "rtl/cve2/cve2_wb.sv:20.36" */
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:21.36" */
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:38.36" */
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  /* src = "rtl/cve2/cve2_wb.sv:37.36" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_wb.sv:24.36" */
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:23.36" */
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:26.36" */
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:33.36" */
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:27.36" */
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:30.36" */
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:45.16" */
  wire [63:0] rf_wdata_wb_mux;
  /* src = "rtl/cve2/cve2_wb.sv:46.16" */
  wire [1:0] rf_wdata_wb_mux_we;
  /* src = "rtl/cve2/cve2_wb.sv:34.36" */
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:28.36" */
  input rf_we_id_i;
  wire rf_we_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:31.36" */
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:35.36" */
  output rf_we_wb_o;
  wire rf_we_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:17.36" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_perf_count_id_i),
    .B(en_wb_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0], rf_wdata_wb_mux_we[0] }),
    .B(rf_wdata_wb_mux[63:32]),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$12  (
    .A({ rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1], rf_wdata_wb_mux_we[1] }),
    .B(rf_wdata_wb_mux[31:0]),
    .Y(\$13 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(rf_wdata_wb_mux_we),
    .Y(\$17 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(lsu_resp_valid_i),
    .B(lsu_resp_err_i),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$1 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(perf_instr_ret_wb_o),
    .B(instr_is_compressed_id_i),
    .Y(\$9 )
  );
  assign rf_waddr_wb_o = rf_waddr_id_i;
  assign rf_wdata_wb_mux[63:32] = rf_wdata_id_i;
  assign rf_wdata_wb_mux_we[0] = rf_we_id_i;
  assign perf_instr_ret_wb_o = \$7 ;
  assign perf_instr_ret_compressed_wb_o = \$9 ;
  assign rf_wdata_wb_mux[31:0] = rf_wdata_lsu_i;
  assign rf_wdata_wb_mux_we[1] = rf_we_lsu_i;
  assign rf_wdata_wb_o = \$15 ;
  assign rf_we_wb_o = \$17 ;
endmodule

/* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:17.8" */
module \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom (clk_i, rst_ni, req_i, addr_i, rdata_o);
  wire \$6 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1680 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1681 ;
  wire \$auto$rtlil.cc:3009:Lt$1682 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$1679 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1684 ;
  wire [63:0] \$auto$rtlil.cc:3113:Bmux$1683 ;
  wire [63:0] \$procmux$3710_Y ;
  wire \$procmux$3711_CMP ;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" */
  wire [63:0] \$rdata_o$10 ;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.31" */
  wire [4:0] addr_d;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:21.24" */
  input [63:0] addr_i;
  wire [63:0] addr_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.39" */
  wire [4:0] addr_q;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:27.29" */
  wire [1279:0] mem;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:22.24" */
  output [63:0] rdata_o;
  wire [63:0] rdata_o;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:20.24" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  \$mux  #(
    .WIDTH(32'd5)
  ) \$0  (
    .A(addr_q),
    .B(addr_i[7:3]),
    .S(req_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1679 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1680 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_q),
    .B(5'h14),
    .Y(\$6 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A({ 1'h0, addr_q }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$1682 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$8  (
    .A(2048'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx7b2000737b2024737b30257310852823f1402473a79ff06f7b2024737b30257310052423001000737b2024737b30257310052c2300c5151300c5551300000517fd5ff06ffa0418e3002474134004440300a40433f140247302041c63001474134004440300a4043310852023f140247300c5151300c55513000005177b3510737b2410730ff0000f000000130500006f000000130840006f000000130180006f),
    .S(addr_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1683 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$9  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1683 ),
    .S(\$auto$rtlil.cc:3009:Lt$1682 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1684 )
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:55.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$driver$addr_q  (
    .AD(5'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(addr_d),
    .Q(addr_q)
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.7-68.29|rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3710  (
    .A(64'h0000000000000000),
    .B(\$auto$rtlil.cc:3092:Mux$1684 ),
    .S(\$procmux$3711_CMP ),
    .Y(\$procmux$3710_Y )
  );
  assign mem = 1280'h7b2000737b2024737b30257310852823f1402473a79ff06f7b2024737b30257310052423001000737b2024737b30257310052c2300c5151300c5551300000517fd5ff06ffa0418e3002474134004440300a40433f140247302041c63001474134004440300a4043310852023f140247300c5151300c55513000005177b3510737b2410730ff0000f000000130500006f000000130840006f000000130180006f;
  assign addr_d = \$auto$rtlil.cc:3092:Mux$1679 ;
  assign rdata_o = \$rdata_o$10 ;
  assign \$procmux$3711_CMP  = \$6 ;
  assign \$rdata_o$10  = \$procmux$3710_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1681  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1301 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1302 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$8394_Y ;
  wire \$procmux$8395_CMP ;
  wire [1:0] \$procmux$8396_Y ;
  wire \$procmux$8397_CMP ;
  wire [1:0] \$procmux$8399_Y ;
  wire \$procmux$8400_CMP ;
  wire [1:0] \$procmux$8402_Y ;
  wire \$procmux$8403_CMP ;
  wire [1:0] \$procmux$8405_Y ;
  wire \$procmux$8406_CMP ;
  wire [1:0] \$procmux$8408_Y ;
  wire \$procmux$8409_CMP ;
  wire [1:0] \$procmux$8411_Y ;
  wire \$procmux$8412_CMP ;
  wire [1:0] \$procmux$8415_Y ;
  wire \$procmux$8416_CMP ;
  wire [1:0] \$procmux$8418_Y ;
  wire \$procmux$8419_CMP ;
  wire [1:0] \$procmux$8422_Y ;
  wire \$procmux$8423_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1301 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8394  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$8395_CMP ),
    .Y(\$procmux$8394_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8396  (
    .A(2'hx),
    .B(\$procmux$8394_Y ),
    .S(\$procmux$8397_CMP ),
    .Y(\$procmux$8396_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8399  (
    .A(\$procmux$8396_Y ),
    .B(2'hx),
    .S(\$procmux$8400_CMP ),
    .Y(\$procmux$8399_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8402  (
    .A(\$procmux$8399_Y ),
    .B(2'hx),
    .S(\$procmux$8403_CMP ),
    .Y(\$procmux$8402_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8405  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$8406_CMP ),
    .Y(\$procmux$8405_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8408  (
    .A(\$procmux$8405_Y ),
    .B(2'hx),
    .S(\$procmux$8409_CMP ),
    .Y(\$procmux$8408_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8411  (
    .A(\$procmux$8408_Y ),
    .B(2'hx),
    .S(\$procmux$8412_CMP ),
    .Y(\$procmux$8411_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8415  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$8416_CMP ),
    .Y(\$procmux$8415_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8418  (
    .A(\$procmux$8415_Y ),
    .B(2'hx),
    .S(\$procmux$8419_CMP ),
    .Y(\$procmux$8418_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8422  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$8423_CMP ),
    .Y(\$procmux$8422_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$8395_CMP  = down_i;
  assign \$procmux$8397_CMP  = en_i;
  assign \$procmux$8400_CMP  = load_i;
  assign \$procmux$8403_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$8402_Y ;
  assign \$procmux$8406_CMP  = en_i;
  assign \$procmux$8409_CMP  = load_i;
  assign \$procmux$8412_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$8411_Y ;
  assign \$procmux$8416_CMP  = load_i;
  assign \$procmux$8419_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$8418_Y ;
  assign \$procmux$8423_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$8422_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1302  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1309 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1310 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$8307_Y ;
  wire \$procmux$8308_CMP ;
  wire [1:0] \$procmux$8309_Y ;
  wire \$procmux$8310_CMP ;
  wire [1:0] \$procmux$8312_Y ;
  wire \$procmux$8313_CMP ;
  wire [1:0] \$procmux$8315_Y ;
  wire \$procmux$8316_CMP ;
  wire [1:0] \$procmux$8318_Y ;
  wire \$procmux$8319_CMP ;
  wire [1:0] \$procmux$8321_Y ;
  wire \$procmux$8322_CMP ;
  wire [1:0] \$procmux$8324_Y ;
  wire \$procmux$8325_CMP ;
  wire [1:0] \$procmux$8328_Y ;
  wire \$procmux$8329_CMP ;
  wire [1:0] \$procmux$8331_Y ;
  wire \$procmux$8332_CMP ;
  wire [1:0] \$procmux$8335_Y ;
  wire \$procmux$8336_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1309 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8307  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$8308_CMP ),
    .Y(\$procmux$8307_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8309  (
    .A(2'hx),
    .B(\$procmux$8307_Y ),
    .S(\$procmux$8310_CMP ),
    .Y(\$procmux$8309_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8312  (
    .A(\$procmux$8309_Y ),
    .B(2'hx),
    .S(\$procmux$8313_CMP ),
    .Y(\$procmux$8312_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8315  (
    .A(\$procmux$8312_Y ),
    .B(2'hx),
    .S(\$procmux$8316_CMP ),
    .Y(\$procmux$8315_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8318  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$8319_CMP ),
    .Y(\$procmux$8318_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8321  (
    .A(\$procmux$8318_Y ),
    .B(2'hx),
    .S(\$procmux$8322_CMP ),
    .Y(\$procmux$8321_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8324  (
    .A(\$procmux$8321_Y ),
    .B(2'hx),
    .S(\$procmux$8325_CMP ),
    .Y(\$procmux$8324_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8328  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$8329_CMP ),
    .Y(\$procmux$8328_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8331  (
    .A(\$procmux$8328_Y ),
    .B(2'hx),
    .S(\$procmux$8332_CMP ),
    .Y(\$procmux$8331_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8335  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$8336_CMP ),
    .Y(\$procmux$8335_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$8308_CMP  = down_i;
  assign \$procmux$8310_CMP  = en_i;
  assign \$procmux$8313_CMP  = load_i;
  assign \$procmux$8316_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$8315_Y ;
  assign \$procmux$8319_CMP  = en_i;
  assign \$procmux$8322_CMP  = load_i;
  assign \$procmux$8325_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$8324_Y ;
  assign \$procmux$8329_CMP  = load_i;
  assign \$procmux$8332_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$8331_Y ;
  assign \$procmux$8336_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$8335_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1310  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1317 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1318 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$8220_Y ;
  wire \$procmux$8221_CMP ;
  wire [1:0] \$procmux$8222_Y ;
  wire \$procmux$8223_CMP ;
  wire [1:0] \$procmux$8225_Y ;
  wire \$procmux$8226_CMP ;
  wire [1:0] \$procmux$8228_Y ;
  wire \$procmux$8229_CMP ;
  wire [1:0] \$procmux$8231_Y ;
  wire \$procmux$8232_CMP ;
  wire [1:0] \$procmux$8234_Y ;
  wire \$procmux$8235_CMP ;
  wire [1:0] \$procmux$8237_Y ;
  wire \$procmux$8238_CMP ;
  wire [1:0] \$procmux$8241_Y ;
  wire \$procmux$8242_CMP ;
  wire [1:0] \$procmux$8244_Y ;
  wire \$procmux$8245_CMP ;
  wire [1:0] \$procmux$8248_Y ;
  wire \$procmux$8249_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1317 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8220  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$8221_CMP ),
    .Y(\$procmux$8220_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8222  (
    .A(2'hx),
    .B(\$procmux$8220_Y ),
    .S(\$procmux$8223_CMP ),
    .Y(\$procmux$8222_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8225  (
    .A(\$procmux$8222_Y ),
    .B(2'hx),
    .S(\$procmux$8226_CMP ),
    .Y(\$procmux$8225_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8228  (
    .A(\$procmux$8225_Y ),
    .B(2'hx),
    .S(\$procmux$8229_CMP ),
    .Y(\$procmux$8228_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8231  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$8232_CMP ),
    .Y(\$procmux$8231_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8234  (
    .A(\$procmux$8231_Y ),
    .B(2'hx),
    .S(\$procmux$8235_CMP ),
    .Y(\$procmux$8234_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8237  (
    .A(\$procmux$8234_Y ),
    .B(2'hx),
    .S(\$procmux$8238_CMP ),
    .Y(\$procmux$8237_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8241  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$8242_CMP ),
    .Y(\$procmux$8241_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8244  (
    .A(\$procmux$8241_Y ),
    .B(2'hx),
    .S(\$procmux$8245_CMP ),
    .Y(\$procmux$8244_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8248  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$8249_CMP ),
    .Y(\$procmux$8248_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$8221_CMP  = down_i;
  assign \$procmux$8223_CMP  = en_i;
  assign \$procmux$8226_CMP  = load_i;
  assign \$procmux$8229_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$8228_Y ;
  assign \$procmux$8232_CMP  = en_i;
  assign \$procmux$8235_CMP  = load_i;
  assign \$procmux$8238_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$8237_Y ;
  assign \$procmux$8242_CMP  = load_i;
  assign \$procmux$8245_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$8244_Y ;
  assign \$procmux$8249_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$8248_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1318  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1325 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1326 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$8133_Y ;
  wire \$procmux$8134_CMP ;
  wire [1:0] \$procmux$8135_Y ;
  wire \$procmux$8136_CMP ;
  wire [1:0] \$procmux$8138_Y ;
  wire \$procmux$8139_CMP ;
  wire [1:0] \$procmux$8141_Y ;
  wire \$procmux$8142_CMP ;
  wire [1:0] \$procmux$8144_Y ;
  wire \$procmux$8145_CMP ;
  wire [1:0] \$procmux$8147_Y ;
  wire \$procmux$8148_CMP ;
  wire [1:0] \$procmux$8150_Y ;
  wire \$procmux$8151_CMP ;
  wire [1:0] \$procmux$8154_Y ;
  wire \$procmux$8155_CMP ;
  wire [1:0] \$procmux$8157_Y ;
  wire \$procmux$8158_CMP ;
  wire [1:0] \$procmux$8161_Y ;
  wire \$procmux$8162_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1325 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8133  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$8134_CMP ),
    .Y(\$procmux$8133_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8135  (
    .A(2'hx),
    .B(\$procmux$8133_Y ),
    .S(\$procmux$8136_CMP ),
    .Y(\$procmux$8135_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8138  (
    .A(\$procmux$8135_Y ),
    .B(2'hx),
    .S(\$procmux$8139_CMP ),
    .Y(\$procmux$8138_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8141  (
    .A(\$procmux$8138_Y ),
    .B(2'hx),
    .S(\$procmux$8142_CMP ),
    .Y(\$procmux$8141_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8144  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$8145_CMP ),
    .Y(\$procmux$8144_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8147  (
    .A(\$procmux$8144_Y ),
    .B(2'hx),
    .S(\$procmux$8148_CMP ),
    .Y(\$procmux$8147_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8150  (
    .A(\$procmux$8147_Y ),
    .B(2'hx),
    .S(\$procmux$8151_CMP ),
    .Y(\$procmux$8150_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8154  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$8155_CMP ),
    .Y(\$procmux$8154_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8157  (
    .A(\$procmux$8154_Y ),
    .B(2'hx),
    .S(\$procmux$8158_CMP ),
    .Y(\$procmux$8157_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8161  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$8162_CMP ),
    .Y(\$procmux$8161_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$8134_CMP  = down_i;
  assign \$procmux$8136_CMP  = en_i;
  assign \$procmux$8139_CMP  = load_i;
  assign \$procmux$8142_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$8141_Y ;
  assign \$procmux$8145_CMP  = en_i;
  assign \$procmux$8148_CMP  = load_i;
  assign \$procmux$8151_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$8150_Y ;
  assign \$procmux$8155_CMP  = load_i;
  assign \$procmux$8158_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$8157_Y ;
  assign \$procmux$8162_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$8161_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1326  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$565 ;
  wire \$auto$rtlil.cc:2965:LogicNot$566 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$13869_Y ;
  wire \$procmux$13870_CMP ;
  wire [1:0] \$procmux$13871_Y ;
  wire \$procmux$13872_CMP ;
  wire [1:0] \$procmux$13874_Y ;
  wire \$procmux$13875_CMP ;
  wire [1:0] \$procmux$13877_Y ;
  wire \$procmux$13878_CMP ;
  wire [1:0] \$procmux$13880_Y ;
  wire \$procmux$13881_CMP ;
  wire [1:0] \$procmux$13883_Y ;
  wire \$procmux$13884_CMP ;
  wire [1:0] \$procmux$13886_Y ;
  wire \$procmux$13887_CMP ;
  wire [1:0] \$procmux$13890_Y ;
  wire \$procmux$13891_CMP ;
  wire [1:0] \$procmux$13893_Y ;
  wire \$procmux$13894_CMP ;
  wire [1:0] \$procmux$13897_Y ;
  wire \$procmux$13898_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$565 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13869  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$13870_CMP ),
    .Y(\$procmux$13869_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13871  (
    .A(2'hx),
    .B(\$procmux$13869_Y ),
    .S(\$procmux$13872_CMP ),
    .Y(\$procmux$13871_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13874  (
    .A(\$procmux$13871_Y ),
    .B(2'hx),
    .S(\$procmux$13875_CMP ),
    .Y(\$procmux$13874_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13877  (
    .A(\$procmux$13874_Y ),
    .B(2'hx),
    .S(\$procmux$13878_CMP ),
    .Y(\$procmux$13877_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13880  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$13881_CMP ),
    .Y(\$procmux$13880_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13883  (
    .A(\$procmux$13880_Y ),
    .B(2'hx),
    .S(\$procmux$13884_CMP ),
    .Y(\$procmux$13883_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13886  (
    .A(\$procmux$13883_Y ),
    .B(2'hx),
    .S(\$procmux$13887_CMP ),
    .Y(\$procmux$13886_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13890  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$13891_CMP ),
    .Y(\$procmux$13890_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13893  (
    .A(\$procmux$13890_Y ),
    .B(2'hx),
    .S(\$procmux$13894_CMP ),
    .Y(\$procmux$13893_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13897  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$13898_CMP ),
    .Y(\$procmux$13897_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$13870_CMP  = down_i;
  assign \$procmux$13872_CMP  = en_i;
  assign \$procmux$13875_CMP  = load_i;
  assign \$procmux$13878_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$13877_Y ;
  assign \$procmux$13881_CMP  = en_i;
  assign \$procmux$13884_CMP  = load_i;
  assign \$procmux$13887_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$13886_Y ;
  assign \$procmux$13891_CMP  = load_i;
  assign \$procmux$13894_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$13893_Y ;
  assign \$procmux$13898_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$13897_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$566  = rst_ni;
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire [1:0] \$2 ;
  wire [1:0] \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$814 ;
  wire \$auto$rtlil.cc:2965:LogicNot$815 ;
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:67.18-73.12" */
  wire [1:0] \$counter_d$6 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:63.9-73.12" */
  wire [1:0] \$counter_d$8 ;
  wire [1:0] \$procmux$13124_Y ;
  wire \$procmux$13125_CMP ;
  wire [1:0] \$procmux$13126_Y ;
  wire \$procmux$13127_CMP ;
  wire [1:0] \$procmux$13129_Y ;
  wire \$procmux$13130_CMP ;
  wire [1:0] \$procmux$13132_Y ;
  wire \$procmux$13133_CMP ;
  wire [1:0] \$procmux$13135_Y ;
  wire \$procmux$13136_CMP ;
  wire [1:0] \$procmux$13138_Y ;
  wire \$procmux$13139_CMP ;
  wire [1:0] \$procmux$13141_Y ;
  wire \$procmux$13142_CMP ;
  wire [1:0] \$procmux$13145_Y ;
  wire \$procmux$13146_CMP ;
  wire [1:0] \$procmux$13148_Y ;
  wire \$procmux$13149_CMP ;
  wire [1:0] \$procmux$13152_Y ;
  wire \$procmux$13153_CMP ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$814 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$3  (
    .A(counter_q),
    .B({ 1'h0, delta_i }),
    .Y(\$4 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$counter_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .Q(counter_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:69.17-69.49|rtl/common_cells/delta_counter.sv:68.13-72.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13124  (
    .A(\$4 ),
    .B(\$2 ),
    .S(\$procmux$13125_CMP ),
    .Y(\$procmux$13124_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13126  (
    .A(2'hx),
    .B(\$procmux$13124_Y ),
    .S(\$procmux$13127_CMP ),
    .Y(\$procmux$13126_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13129  (
    .A(\$procmux$13126_Y ),
    .B(2'hx),
    .S(\$procmux$13130_CMP ),
    .Y(\$procmux$13129_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13132  (
    .A(\$procmux$13129_Y ),
    .B(2'hx),
    .S(\$procmux$13133_CMP ),
    .Y(\$procmux$13132_Y )
  );
  /* src = "rtl/common_cells/delta_counter.sv:68.13-72.16|rtl/common_cells/delta_counter.sv:67.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13135  (
    .A(counter_q),
    .B(\$counter_d$5 ),
    .S(\$procmux$13136_CMP ),
    .Y(\$procmux$13135_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13138  (
    .A(\$procmux$13135_Y ),
    .B(2'hx),
    .S(\$procmux$13139_CMP ),
    .Y(\$procmux$13138_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13141  (
    .A(\$procmux$13138_Y ),
    .B(2'hx),
    .S(\$procmux$13142_CMP ),
    .Y(\$procmux$13141_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13145  (
    .A(\$counter_d$6 ),
    .B({ 1'h0, d_i }),
    .S(\$procmux$13146_CMP ),
    .Y(\$procmux$13145_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13148  (
    .A(\$procmux$13145_Y ),
    .B(2'hx),
    .S(\$procmux$13149_CMP ),
    .Y(\$procmux$13148_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13152  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(\$procmux$13153_CMP ),
    .Y(\$procmux$13152_Y )
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
  assign counter_d = \$counter_d$8 ;
  assign \$procmux$13125_CMP  = down_i;
  assign \$procmux$13127_CMP  = en_i;
  assign \$procmux$13130_CMP  = load_i;
  assign \$procmux$13133_CMP  = clear_i;
  assign \$counter_d$5  = \$procmux$13132_Y ;
  assign \$procmux$13136_CMP  = en_i;
  assign \$procmux$13139_CMP  = load_i;
  assign \$procmux$13142_CMP  = clear_i;
  assign \$counter_d$6  = \$procmux$13141_Y ;
  assign \$procmux$13146_CMP  = load_i;
  assign \$procmux$13149_CMP  = clear_i;
  assign \$counter_d$7  = \$procmux$13148_Y ;
  assign \$procmux$13153_CMP  = clear_i;
  assign \$counter_d$8  = \$procmux$13152_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$815  = rst_ni;
endmodule

/* src = "rtl/riscv-dbg/dm_csrs.sv:18.8" */
module \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs (clk_i, rst_ni, testmode_i, unavailable_i, hartinfo_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, data_i, data_o, halted_i, resumeack_i, hartsel_o
, haltreq_o, resumereq_o, clear_resumeack_o, cmd_valid_o, cmd_o, cmderror_valid_i, cmderror_i, cmdbusy_i, progbuf_o, data_valid_i, sbaddress_o, sbaddress_i, sbaddress_write_valid_o, sbreadonaddr_o, sbautoincrement_o, sbaccess_o, sbreadondata_o, sbdata_o, sbdata_read_valid_o, sbdata_write_valid_o, sbdata_i
, sbdata_valid_i, sbbusy_i, sberror_valid_i, sberror_i);
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$114 ;
  wire \$119 ;
  wire \$141 ;
  wire \$146 ;
  wire \$16 ;
  wire \$160 ;
  wire \$162 ;
  wire \$168 ;
  wire \$18 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$191 ;
  wire \$2 ;
  wire \$203 ;
  wire \$226 ;
  wire [2:0] \$228 ;
  wire [2:0] \$230 ;
  wire \$232 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$249 ;
  wire \$251 ;
  wire \$26 ;
  wire \$260 ;
  wire \$272 ;
  wire \$28 ;
  wire \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$291 ;
  wire \$293 ;
  wire \$30 ;
  wire \$300 ;
  wire \$306 ;
  wire \$308 ;
  wire \$315 ;
  wire [7:0] \$33 ;
  wire \$357 ;
  wire \$359 ;
  wire \$362 ;
  wire [31:0] \$365 ;
  wire \$368 ;
  wire \$382 ;
  wire \$384 ;
  wire \$386 ;
  wire \$391 ;
  wire \$393 ;
  wire \$54 ;
  wire \$56 ;
  wire \$64 ;
  wire \$66 ;
  wire \$74 ;
  wire \$76 ;
  wire \$8 ;
  wire \$81 ;
  wire \$86 ;
  wire \$88 ;
  wire \$93 ;
  wire \$98 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$a_abstractcs$332 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$a_abstractcs$348 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  wire [31:0] \$abstractauto_d$254 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$abstractauto_d$323 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$abstractauto_d$339 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$abstractauto_q$398 ;
  wire [1:0] \$auto$rtlil.cc:2957:Not$16661 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1178 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1179 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16662 ;
  wire \$auto$rtlil.cc:3004:And$16664 ;
  wire \$auto$rtlil.cc:3004:And$16666 ;
  wire \$auto$rtlil.cc:3009:Lt$1037 ;
  wire \$auto$rtlil.cc:3009:Lt$1039 ;
  wire \$auto$rtlil.cc:3009:Lt$1041 ;
  wire \$auto$rtlil.cc:3009:Lt$1043 ;
  wire \$auto$rtlil.cc:3009:Lt$1046 ;
  wire \$auto$rtlil.cc:3009:Lt$1049 ;
  wire \$auto$rtlil.cc:3009:Lt$1052 ;
  wire \$auto$rtlil.cc:3009:Lt$1055 ;
  wire \$auto$rtlil.cc:3009:Lt$1058 ;
  wire \$auto$rtlil.cc:3009:Lt$1061 ;
  wire \$auto$rtlil.cc:3009:Lt$1064 ;
  wire \$auto$rtlil.cc:3009:Lt$1067 ;
  wire \$auto$rtlil.cc:3009:Lt$1070 ;
  wire \$auto$rtlil.cc:3009:Lt$1073 ;
  wire \$auto$rtlil.cc:3009:Lt$1076 ;
  wire \$auto$rtlil.cc:3009:Lt$1079 ;
  wire \$auto$rtlil.cc:3009:Lt$1082 ;
  wire \$auto$rtlil.cc:3009:Lt$1088 ;
  wire \$auto$rtlil.cc:3009:Lt$1091 ;
  wire \$auto$rtlil.cc:3009:Lt$1097 ;
  wire \$auto$rtlil.cc:3009:Lt$1107 ;
  wire \$auto$rtlil.cc:3009:Lt$1110 ;
  wire \$auto$rtlil.cc:3009:Lt$1126 ;
  wire \$auto$rtlil.cc:3009:Lt$1132 ;
  wire \$auto$rtlil.cc:3009:Lt$1137 ;
  wire \$auto$rtlil.cc:3009:Lt$1153 ;
  wire \$auto$rtlil.cc:3009:Lt$1159 ;
  wire \$auto$rtlil.cc:3009:Lt$1169 ;
  wire \$auto$rtlil.cc:3009:Lt$1174 ;
  wire \$auto$rtlil.cc:3010:Le$1086 ;
  wire \$auto$rtlil.cc:3010:Le$1105 ;
  wire \$auto$rtlil.cc:3010:Le$1123 ;
  wire \$auto$rtlil.cc:3010:Le$1150 ;
  wire \$auto$rtlil.cc:3011:Eq$1094 ;
  wire \$auto$rtlil.cc:3011:Eq$1095 ;
  wire \$auto$rtlil.cc:3011:Eq$1096 ;
  wire \$auto$rtlil.cc:3011:Eq$1100 ;
  wire \$auto$rtlil.cc:3011:Eq$1101 ;
  wire \$auto$rtlil.cc:3011:Eq$1102 ;
  wire \$auto$rtlil.cc:3011:Eq$1103 ;
  wire \$auto$rtlil.cc:3011:Eq$1113 ;
  wire \$auto$rtlil.cc:3011:Eq$1114 ;
  wire \$auto$rtlil.cc:3011:Eq$1115 ;
  wire \$auto$rtlil.cc:3011:Eq$1116 ;
  wire \$auto$rtlil.cc:3011:Eq$1117 ;
  wire \$auto$rtlil.cc:3011:Eq$1118 ;
  wire \$auto$rtlil.cc:3011:Eq$1119 ;
  wire \$auto$rtlil.cc:3011:Eq$1120 ;
  wire \$auto$rtlil.cc:3011:Eq$1121 ;
  wire \$auto$rtlil.cc:3011:Eq$1135 ;
  wire \$auto$rtlil.cc:3011:Eq$1143 ;
  wire \$auto$rtlil.cc:3011:Eq$1144 ;
  wire \$auto$rtlil.cc:3011:Eq$1145 ;
  wire \$auto$rtlil.cc:3011:Eq$1146 ;
  wire \$auto$rtlil.cc:3011:Eq$1147 ;
  wire \$auto$rtlil.cc:3011:Eq$1148 ;
  wire \$auto$rtlil.cc:3011:Eq$1162 ;
  wire \$auto$rtlil.cc:3011:Eq$1164 ;
  wire \$auto$rtlil.cc:3011:Eq$1165 ;
  wire \$auto$rtlil.cc:3011:Eq$1166 ;
  wire \$auto$rtlil.cc:3011:Eq$1167 ;
  wire \$auto$rtlil.cc:3015:Ge$1085 ;
  wire \$auto$rtlil.cc:3015:Ge$1104 ;
  wire \$auto$rtlil.cc:3015:Ge$1122 ;
  wire \$auto$rtlil.cc:3015:Ge$1125 ;
  wire \$auto$rtlil.cc:3015:Ge$1136 ;
  wire \$auto$rtlil.cc:3015:Ge$1149 ;
  wire \$auto$rtlil.cc:3015:Ge$1152 ;
  wire \$auto$rtlil.cc:3015:Ge$1168 ;
  wire \$auto$rtlil.cc:3015:Ge$1173 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1127 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1138 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1154 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1170 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1175 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1038 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1040 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1042 ;
  wire \$auto$rtlil.cc:3092:Mux$1045 ;
  wire \$auto$rtlil.cc:3092:Mux$1048 ;
  wire \$auto$rtlil.cc:3092:Mux$1051 ;
  wire \$auto$rtlil.cc:3092:Mux$1054 ;
  wire \$auto$rtlil.cc:3092:Mux$1057 ;
  wire \$auto$rtlil.cc:3092:Mux$1060 ;
  wire \$auto$rtlil.cc:3092:Mux$1063 ;
  wire \$auto$rtlil.cc:3092:Mux$1066 ;
  wire \$auto$rtlil.cc:3092:Mux$1069 ;
  wire \$auto$rtlil.cc:3092:Mux$1072 ;
  wire \$auto$rtlil.cc:3092:Mux$1075 ;
  wire \$auto$rtlil.cc:3092:Mux$1078 ;
  wire \$auto$rtlil.cc:3092:Mux$1081 ;
  wire \$auto$rtlil.cc:3092:Mux$1084 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1090 ;
  wire \$auto$rtlil.cc:3092:Mux$1093 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1099 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1109 ;
  wire \$auto$rtlil.cc:3092:Mux$1112 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1128 ;
  wire \$auto$rtlil.cc:3092:Mux$1134 ;
  wire \$auto$rtlil.cc:3092:Mux$1139 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1155 ;
  wire \$auto$rtlil.cc:3092:Mux$1161 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1163 ;
  wire \$auto$rtlil.cc:3092:Mux$1171 ;
  wire \$auto$rtlil.cc:3092:Mux$1176 ;
  wire [63:0] \$auto$rtlil.cc:3093:Bwmux$1131 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1142 ;
  wire [255:0] \$auto$rtlil.cc:3093:Bwmux$1158 ;
  wire \$auto$rtlil.cc:3093:Bwmux$1172 ;
  wire \$auto$rtlil.cc:3093:Bwmux$1177 ;
  wire \$auto$rtlil.cc:3113:Bmux$1044 ;
  wire \$auto$rtlil.cc:3113:Bmux$1047 ;
  wire \$auto$rtlil.cc:3113:Bmux$1050 ;
  wire \$auto$rtlil.cc:3113:Bmux$1053 ;
  wire \$auto$rtlil.cc:3113:Bmux$1056 ;
  wire \$auto$rtlil.cc:3113:Bmux$1059 ;
  wire \$auto$rtlil.cc:3113:Bmux$1062 ;
  wire \$auto$rtlil.cc:3113:Bmux$1065 ;
  wire \$auto$rtlil.cc:3113:Bmux$1068 ;
  wire \$auto$rtlil.cc:3113:Bmux$1071 ;
  wire \$auto$rtlil.cc:3113:Bmux$1074 ;
  wire \$auto$rtlil.cc:3113:Bmux$1077 ;
  wire \$auto$rtlil.cc:3113:Bmux$1080 ;
  wire \$auto$rtlil.cc:3113:Bmux$1083 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$1089 ;
  wire \$auto$rtlil.cc:3113:Bmux$1092 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$1098 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$1108 ;
  wire \$auto$rtlil.cc:3113:Bmux$1111 ;
  wire \$auto$rtlil.cc:3113:Bmux$1133 ;
  wire \$auto$rtlil.cc:3113:Bmux$1160 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1129 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1130 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1140 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1141 ;
  wire [255:0] \$auto$rtlil.cc:3114:Demux$1156 ;
  wire [255:0] \$auto$rtlil.cc:3114:Demux$1157 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:550.5-552.8" */
  wire \$clear_resumeack_o$360 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire \$cmd_valid_d$122 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire \$cmd_valid_d$149 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire \$cmd_valid_d$172 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire \$cmd_valid_d$177 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire \$cmd_valid_d$206 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14" */
  wire \$cmd_valid_d$210 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire \$cmd_valid_d$244 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire \$cmd_valid_d$275 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire \$cmd_valid_d$322 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire \$cmd_valid_d$338 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire \$cmd_valid_q$397 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:306.13-308.16" */
  wire [2:0] \$cmderr_d$120 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire [2:0] \$cmderr_d$121 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" */
  wire [2:0] \$cmderr_d$147 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire [2:0] \$cmderr_d$148 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire [2:0] \$cmderr_d$171 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire [2:0] \$cmderr_d$176 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" */
  wire [2:0] \$cmderr_d$204 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire [2:0] \$cmderr_d$205 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14" */
  wire [2:0] \$cmderr_d$209 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:409.13-411.16" */
  wire [2:0] \$cmderr_d$233 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  wire [2:0] \$cmderr_d$234 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:423.13-425.16" */
  wire [2:0] \$cmderr_d$241 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire [2:0] \$cmderr_d$242 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:437.13-439.16" */
  wire [2:0] \$cmderr_d$252 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  wire [2:0] \$cmderr_d$253 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" */
  wire [2:0] \$cmderr_d$273 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire [2:0] \$cmderr_d$274 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [2:0] \$cmderr_d$320 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [2:0] \$cmderr_d$336 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" */
  wire [2:0] \$cmderr_d$351 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [2:0] \$cmderr_q$395 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire [31:0] \$command_d$243 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$command_d$321 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$command_d$337 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$command_q$396 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire [63:0] \$data_d$207 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14" */
  wire [63:0] \$data_d$211 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [63:0] \$data_d$328 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [63:0] \$data_d$344 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" */
  wire [63:0] \$data_d$352 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [63:0] \$data_q$403 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$dmcontrol_d$319 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$dmcontrol_d$335 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" */
  wire \$dmcontrol_d[30]$363 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$dmcontrol_q$394 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:576.5-579.8" */
  wire \$haltreq_o$379 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:116.5-118.8" */
  wire [31:0] \$haltsum0$5 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:133.5-135.8" */
  wire [31:0] \$haltsum1$13 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:150.5-152.8" */
  wire [31:0] \$haltsum2$21 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  wire [1:0] \$havereset_d_aligned$221 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [1:0] \$havereset_d_aligned$330 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [1:0] \$havereset_d_aligned$346 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" */
  wire \$havereset_d_aligned[0]$353 ;
  wire [21:0] \$procmux$10004_Y ;
  wire \$procmux$10005_CMP ;
  wire [21:0] \$procmux$10006_Y ;
  wire \$procmux$10007_CMP ;
  wire [21:0] \$procmux$10008_Y ;
  wire \$procmux$10009_CMP ;
  wire [31:0] \$procmux$10017_Y ;
  wire \$procmux$10018_CMP ;
  wire [31:0] \$procmux$10019_Y ;
  wire \$procmux$10020_CMP ;
  wire [31:0] \$procmux$10021_Y ;
  wire \$procmux$10022_CMP ;
  wire [1:0] \$procmux$10030_Y ;
  wire \$procmux$10031_CMP ;
  wire [1:0] \$procmux$10032_Y ;
  wire \$procmux$10033_CMP ;
  wire [1:0] \$procmux$10034_Y ;
  wire \$procmux$10035_CMP ;
  wire \$procmux$10043_Y ;
  wire \$procmux$10044_CMP ;
  wire \$procmux$10045_Y ;
  wire \$procmux$10046_CMP ;
  wire \$procmux$10047_Y ;
  wire \$procmux$10048_CMP ;
  wire [2:0] \$procmux$10056_Y ;
  wire \$procmux$10057_CMP ;
  wire [2:0] \$procmux$10059_Y ;
  wire \$procmux$10060_CMP ;
  wire [2:0] \$procmux$10061_Y ;
  wire \$procmux$10062_CMP ;
  wire [2:0] \$procmux$10063_Y ;
  wire \$procmux$10064_CMP ;
  wire [1:0] \$procmux$10074_Y ;
  wire \$procmux$10075_CMP ;
  wire [1:0] \$procmux$10076_Y ;
  wire \$procmux$10077_CMP ;
  wire [1:0] \$procmux$10078_Y ;
  wire \$procmux$10079_CMP ;
  wire [255:0] \$procmux$10088_Y ;
  wire \$procmux$10089_CMP ;
  wire [255:0] \$procmux$10090_Y ;
  wire \$procmux$10091_CMP ;
  wire [255:0] \$procmux$10092_Y ;
  wire \$procmux$10093_CMP ;
  wire \$procmux$10102_Y ;
  wire \$procmux$10103_CMP ;
  wire \$procmux$10104_Y ;
  wire \$procmux$10105_CMP ;
  wire \$procmux$10106_Y ;
  wire \$procmux$10107_CMP ;
  wire [2:0] \$procmux$10117_Y ;
  wire \$procmux$10118_CMP ;
  wire [2:0] \$procmux$10119_Y ;
  wire \$procmux$10120_CMP ;
  wire [2:0] \$procmux$10121_Y ;
  wire \$procmux$10122_CMP ;
  wire [2:0] \$procmux$10131_Y ;
  wire \$procmux$10132_CMP ;
  wire [2:0] \$procmux$10134_Y ;
  wire \$procmux$10135_CMP ;
  wire [2:0] \$procmux$10136_Y ;
  wire \$procmux$10137_CMP ;
  wire [2:0] \$procmux$10138_Y ;
  wire \$procmux$10139_CMP ;
  wire [1:0] \$procmux$10150_Y ;
  wire \$procmux$10151_CMP ;
  wire [1:0] \$procmux$10152_Y ;
  wire \$procmux$10153_CMP ;
  wire [1:0] \$procmux$10154_Y ;
  wire \$procmux$10155_CMP ;
  wire [31:0] \$procmux$10165_Y ;
  wire \$procmux$10166_CMP ;
  wire [31:0] \$procmux$10167_Y ;
  wire \$procmux$10168_CMP ;
  wire [31:0] \$procmux$10169_Y ;
  wire \$procmux$10170_CMP ;
  wire [2:0] \$procmux$10181_Y ;
  wire \$procmux$10182_CMP ;
  wire [2:0] \$procmux$10183_Y ;
  wire \$procmux$10184_CMP ;
  wire [2:0] \$procmux$10185_Y ;
  wire \$procmux$10186_CMP ;
  wire [2:0] \$procmux$10197_Y ;
  wire \$procmux$10198_CMP ;
  wire [2:0] \$procmux$10200_Y ;
  wire \$procmux$10201_CMP ;
  wire [2:0] \$procmux$10202_Y ;
  wire \$procmux$10203_CMP ;
  wire [2:0] \$procmux$10204_Y ;
  wire \$procmux$10205_CMP ;
  wire [1:0] \$procmux$10218_Y ;
  wire \$procmux$10219_CMP ;
  wire [1:0] \$procmux$10220_Y ;
  wire \$procmux$10221_CMP ;
  wire [1:0] \$procmux$10222_Y ;
  wire \$procmux$10223_CMP ;
  wire \$procmux$10235_Y ;
  wire \$procmux$10236_CMP ;
  wire \$procmux$10237_Y ;
  wire \$procmux$10238_CMP ;
  wire \$procmux$10239_Y ;
  wire \$procmux$10240_CMP ;
  wire [31:0] \$procmux$10252_Y ;
  wire \$procmux$10253_CMP ;
  wire [31:0] \$procmux$10254_Y ;
  wire \$procmux$10255_CMP ;
  wire [31:0] \$procmux$10256_Y ;
  wire \$procmux$10257_CMP ;
  wire [2:0] \$procmux$10270_Y ;
  wire \$procmux$10271_CMP ;
  wire [2:0] \$procmux$10272_Y ;
  wire \$procmux$10273_CMP ;
  wire [2:0] \$procmux$10274_Y ;
  wire \$procmux$10275_CMP ;
  wire [2:0] \$procmux$10287_Y ;
  wire \$procmux$10288_CMP ;
  wire [2:0] \$procmux$10290_Y ;
  wire \$procmux$10291_CMP ;
  wire [2:0] \$procmux$10292_Y ;
  wire \$procmux$10293_CMP ;
  wire [2:0] \$procmux$10294_Y ;
  wire \$procmux$10295_CMP ;
  wire [2:0] \$procmux$10309_Y ;
  wire \$procmux$10310_CMP ;
  wire [2:0] \$procmux$10311_Y ;
  wire \$procmux$10312_CMP ;
  wire [2:0] \$procmux$10313_Y ;
  wire \$procmux$10314_CMP ;
  wire [1:0] \$procmux$10328_Y ;
  wire \$procmux$10329_CMP ;
  wire [1:0] \$procmux$10330_Y ;
  wire \$procmux$10331_CMP ;
  wire [1:0] \$procmux$10332_Y ;
  wire \$procmux$10333_CMP ;
  wire [1:0] \$procmux$10348_Y ;
  wire \$procmux$10349_CMP ;
  wire [1:0] \$procmux$10350_Y ;
  wire \$procmux$10351_CMP ;
  wire [1:0] \$procmux$10352_Y ;
  wire \$procmux$10353_CMP ;
  wire [1:0] \$procmux$10370_Y ;
  wire \$procmux$10371_CMP ;
  wire [1:0] \$procmux$10372_Y ;
  wire \$procmux$10373_CMP ;
  wire [63:0] \$procmux$10390_Y ;
  wire \$procmux$10391_CMP ;
  wire [63:0] \$procmux$10392_Y ;
  wire \$procmux$10393_CMP ;
  wire \$procmux$10410_Y ;
  wire \$procmux$10411_CMP ;
  wire \$procmux$10412_Y ;
  wire \$procmux$10413_CMP ;
  wire [2:0] \$procmux$10430_Y ;
  wire \$procmux$10431_CMP ;
  wire [2:0] \$procmux$10432_Y ;
  wire \$procmux$10433_CMP ;
  wire [2:0] \$procmux$10449_Y ;
  wire \$procmux$10450_CMP ;
  wire [2:0] \$procmux$10452_Y ;
  wire \$procmux$10453_CMP ;
  wire [2:0] \$procmux$10454_Y ;
  wire \$procmux$10455_CMP ;
  wire [2:0] \$procmux$10456_Y ;
  wire \$procmux$10457_CMP ;
  wire [1:0] \$procmux$10475_Y ;
  wire \$procmux$10476_CMP ;
  wire [1:0] \$procmux$10477_Y ;
  wire \$procmux$10478_CMP ;
  wire [1:0] \$procmux$10479_Y ;
  wire \$procmux$10480_CMP ;
  wire [63:0] \$procmux$10497_Y ;
  wire \$procmux$10498_CMP ;
  wire [63:0] \$procmux$10499_Y ;
  wire \$procmux$10500_CMP ;
  wire [63:0] \$procmux$10501_Y ;
  wire \$procmux$10502_CMP ;
  wire \$procmux$10519_Y ;
  wire \$procmux$10520_CMP ;
  wire \$procmux$10521_Y ;
  wire \$procmux$10522_CMP ;
  wire \$procmux$10523_Y ;
  wire \$procmux$10524_CMP ;
  wire [2:0] \$procmux$10542_Y ;
  wire \$procmux$10543_CMP ;
  wire [2:0] \$procmux$10544_Y ;
  wire \$procmux$10545_CMP ;
  wire [2:0] \$procmux$10546_Y ;
  wire \$procmux$10547_CMP ;
  wire \$procmux$10552_Y ;
  wire \$procmux$10553_CMP ;
  wire \$procmux$10554_Y ;
  wire \$procmux$10555_CMP ;
  wire \$procmux$10562_Y ;
  wire \$procmux$10563_CMP ;
  wire \$procmux$10564_Y ;
  wire \$procmux$10565_CMP ;
  wire [31:0] \$procmux$10578_Y ;
  wire \$procmux$10579_CMP ;
  wire [31:0] \$procmux$10580_Y ;
  wire \$procmux$10581_CMP ;
  wire [31:0] \$procmux$10589_Y ;
  wire \$procmux$10590_CMP ;
  wire [31:0] \$procmux$10591_Y ;
  wire \$procmux$10592_CMP ;
  wire [1:0] \$procmux$10608_Y ;
  wire \$procmux$10609_CMP ;
  wire [1:0] \$procmux$10610_Y ;
  wire \$procmux$10611_CMP ;
  wire [1:0] \$procmux$10615_Y ;
  wire \$procmux$10616_CMP ;
  wire \$procmux$10618_CMP ;
  wire \$procmux$10620_CMP ;
  wire \$procmux$10622_CMP ;
  wire \$procmux$10624_CMP ;
  wire \$procmux$10626_CMP ;
  wire \$procmux$10628_CMP ;
  wire \$procmux$10630_CMP ;
  wire \$procmux$10632_CMP ;
  wire \$procmux$10634_CMP ;
  wire [1:0] \$procmux$10635_Y ;
  wire \$procmux$10636_CMP ;
  wire [63:0] \$procmux$10653_Y ;
  wire \$procmux$10654_CMP ;
  wire [63:0] \$procmux$10655_Y ;
  wire \$procmux$10656_CMP ;
  wire [255:0] \$procmux$10665_Y ;
  wire \$procmux$10666_CMP ;
  wire [255:0] \$procmux$10667_Y ;
  wire \$procmux$10668_CMP ;
  wire \$procmux$10673_Y ;
  wire \$procmux$10674_CMP ;
  wire \$procmux$10675_Y ;
  wire \$procmux$10676_CMP ;
  wire \$procmux$10677_Y ;
  wire \$procmux$10678_CMP ;
  wire [8:0] \$procmux$10686_Y ;
  wire \$procmux$10687_CMP ;
  wire [8:0] \$procmux$10688_Y ;
  wire \$procmux$10689_CMP ;
  wire \$procmux$10696_Y ;
  wire \$procmux$10697_CMP ;
  wire \$procmux$10698_Y ;
  wire \$procmux$10699_CMP ;
  wire \$procmux$10700_Y ;
  wire \$procmux$10701_CMP ;
  wire [31:0] \$procmux$10711_Y ;
  wire \$procmux$10712_CMP ;
  wire [31:0] \$procmux$10713_Y ;
  wire \$procmux$10714_CMP ;
  wire \$procmux$10723_Y ;
  wire \$procmux$10724_CMP ;
  wire \$procmux$10726_CMP ;
  wire \$procmux$10728_CMP ;
  wire \$procmux$10729_Y ;
  wire \$procmux$10730_CMP ;
  wire [31:0] \$procmux$10742_Y ;
  wire \$procmux$10743_CMP ;
  wire [31:0] \$procmux$10744_Y ;
  wire \$procmux$10745_CMP ;
  wire [2:0] \$procmux$10754_Y ;
  wire \$procmux$10755_CMP ;
  wire \$procmux$10757_CMP ;
  wire \$procmux$10759_CMP ;
  wire \$procmux$10761_CMP ;
  wire \$procmux$10763_CMP ;
  wire [2:0] \$procmux$10764_Y ;
  wire \$procmux$10765_CMP ;
  wire [31:0] \$procmux$10781_Y ;
  wire \$procmux$10782_CMP ;
  wire [31:0] \$procmux$10783_Y ;
  wire \$procmux$10784_CMP ;
  wire \$procmux$10787_Y ;
  wire \$procmux$10788_CMP ;
  wire \$procmux$10791_Y ;
  wire \$procmux$10792_CMP ;
  wire [31:0] \$procmux$10795_Y ;
  wire \$procmux$10796_CMP ;
  wire [31:0] \$procmux$10799_Y ;
  wire \$procmux$10800_CMP ;
  wire [1:0] \$procmux$10803_Y ;
  wire \$procmux$10804_CMP ;
  wire [1:0] \$procmux$10807_Y ;
  wire \$procmux$10808_CMP ;
  wire [63:0] \$procmux$10811_Y ;
  wire \$procmux$10812_CMP ;
  wire [255:0] \$procmux$10815_Y ;
  wire \$procmux$10816_CMP ;
  wire [63:0] \$procmux$10819_Y ;
  wire \$procmux$10820_CMP ;
  wire [63:0] \$procmux$10823_Y ;
  wire \$procmux$10824_CMP ;
  wire [31:0] \$procmux$10827_Y ;
  wire \$procmux$10828_CMP ;
  wire [31:0] \$procmux$10831_Y ;
  wire \$procmux$10832_CMP ;
  wire \$procmux$10835_Y ;
  wire \$procmux$10836_CMP ;
  wire [31:0] \$procmux$10839_Y ;
  wire \$procmux$10840_CMP ;
  wire [2:0] \$procmux$10843_Y ;
  wire \$procmux$10844_CMP ;
  wire [31:0] \$procmux$10847_Y ;
  wire \$procmux$10848_CMP ;
  wire [31:0] \$procmux$10852_Y ;
  wire \$procmux$10853_CMP ;
  wire \$procmux$10855_CMP ;
  wire \$procmux$10856_CMP ;
  wire \$procmux$10857_CMP ;
  wire \$procmux$10858_CMP ;
  wire \$procmux$10859_CMP ;
  wire \$procmux$10860_CMP ;
  wire \$procmux$10861_CMP ;
  wire \$procmux$10862_CMP ;
  wire \$procmux$10864_CMP ;
  wire \$procmux$10865_CMP ;
  wire \$procmux$10866_CMP ;
  wire \$procmux$10867_CMP ;
  wire \$procmux$10868_CMP ;
  wire \$procmux$10869_CMP ;
  wire \$procmux$10870_CMP ;
  wire \$procmux$10872_CMP ;
  wire [31:0] \$procmux$10873_Y ;
  wire \$procmux$10874_CMP ;
  wire [1:0] \$procmux$10877_Y ;
  wire \$procmux$10878_CMP ;
  wire [1:0] \$procmux$10879_Y ;
  wire \$procmux$10880_CMP ;
  wire [1:0] \$procmux$10881_Y ;
  wire \$procmux$10882_CMP ;
  wire \$procmux$10885_Y ;
  wire \$procmux$10886_CMP ;
  wire \$procmux$10887_Y ;
  wire \$procmux$10888_CMP ;
  wire \$procmux$10889_Y ;
  wire \$procmux$10890_CMP ;
  wire [1:0] \$procmux$10893_Y ;
  wire \$procmux$10894_CMP ;
  wire \$procmux$10896_CMP ;
  wire \$procmux$10898_CMP ;
  wire \$procmux$10900_CMP ;
  wire [1:0] \$procmux$10901_Y ;
  wire \$procmux$10902_CMP ;
  wire [1:0] \$procmux$10906_Y ;
  wire \$procmux$10907_CMP ;
  wire [1:0] \$procmux$10908_Y ;
  wire \$procmux$10909_CMP ;
  wire [1:0] \$procmux$10910_Y ;
  wire \$procmux$10911_CMP ;
  wire \$procmux$10915_Y ;
  wire \$procmux$10916_CMP ;
  wire \$procmux$10917_Y ;
  wire \$procmux$10918_CMP ;
  wire \$procmux$10919_Y ;
  wire \$procmux$10920_CMP ;
  wire \$procmux$10924_Y ;
  wire \$procmux$10925_CMP ;
  wire \$procmux$10926_Y ;
  wire \$procmux$10927_CMP ;
  wire \$procmux$10928_Y ;
  wire \$procmux$10929_CMP ;
  wire [31:0] \$procmux$10932_Y ;
  wire \$procmux$10933_CMP ;
  wire [31:0] \$procmux$10934_Y ;
  wire \$procmux$10935_CMP ;
  wire [31:0] \$procmux$10936_Y ;
  wire \$procmux$10937_CMP ;
  wire [1:0] \$procmux$10950_Y ;
  wire \$procmux$10951_CMP ;
  wire [1:0] \$procmux$10952_Y ;
  wire \$procmux$10953_CMP ;
  wire [1:0] \$procmux$10954_Y ;
  wire \$procmux$10955_CMP ;
  wire \$procmux$10967_Y ;
  wire \$procmux$10968_CMP ;
  wire \$procmux$10969_Y ;
  wire \$procmux$10970_CMP ;
  wire \$procmux$10971_Y ;
  wire \$procmux$10972_CMP ;
  wire [2:0] \$procmux$10985_Y ;
  wire \$procmux$10986_CMP ;
  wire [2:0] \$procmux$10987_Y ;
  wire \$procmux$10988_CMP ;
  wire [2:0] \$procmux$10989_Y ;
  wire \$procmux$10990_CMP ;
  wire [31:0] \$procmux$10994_Y ;
  wire \$procmux$10995_CMP ;
  wire [31:0] \$procmux$10996_Y ;
  wire \$procmux$10997_CMP ;
  wire [31:0] \$procmux$10998_Y ;
  wire \$procmux$10999_CMP ;
  wire [2:0] \$procmux$11010_Y ;
  wire \$procmux$11011_CMP ;
  wire [2:0] \$procmux$11013_Y ;
  wire \$procmux$11014_CMP ;
  wire [2:0] \$procmux$11015_Y ;
  wire \$procmux$11016_CMP ;
  wire [2:0] \$procmux$11017_Y ;
  wire \$procmux$11018_CMP ;
  wire [1:0] \$procmux$11039_Y ;
  wire \$procmux$11040_CMP ;
  wire [1:0] \$procmux$11041_Y ;
  wire \$procmux$11042_CMP ;
  wire [1:0] \$procmux$11043_Y ;
  wire \$procmux$11044_CMP ;
  wire \$procmux$11064_Y ;
  wire \$procmux$11065_CMP ;
  wire \$procmux$11066_Y ;
  wire \$procmux$11067_CMP ;
  wire \$procmux$11068_Y ;
  wire \$procmux$11069_CMP ;
  wire [2:0] \$procmux$11090_Y ;
  wire \$procmux$11091_CMP ;
  wire [2:0] \$procmux$11092_Y ;
  wire \$procmux$11093_CMP ;
  wire [2:0] \$procmux$11094_Y ;
  wire \$procmux$11095_CMP ;
  wire \$procmux$11099_Y ;
  wire \$procmux$11100_CMP ;
  wire \$procmux$11101_Y ;
  wire \$procmux$11102_CMP ;
  wire [2:0] \$procmux$11121_Y ;
  wire \$procmux$11122_CMP ;
  wire [2:0] \$procmux$11124_Y ;
  wire \$procmux$11125_CMP ;
  wire [2:0] \$procmux$11126_Y ;
  wire \$procmux$11127_CMP ;
  wire [2:0] \$procmux$11128_Y ;
  wire \$procmux$11129_CMP ;
  wire \$procmux$11132_Y ;
  wire \$procmux$11133_CMP ;
  wire \$procmux$11135_CMP ;
  wire \$procmux$11136_Y ;
  wire \$procmux$11137_CMP ;
  wire \$procmux$11149_Y ;
  wire \$procmux$11150_CMP ;
  wire \$procmux$11152_CMP ;
  wire \$procmux$11153_Y ;
  wire \$procmux$11154_CMP ;
  wire [2:0] \$procmux$11166_Y ;
  wire \$procmux$11167_CMP ;
  wire \$procmux$11169_CMP ;
  wire [2:0] \$procmux$11170_Y ;
  wire \$procmux$11171_CMP ;
  wire \$procmux$11173_Y ;
  wire \$procmux$11174_CMP ;
  wire [33:0] \$procmux$11176_Y ;
  wire \$procmux$11177_CMP ;
  wire \$procmux$11179_Y ;
  wire \$procmux$11180_CMP ;
  wire \$procmux$11182_Y ;
  wire \$procmux$11183_CMP ;
  wire [2:0] \$procmux$11185_Y ;
  wire \$procmux$11186_CMP ;
  wire [63:0] \$procmux$11188_Y ;
  wire \$procmux$11189_CMP ;
  wire [255:0] \$procmux$11191_Y ;
  wire \$procmux$11192_CMP ;
  wire [63:0] \$procmux$11194_Y ;
  wire \$procmux$11195_CMP ;
  wire [63:0] \$procmux$11197_Y ;
  wire \$procmux$11198_CMP ;
  wire [31:0] \$procmux$11200_Y ;
  wire \$procmux$11201_CMP ;
  wire [31:0] \$procmux$11203_Y ;
  wire \$procmux$11204_CMP ;
  wire \$procmux$11206_Y ;
  wire \$procmux$11207_CMP ;
  wire [31:0] \$procmux$11209_Y ;
  wire \$procmux$11210_CMP ;
  wire [2:0] \$procmux$11212_Y ;
  wire \$procmux$11213_CMP ;
  wire [31:0] \$procmux$11215_Y ;
  wire \$procmux$11216_CMP ;
  wire \$procmux$11217_Y ;
  wire \$procmux$11218_CMP ;
  wire \$procmux$11219_Y ;
  wire \$procmux$11220_CMP ;
  wire [31:0] \$procmux$11221_Y ;
  wire \$procmux$11222_CMP ;
  wire [31:0] \$procmux$11223_Y ;
  wire \$procmux$11224_CMP ;
  wire [31:0] \$procmux$11225_Y ;
  wire \$procmux$11226_CMP ;
  wire \$procmux$9750_Y ;
  wire \$procmux$9751_CMP ;
  wire \$procmux$9760_Y ;
  wire \$procmux$9761_CMP ;
  wire [63:0] \$procmux$9769_Y ;
  wire \$procmux$9770_CMP ;
  wire [2:0] \$procmux$9777_Y ;
  wire \$procmux$9778_CMP ;
  wire \$procmux$9784_Y ;
  wire \$procmux$9785_CMP ;
  wire [63:0] \$procmux$9790_Y ;
  wire \$procmux$9791_CMP ;
  wire [2:0] \$procmux$9795_Y ;
  wire \$procmux$9796_CMP ;
  wire [1:0] \$procmux$9801_Y ;
  wire \$procmux$9802_CMP ;
  wire [1:0] \$procmux$9803_Y ;
  wire \$procmux$9804_CMP ;
  wire [1:0] \$procmux$9805_Y ;
  wire \$procmux$9806_CMP ;
  wire [31:0] \$procmux$9810_Y ;
  wire \$procmux$9811_CMP ;
  wire [31:0] \$procmux$9812_Y ;
  wire \$procmux$9813_CMP ;
  wire [31:0] \$procmux$9814_Y ;
  wire \$procmux$9815_CMP ;
  wire \$procmux$9819_Y ;
  wire \$procmux$9820_CMP ;
  wire \$procmux$9821_Y ;
  wire \$procmux$9822_CMP ;
  wire \$procmux$9823_Y ;
  wire \$procmux$9824_CMP ;
  wire [31:0] \$procmux$9828_Y ;
  wire \$procmux$9829_CMP ;
  wire [31:0] \$procmux$9830_Y ;
  wire \$procmux$9831_CMP ;
  wire [31:0] \$procmux$9836_Y ;
  wire \$procmux$9837_CMP ;
  wire [31:0] \$procmux$9838_Y ;
  wire \$procmux$9839_CMP ;
  wire [1:0] \$procmux$9844_Y ;
  wire \$procmux$9845_CMP ;
  wire [1:0] \$procmux$9846_Y ;
  wire \$procmux$9847_CMP ;
  wire [1:0] \$procmux$9848_Y ;
  wire \$procmux$9849_CMP ;
  wire [31:0] \$procmux$9854_Y ;
  wire \$procmux$9855_CMP ;
  wire [31:0] \$procmux$9856_Y ;
  wire \$procmux$9857_CMP ;
  wire [31:0] \$procmux$9858_Y ;
  wire \$procmux$9859_CMP ;
  wire \$procmux$9864_Y ;
  wire \$procmux$9865_CMP ;
  wire \$procmux$9866_Y ;
  wire \$procmux$9867_CMP ;
  wire \$procmux$9868_Y ;
  wire \$procmux$9869_CMP ;
  wire [1:0] \$procmux$9875_Y ;
  wire \$procmux$9876_CMP ;
  wire [1:0] \$procmux$9877_Y ;
  wire \$procmux$9878_CMP ;
  wire [1:0] \$procmux$9879_Y ;
  wire \$procmux$9880_CMP ;
  wire [31:0] \$procmux$9886_Y ;
  wire \$procmux$9887_CMP ;
  wire [31:0] \$procmux$9888_Y ;
  wire \$procmux$9889_CMP ;
  wire [31:0] \$procmux$9890_Y ;
  wire \$procmux$9891_CMP ;
  wire \$procmux$9897_Y ;
  wire \$procmux$9898_CMP ;
  wire \$procmux$9899_Y ;
  wire \$procmux$9900_CMP ;
  wire \$procmux$9901_Y ;
  wire \$procmux$9902_CMP ;
  wire [31:0] \$procmux$9908_Y ;
  wire \$procmux$9909_CMP ;
  wire [31:0] \$procmux$9910_Y ;
  wire \$procmux$9911_CMP ;
  wire [31:0] \$procmux$9918_Y ;
  wire \$procmux$9919_CMP ;
  wire [31:0] \$procmux$9920_Y ;
  wire \$procmux$9921_CMP ;
  wire \$procmux$9925_Y ;
  wire \$procmux$9926_CMP ;
  wire \$procmux$9928_CMP ;
  wire \$procmux$9930_CMP ;
  wire \$procmux$9932_CMP ;
  wire \$procmux$9934_CMP ;
  wire \$procmux$9935_Y ;
  wire \$procmux$9936_CMP ;
  wire [21:0] \$procmux$9944_Y ;
  wire \$procmux$9945_CMP ;
  wire [21:0] \$procmux$9946_Y ;
  wire \$procmux$9947_CMP ;
  wire [1:0] \$procmux$9954_Y ;
  wire \$procmux$9955_CMP ;
  wire [1:0] \$procmux$9956_Y ;
  wire \$procmux$9957_CMP ;
  wire [1:0] \$procmux$9958_Y ;
  wire \$procmux$9959_CMP ;
  wire [31:0] \$procmux$9966_Y ;
  wire \$procmux$9967_CMP ;
  wire [31:0] \$procmux$9968_Y ;
  wire \$procmux$9969_CMP ;
  wire [31:0] \$procmux$9970_Y ;
  wire \$procmux$9971_CMP ;
  wire \$procmux$9978_Y ;
  wire \$procmux$9979_CMP ;
  wire \$procmux$9980_Y ;
  wire \$procmux$9981_CMP ;
  wire \$procmux$9982_Y ;
  wire \$procmux$9983_CMP ;
  wire [8:0] \$procmux$9991_Y ;
  wire \$procmux$9992_CMP ;
  wire [8:0] \$procmux$9993_Y ;
  wire \$procmux$9994_CMP ;
  wire [8:0] \$procmux$9995_Y ;
  wire \$procmux$9996_CMP ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire [255:0] \$progbuf_d$276 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [255:0] \$progbuf_d$327 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [255:0] \$progbuf_d$343 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [255:0] \$progbuf_q$402 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  wire [33:0] \$resp_queue_inp$164 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  wire [33:0] \$resp_queue_inp$170 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire [33:0] \$resp_queue_inp$174 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire [33:0] \$resp_queue_inp$179 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire [1:0] \$resp_queue_inp[1:0]$123 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire [1:0] \$resp_queue_inp[1:0]$150 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire [1:0] \$resp_queue_inp[1:0]$208 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14" */
  wire [1:0] \$resp_queue_inp[1:0]$212 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  wire [1:0] \$resp_queue_inp[1:0]$235 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire [1:0] \$resp_queue_inp[1:0]$245 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  wire [1:0] \$resp_queue_inp[1:0]$255 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire [1:0] \$resp_queue_inp[1:0]$277 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  wire [1:0] \$resp_queue_inp[1:0]$287 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  wire [1:0] \$resp_queue_inp[1:0]$296 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  wire [1:0] \$resp_queue_inp[1:0]$303 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  wire [1:0] \$resp_queue_inp[1:0]$311 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  wire [1:0] \$resp_queue_inp[1:0]$318 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [1:0] \$resp_queue_inp[1:0]$329 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [1:0] \$resp_queue_inp[1:0]$345 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:576.5-579.8" */
  wire \$resumereq_o$380 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [63:0] \$sbaddr_d$325 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [63:0] \$sbaddr_d$341 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  wire [31:0] \$sbaddr_d[31:0]$295 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  wire [31:0] \$sbaddr_d[63:32]$302 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [63:0] \$sbaddr_q$400 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  wire \$sbaddress_write_valid_o$297 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire \$sbaddress_write_valid_o$333 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire \$sbaddress_write_valid_o$349 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  wire [31:0] \$sbcs$288 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$sbcs$331 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$sbcs$347 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  wire [31:0] \$sbcs_d$286 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$sbcs_d$324 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [31:0] \$sbcs_d$340 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" */
  wire [2:0] \$sbcs_d[14:12]$354 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  wire \$sbcs_d[22]$163 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  wire \$sbcs_d[22]$169 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire \$sbcs_d[22]$173 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire \$sbcs_d[22]$178 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  wire \$sbcs_d[22]$294 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  wire \$sbcs_d[22]$301 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  wire \$sbcs_d[22]$309 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  wire \$sbcs_d[22]$316 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$sbcs_q$399 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [63:0] \$sbdata_d$326 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [63:0] \$sbdata_d$342 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" */
  wire [63:0] \$sbdata_d$355 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  wire [31:0] \$sbdata_d[31:0]$310 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  wire [31:0] \$sbdata_d[63:32]$317 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [63:0] \$sbdata_q$401 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  wire \$sbdata_read_valid_o$165 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire \$sbdata_read_valid_o$175 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire \$sbdata_read_valid_o$180 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  wire \$sbdata_write_valid_o$312 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire \$sbdata_write_valid_o$334 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire \$sbdata_write_valid_o$350 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:218.20" */
  wire [31:0] a_abstractcs;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.23" */
  wire [31:0] abstractauto_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.39" */
  wire [31:0] abstractauto_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:167.23" */
  wire [31:0] abstractcs;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:219.15" */
  wire [3:0] autoexecdata_idx;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:50.45" */
  output clear_resumeack_o;
  wire clear_resumeack_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:23.45" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:53.45" */
  output [31:0] cmd_o;
  wire [31:0] cmd_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.23" */
  wire cmd_valid_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:52.45" */
  output cmd_valid_o;
  wire cmd_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.36" */
  wire cmd_valid_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:56.45" */
  input cmdbusy_i;
  wire cmdbusy_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.23" */
  wire [2:0] cmderr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.33" */
  wire [2:0] cmderr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:55.45" */
  input [2:0] cmderror_i;
  wire [2:0] cmderror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:54.45" */
  input cmderror_valid_i;
  wire cmderror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.23" */
  wire [31:0] command_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.34" */
  wire [31:0] command_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.35" */
  wire [63:0] data_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:61.45" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:59.45" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.43" */
  wire [63:0] data_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:62.45" */
  input data_valid_i;
  wire data_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:216.16" */
  wire [7:0] dm_csr_addr;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:39.45" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.23" */
  wire [31:0] dmcontrol_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.36" */
  wire [31:0] dmcontrol_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:31.45" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:30.45" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:29.45" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:35.45" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:34.45" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:33.45" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:27.45" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:165.23" */
  wire [31:0] dmstatus;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:88.16" */
  wire [1:0] dtm_op;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:100.47" */
  wire [31:0] halted;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:201.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:104.40" */
  wire [31:0] halted_flat1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:105.40" */
  wire [31:0] halted_flat2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:106.16" */
  wire [31:0] halted_flat3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:43.45" */
  input halted_i;
  wire halted_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:101.36" */
  wire [31:0] halted_reshaped0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:102.37" */
  wire [31:0] halted_reshaped1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:103.37" */
  wire [31:0] halted_reshaped2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:48.45" */
  output haltreq_o;
  wire haltreq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.16" */
  wire [31:0] haltsum0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.26" */
  wire [31:0] haltsum1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.36" */
  wire [31:0] haltsum2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.46" */
  wire [31:0] haltsum3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:209.39" */
  wire [63:0] hartinfo_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:42.45" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:109.16" */
  wire [14:0] hartsel_idx0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:122.15" */
  wire [9:0] hartsel_idx1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:139.15" */
  wire [4:0] hartsel_idx2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:47.45" */
  output [19:0] hartsel_o;
  wire [19:0] hartsel_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.23" */
  wire havereset_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.30" */
  wire [1:0] havereset_d_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.36" */
  wire havereset_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.51" */
  wire [1:0] havereset_q_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:38.45" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:37.45" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:25.45" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.37" */
  wire [255:0] progbuf_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:58.45" */
  output [255:0] progbuf_o;
  wire [255:0] progbuf_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.48" */
  wire [255:0] progbuf_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:92.16" */
  wire resp_queue_empty;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:91.16" */
  wire resp_queue_full;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:183.18" */
  wire [33:0] resp_queue_inp;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:94.16" */
  wire resp_queue_pop;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:93.16" */
  wire resp_queue_push;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.30" */
  wire [1:0] resumeack_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:45.45" */
  input resumeack_i;
  wire resumeack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:49.45" */
  output resumereq_o;
  wire resumereq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:24.45" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:70.45" */
  output [2:0] sbaccess_o;
  wire [2:0] sbaccess_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.23" */
  wire [63:0] sbaddr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.33" */
  wire [63:0] sbaddr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:65.45" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:64.45" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:66.45" */
  output sbaddress_write_valid_o;
  wire sbaddress_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:69.45" */
  output sbautoincrement_o;
  wire sbautoincrement_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:80.45" */
  input sbbusy_i;
  wire sbbusy_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:217.14" */
  wire [31:0] sbcs;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:172.23" */
  wire [31:0] sbcs_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:172.31" */
  wire [31:0] sbcs_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.23" */
  wire [63:0] sbdata_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:77.45" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:73.45" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.33" */
  wire [63:0] sbdata_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:74.45" */
  output sbdata_read_valid_o;
  wire sbdata_read_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:78.45" */
  input sbdata_valid_i;
  wire sbdata_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:75.45" */
  output sbdata_write_valid_o;
  wire sbdata_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:82.45" */
  input [2:0] sberror_i;
  wire [2:0] sberror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:81.45" */
  input sberror_valid_i;
  wire sberror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:68.45" */
  output sbreadonaddr_o;
  wire sbreadonaddr_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:72.45" */
  output sbreadondata_o;
  wire sbreadondata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:181.26" */
  wire selected_hart;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:26.45" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.49" */
  wire [1:0] unavailable_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:44.45" */
  input unavailable_i;
  wire unavailable_i;
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd15),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(hartsel_o[19:5]),
    .B(15'h0001),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(dmi_req_ready_o),
    .B(dmi_req_valid_i),
    .Y(\$102 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(dtm_op),
    .B(2'h1),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$102 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(dm_csr_addr),
    .B(8'h04),
    .Y(\$auto$rtlil.cc:3015:Ge$1085 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(dm_csr_addr),
    .B(8'h05),
    .Y(\$auto$rtlil.cc:3010:Le$1086 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\$auto$rtlil.cc:3015:Ge$1085 ),
    .B(\$auto$rtlil.cc:3010:Le$1086 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1087 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, hartsel_o[19:10] }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$1039 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A({ 1'h0, autoexecdata_idx[0] }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1088 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$111  (
    .A(data_q),
    .S(autoexecdata_idx[0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1089 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$112  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1089 ),
    .S(\$auto$rtlil.cc:3009:Lt$1088 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1090 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(cmdbusy_i),
    .Y(\$114 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A({ 1'h0, autoexecdata_idx }),
    .B(6'h10),
    .Y(\$auto$rtlil.cc:3009:Lt$1091 )
  );
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$116  (
    .A({ 4'hx, abstractauto_q[11:0] }),
    .S(autoexecdata_idx),
    .Y(\$auto$rtlil.cc:3113:Bmux$1092 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$117  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1092 ),
    .S(\$auto$rtlil.cc:3009:Lt$1091 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1093 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(cmderr_q),
    .Y(\$119 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$12  (
    .A(32'hxxxxxxxx),
    .B({ 31'h00000000, \$8  }),
    .S(\$auto$rtlil.cc:3009:Lt$1039 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1040 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(dm_csr_addr),
    .B(8'h10),
    .Y(\$auto$rtlil.cc:3011:Eq$1094 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(dm_csr_addr),
    .B(8'h11),
    .Y(\$auto$rtlil.cc:3011:Eq$1095 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(dm_csr_addr),
    .B(8'h12),
    .Y(\$auto$rtlil.cc:3011:Eq$1096 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1097 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$128  (
    .A(hartinfo_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1098 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$129  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1098 ),
    .S(\$auto$rtlil.cc:3009:Lt$1097 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1099 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(dm_csr_addr),
    .B(8'h16),
    .Y(\$auto$rtlil.cc:3011:Eq$1100 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(dm_csr_addr),
    .B(8'h18),
    .Y(\$auto$rtlil.cc:3011:Eq$1101 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(dm_csr_addr),
    .B(8'h17),
    .Y(\$auto$rtlil.cc:3011:Eq$1102 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(dm_csr_addr),
    .B(8'h1d),
    .Y(\$auto$rtlil.cc:3011:Eq$1103 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(dm_csr_addr),
    .B(8'h20),
    .Y(\$auto$rtlil.cc:3015:Ge$1104 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(dm_csr_addr),
    .B(8'h27),
    .Y(\$auto$rtlil.cc:3010:Le$1105 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$auto$rtlil.cc:3015:Ge$1104 ),
    .B(\$auto$rtlil.cc:3010:Le$1105 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1106 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A({ 1'h0, dmi_req_i[36:34] }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$1107 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$138  (
    .A(progbuf_q),
    .S(dmi_req_i[36:34]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1108 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$139  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1108 ),
    .S(\$auto$rtlil.cc:3009:Lt$1107 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1109 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(cmdbusy_i),
    .Y(\$141 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A({ 2'h1, dmi_req_i[37:34] }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$1110 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$143  (
    .A({ abstractauto_q[31:16], 16'hxxxx }),
    .S({ 1'h1, dmi_req_i[37:34] }),
    .Y(\$auto$rtlil.cc:3113:Bmux$1111 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$144  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1111 ),
    .S(\$auto$rtlil.cc:3009:Lt$1110 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1112 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(cmderr_q),
    .Y(\$146 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(dm_csr_addr),
    .B(8'h40),
    .Y(\$auto$rtlil.cc:3011:Eq$1113 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(dm_csr_addr),
    .B(8'h13),
    .Y(\$auto$rtlil.cc:3011:Eq$1114 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(dm_csr_addr),
    .B(8'h34),
    .Y(\$auto$rtlil.cc:3011:Eq$1115 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(dm_csr_addr),
    .B(8'h35),
    .Y(\$auto$rtlil.cc:3011:Eq$1116 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(dm_csr_addr),
    .B(8'h38),
    .Y(\$auto$rtlil.cc:3011:Eq$1117 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(dm_csr_addr),
    .B(8'h39),
    .Y(\$auto$rtlil.cc:3011:Eq$1118 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$157  (
    .A(dm_csr_addr),
    .B(8'h3a),
    .Y(\$auto$rtlil.cc:3011:Eq$1119 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(dm_csr_addr),
    .B(8'h3c),
    .Y(\$auto$rtlil.cc:3011:Eq$1120 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$159  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$160 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(sbcs_q[14:12]),
    .Y(\$162 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(dm_csr_addr),
    .B(8'h3d),
    .Y(\$auto$rtlil.cc:3011:Eq$1121 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$168 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(hartsel_o[19:15]),
    .B(5'h01),
    .Y(\$18 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(dmi_req_ready_o),
    .B(dmi_req_valid_i),
    .Y(\$182 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(dtm_op),
    .B(2'h2),
    .Y(\$184 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$182 ),
    .B(\$184 ),
    .Y(\$186 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(dm_csr_addr),
    .B(8'h04),
    .Y(\$auto$rtlil.cc:3015:Ge$1122 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(dm_csr_addr),
    .B(8'h05),
    .Y(\$auto$rtlil.cc:3010:Le$1123 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(\$auto$rtlil.cc:3015:Ge$1122 ),
    .B(\$auto$rtlil.cc:3010:Le$1123 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1124 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, hartsel_o[19:15] }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$1041 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(cmdbusy_i),
    .Y(\$191 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A({ 1'h0, dmi_req_i[34] }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1125 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A({ 1'h0, dmi_req_i[34] }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1126 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$194  (
    .A(\$auto$rtlil.cc:3015:Ge$1125 ),
    .B(\$auto$rtlil.cc:3009:Lt$1126 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1127 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$195  (
    .A(32'd0),
    .B(32'd4294967295),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1127 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1128 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$196  (
    .A(\$auto$rtlil.cc:3092:Mux$1128 ),
    .S(dmi_req_i[34]),
    .Y(\$auto$rtlil.cc:3114:Demux$1129 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$197  (
    .A(\$auto$rtlil.cc:3092:Mux$1128 ),
    .S(dmi_req_i[34]),
    .Y(\$auto$rtlil.cc:3114:Demux$1130 )
  );
  \$bwmux  #(
    .WIDTH(32'd64)
  ) \$198  (
    .A(data_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S(\$auto$rtlil.cc:3114:Demux$1130 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1131 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A({ 1'h0, autoexecdata_idx }),
    .B(6'h10),
    .Y(\$auto$rtlil.cc:3009:Lt$1132 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$20  (
    .A(32'hxxxxxxxx),
    .B({ 31'h00000000, \$16  }),
    .S(\$auto$rtlil.cc:3009:Lt$1041 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1042 )
  );
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$200  (
    .A({ 4'hx, abstractauto_q[11:0] }),
    .S(autoexecdata_idx),
    .Y(\$auto$rtlil.cc:3113:Bmux$1133 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$201  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1133 ),
    .S(\$auto$rtlil.cc:3009:Lt$1132 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1134 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(cmderr_q),
    .Y(\$203 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$213  (
    .A(dm_csr_addr),
    .B(8'h10),
    .Y(\$auto$rtlil.cc:3011:Eq$1135 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A({ 1'h0, selected_hart }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1136 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$215  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1137 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$216  (
    .A(\$auto$rtlil.cc:3015:Ge$1136 ),
    .B(\$auto$rtlil.cc:3009:Lt$1137 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1138 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$217  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1138 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1139 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$218  (
    .A(\$auto$rtlil.cc:3092:Mux$1139 ),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3114:Demux$1140 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$219  (
    .A(\$auto$rtlil.cc:3092:Mux$1139 ),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3114:Demux$1141 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(dm_csr_addr),
    .B(8'h11),
    .Y(\$auto$rtlil.cc:3011:Eq$1143 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(dm_csr_addr),
    .B(8'h12),
    .Y(\$auto$rtlil.cc:3011:Eq$1144 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(dm_csr_addr),
    .B(8'h16),
    .Y(\$auto$rtlil.cc:3011:Eq$1145 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$225  (
    .A(cmdbusy_i),
    .Y(\$226 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$227  (
    .A(dmi_req_i[10:8]),
    .Y(\$228 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$229  (
    .A(\$228 ),
    .B(cmderr_q),
    .Y(\$230 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$231  (
    .A(cmderr_q),
    .Y(\$232 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(dm_csr_addr),
    .B(8'h17),
    .Y(\$auto$rtlil.cc:3011:Eq$1146 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(cmdbusy_i),
    .Y(\$238 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(cmderr_q),
    .Y(\$240 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(dm_csr_addr),
    .B(8'h1d),
    .Y(\$auto$rtlil.cc:3011:Eq$1147 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(dm_csr_addr),
    .B(8'h18),
    .Y(\$auto$rtlil.cc:3011:Eq$1148 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(cmdbusy_i),
    .Y(\$249 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(resp_queue_empty),
    .Y(\$26 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$250  (
    .A(cmderr_q),
    .Y(\$251 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$256  (
    .A(dm_csr_addr),
    .B(8'h20),
    .Y(\$auto$rtlil.cc:3015:Ge$1149 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(dm_csr_addr),
    .B(8'h27),
    .Y(\$auto$rtlil.cc:3010:Le$1150 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$258  (
    .A(\$auto$rtlil.cc:3015:Ge$1149 ),
    .B(\$auto$rtlil.cc:3010:Le$1150 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1151 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(cmdbusy_i),
    .Y(\$260 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A({ 1'h0, dmi_req_i[36:34] }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1152 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$262  (
    .A({ 1'h0, dmi_req_i[36:34] }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$1153 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\$auto$rtlil.cc:3015:Ge$1152 ),
    .B(\$auto$rtlil.cc:3009:Lt$1153 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1154 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$264  (
    .A(32'd0),
    .B(32'd4294967295),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1154 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1155 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$265  (
    .A(\$auto$rtlil.cc:3092:Mux$1155 ),
    .S(dmi_req_i[36:34]),
    .Y(\$auto$rtlil.cc:3114:Demux$1156 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$266  (
    .A(\$auto$rtlil.cc:3092:Mux$1155 ),
    .S(dmi_req_i[36:34]),
    .Y(\$auto$rtlil.cc:3114:Demux$1157 )
  );
  \$bwmux  #(
    .WIDTH(32'd256)
  ) \$267  (
    .A(progbuf_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S(\$auto$rtlil.cc:3114:Demux$1157 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1158 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$268  (
    .A({ 2'h1, dmi_req_i[37:34] }),
    .B(7'h20),
    .Y(\$auto$rtlil.cc:3009:Lt$1159 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$269  (
    .A({ abstractauto_q[31:16], 16'hxxxx }),
    .S({ 1'h1, dmi_req_i[37:34] }),
    .Y(\$auto$rtlil.cc:3113:Bmux$1160 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(resp_queue_full),
    .Y(\$28 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$270  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1160 ),
    .S(\$auto$rtlil.cc:3009:Lt$1159 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1161 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$271  (
    .A(cmderr_q),
    .Y(\$272 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$278  (
    .A(dm_csr_addr),
    .B(8'h38),
    .Y(\$auto$rtlil.cc:3011:Eq$1162 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$279  (
    .A(dmi_req_i[22]),
    .Y(\$280 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(sbcs_q[22]),
    .B(\$280 ),
    .Y(\$282 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A(dmi_req_i[14:12]),
    .Y(\$284 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$285  (
    .A(sbcs_q[14:12]),
    .B(3'h0),
    .S(\$284 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1163 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$289  (
    .A(dm_csr_addr),
    .B(8'h39),
    .Y(\$auto$rtlil.cc:3011:Eq$1164 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(dmi_req_valid_i),
    .B(dmi_req_ready_o),
    .Y(\$30 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$290  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$291 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(sbcs_q[14:12]),
    .Y(\$293 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$298  (
    .A(dm_csr_addr),
    .B(8'h3a),
    .Y(\$auto$rtlil.cc:3011:Eq$1165 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$300 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A({ 1'h0, hartsel_o[19:5] }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$1037 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(dm_csr_addr),
    .B(8'h3c),
    .Y(\$auto$rtlil.cc:3011:Eq$1166 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$305  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$306 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$307  (
    .A(sbcs_q[14:12]),
    .Y(\$308 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$313  (
    .A(dm_csr_addr),
    .B(8'h3d),
    .Y(\$auto$rtlil.cc:3011:Eq$1167 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$314  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$315 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd8)
  ) \$32  (
    .A(dm_csr_addr),
    .B(8'h04),
    .Y(\$33 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1043 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$356  (
    .A(dmcontrol_q[30]),
    .Y(\$357 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$358  (
    .A(\$357 ),
    .B(\$dmcontrol_d$335 [30]),
    .Y(\$359 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$36  (
    .A(havereset_q_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1044 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$361  (
    .A(dmcontrol_q[30]),
    .B(resumeack_i),
    .Y(\$362 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$367  (
    .A(hartsel_o[0]),
    .B(1'h0),
    .Y(\$368 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$369  (
    .A({ 1'h0, hartsel_o[0] }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1168 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$37  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1044 ),
    .S(\$auto$rtlil.cc:3009:Lt$1043 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1045 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$370  (
    .A({ 1'h0, hartsel_o[0] }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$1169 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$371  (
    .A(\$auto$rtlil.cc:3015:Ge$1168 ),
    .B(\$auto$rtlil.cc:3009:Lt$1169 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1170 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$372  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1170 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1171 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$374  (
    .A({ 1'h0, hartsel_o[0] }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1173 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$375  (
    .A({ 1'h0, hartsel_o[0] }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$1174 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$376  (
    .A(\$auto$rtlil.cc:3015:Ge$1173 ),
    .B(\$auto$rtlil.cc:3009:Lt$1174 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1175 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$377  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1175 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1176 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1046 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$381  (
    .A(resp_queue_empty),
    .Y(\$382 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$383  (
    .A(dmi_resp_ready_i),
    .B(\$382 ),
    .Y(\$384 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$385  (
    .A(dmi_rst_ni),
    .Y(\$386 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$388  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1178 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$39  (
    .A(havereset_q_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1047 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$392  (
    .A(dmcontrol_q[0]),
    .Y(\$393 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A(32'hxxxxxxxx),
    .B({ 31'h00000000, halted_i }),
    .S(\$auto$rtlil.cc:3009:Lt$1037 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1038 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$40  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1047 ),
    .S(\$auto$rtlil.cc:3009:Lt$1046 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1048 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1049 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$42  (
    .A(resumeack_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1050 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1050 ),
    .S(\$auto$rtlil.cc:3009:Lt$1049 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1051 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1052 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$45  (
    .A(resumeack_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1053 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$46  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1053 ),
    .S(\$auto$rtlil.cc:3009:Lt$1052 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1054 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1055 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$48  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1056 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$49  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1056 ),
    .S(\$auto$rtlil.cc:3009:Lt$1055 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1057 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1058 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$51  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1059 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$52  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1059 ),
    .S(\$auto$rtlil.cc:3009:Lt$1058 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1060 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A({ 12'h000, hartsel_o }),
    .B(32'd0),
    .Y(\$54 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A({ 12'h000, hartsel_o }),
    .B(32'd0),
    .Y(\$56 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1061 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$58  (
    .A(halted_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1062 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$59  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1062 ),
    .S(\$auto$rtlil.cc:3009:Lt$1061 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1063 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1064 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$61  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1065 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$62  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1065 ),
    .S(\$auto$rtlil.cc:3009:Lt$1064 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1066 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$auto$rtlil.cc:3092:Mux$1066 ),
    .Y(\$64 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(\$auto$rtlil.cc:3092:Mux$1063 ),
    .B(\$64 ),
    .Y(\$66 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1067 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$68  (
    .A(halted_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1068 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$69  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1068 ),
    .S(\$auto$rtlil.cc:3009:Lt$1067 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1069 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1070 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$71  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1071 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$72  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1071 ),
    .S(\$auto$rtlil.cc:3009:Lt$1070 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1072 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\$auto$rtlil.cc:3092:Mux$1072 ),
    .Y(\$74 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(\$auto$rtlil.cc:3092:Mux$1069 ),
    .B(\$74 ),
    .Y(\$76 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1073 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$78  (
    .A(halted_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1074 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1074 ),
    .S(\$auto$rtlil.cc:3009:Lt$1073 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1075 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$auto$rtlil.cc:3092:Mux$1075 ),
    .Y(\$81 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1076 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$83  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1077 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1077 ),
    .S(\$auto$rtlil.cc:3009:Lt$1076 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1078 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(\$auto$rtlil.cc:3092:Mux$1078 ),
    .Y(\$86 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\$81 ),
    .B(\$86 ),
    .Y(\$88 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1079 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(hartsel_o[19:10]),
    .B(10'h001),
    .Y(\$10 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$90  (
    .A(halted_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1080 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$91  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1080 ),
    .S(\$auto$rtlil.cc:3009:Lt$1079 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1081 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(\$auto$rtlil.cc:3092:Mux$1081 ),
    .Y(\$93 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A({ 1'h0, selected_hart }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1082 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$95  (
    .A(unavailable_aligned),
    .S(selected_hart),
    .Y(\$auto$rtlil.cc:3113:Bmux$1083 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$96  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1083 ),
    .S(\$auto$rtlil.cc:3009:Lt$1082 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1084 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\$auto$rtlil.cc:3092:Mux$1084 ),
    .Y(\$98 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$93 ),
    .B(\$98 ),
    .Y(\$100 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16659  (
    .A({ 1'h0, havereset_q }),
    .B(\$auto$rtlil.cc:2957:Not$16661 ),
    .Y(\$auto$rtlil.cc:3004:And$16662 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16660  (
    .A(\$auto$rtlil.cc:3114:Demux$1141 ),
    .Y(\$auto$rtlil.cc:2957:Not$16661 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16663  (
    .A(dmcontrol_q[31]),
    .B(\$auto$rtlil.cc:3092:Mux$1171 ),
    .Y(\$auto$rtlil.cc:3004:And$16664 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16665  (
    .A(dmcontrol_q[30]),
    .B(\$auto$rtlil.cc:3092:Mux$1176 ),
    .Y(\$auto$rtlil.cc:3004:And$16666 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd12)
  ) \$driver$abstractauto_q.autoexecdata  (
    .AD(12'h000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$398 [11:0]),
    .Q(abstractauto_q[11:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$driver$abstractauto_q.autoexecprogbuf  (
    .AD(16'h0000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$398 [31:16]),
    .Q(abstractauto_q[31:16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$abstractauto_q.zero0  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$398 [15:12]),
    .Q(abstractauto_q[15:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$cmd_valid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$cmd_valid_q$397 ),
    .Q(cmd_valid_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$cmderr_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$cmderr_q$395 ),
    .Q(cmderr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$command_q.cmdtype  (
    .AD(8'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$396 [31:24]),
    .Q(command_q[31:24])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$driver$command_q.control  (
    .AD(24'h000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$396 [23:0]),
    .Q(command_q[23:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_q[0]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$403 [31:0]),
    .Q(data_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_q[1]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$403 [63:32]),
    .Q(data_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.ackhavereset  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [28]),
    .Q(dmcontrol_q[28])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.clrresethaltreq  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [2]),
    .Q(dmcontrol_q[2])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.dmactive  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [0]),
    .Q(dmcontrol_q[0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.haltreq  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [31]),
    .Q(dmcontrol_q[31])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.hartreset  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [29]),
    .Q(dmcontrol_q[29])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd10)
  ) \$driver$dmcontrol_q.hartselhi  (
    .AD(10'h000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [15:6]),
    .Q(dmcontrol_q[15:6])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd10)
  ) \$driver$dmcontrol_q.hartsello  (
    .AD(10'h000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [25:16]),
    .Q(dmcontrol_q[25:16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.hasel  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [26]),
    .Q(dmcontrol_q[26])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.ndmreset  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [1]),
    .Q(dmcontrol_q[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.resumereq  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [30]),
    .Q(dmcontrol_q[30])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.setresethaltreq  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [3]),
    .Q(dmcontrol_q[3])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$dmcontrol_q.zero0  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [5:4]),
    .Q(dmcontrol_q[5:4])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.zero1  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [27]),
    .Q(dmcontrol_q[27])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$havereset_q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$391 ),
    .Q(havereset_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[0]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [31:0]),
    .Q(progbuf_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[1]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [63:32]),
    .Q(progbuf_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[2]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [95:64]),
    .Q(progbuf_q[95:64])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[3]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [127:96]),
    .Q(progbuf_q[127:96])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[4]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [159:128]),
    .Q(progbuf_q[159:128])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[5]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [191:160]),
    .Q(progbuf_q[191:160])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[6]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [223:192]),
    .Q(progbuf_q[223:192])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$progbuf_q[7]  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$progbuf_q$402 [255:224]),
    .Q(progbuf_q[255:224])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$sbaddr_q  (
    .AD(64'h0000000000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbaddr_q$400 ),
    .Q(sbaddr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$sbcs_q.sbaccess  (
    .AD(3'h2),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [19:17]),
    .Q(sbcs_q[19:17])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbaccess128  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [4]),
    .Q(sbcs_q[4])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbaccess16  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [1]),
    .Q(sbcs_q[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbaccess32  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [2]),
    .Q(sbcs_q[2])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbaccess64  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [3]),
    .Q(sbcs_q[3])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbaccess8  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [0]),
    .Q(sbcs_q[0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$sbcs_q.sbasize  (
    .AD(7'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [11:5]),
    .Q(sbcs_q[11:5])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbautoincrement  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [16]),
    .Q(sbcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusy  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [21]),
    .Q(sbcs_q[21])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusyerror  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [22]),
    .Q(sbcs_q[22])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$sbcs_q.sberror  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [14:12]),
    .Q(sbcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbreadonaddr  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [20]),
    .Q(sbcs_q[20])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbreadondata  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [15]),
    .Q(sbcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$sbcs_q.sbversion  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [31:29]),
    .Q(sbcs_q[31:29])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$sbcs_q.zero0  (
    .AD(6'h00),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbcs_q$399 [28:23]),
    .Q(sbcs_q[28:23])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$sbdata_q  (
    .AD(64'h0000000000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$sbdata_q$401 ),
    .Q(sbdata_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd22)
  ) \$procmux$10004  (
    .A({ dmi_req_i[21:15], \$auto$rtlil.cc:3092:Mux$1163 , dmi_req_i[11:0] }),
    .B(sbcs_q[21:0]),
    .S(\$procmux$10005_CMP ),
    .Y(\$procmux$10004_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd22)
  ) \$procmux$10006  (
    .A(22'hxxxxxx),
    .B(\$procmux$10004_Y ),
    .S(\$procmux$10007_CMP ),
    .Y(\$procmux$10006_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd22)
  ) \$procmux$10008  (
    .A(22'hxxxxxx),
    .B(\$procmux$10006_Y ),
    .S(\$procmux$10009_CMP ),
    .Y(\$procmux$10008_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10017  (
    .A(dmi_req_i[31:0]),
    .B(32'd0),
    .S(\$procmux$10018_CMP ),
    .Y(\$procmux$10017_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10019  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10017_Y ),
    .S(\$procmux$10020_CMP ),
    .Y(\$procmux$10019_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10021  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10019_Y ),
    .S(\$procmux$10022_CMP ),
    .Y(\$procmux$10021_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10030  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(\$procmux$10031_CMP ),
    .Y(\$procmux$10030_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10032  (
    .A(2'hx),
    .B(\$procmux$10030_Y ),
    .S(\$procmux$10033_CMP ),
    .Y(\$procmux$10032_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10034  (
    .A(2'hx),
    .B(\$procmux$10032_Y ),
    .S(\$procmux$10035_CMP ),
    .Y(\$procmux$10034_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10043  (
    .A(\$282 ),
    .B(1'h1),
    .S(\$procmux$10044_CMP ),
    .Y(\$procmux$10043_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10045  (
    .A(1'hx),
    .B(\$procmux$10043_Y ),
    .S(\$procmux$10046_CMP ),
    .Y(\$procmux$10045_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10047  (
    .A(1'hx),
    .B(\$procmux$10045_Y ),
    .S(\$procmux$10048_CMP ),
    .Y(\$procmux$10047_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:455.15-455.41|rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10056  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$procmux$10057_CMP ),
    .Y(\$procmux$10056_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10059  (
    .A(3'hx),
    .B(\$procmux$10056_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$10059_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10061  (
    .A(3'hx),
    .B(\$procmux$10059_Y ),
    .S(\$procmux$10062_CMP ),
    .Y(\$procmux$10061_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10063  (
    .A(3'hx),
    .B(\$procmux$10061_Y ),
    .S(\$procmux$10064_CMP ),
    .Y(\$procmux$10063_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10074  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10074_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10076  (
    .A(2'hx),
    .B(\$procmux$10074_Y ),
    .S(\$procmux$10077_CMP ),
    .Y(\$procmux$10076_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10078  (
    .A(2'hx),
    .B(\$procmux$10076_Y ),
    .S(\$procmux$10079_CMP ),
    .Y(\$procmux$10078_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10088  (
    .A(\$auto$rtlil.cc:3093:Bwmux$1158 ),
    .B(progbuf_q),
    .S(cmdbusy_i),
    .Y(\$procmux$10088_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10090  (
    .A(256'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$10088_Y ),
    .S(\$procmux$10091_CMP ),
    .Y(\$procmux$10090_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10092  (
    .A(256'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$10090_Y ),
    .S(\$procmux$10093_CMP ),
    .Y(\$procmux$10092_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10102  (
    .A(\$auto$rtlil.cc:3092:Mux$1161 ),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10102_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10104  (
    .A(1'hx),
    .B(\$procmux$10102_Y ),
    .S(\$procmux$10105_CMP ),
    .Y(\$procmux$10104_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10106  (
    .A(1'hx),
    .B(\$procmux$10104_Y ),
    .S(\$procmux$10107_CMP ),
    .Y(\$procmux$10106_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10117  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$273 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10117_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10119  (
    .A(3'hx),
    .B(\$procmux$10117_Y ),
    .S(\$procmux$10120_CMP ),
    .Y(\$procmux$10119_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10121  (
    .A(3'hx),
    .B(\$procmux$10119_Y ),
    .S(\$procmux$10122_CMP ),
    .Y(\$procmux$10121_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:438.15-438.41|rtl/riscv-dbg/dm_csrs.sv:437.13-439.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10131  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$procmux$10132_CMP ),
    .Y(\$procmux$10131_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.27-435.14|rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10134  (
    .A(3'hx),
    .B(\$procmux$10131_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$10134_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10136  (
    .A(3'hx),
    .B(\$procmux$10134_Y ),
    .S(\$procmux$10137_CMP ),
    .Y(\$procmux$10136_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10138  (
    .A(3'hx),
    .B(\$procmux$10136_Y ),
    .S(\$procmux$10139_CMP ),
    .Y(\$procmux$10138_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.27-435.14|rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10150  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10150_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10152  (
    .A(2'hx),
    .B(\$procmux$10150_Y ),
    .S(\$procmux$10153_CMP ),
    .Y(\$procmux$10152_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10154  (
    .A(2'hx),
    .B(\$procmux$10152_Y ),
    .S(\$procmux$10155_CMP ),
    .Y(\$procmux$10154_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.27-435.14|rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10165  (
    .A({ 8'h00, dmi_req_i[23:16], 14'h0000, dmi_req_i[1:0] }),
    .B({ abstractauto_q[31:16], 4'h0, abstractauto_q[11:0] }),
    .S(cmdbusy_i),
    .Y(\$procmux$10165_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10167  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10165_Y ),
    .S(\$procmux$10168_CMP ),
    .Y(\$procmux$10167_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10169  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10167_Y ),
    .S(\$procmux$10170_CMP ),
    .Y(\$procmux$10169_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.27-435.14|rtl/riscv-dbg/dm_csrs.sv:431.11-440.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10181  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$252 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10181_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10183  (
    .A(3'hx),
    .B(\$procmux$10181_Y ),
    .S(\$procmux$10184_CMP ),
    .Y(\$procmux$10183_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10185  (
    .A(3'hx),
    .B(\$procmux$10183_Y ),
    .S(\$procmux$10186_CMP ),
    .Y(\$procmux$10185_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:424.15-424.41|rtl/riscv-dbg/dm_csrs.sv:423.13-425.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10197  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$procmux$10198_CMP ),
    .Y(\$procmux$10197_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10200  (
    .A(3'hx),
    .B(\$procmux$10197_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$10200_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10202  (
    .A(3'hx),
    .B(\$procmux$10200_Y ),
    .S(\$procmux$10203_CMP ),
    .Y(\$procmux$10202_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10204  (
    .A(3'hx),
    .B(\$procmux$10202_Y ),
    .S(\$procmux$10205_CMP ),
    .Y(\$procmux$10204_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10218  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10218_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10220  (
    .A(2'hx),
    .B(\$procmux$10218_Y ),
    .S(\$procmux$10221_CMP ),
    .Y(\$procmux$10220_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10222  (
    .A(2'hx),
    .B(\$procmux$10220_Y ),
    .S(\$procmux$10223_CMP ),
    .Y(\$procmux$10222_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10235  (
    .A(1'h1),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10235_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10237  (
    .A(1'hx),
    .B(\$procmux$10235_Y ),
    .S(\$procmux$10238_CMP ),
    .Y(\$procmux$10237_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10239  (
    .A(1'hx),
    .B(\$procmux$10237_Y ),
    .S(\$procmux$10240_CMP ),
    .Y(\$procmux$10239_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10252  (
    .A(dmi_req_i[31:0]),
    .B(command_q),
    .S(cmdbusy_i),
    .Y(\$procmux$10252_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10254  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10252_Y ),
    .S(\$procmux$10255_CMP ),
    .Y(\$procmux$10254_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10256  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10254_Y ),
    .S(\$procmux$10257_CMP ),
    .Y(\$procmux$10256_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10270  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$241 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10270_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10272  (
    .A(3'hx),
    .B(\$procmux$10270_Y ),
    .S(\$procmux$10273_CMP ),
    .Y(\$procmux$10272_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10274  (
    .A(3'hx),
    .B(\$procmux$10272_Y ),
    .S(\$procmux$10275_CMP ),
    .Y(\$procmux$10274_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:410.15-410.41|rtl/riscv-dbg/dm_csrs.sv:409.13-411.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10287  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$procmux$10288_CMP ),
    .Y(\$procmux$10287_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10290  (
    .A(3'hx),
    .B(\$procmux$10287_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$10290_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:398.25-413.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10292  (
    .A(3'hx),
    .B(\$procmux$10290_Y ),
    .S(\$procmux$10293_CMP ),
    .Y(\$procmux$10292_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10294  (
    .A(3'hx),
    .B(\$procmux$10292_Y ),
    .S(\$procmux$10295_CMP ),
    .Y(\$procmux$10294_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10309  (
    .A(\$230 ),
    .B(\$cmderr_d$233 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10309_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:398.25-413.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10311  (
    .A(3'hx),
    .B(\$procmux$10309_Y ),
    .S(\$procmux$10312_CMP ),
    .Y(\$procmux$10311_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10313  (
    .A(3'hx),
    .B(\$procmux$10311_Y ),
    .S(\$procmux$10314_CMP ),
    .Y(\$procmux$10313_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10328  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10328_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:398.25-413.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10330  (
    .A(2'hx),
    .B(\$procmux$10328_Y ),
    .S(\$procmux$10331_CMP ),
    .Y(\$procmux$10330_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10332  (
    .A(2'hx),
    .B(\$procmux$10330_Y ),
    .S(\$procmux$10333_CMP ),
    .Y(\$procmux$10332_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:392.13-392.55|rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10348  (
    .A({ 1'h0, havereset_q }),
    .B(\$auto$rtlil.cc:3093:Bwmux$1142 ),
    .S(\$procmux$10349_CMP ),
    .Y(\$procmux$10348_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10350  (
    .A(2'hx),
    .B(\$procmux$10348_Y ),
    .S(\$procmux$10351_CMP ),
    .Y(\$procmux$10350_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10352  (
    .A(2'hx),
    .B(\$procmux$10350_Y ),
    .S(\$procmux$10353_CMP ),
    .Y(\$procmux$10352_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10370  (
    .A(2'hx),
    .B(\$resp_queue_inp[1:0]$208 ),
    .S(\$procmux$10371_CMP ),
    .Y(\$procmux$10370_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10372  (
    .A(2'hx),
    .B(\$procmux$10370_Y ),
    .S(\$procmux$10373_CMP ),
    .Y(\$procmux$10372_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10390  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$data_d$207 ),
    .S(\$procmux$10391_CMP ),
    .Y(\$procmux$10390_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10392  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$10390_Y ),
    .S(\$procmux$10393_CMP ),
    .Y(\$procmux$10392_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10410  (
    .A(1'hx),
    .B(\$cmd_valid_d$206 ),
    .S(\$procmux$10411_CMP ),
    .Y(\$procmux$10410_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10412  (
    .A(1'hx),
    .B(\$procmux$10410_Y ),
    .S(\$procmux$10413_CMP ),
    .Y(\$procmux$10412_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10430  (
    .A(3'hx),
    .B(\$cmderr_d$205 ),
    .S(\$procmux$10431_CMP ),
    .Y(\$procmux$10430_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10432  (
    .A(3'hx),
    .B(\$procmux$10430_Y ),
    .S(\$procmux$10433_CMP ),
    .Y(\$procmux$10432_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:383.17-383.43|rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10449  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$procmux$10450_CMP ),
    .Y(\$procmux$10449_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10452  (
    .A(3'hx),
    .B(\$procmux$10449_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$10452_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10454  (
    .A(3'hx),
    .B(\$procmux$10452_Y ),
    .S(\$procmux$10455_CMP ),
    .Y(\$procmux$10454_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10456  (
    .A(3'hx),
    .B(\$procmux$10454_Y ),
    .S(\$procmux$10457_CMP ),
    .Y(\$procmux$10456_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10475  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10475_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10477  (
    .A(2'hx),
    .B(\$procmux$10475_Y ),
    .S(\$procmux$10478_CMP ),
    .Y(\$procmux$10477_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10479  (
    .A(2'hx),
    .B(\$procmux$10477_Y ),
    .S(\$procmux$10480_CMP ),
    .Y(\$procmux$10479_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10497  (
    .A(\$auto$rtlil.cc:3093:Bwmux$1131 ),
    .B(data_q),
    .S(cmdbusy_i),
    .Y(\$procmux$10497_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10499  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$10497_Y ),
    .S(\$procmux$10500_CMP ),
    .Y(\$procmux$10499_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10501  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$10499_Y ),
    .S(\$procmux$10502_CMP ),
    .Y(\$procmux$10501_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10519  (
    .A(\$auto$rtlil.cc:3092:Mux$1134 ),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10519_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10521  (
    .A(1'hx),
    .B(\$procmux$10519_Y ),
    .S(\$procmux$10522_CMP ),
    .Y(\$procmux$10521_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10523  (
    .A(1'hx),
    .B(\$procmux$10521_Y ),
    .S(\$procmux$10524_CMP ),
    .Y(\$procmux$10523_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10542  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$204 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10542_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10544  (
    .A(3'hx),
    .B(\$procmux$10542_Y ),
    .S(\$procmux$10545_CMP ),
    .Y(\$procmux$10544_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10546  (
    .A(3'hx),
    .B(\$procmux$10544_Y ),
    .S(\$procmux$10547_CMP ),
    .Y(\$procmux$10546_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10552  (
    .A(1'h0),
    .B(\$sbdata_write_valid_o$312 ),
    .S(\$procmux$10553_CMP ),
    .Y(\$procmux$10552_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10554  (
    .A(1'hx),
    .B(\$procmux$10552_Y ),
    .S(\$procmux$10555_CMP ),
    .Y(\$procmux$10554_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10562  (
    .A(1'h0),
    .B(\$sbaddress_write_valid_o$297 ),
    .S(\$procmux$10563_CMP ),
    .Y(\$procmux$10562_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10564  (
    .A(1'hx),
    .B(\$procmux$10562_Y ),
    .S(\$procmux$10565_CMP ),
    .Y(\$procmux$10564_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:398.25-413.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10578  (
    .A(32'd0),
    .B(dmi_req_i[31:0]),
    .S(\$procmux$10579_CMP ),
    .Y(\$procmux$10578_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10580  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10578_Y ),
    .S(\$procmux$10581_CMP ),
    .Y(\$procmux$10580_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10589  (
    .A(32'd0),
    .B(\$sbcs$288 ),
    .S(\$procmux$10590_CMP ),
    .Y(\$procmux$10589_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10591  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10589_Y ),
    .S(\$procmux$10592_CMP ),
    .Y(\$procmux$10591_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10608  (
    .A({ 1'h0, havereset_q }),
    .B(\$havereset_d_aligned$221 ),
    .S(\$procmux$10609_CMP ),
    .Y(\$procmux$10608_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10610  (
    .A(2'hx),
    .B(\$procmux$10608_Y ),
    .S(\$procmux$10611_CMP ),
    .Y(\$procmux$10610_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd2)
  ) \$procmux$10615  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B({ \$resp_queue_inp[1:0]$212 , \$resp_queue_inp[1:0]$235 , \$resp_queue_inp[1:0]$245 , \$resp_queue_inp[1:0]$255 , \$resp_queue_inp[1:0]$277 , \$resp_queue_inp[1:0]$287 , \$resp_queue_inp[1:0]$296 , \$resp_queue_inp[1:0]$303 , \$resp_queue_inp[1:0]$311 , \$resp_queue_inp[1:0]$318  }),
    .S({ \$procmux$10634_CMP , \$procmux$10632_CMP , \$procmux$10630_CMP , \$procmux$10628_CMP , \$procmux$10626_CMP , \$procmux$10624_CMP , \$procmux$10622_CMP , \$procmux$10620_CMP , \$procmux$10618_CMP , \$procmux$10616_CMP  }),
    .Y(\$procmux$10615_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10635  (
    .A(2'hx),
    .B(\$procmux$10615_Y ),
    .S(\$procmux$10636_CMP ),
    .Y(\$procmux$10635_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:373.11-386.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10653  (
    .A(data_q),
    .B(\$data_d$211 ),
    .S(\$procmux$10654_CMP ),
    .Y(\$procmux$10653_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10655  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$10653_Y ),
    .S(\$procmux$10656_CMP ),
    .Y(\$procmux$10655_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10665  (
    .A(progbuf_q),
    .B(\$progbuf_d$276 ),
    .S(\$procmux$10666_CMP ),
    .Y(\$procmux$10665_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10667  (
    .A(256'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$10665_Y ),
    .S(\$procmux$10668_CMP ),
    .Y(\$procmux$10667_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10673  (
    .A(\$308 ),
    .B(1'h0),
    .S(\$procmux$10674_CMP ),
    .Y(\$procmux$10673_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10675  (
    .A(1'hx),
    .B(\$procmux$10673_Y ),
    .S(\$procmux$10676_CMP ),
    .Y(\$procmux$10675_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10677  (
    .A(1'hx),
    .B(\$procmux$10675_Y ),
    .S(\$procmux$10678_CMP ),
    .Y(\$procmux$10677_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd9)
  ) \$procmux$10686  (
    .A(sbcs_q[31:23]),
    .B(\$sbcs_d$286 [31:23]),
    .S(\$procmux$10687_CMP ),
    .Y(\$procmux$10686_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd9)
  ) \$procmux$10688  (
    .A(9'hxxx),
    .B(\$procmux$10686_Y ),
    .S(\$procmux$10689_CMP ),
    .Y(\$procmux$10688_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10696  (
    .A(\$293 ),
    .B(1'h0),
    .S(\$procmux$10697_CMP ),
    .Y(\$procmux$10696_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10698  (
    .A(1'hx),
    .B(\$procmux$10696_Y ),
    .S(\$procmux$10699_CMP ),
    .Y(\$procmux$10698_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10700  (
    .A(1'hx),
    .B(\$procmux$10698_Y ),
    .S(\$procmux$10701_CMP ),
    .Y(\$procmux$10700_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:431.11-440.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10711  (
    .A({ abstractauto_q[31:16], 4'h0, abstractauto_q[11:0] }),
    .B(\$abstractauto_d$254 ),
    .S(\$procmux$10712_CMP ),
    .Y(\$procmux$10711_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10713  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10711_Y ),
    .S(\$procmux$10714_CMP ),
    .Y(\$procmux$10713_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$10723  (
    .A(\$cmd_valid_d$177 ),
    .B({ \$cmd_valid_d$210 , \$cmd_valid_d$244 , \$cmd_valid_d$275  }),
    .S({ \$procmux$10728_CMP , \$procmux$10726_CMP , \$procmux$10724_CMP  }),
    .Y(\$procmux$10723_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10729  (
    .A(1'hx),
    .B(\$procmux$10723_Y ),
    .S(\$procmux$10730_CMP ),
    .Y(\$procmux$10729_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10742  (
    .A(command_q),
    .B(\$command_d$243 ),
    .S(\$procmux$10743_CMP ),
    .Y(\$procmux$10742_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10744  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10742_Y ),
    .S(\$procmux$10745_CMP ),
    .Y(\$procmux$10744_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$10754  (
    .A(\$cmderr_d$176 ),
    .B({ \$cmderr_d$209 , \$cmderr_d$234 , \$cmderr_d$242 , \$cmderr_d$253 , \$cmderr_d$274  }),
    .S({ \$procmux$10763_CMP , \$procmux$10761_CMP , \$procmux$10759_CMP , \$procmux$10757_CMP , \$procmux$10755_CMP  }),
    .Y(\$procmux$10754_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10764  (
    .A(3'hx),
    .B(\$procmux$10754_Y ),
    .S(\$procmux$10765_CMP ),
    .Y(\$procmux$10764_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10781  (
    .A(dmcontrol_q),
    .B(dmi_req_i[31:0]),
    .S(\$procmux$10782_CMP ),
    .Y(\$procmux$10781_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10783  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10781_Y ),
    .S(\$procmux$10784_CMP ),
    .Y(\$procmux$10783_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10787  (
    .A(1'h0),
    .B(\$sbdata_write_valid_o$334 ),
    .S(\$procmux$10788_CMP ),
    .Y(\$procmux$10787_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10791  (
    .A(1'h0),
    .B(\$sbaddress_write_valid_o$333 ),
    .S(\$procmux$10792_CMP ),
    .Y(\$procmux$10791_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10795  (
    .A(32'd0),
    .B(\$a_abstractcs$332 ),
    .S(\$procmux$10796_CMP ),
    .Y(\$procmux$10795_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10799  (
    .A(32'd0),
    .B(\$sbcs$331 ),
    .S(\$procmux$10800_CMP ),
    .Y(\$procmux$10799_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10803  (
    .A({ 1'h0, havereset_q }),
    .B(\$havereset_d_aligned$330 ),
    .S(\$procmux$10804_CMP ),
    .Y(\$procmux$10803_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10807  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(\$resp_queue_inp[1:0]$329 ),
    .S(\$procmux$10808_CMP ),
    .Y(\$procmux$10807_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10811  (
    .A(data_q),
    .B(\$data_d$328 ),
    .S(\$procmux$10812_CMP ),
    .Y(\$procmux$10811_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$10815  (
    .A(progbuf_q),
    .B(\$progbuf_d$327 ),
    .S(\$procmux$10816_CMP ),
    .Y(\$procmux$10815_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10819  (
    .A(sbdata_q),
    .B(\$sbdata_d$326 ),
    .S(\$procmux$10820_CMP ),
    .Y(\$procmux$10819_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10823  (
    .A({ 32'h00000000, sbaddress_i }),
    .B(\$sbaddr_d$325 ),
    .S(\$procmux$10824_CMP ),
    .Y(\$procmux$10823_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10827  (
    .A({ sbcs_q[31:23], \$sbcs_d[22]$178 , sbcs_q[21:0] }),
    .B(\$sbcs_d$324 ),
    .S(\$procmux$10828_CMP ),
    .Y(\$procmux$10827_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10831  (
    .A({ abstractauto_q[31:16], 4'h0, abstractauto_q[11:0] }),
    .B(\$abstractauto_d$323 ),
    .S(\$procmux$10832_CMP ),
    .Y(\$procmux$10831_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10835  (
    .A(\$cmd_valid_d$177 ),
    .B(\$cmd_valid_d$322 ),
    .S(\$procmux$10836_CMP ),
    .Y(\$procmux$10835_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10839  (
    .A(command_q),
    .B(\$command_d$321 ),
    .S(\$procmux$10840_CMP ),
    .Y(\$procmux$10839_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10843  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$320 ),
    .S(\$procmux$10844_CMP ),
    .Y(\$procmux$10843_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10847  (
    .A(dmcontrol_q),
    .B(\$dmcontrol_d$319 ),
    .S(\$procmux$10848_CMP ),
    .Y(\$procmux$10847_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd17),
    .WIDTH(32'd32)
  ) \$procmux$10852  (
    .A(32'd0),
    .B({ \$auto$rtlil.cc:3092:Mux$1090 , dmcontrol_q, 12'h000, \$auto$rtlil.cc:3092:Mux$1045 , \$auto$rtlil.cc:3092:Mux$1048 , \$auto$rtlil.cc:3092:Mux$1051 , \$auto$rtlil.cc:3092:Mux$1054 , \$54 , \$56 , \$auto$rtlil.cc:3092:Mux$1057 , \$auto$rtlil.cc:3092:Mux$1060 , \$88 , \$100 , \$66 , \$76 , 8'h82, \$auto$rtlil.cc:3092:Mux$1099 , 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 8'h02, abstractauto_q, next_dm_addr_i, \$auto$rtlil.cc:3092:Mux$1109 , \$haltsum0$5 , \$haltsum1$13 , \$haltsum2$21 , 31'h00000000, \$24 , sbcs_q, sbaddr_q[31:0], sbaddr_q[63:32], \$resp_queue_inp$164 [33:2], \$resp_queue_inp$170 [33:2] }),
    .S({ \$procmux$10872_CMP , \$procmux$10870_CMP , \$procmux$10869_CMP , \$procmux$10868_CMP , \$procmux$10867_CMP , \$procmux$10866_CMP , \$procmux$10865_CMP , \$procmux$10864_CMP , \$procmux$10862_CMP , \$procmux$10861_CMP , \$procmux$10860_CMP , \$procmux$10859_CMP , \$procmux$10858_CMP , \$procmux$10857_CMP , \$procmux$10856_CMP , \$procmux$10855_CMP , \$procmux$10853_CMP  }),
    .Y(\$procmux$10852_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10873  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10852_Y ),
    .S(\$procmux$10874_CMP ),
    .Y(\$procmux$10873_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10877  (
    .A(2'h0),
    .B(2'h3),
    .S(\$procmux$10878_CMP ),
    .Y(\$procmux$10877_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10879  (
    .A(2'hx),
    .B(\$procmux$10877_Y ),
    .S(\$procmux$10880_CMP ),
    .Y(\$procmux$10879_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10881  (
    .A(2'hx),
    .B(\$procmux$10879_Y ),
    .S(\$procmux$10882_CMP ),
    .Y(\$procmux$10881_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10885  (
    .A(sbcs_q[22]),
    .B(1'h1),
    .S(\$procmux$10886_CMP ),
    .Y(\$procmux$10885_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10887  (
    .A(1'hx),
    .B(\$procmux$10885_Y ),
    .S(\$procmux$10888_CMP ),
    .Y(\$procmux$10887_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10889  (
    .A(1'hx),
    .B(\$procmux$10887_Y ),
    .S(\$procmux$10890_CMP ),
    .Y(\$procmux$10889_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd2)
  ) \$procmux$10893  (
    .A(2'h0),
    .B({ \$resp_queue_inp[1:0]$123 , \$resp_queue_inp[1:0]$150 , \$resp_queue_inp$164 [1:0], \$resp_queue_inp$170 [1:0] }),
    .S({ \$procmux$10900_CMP , \$procmux$10898_CMP , \$procmux$10896_CMP , \$procmux$10894_CMP  }),
    .Y(\$procmux$10893_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10901  (
    .A(2'hx),
    .B(\$procmux$10893_Y ),
    .S(\$procmux$10902_CMP ),
    .Y(\$procmux$10901_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10906  (
    .A(2'h0),
    .B(2'h3),
    .S(\$procmux$10907_CMP ),
    .Y(\$procmux$10906_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10908  (
    .A(2'hx),
    .B(\$procmux$10906_Y ),
    .S(\$procmux$10909_CMP ),
    .Y(\$procmux$10908_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10910  (
    .A(2'hx),
    .B(\$procmux$10908_Y ),
    .S(\$procmux$10911_CMP ),
    .Y(\$procmux$10910_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10915  (
    .A(\$162 ),
    .B(1'h0),
    .S(\$procmux$10916_CMP ),
    .Y(\$procmux$10915_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10917  (
    .A(1'hx),
    .B(\$procmux$10915_Y ),
    .S(\$procmux$10918_CMP ),
    .Y(\$procmux$10917_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10919  (
    .A(1'hx),
    .B(\$procmux$10917_Y ),
    .S(\$procmux$10920_CMP ),
    .Y(\$procmux$10919_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10924  (
    .A(sbcs_q[22]),
    .B(1'h1),
    .S(\$procmux$10925_CMP ),
    .Y(\$procmux$10924_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10926  (
    .A(1'hx),
    .B(\$procmux$10924_Y ),
    .S(\$procmux$10927_CMP ),
    .Y(\$procmux$10926_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10928  (
    .A(1'hx),
    .B(\$procmux$10926_Y ),
    .S(\$procmux$10929_CMP ),
    .Y(\$procmux$10928_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10932  (
    .A(sbdata_q[63:32]),
    .B(32'd0),
    .S(\$procmux$10933_CMP ),
    .Y(\$procmux$10932_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10934  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10932_Y ),
    .S(\$procmux$10935_CMP ),
    .Y(\$procmux$10934_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10936  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10934_Y ),
    .S(\$procmux$10937_CMP ),
    .Y(\$procmux$10936_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10950  (
    .A(2'h0),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$10950_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10952  (
    .A(2'hx),
    .B(\$procmux$10950_Y ),
    .S(\$procmux$10953_CMP ),
    .Y(\$procmux$10952_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10954  (
    .A(2'hx),
    .B(\$procmux$10952_Y ),
    .S(\$procmux$10955_CMP ),
    .Y(\$procmux$10954_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10967  (
    .A(\$auto$rtlil.cc:3092:Mux$1112 ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$procmux$10967_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10969  (
    .A(1'hx),
    .B(\$procmux$10967_Y ),
    .S(\$procmux$10970_CMP ),
    .Y(\$procmux$10969_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10971  (
    .A(1'hx),
    .B(\$procmux$10969_Y ),
    .S(\$procmux$10972_CMP ),
    .Y(\$procmux$10971_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10985  (
    .A(cmderr_q),
    .B(\$cmderr_d$147 ),
    .S(cmdbusy_i),
    .Y(\$procmux$10985_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10987  (
    .A(3'hx),
    .B(\$procmux$10985_Y ),
    .S(\$procmux$10988_CMP ),
    .Y(\$procmux$10987_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10989  (
    .A(3'hx),
    .B(\$procmux$10987_Y ),
    .S(\$procmux$10990_CMP ),
    .Y(\$procmux$10989_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10994  (
    .A(sbdata_q[31:0]),
    .B(32'd0),
    .S(\$procmux$10995_CMP ),
    .Y(\$procmux$10994_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10996  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10994_Y ),
    .S(\$procmux$10997_CMP ),
    .Y(\$procmux$10996_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10998  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$10996_Y ),
    .S(\$procmux$10999_CMP ),
    .Y(\$procmux$10998_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:329.15-329.41|rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11010  (
    .A(cmderr_q),
    .B(3'h1),
    .S(\$procmux$11011_CMP ),
    .Y(\$procmux$11010_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11013  (
    .A(3'hx),
    .B(\$procmux$11010_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$11013_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11015  (
    .A(3'hx),
    .B(\$procmux$11013_Y ),
    .S(\$procmux$11016_CMP ),
    .Y(\$procmux$11015_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11017  (
    .A(3'hx),
    .B(\$procmux$11015_Y ),
    .S(\$procmux$11018_CMP ),
    .Y(\$procmux$11017_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11039  (
    .A(2'h0),
    .B(2'h3),
    .S(cmdbusy_i),
    .Y(\$procmux$11039_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:298.32-310.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11041  (
    .A(2'hx),
    .B(\$procmux$11039_Y ),
    .S(\$procmux$11042_CMP ),
    .Y(\$procmux$11041_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11043  (
    .A(2'hx),
    .B(\$procmux$11041_Y ),
    .S(\$procmux$11044_CMP ),
    .Y(\$procmux$11043_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11064  (
    .A(\$auto$rtlil.cc:3092:Mux$1093 ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$procmux$11064_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:298.32-310.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11066  (
    .A(1'hx),
    .B(\$procmux$11064_Y ),
    .S(\$procmux$11067_CMP ),
    .Y(\$procmux$11066_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11068  (
    .A(1'hx),
    .B(\$procmux$11066_Y ),
    .S(\$procmux$11069_CMP ),
    .Y(\$procmux$11068_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11090  (
    .A(cmderr_q),
    .B(\$cmderr_d$120 ),
    .S(cmdbusy_i),
    .Y(\$procmux$11090_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:298.32-310.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11092  (
    .A(3'hx),
    .B(\$procmux$11090_Y ),
    .S(\$procmux$11093_CMP ),
    .Y(\$procmux$11092_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11094  (
    .A(3'hx),
    .B(\$procmux$11092_Y ),
    .S(\$procmux$11095_CMP ),
    .Y(\$procmux$11094_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.11-354.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11099  (
    .A(1'h0),
    .B(\$sbdata_read_valid_o$165 ),
    .S(\$procmux$11100_CMP ),
    .Y(\$procmux$11099_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11101  (
    .A(1'hx),
    .B(\$procmux$11099_Y ),
    .S(\$procmux$11102_CMP ),
    .Y(\$procmux$11101_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:307.15-307.41|rtl/riscv-dbg/dm_csrs.sv:306.13-308.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11121  (
    .A(cmderr_q),
    .B(3'h1),
    .S(\$procmux$11122_CMP ),
    .Y(\$procmux$11121_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11124  (
    .A(3'hx),
    .B(\$procmux$11121_Y ),
    .S(cmdbusy_i),
    .Y(\$procmux$11124_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:298.32-310.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11126  (
    .A(3'hx),
    .B(\$procmux$11124_Y ),
    .S(\$procmux$11127_CMP ),
    .Y(\$procmux$11126_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11128  (
    .A(3'hx),
    .B(\$procmux$11126_Y ),
    .S(\$procmux$11129_CMP ),
    .Y(\$procmux$11128_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11132  (
    .A(sbcs_q[22]),
    .B({ \$sbcs_d[22]$163 , \$sbcs_d[22]$169  }),
    .S({ \$procmux$11135_CMP , \$procmux$11133_CMP  }),
    .Y(\$procmux$11132_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11136  (
    .A(1'hx),
    .B(\$procmux$11132_Y ),
    .S(\$procmux$11137_CMP ),
    .Y(\$procmux$11136_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11149  (
    .A(1'h0),
    .B({ \$cmd_valid_d$122 , \$cmd_valid_d$149  }),
    .S({ \$procmux$11152_CMP , \$procmux$11150_CMP  }),
    .Y(\$procmux$11149_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11153  (
    .A(1'hx),
    .B(\$procmux$11149_Y ),
    .S(\$procmux$11154_CMP ),
    .Y(\$procmux$11153_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd3)
  ) \$procmux$11166  (
    .A(cmderr_q),
    .B({ \$cmderr_d$121 , \$cmderr_d$148  }),
    .S({ \$procmux$11169_CMP , \$procmux$11167_CMP  }),
    .Y(\$procmux$11166_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11170  (
    .A(3'hx),
    .B(\$procmux$11166_Y ),
    .S(\$procmux$11171_CMP ),
    .Y(\$procmux$11170_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11173  (
    .A(1'h0),
    .B(\$sbdata_read_valid_o$175 ),
    .S(\$procmux$11174_CMP ),
    .Y(\$procmux$11173_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$11176  (
    .A(34'h000000000),
    .B(\$resp_queue_inp$174 ),
    .S(\$procmux$11177_CMP ),
    .Y(\$procmux$11176_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11179  (
    .A(sbcs_q[22]),
    .B(\$sbcs_d[22]$173 ),
    .S(\$procmux$11180_CMP ),
    .Y(\$procmux$11179_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11182  (
    .A(1'h0),
    .B(\$cmd_valid_d$172 ),
    .S(\$procmux$11183_CMP ),
    .Y(\$procmux$11182_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11185  (
    .A(cmderr_q),
    .B(\$cmderr_d$171 ),
    .S(\$procmux$11186_CMP ),
    .Y(\$procmux$11185_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11188  (
    .A(64'h0000000000000000),
    .B(\$data_d$352 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11188_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$11191  (
    .A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .B(\$progbuf_d$343 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11191_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11194  (
    .A(64'h0000000000000000),
    .B(\$sbdata_d$355 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11194_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11197  (
    .A(64'h0000000000000000),
    .B(\$sbaddr_d$341 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11197_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11200  (
    .A(32'd262144),
    .B({ 3'h1, \$sbcs_d$340 [28:22], sbbusy_i, \$sbcs_d$340 [20:15], \$sbcs_d[14:12]$354 , 12'h407 }),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11200_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11203  (
    .A(32'd0),
    .B(\$abstractauto_d$339 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11203_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11206  (
    .A(1'h0),
    .B(\$cmd_valid_d$338 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11206_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11209  (
    .A(32'd0),
    .B(\$command_d$337 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11209_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11212  (
    .A(3'h0),
    .B(\$cmderr_d$351 ),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11212_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11215  (
    .A({ 31'h00000000, \$dmcontrol_d$335 [0] }),
    .B({ \$dmcontrol_d$335 [31], \$dmcontrol_d[30]$363 , 4'h0, \$365 [9:0], \$365 [19:10], 4'h0, \$dmcontrol_d$335 [1:0] }),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11215_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:576.50-579.8|rtl/riscv-dbg/dm_csrs.sv:576.5-579.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11217  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3093:Bwmux$1177 ),
    .S(\$procmux$11218_CMP ),
    .Y(\$procmux$11217_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:576.50-579.8|rtl/riscv-dbg/dm_csrs.sv:576.5-579.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11219  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3093:Bwmux$1172 ),
    .S(\$procmux$11220_CMP ),
    .Y(\$procmux$11219_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:151.7-151.57|rtl/riscv-dbg/dm_csrs.sv:150.5-152.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11221  (
    .A(32'd0),
    .B(\$auto$rtlil.cc:3092:Mux$1042 ),
    .S(\$procmux$11222_CMP ),
    .Y(\$procmux$11221_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:134.7-134.49|rtl/riscv-dbg/dm_csrs.sv:133.5-135.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11223  (
    .A(32'd0),
    .B(\$auto$rtlil.cc:3092:Mux$1040 ),
    .S(\$procmux$11224_CMP ),
    .Y(\$procmux$11223_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:117.7-117.49|rtl/riscv-dbg/dm_csrs.sv:116.5-118.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11225  (
    .A(32'd0),
    .B(\$auto$rtlil.cc:3092:Mux$1038 ),
    .S(\$procmux$11226_CMP ),
    .Y(\$procmux$11225_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:554.7-554.36|rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9750  (
    .A(\$dmcontrol_d$335 [30]),
    .B(1'h0),
    .S(\$procmux$9751_CMP ),
    .Y(\$procmux$9750_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:551.7-551.32|rtl/riscv-dbg/dm_csrs.sv:550.5-552.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9760  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9761_CMP ),
    .Y(\$procmux$9760_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:536.7-536.32|rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9769  (
    .A(\$sbdata_d$342 ),
    .B({ 32'h00000000, sbdata_i }),
    .S(\$procmux$9770_CMP ),
    .Y(\$procmux$9769_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:532.7-532.34|rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9777  (
    .A(\$sbcs_d$340 [14:12]),
    .B(sberror_i),
    .S(\$procmux$9778_CMP ),
    .Y(\$procmux$9777_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:525.7-525.45|rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9784  (
    .A(\$havereset_d_aligned$346 [0]),
    .B(1'h1),
    .S(\$procmux$9785_CMP ),
    .Y(\$procmux$9784_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:520.7-520.23|rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9790  (
    .A(\$data_d$344 ),
    .B(data_i),
    .S(\$procmux$9791_CMP ),
    .Y(\$procmux$9790_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:515.7-515.29|rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9795  (
    .A(\$cmderr_d$336 ),
    .B(cmderror_i),
    .S(\$procmux$9796_CMP ),
    .Y(\$procmux$9795_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9801  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(\$procmux$9802_CMP ),
    .Y(\$procmux$9801_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9803  (
    .A(2'hx),
    .B(\$procmux$9801_Y ),
    .S(\$procmux$9804_CMP ),
    .Y(\$procmux$9803_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9805  (
    .A(2'hx),
    .B(\$procmux$9803_Y ),
    .S(\$procmux$9806_CMP ),
    .Y(\$procmux$9805_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9810  (
    .A(dmi_req_i[31:0]),
    .B(sbdata_q[63:32]),
    .S(\$procmux$9811_CMP ),
    .Y(\$procmux$9810_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9812  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9810_Y ),
    .S(\$procmux$9813_CMP ),
    .Y(\$procmux$9812_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9814  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9812_Y ),
    .S(\$procmux$9815_CMP ),
    .Y(\$procmux$9814_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9819  (
    .A(\$sbcs_d[22]$178 ),
    .B(1'h1),
    .S(\$procmux$9820_CMP ),
    .Y(\$procmux$9819_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9821  (
    .A(1'hx),
    .B(\$procmux$9819_Y ),
    .S(\$procmux$9822_CMP ),
    .Y(\$procmux$9821_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9823  (
    .A(1'hx),
    .B(\$procmux$9821_Y ),
    .S(\$procmux$9824_CMP ),
    .Y(\$procmux$9823_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9828  (
    .A(sbdata_q[63:32]),
    .B(\$sbdata_d[63:32]$317 ),
    .S(\$procmux$9829_CMP ),
    .Y(\$procmux$9828_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9830  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9828_Y ),
    .S(\$procmux$9831_CMP ),
    .Y(\$procmux$9830_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9836  (
    .A(sbdata_q[31:0]),
    .B(\$sbdata_d[31:0]$310 ),
    .S(\$procmux$9837_CMP ),
    .Y(\$procmux$9836_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9838  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9836_Y ),
    .S(\$procmux$9839_CMP ),
    .Y(\$procmux$9838_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9844  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(\$procmux$9845_CMP ),
    .Y(\$procmux$9844_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9846  (
    .A(2'hx),
    .B(\$procmux$9844_Y ),
    .S(\$procmux$9847_CMP ),
    .Y(\$procmux$9846_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9848  (
    .A(2'hx),
    .B(\$procmux$9846_Y ),
    .S(\$procmux$9849_CMP ),
    .Y(\$procmux$9848_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9854  (
    .A(dmi_req_i[31:0]),
    .B(sbdata_q[31:0]),
    .S(\$procmux$9855_CMP ),
    .Y(\$procmux$9854_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9856  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9854_Y ),
    .S(\$procmux$9857_CMP ),
    .Y(\$procmux$9856_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9858  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9856_Y ),
    .S(\$procmux$9859_CMP ),
    .Y(\$procmux$9858_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9864  (
    .A(\$sbcs_d[22]$178 ),
    .B(1'h1),
    .S(\$procmux$9865_CMP ),
    .Y(\$procmux$9864_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9866  (
    .A(1'hx),
    .B(\$procmux$9864_Y ),
    .S(\$procmux$9867_CMP ),
    .Y(\$procmux$9866_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9868  (
    .A(1'hx),
    .B(\$procmux$9866_Y ),
    .S(\$procmux$9869_CMP ),
    .Y(\$procmux$9868_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9875  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(\$procmux$9876_CMP ),
    .Y(\$procmux$9875_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9877  (
    .A(2'hx),
    .B(\$procmux$9875_Y ),
    .S(\$procmux$9878_CMP ),
    .Y(\$procmux$9877_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9879  (
    .A(2'hx),
    .B(\$procmux$9877_Y ),
    .S(\$procmux$9880_CMP ),
    .Y(\$procmux$9879_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9886  (
    .A(dmi_req_i[31:0]),
    .B(32'd0),
    .S(\$procmux$9887_CMP ),
    .Y(\$procmux$9886_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9888  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9886_Y ),
    .S(\$procmux$9889_CMP ),
    .Y(\$procmux$9888_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9890  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9888_Y ),
    .S(\$procmux$9891_CMP ),
    .Y(\$procmux$9890_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9897  (
    .A(\$sbcs_d[22]$178 ),
    .B(1'h1),
    .S(\$procmux$9898_CMP ),
    .Y(\$procmux$9897_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9899  (
    .A(1'hx),
    .B(\$procmux$9897_Y ),
    .S(\$procmux$9900_CMP ),
    .Y(\$procmux$9899_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9901  (
    .A(1'hx),
    .B(\$procmux$9899_Y ),
    .S(\$procmux$9902_CMP ),
    .Y(\$procmux$9901_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9908  (
    .A(32'd0),
    .B(\$sbaddr_d[63:32]$302 ),
    .S(\$procmux$9909_CMP ),
    .Y(\$procmux$9908_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9910  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9908_Y ),
    .S(\$procmux$9911_CMP ),
    .Y(\$procmux$9910_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9918  (
    .A(sbaddress_i),
    .B(\$sbaddr_d[31:0]$295 ),
    .S(\$procmux$9919_CMP ),
    .Y(\$procmux$9918_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9920  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9918_Y ),
    .S(\$procmux$9921_CMP ),
    .Y(\$procmux$9920_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$9925  (
    .A(\$sbcs_d[22]$178 ),
    .B({ \$sbcs_d$286 [22], \$sbcs_d[22]$294 , \$sbcs_d[22]$301 , \$sbcs_d[22]$309 , \$sbcs_d[22]$316  }),
    .S({ \$procmux$9934_CMP , \$procmux$9932_CMP , \$procmux$9930_CMP , \$procmux$9928_CMP , \$procmux$9926_CMP  }),
    .Y(\$procmux$9925_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9935  (
    .A(1'hx),
    .B(\$procmux$9925_Y ),
    .S(\$procmux$9936_CMP ),
    .Y(\$procmux$9935_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd22)
  ) \$procmux$9944  (
    .A(sbcs_q[21:0]),
    .B(\$sbcs_d$286 [21:0]),
    .S(\$procmux$9945_CMP ),
    .Y(\$procmux$9944_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd22)
  ) \$procmux$9946  (
    .A(22'hxxxxxx),
    .B(\$procmux$9944_Y ),
    .S(\$procmux$9947_CMP ),
    .Y(\$procmux$9946_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9954  (
    .A(\$resp_queue_inp$179 [1:0]),
    .B(2'h3),
    .S(\$procmux$9955_CMP ),
    .Y(\$procmux$9954_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9956  (
    .A(2'hx),
    .B(\$procmux$9954_Y ),
    .S(\$procmux$9957_CMP ),
    .Y(\$procmux$9956_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9958  (
    .A(2'hx),
    .B(\$procmux$9956_Y ),
    .S(\$procmux$9959_CMP ),
    .Y(\$procmux$9958_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9966  (
    .A(dmi_req_i[31:0]),
    .B(sbaddress_i),
    .S(\$procmux$9967_CMP ),
    .Y(\$procmux$9966_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9968  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9966_Y ),
    .S(\$procmux$9969_CMP ),
    .Y(\$procmux$9968_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9970  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9968_Y ),
    .S(\$procmux$9971_CMP ),
    .Y(\$procmux$9970_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9978  (
    .A(\$sbcs_d[22]$178 ),
    .B(1'h1),
    .S(\$procmux$9979_CMP ),
    .Y(\$procmux$9978_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9980  (
    .A(1'hx),
    .B(\$procmux$9978_Y ),
    .S(\$procmux$9981_CMP ),
    .Y(\$procmux$9980_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9982  (
    .A(1'hx),
    .B(\$procmux$9980_Y ),
    .S(\$procmux$9983_CMP ),
    .Y(\$procmux$9982_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd9)
  ) \$procmux$9991  (
    .A(dmi_req_i[31:23]),
    .B(sbcs_q[31:23]),
    .S(\$procmux$9992_CMP ),
    .Y(\$procmux$9991_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd9)
  ) \$procmux$9993  (
    .A(9'hxxx),
    .B(\$procmux$9991_Y ),
    .S(\$procmux$9994_CMP ),
    .Y(\$procmux$9993_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd9)
  ) \$procmux$9995  (
    .A(9'hxxx),
    .B(\$procmux$9993_Y ),
    .S(\$procmux$9996_CMP ),
    .Y(\$procmux$9995_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:596.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo  i_fifo (
    .clk_i(clk_i),
    .data_i(resp_queue_inp),
    .data_o(dmi_resp_o),
    .empty_o(resp_queue_empty),
    .flush_i(\$386 ),
    .full_o(resp_queue_full),
    .pop_i(resp_queue_pop),
    .push_i(resp_queue_push),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign dtm_op = dmi_req_i[33:32];
  assign haltsum0 = \$haltsum0$5 ;
  assign halted = { 31'h00000000, halted_i };
  assign halted_reshaped0 = { 31'h00000000, halted_i };
  assign hartsel_idx0 = hartsel_o[19:5];
  assign haltsum1 = \$haltsum1$13 ;
  assign halted_reshaped1 = { 31'h00000000, \$8  };
  assign halted_flat1 = { 31'h00000000, \$8  };
  assign hartsel_idx1 = hartsel_o[19:10];
  assign haltsum2 = \$haltsum2$21 ;
  assign halted_reshaped2 = { 31'h00000000, \$16  };
  assign halted_flat2 = { 31'h00000000, \$16  };
  assign hartsel_idx2 = hartsel_o[19:15];
  assign haltsum3 = { 31'h00000000, \$24  };
  assign halted_flat3 = { 31'h00000000, \$24  };
  assign dmi_resp_valid_o = \$26 ;
  assign dmi_req_ready_o = \$28 ;
  assign resp_queue_push = \$30 ;
  assign sbautoincrement_o = sbcs_q[16];
  assign sbreadonaddr_o = sbcs_q[20];
  assign sbreadondata_o = sbcs_q[15];
  assign sbaccess_o = sbcs_q[19:17];
  assign sbdata_o = sbdata_q[31:0];
  assign sbaddress_o = sbaddr_q[31:0];
  assign hartsel_o = { dmcontrol_q[15:6], dmcontrol_q[25:16] };
  assign resumeack_aligned = { 1'h0, resumeack_i };
  assign unavailable_aligned = { 1'h0, unavailable_i };
  assign halted_aligned = { 1'h0, halted_i };
  assign havereset_d = havereset_d_aligned[0];
  assign havereset_q_aligned = { 1'h0, havereset_q };
  assign hartinfo_aligned = { 32'h00000000, hartinfo_i };
  assign dm_csr_addr = { 1'h0, dmi_req_i[40:34] };
  assign autoexecdata_idx = \$33 [3:0];
  assign dmstatus = { 12'h000, \$auto$rtlil.cc:3092:Mux$1045 , \$auto$rtlil.cc:3092:Mux$1048 , \$auto$rtlil.cc:3092:Mux$1051 , \$auto$rtlil.cc:3092:Mux$1054 , \$54 , \$56 , \$auto$rtlil.cc:3092:Mux$1057 , \$auto$rtlil.cc:3092:Mux$1060 , \$88 , \$100 , \$66 , \$76 , 8'h82 };
  assign dmcontrol_d = { \$dmcontrol_d$335 [31], \$dmcontrol_d[30]$363 , 4'h0, \$365 [9:0], \$365 [19:10], 4'h0, \$dmcontrol_d$335 [1:0] };
  assign abstractcs = { 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 8'h02 };
  assign cmderr_d = \$cmderr_d$351 ;
  assign command_d = \$command_d$337 ;
  assign cmd_valid_d = \$cmd_valid_d$338 ;
  assign abstractauto_d = \$abstractauto_d$339 ;
  assign sbcs_d = { 3'h1, \$sbcs_d$340 [28:22], sbbusy_i, \$sbcs_d$340 [20:15], \$sbcs_d[14:12]$354 , 12'h407 };
  assign sbaddr_d = \$sbaddr_d$341 ;
  assign sbdata_d = \$sbdata_d$355 ;
  assign progbuf_d = \$progbuf_d$343 ;
  assign data_d = \$data_d$352 ;
  assign resp_queue_inp = { \$resp_queue_inp$179 [33:2], \$resp_queue_inp[1:0]$345  };
  assign havereset_d_aligned = { \$havereset_d_aligned$346 [1], \$havereset_d_aligned[0]$353  };
  assign sbcs = \$sbcs$347 ;
  assign a_abstractcs = \$a_abstractcs$348 ;
  assign clear_resumeack_o = \$clear_resumeack_o$360 ;
  assign sbaddress_write_valid_o = \$sbaddress_write_valid_o$349 ;
  assign sbdata_read_valid_o = \$sbdata_read_valid_o$180 ;
  assign sbdata_write_valid_o = \$sbdata_write_valid_o$350 ;
  assign selected_hart = hartsel_o[0];
  assign haltreq_o = \$haltreq_o$379 ;
  assign resumereq_o = \$resumereq_o$380 ;
  assign dmactive_o = dmcontrol_q[0];
  assign cmd_o = command_q;
  assign cmd_valid_o = cmd_valid_q;
  assign progbuf_o = progbuf_q;
  assign data_o = data_q;
  assign resp_queue_pop = \$384 ;
  assign ndmreset_o = dmcontrol_q[1];
  assign \$procmux$9751_CMP  = \$362 ;
  assign \$dmcontrol_d[30]$363  = \$procmux$9750_Y ;
  assign \$procmux$9761_CMP  = \$359 ;
  assign \$clear_resumeack_o$360  = \$procmux$9760_Y ;
  assign \$procmux$9770_CMP  = sbdata_valid_i;
  assign \$sbdata_d$355  = \$procmux$9769_Y ;
  assign \$procmux$9778_CMP  = sberror_valid_i;
  assign \$sbcs_d[14:12]$354  = \$procmux$9777_Y ;
  assign \$procmux$9785_CMP  = ndmreset_ack_i;
  assign \$havereset_d_aligned[0]$353  = \$procmux$9784_Y ;
  assign \$procmux$9791_CMP  = data_valid_i;
  assign \$data_d$352  = \$procmux$9790_Y ;
  assign \$procmux$9796_CMP  = cmderror_valid_i;
  assign \$cmderr_d$351  = \$procmux$9795_Y ;
  assign \$procmux$9802_CMP  = \$315 ;
  assign \$procmux$9806_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$318  = \$procmux$9805_Y ;
  assign \$procmux$9811_CMP  = \$315 ;
  assign \$procmux$9815_CMP  = \$186 ;
  assign \$sbdata_d[63:32]$317  = \$procmux$9814_Y ;
  assign \$procmux$9820_CMP  = \$315 ;
  assign \$procmux$9824_CMP  = \$186 ;
  assign \$sbcs_d[22]$316  = \$procmux$9823_Y ;
  assign \$procmux$9831_CMP  = \$186 ;
  assign \$sbdata_d$326 [63:32] = \$procmux$9830_Y ;
  assign \$procmux$9839_CMP  = \$186 ;
  assign \$sbdata_d$326 [31:0] = \$procmux$9838_Y ;
  assign \$procmux$9845_CMP  = \$306 ;
  assign \$procmux$9849_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$311  = \$procmux$9848_Y ;
  assign \$procmux$9855_CMP  = \$306 ;
  assign \$procmux$9859_CMP  = \$186 ;
  assign \$sbdata_d[31:0]$310  = \$procmux$9858_Y ;
  assign \$procmux$9865_CMP  = \$306 ;
  assign \$procmux$9869_CMP  = \$186 ;
  assign \$sbcs_d[22]$309  = \$procmux$9868_Y ;
  assign \$procmux$9876_CMP  = \$300 ;
  assign \$procmux$9880_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$303  = \$procmux$9879_Y ;
  assign \$procmux$9887_CMP  = \$300 ;
  assign \$procmux$9891_CMP  = \$186 ;
  assign \$sbaddr_d[63:32]$302  = \$procmux$9890_Y ;
  assign \$procmux$9898_CMP  = \$300 ;
  assign \$procmux$9902_CMP  = \$186 ;
  assign \$sbcs_d[22]$301  = \$procmux$9901_Y ;
  assign \$procmux$9911_CMP  = \$186 ;
  assign \$sbaddr_d$325 [63:32] = \$procmux$9910_Y ;
  assign \$procmux$9921_CMP  = \$186 ;
  assign \$sbaddr_d$325 [31:0] = \$procmux$9920_Y ;
  assign \$procmux$9936_CMP  = \$186 ;
  assign \$sbcs_d$324 [22] = \$procmux$9935_Y ;
  assign \$procmux$9947_CMP  = \$186 ;
  assign \$sbcs_d$324 [21:0] = \$procmux$9946_Y ;
  assign \$procmux$9955_CMP  = \$291 ;
  assign \$procmux$9959_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$296  = \$procmux$9958_Y ;
  assign \$procmux$9967_CMP  = \$291 ;
  assign \$procmux$9971_CMP  = \$186 ;
  assign \$sbaddr_d[31:0]$295  = \$procmux$9970_Y ;
  assign \$procmux$9979_CMP  = \$291 ;
  assign \$procmux$9983_CMP  = \$186 ;
  assign \$sbcs_d[22]$294  = \$procmux$9982_Y ;
  assign \$procmux$9992_CMP  = sbbusy_i;
  assign \$procmux$9996_CMP  = \$186 ;
  assign \$sbcs_d$286 [31:23] = \$procmux$9995_Y ;
  assign \$procmux$10005_CMP  = sbbusy_i;
  assign \$procmux$10009_CMP  = \$186 ;
  assign \$sbcs_d$286 [21:0] = \$procmux$10008_Y ;
  assign \$procmux$10018_CMP  = sbbusy_i;
  assign \$procmux$10022_CMP  = \$186 ;
  assign \$sbcs$288  = \$procmux$10021_Y ;
  assign \$procmux$10031_CMP  = sbbusy_i;
  assign \$procmux$10035_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$287  = \$procmux$10034_Y ;
  assign \$procmux$10044_CMP  = sbbusy_i;
  assign \$procmux$10048_CMP  = \$186 ;
  assign \$sbcs_d$286 [22] = \$procmux$10047_Y ;
  assign \$procmux$10057_CMP  = \$272 ;
  assign \$procmux$10060_CMP  = \$260 ;
  assign \$procmux$10064_CMP  = \$186 ;
  assign \$cmderr_d$273  = \$procmux$10063_Y ;
  assign \$procmux$10075_CMP  = \$260 ;
  assign \$procmux$10079_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$277  = \$procmux$10078_Y ;
  assign \$procmux$10089_CMP  = \$260 ;
  assign \$procmux$10093_CMP  = \$186 ;
  assign \$progbuf_d$276  = \$procmux$10092_Y ;
  assign \$procmux$10103_CMP  = \$260 ;
  assign \$procmux$10107_CMP  = \$186 ;
  assign \$cmd_valid_d$275  = \$procmux$10106_Y ;
  assign \$procmux$10118_CMP  = \$260 ;
  assign \$procmux$10122_CMP  = \$186 ;
  assign \$cmderr_d$274  = \$procmux$10121_Y ;
  assign \$procmux$10132_CMP  = \$251 ;
  assign \$procmux$10135_CMP  = \$249 ;
  assign \$procmux$10139_CMP  = \$186 ;
  assign \$cmderr_d$252  = \$procmux$10138_Y ;
  assign \$procmux$10151_CMP  = \$249 ;
  assign \$procmux$10155_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$255  = \$procmux$10154_Y ;
  assign \$procmux$10166_CMP  = \$249 ;
  assign \$procmux$10170_CMP  = \$186 ;
  assign \$abstractauto_d$254  = \$procmux$10169_Y ;
  assign \$procmux$10182_CMP  = \$249 ;
  assign \$procmux$10186_CMP  = \$186 ;
  assign \$cmderr_d$253  = \$procmux$10185_Y ;
  assign \$procmux$10198_CMP  = \$240 ;
  assign \$procmux$10201_CMP  = \$238 ;
  assign \$procmux$10205_CMP  = \$186 ;
  assign \$cmderr_d$241  = \$procmux$10204_Y ;
  assign \$procmux$10219_CMP  = \$238 ;
  assign \$procmux$10223_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$245  = \$procmux$10222_Y ;
  assign \$procmux$10236_CMP  = \$238 ;
  assign \$procmux$10240_CMP  = \$186 ;
  assign \$cmd_valid_d$244  = \$procmux$10239_Y ;
  assign \$procmux$10253_CMP  = \$238 ;
  assign \$procmux$10257_CMP  = \$186 ;
  assign \$command_d$243  = \$procmux$10256_Y ;
  assign \$procmux$10271_CMP  = \$238 ;
  assign \$procmux$10275_CMP  = \$186 ;
  assign \$cmderr_d$242  = \$procmux$10274_Y ;
  assign \$procmux$10288_CMP  = \$232 ;
  assign \$procmux$10291_CMP  = \$226 ;
  assign \$procmux$10295_CMP  = \$186 ;
  assign \$cmderr_d$233  = \$procmux$10294_Y ;
  assign \$procmux$10310_CMP  = \$226 ;
  assign \$procmux$10314_CMP  = \$186 ;
  assign \$cmderr_d$234  = \$procmux$10313_Y ;
  assign \$procmux$10329_CMP  = \$226 ;
  assign \$procmux$10333_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$235  = \$procmux$10332_Y ;
  assign \$procmux$10349_CMP  = dmi_req_i[28];
  assign \$procmux$10353_CMP  = \$186 ;
  assign \$havereset_d_aligned$221  = \$procmux$10352_Y ;
  assign \$procmux$10373_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$212  = \$procmux$10372_Y ;
  assign \$procmux$10393_CMP  = \$186 ;
  assign \$data_d$211  = \$procmux$10392_Y ;
  assign \$procmux$10413_CMP  = \$186 ;
  assign \$cmd_valid_d$210  = \$procmux$10412_Y ;
  assign \$procmux$10433_CMP  = \$186 ;
  assign \$cmderr_d$209  = \$procmux$10432_Y ;
  assign \$procmux$10450_CMP  = \$203 ;
  assign \$procmux$10453_CMP  = \$191 ;
  assign \$procmux$10457_CMP  = \$186 ;
  assign \$cmderr_d$204  = \$procmux$10456_Y ;
  assign \$procmux$10476_CMP  = \$191 ;
  assign \$procmux$10480_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$208  = \$procmux$10479_Y ;
  assign \$procmux$10498_CMP  = \$191 ;
  assign \$procmux$10502_CMP  = \$186 ;
  assign \$data_d$207  = \$procmux$10501_Y ;
  assign \$procmux$10520_CMP  = \$191 ;
  assign \$procmux$10524_CMP  = \$186 ;
  assign \$cmd_valid_d$206  = \$procmux$10523_Y ;
  assign \$procmux$10543_CMP  = \$191 ;
  assign \$procmux$10547_CMP  = \$186 ;
  assign \$cmderr_d$205  = \$procmux$10546_Y ;
  assign \$procmux$10555_CMP  = \$186 ;
  assign \$sbdata_write_valid_o$334  = \$procmux$10554_Y ;
  assign \$procmux$10565_CMP  = \$186 ;
  assign \$sbaddress_write_valid_o$333  = \$procmux$10564_Y ;
  assign \$procmux$10581_CMP  = \$186 ;
  assign \$a_abstractcs$332  = \$procmux$10580_Y ;
  assign \$procmux$10592_CMP  = \$186 ;
  assign \$sbcs$331  = \$procmux$10591_Y ;
  assign \$procmux$10611_CMP  = \$186 ;
  assign \$havereset_d_aligned$330  = \$procmux$10610_Y ;
  assign \$procmux$10636_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$329  = \$procmux$10635_Y ;
  assign \$procmux$10656_CMP  = \$186 ;
  assign \$data_d$328  = \$procmux$10655_Y ;
  assign \$procmux$10668_CMP  = \$186 ;
  assign \$progbuf_d$327  = \$procmux$10667_Y ;
  assign \$procmux$10674_CMP  = \$306 ;
  assign \$procmux$10678_CMP  = \$186 ;
  assign \$sbdata_write_valid_o$312  = \$procmux$10677_Y ;
  assign \$procmux$10689_CMP  = \$186 ;
  assign \$sbcs_d$324 [31:23] = \$procmux$10688_Y ;
  assign \$procmux$10697_CMP  = \$291 ;
  assign \$procmux$10701_CMP  = \$186 ;
  assign \$sbaddress_write_valid_o$297  = \$procmux$10700_Y ;
  assign \$procmux$10714_CMP  = \$186 ;
  assign \$abstractauto_d$323  = \$procmux$10713_Y ;
  assign \$procmux$10730_CMP  = \$186 ;
  assign \$cmd_valid_d$322  = \$procmux$10729_Y ;
  assign \$procmux$10745_CMP  = \$186 ;
  assign \$command_d$321  = \$procmux$10744_Y ;
  assign \$procmux$10765_CMP  = \$186 ;
  assign \$cmderr_d$320  = \$procmux$10764_Y ;
  assign \$procmux$10784_CMP  = \$186 ;
  assign \$dmcontrol_d$319  = \$procmux$10783_Y ;
  assign \$procmux$10788_CMP  = \$186 ;
  assign \$sbdata_write_valid_o$350  = \$procmux$10787_Y ;
  assign \$procmux$10792_CMP  = \$186 ;
  assign \$sbaddress_write_valid_o$349  = \$procmux$10791_Y ;
  assign \$procmux$10796_CMP  = \$186 ;
  assign \$a_abstractcs$348  = \$procmux$10795_Y ;
  assign \$procmux$10800_CMP  = \$186 ;
  assign \$sbcs$347  = \$procmux$10799_Y ;
  assign \$procmux$10804_CMP  = \$186 ;
  assign \$havereset_d_aligned$346  = \$procmux$10803_Y ;
  assign \$procmux$10808_CMP  = \$186 ;
  assign \$resp_queue_inp[1:0]$345  = \$procmux$10807_Y ;
  assign \$procmux$10812_CMP  = \$186 ;
  assign \$data_d$344  = \$procmux$10811_Y ;
  assign \$procmux$10816_CMP  = \$186 ;
  assign \$progbuf_d$343  = \$procmux$10815_Y ;
  assign \$procmux$10820_CMP  = \$186 ;
  assign \$sbdata_d$342  = \$procmux$10819_Y ;
  assign \$procmux$10824_CMP  = \$186 ;
  assign \$sbaddr_d$341  = \$procmux$10823_Y ;
  assign \$procmux$10828_CMP  = \$186 ;
  assign \$sbcs_d$340  = \$procmux$10827_Y ;
  assign \$procmux$10832_CMP  = \$186 ;
  assign \$abstractauto_d$339  = \$procmux$10831_Y ;
  assign \$procmux$10836_CMP  = \$186 ;
  assign \$cmd_valid_d$338  = \$procmux$10835_Y ;
  assign \$procmux$10840_CMP  = \$186 ;
  assign \$command_d$337  = \$procmux$10839_Y ;
  assign \$procmux$10844_CMP  = \$186 ;
  assign \$cmderr_d$336  = \$procmux$10843_Y ;
  assign \$procmux$10848_CMP  = \$186 ;
  assign \$dmcontrol_d$335  = \$procmux$10847_Y ;
  assign \$procmux$10874_CMP  = \$106 ;
  assign \$resp_queue_inp$174 [33:2] = \$procmux$10873_Y ;
  assign \$procmux$10878_CMP  = \$168 ;
  assign \$procmux$10882_CMP  = \$106 ;
  assign \$resp_queue_inp$170 [1:0] = \$procmux$10881_Y ;
  assign \$procmux$10886_CMP  = \$168 ;
  assign \$procmux$10890_CMP  = \$106 ;
  assign \$sbcs_d[22]$169  = \$procmux$10889_Y ;
  assign \$procmux$10902_CMP  = \$106 ;
  assign \$resp_queue_inp$174 [1:0] = \$procmux$10901_Y ;
  assign \$procmux$10907_CMP  = \$160 ;
  assign \$procmux$10911_CMP  = \$106 ;
  assign \$resp_queue_inp$164 [1:0] = \$procmux$10910_Y ;
  assign \$procmux$10916_CMP  = \$160 ;
  assign \$procmux$10920_CMP  = \$106 ;
  assign \$sbdata_read_valid_o$165  = \$procmux$10919_Y ;
  assign \$procmux$10925_CMP  = \$160 ;
  assign \$procmux$10929_CMP  = \$106 ;
  assign \$sbcs_d[22]$163  = \$procmux$10928_Y ;
  assign \$procmux$10933_CMP  = \$168 ;
  assign \$procmux$10937_CMP  = \$106 ;
  assign \$resp_queue_inp$170 [33:2] = \$procmux$10936_Y ;
  assign \$procmux$10951_CMP  = \$141 ;
  assign \$procmux$10955_CMP  = \$106 ;
  assign \$resp_queue_inp[1:0]$150  = \$procmux$10954_Y ;
  assign \$procmux$10968_CMP  = \$141 ;
  assign \$procmux$10972_CMP  = \$106 ;
  assign \$cmd_valid_d$149  = \$procmux$10971_Y ;
  assign \$procmux$10986_CMP  = \$141 ;
  assign \$procmux$10990_CMP  = \$106 ;
  assign \$cmderr_d$148  = \$procmux$10989_Y ;
  assign \$procmux$10995_CMP  = \$160 ;
  assign \$procmux$10999_CMP  = \$106 ;
  assign \$resp_queue_inp$164 [33:2] = \$procmux$10998_Y ;
  assign \$procmux$11011_CMP  = \$146 ;
  assign \$procmux$11014_CMP  = \$141 ;
  assign \$procmux$11018_CMP  = \$106 ;
  assign \$cmderr_d$147  = \$procmux$11017_Y ;
  assign \$procmux$11040_CMP  = \$114 ;
  assign \$procmux$11044_CMP  = \$106 ;
  assign \$resp_queue_inp[1:0]$123  = \$procmux$11043_Y ;
  assign \$procmux$11065_CMP  = \$114 ;
  assign \$procmux$11069_CMP  = \$106 ;
  assign \$cmd_valid_d$122  = \$procmux$11068_Y ;
  assign \$procmux$11091_CMP  = \$114 ;
  assign \$procmux$11095_CMP  = \$106 ;
  assign \$cmderr_d$121  = \$procmux$11094_Y ;
  assign \$procmux$11102_CMP  = \$106 ;
  assign \$sbdata_read_valid_o$175  = \$procmux$11101_Y ;
  assign \$procmux$11122_CMP  = \$119 ;
  assign \$procmux$11125_CMP  = \$114 ;
  assign \$procmux$11129_CMP  = \$106 ;
  assign \$cmderr_d$120  = \$procmux$11128_Y ;
  assign \$procmux$11137_CMP  = \$106 ;
  assign \$sbcs_d[22]$173  = \$procmux$11136_Y ;
  assign \$procmux$11154_CMP  = \$106 ;
  assign \$cmd_valid_d$172  = \$procmux$11153_Y ;
  assign \$procmux$11171_CMP  = \$106 ;
  assign \$cmderr_d$171  = \$procmux$11170_Y ;
  assign \$procmux$11174_CMP  = \$106 ;
  assign \$sbdata_read_valid_o$180  = \$procmux$11173_Y ;
  assign \$procmux$11177_CMP  = \$106 ;
  assign \$resp_queue_inp$179  = \$procmux$11176_Y ;
  assign \$procmux$11180_CMP  = \$106 ;
  assign \$sbcs_d[22]$178  = \$procmux$11179_Y ;
  assign \$procmux$11183_CMP  = \$106 ;
  assign \$cmd_valid_d$177  = \$procmux$11182_Y ;
  assign \$procmux$11186_CMP  = \$106 ;
  assign \$cmderr_d$176  = \$procmux$11185_Y ;
  assign \$procmux$11189_CMP  = \$393 ;
  assign \$data_q$403  = \$procmux$11188_Y ;
  assign \$procmux$11192_CMP  = \$393 ;
  assign \$progbuf_q$402  = \$procmux$11191_Y ;
  assign \$procmux$11195_CMP  = \$393 ;
  assign \$sbdata_q$401  = \$procmux$11194_Y ;
  assign \$procmux$11198_CMP  = \$393 ;
  assign \$sbaddr_q$400  = \$procmux$11197_Y ;
  assign \$procmux$11201_CMP  = \$393 ;
  assign \$sbcs_q$399  = \$procmux$11200_Y ;
  assign \$procmux$11204_CMP  = \$393 ;
  assign \$abstractauto_q$398  = \$procmux$11203_Y ;
  assign \$procmux$11207_CMP  = \$393 ;
  assign \$cmd_valid_q$397  = \$procmux$11206_Y ;
  assign \$procmux$11210_CMP  = \$393 ;
  assign \$command_q$396  = \$procmux$11209_Y ;
  assign \$procmux$11213_CMP  = \$393 ;
  assign \$cmderr_q$395  = \$procmux$11212_Y ;
  assign \$procmux$11216_CMP  = \$393 ;
  assign \$dmcontrol_q$394  = \$procmux$11215_Y ;
  assign \$procmux$11218_CMP  = \$368 ;
  assign \$resumereq_o$380  = \$procmux$11217_Y ;
  assign \$procmux$11220_CMP  = \$368 ;
  assign \$haltreq_o$379  = \$procmux$11219_Y ;
  assign \$procmux$11222_CMP  = \$18 ;
  assign \$haltsum2$21  = \$procmux$11221_Y ;
  assign \$procmux$11224_CMP  = \$10 ;
  assign \$haltsum1$13  = \$procmux$11223_Y ;
  assign \$procmux$11226_CMP  = \$2 ;
  assign \$haltsum0$5  = \$procmux$11225_Y ;
  assign \$8  = halted_i;
  assign \$16  = halted_i;
  assign \$24  = halted_i;
  assign \$auto$rtlil.cc:3093:Bwmux$1142  = \$auto$rtlil.cc:3004:And$16662 ;
  assign \$procmux$10782_CMP  = \$auto$rtlil.cc:3011:Eq$1135 ;
  assign \$365  = 32'd0;
  assign \$auto$rtlil.cc:3093:Bwmux$1172  = \$auto$rtlil.cc:3004:And$16664 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1177  = \$auto$rtlil.cc:3004:And$16666 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1179  = rst_ni;
  assign \$procmux$10351_CMP  = \$auto$rtlil.cc:3011:Eq$1135 ;
  assign \$procmux$10609_CMP  = \$auto$rtlil.cc:3011:Eq$1135 ;
  assign \$391  = \$procmux$9784_Y ;
  assign \$procmux$9813_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$9829_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$9837_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$9857_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$10888_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$10927_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$11133_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$11135_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$9822_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$9867_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$9900_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$9926_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$9928_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$9930_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$9932_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$9934_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$9981_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$10046_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$9945_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10007_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$9994_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10687_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10391_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10500_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10654_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$11016_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$10988_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$11127_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$11093_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$11167_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$11169_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$10062_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10120_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10137_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10184_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10203_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10273_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10293_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10312_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10431_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10455_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10545_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10755_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10757_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10759_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10761_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10763_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10853_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$10855_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$10856_CMP  = \$auto$rtlil.cc:3011:Eq$1119 ;
  assign \$procmux$10857_CMP  = \$auto$rtlil.cc:3011:Eq$1118 ;
  assign \$procmux$10858_CMP  = \$auto$rtlil.cc:3011:Eq$1117 ;
  assign \$procmux$10859_CMP  = \$auto$rtlil.cc:3011:Eq$1116 ;
  assign \$procmux$10860_CMP  = \$auto$rtlil.cc:3011:Eq$1115 ;
  assign \$procmux$10861_CMP  = \$auto$rtlil.cc:3011:Eq$1114 ;
  assign \$procmux$10862_CMP  = \$auto$rtlil.cc:3011:Eq$1113 ;
  assign \$procmux$10864_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$10865_CMP  = \$auto$rtlil.cc:3011:Eq$1103 ;
  assign \$procmux$10866_CMP  = \$auto$rtlil.cc:3011:Eq$1101 ;
  assign \$procmux$10867_CMP  = \$auto$rtlil.cc:3011:Eq$1100 ;
  assign \$procmux$10868_CMP  = \$auto$rtlil.cc:3011:Eq$1096 ;
  assign \$procmux$10869_CMP  = \$auto$rtlil.cc:3011:Eq$1095 ;
  assign \$procmux$10870_CMP  = \$auto$rtlil.cc:3011:Eq$1094 ;
  assign \$procmux$10872_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$10935_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$10997_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$10880_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$10894_CMP  = \$auto$rtlil.cc:3011:Eq$1121 ;
  assign \$procmux$10896_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$10898_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$10900_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$10909_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$10953_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$11042_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$9804_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$9847_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$9878_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$9889_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$9909_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$9919_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$9969_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$9957_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$10020_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10033_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10077_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10091_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10970_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$11067_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$11150_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  assign \$procmux$11152_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  assign \$procmux$10105_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10153_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10168_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10221_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10238_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10255_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10331_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10371_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10478_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10411_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10522_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10553_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$10676_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$10563_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$10699_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$10579_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10590_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10616_CMP  = \$auto$rtlil.cc:3011:Eq$1167 ;
  assign \$procmux$10618_CMP  = \$auto$rtlil.cc:3011:Eq$1166 ;
  assign \$procmux$10620_CMP  = \$auto$rtlil.cc:3011:Eq$1165 ;
  assign \$procmux$10622_CMP  = \$auto$rtlil.cc:3011:Eq$1164 ;
  assign \$procmux$10624_CMP  = \$auto$rtlil.cc:3011:Eq$1162 ;
  assign \$procmux$10626_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10628_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10630_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10632_CMP  = \$auto$rtlil.cc:3011:Eq$1145 ;
  assign \$procmux$10634_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10666_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10712_CMP  = \$auto$rtlil.cc:3011:Eq$1148 ;
  assign \$procmux$10724_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1151 ;
  assign \$procmux$10726_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10728_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1124 ;
  assign \$procmux$10743_CMP  = \$auto$rtlil.cc:3011:Eq$1146 ;
  assign \$procmux$10918_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
  assign \$procmux$11100_CMP  = \$auto$rtlil.cc:3011:Eq$1120 ;
endmodule

/* src = "rtl/riscv-dbg/dm_mem.sv:19.8" */
module \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem (clk_i, rst_ni, debug_req_o, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, data_i, data_o, ndmreset_i, hartsel_i, haltreq_i, resumereq_i, clear_resumeack_i, halted_o, resuming_o, progbuf_i, data_valid_o, cmd_valid_i
, cmd_i, cmderror_valid_o, cmderror_o, cmdbusy_o);
  wire [31:0] \$109 ;
  wire \$111 ;
  wire [31:0] \$122 ;
  wire \$124 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire [8:0] \$160 ;
  wire [8:0] \$162 ;
  wire [8:0] \$164 ;
  wire [8:0] \$169 ;
  wire [8:0] \$171 ;
  wire [8:0] \$179 ;
  wire [8:0] \$187 ;
  wire [11:0] \$195 ;
  wire [11:0] \$197 ;
  wire \$199 ;
  wire [11:0] \$201 ;
  wire \$22 ;
  wire \$234 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$258 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$284 ;
  wire \$286 ;
  wire \$288 ;
  wire \$29 ;
  wire \$298 ;
  wire \$300 ;
  wire \$307 ;
  wire \$31 ;
  wire \$315 ;
  wire \$317 ;
  wire \$36 ;
  wire \$5 ;
  wire \$54 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16" */
  wire [31:0] \$abstract_cmd[159:128]$251 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16" */
  wire [31:0] \$abstract_cmd[159:128]$277 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  wire [127:0] \$abstract_cmd[255:128]$252 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  wire [127:0] \$abstract_cmd[255:128]$253 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  wire [127:0] \$abstract_cmd[255:128]$255 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$278 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$279 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$281 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$292 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$295 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  wire [127:0] \$abstract_cmd[255:128]$303 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  wire [31:0] \$abstract_cmd[319:288]$301 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  wire [31:0] \$abstract_cmd[319:288]$304 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  wire [31:0] \$abstract_cmd[31:0]$254 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  wire [31:0] \$abstract_cmd[31:0]$280 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.18-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$289 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$291 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$294 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  wire [31:0] \$abstract_cmd[31:0]$302 ;
  wire [1:0] \$auto$rtlil.cc:2957:Not$16643 ;
  wire [1:0] \$auto$rtlil.cc:2957:Not$16647 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1291 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1292 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1293 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1294 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16640 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16644 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16648 ;
  wire [63:0] \$auto$rtlil.cc:3004:And$16654 ;
  wire [1:0] \$auto$rtlil.cc:3005:Or$16650 ;
  wire [1:0] \$auto$rtlil.cc:3005:Or$16652 ;
  wire \$auto$rtlil.cc:3009:Lt$1191 ;
  wire \$auto$rtlil.cc:3009:Lt$1194 ;
  wire \$auto$rtlil.cc:3009:Lt$1197 ;
  wire \$auto$rtlil.cc:3009:Lt$1200 ;
  wire \$auto$rtlil.cc:3009:Lt$1203 ;
  wire \$auto$rtlil.cc:3009:Lt$1206 ;
  wire \$auto$rtlil.cc:3009:Lt$1209 ;
  wire \$auto$rtlil.cc:3009:Lt$1215 ;
  wire \$auto$rtlil.cc:3009:Lt$1223 ;
  wire \$auto$rtlil.cc:3009:Lt$1230 ;
  wire \$auto$rtlil.cc:3009:Lt$1239 ;
  wire \$auto$rtlil.cc:3009:Lt$1246 ;
  wire \$auto$rtlil.cc:3009:Lt$1257 ;
  wire \$auto$rtlil.cc:3009:Lt$1263 ;
  wire \$auto$rtlil.cc:3009:Lt$1266 ;
  wire \$auto$rtlil.cc:3009:Lt$1272 ;
  wire \$auto$rtlil.cc:3009:Lt$1278 ;
  wire \$auto$rtlil.cc:3009:Lt$1285 ;
  wire \$auto$rtlil.cc:3010:Le$1254 ;
  wire \$auto$rtlil.cc:3010:Le$1261 ;
  wire \$auto$rtlil.cc:3010:Le$1270 ;
  wire \$auto$rtlil.cc:3010:Le$1276 ;
  wire \$auto$rtlil.cc:3010:Le$1282 ;
  wire \$auto$rtlil.cc:3011:Eq$1221 ;
  wire \$auto$rtlil.cc:3011:Eq$1236 ;
  wire \$auto$rtlil.cc:3011:Eq$1237 ;
  wire \$auto$rtlil.cc:3011:Eq$1252 ;
  wire \$auto$rtlil.cc:3011:Eq$1256 ;
  wire \$auto$rtlil.cc:3015:Ge$1214 ;
  wire \$auto$rtlil.cc:3015:Ge$1222 ;
  wire \$auto$rtlil.cc:3015:Ge$1229 ;
  wire \$auto$rtlil.cc:3015:Ge$1238 ;
  wire \$auto$rtlil.cc:3015:Ge$1245 ;
  wire \$auto$rtlil.cc:3015:Ge$1253 ;
  wire \$auto$rtlil.cc:3015:Ge$1260 ;
  wire \$auto$rtlil.cc:3015:Ge$1269 ;
  wire \$auto$rtlil.cc:3015:Ge$1275 ;
  wire \$auto$rtlil.cc:3015:Ge$1281 ;
  wire \$auto$rtlil.cc:3015:Ge$1284 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1216 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1224 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1231 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1240 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1247 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1262 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1271 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1277 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1286 ;
  wire \$auto$rtlil.cc:3092:Mux$1193 ;
  wire \$auto$rtlil.cc:3092:Mux$1196 ;
  wire \$auto$rtlil.cc:3092:Mux$1199 ;
  wire \$auto$rtlil.cc:3092:Mux$1202 ;
  wire \$auto$rtlil.cc:3092:Mux$1205 ;
  wire \$auto$rtlil.cc:3092:Mux$1208 ;
  wire \$auto$rtlil.cc:3092:Mux$1211 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1212 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1213 ;
  wire \$auto$rtlil.cc:3092:Mux$1217 ;
  wire \$auto$rtlil.cc:3092:Mux$1225 ;
  wire \$auto$rtlil.cc:3092:Mux$1232 ;
  wire \$auto$rtlil.cc:3092:Mux$1241 ;
  wire \$auto$rtlil.cc:3092:Mux$1248 ;
  wire \$auto$rtlil.cc:3092:Mux$1259 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1265 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1268 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1274 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1280 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1287 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1220 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1228 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1235 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1244 ;
  wire [1:0] \$auto$rtlil.cc:3093:Bwmux$1251 ;
  wire [63:0] \$auto$rtlil.cc:3093:Bwmux$1290 ;
  wire \$auto$rtlil.cc:3113:Bmux$1192 ;
  wire \$auto$rtlil.cc:3113:Bmux$1195 ;
  wire \$auto$rtlil.cc:3113:Bmux$1198 ;
  wire \$auto$rtlil.cc:3113:Bmux$1201 ;
  wire \$auto$rtlil.cc:3113:Bmux$1204 ;
  wire \$auto$rtlil.cc:3113:Bmux$1207 ;
  wire \$auto$rtlil.cc:3113:Bmux$1210 ;
  wire \$auto$rtlil.cc:3113:Bmux$1258 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$1264 ;
  wire [31:0] \$auto$rtlil.cc:3113:Bmux$1267 ;
  wire [63:0] \$auto$rtlil.cc:3113:Bmux$1273 ;
  wire [63:0] \$auto$rtlil.cc:3113:Bmux$1279 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1218 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1219 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1226 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1227 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1233 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1234 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1242 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1243 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1249 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1250 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1288 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1289 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$cmdbusy_o$52 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:151.18-155.12" */
  wire [2:0] \$cmderror_o$11 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  wire [2:0] \$cmderror_o$14 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire [2:0] \$cmderror_o$51 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire [2:0] \$cmderror_o$56 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  wire [2:0] \$cmderror_o$58 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:151.18-155.12" */
  wire \$cmderror_valid_o$10 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  wire \$cmderror_valid_o$13 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$cmderror_valid_o$50 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire \$cmderror_valid_o$55 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  wire \$cmderror_valid_o$57 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [63:0] \$data_bits$139 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [63:0] \$data_bits$218 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [63:0] \$data_bits$227 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[15:8]$114 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[15:8]$115 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[23:16]$116 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[23:16]$117 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[31:0]$120 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[31:24]$118 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[31:24]$119 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[39:32]$125 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[39:32]$126 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[47:40]$127 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[47:40]$128 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[55:48]$129 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[55:48]$130 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[63:32]$133 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[63:56]$131 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[63:56]$132 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24" */
  wire [7:0] \$data_bits[7:0]$112 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[7:0]$113 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire \$data_valid_o$140 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$data_valid_o$220 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire \$data_valid_o$229 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire \$exception$135 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$exception$213 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire \$exception$222 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$go$48 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  wire \$go$60 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire \$going$134 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$going$212 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire \$going$221 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$halted_aligned$137 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [1:0] \$halted_aligned$216 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [1:0] \$halted_aligned$225 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$halted_d_aligned$136 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [1:0] \$halted_d_aligned$215 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [1:0] \$halted_d_aligned$224 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  wire [1:0] \$halted_d_aligned$230 ;
  wire \$procmux$8483_Y ;
  wire \$procmux$8484_CMP ;
  wire [31:0] \$procmux$8488_Y ;
  wire \$procmux$8489_CMP ;
  wire [31:0] \$procmux$8491_Y ;
  wire \$procmux$8492_CMP ;
  wire [31:0] \$procmux$8494_Y ;
  wire \$procmux$8495_CMP ;
  wire \$procmux$8497_Y ;
  wire \$procmux$8498_CMP ;
  wire \$procmux$8500_Y ;
  wire \$procmux$8501_CMP ;
  wire \$procmux$8503_Y ;
  wire \$procmux$8504_CMP ;
  wire \$procmux$8505_Y ;
  wire \$procmux$8506_CMP ;
  wire [31:0] \$procmux$8508_Y ;
  wire \$procmux$8509_CMP ;
  wire [31:0] \$procmux$8511_Y ;
  wire \$procmux$8512_CMP ;
  wire [31:0] \$procmux$8514_Y ;
  wire \$procmux$8515_CMP ;
  wire [31:0] \$procmux$8516_Y ;
  wire \$procmux$8517_CMP ;
  wire \$procmux$8522_Y ;
  wire \$procmux$8523_CMP ;
  wire \$procmux$8525_Y ;
  wire \$procmux$8526_CMP ;
  wire \$procmux$8527_Y ;
  wire \$procmux$8528_CMP ;
  wire [31:0] \$procmux$8533_Y ;
  wire \$procmux$8534_CMP ;
  wire [31:0] \$procmux$8536_Y ;
  wire \$procmux$8537_CMP ;
  wire [31:0] \$procmux$8538_Y ;
  wire \$procmux$8539_CMP ;
  wire [95:0] \$procmux$8543_Y ;
  wire \$procmux$8544_CMP ;
  wire [95:0] \$procmux$8546_Y ;
  wire \$procmux$8547_CMP ;
  wire [95:0] \$procmux$8549_Y ;
  wire \$procmux$8550_CMP ;
  wire [95:0] \$procmux$8551_Y ;
  wire \$procmux$8552_CMP ;
  wire [95:0] \$procmux$8554_Y ;
  wire \$procmux$8555_CMP ;
  wire [95:0] \$procmux$8556_Y ;
  wire \$procmux$8557_CMP ;
  wire [31:0] \$procmux$8562_Y ;
  wire \$procmux$8563_CMP ;
  wire [31:0] \$procmux$8564_Y ;
  wire \$procmux$8565_CMP ;
  wire [31:0] \$procmux$8567_Y ;
  wire \$procmux$8568_CMP ;
  wire [31:0] \$procmux$8570_Y ;
  wire \$procmux$8571_CMP ;
  wire [31:0] \$procmux$8572_Y ;
  wire \$procmux$8573_CMP ;
  wire [31:0] \$procmux$8575_Y ;
  wire \$procmux$8576_CMP ;
  wire [31:0] \$procmux$8577_Y ;
  wire \$procmux$8578_CMP ;
  wire [31:0] \$procmux$8583_Y ;
  wire \$procmux$8584_CMP ;
  wire [31:0] \$procmux$8586_Y ;
  wire \$procmux$8587_CMP ;
  wire [31:0] \$procmux$8589_Y ;
  wire \$procmux$8590_CMP ;
  wire [31:0] \$procmux$8591_Y ;
  wire \$procmux$8592_CMP ;
  wire [31:0] \$procmux$8594_Y ;
  wire \$procmux$8595_CMP ;
  wire [31:0] \$procmux$8596_Y ;
  wire \$procmux$8597_CMP ;
  wire [127:0] \$procmux$8602_Y ;
  wire \$procmux$8603_CMP ;
  wire [127:0] \$procmux$8605_Y ;
  wire \$procmux$8606_CMP ;
  wire [127:0] \$procmux$8607_Y ;
  wire \$procmux$8608_CMP ;
  wire [127:0] \$procmux$8610_Y ;
  wire \$procmux$8611_CMP ;
  wire [127:0] \$procmux$8612_Y ;
  wire \$procmux$8613_CMP ;
  wire \$procmux$8617_Y ;
  wire \$procmux$8618_CMP ;
  wire \$procmux$8619_Y ;
  wire \$procmux$8620_CMP ;
  wire \$procmux$8622_Y ;
  wire \$procmux$8623_CMP ;
  wire \$procmux$8624_Y ;
  wire \$procmux$8625_CMP ;
  wire [127:0] \$procmux$8630_Y ;
  wire \$procmux$8631_CMP ;
  wire [127:0] \$procmux$8632_Y ;
  wire \$procmux$8633_CMP ;
  wire [127:0] \$procmux$8635_Y ;
  wire \$procmux$8636_CMP ;
  wire [127:0] \$procmux$8637_Y ;
  wire \$procmux$8638_CMP ;
  wire [31:0] \$procmux$8642_Y ;
  wire \$procmux$8643_CMP ;
  wire [31:0] \$procmux$8644_Y ;
  wire \$procmux$8645_CMP ;
  wire [31:0] \$procmux$8647_Y ;
  wire \$procmux$8648_CMP ;
  wire [31:0] \$procmux$8649_Y ;
  wire \$procmux$8650_CMP ;
  wire [127:0] \$procmux$8654_Y ;
  wire \$procmux$8655_CMP ;
  wire [127:0] \$procmux$8657_Y ;
  wire \$procmux$8658_CMP ;
  wire [127:0] \$procmux$8659_Y ;
  wire \$procmux$8660_CMP ;
  wire \$procmux$8665_Y ;
  wire \$procmux$8666_CMP ;
  wire \$procmux$8667_Y ;
  wire \$procmux$8668_CMP ;
  wire [127:0] \$procmux$8673_Y ;
  wire \$procmux$8674_CMP ;
  wire [127:0] \$procmux$8675_Y ;
  wire \$procmux$8676_CMP ;
  wire [31:0] \$procmux$8681_Y ;
  wire \$procmux$8682_CMP ;
  wire [31:0] \$procmux$8683_Y ;
  wire \$procmux$8684_CMP ;
  wire [95:0] \$procmux$8688_Y ;
  wire \$procmux$8689_CMP ;
  wire [95:0] \$procmux$8691_Y ;
  wire \$procmux$8692_CMP ;
  wire [95:0] \$procmux$8694_Y ;
  wire \$procmux$8695_CMP ;
  wire [95:0] \$procmux$8696_Y ;
  wire \$procmux$8697_CMP ;
  wire [95:0] \$procmux$8698_Y ;
  wire \$procmux$8699_CMP ;
  wire [31:0] \$procmux$8704_Y ;
  wire \$procmux$8705_CMP ;
  wire [31:0] \$procmux$8706_Y ;
  wire \$procmux$8707_CMP ;
  wire [31:0] \$procmux$8709_Y ;
  wire \$procmux$8710_CMP ;
  wire [31:0] \$procmux$8712_Y ;
  wire \$procmux$8713_CMP ;
  wire [31:0] \$procmux$8714_Y ;
  wire \$procmux$8715_CMP ;
  wire [31:0] \$procmux$8716_Y ;
  wire \$procmux$8717_CMP ;
  wire [31:0] \$procmux$8722_Y ;
  wire \$procmux$8723_CMP ;
  wire [31:0] \$procmux$8725_Y ;
  wire \$procmux$8726_CMP ;
  wire [31:0] \$procmux$8728_Y ;
  wire \$procmux$8729_CMP ;
  wire [31:0] \$procmux$8730_Y ;
  wire \$procmux$8731_CMP ;
  wire [31:0] \$procmux$8732_Y ;
  wire \$procmux$8733_CMP ;
  wire [127:0] \$procmux$8738_Y ;
  wire \$procmux$8739_CMP ;
  wire [127:0] \$procmux$8741_Y ;
  wire \$procmux$8742_CMP ;
  wire [127:0] \$procmux$8743_Y ;
  wire \$procmux$8744_CMP ;
  wire [127:0] \$procmux$8745_Y ;
  wire \$procmux$8746_CMP ;
  wire \$procmux$8750_Y ;
  wire \$procmux$8751_CMP ;
  wire \$procmux$8752_Y ;
  wire \$procmux$8753_CMP ;
  wire \$procmux$8754_Y ;
  wire \$procmux$8755_CMP ;
  wire [127:0] \$procmux$8760_Y ;
  wire \$procmux$8761_CMP ;
  wire [127:0] \$procmux$8762_Y ;
  wire \$procmux$8763_CMP ;
  wire [127:0] \$procmux$8764_Y ;
  wire \$procmux$8765_CMP ;
  wire [31:0] \$procmux$8769_Y ;
  wire \$procmux$8770_CMP ;
  wire [31:0] \$procmux$8771_Y ;
  wire \$procmux$8772_CMP ;
  wire [31:0] \$procmux$8773_Y ;
  wire \$procmux$8774_CMP ;
  wire [31:0] \$procmux$8778_Y ;
  wire \$procmux$8779_CMP ;
  wire [127:0] \$procmux$8783_Y ;
  wire \$procmux$8784_CMP ;
  wire [1:0] \$procmux$8785_Y ;
  wire \$procmux$8786_CMP ;
  wire [1:0] \$procmux$8789_Y ;
  wire \$procmux$8790_CMP ;
  wire [63:0] \$procmux$8794_Y ;
  wire \$procmux$8795_CMP ;
  wire [63:0] \$procmux$8796_Y ;
  wire \$procmux$8797_CMP ;
  wire [63:0] \$procmux$8799_Y ;
  wire \$procmux$8800_CMP ;
  wire [63:0] \$procmux$8801_Y ;
  wire \$procmux$8802_CMP ;
  wire [63:0] \$procmux$8810_Y ;
  wire \$procmux$8811_CMP ;
  wire [63:0] \$procmux$8812_Y ;
  wire \$procmux$8813_CMP ;
  wire [63:0] \$procmux$8815_Y ;
  wire \$procmux$8816_CMP ;
  wire [63:0] \$procmux$8818_Y ;
  wire \$procmux$8819_CMP ;
  wire [63:0] \$procmux$8820_Y ;
  wire \$procmux$8821_CMP ;
  wire [63:0] \$procmux$8829_Y ;
  wire \$procmux$8830_CMP ;
  wire [63:0] \$procmux$8832_Y ;
  wire \$procmux$8833_CMP ;
  wire [63:0] \$procmux$8835_Y ;
  wire \$procmux$8836_CMP ;
  wire [63:0] \$procmux$8837_Y ;
  wire \$procmux$8838_CMP ;
  wire [63:0] \$procmux$8845_Y ;
  wire \$procmux$8846_CMP ;
  wire [63:0] \$procmux$8847_Y ;
  wire \$procmux$8848_CMP ;
  wire [63:0] \$procmux$8850_Y ;
  wire \$procmux$8851_CMP ;
  wire [63:0] \$procmux$8852_Y ;
  wire \$procmux$8853_CMP ;
  wire [63:0] \$procmux$8857_Y ;
  wire \$procmux$8858_CMP ;
  wire [63:0] \$procmux$8860_Y ;
  wire \$procmux$8861_CMP ;
  wire [63:0] \$procmux$8862_Y ;
  wire \$procmux$8863_CMP ;
  wire [63:0] \$procmux$8867_Y ;
  wire \$procmux$8868_CMP ;
  wire \$procmux$8869_CMP ;
  wire \$procmux$8870_CMP ;
  wire \$procmux$8871_CMP ;
  wire \$procmux$8874_CMP ;
  wire [63:0] \$procmux$8876_Y ;
  wire \$procmux$8877_CMP ;
  wire [63:0] \$procmux$8878_Y ;
  wire \$procmux$8879_CMP ;
  wire [7:0] \$procmux$8883_Y ;
  wire \$procmux$8884_CMP ;
  wire [7:0] \$procmux$8888_Y ;
  wire \$procmux$8889_CMP ;
  wire [7:0] \$procmux$8891_Y ;
  wire \$procmux$8892_CMP ;
  wire [7:0] \$procmux$8893_Y ;
  wire \$procmux$8894_CMP ;
  wire [7:0] \$procmux$8895_Y ;
  wire \$procmux$8896_CMP ;
  wire [7:0] \$procmux$8900_Y ;
  wire \$procmux$8901_CMP ;
  wire [7:0] \$procmux$8905_Y ;
  wire \$procmux$8906_CMP ;
  wire [7:0] \$procmux$8908_Y ;
  wire \$procmux$8909_CMP ;
  wire [7:0] \$procmux$8910_Y ;
  wire \$procmux$8911_CMP ;
  wire [7:0] \$procmux$8912_Y ;
  wire \$procmux$8913_CMP ;
  wire [7:0] \$procmux$8917_Y ;
  wire \$procmux$8918_CMP ;
  wire [7:0] \$procmux$8921_Y ;
  wire \$procmux$8922_CMP ;
  wire [7:0] \$procmux$8924_Y ;
  wire \$procmux$8925_CMP ;
  wire [7:0] \$procmux$8926_Y ;
  wire \$procmux$8927_CMP ;
  wire [7:0] \$procmux$8928_Y ;
  wire \$procmux$8929_CMP ;
  wire [7:0] \$procmux$8933_Y ;
  wire \$procmux$8934_CMP ;
  wire [7:0] \$procmux$8937_Y ;
  wire \$procmux$8938_CMP ;
  wire [7:0] \$procmux$8940_Y ;
  wire \$procmux$8941_CMP ;
  wire [7:0] \$procmux$8942_Y ;
  wire \$procmux$8943_CMP ;
  wire [7:0] \$procmux$8944_Y ;
  wire \$procmux$8945_CMP ;
  wire [7:0] \$procmux$8949_Y ;
  wire \$procmux$8950_CMP ;
  wire [7:0] \$procmux$8952_Y ;
  wire \$procmux$8953_CMP ;
  wire [7:0] \$procmux$8955_Y ;
  wire \$procmux$8956_CMP ;
  wire [7:0] \$procmux$8957_Y ;
  wire \$procmux$8958_CMP ;
  wire [7:0] \$procmux$8959_Y ;
  wire \$procmux$8960_CMP ;
  wire [7:0] \$procmux$8964_Y ;
  wire \$procmux$8965_CMP ;
  wire [7:0] \$procmux$8967_Y ;
  wire \$procmux$8968_CMP ;
  wire [7:0] \$procmux$8970_Y ;
  wire \$procmux$8971_CMP ;
  wire [7:0] \$procmux$8972_Y ;
  wire \$procmux$8973_CMP ;
  wire [7:0] \$procmux$8974_Y ;
  wire \$procmux$8975_CMP ;
  wire [7:0] \$procmux$8979_Y ;
  wire \$procmux$8980_CMP ;
  wire [7:0] \$procmux$8981_Y ;
  wire \$procmux$8982_CMP ;
  wire [7:0] \$procmux$8984_Y ;
  wire \$procmux$8985_CMP ;
  wire [7:0] \$procmux$8986_Y ;
  wire \$procmux$8987_CMP ;
  wire [7:0] \$procmux$8988_Y ;
  wire \$procmux$8989_CMP ;
  wire [7:0] \$procmux$8993_Y ;
  wire \$procmux$8994_CMP ;
  wire [7:0] \$procmux$8995_Y ;
  wire \$procmux$8996_CMP ;
  wire [7:0] \$procmux$8998_Y ;
  wire \$procmux$8999_CMP ;
  wire [7:0] \$procmux$9000_Y ;
  wire \$procmux$9001_CMP ;
  wire [7:0] \$procmux$9002_Y ;
  wire \$procmux$9003_CMP ;
  wire [31:0] \$procmux$9011_Y ;
  wire \$procmux$9012_CMP ;
  wire [31:0] \$procmux$9014_Y ;
  wire \$procmux$9015_CMP ;
  wire [31:0] \$procmux$9016_Y ;
  wire \$procmux$9017_CMP ;
  wire [31:0] \$procmux$9018_Y ;
  wire \$procmux$9019_CMP ;
  wire [7:0] \$procmux$9023_Y ;
  wire \$procmux$9024_CMP ;
  wire [7:0] \$procmux$9028_Y ;
  wire \$procmux$9029_CMP ;
  wire [7:0] \$procmux$9030_Y ;
  wire \$procmux$9031_CMP ;
  wire [7:0] \$procmux$9032_Y ;
  wire \$procmux$9033_CMP ;
  wire [7:0] \$procmux$9034_Y ;
  wire \$procmux$9035_CMP ;
  wire [7:0] \$procmux$9039_Y ;
  wire \$procmux$9040_CMP ;
  wire [7:0] \$procmux$9044_Y ;
  wire \$procmux$9045_CMP ;
  wire [7:0] \$procmux$9046_Y ;
  wire \$procmux$9047_CMP ;
  wire [7:0] \$procmux$9048_Y ;
  wire \$procmux$9049_CMP ;
  wire [7:0] \$procmux$9050_Y ;
  wire \$procmux$9051_CMP ;
  wire [7:0] \$procmux$9055_Y ;
  wire \$procmux$9056_CMP ;
  wire [7:0] \$procmux$9059_Y ;
  wire \$procmux$9060_CMP ;
  wire [7:0] \$procmux$9061_Y ;
  wire \$procmux$9062_CMP ;
  wire [7:0] \$procmux$9063_Y ;
  wire \$procmux$9064_CMP ;
  wire [7:0] \$procmux$9065_Y ;
  wire \$procmux$9066_CMP ;
  wire [7:0] \$procmux$9070_Y ;
  wire \$procmux$9071_CMP ;
  wire [7:0] \$procmux$9074_Y ;
  wire \$procmux$9075_CMP ;
  wire [7:0] \$procmux$9076_Y ;
  wire \$procmux$9077_CMP ;
  wire [7:0] \$procmux$9078_Y ;
  wire \$procmux$9079_CMP ;
  wire [7:0] \$procmux$9080_Y ;
  wire \$procmux$9081_CMP ;
  wire [7:0] \$procmux$9085_Y ;
  wire \$procmux$9086_CMP ;
  wire [7:0] \$procmux$9088_Y ;
  wire \$procmux$9089_CMP ;
  wire [7:0] \$procmux$9090_Y ;
  wire \$procmux$9091_CMP ;
  wire [7:0] \$procmux$9092_Y ;
  wire \$procmux$9093_CMP ;
  wire [7:0] \$procmux$9094_Y ;
  wire \$procmux$9095_CMP ;
  wire [7:0] \$procmux$9099_Y ;
  wire \$procmux$9100_CMP ;
  wire [7:0] \$procmux$9102_Y ;
  wire \$procmux$9103_CMP ;
  wire [7:0] \$procmux$9104_Y ;
  wire \$procmux$9105_CMP ;
  wire [7:0] \$procmux$9106_Y ;
  wire \$procmux$9107_CMP ;
  wire [7:0] \$procmux$9108_Y ;
  wire \$procmux$9109_CMP ;
  wire [7:0] \$procmux$9113_Y ;
  wire \$procmux$9114_CMP ;
  wire [7:0] \$procmux$9115_Y ;
  wire \$procmux$9116_CMP ;
  wire [7:0] \$procmux$9117_Y ;
  wire \$procmux$9118_CMP ;
  wire [7:0] \$procmux$9119_Y ;
  wire \$procmux$9120_CMP ;
  wire [7:0] \$procmux$9121_Y ;
  wire \$procmux$9122_CMP ;
  wire [7:0] \$procmux$9126_Y ;
  wire \$procmux$9127_CMP ;
  wire [7:0] \$procmux$9128_Y ;
  wire \$procmux$9129_CMP ;
  wire [7:0] \$procmux$9130_Y ;
  wire \$procmux$9131_CMP ;
  wire [7:0] \$procmux$9132_Y ;
  wire \$procmux$9133_CMP ;
  wire [7:0] \$procmux$9134_Y ;
  wire \$procmux$9135_CMP ;
  wire [31:0] \$procmux$9143_Y ;
  wire \$procmux$9144_CMP ;
  wire [31:0] \$procmux$9145_Y ;
  wire \$procmux$9146_CMP ;
  wire [31:0] \$procmux$9147_Y ;
  wire \$procmux$9148_CMP ;
  wire [31:0] \$procmux$9149_Y ;
  wire \$procmux$9150_CMP ;
  wire \$procmux$9156_Y ;
  wire \$procmux$9157_CMP ;
  wire \$procmux$9158_Y ;
  wire \$procmux$9159_CMP ;
  wire \$procmux$9160_Y ;
  wire \$procmux$9161_CMP ;
  wire [63:0] \$procmux$9167_Y ;
  wire \$procmux$9168_CMP ;
  wire [63:0] \$procmux$9169_Y ;
  wire \$procmux$9170_CMP ;
  wire [63:0] \$procmux$9171_Y ;
  wire \$procmux$9172_CMP ;
  wire [1:0] \$procmux$9178_Y ;
  wire \$procmux$9179_CMP ;
  wire [1:0] \$procmux$9180_Y ;
  wire \$procmux$9181_CMP ;
  wire [1:0] \$procmux$9182_Y ;
  wire \$procmux$9183_CMP ;
  wire [1:0] \$procmux$9191_Y ;
  wire \$procmux$9192_CMP ;
  wire [1:0] \$procmux$9193_Y ;
  wire \$procmux$9194_CMP ;
  wire [1:0] \$procmux$9195_Y ;
  wire \$procmux$9196_CMP ;
  wire [1:0] \$procmux$9202_Y ;
  wire \$procmux$9203_CMP ;
  wire \$procmux$9204_CMP ;
  wire [1:0] \$procmux$9205_Y ;
  wire \$procmux$9206_CMP ;
  wire [1:0] \$procmux$9207_Y ;
  wire \$procmux$9208_CMP ;
  wire \$procmux$9213_Y ;
  wire \$procmux$9214_CMP ;
  wire \$procmux$9215_Y ;
  wire \$procmux$9216_CMP ;
  wire \$procmux$9217_Y ;
  wire \$procmux$9218_CMP ;
  wire \$procmux$9225_Y ;
  wire \$procmux$9226_CMP ;
  wire \$procmux$9227_Y ;
  wire \$procmux$9228_CMP ;
  wire \$procmux$9229_Y ;
  wire \$procmux$9230_CMP ;
  wire \$procmux$9234_Y ;
  wire \$procmux$9235_CMP ;
  wire \$procmux$9236_Y ;
  wire \$procmux$9237_CMP ;
  wire [63:0] \$procmux$9241_Y ;
  wire \$procmux$9242_CMP ;
  wire [63:0] \$procmux$9243_Y ;
  wire \$procmux$9244_CMP ;
  wire [63:0] \$procmux$9248_Y ;
  wire \$procmux$9249_CMP ;
  wire [63:0] \$procmux$9250_Y ;
  wire \$procmux$9251_CMP ;
  wire [1:0] \$procmux$9255_Y ;
  wire \$procmux$9256_CMP ;
  wire [1:0] \$procmux$9257_Y ;
  wire \$procmux$9258_CMP ;
  wire [1:0] \$procmux$9262_Y ;
  wire \$procmux$9263_CMP ;
  wire [1:0] \$procmux$9264_Y ;
  wire \$procmux$9265_CMP ;
  wire [1:0] \$procmux$9269_Y ;
  wire \$procmux$9270_CMP ;
  wire [1:0] \$procmux$9271_Y ;
  wire \$procmux$9272_CMP ;
  wire [63:0] \$procmux$9276_Y ;
  wire \$procmux$9277_CMP ;
  wire [63:0] \$procmux$9278_Y ;
  wire \$procmux$9279_CMP ;
  wire \$procmux$9283_Y ;
  wire \$procmux$9284_CMP ;
  wire \$procmux$9285_Y ;
  wire \$procmux$9286_CMP ;
  wire \$procmux$9290_Y ;
  wire \$procmux$9291_CMP ;
  wire \$procmux$9292_Y ;
  wire \$procmux$9293_CMP ;
  wire \$procmux$9296_Y ;
  wire \$procmux$9297_CMP ;
  wire [63:0] \$procmux$9300_Y ;
  wire \$procmux$9301_CMP ;
  wire [63:0] \$procmux$9304_Y ;
  wire \$procmux$9305_CMP ;
  wire [1:0] \$procmux$9308_Y ;
  wire \$procmux$9309_CMP ;
  wire [1:0] \$procmux$9312_Y ;
  wire \$procmux$9313_CMP ;
  wire [1:0] \$procmux$9316_Y ;
  wire \$procmux$9317_CMP ;
  wire [63:0] \$procmux$9320_Y ;
  wire \$procmux$9321_CMP ;
  wire \$procmux$9324_Y ;
  wire \$procmux$9325_CMP ;
  wire \$procmux$9328_Y ;
  wire \$procmux$9329_CMP ;
  wire [1:0] \$procmux$9331_Y ;
  wire \$procmux$9332_CMP ;
  wire [1:0] \$procmux$9333_Y ;
  wire \$procmux$9334_CMP ;
  wire \$procmux$9338_Y ;
  wire \$procmux$9339_CMP ;
  wire \$procmux$9343_Y ;
  wire \$procmux$9344_CMP ;
  wire [2:0] \$procmux$9348_Y ;
  wire \$procmux$9349_CMP ;
  wire \$procmux$9352_Y ;
  wire \$procmux$9353_CMP ;
  wire [2:0] \$procmux$9356_Y ;
  wire \$procmux$9357_CMP ;
  wire \$procmux$9359_Y ;
  wire \$procmux$9360_CMP ;
  wire [1:0] \$procmux$9362_Y ;
  wire \$procmux$9363_CMP ;
  wire [1:0] \$procmux$9364_Y ;
  wire \$procmux$9365_CMP ;
  wire [1:0] \$procmux$9367_Y ;
  wire \$procmux$9368_CMP ;
  wire [1:0] \$procmux$9369_Y ;
  wire \$procmux$9370_CMP ;
  wire [1:0] \$procmux$9373_Y ;
  wire \$procmux$9374_CMP ;
  wire [1:0] \$procmux$9375_Y ;
  wire \$procmux$9376_CMP ;
  wire \$procmux$9378_Y ;
  wire \$procmux$9379_CMP ;
  wire \$procmux$9381_CMP ;
  wire \$procmux$9383_CMP ;
  wire \$procmux$9386_CMP ;
  wire [1:0] \$procmux$9388_Y ;
  wire \$procmux$9389_CMP ;
  wire \$procmux$9391_CMP ;
  wire \$procmux$9393_CMP ;
  wire \$procmux$9396_CMP ;
  wire [1:0] \$procmux$9400_Y ;
  wire \$procmux$9401_CMP ;
  wire [1:0] \$procmux$9403_Y ;
  wire \$procmux$9404_CMP ;
  wire [2:0] \$procmux$9408_Y ;
  wire \$procmux$9409_CMP ;
  wire [2:0] \$procmux$9411_Y ;
  wire \$procmux$9412_CMP ;
  wire [2:0] \$procmux$9413_Y ;
  wire \$procmux$9414_CMP ;
  wire \$procmux$9418_Y ;
  wire \$procmux$9419_CMP ;
  wire \$procmux$9421_Y ;
  wire \$procmux$9422_CMP ;
  wire \$procmux$9423_Y ;
  wire \$procmux$9424_CMP ;
  wire [2:0] \$procmux$9430_Y ;
  wire \$procmux$9431_CMP ;
  wire [2:0] \$procmux$9432_Y ;
  wire \$procmux$9433_CMP ;
  wire \$procmux$9439_Y ;
  wire \$procmux$9440_CMP ;
  wire \$procmux$9441_Y ;
  wire \$procmux$9442_CMP ;
  wire [1:0] \$procmux$9447_Y ;
  wire \$procmux$9448_CMP ;
  wire [1:0] \$procmux$9449_Y ;
  wire \$procmux$9450_CMP ;
  wire [2:0] \$procmux$9456_Y ;
  wire \$procmux$9457_CMP ;
  wire \$procmux$9463_Y ;
  wire \$procmux$9464_CMP ;
  wire \$procmux$9469_Y ;
  wire \$procmux$9470_CMP ;
  wire \$procmux$9473_Y ;
  wire \$procmux$9474_CMP ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:332.13-335.16" */
  wire [63:0] \$rdata$209 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  wire [63:0] \$rdata$211 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [63:0] \$rdata$219 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [63:0] \$rdata$228 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:293.13-295.16" */
  wire [63:0] \$rdata_d$145 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18" */
  wire [63:0] \$rdata_d$154 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:298.13-308.16" */
  wire [63:0] \$rdata_d$155 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  wire [63:0] \$rdata_d$210 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [63:0] \$rdata_d$214 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [63:0] \$rdata_d$223 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$resume$47 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  wire \$resume$59 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$resuming_d_aligned$138 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [1:0] \$resuming_d_aligned$217 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  wire [1:0] \$resuming_d_aligned$226 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  wire [1:0] \$resuming_d_aligned$231 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:242.5-244.8" */
  wire [1:0] \$resuming_d_aligned$72 ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:385.55" */
  wire [20:0] \$root.dm.auipc.imm ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:384.55" */
  wire [4:0] \$root.dm.auipc.rd ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:420.53" */
  wire [11:0] \$root.dm.csrr.csr ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:421.53" */
  wire [4:0] \$root.dm.csrr.dest ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:414.53" */
  wire [11:0] \$root.dm.csrw.csr ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:415.53" */
  wire [4:0] \$root.dm.csrw.rs1 ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:400.60" */
  wire [4:0] \$root.dm.float_load.base ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:399.60" */
  wire [4:0] \$root.dm.float_load.dest ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:401.60" */
  wire [11:0] \$root.dm.float_load.offset ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:398.60" */
  wire [2:0] \$root.dm.float_load.size ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:408.61" */
  wire [4:0] \$root.dm.float_store.base ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:409.61" */
  wire [11:0] \$root.dm.float_store.offset ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:406.61" */
  wire [2:0] \$root.dm.float_store.size ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:407.61" */
  wire [4:0] \$root.dm.float_store.src ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:343.53" */
  wire [20:0] \$root.dm.jal.imm ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:342.53" */
  wire [4:0] \$root.dm.jal.rd ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:378.54" */
  wire [4:0] \$root.dm.load.base ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:377.54" */
  wire [4:0] \$root.dm.load.dest ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:379.54" */
  wire [11:0] \$root.dm.load.offset ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:376.54" */
  wire [2:0] \$root.dm.load.size ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:362.53" */
  wire [4:0] \$root.dm.slli.rd ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:363.53" */
  wire [4:0] \$root.dm.slli.rs1 ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:364.53" */
  wire [5:0] \$root.dm.slli.shamt ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:369.53" */
  wire [4:0] \$root.dm.srli.rd ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:370.53" */
  wire [4:0] \$root.dm.srli.rs1 ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:371.53" */
  wire [5:0] \$root.dm.srli.shamt ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:392.55" */
  wire [4:0] \$root.dm.store.base ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:393.55" */
  wire [11:0] \$root.dm.store.offset ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:390.55" */
  wire [2:0] \$root.dm.store.size ;
  /* src = "rtl/riscv-dbg/dm_pkg.sv:391.55" */
  wire [4:0] \$root.dm.store.src ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  wire [1:0] \$state_d$12 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.9-161.12" */
  wire [1:0] \$state_d$37 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:169.9-171.12" */
  wire [1:0] \$state_d$38 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:177.9-179.12" */
  wire [1:0] \$state_d$42 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:186.9-188.12" */
  wire [1:0] \$state_d$46 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire [1:0] \$state_d$49 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  wire [1:0] \$state_d$61 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  wire \$unsupported_command$256 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  wire \$unsupported_command$282 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.18-467.12" */
  wire \$unsupported_command$290 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire \$unsupported_command$293 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire \$unsupported_command$296 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  wire \$unsupported_command$305 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:86.23" */
  wire [511:0] abstract_cmd;
  /* src = "rtl/riscv-dbg/dm_mem.sv:122.19" */
  wire [23:0] ac_ar;
  /* src = "rtl/riscv-dbg/dm_mem.sv:56.44" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:58.44" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:34.44" */
  input clear_resumeack_i;
  wire clear_resumeack_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:25.44" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:47.44" */
  input [31:0] cmd_i;
  wire [31:0] cmd_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:46.44" */
  input cmd_valid_i;
  wire cmd_valid_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:50.44" */
  output cmdbusy_o;
  wire cmdbusy_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:49.44" */
  output [2:0] cmderror_o;
  wire [2:0] cmderror_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:48.44" */
  output cmderror_valid_o;
  wire cmderror_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:225.35" */
  wire [63:0] data_bits;
  /* src = "rtl/riscv-dbg/dm_mem.sv:42.44" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:43.44" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:44.44" */
  output data_valid_o;
  wire data_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:28.44" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:91.9" */
  wire exception;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.9" */
  wire fwd_rom_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.20" */
  wire fwd_rom_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.31" */
  wire go;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.35" */
  wire going;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.23" */
  wire halted_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.30" */
  wire [1:0] halted_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:37.44" */
  output halted_o;
  wire halted_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.33" */
  wire halted_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.48" */
  wire [1:0] halted_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.49" */
  wire [1:0] haltreq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:32.44" */
  input haltreq_i;
  wire haltreq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.26" */
  wire hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:30.44" */
  input [19:0] hartsel_i;
  wire [19:0] hartsel_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:29.44" */
  input ndmreset_i;
  wire ndmreset_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:85.41" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_mem.sv:40.44" */
  input [255:0] progbuf_i;
  wire [255:0] progbuf_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:226.20" */
  wire [63:0] rdata;
  /* src = "rtl/riscv-dbg/dm_mem.sv:95.16" */
  wire [63:0] rdata_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:59.44" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:95.25" */
  wire [63:0] rdata_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:54.44" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.23" */
  wire resume;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.30" */
  wire [1:0] resumereq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:33.44" */
  input resumereq_i;
  wire resumereq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.46" */
  wire [1:0] resumereq_wdata_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.23" */
  wire resuming_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.30" */
  wire [1:0] resuming_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:38.44" */
  output resuming_o;
  wire resuming_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.35" */
  wire resuming_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.50" */
  wire [1:0] resuming_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:488.16" */
  wire [63:0] rom_addr;
  /* src = "rtl/riscv-dbg/dm_mem.sv:94.16" */
  wire [63:0] rom_rdata;
  /* src = "rtl/riscv-dbg/dm_mem.sv:26.44" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.11" */
  wire [1:0] state_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.20" */
  wire [1:0] state_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:92.9" */
  wire unsupported_command;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.35" */
  wire wdata_hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:57.44" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:55.44" */
  input we_i;
  wire we_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:96.16" */
  wire word_enable32_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:215.16" */
  wire [63:0] word_mux;
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1191 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1247 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1248 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$101  (
    .A(\$auto$rtlil.cc:3092:Mux$1248 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1249 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$102  (
    .A(\$auto$rtlil.cc:3092:Mux$1248 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1250 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(addr_i[11:0]),
    .B(12'h118),
    .Y(\$auto$rtlil.cc:3011:Eq$1252 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(addr_i[11:0]),
    .B(12'h380),
    .Y(\$auto$rtlil.cc:3015:Ge$1253 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(addr_i[11:0]),
    .B(12'h387),
    .Y(\$auto$rtlil.cc:3010:Le$1254 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(\$auto$rtlil.cc:3015:Ge$1253 ),
    .B(\$auto$rtlil.cc:3010:Le$1254 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1255 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$108  (
    .A({ 22'h000000, addr_i[11:2] }),
    .B(32'd224),
    .Y(\$109 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(\$109 ),
    .Y(\$111 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$121  (
    .A({ 22'h000000, addr_i[11:2] }),
    .B(32'd224),
    .Y(\$122 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(\$122 ),
    .B(32'd1),
    .Y(\$124 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(addr_i[11:0]),
    .B(12'h300),
    .Y(\$auto$rtlil.cc:3011:Eq$1256 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A({ 1'h0, wdata_hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1257 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$143  (
    .A(resumereq_wdata_aligned),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1258 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$144  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1258 ),
    .S(\$auto$rtlil.cc:3009:Lt$1257 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1259 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(cmd_i[31:24]),
    .Y(\$147 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(ac_ar[17]),
    .Y(\$149 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1194 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(\$147 ),
    .B(\$149 ),
    .Y(\$151 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(\$151 ),
    .B(ac_ar[18]),
    .Y(\$153 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(addr_i[11:0]),
    .B(12'h380),
    .Y(\$auto$rtlil.cc:3015:Ge$1260 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$157  (
    .A(addr_i[11:0]),
    .B(12'h387),
    .Y(\$auto$rtlil.cc:3010:Le$1261 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$auto$rtlil.cc:3015:Ge$1260 ),
    .B(\$auto$rtlil.cc:3010:Le$1261 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1262 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd9)
  ) \$159  (
    .A(addr_i[11:3]),
    .B(9'h070),
    .Y(\$160 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$16  (
    .A(resumereq_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1195 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd9)
  ) \$163  (
    .A(\$162 ),
    .B(9'h001),
    .Y(\$164 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A({ 1'h0, \$164 [0] }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1263 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$166  (
    .A(data_i),
    .S(\$164 [0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1264 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$167  (
    .A(32'hxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1264 ),
    .S(\$auto$rtlil.cc:3009:Lt$1263 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1265 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd9)
  ) \$168  (
    .A(addr_i[11:3]),
    .B(9'h070),
    .Y(\$169 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$17  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1195 ),
    .S(\$auto$rtlil.cc:3009:Lt$1194 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1196 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd32)
  ) \$173  (
    .A(data_i),
    .S(1'h0),
    .Y(\$auto$rtlil.cc:3113:Bmux$1267 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$175  (
    .A(addr_i[11:0]),
    .B(12'h360),
    .Y(\$auto$rtlil.cc:3015:Ge$1269 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(addr_i[11:0]),
    .B(12'h37f),
    .Y(\$auto$rtlil.cc:3010:Le$1270 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$177  (
    .A(\$auto$rtlil.cc:3015:Ge$1269 ),
    .B(\$auto$rtlil.cc:3010:Le$1270 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1271 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd9)
  ) \$178  (
    .A(addr_i[11:3]),
    .B(9'h06c),
    .Y(\$179 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1197 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A({ 1'h0, \$179 [2:0] }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$1272 )
  );
  \$bmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd64)
  ) \$181  (
    .A(progbuf),
    .S(\$179 [1:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1273 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$182  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1273 ),
    .S(\$auto$rtlil.cc:3009:Lt$1272 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1274 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(addr_i[11:0]),
    .B(12'h338),
    .Y(\$auto$rtlil.cc:3015:Ge$1275 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(addr_i[11:0]),
    .B(12'h35f),
    .Y(\$auto$rtlil.cc:3010:Le$1276 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$auto$rtlil.cc:3015:Ge$1275 ),
    .B(\$auto$rtlil.cc:3010:Le$1276 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1277 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd9)
  ) \$186  (
    .A(addr_i[11:3]),
    .B(9'h067),
    .Y(\$187 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A({ 1'h0, \$187 [2:0] }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$1278 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd64)
  ) \$189  (
    .A(abstract_cmd),
    .S(\$187 [2:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1279 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$19  (
    .A(resuming_q_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1198 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$190  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1279 ),
    .S(\$auto$rtlil.cc:3009:Lt$1278 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1280 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(addr_i[11:0]),
    .B(12'h400),
    .Y(\$auto$rtlil.cc:3015:Ge$1281 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(addr_i[11:0]),
    .B(12'h7ff),
    .Y(\$auto$rtlil.cc:3010:Le$1282 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(\$auto$rtlil.cc:3015:Ge$1281 ),
    .B(\$auto$rtlil.cc:3010:Le$1282 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1283 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd12)
  ) \$194  (
    .A({ addr_i[11:3], 3'h0 }),
    .B(12'h400),
    .Y(\$195 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$198  (
    .A(\$195 ),
    .Y(\$199 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$2  (
    .A(halted_q_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1192 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$20  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1198 ),
    .S(\$auto$rtlil.cc:3009:Lt$1197 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1199 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd13),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A({ 1'h0, \$201  }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1284 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd13),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$203  (
    .A({ 1'h0, \$201  }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$1285 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(\$auto$rtlil.cc:3015:Ge$1284 ),
    .B(\$auto$rtlil.cc:3009:Lt$1285 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1286 )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) \$205  (
    .A(8'h00),
    .B(8'hff),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1286 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1287 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd8)
  ) \$206  (
    .A(\$auto$rtlil.cc:3092:Mux$1287 ),
    .S(\$201 [2:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1288 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd8)
  ) \$207  (
    .A(\$auto$rtlil.cc:3092:Mux$1287 ),
    .S(\$201 [2:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1289 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3092:Mux$1199 ),
    .Y(\$22 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1196 ),
    .B(\$22 ),
    .Y(\$24 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A({ 29'h00000000, ac_ar[22:20] }),
    .B(32'd3),
    .Y(\$234 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(\$234 ),
    .B(ac_ar[17]),
    .Y(\$236 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(\$236 ),
    .B(ac_ar[16]),
    .Y(\$238 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(ac_ar[15:14]),
    .Y(\$240 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$243  (
    .A(ac_ar[5]),
    .Y(\$244 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$245  (
    .A(\$242 ),
    .B(\$244 ),
    .Y(\$246 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(ac_ar[4:0]),
    .B(5'h0a),
    .Y(\$248 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(\$246 ),
    .B(\$248 ),
    .Y(\$250 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1200 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A({ 29'h00000000, ac_ar[22:20] }),
    .B(32'd3),
    .Y(\$258 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\$258 ),
    .B(ac_ar[17]),
    .Y(\$260 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$26  (
    .A(haltreq_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1201 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(ac_ar[16]),
    .Y(\$262 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\$260 ),
    .B(\$262 ),
    .Y(\$264 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(ac_ar[15:14]),
    .Y(\$266 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$269  (
    .A(ac_ar[5]),
    .Y(\$270 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1201 ),
    .S(\$auto$rtlil.cc:3009:Lt$1200 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1202 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$271  (
    .A(\$268 ),
    .B(\$270 ),
    .Y(\$272 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$273  (
    .A(ac_ar[4:0]),
    .B(5'h0a),
    .Y(\$274 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(\$272 ),
    .B(\$274 ),
    .Y(\$276 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3092:Mux$1202 ),
    .Y(\$29 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A({ 29'h00000000, ac_ar[22:20] }),
    .B(32'd3),
    .Y(\$284 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$287  (
    .A(\$284 ),
    .B(\$286 ),
    .Y(\$288 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\$unsupported_command$296 ),
    .Y(\$298 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(ac_ar[18]),
    .B(\$298 ),
    .Y(\$300 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$3  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1192 ),
    .S(\$auto$rtlil.cc:3009:Lt$1191 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1193 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$24 ),
    .B(\$29 ),
    .Y(\$31 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(addr_i[11:0]),
    .B(12'h800),
    .Y(\$307 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$309  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1291 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$312  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1293 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1203 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$33  (
    .A(halted_q_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1204 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$34  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1204 ),
    .S(\$auto$rtlil.cc:3009:Lt$1203 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1205 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$31 ),
    .B(\$auto$rtlil.cc:3092:Mux$1205 ),
    .Y(\$36 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1206 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(cmd_valid_i),
    .B(\$auto$rtlil.cc:3092:Mux$1193 ),
    .Y(\$5 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$40  (
    .A(resuming_q_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1207 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$41  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1207 ),
    .S(\$auto$rtlil.cc:3009:Lt$1206 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1208 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1209 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$44  (
    .A(halted_aligned),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3113:Bmux$1210 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$45  (
    .A(1'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1210 ),
    .S(\$auto$rtlil.cc:3009:Lt$1209 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1211 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(unsupported_command),
    .B(cmd_valid_i),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(unsupported_command),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$62  (
    .A(rdata_q),
    .B(rom_rdata),
    .S(fwd_rom_q),
    .Y(\$auto$rtlil.cc:3092:Mux$1212 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$63  (
    .A(word_mux[31:0]),
    .B(word_mux[63:32]),
    .S(word_enable32_q),
    .Y(\$auto$rtlil.cc:3092:Mux$1213 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A({ 1'h0, hartsel }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1214 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A({ 1'h0, hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1215 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$auto$rtlil.cc:3015:Ge$1214 ),
    .B(\$auto$rtlil.cc:3009:Lt$1215 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1216 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$68  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1216 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1217 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$69  (
    .A(\$auto$rtlil.cc:3092:Mux$1217 ),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1218 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$70  (
    .A(\$auto$rtlil.cc:3092:Mux$1217 ),
    .S(hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1219 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(addr_i[11:0]),
    .B(12'h100),
    .Y(\$auto$rtlil.cc:3011:Eq$1221 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A({ 1'h0, wdata_hartsel }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1222 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A({ 1'h0, wdata_hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1223 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$auto$rtlil.cc:3015:Ge$1222 ),
    .B(\$auto$rtlil.cc:3009:Lt$1223 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1224 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$77  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1224 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1225 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$78  (
    .A(\$auto$rtlil.cc:3092:Mux$1225 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1226 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$79  (
    .A(\$auto$rtlil.cc:3092:Mux$1225 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1227 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A({ 1'h0, wdata_hartsel }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1229 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A({ 1'h0, wdata_hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1230 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(\$auto$rtlil.cc:3015:Ge$1229 ),
    .B(\$auto$rtlil.cc:3009:Lt$1230 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1231 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1231 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1232 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$85  (
    .A(\$auto$rtlil.cc:3092:Mux$1232 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1233 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$86  (
    .A(\$auto$rtlil.cc:3092:Mux$1232 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1234 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(addr_i[11:0]),
    .B(12'h108),
    .Y(\$auto$rtlil.cc:3011:Eq$1236 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(addr_i[11:0]),
    .B(12'h110),
    .Y(\$auto$rtlil.cc:3011:Eq$1237 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A({ 1'h0, wdata_hartsel }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1238 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A({ 1'h0, wdata_hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1239 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(\$auto$rtlil.cc:3015:Ge$1238 ),
    .B(\$auto$rtlil.cc:3009:Lt$1239 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1240 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$93  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1240 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1241 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$94  (
    .A(\$auto$rtlil.cc:3092:Mux$1241 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1242 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$95  (
    .A(\$auto$rtlil.cc:3092:Mux$1241 ),
    .S(wdata_hartsel),
    .Y(\$auto$rtlil.cc:3114:Demux$1243 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A({ 1'h0, wdata_hartsel }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1245 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A({ 1'h0, wdata_hartsel }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1246 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$auto$rtlil.cc:3015:Ge$1245 ),
    .B(\$auto$rtlil.cc:3009:Lt$1246 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1247 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16641  (
    .A({ 1'h0, halted_q }),
    .B(\$auto$rtlil.cc:2957:Not$16643 ),
    .Y(\$auto$rtlil.cc:3004:And$16644 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16642  (
    .A(\$auto$rtlil.cc:3114:Demux$1243 ),
    .Y(\$auto$rtlil.cc:2957:Not$16643 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16645  (
    .A({ 1'h0, resuming_q }),
    .B(\$auto$rtlil.cc:2957:Not$16647 ),
    .Y(\$auto$rtlil.cc:3004:And$16648 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16646  (
    .A(\$auto$rtlil.cc:3114:Demux$1219 ),
    .Y(\$auto$rtlil.cc:2957:Not$16647 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:783:replace_const_cells$16649  (
    .A({ 1'h0, halted_q }),
    .B(\$auto$rtlil.cc:3114:Demux$1234 ),
    .Y(\$auto$rtlil.cc:3005:Or$16650 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:783:replace_const_cells$16651  (
    .A(\$procmux$9331_Y ),
    .B(\$auto$rtlil.cc:3114:Demux$1250 ),
    .Y(\$auto$rtlil.cc:3005:Or$16652 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd64),
    .Y_WIDTH(32'd64)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16653  (
    .A({ 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y , 6'h00, \$procmux$9343_Y , \$procmux$9338_Y  }),
    .B(\$auto$rtlil.cc:3114:Demux$1289 ),
    .Y(\$auto$rtlil.cc:3004:And$16654 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$fwd_rom_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(fwd_rom_d),
    .Q(fwd_rom_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$halted_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$315 ),
    .Q(halted_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$rdata_q  (
    .AD(64'h0000000000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(rdata_d),
    .Q(rdata_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$resuming_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$317 ),
    .Q(resuming_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$state_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$word_enable32_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(addr_i[2]),
    .Q(word_enable32_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8483  (
    .A(1'h1),
    .B(\$unsupported_command$296 ),
    .S(\$procmux$8484_CMP ),
    .Y(\$procmux$8483_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8484_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8484_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8488  (
    .A(32'd1048691),
    .B(\$abstract_cmd[31:0]$294 ),
    .S(\$procmux$8489_CMP ),
    .Y(\$procmux$8488_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8489_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8489_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:475.11-475.46|rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8491  (
    .A(32'd1048691),
    .B(32'd19),
    .S(\$procmux$8492_CMP ),
    .Y(\$procmux$8491_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8494  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8491_Y ),
    .S(\$procmux$8495_CMP ),
    .Y(\$procmux$8494_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8495_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8495_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.86-467.12|rtl/riscv-dbg/dm_mem.sv:461.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8497  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$8498_CMP ),
    .Y(\$procmux$8497_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8500  (
    .A(\$procmux$8497_Y ),
    .B(1'hx),
    .S(\$procmux$8501_CMP ),
    .Y(\$procmux$8500_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8503  (
    .A(\$procmux$8500_Y ),
    .B(1'hx),
    .S(\$procmux$8504_CMP ),
    .Y(\$procmux$8503_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8505  (
    .A(1'hx),
    .B(\$procmux$8503_Y ),
    .S(\$procmux$8506_CMP ),
    .Y(\$procmux$8505_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8506_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8506_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.86-467.12|rtl/riscv-dbg/dm_mem.sv:461.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8508  (
    .A(32'd0),
    .B(32'd1048691),
    .S(\$procmux$8509_CMP ),
    .Y(\$procmux$8508_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8511  (
    .A(\$procmux$8508_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8512_CMP ),
    .Y(\$procmux$8511_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8514  (
    .A(\$procmux$8511_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8515_CMP ),
    .Y(\$procmux$8514_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8516  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8514_Y ),
    .S(\$procmux$8517_CMP ),
    .Y(\$procmux$8516_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8517_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8517_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8522  (
    .A(\$unsupported_command$290 ),
    .B(\$unsupported_command$282 ),
    .S(\$procmux$8523_CMP ),
    .Y(\$procmux$8522_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8525  (
    .A(\$procmux$8522_Y ),
    .B(1'hx),
    .S(\$procmux$8526_CMP ),
    .Y(\$procmux$8525_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8527  (
    .A(1'hx),
    .B(\$procmux$8525_Y ),
    .S(\$procmux$8528_CMP ),
    .Y(\$procmux$8527_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8528_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8528_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8533  (
    .A(\$abstract_cmd[31:0]$289 ),
    .B(\$abstract_cmd[31:0]$280 ),
    .S(\$procmux$8534_CMP ),
    .Y(\$procmux$8533_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8536  (
    .A(\$procmux$8533_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8537_CMP ),
    .Y(\$procmux$8536_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8538  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8536_Y ),
    .S(\$procmux$8539_CMP ),
    .Y(\$procmux$8538_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8539_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8539_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8543  (
    .A({ 49'h0f64048e6710a, cmd_i[22:20], 12'h023, cmd_i[11:0], 20'h02473 }),
    .B(96'h000000130000001300000013),
    .S(\$procmux$8544_CMP ),
    .Y(\$procmux$8543_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8546  (
    .A(\$procmux$8543_Y ),
    .B(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8547_CMP ),
    .Y(\$procmux$8546_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8549  (
    .A(\$procmux$8546_Y ),
    .B(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8550_CMP ),
    .Y(\$procmux$8549_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8551  (
    .A(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8549_Y ),
    .S(\$procmux$8552_CMP ),
    .Y(\$procmux$8551_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8554  (
    .A(\$procmux$8551_Y ),
    .B(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8555_CMP ),
    .Y(\$procmux$8554_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8556  (
    .A(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8554_Y ),
    .S(\$procmux$8557_CMP ),
    .Y(\$procmux$8556_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8557_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8557_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:443.15-444.96|rtl/riscv-dbg/dm_mem.sv:442.13-448.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8562  (
    .A({ 7'h1c, cmd_i[4:0], 5'h0a, cmd_i[22:20], 12'h023 }),
    .B({ 7'h1c, cmd_i[4:0], 5'h0a, cmd_i[22:20], 12'h027 }),
    .S(\$procmux$8563_CMP ),
    .Y(\$procmux$8562_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8564  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8562_Y ),
    .S(\$procmux$8565_CMP ),
    .Y(\$procmux$8564_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8567  (
    .A(\$procmux$8564_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8568_CMP ),
    .Y(\$procmux$8567_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8570  (
    .A(\$procmux$8567_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8571_CMP ),
    .Y(\$procmux$8570_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8572  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8570_Y ),
    .S(\$procmux$8573_CMP ),
    .Y(\$procmux$8572_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8575  (
    .A(\$procmux$8572_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8576_CMP ),
    .Y(\$procmux$8575_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8577  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8575_Y ),
    .S(\$procmux$8578_CMP ),
    .Y(\$procmux$8577_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8578_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8578_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8583  (
    .A(32'd2065961075),
    .B(\$abstract_cmd[159:128]$277 ),
    .S(\$procmux$8584_CMP ),
    .Y(\$procmux$8583_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8586  (
    .A(\$procmux$8583_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8587_CMP ),
    .Y(\$procmux$8586_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8589  (
    .A(\$procmux$8586_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8590_CMP ),
    .Y(\$procmux$8589_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8591  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8589_Y ),
    .S(\$procmux$8592_CMP ),
    .Y(\$procmux$8591_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8594  (
    .A(\$procmux$8591_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8595_CMP ),
    .Y(\$procmux$8594_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8596  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8594_Y ),
    .S(\$procmux$8597_CMP ),
    .Y(\$procmux$8596_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8597_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8597_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8602  (
    .A(\$abstract_cmd[255:128]$278 ),
    .B({ 49'h0f64048e6710a, cmd_i[22:20], 76'h0237b3024737b241073 }),
    .S(\$procmux$8603_CMP ),
    .Y(\$procmux$8602_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8605  (
    .A(\$procmux$8602_Y ),
    .B(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8606_CMP ),
    .Y(\$procmux$8605_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8607  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8605_Y ),
    .S(\$procmux$8608_CMP ),
    .Y(\$procmux$8607_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8610  (
    .A(\$procmux$8607_Y ),
    .B(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8611_CMP ),
    .Y(\$procmux$8610_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8612  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8610_Y ),
    .S(\$procmux$8613_CMP ),
    .Y(\$procmux$8612_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8613_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8613_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8617  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$8618_CMP ),
    .Y(\$procmux$8617_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8619  (
    .A(1'hx),
    .B(\$procmux$8617_Y ),
    .S(\$procmux$8620_CMP ),
    .Y(\$procmux$8619_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8622  (
    .A(\$procmux$8619_Y ),
    .B(1'hx),
    .S(\$procmux$8623_CMP ),
    .Y(\$procmux$8622_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8624  (
    .A(1'hx),
    .B(\$procmux$8622_Y ),
    .S(\$procmux$8625_CMP ),
    .Y(\$procmux$8624_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8625_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8625_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8630  (
    .A(\$abstract_cmd[255:128]$279 ),
    .B(128'h00000013000000130000001300000013),
    .S(\$procmux$8631_CMP ),
    .Y(\$procmux$8630_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8632  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8630_Y ),
    .S(\$procmux$8633_CMP ),
    .Y(\$procmux$8632_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8635  (
    .A(\$procmux$8632_Y ),
    .B(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8636_CMP ),
    .Y(\$procmux$8635_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8637  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8635_Y ),
    .S(\$procmux$8638_CMP ),
    .Y(\$procmux$8637_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8638_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8638_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8642  (
    .A(32'd2067075187),
    .B(32'd1048691),
    .S(\$procmux$8643_CMP ),
    .Y(\$procmux$8642_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8644  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8642_Y ),
    .S(\$procmux$8645_CMP ),
    .Y(\$procmux$8644_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8647  (
    .A(\$procmux$8644_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8648_CMP ),
    .Y(\$procmux$8647_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8649  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8647_Y ),
    .S(\$procmux$8650_CMP ),
    .Y(\$procmux$8649_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8650_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8650_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8654  (
    .A(128'h00000013000000130000001300000013),
    .B(\$abstract_cmd[255:128]$281 ),
    .S(\$procmux$8655_CMP ),
    .Y(\$procmux$8654_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8657  (
    .A(\$procmux$8654_Y ),
    .B(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8658_CMP ),
    .Y(\$procmux$8657_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8659  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8657_Y ),
    .S(\$procmux$8660_CMP ),
    .Y(\$procmux$8659_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8660_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8660_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8665  (
    .A(\$unsupported_command$293 ),
    .B(\$unsupported_command$256 ),
    .S(\$procmux$8666_CMP ),
    .Y(\$procmux$8665_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8667  (
    .A(1'hx),
    .B(\$procmux$8665_Y ),
    .S(\$procmux$8668_CMP ),
    .Y(\$procmux$8667_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8668_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8668_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8673  (
    .A(\$abstract_cmd[255:128]$292 ),
    .B(\$abstract_cmd[255:128]$255 ),
    .S(\$procmux$8674_CMP ),
    .Y(\$procmux$8673_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8675  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8673_Y ),
    .S(\$procmux$8676_CMP ),
    .Y(\$procmux$8675_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8676_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8676_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8681  (
    .A(\$abstract_cmd[31:0]$291 ),
    .B(\$abstract_cmd[31:0]$254 ),
    .S(\$procmux$8682_CMP ),
    .Y(\$procmux$8681_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8683  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8681_Y ),
    .S(\$procmux$8684_CMP ),
    .Y(\$procmux$8683_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8684_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8684_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8688  (
    .A({ 32'h7b202473, cmd_i[11:0], 37'h0820e6700a, cmd_i[22:20], 12'h403 }),
    .B(96'h000000130000001300000013),
    .S(\$procmux$8689_CMP ),
    .Y(\$procmux$8688_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8691  (
    .A(\$procmux$8688_Y ),
    .B(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8692_CMP ),
    .Y(\$procmux$8691_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8694  (
    .A(\$procmux$8691_Y ),
    .B(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8695_CMP ),
    .Y(\$procmux$8694_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8696  (
    .A(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8694_Y ),
    .S(\$procmux$8697_CMP ),
    .Y(\$procmux$8696_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd96)
  ) \$procmux$8698  (
    .A(96'hxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8696_Y ),
    .S(\$procmux$8699_CMP ),
    .Y(\$procmux$8698_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8699_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8699_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:400.15-401.95|rtl/riscv-dbg/dm_mem.sv:399.13-405.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8704  (
    .A({ 17'h0700a, cmd_i[22:20], cmd_i[4:0], 7'h03 }),
    .B({ 17'h0700a, cmd_i[22:20], cmd_i[4:0], 7'h07 }),
    .S(\$procmux$8705_CMP ),
    .Y(\$procmux$8704_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8706  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8704_Y ),
    .S(\$procmux$8707_CMP ),
    .Y(\$procmux$8706_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8709  (
    .A(\$procmux$8706_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8710_CMP ),
    .Y(\$procmux$8709_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8712  (
    .A(\$procmux$8709_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8713_CMP ),
    .Y(\$procmux$8712_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8714  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8712_Y ),
    .S(\$procmux$8715_CMP ),
    .Y(\$procmux$8714_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8716  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8714_Y ),
    .S(\$procmux$8717_CMP ),
    .Y(\$procmux$8716_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8717_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8717_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8722  (
    .A(32'd2065961075),
    .B(\$abstract_cmd[159:128]$251 ),
    .S(\$procmux$8723_CMP ),
    .Y(\$procmux$8722_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8725  (
    .A(\$procmux$8722_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8726_CMP ),
    .Y(\$procmux$8725_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8728  (
    .A(\$procmux$8725_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$8729_CMP ),
    .Y(\$procmux$8728_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8730  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8728_Y ),
    .S(\$procmux$8731_CMP ),
    .Y(\$procmux$8730_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8732  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8730_Y ),
    .S(\$procmux$8733_CMP ),
    .Y(\$procmux$8732_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8733_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8733_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8738  (
    .A(\$abstract_cmd[255:128]$252 ),
    .B({ 81'h0f64048e6f66820e6700a, cmd_i[22:20], 44'h4037b241073 }),
    .S(\$procmux$8739_CMP ),
    .Y(\$procmux$8738_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8741  (
    .A(\$procmux$8738_Y ),
    .B(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(\$procmux$8742_CMP ),
    .Y(\$procmux$8741_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8743  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8741_Y ),
    .S(\$procmux$8744_CMP ),
    .Y(\$procmux$8743_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8745  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8743_Y ),
    .S(\$procmux$8746_CMP ),
    .Y(\$procmux$8745_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8746_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8746_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8750  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$8751_CMP ),
    .Y(\$procmux$8750_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8752  (
    .A(1'hx),
    .B(\$procmux$8750_Y ),
    .S(\$procmux$8753_CMP ),
    .Y(\$procmux$8752_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8754  (
    .A(1'hx),
    .B(\$procmux$8752_Y ),
    .S(\$procmux$8755_CMP ),
    .Y(\$procmux$8754_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8755_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8755_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8760  (
    .A(\$abstract_cmd[255:128]$253 ),
    .B(128'h00000013000000130000001300000013),
    .S(\$procmux$8761_CMP ),
    .Y(\$procmux$8760_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8762  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8760_Y ),
    .S(\$procmux$8763_CMP ),
    .Y(\$procmux$8762_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8764  (
    .A(128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .B(\$procmux$8762_Y ),
    .S(\$procmux$8765_CMP ),
    .Y(\$procmux$8764_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8765_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8765_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8769  (
    .A(32'd2067075187),
    .B(32'd1048691),
    .S(\$procmux$8770_CMP ),
    .Y(\$procmux$8769_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8771  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8769_Y ),
    .S(\$procmux$8772_CMP ),
    .Y(\$procmux$8771_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8773  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$8771_Y ),
    .S(\$procmux$8774_CMP ),
    .Y(\$procmux$8773_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8774_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8774_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8778  (
    .A(32'd1048691),
    .B(\$abstract_cmd[319:288]$301 ),
    .S(\$procmux$8779_CMP ),
    .Y(\$procmux$8778_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8779_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8779_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd128)
  ) \$procmux$8783  (
    .A(128'h00000013000000130000001300000013),
    .B(\$abstract_cmd[255:128]$295 ),
    .S(\$procmux$8784_CMP ),
    .Y(\$procmux$8783_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$8784_CMP0  (
    .A(cmd_i[31:24]),
    .Y(\$procmux$8784_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8785  (
    .A(\$resuming_d_aligned$226 ),
    .B(2'h0),
    .S(\$procmux$8786_CMP ),
    .Y(\$procmux$8785_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8789  (
    .A(\$halted_d_aligned$224 ),
    .B(2'h0),
    .S(\$procmux$8790_CMP ),
    .Y(\$procmux$8789_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.94|rtl/riscv-dbg/dm_mem.sv:332.13-335.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8794  (
    .A(64'h0000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$1290 ),
    .S(\$procmux$8795_CMP ),
    .Y(\$procmux$8794_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8796  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8794_Y ),
    .S(\$procmux$8797_CMP ),
    .Y(\$procmux$8796_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8799  (
    .A(\$procmux$8796_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8800_CMP ),
    .Y(\$procmux$8799_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8801  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8799_Y ),
    .S(\$procmux$8802_CMP ),
    .Y(\$procmux$8801_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:303.17-303.87|rtl/riscv-dbg/dm_mem.sv:301.15-307.18" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8810  (
    .A(64'h000000000380006f),
    .B(64'h000000000600006f),
    .S(\$procmux$8811_CMP ),
    .Y(\$procmux$8810_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8812  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8810_Y ),
    .S(\$procmux$8813_CMP ),
    .Y(\$procmux$8812_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:291.24-309.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8815  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8812_Y ),
    .S(\$procmux$8816_CMP ),
    .Y(\$procmux$8815_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8818  (
    .A(\$procmux$8815_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8819_CMP ),
    .Y(\$procmux$8818_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8820  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8818_Y ),
    .S(\$procmux$8821_CMP ),
    .Y(\$procmux$8820_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8829  (
    .A(\$rdata_d$145 ),
    .B(\$rdata_d$154 ),
    .S(\$procmux$8830_CMP ),
    .Y(\$procmux$8829_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:291.24-309.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8832  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8829_Y ),
    .S(\$procmux$8833_CMP ),
    .Y(\$procmux$8832_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8835  (
    .A(\$procmux$8832_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8836_CMP ),
    .Y(\$procmux$8835_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8837  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8835_Y ),
    .S(\$procmux$8838_CMP ),
    .Y(\$procmux$8837_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:294.15-294.93|rtl/riscv-dbg/dm_mem.sv:293.13-295.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8845  (
    .A(rdata_q),
    .B(64'h000000005080006f),
    .S(\$procmux$8846_CMP ),
    .Y(\$procmux$8845_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:291.24-309.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8847  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8845_Y ),
    .S(\$procmux$8848_CMP ),
    .Y(\$procmux$8847_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8850  (
    .A(\$procmux$8847_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8851_CMP ),
    .Y(\$procmux$8850_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8852  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8850_Y ),
    .S(\$procmux$8853_CMP ),
    .Y(\$procmux$8852_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8857  (
    .A(64'h0000000000000000),
    .B(\$rdata$209 ),
    .S(\$procmux$8858_CMP ),
    .Y(\$procmux$8857_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8860  (
    .A(\$procmux$8857_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8861_CMP ),
    .Y(\$procmux$8860_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8862  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8860_Y ),
    .S(\$procmux$8863_CMP ),
    .Y(\$procmux$8862_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$procmux$8867  (
    .A(rdata_q),
    .B({ \$rdata_d$155 , \$auto$rtlil.cc:3092:Mux$1265 , \$auto$rtlil.cc:3092:Mux$1268 , \$auto$rtlil.cc:3092:Mux$1274 , \$auto$rtlil.cc:3092:Mux$1280 , \$rdata$209  }),
    .S({ \$procmux$8874_CMP , \$procmux$8871_CMP , \$procmux$8870_CMP , \$procmux$8869_CMP , \$procmux$8868_CMP  }),
    .Y(\$procmux$8867_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8876  (
    .A(\$procmux$8867_Y ),
    .B(64'hxxxxxxxxxxxxxxxx),
    .S(\$procmux$8877_CMP ),
    .Y(\$procmux$8876_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8878  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$8876_Y ),
    .S(\$procmux$8879_CMP ),
    .Y(\$procmux$8878_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8883  (
    .A(8'hxx),
    .B(wdata_i[31:24]),
    .S(\$procmux$8884_CMP ),
    .Y(\$procmux$8883_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8888  (
    .A(8'hxx),
    .B(\$procmux$8883_Y ),
    .S(\$procmux$8889_CMP ),
    .Y(\$procmux$8888_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8891  (
    .A(8'hxx),
    .B(\$procmux$8888_Y ),
    .S(\$procmux$8892_CMP ),
    .Y(\$procmux$8891_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8893  (
    .A(8'hxx),
    .B(\$procmux$8891_Y ),
    .S(\$procmux$8894_CMP ),
    .Y(\$procmux$8893_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8895  (
    .A(8'hxx),
    .B(\$procmux$8893_Y ),
    .S(\$procmux$8896_CMP ),
    .Y(\$procmux$8895_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8900  (
    .A(data_i[63:56]),
    .B(\$data_bits[63:56]$131 ),
    .S(\$procmux$8901_CMP ),
    .Y(\$procmux$8900_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8905  (
    .A(8'hxx),
    .B(\$procmux$8900_Y ),
    .S(\$procmux$8906_CMP ),
    .Y(\$procmux$8905_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8908  (
    .A(8'hxx),
    .B(\$procmux$8905_Y ),
    .S(\$procmux$8909_CMP ),
    .Y(\$procmux$8908_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8910  (
    .A(8'hxx),
    .B(\$procmux$8908_Y ),
    .S(\$procmux$8911_CMP ),
    .Y(\$procmux$8910_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8912  (
    .A(8'hxx),
    .B(\$procmux$8910_Y ),
    .S(\$procmux$8913_CMP ),
    .Y(\$procmux$8912_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8917  (
    .A(8'hxx),
    .B(wdata_i[23:16]),
    .S(\$procmux$8918_CMP ),
    .Y(\$procmux$8917_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8921  (
    .A(8'hxx),
    .B(\$procmux$8917_Y ),
    .S(\$procmux$8922_CMP ),
    .Y(\$procmux$8921_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8924  (
    .A(8'hxx),
    .B(\$procmux$8921_Y ),
    .S(\$procmux$8925_CMP ),
    .Y(\$procmux$8924_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8926  (
    .A(8'hxx),
    .B(\$procmux$8924_Y ),
    .S(\$procmux$8927_CMP ),
    .Y(\$procmux$8926_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8928  (
    .A(8'hxx),
    .B(\$procmux$8926_Y ),
    .S(\$procmux$8929_CMP ),
    .Y(\$procmux$8928_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8933  (
    .A(data_i[55:48]),
    .B(\$data_bits[55:48]$129 ),
    .S(\$procmux$8934_CMP ),
    .Y(\$procmux$8933_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8937  (
    .A(8'hxx),
    .B(\$procmux$8933_Y ),
    .S(\$procmux$8938_CMP ),
    .Y(\$procmux$8937_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8940  (
    .A(8'hxx),
    .B(\$procmux$8937_Y ),
    .S(\$procmux$8941_CMP ),
    .Y(\$procmux$8940_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8942  (
    .A(8'hxx),
    .B(\$procmux$8940_Y ),
    .S(\$procmux$8943_CMP ),
    .Y(\$procmux$8942_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8944  (
    .A(8'hxx),
    .B(\$procmux$8942_Y ),
    .S(\$procmux$8945_CMP ),
    .Y(\$procmux$8944_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8949  (
    .A(8'hxx),
    .B(wdata_i[15:8]),
    .S(\$procmux$8950_CMP ),
    .Y(\$procmux$8949_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8952  (
    .A(8'hxx),
    .B(\$procmux$8949_Y ),
    .S(\$procmux$8953_CMP ),
    .Y(\$procmux$8952_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8955  (
    .A(8'hxx),
    .B(\$procmux$8952_Y ),
    .S(\$procmux$8956_CMP ),
    .Y(\$procmux$8955_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8957  (
    .A(8'hxx),
    .B(\$procmux$8955_Y ),
    .S(\$procmux$8958_CMP ),
    .Y(\$procmux$8957_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8959  (
    .A(8'hxx),
    .B(\$procmux$8957_Y ),
    .S(\$procmux$8960_CMP ),
    .Y(\$procmux$8959_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8964  (
    .A(data_i[47:40]),
    .B(\$data_bits[47:40]$127 ),
    .S(\$procmux$8965_CMP ),
    .Y(\$procmux$8964_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8967  (
    .A(8'hxx),
    .B(\$procmux$8964_Y ),
    .S(\$procmux$8968_CMP ),
    .Y(\$procmux$8967_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8970  (
    .A(8'hxx),
    .B(\$procmux$8967_Y ),
    .S(\$procmux$8971_CMP ),
    .Y(\$procmux$8970_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8972  (
    .A(8'hxx),
    .B(\$procmux$8970_Y ),
    .S(\$procmux$8973_CMP ),
    .Y(\$procmux$8972_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8974  (
    .A(8'hxx),
    .B(\$procmux$8972_Y ),
    .S(\$procmux$8975_CMP ),
    .Y(\$procmux$8974_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8979  (
    .A(8'hxx),
    .B(wdata_i[7:0]),
    .S(\$procmux$8980_CMP ),
    .Y(\$procmux$8979_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8981  (
    .A(8'hxx),
    .B(\$procmux$8979_Y ),
    .S(\$procmux$8982_CMP ),
    .Y(\$procmux$8981_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8984  (
    .A(8'hxx),
    .B(\$procmux$8981_Y ),
    .S(\$procmux$8985_CMP ),
    .Y(\$procmux$8984_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8986  (
    .A(8'hxx),
    .B(\$procmux$8984_Y ),
    .S(\$procmux$8987_CMP ),
    .Y(\$procmux$8986_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8988  (
    .A(8'hxx),
    .B(\$procmux$8986_Y ),
    .S(\$procmux$8989_CMP ),
    .Y(\$procmux$8988_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8993  (
    .A(data_i[39:32]),
    .B(\$data_bits[39:32]$125 ),
    .S(\$procmux$8994_CMP ),
    .Y(\$procmux$8993_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8995  (
    .A(8'hxx),
    .B(\$procmux$8993_Y ),
    .S(\$procmux$8996_CMP ),
    .Y(\$procmux$8995_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8998  (
    .A(8'hxx),
    .B(\$procmux$8995_Y ),
    .S(\$procmux$8999_CMP ),
    .Y(\$procmux$8998_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9000  (
    .A(8'hxx),
    .B(\$procmux$8998_Y ),
    .S(\$procmux$9001_CMP ),
    .Y(\$procmux$9000_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9002  (
    .A(8'hxx),
    .B(\$procmux$9000_Y ),
    .S(\$procmux$9003_CMP ),
    .Y(\$procmux$9002_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9011  (
    .A(data_i[63:32]),
    .B({ \$data_bits[63:56]$132 , \$data_bits[55:48]$130 , \$data_bits[47:40]$128 , \$data_bits[39:32]$126  }),
    .S(\$procmux$9012_CMP ),
    .Y(\$procmux$9011_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9014  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9011_Y ),
    .S(\$procmux$9015_CMP ),
    .Y(\$procmux$9014_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9016  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9014_Y ),
    .S(\$procmux$9017_CMP ),
    .Y(\$procmux$9016_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9018  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9016_Y ),
    .S(\$procmux$9019_CMP ),
    .Y(\$procmux$9018_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9023  (
    .A(8'hxx),
    .B(wdata_i[31:24]),
    .S(\$procmux$9024_CMP ),
    .Y(\$procmux$9023_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9028  (
    .A(8'hxx),
    .B(\$procmux$9023_Y ),
    .S(\$procmux$9029_CMP ),
    .Y(\$procmux$9028_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9030  (
    .A(8'hxx),
    .B(\$procmux$9028_Y ),
    .S(\$procmux$9031_CMP ),
    .Y(\$procmux$9030_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9032  (
    .A(8'hxx),
    .B(\$procmux$9030_Y ),
    .S(\$procmux$9033_CMP ),
    .Y(\$procmux$9032_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9034  (
    .A(8'hxx),
    .B(\$procmux$9032_Y ),
    .S(\$procmux$9035_CMP ),
    .Y(\$procmux$9034_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9039  (
    .A(data_i[31:24]),
    .B(\$data_bits[31:24]$118 ),
    .S(\$procmux$9040_CMP ),
    .Y(\$procmux$9039_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9044  (
    .A(8'hxx),
    .B(\$procmux$9039_Y ),
    .S(\$procmux$9045_CMP ),
    .Y(\$procmux$9044_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9046  (
    .A(8'hxx),
    .B(\$procmux$9044_Y ),
    .S(\$procmux$9047_CMP ),
    .Y(\$procmux$9046_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9048  (
    .A(8'hxx),
    .B(\$procmux$9046_Y ),
    .S(\$procmux$9049_CMP ),
    .Y(\$procmux$9048_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9050  (
    .A(8'hxx),
    .B(\$procmux$9048_Y ),
    .S(\$procmux$9051_CMP ),
    .Y(\$procmux$9050_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9055  (
    .A(8'hxx),
    .B(wdata_i[23:16]),
    .S(\$procmux$9056_CMP ),
    .Y(\$procmux$9055_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9059  (
    .A(8'hxx),
    .B(\$procmux$9055_Y ),
    .S(\$procmux$9060_CMP ),
    .Y(\$procmux$9059_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9061  (
    .A(8'hxx),
    .B(\$procmux$9059_Y ),
    .S(\$procmux$9062_CMP ),
    .Y(\$procmux$9061_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9063  (
    .A(8'hxx),
    .B(\$procmux$9061_Y ),
    .S(\$procmux$9064_CMP ),
    .Y(\$procmux$9063_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9065  (
    .A(8'hxx),
    .B(\$procmux$9063_Y ),
    .S(\$procmux$9066_CMP ),
    .Y(\$procmux$9065_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9070  (
    .A(data_i[23:16]),
    .B(\$data_bits[23:16]$116 ),
    .S(\$procmux$9071_CMP ),
    .Y(\$procmux$9070_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9074  (
    .A(8'hxx),
    .B(\$procmux$9070_Y ),
    .S(\$procmux$9075_CMP ),
    .Y(\$procmux$9074_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9076  (
    .A(8'hxx),
    .B(\$procmux$9074_Y ),
    .S(\$procmux$9077_CMP ),
    .Y(\$procmux$9076_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9078  (
    .A(8'hxx),
    .B(\$procmux$9076_Y ),
    .S(\$procmux$9079_CMP ),
    .Y(\$procmux$9078_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9080  (
    .A(8'hxx),
    .B(\$procmux$9078_Y ),
    .S(\$procmux$9081_CMP ),
    .Y(\$procmux$9080_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9085  (
    .A(8'hxx),
    .B(wdata_i[15:8]),
    .S(\$procmux$9086_CMP ),
    .Y(\$procmux$9085_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9088  (
    .A(8'hxx),
    .B(\$procmux$9085_Y ),
    .S(\$procmux$9089_CMP ),
    .Y(\$procmux$9088_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9090  (
    .A(8'hxx),
    .B(\$procmux$9088_Y ),
    .S(\$procmux$9091_CMP ),
    .Y(\$procmux$9090_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9092  (
    .A(8'hxx),
    .B(\$procmux$9090_Y ),
    .S(\$procmux$9093_CMP ),
    .Y(\$procmux$9092_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9094  (
    .A(8'hxx),
    .B(\$procmux$9092_Y ),
    .S(\$procmux$9095_CMP ),
    .Y(\$procmux$9094_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9099  (
    .A(data_i[15:8]),
    .B(\$data_bits[15:8]$114 ),
    .S(\$procmux$9100_CMP ),
    .Y(\$procmux$9099_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9102  (
    .A(8'hxx),
    .B(\$procmux$9099_Y ),
    .S(\$procmux$9103_CMP ),
    .Y(\$procmux$9102_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9104  (
    .A(8'hxx),
    .B(\$procmux$9102_Y ),
    .S(\$procmux$9105_CMP ),
    .Y(\$procmux$9104_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9106  (
    .A(8'hxx),
    .B(\$procmux$9104_Y ),
    .S(\$procmux$9107_CMP ),
    .Y(\$procmux$9106_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9108  (
    .A(8'hxx),
    .B(\$procmux$9106_Y ),
    .S(\$procmux$9109_CMP ),
    .Y(\$procmux$9108_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9113  (
    .A(8'hxx),
    .B(wdata_i[7:0]),
    .S(\$procmux$9114_CMP ),
    .Y(\$procmux$9113_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9115  (
    .A(8'hxx),
    .B(\$procmux$9113_Y ),
    .S(\$procmux$9116_CMP ),
    .Y(\$procmux$9115_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9117  (
    .A(8'hxx),
    .B(\$procmux$9115_Y ),
    .S(\$procmux$9118_CMP ),
    .Y(\$procmux$9117_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9119  (
    .A(8'hxx),
    .B(\$procmux$9117_Y ),
    .S(\$procmux$9120_CMP ),
    .Y(\$procmux$9119_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9121  (
    .A(8'hxx),
    .B(\$procmux$9119_Y ),
    .S(\$procmux$9122_CMP ),
    .Y(\$procmux$9121_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9126  (
    .A(data_i[7:0]),
    .B(\$data_bits[7:0]$112 ),
    .S(\$procmux$9127_CMP ),
    .Y(\$procmux$9126_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9128  (
    .A(8'hxx),
    .B(\$procmux$9126_Y ),
    .S(\$procmux$9129_CMP ),
    .Y(\$procmux$9128_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9130  (
    .A(8'hxx),
    .B(\$procmux$9128_Y ),
    .S(\$procmux$9131_CMP ),
    .Y(\$procmux$9130_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9132  (
    .A(8'hxx),
    .B(\$procmux$9130_Y ),
    .S(\$procmux$9133_CMP ),
    .Y(\$procmux$9132_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9134  (
    .A(8'hxx),
    .B(\$procmux$9132_Y ),
    .S(\$procmux$9135_CMP ),
    .Y(\$procmux$9134_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9143  (
    .A(data_i[31:0]),
    .B({ \$data_bits[31:24]$119 , \$data_bits[23:16]$117 , \$data_bits[15:8]$115 , \$data_bits[7:0]$113  }),
    .S(\$procmux$9144_CMP ),
    .Y(\$procmux$9143_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9145  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9143_Y ),
    .S(\$procmux$9146_CMP ),
    .Y(\$procmux$9145_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9147  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9145_Y ),
    .S(\$procmux$9148_CMP ),
    .Y(\$procmux$9147_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9149  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$9147_Y ),
    .S(\$procmux$9150_CMP ),
    .Y(\$procmux$9149_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9156  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9157_CMP ),
    .Y(\$procmux$9156_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9158  (
    .A(1'hx),
    .B(\$procmux$9156_Y ),
    .S(\$procmux$9159_CMP ),
    .Y(\$procmux$9158_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9160  (
    .A(1'hx),
    .B(\$procmux$9158_Y ),
    .S(\$procmux$9161_CMP ),
    .Y(\$procmux$9160_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9167  (
    .A(data_i),
    .B({ \$data_bits[63:32]$133 , \$data_bits[31:0]$120  }),
    .S(\$procmux$9168_CMP ),
    .Y(\$procmux$9167_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9169  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$9167_Y ),
    .S(\$procmux$9170_CMP ),
    .Y(\$procmux$9169_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9171  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$9169_Y ),
    .S(\$procmux$9172_CMP ),
    .Y(\$procmux$9171_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9178  (
    .A(\$resuming_d_aligned$72 ),
    .B(\$auto$rtlil.cc:3093:Bwmux$1251 ),
    .S(\$procmux$9179_CMP ),
    .Y(\$procmux$9178_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9180  (
    .A(2'hx),
    .B(\$procmux$9178_Y ),
    .S(\$procmux$9181_CMP ),
    .Y(\$procmux$9180_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9182  (
    .A(2'hx),
    .B(\$procmux$9180_Y ),
    .S(\$procmux$9183_CMP ),
    .Y(\$procmux$9182_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:250.23-253.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9191  (
    .A(2'h0),
    .B(\$auto$rtlil.cc:3093:Bwmux$1228 ),
    .S(\$procmux$9192_CMP ),
    .Y(\$procmux$9191_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9193  (
    .A(2'hx),
    .B(\$procmux$9191_Y ),
    .S(\$procmux$9194_CMP ),
    .Y(\$procmux$9193_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9195  (
    .A(2'hx),
    .B(\$procmux$9193_Y ),
    .S(\$procmux$9196_CMP ),
    .Y(\$procmux$9195_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$9202  (
    .A({ 1'h0, halted_q }),
    .B({ \$auto$rtlil.cc:3093:Bwmux$1235 , \$auto$rtlil.cc:3093:Bwmux$1244  }),
    .S({ \$procmux$9204_CMP , \$procmux$9203_CMP  }),
    .Y(\$procmux$9202_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9205  (
    .A(2'hx),
    .B(\$procmux$9202_Y ),
    .S(\$procmux$9206_CMP ),
    .Y(\$procmux$9205_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9207  (
    .A(2'hx),
    .B(\$procmux$9205_Y ),
    .S(\$procmux$9208_CMP ),
    .Y(\$procmux$9207_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:264.26-264.43|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9213  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9214_CMP ),
    .Y(\$procmux$9213_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9215  (
    .A(1'hx),
    .B(\$procmux$9213_Y ),
    .S(\$procmux$9216_CMP ),
    .Y(\$procmux$9215_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9217  (
    .A(1'hx),
    .B(\$procmux$9215_Y ),
    .S(\$procmux$9218_CMP ),
    .Y(\$procmux$9217_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:255.13-255.26|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9225  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9226_CMP ),
    .Y(\$procmux$9225_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9227  (
    .A(1'hx),
    .B(\$procmux$9225_Y ),
    .S(\$procmux$9228_CMP ),
    .Y(\$procmux$9227_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9229  (
    .A(1'hx),
    .B(\$procmux$9227_Y ),
    .S(\$procmux$9230_CMP ),
    .Y(\$procmux$9229_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9234  (
    .A(1'h0),
    .B(\$data_valid_o$140 ),
    .S(\$procmux$9235_CMP ),
    .Y(\$procmux$9234_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9236  (
    .A(1'hx),
    .B(\$procmux$9234_Y ),
    .S(\$procmux$9237_CMP ),
    .Y(\$procmux$9236_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9241  (
    .A(\$rdata$211 ),
    .B(64'h0000000000000000),
    .S(\$procmux$9242_CMP ),
    .Y(\$procmux$9241_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9243  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$9241_Y ),
    .S(\$procmux$9244_CMP ),
    .Y(\$procmux$9243_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9248  (
    .A(data_i),
    .B(\$data_bits$139 ),
    .S(\$procmux$9249_CMP ),
    .Y(\$procmux$9248_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9250  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$9248_Y ),
    .S(\$procmux$9251_CMP ),
    .Y(\$procmux$9250_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9255  (
    .A(\$resuming_d_aligned$72 ),
    .B(\$resuming_d_aligned$138 ),
    .S(\$procmux$9256_CMP ),
    .Y(\$procmux$9255_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9257  (
    .A(2'hx),
    .B(\$procmux$9255_Y ),
    .S(\$procmux$9258_CMP ),
    .Y(\$procmux$9257_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9262  (
    .A(2'h0),
    .B(\$halted_aligned$137 ),
    .S(\$procmux$9263_CMP ),
    .Y(\$procmux$9262_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9264  (
    .A(2'hx),
    .B(\$procmux$9262_Y ),
    .S(\$procmux$9265_CMP ),
    .Y(\$procmux$9264_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9269  (
    .A({ 1'h0, halted_q }),
    .B(\$halted_d_aligned$136 ),
    .S(\$procmux$9270_CMP ),
    .Y(\$procmux$9269_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9271  (
    .A(2'hx),
    .B(\$procmux$9269_Y ),
    .S(\$procmux$9272_CMP ),
    .Y(\$procmux$9271_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9276  (
    .A(\$rdata_d$210 ),
    .B(rdata_q),
    .S(\$procmux$9277_CMP ),
    .Y(\$procmux$9276_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9278  (
    .A(64'hxxxxxxxxxxxxxxxx),
    .B(\$procmux$9276_Y ),
    .S(\$procmux$9279_CMP ),
    .Y(\$procmux$9278_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9283  (
    .A(1'h0),
    .B(\$exception$135 ),
    .S(\$procmux$9284_CMP ),
    .Y(\$procmux$9283_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9285  (
    .A(1'hx),
    .B(\$procmux$9283_Y ),
    .S(\$procmux$9286_CMP ),
    .Y(\$procmux$9285_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9290  (
    .A(1'h0),
    .B(\$going$134 ),
    .S(\$procmux$9291_CMP ),
    .Y(\$procmux$9290_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9292  (
    .A(1'hx),
    .B(\$procmux$9290_Y ),
    .S(\$procmux$9293_CMP ),
    .Y(\$procmux$9292_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9296  (
    .A(1'h0),
    .B(\$data_valid_o$220 ),
    .S(\$procmux$9297_CMP ),
    .Y(\$procmux$9296_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9300  (
    .A(64'h0000000000000000),
    .B(\$rdata$219 ),
    .S(\$procmux$9301_CMP ),
    .Y(\$procmux$9300_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9304  (
    .A(data_i),
    .B(\$data_bits$218 ),
    .S(\$procmux$9305_CMP ),
    .Y(\$procmux$9304_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9308  (
    .A(\$resuming_d_aligned$72 ),
    .B(\$resuming_d_aligned$217 ),
    .S(\$procmux$9309_CMP ),
    .Y(\$procmux$9308_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9312  (
    .A(2'h0),
    .B(\$halted_aligned$216 ),
    .S(\$procmux$9313_CMP ),
    .Y(\$procmux$9312_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9316  (
    .A({ 1'h0, halted_q }),
    .B(\$halted_d_aligned$215 ),
    .S(\$procmux$9317_CMP ),
    .Y(\$procmux$9316_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9320  (
    .A(rdata_q),
    .B(\$rdata_d$214 ),
    .S(\$procmux$9321_CMP ),
    .Y(\$procmux$9320_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9324  (
    .A(1'h0),
    .B(\$exception$213 ),
    .S(\$procmux$9325_CMP ),
    .Y(\$procmux$9324_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9328  (
    .A(1'h0),
    .B(\$going$212 ),
    .S(\$procmux$9329_CMP ),
    .Y(\$procmux$9328_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:243.7-243.42|rtl/riscv-dbg/dm_mem.sv:242.5-244.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9331  (
    .A({ 1'h0, resuming_q }),
    .B(\$auto$rtlil.cc:3093:Bwmux$1220 ),
    .S(\$procmux$9332_CMP ),
    .Y(\$procmux$9331_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9333  (
    .A(\$state_d$49 ),
    .B(2'h0),
    .S(\$procmux$9334_CMP ),
    .Y(\$procmux$9333_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9338  (
    .A(\$go$48 ),
    .B(1'h0),
    .S(\$procmux$9339_CMP ),
    .Y(\$procmux$9338_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9343  (
    .A(\$resume$47 ),
    .B(1'h0),
    .S(\$procmux$9344_CMP ),
    .Y(\$procmux$9343_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9348  (
    .A(\$cmderror_o$56 ),
    .B(3'h3),
    .S(\$procmux$9349_CMP ),
    .Y(\$procmux$9348_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9352  (
    .A(\$cmderror_valid_o$55 ),
    .B(1'h1),
    .S(\$procmux$9353_CMP ),
    .Y(\$procmux$9352_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9356  (
    .A(\$cmderror_o$51 ),
    .B(3'h2),
    .S(\$procmux$9357_CMP ),
    .Y(\$procmux$9356_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9359  (
    .A(\$cmderror_valid_o$50 ),
    .B(1'h1),
    .S(\$procmux$9360_CMP ),
    .Y(\$procmux$9359_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:187.11-187.26|rtl/riscv-dbg/dm_mem.sv:186.9-188.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9362  (
    .A(state_q),
    .B(2'h0),
    .S(\$procmux$9363_CMP ),
    .Y(\$procmux$9362_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9364  (
    .A(2'hx),
    .B(\$procmux$9362_Y ),
    .S(\$procmux$9365_CMP ),
    .Y(\$procmux$9364_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9365_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$9365_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:178.11-178.26|rtl/riscv-dbg/dm_mem.sv:177.9-179.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9367  (
    .A(state_q),
    .B(2'h0),
    .S(\$procmux$9368_CMP ),
    .Y(\$procmux$9367_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9369  (
    .A(2'hx),
    .B(\$procmux$9367_Y ),
    .S(\$procmux$9370_CMP ),
    .Y(\$procmux$9369_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9370_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$9370_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:170.13-170.36|rtl/riscv-dbg/dm_mem.sv:169.9-171.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9373  (
    .A(state_q),
    .B(2'h3),
    .S(\$procmux$9374_CMP ),
    .Y(\$procmux$9373_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9375  (
    .A(2'hx),
    .B(\$procmux$9373_Y ),
    .S(\$procmux$9376_CMP ),
    .Y(\$procmux$9375_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9376_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$9376_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$9378  (
    .A(1'hx),
    .B(4'h7),
    .S({ \$procmux$9386_CMP , \$procmux$9383_CMP , \$procmux$9381_CMP , \$procmux$9379_CMP  }),
    .Y(\$procmux$9378_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9379_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$9379_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9381_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$9381_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9383_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$9383_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9386_CMP0  (
    .A(state_q),
    .Y(\$procmux$9386_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd2)
  ) \$procmux$9388  (
    .A(2'hx),
    .B({ \$state_d$37 , \$state_d$38 , \$state_d$42 , \$state_d$46  }),
    .S({ \$procmux$9396_CMP , \$procmux$9393_CMP , \$procmux$9391_CMP , \$procmux$9389_CMP  }),
    .Y(\$procmux$9388_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9389_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$9389_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9391_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$9391_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9393_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$9393_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9396_CMP0  (
    .A(state_q),
    .Y(\$procmux$9396_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:160.11-160.28|rtl/riscv-dbg/dm_mem.sv:158.9-161.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9400  (
    .A(\$state_d$12 ),
    .B(2'h2),
    .S(\$procmux$9401_CMP ),
    .Y(\$procmux$9400_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9403  (
    .A(2'hx),
    .B(\$procmux$9400_Y ),
    .S(\$procmux$9404_CMP ),
    .Y(\$procmux$9403_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9404_CMP0  (
    .A(state_q),
    .Y(\$procmux$9404_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:151.35-155.12|rtl/riscv-dbg/dm_mem.sv:151.18-155.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9408  (
    .A(3'h0),
    .B(3'h4),
    .S(\$procmux$9409_CMP ),
    .Y(\$procmux$9408_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9411  (
    .A(\$procmux$9408_Y ),
    .B(3'hx),
    .S(\$procmux$9412_CMP ),
    .Y(\$procmux$9411_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9413  (
    .A(3'hx),
    .B(\$procmux$9411_Y ),
    .S(\$procmux$9414_CMP ),
    .Y(\$procmux$9413_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9414_CMP0  (
    .A(state_q),
    .Y(\$procmux$9414_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:151.35-155.12|rtl/riscv-dbg/dm_mem.sv:151.18-155.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9418  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9419_CMP ),
    .Y(\$procmux$9418_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9421  (
    .A(\$procmux$9418_Y ),
    .B(1'hx),
    .S(\$procmux$9422_CMP ),
    .Y(\$procmux$9421_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9423  (
    .A(1'hx),
    .B(\$procmux$9421_Y ),
    .S(\$procmux$9424_CMP ),
    .Y(\$procmux$9423_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9424_CMP0  (
    .A(state_q),
    .Y(\$procmux$9424_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9430  (
    .A(\$cmderror_o$11 ),
    .B(3'h0),
    .S(\$procmux$9431_CMP ),
    .Y(\$procmux$9430_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9432  (
    .A(3'hx),
    .B(\$procmux$9430_Y ),
    .S(\$procmux$9433_CMP ),
    .Y(\$procmux$9432_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9433_CMP0  (
    .A(state_q),
    .Y(\$procmux$9433_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9439  (
    .A(\$cmderror_valid_o$10 ),
    .B(1'h0),
    .S(\$procmux$9440_CMP ),
    .Y(\$procmux$9439_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9441  (
    .A(1'hx),
    .B(\$procmux$9439_Y ),
    .S(\$procmux$9442_CMP ),
    .Y(\$procmux$9441_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9442_CMP0  (
    .A(state_q),
    .Y(\$procmux$9442_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9447  (
    .A(state_q),
    .B(2'h1),
    .S(\$procmux$9448_CMP ),
    .Y(\$procmux$9447_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9449  (
    .A(2'hx),
    .B(\$procmux$9447_Y ),
    .S(\$procmux$9450_CMP ),
    .Y(\$procmux$9449_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9450_CMP0  (
    .A(state_q),
    .Y(\$procmux$9450_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9456  (
    .A(3'h0),
    .B(\$cmderror_o$14 ),
    .S(\$procmux$9457_CMP ),
    .Y(\$procmux$9456_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9457_CMP0  (
    .A(state_q),
    .Y(\$procmux$9457_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9463  (
    .A(1'h0),
    .B(\$cmderror_valid_o$13 ),
    .S(\$procmux$9464_CMP ),
    .Y(\$procmux$9463_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9464_CMP0  (
    .A(state_q),
    .Y(\$procmux$9464_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9469  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9470_CMP ),
    .Y(\$procmux$9469_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9470_CMP0  (
    .A(state_q),
    .B(2'h1),
    .Y(\$procmux$9470_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9473  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9474_CMP ),
    .Y(\$procmux$9473_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9474_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$9474_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:498.15" */
  \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom  \gen_rom_snd_scratch.i_debug_rom  (
    .addr_i(rom_addr),
    .clk_i(clk_i),
    .rdata_o(rom_rdata),
    .req_i(req_i),
    .rst_ni(rst_ni)
  );
  assign hartsel = hartsel_i[0];
  assign wdata_hartsel = wdata_i[0];
  assign resumereq_aligned = { 1'h0, resumereq_i };
  assign haltreq_aligned = { 1'h0, haltreq_i };
  assign resumereq_wdata_aligned = { 1'h0, resumereq_i };
  assign halted_q_aligned = { 1'h0, halted_q };
  assign halted_d = halted_d_aligned[0];
  assign resuming_q_aligned = { 1'h0, resuming_q };
  assign resuming_d = resuming_d_aligned[0];
  assign ac_ar = cmd_i[23:0];
  assign debug_req_o = haltreq_i;
  assign halted_o = halted_q;
  assign resuming_o = resuming_q;
  assign progbuf = progbuf_i;
  assign resume = \$resume$59 ;
  assign go = \$go$60 ;
  assign state_d = \$state_d$61 ;
  assign cmderror_valid_o = \$cmderror_valid_o$57 ;
  assign cmderror_o = \$cmderror_o$58 ;
  assign cmdbusy_o = \$cmdbusy_o$52 ;
  assign word_mux = \$auto$rtlil.cc:3092:Mux$1212 ;
  assign rdata_o = \$auto$rtlil.cc:3092:Mux$1213 ;
  assign going = \$going$221 ;
  assign exception = \$exception$222 ;
  assign rdata_d = \$rdata_d$223 ;
  assign halted_d_aligned = \$halted_d_aligned$230 ;
  assign halted_aligned = \$halted_aligned$225 ;
  assign resuming_d_aligned = \$resuming_d_aligned$231 ;
  assign data_bits = \$data_bits$227 ;
  assign rdata = \$rdata$228 ;
  assign data_o = \$data_bits$227 ;
  assign data_valid_o = \$data_valid_o$229 ;
  assign abstract_cmd = { 192'h000000000000000000000000000000000000000000000000, \$abstract_cmd[319:288]$304 , 32'h7b302573, \$abstract_cmd[255:128]$303 , 96'h00c5151300c5551300000517, \$abstract_cmd[31:0]$302  };
  assign unsupported_command = \$unsupported_command$305 ;
  assign rom_addr = { 32'h00000000, addr_i };
  assign fwd_rom_d = \$307 ;
  assign \$unsupported_command$305  = \$procmux$8483_Y ;
  assign \$abstract_cmd[31:0]$302  = \$procmux$8488_Y ;
  assign \$procmux$8492_CMP  = \$300 ;
  assign \$abstract_cmd[319:288]$301  = \$procmux$8494_Y ;
  assign \$procmux$8498_CMP  = \$288 ;
  assign \$procmux$8501_CMP  = \$264 ;
  assign \$procmux$8504_CMP  = \$238 ;
  assign \$unsupported_command$290  = \$procmux$8505_Y ;
  assign \$procmux$8509_CMP  = \$288 ;
  assign \$procmux$8512_CMP  = \$264 ;
  assign \$procmux$8515_CMP  = \$238 ;
  assign \$abstract_cmd[31:0]$289  = \$procmux$8516_Y ;
  assign \$procmux$8523_CMP  = \$264 ;
  assign \$procmux$8526_CMP  = \$238 ;
  assign \$unsupported_command$293  = \$procmux$8527_Y ;
  assign \$procmux$8534_CMP  = \$264 ;
  assign \$procmux$8537_CMP  = \$238 ;
  assign \$abstract_cmd[31:0]$291  = \$procmux$8538_Y ;
  assign \$procmux$8544_CMP  = ac_ar[12];
  assign \$procmux$8547_CMP  = \$276 ;
  assign \$procmux$8550_CMP  = \$266 ;
  assign \$procmux$8552_CMP  = \$264 ;
  assign \$procmux$8555_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$278 [127:32] = \$procmux$8556_Y ;
  assign \$procmux$8563_CMP  = ac_ar[5];
  assign \$procmux$8565_CMP  = ac_ar[12];
  assign \$procmux$8568_CMP  = \$276 ;
  assign \$procmux$8571_CMP  = \$266 ;
  assign \$procmux$8573_CMP  = \$264 ;
  assign \$procmux$8576_CMP  = \$238 ;
  assign \$abstract_cmd[159:128]$277  = \$procmux$8577_Y ;
  assign \$procmux$8584_CMP  = ac_ar[12];
  assign \$procmux$8587_CMP  = \$276 ;
  assign \$procmux$8590_CMP  = \$266 ;
  assign \$procmux$8592_CMP  = \$264 ;
  assign \$procmux$8595_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$278 [31:0] = \$procmux$8596_Y ;
  assign \$procmux$8603_CMP  = \$276 ;
  assign \$procmux$8606_CMP  = \$266 ;
  assign \$procmux$8608_CMP  = \$264 ;
  assign \$procmux$8611_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$279  = \$procmux$8612_Y ;
  assign \$procmux$8618_CMP  = \$266 ;
  assign \$procmux$8620_CMP  = \$264 ;
  assign \$procmux$8623_CMP  = \$238 ;
  assign \$unsupported_command$282  = \$procmux$8624_Y ;
  assign \$procmux$8631_CMP  = \$266 ;
  assign \$procmux$8633_CMP  = \$264 ;
  assign \$procmux$8636_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$281  = \$procmux$8637_Y ;
  assign \$procmux$8643_CMP  = \$266 ;
  assign \$procmux$8645_CMP  = \$264 ;
  assign \$procmux$8648_CMP  = \$238 ;
  assign \$abstract_cmd[31:0]$280  = \$procmux$8649_Y ;
  assign \$procmux$8655_CMP  = \$264 ;
  assign \$procmux$8658_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$292  = \$procmux$8659_Y ;
  assign \$procmux$8666_CMP  = \$238 ;
  assign \$unsupported_command$296  = \$procmux$8667_Y ;
  assign \$procmux$8674_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$295  = \$procmux$8675_Y ;
  assign \$procmux$8682_CMP  = \$238 ;
  assign \$abstract_cmd[31:0]$294  = \$procmux$8683_Y ;
  assign \$procmux$8689_CMP  = ac_ar[12];
  assign \$procmux$8692_CMP  = \$250 ;
  assign \$procmux$8695_CMP  = \$240 ;
  assign \$procmux$8697_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$252 [127:32] = \$procmux$8698_Y ;
  assign \$procmux$8705_CMP  = ac_ar[5];
  assign \$procmux$8707_CMP  = ac_ar[12];
  assign \$procmux$8710_CMP  = \$250 ;
  assign \$procmux$8713_CMP  = \$240 ;
  assign \$procmux$8715_CMP  = \$238 ;
  assign \$abstract_cmd[159:128]$251  = \$procmux$8716_Y ;
  assign \$procmux$8723_CMP  = ac_ar[12];
  assign \$procmux$8726_CMP  = \$250 ;
  assign \$procmux$8729_CMP  = \$240 ;
  assign \$procmux$8731_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$252 [31:0] = \$procmux$8732_Y ;
  assign \$procmux$8739_CMP  = \$250 ;
  assign \$procmux$8742_CMP  = \$240 ;
  assign \$procmux$8744_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$253  = \$procmux$8745_Y ;
  assign \$procmux$8751_CMP  = \$240 ;
  assign \$procmux$8753_CMP  = \$238 ;
  assign \$unsupported_command$256  = \$procmux$8754_Y ;
  assign \$procmux$8761_CMP  = \$240 ;
  assign \$procmux$8763_CMP  = \$238 ;
  assign \$abstract_cmd[255:128]$255  = \$procmux$8764_Y ;
  assign \$procmux$8770_CMP  = \$240 ;
  assign \$procmux$8772_CMP  = \$238 ;
  assign \$abstract_cmd[31:0]$254  = \$procmux$8773_Y ;
  assign \$abstract_cmd[319:288]$304  = \$procmux$8778_Y ;
  assign \$abstract_cmd[255:128]$303  = \$procmux$8783_Y ;
  assign \$procmux$8786_CMP  = ndmreset_i;
  assign \$resuming_d_aligned$231  = \$procmux$8785_Y ;
  assign \$procmux$8790_CMP  = ndmreset_i;
  assign \$halted_d_aligned$230  = \$procmux$8789_Y ;
  assign \$procmux$8795_CMP  = \$199 ;
  assign \$procmux$8800_CMP  = we_i;
  assign \$procmux$8802_CMP  = req_i;
  assign \$rdata$209  = \$procmux$8801_Y ;
  assign \$procmux$8811_CMP  = \$153 ;
  assign \$procmux$8813_CMP  = cmdbusy_o;
  assign \$procmux$8819_CMP  = we_i;
  assign \$procmux$8821_CMP  = req_i;
  assign \$rdata_d$154  = \$procmux$8820_Y ;
  assign \$procmux$8830_CMP  = cmdbusy_o;
  assign \$procmux$8836_CMP  = we_i;
  assign \$procmux$8838_CMP  = req_i;
  assign \$rdata_d$155  = \$procmux$8837_Y ;
  assign \$procmux$8846_CMP  = \$auto$rtlil.cc:3092:Mux$1259 ;
  assign \$procmux$8851_CMP  = we_i;
  assign \$procmux$8853_CMP  = req_i;
  assign \$rdata_d$145  = \$procmux$8852_Y ;
  assign \$procmux$8861_CMP  = we_i;
  assign \$procmux$8863_CMP  = req_i;
  assign \$rdata$211  = \$procmux$8862_Y ;
  assign \$procmux$8877_CMP  = we_i;
  assign \$procmux$8879_CMP  = req_i;
  assign \$rdata_d$210  = \$procmux$8878_Y ;
  assign \$procmux$8884_CMP  = be_i[3];
  assign \$procmux$8889_CMP  = \$124 ;
  assign \$procmux$8894_CMP  = we_i;
  assign \$procmux$8896_CMP  = req_i;
  assign \$data_bits[63:56]$131  = \$procmux$8895_Y ;
  assign \$procmux$8901_CMP  = be_i[3];
  assign \$procmux$8906_CMP  = \$124 ;
  assign \$procmux$8911_CMP  = we_i;
  assign \$procmux$8913_CMP  = req_i;
  assign \$data_bits[63:56]$132  = \$procmux$8912_Y ;
  assign \$procmux$8918_CMP  = be_i[2];
  assign \$procmux$8922_CMP  = \$124 ;
  assign \$procmux$8927_CMP  = we_i;
  assign \$procmux$8929_CMP  = req_i;
  assign \$data_bits[55:48]$129  = \$procmux$8928_Y ;
  assign \$procmux$8934_CMP  = be_i[2];
  assign \$procmux$8938_CMP  = \$124 ;
  assign \$procmux$8943_CMP  = we_i;
  assign \$procmux$8945_CMP  = req_i;
  assign \$data_bits[55:48]$130  = \$procmux$8944_Y ;
  assign \$procmux$8950_CMP  = be_i[1];
  assign \$procmux$8953_CMP  = \$124 ;
  assign \$procmux$8958_CMP  = we_i;
  assign \$procmux$8960_CMP  = req_i;
  assign \$data_bits[47:40]$127  = \$procmux$8959_Y ;
  assign \$procmux$8965_CMP  = be_i[1];
  assign \$procmux$8968_CMP  = \$124 ;
  assign \$procmux$8973_CMP  = we_i;
  assign \$procmux$8975_CMP  = req_i;
  assign \$data_bits[47:40]$128  = \$procmux$8974_Y ;
  assign \$procmux$8980_CMP  = be_i[0];
  assign \$procmux$8982_CMP  = \$124 ;
  assign \$procmux$8987_CMP  = we_i;
  assign \$procmux$8989_CMP  = req_i;
  assign \$data_bits[39:32]$125  = \$procmux$8988_Y ;
  assign \$procmux$8994_CMP  = be_i[0];
  assign \$procmux$8996_CMP  = \$124 ;
  assign \$procmux$9001_CMP  = we_i;
  assign \$procmux$9003_CMP  = req_i;
  assign \$data_bits[39:32]$126  = \$procmux$9002_Y ;
  assign \$procmux$9012_CMP  = \$124 ;
  assign \$procmux$9017_CMP  = we_i;
  assign \$procmux$9019_CMP  = req_i;
  assign \$data_bits[63:32]$133  = \$procmux$9018_Y ;
  assign \$procmux$9024_CMP  = be_i[3];
  assign \$procmux$9029_CMP  = \$111 ;
  assign \$procmux$9033_CMP  = we_i;
  assign \$procmux$9035_CMP  = req_i;
  assign \$data_bits[31:24]$118  = \$procmux$9034_Y ;
  assign \$procmux$9040_CMP  = be_i[3];
  assign \$procmux$9045_CMP  = \$111 ;
  assign \$procmux$9049_CMP  = we_i;
  assign \$procmux$9051_CMP  = req_i;
  assign \$data_bits[31:24]$119  = \$procmux$9050_Y ;
  assign \$procmux$9056_CMP  = be_i[2];
  assign \$procmux$9060_CMP  = \$111 ;
  assign \$procmux$9064_CMP  = we_i;
  assign \$procmux$9066_CMP  = req_i;
  assign \$data_bits[23:16]$116  = \$procmux$9065_Y ;
  assign \$procmux$9071_CMP  = be_i[2];
  assign \$procmux$9075_CMP  = \$111 ;
  assign \$procmux$9079_CMP  = we_i;
  assign \$procmux$9081_CMP  = req_i;
  assign \$data_bits[23:16]$117  = \$procmux$9080_Y ;
  assign \$procmux$9086_CMP  = be_i[1];
  assign \$procmux$9089_CMP  = \$111 ;
  assign \$procmux$9093_CMP  = we_i;
  assign \$procmux$9095_CMP  = req_i;
  assign \$data_bits[15:8]$114  = \$procmux$9094_Y ;
  assign \$procmux$9100_CMP  = be_i[1];
  assign \$procmux$9103_CMP  = \$111 ;
  assign \$procmux$9107_CMP  = we_i;
  assign \$procmux$9109_CMP  = req_i;
  assign \$data_bits[15:8]$115  = \$procmux$9108_Y ;
  assign \$procmux$9114_CMP  = be_i[0];
  assign \$procmux$9116_CMP  = \$111 ;
  assign \$procmux$9120_CMP  = we_i;
  assign \$procmux$9122_CMP  = req_i;
  assign \$data_bits[7:0]$112  = \$procmux$9121_Y ;
  assign \$procmux$9127_CMP  = be_i[0];
  assign \$procmux$9129_CMP  = \$111 ;
  assign \$procmux$9133_CMP  = we_i;
  assign \$procmux$9135_CMP  = req_i;
  assign \$data_bits[7:0]$113  = \$procmux$9134_Y ;
  assign \$procmux$9144_CMP  = \$111 ;
  assign \$procmux$9148_CMP  = we_i;
  assign \$procmux$9150_CMP  = req_i;
  assign \$data_bits[31:0]$120  = \$procmux$9149_Y ;
  assign \$procmux$9159_CMP  = we_i;
  assign \$procmux$9161_CMP  = req_i;
  assign \$data_valid_o$140  = \$procmux$9160_Y ;
  assign \$procmux$9170_CMP  = we_i;
  assign \$procmux$9172_CMP  = req_i;
  assign \$data_bits$139  = \$procmux$9171_Y ;
  assign \$procmux$9181_CMP  = we_i;
  assign \$procmux$9183_CMP  = req_i;
  assign \$resuming_d_aligned$138  = \$procmux$9182_Y ;
  assign \$procmux$9194_CMP  = we_i;
  assign \$procmux$9196_CMP  = req_i;
  assign \$halted_aligned$137  = \$procmux$9195_Y ;
  assign \$procmux$9206_CMP  = we_i;
  assign \$procmux$9208_CMP  = req_i;
  assign \$halted_d_aligned$136  = \$procmux$9207_Y ;
  assign \$procmux$9216_CMP  = we_i;
  assign \$procmux$9218_CMP  = req_i;
  assign \$exception$135  = \$procmux$9217_Y ;
  assign \$procmux$9228_CMP  = we_i;
  assign \$procmux$9230_CMP  = req_i;
  assign \$going$134  = \$procmux$9229_Y ;
  assign \$procmux$9235_CMP  = we_i;
  assign \$procmux$9237_CMP  = req_i;
  assign \$data_valid_o$220  = \$procmux$9236_Y ;
  assign \$procmux$9242_CMP  = we_i;
  assign \$procmux$9244_CMP  = req_i;
  assign \$rdata$219  = \$procmux$9243_Y ;
  assign \$procmux$9249_CMP  = we_i;
  assign \$procmux$9251_CMP  = req_i;
  assign \$data_bits$218  = \$procmux$9250_Y ;
  assign \$procmux$9256_CMP  = we_i;
  assign \$procmux$9258_CMP  = req_i;
  assign \$resuming_d_aligned$217  = \$procmux$9257_Y ;
  assign \$procmux$9263_CMP  = we_i;
  assign \$procmux$9265_CMP  = req_i;
  assign \$halted_aligned$216  = \$procmux$9264_Y ;
  assign \$procmux$9270_CMP  = we_i;
  assign \$procmux$9272_CMP  = req_i;
  assign \$halted_d_aligned$215  = \$procmux$9271_Y ;
  assign \$procmux$9277_CMP  = we_i;
  assign \$procmux$9279_CMP  = req_i;
  assign \$rdata_d$214  = \$procmux$9278_Y ;
  assign \$procmux$9284_CMP  = we_i;
  assign \$procmux$9286_CMP  = req_i;
  assign \$exception$213  = \$procmux$9285_Y ;
  assign \$procmux$9291_CMP  = we_i;
  assign \$procmux$9293_CMP  = req_i;
  assign \$going$212  = \$procmux$9292_Y ;
  assign \$procmux$9297_CMP  = req_i;
  assign \$data_valid_o$229  = \$procmux$9296_Y ;
  assign \$procmux$9301_CMP  = req_i;
  assign \$rdata$228  = \$procmux$9300_Y ;
  assign \$procmux$9305_CMP  = req_i;
  assign \$data_bits$227  = \$procmux$9304_Y ;
  assign \$procmux$9309_CMP  = req_i;
  assign \$resuming_d_aligned$226  = \$procmux$9308_Y ;
  assign \$procmux$9313_CMP  = req_i;
  assign \$halted_aligned$225  = \$procmux$9312_Y ;
  assign \$procmux$9317_CMP  = req_i;
  assign \$halted_d_aligned$224  = \$procmux$9316_Y ;
  assign \$procmux$9321_CMP  = req_i;
  assign \$rdata_d$223  = \$procmux$9320_Y ;
  assign \$procmux$9325_CMP  = req_i;
  assign \$exception$222  = \$procmux$9324_Y ;
  assign \$procmux$9329_CMP  = req_i;
  assign \$going$221  = \$procmux$9328_Y ;
  assign \$procmux$9332_CMP  = clear_resumeack_i;
  assign \$resuming_d_aligned$72  = \$procmux$9331_Y ;
  assign \$procmux$9334_CMP  = ndmreset_i;
  assign \$state_d$61  = \$procmux$9333_Y ;
  assign \$procmux$9339_CMP  = ndmreset_i;
  assign \$go$60  = \$procmux$9338_Y ;
  assign \$procmux$9344_CMP  = ndmreset_i;
  assign \$resume$59  = \$procmux$9343_Y ;
  assign \$procmux$9349_CMP  = exception;
  assign \$cmderror_o$58  = \$procmux$9348_Y ;
  assign \$procmux$9353_CMP  = exception;
  assign \$cmderror_valid_o$57  = \$procmux$9352_Y ;
  assign \$procmux$9357_CMP  = \$54 ;
  assign \$cmderror_o$56  = \$procmux$9356_Y ;
  assign \$procmux$9360_CMP  = \$54 ;
  assign \$cmderror_valid_o$55  = \$procmux$9359_Y ;
  assign \$procmux$9363_CMP  = \$auto$rtlil.cc:3092:Mux$1211 ;
  assign \$state_d$46  = \$procmux$9364_Y ;
  assign \$procmux$9368_CMP  = \$auto$rtlil.cc:3092:Mux$1208 ;
  assign \$state_d$42  = \$procmux$9369_Y ;
  assign \$procmux$9374_CMP  = going;
  assign \$state_d$38  = \$procmux$9375_Y ;
  assign \$cmdbusy_o$52  = \$procmux$9378_Y ;
  assign \$state_d$49  = \$procmux$9388_Y ;
  assign \$procmux$9401_CMP  = \$36 ;
  assign \$state_d$37  = \$procmux$9403_Y ;
  assign \$procmux$9409_CMP  = cmd_valid_i;
  assign \$procmux$9412_CMP  = \$9 ;
  assign \$cmderror_o$11  = \$procmux$9413_Y ;
  assign \$procmux$9419_CMP  = cmd_valid_i;
  assign \$procmux$9422_CMP  = \$9 ;
  assign \$cmderror_valid_o$10  = \$procmux$9423_Y ;
  assign \$procmux$9431_CMP  = \$9 ;
  assign \$cmderror_o$14  = \$procmux$9432_Y ;
  assign \$procmux$9440_CMP  = \$9 ;
  assign \$cmderror_valid_o$13  = \$procmux$9441_Y ;
  assign \$procmux$9448_CMP  = \$9 ;
  assign \$state_d$12  = \$procmux$9449_Y ;
  assign \$cmderror_o$51  = \$procmux$9456_Y ;
  assign \$cmderror_valid_o$50  = \$procmux$9463_Y ;
  assign \$go$48  = \$procmux$9469_Y ;
  assign \$resume$47  = \$procmux$9473_Y ;
  assign \$286  = ac_ar[19];
  assign \$auto$rtlil.cc:3093:Bwmux$1228  = \$auto$rtlil.cc:3004:And$16640 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1244  = \$auto$rtlil.cc:3004:And$16644 ;
  assign \$procmux$9192_CMP  = \$auto$rtlil.cc:3011:Eq$1221 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1220  = \$auto$rtlil.cc:3004:And$16648 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1235  = \$auto$rtlil.cc:3005:Or$16650 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1251  = \$auto$rtlil.cc:3005:Or$16652 ;
  assign \$162  = { \$160 [7:0], 1'h0 };
  assign \$171  = { \$169 [7:0], 1'h0 };
  assign \$268  = cmd_i[12];
  assign \$242  = cmd_i[12];
  assign \$197 [2:0] = 3'h0;
  assign \$197 [11:3] = 9'h000;
  assign \$201 [11:3] = 9'h000;
  assign \$201 [2:0] = { 2'h0, hartsel_i[0] };
  assign \$auto$rtlil.cc:3093:Bwmux$1290  = \$auto$rtlil.cc:3004:And$16654 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1292  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1294  = rst_ni;
  assign \$procmux$9203_CMP  = \$auto$rtlil.cc:3011:Eq$1237 ;
  assign \$procmux$9204_CMP  = \$auto$rtlil.cc:3011:Eq$1221 ;
  assign \$315  = \$procmux$8789_Y [0];
  assign \$procmux$9179_CMP  = \$auto$rtlil.cc:3011:Eq$1237 ;
  assign \$317  = \$procmux$8785_Y [0];
  assign \$procmux$8797_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  assign \$procmux$8816_CMP  = \$auto$rtlil.cc:3011:Eq$1256 ;
  assign \$procmux$8848_CMP  = \$auto$rtlil.cc:3011:Eq$1256 ;
  assign \$procmux$8833_CMP  = \$auto$rtlil.cc:3011:Eq$1256 ;
  assign \$procmux$8858_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  assign \$procmux$8868_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  assign \$procmux$8869_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1277 ;
  assign \$procmux$8870_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1271 ;
  assign \$procmux$8871_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1262 ;
  assign \$procmux$8874_CMP  = \$auto$rtlil.cc:3011:Eq$1256 ;
  assign \$procmux$8892_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8909_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8925_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8941_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8956_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8971_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8985_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$8999_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9015_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9031_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9047_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9062_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9077_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9091_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9105_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9118_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9131_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9146_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9157_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9168_CMP  = \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  assign \$procmux$9214_CMP  = \$auto$rtlil.cc:3011:Eq$1252 ;
  assign \$procmux$9226_CMP  = \$auto$rtlil.cc:3011:Eq$1236 ;
  assign \$auto$rtlil.cc:3004:And$16640  = \$auto$rtlil.cc:3114:Demux$1227 ;
  assign \$auto$rtlil.cc:3009:Lt$1266  = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$1268  = \$auto$rtlil.cc:3113:Bmux$1267 ;
endmodule

/* src = "rtl/riscv-dbg/dm_obi_top.sv:63.8" */
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_gnt_o, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_req_o, master_addr_o, master_we_o, master_wdata_o, master_be_o
, master_gnt_i, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o);
  wire \$4 ;
  wire \$auto$rtlil.cc:2965:LogicNot$13 ;
  wire \$auto$rtlil.cc:2965:LogicNot$14 ;
  wire \$procmux$16150_Y ;
  wire \$procmux$16151_CMP ;
  wire [2:0] \$procmux$16153_Y ;
  wire \$procmux$16154_CMP ;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:180.7-185.10" */
  wire [2:0] \$slave_rid_q$6 ;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:180.7-185.10" */
  wire \$slave_rvalid_q$5 ;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:72.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:78.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:77.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:113.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:112.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:111.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:117.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:116.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:115.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:110.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:81.40" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:99.33" */
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:102.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:105.33" */
  input master_err_i;
  wire master_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:103.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:106.33" */
  input master_other_err_i;
  wire master_other_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:107.33" */
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:98.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:104.33" */
  input master_rvalid_i;
  wire master_rvalid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:101.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:100.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:76.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:74.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:87.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:91.33" */
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:88.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:85.33" */
  output slave_gnt_o;
  wire slave_gnt_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:94.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:83.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:96.33" */
  output [2:0] slave_rid_o;
  wire [2:0] slave_rid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:122.23" */
  wire [2:0] slave_rid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:93.33" */
  output slave_rvalid_o;
  wire slave_rvalid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:121.23" */
  wire slave_rvalid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:89.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:86.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:75.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:80.33" */
  input unavailable_i;
  wire unavailable_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$13 )
  );
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$slave_rid_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$slave_rid_q$6 ),
    .Q(slave_rid_q)
  );
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$slave_rvalid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$slave_rvalid_q$5 ),
    .Q(slave_rvalid_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:180.39-183.10|rtl/riscv-dbg/dm_obi_top.sv:180.7-185.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16150  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$16151_CMP ),
    .Y(\$procmux$16150_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:180.39-183.10|rtl/riscv-dbg/dm_obi_top.sv:180.7-185.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16153  (
    .A(slave_rid_q),
    .B(slave_aid_i),
    .S(\$procmux$16154_CMP ),
    .Y(\$procmux$16153_Y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:130.5" */
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
  assign slave_rvalid_o = slave_rvalid_q;
  assign slave_rid_o = slave_rid_q;
  assign \$procmux$16151_CMP  = \$4 ;
  assign \$slave_rvalid_q$5  = \$procmux$16150_Y ;
  assign \$procmux$16154_CMP  = \$4 ;
  assign \$slave_rid_q$6  = \$procmux$16153_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$14  = rst_ni;
  assign \$4  = slave_req_i;
endmodule

/* src = "rtl/riscv-dbg/dm_sba.sv:18.8" */
module \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba (clk_i, rst_ni, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i, sbaddress_o, sbaddress_i, sbdata_o, sbdata_i, dmactive_i, sbaddress_write_valid_i, sbreadonaddr_i, sbautoincrement_i, sbaccess_i
, sbreadondata_i, sbdata_read_valid_i, sbdata_write_valid_i, sbdata_valid_o, sbbusy_o, sberror_valid_o, sberror_o);
  wire \$1 ;
  wire [32:0] \$10 ;
  wire [3:0] \$12 ;
  wire [32:0] \$14 ;
  wire [3:0] \$16 ;
  wire [31:0] \$22 ;
  wire [31:0] \$24 ;
  wire [31:0] \$27 ;
  wire \$30 ;
  wire \$34 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire [31:0] \$73 ;
  wire [31:0] \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire [1:0] \$90 ;
  wire [31:0] \$92 ;
  wire [31:0] \$94 ;
  wire [31:0] \$96 ;
  wire [31:0] \$98 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire \$addr_incr_en$44 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  wire \$addr_incr_en$52 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire \$addr_incr_en$59 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1189 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1190 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16656 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16658 ;
  wire \$auto$rtlil.cc:3009:Lt$1181 ;
  wire \$auto$rtlil.cc:3015:Ge$1180 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1182 ;
  wire \$auto$rtlil.cc:3092:Mux$1183 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1188 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1186 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1187 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1184 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1185 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:126.9-126.42" */
  wire [3:0] \$be$36 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire [3:0] \$be$58 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46" */
  wire [3:0] \$be_mask$19 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  wire [3:0] \$be_mask$20 ;
  wire [2:0] \$procmux$9475_Y ;
  wire \$procmux$9476_CMP ;
  wire \$procmux$9479_Y ;
  wire \$procmux$9480_CMP ;
  wire \$procmux$9483_Y ;
  wire \$procmux$9484_CMP ;
  wire [2:0] \$procmux$9487_Y ;
  wire \$procmux$9488_CMP ;
  wire [2:0] \$procmux$9491_Y ;
  wire \$procmux$9492_CMP ;
  wire \$procmux$9494_Y ;
  wire \$procmux$9495_CMP ;
  wire \$procmux$9497_Y ;
  wire \$procmux$9498_CMP ;
  wire [2:0] \$procmux$9500_Y ;
  wire \$procmux$9501_CMP ;
  wire [2:0] \$procmux$9504_Y ;
  wire \$procmux$9505_CMP ;
  wire [2:0] \$procmux$9507_Y ;
  wire \$procmux$9508_CMP ;
  wire [2:0] \$procmux$9509_Y ;
  wire \$procmux$9510_CMP ;
  wire [2:0] \$procmux$9511_Y ;
  wire \$procmux$9512_CMP ;
  wire \$procmux$9514_Y ;
  wire \$procmux$9515_CMP ;
  wire \$procmux$9517_Y ;
  wire \$procmux$9518_CMP ;
  wire \$procmux$9519_Y ;
  wire \$procmux$9520_CMP ;
  wire \$procmux$9521_Y ;
  wire \$procmux$9522_CMP ;
  wire [2:0] \$procmux$9526_Y ;
  wire \$procmux$9527_CMP ;
  wire [2:0] \$procmux$9528_Y ;
  wire \$procmux$9529_CMP ;
  wire [2:0] \$procmux$9530_Y ;
  wire \$procmux$9531_CMP ;
  wire \$procmux$9535_Y ;
  wire \$procmux$9536_CMP ;
  wire \$procmux$9537_Y ;
  wire \$procmux$9538_CMP ;
  wire \$procmux$9539_Y ;
  wire \$procmux$9540_CMP ;
  wire [2:0] \$procmux$9543_Y ;
  wire \$procmux$9544_CMP ;
  wire [2:0] \$procmux$9545_Y ;
  wire \$procmux$9546_CMP ;
  wire \$procmux$9549_Y ;
  wire \$procmux$9550_CMP ;
  wire \$procmux$9551_Y ;
  wire \$procmux$9552_CMP ;
  wire \$procmux$9555_Y ;
  wire \$procmux$9556_CMP ;
  wire \$procmux$9557_Y ;
  wire \$procmux$9558_CMP ;
  wire [2:0] \$procmux$9561_Y ;
  wire \$procmux$9562_CMP ;
  wire [2:0] \$procmux$9563_Y ;
  wire \$procmux$9564_CMP ;
  wire [2:0] \$procmux$9567_Y ;
  wire \$procmux$9568_CMP ;
  wire [2:0] \$procmux$9570_Y ;
  wire \$procmux$9571_CMP ;
  wire [2:0] \$procmux$9572_Y ;
  wire \$procmux$9573_CMP ;
  wire [2:0] \$procmux$9574_Y ;
  wire \$procmux$9575_CMP ;
  wire \$procmux$9578_Y ;
  wire \$procmux$9579_CMP ;
  wire \$procmux$9581_Y ;
  wire \$procmux$9582_CMP ;
  wire \$procmux$9583_Y ;
  wire \$procmux$9584_CMP ;
  wire \$procmux$9585_Y ;
  wire \$procmux$9586_CMP ;
  wire [2:0] \$procmux$9591_Y ;
  wire \$procmux$9592_CMP ;
  wire [2:0] \$procmux$9593_Y ;
  wire \$procmux$9594_CMP ;
  wire [2:0] \$procmux$9595_Y ;
  wire \$procmux$9596_CMP ;
  wire \$procmux$9601_Y ;
  wire \$procmux$9602_CMP ;
  wire \$procmux$9603_Y ;
  wire \$procmux$9604_CMP ;
  wire \$procmux$9605_Y ;
  wire \$procmux$9606_CMP ;
  wire [2:0] \$procmux$9610_Y ;
  wire \$procmux$9611_CMP ;
  wire [2:0] \$procmux$9612_Y ;
  wire \$procmux$9613_CMP ;
  wire \$procmux$9617_Y ;
  wire \$procmux$9618_CMP ;
  wire \$procmux$9619_Y ;
  wire \$procmux$9620_CMP ;
  wire \$procmux$9624_Y ;
  wire \$procmux$9625_CMP ;
  wire \$procmux$9626_Y ;
  wire \$procmux$9627_CMP ;
  wire [2:0] \$procmux$9631_Y ;
  wire \$procmux$9632_CMP ;
  wire [2:0] \$procmux$9633_Y ;
  wire \$procmux$9634_CMP ;
  wire [2:0] \$procmux$9638_Y ;
  wire \$procmux$9639_CMP ;
  wire [2:0] \$procmux$9640_Y ;
  wire \$procmux$9641_CMP ;
  wire [2:0] \$procmux$9646_Y ;
  wire \$procmux$9647_CMP ;
  wire [2:0] \$procmux$9648_Y ;
  wire \$procmux$9649_CMP ;
  wire [3:0] \$procmux$9654_Y ;
  wire \$procmux$9655_CMP ;
  wire [2:0] \$procmux$9658_Y ;
  wire \$procmux$9659_CMP ;
  wire \$procmux$9661_CMP ;
  wire \$procmux$9663_CMP ;
  wire \$procmux$9665_CMP ;
  wire \$procmux$9669_CMP ;
  wire [2:0] \$procmux$9675_Y ;
  wire \$procmux$9676_CMP ;
  wire [2:0] \$procmux$9679_Y ;
  wire \$procmux$9680_CMP ;
  wire [2:0] \$procmux$9686_Y ;
  wire \$procmux$9687_CMP ;
  wire [2:0] \$procmux$9689_Y ;
  wire \$procmux$9690_CMP ;
  wire [2:0] \$procmux$9696_Y ;
  wire \$procmux$9697_CMP ;
  wire [2:0] \$procmux$9698_Y ;
  wire \$procmux$9699_CMP ;
  wire [2:0] \$procmux$9702_Y ;
  wire \$procmux$9703_CMP ;
  wire \$procmux$9705_CMP ;
  wire \$procmux$9708_Y ;
  wire \$procmux$9709_CMP ;
  wire \$procmux$9711_CMP ;
  wire \$procmux$9714_Y ;
  wire \$procmux$9715_CMP ;
  wire \$procmux$9717_CMP ;
  wire [3:0] \$procmux$9722_Y ;
  wire \$procmux$9723_CMP ;
  wire \$procmux$9725_CMP ;
  wire \$procmux$9730_Y ;
  wire \$procmux$9731_CMP ;
  wire \$procmux$9736_Y ;
  wire \$procmux$9737_CMP ;
  wire \$procmux$9739_CMP ;
  wire [3:0] \$procmux$9742_Y ;
  wire \$procmux$9743_CMP ;
  wire [3:0] \$procmux$9745_Y ;
  wire \$procmux$9746_CMP ;
  wire \$procmux$9747_CMP ;
  wire \$procmux$9748_CMP ;
  wire \$procmux$9749_CMP ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire \$req$56 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  wire \$req$69 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  wire \$req$83 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:147.20-150.14" */
  wire [2:0] \$sberror_o$40 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  wire [2:0] \$sberror_o$42 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire [2:0] \$sberror_o$46 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:164.20-167.14" */
  wire [2:0] \$sberror_o$48 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  wire [2:0] \$sberror_o$50 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  wire [2:0] \$sberror_o$54 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire [2:0] \$sberror_o$61 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  wire [2:0] \$sberror_o$71 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  wire [2:0] \$sberror_o$85 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:147.20-150.14" */
  wire \$sberror_valid_o$39 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  wire \$sberror_valid_o$41 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire \$sberror_valid_o$45 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:164.20-167.14" */
  wire \$sberror_valid_o$47 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  wire \$sberror_valid_o$49 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  wire \$sberror_valid_o$53 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire \$sberror_valid_o$60 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  wire \$sberror_valid_o$70 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  wire \$sberror_valid_o$84 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:117.9-117.76" */
  wire [2:0] \$state_d$31 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:119.9-119.55" */
  wire [2:0] \$state_d$32 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:121.9-121.71" */
  wire [2:0] \$state_d$35 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:127.9-127.41" */
  wire [2:0] \$state_d$37 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:134.9-134.42" */
  wire [2:0] \$state_d$38 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire [2:0] \$state_d$43 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  wire [2:0] \$state_d$51 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire [2:0] \$state_d$55 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  wire [2:0] \$state_d$68 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  wire [2:0] \$state_d$82 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  wire \$we$57 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:95.24" */
  wire [31:0] addr_incr;
  /* src = "rtl/riscv-dbg/dm_sba.sv:94.9" */
  wire addr_incr_en;
  /* src = "rtl/riscv-dbg/dm_sba.sv:61.34" */
  wire [31:0] address;
  /* src = "rtl/riscv-dbg/dm_sba.sv:65.34" */
  wire [3:0] be;
  /* src = "rtl/riscv-dbg/dm_sba.sv:67.26" */
  wire [1:0] be_idx;
  /* src = "rtl/riscv-dbg/dm_sba.sv:200.26" */
  wire [1:0] be_idx_masked;
  /* src = "rtl/riscv-dbg/dm_sba.sv:66.34" */
  wire [3:0] be_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:22.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:24.34" */
  input dmactive_i;
  wire dmactive_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:63.34" */
  wire gnt;
  /* src = "rtl/riscv-dbg/dm_sba.sv:27.34" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:30.34" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:31.34" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:33.34" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:34.34" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:35.34" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:32.34" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:26.34" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:29.34" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:28.34" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:62.34" */
  wire req;
  /* src = "rtl/riscv-dbg/dm_sba.sv:23.34" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_sba.sv:43.34" */
  input [2:0] sbaccess_i;
  wire [2:0] sbaccess_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:91.24" */
  wire [31:0] sbaccess_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:37.34" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:41.34" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:38.34" */
  input sbaddress_write_valid_i;
  wire sbaddress_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:42.34" */
  input sbautoincrement_i;
  wire sbautoincrement_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:53.34" */
  output sbbusy_o;
  wire sbbusy_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:46.34" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:50.34" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:47.34" */
  input sbdata_read_valid_i;
  wire sbdata_read_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:51.34" */
  output sbdata_valid_o;
  wire sbdata_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:48.34" */
  input sbdata_write_valid_i;
  wire sbdata_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:55.34" */
  output [2:0] sberror_o;
  wire [2:0] sberror_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:54.34" */
  output sberror_valid_o;
  wire sberror_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:40.34" */
  input sbreadonaddr_i;
  wire sbreadonaddr_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:45.34" */
  input sbreadondata_i;
  wire sbreadondata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.19" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.28" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dm_sba.sv:64.34" */
  wire we;
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(state_q),
    .Y(\$1 )
  );
  \$neg  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd33)
  ) \$11  (
    .A({ be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], 1'h0 }),
    .Y(\$10 )
  );
  \$shift  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$13  (
    .A(2'h3),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$neg  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd33)
  ) \$15  (
    .A({ be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], be_idx[1], 1'h0 }),
    .Y(\$14 )
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$17  (
    .A(2'h3),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$21  (
    .A(32'd4294967295),
    .B(sbaccess_i),
    .Y(\$22 )
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$23  (
    .A(32'd1),
    .B(sbaccess_i),
    .Y(\$24 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A(32'd0),
    .B(\$24 ),
    .S(addr_incr_en),
    .Y(\$auto$rtlil.cc:3092:Mux$1188 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$26  (
    .A(sbaddress_i),
    .B(addr_incr),
    .Y(\$27 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(sbaddress_write_valid_i),
    .B(sbreadonaddr_i),
    .Y(\$30 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A({ 1'h0, be_idx }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1180 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(sbdata_read_valid_i),
    .B(sbreadondata_i),
    .Y(\$34 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A({ 1'h0, be_idx }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$1181 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$auto$rtlil.cc:3015:Ge$1180 ),
    .B(\$auto$rtlil.cc:3009:Lt$1181 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1182 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$6  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1182 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1183 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A({ 29'h00000000, sbaccess_i }),
    .B(32'd2),
    .Y(\$63 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(state_q),
    .Y(\$65 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$7  (
    .A(\$auto$rtlil.cc:3092:Mux$1183 ),
    .S(be_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1184 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$72  (
    .A(sbaccess_mask),
    .Y(\$73 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$74  (
    .A(sbaddress_i),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .Y(\$77 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(state_q),
    .Y(\$79 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$8  (
    .A(\$auto$rtlil.cc:3092:Mux$1183 ),
    .S(be_idx),
    .Y(\$auto$rtlil.cc:3114:Demux$1185 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1189 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$89  (
    .A(be_idx),
    .B(sbaccess_mask[1:0]),
    .Y(\$90 )
  );
  \$mul  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$91  (
    .A(32'd8),
    .B({ 30'h00000000, be_idx_masked }),
    .Y(\$92 )
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$93  (
    .A(sbdata_i),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$mul  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$95  (
    .A(32'd8),
    .B({ 30'h00000000, be_idx_masked }),
    .Y(\$96 )
  );
  \$shr  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$97  (
    .A(master_r_rdata_i),
    .B(\$96 ),
    .Y(\$98 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16657  (
    .A(\$16 ),
    .B(\$12 ),
    .Y(\$auto$rtlil.cc:3004:And$16658 )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:192.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$state_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9475  (
    .A(\$sberror_o$71 ),
    .B(3'h3),
    .S(\$procmux$9476_CMP ),
    .Y(\$procmux$9475_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9479  (
    .A(\$sberror_valid_o$70 ),
    .B(1'h1),
    .S(\$procmux$9480_CMP ),
    .Y(\$procmux$9479_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9483  (
    .A(\$req$69 ),
    .B(1'h0),
    .S(\$procmux$9484_CMP ),
    .Y(\$procmux$9483_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9487  (
    .A(\$state_d$68 ),
    .B(3'h0),
    .S(\$procmux$9488_CMP ),
    .Y(\$procmux$9487_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9491  (
    .A(\$sberror_o$61 ),
    .B(3'h4),
    .S(\$procmux$9492_CMP ),
    .Y(\$procmux$9491_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9494  (
    .A(\$sberror_valid_o$60 ),
    .B(1'h1),
    .S(\$procmux$9495_CMP ),
    .Y(\$procmux$9494_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9497  (
    .A(\$req$56 ),
    .B(1'h0),
    .S(\$procmux$9498_CMP ),
    .Y(\$procmux$9497_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9500  (
    .A(\$state_d$55 ),
    .B(3'h0),
    .S(\$procmux$9501_CMP ),
    .Y(\$procmux$9500_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:164.40-167.14|rtl/riscv-dbg/dm_sba.sv:164.20-167.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9504  (
    .A(3'h0),
    .B(3'h2),
    .S(\$procmux$9505_CMP ),
    .Y(\$procmux$9504_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.37-164.14|rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9507  (
    .A(\$procmux$9504_Y ),
    .B(3'hx),
    .S(\$procmux$9508_CMP ),
    .Y(\$procmux$9507_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9509  (
    .A(3'hx),
    .B(\$procmux$9507_Y ),
    .S(\$procmux$9510_CMP ),
    .Y(\$procmux$9509_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9511  (
    .A(3'hx),
    .B(\$procmux$9509_Y ),
    .S(\$procmux$9512_CMP ),
    .Y(\$procmux$9511_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9512_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9512_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:164.40-167.14|rtl/riscv-dbg/dm_sba.sv:164.20-167.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9514  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9515_CMP ),
    .Y(\$procmux$9514_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.37-164.14|rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9517  (
    .A(\$procmux$9514_Y ),
    .B(1'hx),
    .S(\$procmux$9518_CMP ),
    .Y(\$procmux$9517_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9519  (
    .A(1'hx),
    .B(\$procmux$9517_Y ),
    .S(\$procmux$9520_CMP ),
    .Y(\$procmux$9519_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9521  (
    .A(1'hx),
    .B(\$procmux$9519_Y ),
    .S(\$procmux$9522_CMP ),
    .Y(\$procmux$9521_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9522_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9522_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.37-164.14|rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9526  (
    .A(\$sberror_o$48 ),
    .B(3'h7),
    .S(\$procmux$9527_CMP ),
    .Y(\$procmux$9526_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9528  (
    .A(3'hx),
    .B(\$procmux$9526_Y ),
    .S(\$procmux$9529_CMP ),
    .Y(\$procmux$9528_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9530  (
    .A(3'hx),
    .B(\$procmux$9528_Y ),
    .S(\$procmux$9531_CMP ),
    .Y(\$procmux$9530_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9531_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9531_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:160.37-164.14|rtl/riscv-dbg/dm_sba.sv:160.11-167.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9535  (
    .A(\$sberror_valid_o$47 ),
    .B(1'h1),
    .S(\$procmux$9536_CMP ),
    .Y(\$procmux$9535_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9537  (
    .A(1'hx),
    .B(\$procmux$9535_Y ),
    .S(\$procmux$9538_CMP ),
    .Y(\$procmux$9537_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9539  (
    .A(1'hx),
    .B(\$procmux$9537_Y ),
    .S(\$procmux$9540_CMP ),
    .Y(\$procmux$9539_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9540_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9540_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9543  (
    .A(3'h0),
    .B(\$sberror_o$50 ),
    .S(\$procmux$9544_CMP ),
    .Y(\$procmux$9543_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9545  (
    .A(3'hx),
    .B(\$procmux$9543_Y ),
    .S(\$procmux$9546_CMP ),
    .Y(\$procmux$9545_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9546_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9546_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9549  (
    .A(1'h0),
    .B(\$sberror_valid_o$49 ),
    .S(\$procmux$9550_CMP ),
    .Y(\$procmux$9549_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9551  (
    .A(1'hx),
    .B(\$procmux$9549_Y ),
    .S(\$procmux$9552_CMP ),
    .Y(\$procmux$9551_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9552_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9552_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9555  (
    .A(1'h0),
    .B(sbautoincrement_i),
    .S(\$procmux$9556_CMP ),
    .Y(\$procmux$9555_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9557  (
    .A(1'hx),
    .B(\$procmux$9555_Y ),
    .S(\$procmux$9558_CMP ),
    .Y(\$procmux$9557_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9558_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9558_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9561  (
    .A(state_q),
    .B(3'h0),
    .S(\$procmux$9562_CMP ),
    .Y(\$procmux$9561_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9563  (
    .A(3'hx),
    .B(\$procmux$9561_Y ),
    .S(\$procmux$9564_CMP ),
    .Y(\$procmux$9563_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9564_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9564_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:147.40-150.14|rtl/riscv-dbg/dm_sba.sv:147.20-150.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9567  (
    .A(3'h0),
    .B(3'h2),
    .S(\$procmux$9568_CMP ),
    .Y(\$procmux$9567_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9570  (
    .A(\$procmux$9567_Y ),
    .B(3'hx),
    .S(\$procmux$9571_CMP ),
    .Y(\$procmux$9570_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9572  (
    .A(3'hx),
    .B(\$procmux$9570_Y ),
    .S(\$procmux$9573_CMP ),
    .Y(\$procmux$9572_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9574  (
    .A(3'hx),
    .B(\$procmux$9572_Y ),
    .S(\$procmux$9575_CMP ),
    .Y(\$procmux$9574_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9575_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9575_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:147.40-150.14|rtl/riscv-dbg/dm_sba.sv:147.20-150.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9578  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9579_CMP ),
    .Y(\$procmux$9578_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9581  (
    .A(\$procmux$9578_Y ),
    .B(1'hx),
    .S(\$procmux$9582_CMP ),
    .Y(\$procmux$9581_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9583  (
    .A(1'hx),
    .B(\$procmux$9581_Y ),
    .S(\$procmux$9584_CMP ),
    .Y(\$procmux$9583_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9585  (
    .A(1'hx),
    .B(\$procmux$9583_Y ),
    .S(\$procmux$9586_CMP ),
    .Y(\$procmux$9585_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9586_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9586_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9591  (
    .A(\$sberror_o$40 ),
    .B(3'h7),
    .S(\$procmux$9592_CMP ),
    .Y(\$procmux$9591_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9593  (
    .A(3'hx),
    .B(\$procmux$9591_Y ),
    .S(\$procmux$9594_CMP ),
    .Y(\$procmux$9593_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9595  (
    .A(3'hx),
    .B(\$procmux$9593_Y ),
    .S(\$procmux$9596_CMP ),
    .Y(\$procmux$9595_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9596_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9596_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9601  (
    .A(\$sberror_valid_o$39 ),
    .B(1'h1),
    .S(\$procmux$9602_CMP ),
    .Y(\$procmux$9601_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9603  (
    .A(1'hx),
    .B(\$procmux$9601_Y ),
    .S(\$procmux$9604_CMP ),
    .Y(\$procmux$9603_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9605  (
    .A(1'hx),
    .B(\$procmux$9603_Y ),
    .S(\$procmux$9606_CMP ),
    .Y(\$procmux$9605_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9606_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9606_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9610  (
    .A(3'h0),
    .B(\$sberror_o$42 ),
    .S(\$procmux$9611_CMP ),
    .Y(\$procmux$9610_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9612  (
    .A(3'hx),
    .B(\$procmux$9610_Y ),
    .S(\$procmux$9613_CMP ),
    .Y(\$procmux$9612_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9613_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9613_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9617  (
    .A(1'h0),
    .B(\$sberror_valid_o$41 ),
    .S(\$procmux$9618_CMP ),
    .Y(\$procmux$9617_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9619  (
    .A(1'hx),
    .B(\$procmux$9617_Y ),
    .S(\$procmux$9620_CMP ),
    .Y(\$procmux$9619_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9620_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9620_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9624  (
    .A(1'h0),
    .B(sbautoincrement_i),
    .S(\$procmux$9625_CMP ),
    .Y(\$procmux$9624_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9626  (
    .A(1'hx),
    .B(\$procmux$9624_Y ),
    .S(\$procmux$9627_CMP ),
    .Y(\$procmux$9626_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9627_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9627_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9631  (
    .A(state_q),
    .B(3'h0),
    .S(\$procmux$9632_CMP ),
    .Y(\$procmux$9631_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9633  (
    .A(3'hx),
    .B(\$procmux$9631_Y ),
    .S(\$procmux$9634_CMP ),
    .Y(\$procmux$9633_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9634_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9634_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:134.18-134.42|rtl/riscv-dbg/dm_sba.sv:134.9-134.42" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9638  (
    .A(state_q),
    .B(3'h4),
    .S(\$procmux$9639_CMP ),
    .Y(\$procmux$9638_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9640  (
    .A(3'hx),
    .B(\$procmux$9638_Y ),
    .S(\$procmux$9641_CMP ),
    .Y(\$procmux$9640_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9641_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$9641_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:127.18-127.41|rtl/riscv-dbg/dm_sba.sv:127.9-127.41" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9646  (
    .A(state_q),
    .B(3'h3),
    .S(\$procmux$9647_CMP ),
    .Y(\$procmux$9646_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9648  (
    .A(3'hx),
    .B(\$procmux$9646_Y ),
    .S(\$procmux$9649_CMP ),
    .Y(\$procmux$9648_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9649_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$9649_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$9654  (
    .A(4'hx),
    .B(\$be_mask$20 ),
    .S(\$procmux$9655_CMP ),
    .Y(\$procmux$9654_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9655_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$9655_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$9658  (
    .A(3'h0),
    .B({ \$state_d$35 , \$state_d$37 , \$state_d$38 , \$state_d$43 , \$state_d$51  }),
    .S({ \$procmux$9669_CMP , \$procmux$9665_CMP , \$procmux$9663_CMP , \$procmux$9661_CMP , \$procmux$9659_CMP  }),
    .Y(\$procmux$9658_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9659_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9659_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9661_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9661_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9663_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$9663_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9665_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$9665_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9669_CMP0  (
    .A(state_q),
    .Y(\$procmux$9669_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:121.52-121.71|rtl/riscv-dbg/dm_sba.sv:121.9-121.71" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9675  (
    .A(\$state_d$32 ),
    .B(3'h1),
    .S(\$procmux$9676_CMP ),
    .Y(\$procmux$9675_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9679  (
    .A(3'hx),
    .B(\$procmux$9675_Y ),
    .S(\$procmux$9680_CMP ),
    .Y(\$procmux$9679_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9680_CMP0  (
    .A(state_q),
    .Y(\$procmux$9680_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:119.35-119.55|rtl/riscv-dbg/dm_sba.sv:119.9-119.55" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9686  (
    .A(\$state_d$31 ),
    .B(3'h2),
    .S(\$procmux$9687_CMP ),
    .Y(\$procmux$9686_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9689  (
    .A(3'hx),
    .B(\$procmux$9686_Y ),
    .S(\$procmux$9690_CMP ),
    .Y(\$procmux$9689_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9690_CMP0  (
    .A(state_q),
    .Y(\$procmux$9690_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:117.57-117.76|rtl/riscv-dbg/dm_sba.sv:117.9-117.76" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9696  (
    .A(state_q),
    .B(3'h1),
    .S(\$procmux$9697_CMP ),
    .Y(\$procmux$9696_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9698  (
    .A(3'hx),
    .B(\$procmux$9696_Y ),
    .S(\$procmux$9699_CMP ),
    .Y(\$procmux$9698_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9699_CMP0  (
    .A(state_q),
    .Y(\$procmux$9699_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd3)
  ) \$procmux$9702  (
    .A(3'h0),
    .B({ \$sberror_o$46 , \$sberror_o$54  }),
    .S({ \$procmux$9705_CMP , \$procmux$9703_CMP  }),
    .Y(\$procmux$9702_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9703_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9703_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9705_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9705_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9708  (
    .A(1'h0),
    .B({ \$sberror_valid_o$45 , \$sberror_valid_o$53  }),
    .S({ \$procmux$9711_CMP , \$procmux$9709_CMP  }),
    .Y(\$procmux$9708_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9709_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9709_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9711_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9711_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9714  (
    .A(1'h0),
    .B({ \$addr_incr_en$44 , \$addr_incr_en$52  }),
    .S({ \$procmux$9717_CMP , \$procmux$9715_CMP  }),
    .Y(\$procmux$9714_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9715_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9715_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9717_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$9717_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$9722  (
    .A(4'h0),
    .B({ \$be$36 , \$be_mask$20  }),
    .S({ \$procmux$9725_CMP , \$procmux$9723_CMP  }),
    .Y(\$procmux$9722_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9723_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$9723_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9725_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$9725_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9730  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$9731_CMP ),
    .Y(\$procmux$9730_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9731_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$9731_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9736  (
    .A(1'h0),
    .B(2'h3),
    .S({ \$procmux$9739_CMP , \$procmux$9737_CMP  }),
    .Y(\$procmux$9736_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9737_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$9737_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9739_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$9739_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$9742  (
    .A(4'hx),
    .B(4'hf),
    .S(\$procmux$9743_CMP ),
    .Y(\$procmux$9742_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9743_CMP0  (
    .A(sbaccess_i),
    .B(3'h2),
    .Y(\$procmux$9743_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) \$procmux$9745  (
    .A(4'h0),
    .B({ \$auto$rtlil.cc:3093:Bwmux$1186 , \$auto$rtlil.cc:3093:Bwmux$1187 , \$be_mask$19 , 4'hf }),
    .S({ \$procmux$9749_CMP , \$procmux$9748_CMP , \$procmux$9747_CMP , \$procmux$9746_CMP  }),
    .Y(\$procmux$9745_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9746_CMP0  (
    .A(sbaccess_i),
    .B(3'h3),
    .Y(\$procmux$9746_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9747_CMP0  (
    .A(sbaccess_i),
    .B(3'h2),
    .Y(\$procmux$9747_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.66|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9748_CMP0  (
    .A(sbaccess_i),
    .B(3'h1),
    .Y(\$procmux$9748_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.30|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9749_CMP0  (
    .A(sbaccess_i),
    .Y(\$procmux$9749_CMP )
  );
  assign sbbusy_o = \$1 ;
  assign be_mask = \$be_mask$20 ;
  assign sbaccess_mask = \$22 ;
  assign addr_incr = \$auto$rtlil.cc:3092:Mux$1188 ;
  assign sbaddress_o = \$27 ;
  assign state_d = \$state_d$82 ;
  assign address = sbaddress_i;
  assign req = \$req$83 ;
  assign we = \$we$57 ;
  assign be = \$be$58 ;
  assign be_idx = sbaddress_i[1:0];
  assign addr_incr_en = \$addr_incr_en$59 ;
  assign sberror_valid_o = \$sberror_valid_o$84 ;
  assign sberror_o = \$sberror_o$85 ;
  assign be_idx_masked = \$90 ;
  assign master_req_o = req;
  assign master_add_o = address;
  assign master_we_o = we;
  assign master_wdata_o = \$94 ;
  assign master_be_o = be;
  assign gnt = master_gnt_i;
  assign sbdata_valid_o = master_r_valid_i;
  assign sbdata_o = \$98 ;
  assign \$procmux$9476_CMP  = \$81 ;
  assign \$sberror_o$85  = \$procmux$9475_Y ;
  assign \$procmux$9480_CMP  = \$81 ;
  assign \$sberror_valid_o$84  = \$procmux$9479_Y ;
  assign \$procmux$9484_CMP  = \$81 ;
  assign \$req$83  = \$procmux$9483_Y ;
  assign \$procmux$9488_CMP  = \$81 ;
  assign \$state_d$82  = \$procmux$9487_Y ;
  assign \$procmux$9492_CMP  = \$67 ;
  assign \$sberror_o$71  = \$procmux$9491_Y ;
  assign \$procmux$9495_CMP  = \$67 ;
  assign \$sberror_valid_o$70  = \$procmux$9494_Y ;
  assign \$procmux$9498_CMP  = \$67 ;
  assign \$req$69  = \$procmux$9497_Y ;
  assign \$procmux$9501_CMP  = \$67 ;
  assign \$state_d$68  = \$procmux$9500_Y ;
  assign \$procmux$9505_CMP  = master_r_err_i;
  assign \$procmux$9508_CMP  = master_r_other_err_i;
  assign \$procmux$9510_CMP  = sbdata_valid_o;
  assign \$sberror_o$48  = \$procmux$9511_Y ;
  assign \$procmux$9515_CMP  = master_r_err_i;
  assign \$procmux$9518_CMP  = master_r_other_err_i;
  assign \$procmux$9520_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$47  = \$procmux$9521_Y ;
  assign \$procmux$9527_CMP  = master_r_other_err_i;
  assign \$procmux$9529_CMP  = sbdata_valid_o;
  assign \$sberror_o$50  = \$procmux$9530_Y ;
  assign \$procmux$9536_CMP  = master_r_other_err_i;
  assign \$procmux$9538_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$49  = \$procmux$9539_Y ;
  assign \$procmux$9544_CMP  = sbdata_valid_o;
  assign \$sberror_o$54  = \$procmux$9545_Y ;
  assign \$procmux$9550_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$53  = \$procmux$9551_Y ;
  assign \$procmux$9556_CMP  = sbdata_valid_o;
  assign \$addr_incr_en$52  = \$procmux$9557_Y ;
  assign \$procmux$9562_CMP  = sbdata_valid_o;
  assign \$state_d$51  = \$procmux$9563_Y ;
  assign \$procmux$9568_CMP  = master_r_err_i;
  assign \$procmux$9571_CMP  = master_r_other_err_i;
  assign \$procmux$9573_CMP  = sbdata_valid_o;
  assign \$sberror_o$40  = \$procmux$9574_Y ;
  assign \$procmux$9579_CMP  = master_r_err_i;
  assign \$procmux$9582_CMP  = master_r_other_err_i;
  assign \$procmux$9584_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$39  = \$procmux$9585_Y ;
  assign \$procmux$9592_CMP  = master_r_other_err_i;
  assign \$procmux$9594_CMP  = sbdata_valid_o;
  assign \$sberror_o$42  = \$procmux$9595_Y ;
  assign \$procmux$9602_CMP  = master_r_other_err_i;
  assign \$procmux$9604_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$41  = \$procmux$9605_Y ;
  assign \$procmux$9611_CMP  = sbdata_valid_o;
  assign \$sberror_o$46  = \$procmux$9612_Y ;
  assign \$procmux$9618_CMP  = sbdata_valid_o;
  assign \$sberror_valid_o$45  = \$procmux$9619_Y ;
  assign \$procmux$9625_CMP  = sbdata_valid_o;
  assign \$addr_incr_en$44  = \$procmux$9626_Y ;
  assign \$procmux$9632_CMP  = sbdata_valid_o;
  assign \$state_d$43  = \$procmux$9633_Y ;
  assign \$procmux$9639_CMP  = gnt;
  assign \$state_d$38  = \$procmux$9640_Y ;
  assign \$procmux$9647_CMP  = gnt;
  assign \$state_d$37  = \$procmux$9648_Y ;
  assign \$be$36  = \$procmux$9654_Y ;
  assign \$state_d$55  = \$procmux$9658_Y ;
  assign \$procmux$9676_CMP  = \$34 ;
  assign \$state_d$35  = \$procmux$9679_Y ;
  assign \$procmux$9687_CMP  = sbdata_write_valid_i;
  assign \$state_d$32  = \$procmux$9689_Y ;
  assign \$procmux$9697_CMP  = \$30 ;
  assign \$state_d$31  = \$procmux$9698_Y ;
  assign \$sberror_o$61  = \$procmux$9702_Y ;
  assign \$sberror_valid_o$60  = \$procmux$9708_Y ;
  assign \$addr_incr_en$59  = \$procmux$9714_Y ;
  assign \$be$58  = \$procmux$9722_Y ;
  assign \$we$57  = \$procmux$9730_Y ;
  assign \$req$56  = \$procmux$9736_Y ;
  assign \$be_mask$19  = \$procmux$9742_Y ;
  assign \$be_mask$20  = \$procmux$9745_Y ;
  assign \$auto$rtlil.cc:3093:Bwmux$1186  = \$auto$rtlil.cc:3004:And$16656 ;
  assign \$auto$rtlil.cc:3093:Bwmux$1187  = \$auto$rtlil.cc:3004:And$16658 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1190  = rst_ni;
  assign \$auto$rtlil.cc:3004:And$16656  = \$auto$rtlil.cc:3114:Demux$1185 ;
endmodule

/* src = "rtl/riscv-dbg/dm_top.sv:20.8" */
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i
, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i);
  /* src = "rtl/riscv-dbg/dm_top.sv:85.37" */
  wire clear_resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:30.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:87.37" */
  wire [31:0] cmd;
  /* src = "rtl/riscv-dbg/dm_top.sv:86.37" */
  wire cmd_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:91.37" */
  wire cmdbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:90.37" */
  wire [2:0] cmderror;
  /* src = "rtl/riscv-dbg/dm_top.sv:89.37" */
  wire cmderror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:93.37" */
  wire [63:0] data_csrs_mem;
  /* src = "rtl/riscv-dbg/dm_top.sv:94.37" */
  wire [63:0] data_mem_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:95.37" */
  wire data_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:43.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:42.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:72.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:71.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:70.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:76.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:75.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:74.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:67.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:80.37" */
  wire halted;
  /* src = "rtl/riscv-dbg/dm_top.sv:83.37" */
  wire haltreq;
  /* src = "rtl/riscv-dbg/dm_top.sv:46.39" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:97.37" */
  wire [19:0] hartsel;
  /* src = "rtl/riscv-dbg/dm_top.sv:56.33" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:59.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:60.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:62.33" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:63.33" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:64.33" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:61.33" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:55.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:58.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:57.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:96.37" */
  wire ndmreset;
  /* src = "rtl/riscv-dbg/dm_top.sv:41.33" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:40.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:38.33" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:92.37" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_top.sv:82.37" */
  wire resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:84.37" */
  wire resumereq;
  /* src = "rtl/riscv-dbg/dm_top.sv:32.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:104.37" */
  wire [2:0] sbaccess;
  /* src = "rtl/riscv-dbg/dm_top.sv:99.37" */
  wire [31:0] sbaddress_csrs_sba;
  /* src = "rtl/riscv-dbg/dm_top.sv:100.37" */
  wire [31:0] sbaddress_sba_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:101.37" */
  wire sbaddress_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:103.37" */
  wire sbautoincrement;
  /* src = "rtl/riscv-dbg/dm_top.sv:111.37" */
  wire sbbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:109.37" */
  wire [31:0] sbdata_read;
  /* src = "rtl/riscv-dbg/dm_top.sv:107.37" */
  wire sbdata_read_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:110.37" */
  wire sbdata_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:106.37" */
  wire [31:0] sbdata_write;
  /* src = "rtl/riscv-dbg/dm_top.sv:108.37" */
  wire sbdata_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:113.37" */
  wire [2:0] sberror;
  /* src = "rtl/riscv-dbg/dm_top.sv:112.37" */
  wire sberror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:102.37" */
  wire sbreadonaddr;
  /* src = "rtl/riscv-dbg/dm_top.sv:105.37" */
  wire sbreadondata;
  /* src = "rtl/riscv-dbg/dm_top.sv:50.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:51.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:53.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:48.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:52.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:49.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:39.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:45.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:121.5" */
  \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs  i_dm_csrs (
    .clear_resumeack_o(clear_resumeack),
    .clk_i(clk_i),
    .cmd_o(cmd),
    .cmd_valid_o(cmd_valid),
    .cmdbusy_i(cmdbusy),
    .cmderror_i(cmderror),
    .cmderror_valid_i(cmderror_valid),
    .data_i(data_mem_csrs),
    .data_o(data_csrs_mem),
    .data_valid_i(data_valid),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .halted_i(halted),
    .haltreq_o(haltreq),
    .hartinfo_i(hartinfo_i),
    .hartsel_o(hartsel),
    .ndmreset_ack_i(ndmreset_ack_i),
    .ndmreset_o(ndmreset),
    .next_dm_addr_i(next_dm_addr_i),
    .progbuf_o(progbuf),
    .resumeack_i(resumeack),
    .resumereq_o(resumereq),
    .rst_ni(rst_ni),
    .sbaccess_o(sbaccess),
    .sbaddress_i(sbaddress_sba_csrs),
    .sbaddress_o(sbaddress_csrs_sba),
    .sbaddress_write_valid_o(sbaddress_write_valid),
    .sbautoincrement_o(sbautoincrement),
    .sbbusy_i(sbbusy),
    .sbdata_i(sbdata_read),
    .sbdata_o(sbdata_write),
    .sbdata_read_valid_o(sbdata_read_valid),
    .sbdata_valid_i(sbdata_valid),
    .sbdata_write_valid_o(sbdata_write_valid),
    .sberror_i(sberror),
    .sberror_valid_i(sberror_valid),
    .sbreadonaddr_o(sbreadonaddr),
    .sbreadondata_o(sbreadondata),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:211.5" */
  \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem  i_dm_mem (
    .addr_i(slave_addr_i),
    .be_i(slave_be_i),
    .clear_resumeack_i(clear_resumeack),
    .clk_i(clk_i),
    .cmd_i(cmd),
    .cmd_valid_i(cmd_valid),
    .cmdbusy_o(cmdbusy),
    .cmderror_o(cmderror),
    .cmderror_valid_o(cmderror_valid),
    .data_i(data_csrs_mem),
    .data_o(data_mem_csrs),
    .data_valid_o(data_valid),
    .debug_req_o(debug_req_o),
    .halted_o(halted),
    .haltreq_i(haltreq),
    .hartsel_i(hartsel),
    .ndmreset_i(ndmreset),
    .progbuf_i(progbuf),
    .rdata_o(slave_rdata_o),
    .req_i(slave_req_i),
    .resumereq_i(resumereq),
    .resuming_o(resumeack),
    .rst_ni(rst_ni),
    .wdata_i(slave_wdata_i),
    .we_i(slave_we_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:173.5" */
  \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba  i_dm_sba (
    .clk_i(clk_i),
    .dmactive_i(dmactive_o),
    .master_add_o(master_add_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_r_err_i),
    .master_r_other_err_i(master_r_other_err_i),
    .master_r_rdata_i(master_r_rdata_i),
    .master_r_valid_i(master_r_valid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .rst_ni(rst_ni),
    .sbaccess_i(sbaccess),
    .sbaddress_i(sbaddress_csrs_sba),
    .sbaddress_o(sbaddress_sba_csrs),
    .sbaddress_write_valid_i(sbaddress_write_valid),
    .sbautoincrement_i(sbautoincrement),
    .sbbusy_o(sbbusy),
    .sbdata_i(sbdata_write),
    .sbdata_o(sbdata_read),
    .sbdata_read_valid_i(sbdata_read_valid),
    .sbdata_valid_o(sbdata_valid),
    .sbdata_write_valid_i(sbdata_write_valid),
    .sberror_o(sberror),
    .sberror_valid_o(sberror_valid),
    .sbreadonaddr_i(sbreadonaddr),
    .sbreadondata_i(sbreadondata)
  );
  assign ndmreset_o = ndmreset;
endmodule

/* src = "rtl/riscv-dbg/dmi_cdc.sv:19.8" */
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$1 ;
  wire \$3 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$234 ;
  wire \$auto$rtlil.cc:2965:LogicNot$235 ;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:98.28" */
  wire clear_pending_rise_edge_detect;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:35.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:48.28" */
  wire core_clear_pending;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:96.28" */
  wire core_clear_pending_q;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:41.28" */
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:44.28" */
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:39.28" */
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:43.28" */
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:38.28" */
  output core_dmi_rst_no;
  wire core_dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:97.28" */
  wire core_dmi_rst_nq;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:45.28" */
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:40.28" */
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:26.28" */
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:32.28" */
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:24.28" */
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:23.28" */
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:30.28" */
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:25.28" */
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:31.28" */
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:36.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:21.28" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:22.28" */
  input trst_ni;
  wire trst_ni;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(core_clear_pending_q),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(core_clear_pending),
    .Y(\$3 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$234 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(clear_pending_rise_edge_detect),
    .Y(\$8 )
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_clear_pending_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(core_clear_pending),
    .Q(core_clear_pending_q)
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_dmi_rst_nq  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$8 ),
    .Q(core_dmi_rst_nq)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:50.45" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:72.46" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
  assign clear_pending_rise_edge_detect = \$3 ;
  assign core_dmi_rst_no = core_dmi_rst_nq;
  assign \$auto$rtlil.cc:2965:LogicNot$235  = rst_ni;
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag.sv:19.8" */
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$1 ;
  wire [31:0] \$10 ;
  wire \$17 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$5 ;
  wire \$57 ;
  wire \$59 ;
  wire \$65 ;
  wire \$68 ;
  wire \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$78 ;
  wire \$80 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  wire [6:0] \$address_d$33 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire [6:0] \$address_d$52 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire [6:0] \$address_d$85 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$10 ;
  wire \$auto$rtlil.cc:2965:LogicNot$11 ;
  wire \$auto$rtlil.cc:2965:LogicNot$12 ;
  wire \$auto$rtlil.cc:2965:LogicNot$5 ;
  wire \$auto$rtlil.cc:2965:LogicNot$6 ;
  wire \$auto$rtlil.cc:3011:Eq$8 ;
  wire \$auto$rtlil.cc:3011:Eq$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$7 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  wire [31:0] \$data_d$34 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire [31:0] \$data_d$36 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire [31:0] \$data_d$40 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire [31:0] \$data_d$53 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire [31:0] \$data_d$86 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$dmi_req_valid$50 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire \$dmi_req_valid$83 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  wire [40:0] \$dr_d$100 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  wire [40:0] \$dr_d$101 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  wire [40:0] \$dr_d$102 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  wire [40:0] \$dr_d$103 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  wire [40:0] \$dr_d$104 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  wire [40:0] \$dr_d$105 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  wire [40:0] \$dr_d$106 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  wire [31:0] \$dtmcs_d$11 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" */
  wire [31:0] \$dtmcs_d$12 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  wire [31:0] \$dtmcs_d$7 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  wire [31:0] \$dtmcs_d$8 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:244.7-246.10" */
  wire [1:0] \$error_d$71 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  wire [1:0] \$error_d$76 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  wire [1:0] \$error_d$81 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire [1:0] \$error_d$82 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_busy$37 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_busy$41 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  wire \$error_dmi_busy$44 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  wire \$error_dmi_busy$47 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_busy$54 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  wire \$error_dmi_busy$60 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  wire \$error_dmi_busy$66 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire \$error_dmi_busy$87 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_op_failed$38 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_op_failed$42 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  wire \$error_dmi_op_failed$45 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  wire \$error_dmi_op_failed$48 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_op_failed$55 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire \$error_dmi_op_failed$88 ;
  wire [1:0] \$procmux$16155_Y ;
  wire \$procmux$16156_CMP ;
  wire [1:0] \$procmux$16163_Y ;
  wire \$procmux$16164_CMP ;
  wire [1:0] \$procmux$16165_Y ;
  wire \$procmux$16166_CMP ;
  wire [1:0] \$procmux$16172_Y ;
  wire \$procmux$16173_CMP ;
  wire [1:0] \$procmux$16174_Y ;
  wire \$procmux$16175_CMP ;
  wire [1:0] \$procmux$16180_Y ;
  wire \$procmux$16181_CMP ;
  wire \$procmux$16182_Y ;
  wire \$procmux$16183_CMP ;
  wire \$procmux$16187_Y ;
  wire \$procmux$16188_CMP ;
  wire \$procmux$16189_Y ;
  wire \$procmux$16190_CMP ;
  wire \$procmux$16193_Y ;
  wire \$procmux$16194_CMP ;
  wire [2:0] \$procmux$16195_Y ;
  wire \$procmux$16196_CMP ;
  wire [2:0] \$procmux$16198_Y ;
  wire \$procmux$16199_CMP ;
  wire \$procmux$16200_CMP ;
  wire \$procmux$16201_CMP ;
  wire \$procmux$16202_CMP ;
  wire \$procmux$16203_CMP ;
  wire [2:0] \$procmux$16205_Y ;
  wire \$procmux$16206_CMP ;
  wire \$procmux$16210_Y ;
  wire \$procmux$16211_CMP ;
  wire \$procmux$16212_Y ;
  wire \$procmux$16213_CMP ;
  wire \$procmux$16214_Y ;
  wire \$procmux$16215_CMP ;
  wire \$procmux$16217_Y ;
  wire \$procmux$16218_CMP ;
  wire \$procmux$16221_Y ;
  wire \$procmux$16222_CMP ;
  wire \$procmux$16223_Y ;
  wire \$procmux$16224_CMP ;
  wire \$procmux$16225_Y ;
  wire \$procmux$16226_CMP ;
  wire \$procmux$16228_Y ;
  wire \$procmux$16229_CMP ;
  wire \$procmux$16232_Y ;
  wire \$procmux$16233_CMP ;
  wire \$procmux$16234_Y ;
  wire \$procmux$16235_CMP ;
  wire \$procmux$16237_Y ;
  wire \$procmux$16238_CMP ;
  wire \$procmux$16241_Y ;
  wire \$procmux$16242_CMP ;
  wire \$procmux$16243_Y ;
  wire \$procmux$16244_CMP ;
  wire \$procmux$16246_Y ;
  wire \$procmux$16247_CMP ;
  wire [2:0] \$procmux$16250_Y ;
  wire \$procmux$16251_CMP ;
  wire [2:0] \$procmux$16252_Y ;
  wire \$procmux$16253_CMP ;
  wire [2:0] \$procmux$16255_Y ;
  wire \$procmux$16256_CMP ;
  wire [2:0] \$procmux$16259_Y ;
  wire \$procmux$16260_CMP ;
  wire [2:0] \$procmux$16261_Y ;
  wire \$procmux$16262_CMP ;
  wire [2:0] \$procmux$16264_Y ;
  wire \$procmux$16265_CMP ;
  wire [31:0] \$procmux$16270_Y ;
  wire \$procmux$16271_CMP ;
  wire \$procmux$16272_CMP ;
  wire \$procmux$16273_CMP ;
  wire [31:0] \$procmux$16274_Y ;
  wire \$procmux$16275_CMP ;
  wire [31:0] \$procmux$16276_Y ;
  wire \$procmux$16277_CMP ;
  wire [31:0] \$procmux$16279_Y ;
  wire \$procmux$16280_CMP ;
  wire \$procmux$16286_Y ;
  wire \$procmux$16287_CMP ;
  wire \$procmux$16288_Y ;
  wire \$procmux$16289_CMP ;
  wire \$procmux$16290_Y ;
  wire \$procmux$16291_CMP ;
  wire \$procmux$16293_Y ;
  wire \$procmux$16294_CMP ;
  wire \$procmux$16299_Y ;
  wire \$procmux$16300_CMP ;
  wire \$procmux$16301_Y ;
  wire \$procmux$16302_CMP ;
  wire \$procmux$16303_Y ;
  wire \$procmux$16304_CMP ;
  wire \$procmux$16306_Y ;
  wire \$procmux$16307_CMP ;
  wire \$procmux$16312_Y ;
  wire \$procmux$16313_CMP ;
  wire \$procmux$16314_Y ;
  wire \$procmux$16315_CMP ;
  wire \$procmux$16317_Y ;
  wire \$procmux$16318_CMP ;
  wire \$procmux$16323_Y ;
  wire \$procmux$16324_CMP ;
  wire \$procmux$16325_Y ;
  wire \$procmux$16326_CMP ;
  wire \$procmux$16328_Y ;
  wire \$procmux$16329_CMP ;
  wire [31:0] \$procmux$16334_Y ;
  wire \$procmux$16335_CMP ;
  wire [31:0] \$procmux$16336_Y ;
  wire \$procmux$16337_CMP ;
  wire [31:0] \$procmux$16339_Y ;
  wire \$procmux$16340_CMP ;
  wire [2:0] \$procmux$16345_Y ;
  wire \$procmux$16346_CMP ;
  wire [2:0] \$procmux$16347_Y ;
  wire \$procmux$16348_CMP ;
  wire [2:0] \$procmux$16350_Y ;
  wire \$procmux$16351_CMP ;
  wire [2:0] \$procmux$16356_Y ;
  wire \$procmux$16357_CMP ;
  wire [2:0] \$procmux$16358_Y ;
  wire \$procmux$16359_CMP ;
  wire [2:0] \$procmux$16361_Y ;
  wire \$procmux$16362_CMP ;
  wire [2:0] \$procmux$16366_Y ;
  wire \$procmux$16367_CMP ;
  wire \$procmux$16369_CMP ;
  wire \$procmux$16371_CMP ;
  wire \$procmux$16373_CMP ;
  wire \$procmux$16375_CMP ;
  wire [2:0] \$procmux$16377_Y ;
  wire \$procmux$16378_CMP ;
  wire [2:0] \$procmux$16384_Y ;
  wire \$procmux$16385_CMP ;
  wire [2:0] \$procmux$16387_Y ;
  wire \$procmux$16388_CMP ;
  wire [2:0] \$procmux$16389_Y ;
  wire \$procmux$16390_CMP ;
  wire [2:0] \$procmux$16391_Y ;
  wire \$procmux$16392_CMP ;
  wire [2:0] \$procmux$16394_Y ;
  wire \$procmux$16395_CMP ;
  wire [2:0] \$procmux$16403_Y ;
  wire \$procmux$16404_CMP ;
  wire [2:0] \$procmux$16405_Y ;
  wire \$procmux$16406_CMP ;
  wire [2:0] \$procmux$16407_Y ;
  wire \$procmux$16408_CMP ;
  wire [2:0] \$procmux$16410_Y ;
  wire \$procmux$16411_CMP ;
  wire [31:0] \$procmux$16418_Y ;
  wire \$procmux$16419_CMP ;
  wire [31:0] \$procmux$16420_Y ;
  wire \$procmux$16421_CMP ;
  wire [31:0] \$procmux$16423_Y ;
  wire \$procmux$16424_CMP ;
  wire [6:0] \$procmux$16431_Y ;
  wire \$procmux$16432_CMP ;
  wire [6:0] \$procmux$16433_Y ;
  wire \$procmux$16434_CMP ;
  wire [6:0] \$procmux$16436_Y ;
  wire \$procmux$16437_CMP ;
  wire [2:0] \$procmux$16444_Y ;
  wire \$procmux$16445_CMP ;
  wire [2:0] \$procmux$16446_Y ;
  wire \$procmux$16447_CMP ;
  wire [2:0] \$procmux$16449_Y ;
  wire \$procmux$16450_CMP ;
  wire \$procmux$16453_Y ;
  wire \$procmux$16454_CMP ;
  wire \$procmux$16456_CMP ;
  wire \$procmux$16458_Y ;
  wire \$procmux$16459_CMP ;
  wire \$procmux$16462_Y ;
  wire \$procmux$16463_CMP ;
  wire \$procmux$16465_CMP ;
  wire \$procmux$16467_Y ;
  wire \$procmux$16468_CMP ;
  wire [31:0] \$procmux$16473_Y ;
  wire \$procmux$16474_CMP ;
  wire \$procmux$16476_CMP ;
  wire [31:0] \$procmux$16478_Y ;
  wire \$procmux$16479_CMP ;
  wire [6:0] \$procmux$16486_Y ;
  wire \$procmux$16487_CMP ;
  wire [6:0] \$procmux$16489_Y ;
  wire \$procmux$16490_CMP ;
  wire \$procmux$16494_Y ;
  wire \$procmux$16495_CMP ;
  wire \$procmux$16497_CMP ;
  wire \$procmux$16499_Y ;
  wire \$procmux$16500_CMP ;
  wire [31:0] \$procmux$16508_Y ;
  wire \$procmux$16509_CMP ;
  wire [6:0] \$procmux$16517_Y ;
  wire \$procmux$16518_CMP ;
  wire [2:0] \$procmux$16526_Y ;
  wire \$procmux$16527_CMP ;
  wire [1:0] \$procmux$16535_Y ;
  wire \$procmux$16536_CMP ;
  wire \$procmux$16544_Y ;
  wire \$procmux$16545_CMP ;
  wire \$procmux$16553_Y ;
  wire \$procmux$16554_CMP ;
  wire \$procmux$16562_Y ;
  wire \$procmux$16563_CMP ;
  wire [40:0] \$procmux$16564_Y ;
  wire \$procmux$16565_CMP ;
  wire [40:0] \$procmux$16566_Y ;
  wire \$procmux$16567_CMP ;
  wire [40:0] \$procmux$16570_Y ;
  wire \$procmux$16571_CMP ;
  wire [40:0] \$procmux$16573_Y ;
  wire \$procmux$16574_CMP ;
  wire [40:0] \$procmux$16577_Y ;
  wire \$procmux$16578_CMP ;
  wire [40:0] \$procmux$16579_Y ;
  wire \$procmux$16580_CMP ;
  wire [40:0] \$procmux$16582_Y ;
  wire \$procmux$16583_CMP ;
  wire [40:0] \$procmux$16584_Y ;
  wire \$procmux$16585_CMP ;
  wire [40:0] \$procmux$16586_Y ;
  wire \$procmux$16587_CMP ;
  wire [40:0] \$procmux$16589_Y ;
  wire \$procmux$16590_CMP ;
  wire [40:0] \$procmux$16593_Y ;
  wire \$procmux$16594_CMP ;
  wire [40:0] \$procmux$16595_Y ;
  wire \$procmux$16596_CMP ;
  wire [40:0] \$procmux$16597_Y ;
  wire \$procmux$16598_CMP ;
  wire [40:0] \$procmux$16600_Y ;
  wire \$procmux$16601_CMP ;
  wire [40:0] \$procmux$16603_Y ;
  wire \$procmux$16604_CMP ;
  wire [40:0] \$procmux$16605_Y ;
  wire \$procmux$16606_CMP ;
  wire [40:0] \$procmux$16608_Y ;
  wire \$procmux$16609_CMP ;
  wire [40:0] \$procmux$16611_Y ;
  wire \$procmux$16612_CMP ;
  wire [40:0] \$procmux$16614_Y ;
  wire \$procmux$16615_CMP ;
  wire [40:0] \$procmux$16619_Y ;
  wire \$procmux$16620_CMP ;
  wire [31:0] \$procmux$16621_Y ;
  wire \$procmux$16622_CMP ;
  wire [31:0] \$procmux$16623_Y ;
  wire \$procmux$16624_CMP ;
  wire [31:0] \$procmux$16627_Y ;
  wire \$procmux$16628_CMP ;
  wire [31:0] \$procmux$16630_Y ;
  wire \$procmux$16631_CMP ;
  wire [31:0] \$procmux$16632_Y ;
  wire \$procmux$16633_CMP ;
  wire [31:0] \$procmux$16635_Y ;
  wire \$procmux$16636_CMP ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:166.22-168.16" */
  wire [2:0] \$state_d$30 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" */
  wire [2:0] \$state_d$31 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  wire [2:0] \$state_d$32 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:175.11-177.14" */
  wire [2:0] \$state_d$35 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire [2:0] \$state_d$39 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:206.11-208.14" */
  wire [2:0] \$state_d$43 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  wire [2:0] \$state_d$46 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:225.11-227.14" */
  wire [2:0] \$state_d$49 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire [2:0] \$state_d$51 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  wire [2:0] \$state_d$84 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.15" */
  wire [6:0] address_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.26" */
  wire [6:0] address_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:56.9" */
  wire capture;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:22.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.16" */
  wire [31:0] data_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.24" */
  wire [31:0] data_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:129.10" */
  wire [40:0] dmi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:54.9" */
  wire dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:108.18" */
  wire [40:0] dmi_req;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:29.24" */
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:109.18" */
  wire dmi_req_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:31.24" */
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:110.18" */
  wire dmi_req_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:30.24" */
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:112.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:33.24" */
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:114.18" */
  wire dmi_resp_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:34.24" */
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:113.18" */
  wire dmi_resp_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:35.24" */
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:28.24" */
  output dmi_rst_no;
  wire dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:105.16" */
  wire dmi_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:106.16" */
  wire dmi_tdo;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.28" */
  wire [40:0] dr_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.34" */
  wire [40:0] dr_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.15" */
  wire [31:0] dtmcs_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.24" */
  wire [31:0] dtmcs_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:60.9" */
  wire dtmcs_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.15" */
  wire [1:0] error_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:137.9" */
  wire error_dmi_busy;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:138.9" */
  wire error_dmi_op_failed;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.24" */
  wire [1:0] error_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:52.9" */
  wire jtag_dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:23.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:57.9" */
  wire shift;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.11" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.20" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:51.9" */
  wire tck;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:37.24" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:40.24" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:41.24" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:58.9" */
  wire tdi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:42.24" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:24.24" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:38.24" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:39.24" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:55.9" */
  wire update;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(dtmcs_select),
    .B(update),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(trst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(trst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$5 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(state_q),
    .B(3'h3),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$18  (
    .A(2'h1),
    .B(2'h2),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(dtmcs_q[17]),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(dmi_select),
    .B(update),
    .Y(\$21 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(error_q),
    .Y(\$23 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$21 ),
    .B(\$23 ),
    .Y(\$25 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(dmi[1:0]),
    .B(2'h1),
    .Y(\$27 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(dmi[1:0]),
    .B(2'h2),
    .Y(\$29 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(jtag_dmi_clear),
    .B(\$3 ),
    .Y(\$5 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(state_q),
    .Y(\$57 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(update),
    .B(\$57 ),
    .Y(\$59 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(state_q),
    .B(3'h1),
    .Y(\$auto$rtlil.cc:3011:Eq$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(state_q),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3011:Eq$9 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A({ \$auto$rtlil.cc:3011:Eq$9 , \$auto$rtlil.cc:3011:Eq$8  }),
    .Y(\$auto$rtlil.cc:2964:ReduceBool$10 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(capture),
    .B(\$auto$rtlil.cc:2964:ReduceBool$10 ),
    .Y(\$65 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(error_q),
    .Y(\$68 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$error_dmi_busy$66 ),
    .B(\$68 ),
    .Y(\$70 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(error_q),
    .Y(\$73 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$error_dmi_op_failed$55 ),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(update),
    .B(dtmcs_q[16]),
    .Y(\$78 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(\$78 ),
    .B(dtmcs_select),
    .Y(\$80 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(error_q),
    .Y(\$91 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(error_dmi_busy),
    .Y(\$93 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$91 ),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(error_q),
    .B(2'h3),
    .Y(\$97 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(\$97 ),
    .B(error_dmi_busy),
    .Y(\$99 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$address_q  (
    .AD(7'h00),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(address_d),
    .Q(address_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$data_q  (
    .AD(32'd0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(data_d),
    .Q(data_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd41)
  ) \$driver$dr_q  (
    .AD(41'h00000000000),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dr_d),
    .Q(dr_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$dtmcs_q.abits  (
    .AD(6'h00),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[9:4]),
    .Q(dtmcs_q[9:4])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmihardreset  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[17]),
    .Q(dtmcs_q[17])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmireset  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[16]),
    .Q(dtmcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$dtmcs_q.dmistat  (
    .AD(2'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[11:10]),
    .Q(dtmcs_q[11:10])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$dtmcs_q.idle  (
    .AD(3'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[14:12]),
    .Q(dtmcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$dtmcs_q.version  (
    .AD(4'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[3:0]),
    .Q(dtmcs_q[3:0])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.zero0  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[15]),
    .Q(dtmcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd14)
  ) \$driver$dtmcs_q.zero1  (
    .AD(14'h0000),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[31:18]),
    .Q(dtmcs_q[31:18])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$error_q  (
    .AD(2'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(error_d),
    .Q(error_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$state_q  (
    .AD(3'h0),
    .ALOAD(trst_ni),
    .CLK(tck),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:254.9-254.30|rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16155  (
    .A(\$error_d$76 ),
    .B(2'h0),
    .S(\$procmux$16156_CMP ),
    .Y(\$procmux$16155_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16163  (
    .A(\$procmux$16155_Y ),
    .B(2'hx),
    .S(\$procmux$16164_CMP ),
    .Y(\$procmux$16163_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:249.9-249.31|rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16165  (
    .A(\$error_d$71 ),
    .B(2'h2),
    .S(\$procmux$16166_CMP ),
    .Y(\$procmux$16165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16172  (
    .A(\$procmux$16165_Y ),
    .B(2'hx),
    .S(\$procmux$16173_CMP ),
    .Y(\$procmux$16172_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:245.9-245.27|rtl/riscv-dbg/dmi_jtag.sv:244.7-246.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16174  (
    .A(error_q),
    .B(2'h3),
    .S(\$procmux$16175_CMP ),
    .Y(\$procmux$16174_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16180  (
    .A(\$procmux$16174_Y ),
    .B(2'hx),
    .S(\$procmux$16181_CMP ),
    .Y(\$procmux$16180_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:241.9-241.31|rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16182  (
    .A(\$error_dmi_busy$60 ),
    .B(1'h1),
    .S(\$procmux$16183_CMP ),
    .Y(\$procmux$16182_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16187  (
    .A(\$procmux$16182_Y ),
    .B(1'hx),
    .S(\$procmux$16188_CMP ),
    .Y(\$procmux$16187_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:234.9-234.31|rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16189  (
    .A(\$error_dmi_busy$54 ),
    .B(1'h1),
    .S(\$procmux$16190_CMP ),
    .Y(\$procmux$16189_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16193  (
    .A(\$procmux$16189_Y ),
    .B(1'hx),
    .S(\$procmux$16194_CMP ),
    .Y(\$procmux$16193_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:226.13-226.28|rtl/riscv-dbg/dmi_jtag.sv:225.11-227.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16195  (
    .A(state_q),
    .B(3'h0),
    .S(\$procmux$16196_CMP ),
    .Y(\$procmux$16195_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$16198  (
    .A(\$procmux$16195_Y ),
    .B(15'hxxxx),
    .S({ \$procmux$16203_CMP , \$procmux$16202_CMP , \$procmux$16201_CMP , \$procmux$16200_CMP , \$procmux$16199_CMP  }),
    .Y(\$procmux$16198_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16199_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16199_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16200_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$16200_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16201_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16201_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:173.15-178.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16202_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$16202_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16203_CMP0  (
    .A(state_q),
    .Y(\$procmux$16203_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16205  (
    .A(\$procmux$16198_Y ),
    .B(3'hx),
    .S(\$procmux$16206_CMP ),
    .Y(\$procmux$16205_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16210  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$16211_CMP ),
    .Y(\$procmux$16210_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16211_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$procmux$16211_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16212  (
    .A(1'hx),
    .B(\$procmux$16210_Y ),
    .S(\$procmux$16213_CMP ),
    .Y(\$procmux$16212_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16214  (
    .A(1'hx),
    .B(\$procmux$16212_Y ),
    .S(\$procmux$16215_CMP ),
    .Y(\$procmux$16214_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16215_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16215_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16217  (
    .A(\$procmux$16214_Y ),
    .B(1'hx),
    .S(\$procmux$16218_CMP ),
    .Y(\$procmux$16217_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16221  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$16222_CMP ),
    .Y(\$procmux$16221_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16222_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$procmux$16222_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16223  (
    .A(1'hx),
    .B(\$procmux$16221_Y ),
    .S(\$procmux$16224_CMP ),
    .Y(\$procmux$16223_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16225  (
    .A(1'hx),
    .B(\$procmux$16223_Y ),
    .S(\$procmux$16226_CMP ),
    .Y(\$procmux$16225_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16226_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16226_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16228  (
    .A(\$procmux$16225_Y ),
    .B(1'hx),
    .S(\$procmux$16229_CMP ),
    .Y(\$procmux$16228_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16232  (
    .A(1'h0),
    .B(\$error_dmi_op_failed$45 ),
    .S(\$procmux$16233_CMP ),
    .Y(\$procmux$16232_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16234  (
    .A(1'hx),
    .B(\$procmux$16232_Y ),
    .S(\$procmux$16235_CMP ),
    .Y(\$procmux$16234_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16235_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16235_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16237  (
    .A(\$procmux$16234_Y ),
    .B(1'hx),
    .S(\$procmux$16238_CMP ),
    .Y(\$procmux$16237_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16241  (
    .A(1'h0),
    .B(\$error_dmi_busy$44 ),
    .S(\$procmux$16242_CMP ),
    .Y(\$procmux$16241_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16243  (
    .A(1'hx),
    .B(\$procmux$16241_Y ),
    .S(\$procmux$16244_CMP ),
    .Y(\$procmux$16243_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16244_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16244_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16246  (
    .A(\$procmux$16243_Y ),
    .B(1'hx),
    .S(\$procmux$16247_CMP ),
    .Y(\$procmux$16246_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16250  (
    .A(state_q),
    .B(3'h0),
    .S(\$procmux$16251_CMP ),
    .Y(\$procmux$16250_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16252  (
    .A(3'hx),
    .B(\$procmux$16250_Y ),
    .S(\$procmux$16253_CMP ),
    .Y(\$procmux$16252_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16253_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16253_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16255  (
    .A(\$procmux$16252_Y ),
    .B(3'hx),
    .S(\$procmux$16256_CMP ),
    .Y(\$procmux$16255_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:207.13-207.38|rtl/riscv-dbg/dmi_jtag.sv:206.11-208.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16259  (
    .A(state_q),
    .B(3'h4),
    .S(\$procmux$16260_CMP ),
    .Y(\$procmux$16259_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16261  (
    .A(3'hx),
    .B(\$procmux$16259_Y ),
    .S(\$procmux$16262_CMP ),
    .Y(\$procmux$16261_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16262_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$16262_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16264  (
    .A(\$procmux$16261_Y ),
    .B(3'hx),
    .S(\$procmux$16265_CMP ),
    .Y(\$procmux$16264_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$16270  (
    .A(32'd3131949278),
    .B({ dmi_resp[33:2], 64'hdeadbeefb051b051 }),
    .S({ \$procmux$16273_CMP , \$procmux$16272_CMP , \$procmux$16271_CMP  }),
    .Y(\$procmux$16270_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16271_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$procmux$16271_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:187.28-190.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16272_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$procmux$16272_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:185.17-185.40|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16273_CMP0  (
    .A(dmi_resp[1:0]),
    .Y(\$procmux$16273_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16274  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16270_Y ),
    .S(\$procmux$16275_CMP ),
    .Y(\$procmux$16274_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16276  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16274_Y ),
    .S(\$procmux$16277_CMP ),
    .Y(\$procmux$16276_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16277_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16277_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16279  (
    .A(\$procmux$16276_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$16280_CMP ),
    .Y(\$procmux$16279_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:187.28-190.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16286  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$16287_CMP ),
    .Y(\$procmux$16286_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:187.28-190.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16287_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$procmux$16287_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16288  (
    .A(1'hx),
    .B(\$procmux$16286_Y ),
    .S(\$procmux$16289_CMP ),
    .Y(\$procmux$16288_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16290  (
    .A(1'hx),
    .B(\$procmux$16288_Y ),
    .S(\$procmux$16291_CMP ),
    .Y(\$procmux$16290_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16291_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16291_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16293  (
    .A(\$procmux$16290_Y ),
    .B(1'hx),
    .S(\$procmux$16294_CMP ),
    .Y(\$procmux$16293_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16299  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$16300_CMP ),
    .Y(\$procmux$16299_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16300_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$procmux$16300_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16301  (
    .A(1'hx),
    .B(\$procmux$16299_Y ),
    .S(\$procmux$16302_CMP ),
    .Y(\$procmux$16301_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16303  (
    .A(1'hx),
    .B(\$procmux$16301_Y ),
    .S(\$procmux$16304_CMP ),
    .Y(\$procmux$16303_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16304_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16304_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16306  (
    .A(\$procmux$16303_Y ),
    .B(1'hx),
    .S(\$procmux$16307_CMP ),
    .Y(\$procmux$16306_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16312  (
    .A(1'h0),
    .B(\$error_dmi_op_failed$38 ),
    .S(\$procmux$16313_CMP ),
    .Y(\$procmux$16312_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16314  (
    .A(1'hx),
    .B(\$procmux$16312_Y ),
    .S(\$procmux$16315_CMP ),
    .Y(\$procmux$16314_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16315_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16315_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16317  (
    .A(\$procmux$16314_Y ),
    .B(1'hx),
    .S(\$procmux$16318_CMP ),
    .Y(\$procmux$16317_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16323  (
    .A(1'h0),
    .B(\$error_dmi_busy$37 ),
    .S(\$procmux$16324_CMP ),
    .Y(\$procmux$16323_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16325  (
    .A(1'hx),
    .B(\$procmux$16323_Y ),
    .S(\$procmux$16326_CMP ),
    .Y(\$procmux$16325_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16326_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16326_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16328  (
    .A(\$procmux$16325_Y ),
    .B(1'hx),
    .S(\$procmux$16329_CMP ),
    .Y(\$procmux$16328_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16334  (
    .A(data_q),
    .B(\$data_d$36 ),
    .S(\$procmux$16335_CMP ),
    .Y(\$procmux$16334_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16336  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16334_Y ),
    .S(\$procmux$16337_CMP ),
    .Y(\$procmux$16336_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16337_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16337_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16339  (
    .A(\$procmux$16336_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$16340_CMP ),
    .Y(\$procmux$16339_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16345  (
    .A(state_q),
    .B(3'h0),
    .S(\$procmux$16346_CMP ),
    .Y(\$procmux$16345_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16347  (
    .A(3'hx),
    .B(\$procmux$16345_Y ),
    .S(\$procmux$16348_CMP ),
    .Y(\$procmux$16347_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16348_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16348_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16350  (
    .A(\$procmux$16347_Y ),
    .B(3'hx),
    .S(\$procmux$16351_CMP ),
    .Y(\$procmux$16350_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:176.13-176.37|rtl/riscv-dbg/dmi_jtag.sv:175.11-177.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16356  (
    .A(state_q),
    .B(3'h2),
    .S(\$procmux$16357_CMP ),
    .Y(\$procmux$16356_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:173.15-178.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16358  (
    .A(3'hx),
    .B(\$procmux$16356_Y ),
    .S(\$procmux$16359_CMP ),
    .Y(\$procmux$16358_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:173.15-178.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16359_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$16359_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16361  (
    .A(\$procmux$16358_Y ),
    .B(3'hx),
    .S(\$procmux$16362_CMP ),
    .Y(\$procmux$16361_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd3)
  ) \$procmux$16366  (
    .A(\$state_d$49 ),
    .B({ \$state_d$32 , \$state_d$35 , \$state_d$39 , \$state_d$43 , \$state_d$46  }),
    .S({ \$procmux$16375_CMP , \$procmux$16373_CMP , \$procmux$16371_CMP , \$procmux$16369_CMP , \$procmux$16367_CMP  }),
    .Y(\$procmux$16366_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16367_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16367_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16369_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$16369_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16371_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16371_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:173.15-178.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16373_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$16373_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16375_CMP0  (
    .A(state_q),
    .Y(\$procmux$16375_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16377  (
    .A(\$procmux$16366_Y ),
    .B(3'hx),
    .S(\$procmux$16378_CMP ),
    .Y(\$procmux$16377_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:167.15-167.31|rtl/riscv-dbg/dmi_jtag.sv:166.22-168.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16384  (
    .A(state_q),
    .B(3'h3),
    .S(\$procmux$16385_CMP ),
    .Y(\$procmux$16384_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16387  (
    .A(\$procmux$16384_Y ),
    .B(3'hx),
    .S(\$procmux$16388_CMP ),
    .Y(\$procmux$16387_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.64-170.14|rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16389  (
    .A(3'hx),
    .B(\$procmux$16387_Y ),
    .S(\$procmux$16390_CMP ),
    .Y(\$procmux$16389_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16391  (
    .A(3'hx),
    .B(\$procmux$16389_Y ),
    .S(\$procmux$16392_CMP ),
    .Y(\$procmux$16391_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16392_CMP0  (
    .A(state_q),
    .Y(\$procmux$16392_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16394  (
    .A(\$procmux$16391_Y ),
    .B(3'hx),
    .S(\$procmux$16395_CMP ),
    .Y(\$procmux$16394_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16403  (
    .A(\$state_d$30 ),
    .B(3'h1),
    .S(\$procmux$16404_CMP ),
    .Y(\$procmux$16403_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.64-170.14|rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16405  (
    .A(3'hx),
    .B(\$procmux$16403_Y ),
    .S(\$procmux$16406_CMP ),
    .Y(\$procmux$16405_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16407  (
    .A(3'hx),
    .B(\$procmux$16405_Y ),
    .S(\$procmux$16408_CMP ),
    .Y(\$procmux$16407_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16408_CMP0  (
    .A(state_q),
    .Y(\$procmux$16408_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16410  (
    .A(\$procmux$16407_Y ),
    .B(3'hx),
    .S(\$procmux$16411_CMP ),
    .Y(\$procmux$16410_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.64-170.14|rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16418  (
    .A(data_q),
    .B(dr_q[33:2]),
    .S(\$procmux$16419_CMP ),
    .Y(\$procmux$16418_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16420  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16418_Y ),
    .S(\$procmux$16421_CMP ),
    .Y(\$procmux$16420_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16421_CMP0  (
    .A(state_q),
    .Y(\$procmux$16421_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16423  (
    .A(\$procmux$16420_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$16424_CMP ),
    .Y(\$procmux$16423_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.64-170.14|rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16431  (
    .A(address_q),
    .B(dr_q[40:34]),
    .S(\$procmux$16432_CMP ),
    .Y(\$procmux$16431_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16433  (
    .A(7'hxx),
    .B(\$procmux$16431_Y ),
    .S(\$procmux$16434_CMP ),
    .Y(\$procmux$16433_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16434_CMP0  (
    .A(state_q),
    .Y(\$procmux$16434_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16436  (
    .A(\$procmux$16433_Y ),
    .B(7'hxx),
    .S(\$procmux$16437_CMP ),
    .Y(\$procmux$16436_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.64-170.14|rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16444  (
    .A(state_q),
    .B(\$state_d$31 ),
    .S(\$procmux$16445_CMP ),
    .Y(\$procmux$16444_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16446  (
    .A(3'hx),
    .B(\$procmux$16444_Y ),
    .S(\$procmux$16447_CMP ),
    .Y(\$procmux$16446_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16447_CMP0  (
    .A(state_q),
    .Y(\$procmux$16447_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16449  (
    .A(\$procmux$16446_Y ),
    .B(3'hx),
    .S(\$procmux$16450_CMP ),
    .Y(\$procmux$16449_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$16453  (
    .A(1'h0),
    .B({ \$error_dmi_op_failed$42 , \$error_dmi_op_failed$48  }),
    .S({ \$procmux$16456_CMP , \$procmux$16454_CMP  }),
    .Y(\$procmux$16453_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16454_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16454_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16456_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16456_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16458  (
    .A(\$procmux$16453_Y ),
    .B(1'hx),
    .S(\$procmux$16459_CMP ),
    .Y(\$procmux$16458_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$16462  (
    .A(1'h0),
    .B({ \$error_dmi_busy$41 , \$error_dmi_busy$47  }),
    .S({ \$procmux$16465_CMP , \$procmux$16463_CMP  }),
    .Y(\$procmux$16462_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16463_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16463_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16465_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16467  (
    .A(\$procmux$16462_Y ),
    .B(1'hx),
    .S(\$procmux$16468_CMP ),
    .Y(\$procmux$16467_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$16473  (
    .A(data_q),
    .B({ \$data_d$34 , \$data_d$40  }),
    .S({ \$procmux$16476_CMP , \$procmux$16474_CMP  }),
    .Y(\$procmux$16473_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16474_CMP0  (
    .A(state_q),
    .B(3'h2),
    .Y(\$procmux$16474_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16476_CMP0  (
    .A(state_q),
    .Y(\$procmux$16476_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16478  (
    .A(\$procmux$16473_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$16479_CMP ),
    .Y(\$procmux$16478_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16486  (
    .A(address_q),
    .B(\$address_d$33 ),
    .S(\$procmux$16487_CMP ),
    .Y(\$procmux$16486_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16487_CMP0  (
    .A(state_q),
    .Y(\$procmux$16487_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16489  (
    .A(\$procmux$16486_Y ),
    .B(7'hxx),
    .S(\$procmux$16490_CMP ),
    .Y(\$procmux$16489_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$16494  (
    .A(1'h0),
    .B(2'h3),
    .S({ \$procmux$16497_CMP , \$procmux$16495_CMP  }),
    .Y(\$procmux$16494_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:203.16-209.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16495_CMP0  (
    .A(state_q),
    .B(3'h3),
    .Y(\$procmux$16495_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:173.15-178.12|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16497_CMP0  (
    .A(state_q),
    .B(3'h1),
    .Y(\$procmux$16497_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16499  (
    .A(\$procmux$16494_Y ),
    .B(1'hx),
    .S(\$procmux$16500_CMP ),
    .Y(\$procmux$16499_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16508  (
    .A(\$data_d$53 ),
    .B(32'd0),
    .S(\$procmux$16509_CMP ),
    .Y(\$procmux$16508_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16517  (
    .A(\$address_d$52 ),
    .B(7'h00),
    .S(\$procmux$16518_CMP ),
    .Y(\$procmux$16517_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16526  (
    .A(\$state_d$51 ),
    .B(3'h0),
    .S(\$procmux$16527_CMP ),
    .Y(\$procmux$16526_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16535  (
    .A(\$error_d$81 ),
    .B(2'h0),
    .S(\$procmux$16536_CMP ),
    .Y(\$procmux$16535_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16544  (
    .A(\$error_dmi_op_failed$55 ),
    .B(1'h0),
    .S(\$procmux$16545_CMP ),
    .Y(\$procmux$16544_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16553  (
    .A(\$error_dmi_busy$66 ),
    .B(1'h0),
    .S(\$procmux$16554_CMP ),
    .Y(\$procmux$16553_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16562  (
    .A(\$dmi_req_valid$50 ),
    .B(1'h0),
    .S(\$procmux$16563_CMP ),
    .Y(\$procmux$16562_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:280.11-280.47|rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16564  (
    .A(\$dr_d$103 ),
    .B({ tdi, dr_q[40:1] }),
    .S(\$procmux$16565_CMP ),
    .Y(\$procmux$16564_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16566  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16564_Y ),
    .S(\$procmux$16567_CMP ),
    .Y(\$procmux$16566_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16570  (
    .A(\$procmux$16566_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16571_CMP ),
    .Y(\$procmux$16570_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16573  (
    .A(\$dr_d$103 ),
    .B(\$dr_d$104 ),
    .S(\$procmux$16574_CMP ),
    .Y(\$procmux$16573_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16577  (
    .A(\$procmux$16573_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16578_CMP ),
    .Y(\$procmux$16577_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:273.13-273.49|rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16579  (
    .A(dr_q),
    .B({ address_q, data_q, 2'h3 }),
    .S(\$procmux$16580_CMP ),
    .Y(\$procmux$16579_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16582  (
    .A(\$procmux$16579_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16583_CMP ),
    .Y(\$procmux$16582_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16584  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16582_Y ),
    .S(\$procmux$16585_CMP ),
    .Y(\$procmux$16584_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16586  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16584_Y ),
    .S(\$procmux$16587_CMP ),
    .Y(\$procmux$16586_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16589  (
    .A(\$procmux$16586_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16590_CMP ),
    .Y(\$procmux$16589_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16593  (
    .A(\$dr_d$100 ),
    .B({ address_q, data_q, 2'h0 }),
    .S(\$procmux$16594_CMP ),
    .Y(\$procmux$16593_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16595  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16593_Y ),
    .S(\$procmux$16596_CMP ),
    .Y(\$procmux$16595_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16597  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16595_Y ),
    .S(\$procmux$16598_CMP ),
    .Y(\$procmux$16597_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16600  (
    .A(\$procmux$16597_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16601_CMP ),
    .Y(\$procmux$16600_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16603  (
    .A(dr_q),
    .B(\$dr_d$101 ),
    .S(\$procmux$16604_CMP ),
    .Y(\$procmux$16603_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16605  (
    .A(41'hxxxxxxxxxxx),
    .B(\$procmux$16603_Y ),
    .S(\$procmux$16606_CMP ),
    .Y(\$procmux$16605_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16608  (
    .A(\$procmux$16605_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16609_CMP ),
    .Y(\$procmux$16608_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16611  (
    .A(dr_q),
    .B(\$dr_d$102 ),
    .S(\$procmux$16612_CMP ),
    .Y(\$procmux$16611_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16614  (
    .A(\$procmux$16611_Y ),
    .B(41'hxxxxxxxxxxx),
    .S(\$procmux$16615_CMP ),
    .Y(\$procmux$16614_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16619  (
    .A(\$dr_d$105 ),
    .B(41'h00000000000),
    .S(\$procmux$16620_CMP ),
    .Y(\$procmux$16619_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.25-89.61|rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16621  (
    .A(\$dtmcs_d$8 ),
    .B({ tdi, \$10 [30:0] }),
    .S(\$procmux$16622_CMP ),
    .Y(\$procmux$16621_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16623  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16621_Y ),
    .S(\$procmux$16624_CMP ),
    .Y(\$procmux$16623_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16627  (
    .A(\$dtmcs_d$8 ),
    .B(\$dtmcs_d$11 ),
    .S(\$procmux$16628_CMP ),
    .Y(\$procmux$16627_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:75.9-84.23|rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16630  (
    .A(dtmcs_q),
    .B({ 20'h00001, error_q, 10'h071 }),
    .S(\$procmux$16631_CMP ),
    .Y(\$procmux$16630_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16632  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$16630_Y ),
    .S(\$procmux$16633_CMP ),
    .Y(\$procmux$16632_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16635  (
    .A(dtmcs_q),
    .B(\$dtmcs_d$7 ),
    .S(\$procmux$16636_CMP ),
    .Y(\$procmux$16635_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:331.11" */
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i(dmi_req),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:308.5" */
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dmi_tdo),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign dmi_clear = \$5 ;
  assign dtmcs_d = \$dtmcs_d$12 ;
  assign dmi = dr_q;
  assign dmi_req[40:34] = address_q;
  assign dmi_req[31:0] = data_q;
  assign dmi_req[33:32] = \$auto$rtlil.cc:3092:Mux$7 ;
  assign dmi_resp_ready = 1'h1;
  assign error_d = \$error_d$82 ;
  assign dmi_req_valid = \$dmi_req_valid$83 ;
  assign state_d = \$state_d$84 ;
  assign address_d = \$address_d$85 ;
  assign data_d = \$data_d$86 ;
  assign error_dmi_busy = \$error_dmi_busy$87 ;
  assign error_dmi_op_failed = \$error_dmi_op_failed$88 ;
  assign dmi_tdo = dr_q[0];
  assign dr_d = \$dr_d$106 ;
  assign \$procmux$16156_CMP  = \$80 ;
  assign \$procmux$16164_CMP  = dmi_clear;
  assign \$error_d$81  = \$procmux$16163_Y ;
  assign \$procmux$16166_CMP  = \$75 ;
  assign \$procmux$16173_CMP  = dmi_clear;
  assign \$error_d$76  = \$procmux$16172_Y ;
  assign \$procmux$16175_CMP  = \$70 ;
  assign \$procmux$16181_CMP  = dmi_clear;
  assign \$error_d$71  = \$procmux$16180_Y ;
  assign \$procmux$16183_CMP  = \$65 ;
  assign \$procmux$16188_CMP  = dmi_clear;
  assign \$error_dmi_busy$66  = \$procmux$16187_Y ;
  assign \$procmux$16190_CMP  = \$59 ;
  assign \$procmux$16194_CMP  = dmi_clear;
  assign \$error_dmi_busy$60  = \$procmux$16193_Y ;
  assign \$procmux$16196_CMP  = dmi_resp_valid;
  assign \$procmux$16206_CMP  = dmi_clear;
  assign \$state_d$49  = \$procmux$16205_Y ;
  assign \$procmux$16213_CMP  = dmi_resp_valid;
  assign \$procmux$16218_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$45  = \$procmux$16217_Y ;
  assign \$procmux$16224_CMP  = dmi_resp_valid;
  assign \$procmux$16229_CMP  = dmi_clear;
  assign \$error_dmi_busy$44  = \$procmux$16228_Y ;
  assign \$procmux$16233_CMP  = dmi_resp_valid;
  assign \$procmux$16238_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$48  = \$procmux$16237_Y ;
  assign \$procmux$16242_CMP  = dmi_resp_valid;
  assign \$procmux$16247_CMP  = dmi_clear;
  assign \$error_dmi_busy$47  = \$procmux$16246_Y ;
  assign \$procmux$16251_CMP  = dmi_resp_valid;
  assign \$procmux$16256_CMP  = dmi_clear;
  assign \$state_d$46  = \$procmux$16255_Y ;
  assign \$procmux$16260_CMP  = dmi_req_ready;
  assign \$procmux$16265_CMP  = dmi_clear;
  assign \$state_d$43  = \$procmux$16264_Y ;
  assign \$procmux$16275_CMP  = dmi_resp_valid;
  assign \$procmux$16280_CMP  = dmi_clear;
  assign \$data_d$36  = \$procmux$16279_Y ;
  assign \$procmux$16289_CMP  = dmi_resp_valid;
  assign \$procmux$16294_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$38  = \$procmux$16293_Y ;
  assign \$procmux$16302_CMP  = dmi_resp_valid;
  assign \$procmux$16307_CMP  = dmi_clear;
  assign \$error_dmi_busy$37  = \$procmux$16306_Y ;
  assign \$procmux$16313_CMP  = dmi_resp_valid;
  assign \$procmux$16318_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$42  = \$procmux$16317_Y ;
  assign \$procmux$16324_CMP  = dmi_resp_valid;
  assign \$procmux$16329_CMP  = dmi_clear;
  assign \$error_dmi_busy$41  = \$procmux$16328_Y ;
  assign \$procmux$16335_CMP  = dmi_resp_valid;
  assign \$procmux$16340_CMP  = dmi_clear;
  assign \$data_d$40  = \$procmux$16339_Y ;
  assign \$procmux$16346_CMP  = dmi_resp_valid;
  assign \$procmux$16351_CMP  = dmi_clear;
  assign \$state_d$39  = \$procmux$16350_Y ;
  assign \$procmux$16357_CMP  = dmi_req_ready;
  assign \$procmux$16362_CMP  = dmi_clear;
  assign \$state_d$35  = \$procmux$16361_Y ;
  assign \$procmux$16378_CMP  = dmi_clear;
  assign \$state_d$51  = \$procmux$16377_Y ;
  assign \$procmux$16385_CMP  = \$29 ;
  assign \$procmux$16388_CMP  = \$27 ;
  assign \$procmux$16390_CMP  = \$25 ;
  assign \$procmux$16395_CMP  = dmi_clear;
  assign \$state_d$30  = \$procmux$16394_Y ;
  assign \$procmux$16404_CMP  = \$27 ;
  assign \$procmux$16406_CMP  = \$25 ;
  assign \$procmux$16411_CMP  = dmi_clear;
  assign \$state_d$31  = \$procmux$16410_Y ;
  assign \$procmux$16419_CMP  = \$25 ;
  assign \$procmux$16424_CMP  = dmi_clear;
  assign \$data_d$34  = \$procmux$16423_Y ;
  assign \$procmux$16432_CMP  = \$25 ;
  assign \$procmux$16437_CMP  = dmi_clear;
  assign \$address_d$33  = \$procmux$16436_Y ;
  assign \$procmux$16445_CMP  = \$25 ;
  assign \$procmux$16450_CMP  = dmi_clear;
  assign \$state_d$32  = \$procmux$16449_Y ;
  assign \$procmux$16459_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$55  = \$procmux$16458_Y ;
  assign \$procmux$16468_CMP  = dmi_clear;
  assign \$error_dmi_busy$54  = \$procmux$16467_Y ;
  assign \$procmux$16479_CMP  = dmi_clear;
  assign \$data_d$53  = \$procmux$16478_Y ;
  assign \$procmux$16490_CMP  = dmi_clear;
  assign \$address_d$52  = \$procmux$16489_Y ;
  assign \$procmux$16500_CMP  = dmi_clear;
  assign \$dmi_req_valid$50  = \$procmux$16499_Y ;
  assign \$procmux$16509_CMP  = dmi_clear;
  assign \$data_d$86  = \$procmux$16508_Y ;
  assign \$procmux$16518_CMP  = dmi_clear;
  assign \$address_d$85  = \$procmux$16517_Y ;
  assign \$procmux$16527_CMP  = dmi_clear;
  assign \$state_d$84  = \$procmux$16526_Y ;
  assign \$procmux$16536_CMP  = dmi_clear;
  assign \$error_d$82  = \$procmux$16535_Y ;
  assign \$procmux$16545_CMP  = dmi_clear;
  assign \$error_dmi_op_failed$88  = \$procmux$16544_Y ;
  assign \$procmux$16554_CMP  = dmi_clear;
  assign \$error_dmi_busy$87  = \$procmux$16553_Y ;
  assign \$procmux$16563_CMP  = dmi_clear;
  assign \$dmi_req_valid$83  = \$procmux$16562_Y ;
  assign \$procmux$16565_CMP  = dmi_select;
  assign \$procmux$16567_CMP  = shift;
  assign \$procmux$16571_CMP  = dmi_clear;
  assign \$dr_d$104  = \$procmux$16570_Y ;
  assign \$procmux$16574_CMP  = shift;
  assign \$procmux$16578_CMP  = dmi_clear;
  assign \$dr_d$105  = \$procmux$16577_Y ;
  assign \$procmux$16580_CMP  = \$99 ;
  assign \$procmux$16583_CMP  = \$95 ;
  assign \$procmux$16585_CMP  = dmi_select;
  assign \$procmux$16587_CMP  = capture;
  assign \$procmux$16590_CMP  = dmi_clear;
  assign \$dr_d$100  = \$procmux$16589_Y ;
  assign \$procmux$16594_CMP  = \$95 ;
  assign \$procmux$16596_CMP  = dmi_select;
  assign \$procmux$16598_CMP  = capture;
  assign \$procmux$16601_CMP  = dmi_clear;
  assign \$dr_d$101  = \$procmux$16600_Y ;
  assign \$procmux$16604_CMP  = dmi_select;
  assign \$procmux$16606_CMP  = capture;
  assign \$procmux$16609_CMP  = dmi_clear;
  assign \$dr_d$102  = \$procmux$16608_Y ;
  assign \$procmux$16612_CMP  = capture;
  assign \$procmux$16615_CMP  = dmi_clear;
  assign \$dr_d$103  = \$procmux$16614_Y ;
  assign \$procmux$16620_CMP  = dmi_clear;
  assign \$dr_d$106  = \$procmux$16619_Y ;
  assign \$procmux$16622_CMP  = dtmcs_select;
  assign \$procmux$16624_CMP  = shift;
  assign \$dtmcs_d$11  = \$procmux$16623_Y ;
  assign \$procmux$16628_CMP  = shift;
  assign \$dtmcs_d$12  = \$procmux$16627_Y ;
  assign \$procmux$16631_CMP  = dtmcs_select;
  assign \$procmux$16633_CMP  = capture;
  assign \$dtmcs_d$7  = \$procmux$16632_Y ;
  assign \$procmux$16636_CMP  = capture;
  assign \$dtmcs_d$8  = \$procmux$16635_Y ;
  assign \$10  = { 1'h0, dtmcs_q[31:1] };
  assign \$auto$rtlil.cc:2965:LogicNot$6  = trst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$12  = trst_ni;
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" */
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire [31:0] \$15 ;
  wire \$34 ;
  wire \$auto$rtlil.cc:2965:LogicNot$212 ;
  wire \$auto$rtlil.cc:2965:LogicNot$213 ;
  wire \$auto$rtlil.cc:2965:LogicNot$214 ;
  wire \$auto$rtlil.cc:2965:LogicNot$215 ;
  wire \$auto$rtlil.cc:2965:LogicNot$232 ;
  wire \$auto$rtlil.cc:2965:LogicNot$233 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$216 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$217 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$218 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$219 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$220 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$221 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$222 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$223 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$224 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$225 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$226 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$227 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$228 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$229 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$230 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$231 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  wire \$bypass_d$11 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire \$bypass_d$13 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  wire \$bypass_d$17 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire \$bypass_d$19 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  wire \$bypass_d$21 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  wire \$bypass_select$24 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$capture_dr$55 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$capture_ir$56 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  wire \$dmi_select_o$26 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  wire \$dtmcs_select_o$25 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  wire [31:0] \$idcode_d$10 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire [31:0] \$idcode_d$12 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  wire [31:0] \$idcode_d$16 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire [31:0] \$idcode_d$18 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  wire [31:0] \$idcode_d$20 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  wire \$idcode_select$23 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:93.5-95.8" */
  wire [4:0] \$jtag_ir_d$3 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  wire [4:0] \$jtag_ir_d$5 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:83.5-85.8" */
  wire [4:0] \$jtag_ir_shift_d$1 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  wire [4:0] \$jtag_ir_shift_d$2 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  wire [4:0] \$jtag_ir_shift_d$4 ;
  wire \$procmux$14106_Y ;
  wire \$procmux$14107_CMP ;
  wire \$procmux$14108_CMP ;
  wire \$procmux$14109_CMP ;
  wire \$procmux$14111_Y ;
  wire \$procmux$14112_CMP ;
  wire \$procmux$14115_Y ;
  wire \$procmux$14116_CMP ;
  wire \$procmux$14119_Y ;
  wire \$procmux$14120_CMP ;
  wire \$procmux$14124_Y ;
  wire \$procmux$14125_CMP ;
  wire \$procmux$14128_Y ;
  wire \$procmux$14129_CMP ;
  wire \$procmux$14130_CMP ;
  wire \$procmux$14131_CMP ;
  wire \$procmux$14136_Y ;
  wire \$procmux$14137_CMP ;
  wire \$procmux$14138_Y ;
  wire \$procmux$14139_CMP ;
  wire [31:0] \$procmux$14142_Y ;
  wire \$procmux$14143_CMP ;
  wire \$procmux$14146_Y ;
  wire \$procmux$14147_CMP ;
  wire \$procmux$14149_Y ;
  wire \$procmux$14150_CMP ;
  wire [31:0] \$procmux$14152_Y ;
  wire \$procmux$14153_CMP ;
  wire [31:0] \$procmux$14154_Y ;
  wire \$procmux$14155_CMP ;
  wire \$procmux$14159_Y ;
  wire \$procmux$14160_CMP ;
  wire [31:0] \$procmux$14164_Y ;
  wire \$procmux$14165_CMP ;
  wire \$procmux$14167_Y ;
  wire \$procmux$14168_CMP ;
  wire \$procmux$14170_Y ;
  wire \$procmux$14171_CMP ;
  wire [31:0] \$procmux$14172_Y ;
  wire \$procmux$14173_CMP ;
  wire [31:0] \$procmux$14174_Y ;
  wire \$procmux$14175_CMP ;
  wire \$procmux$14178_Y ;
  wire \$procmux$14179_CMP ;
  wire [31:0] \$procmux$14182_Y ;
  wire \$procmux$14183_CMP ;
  wire [3:0] \$procmux$14184_Y ;
  wire \$procmux$14185_CMP ;
  wire \$procmux$14186_CMP ;
  wire \$procmux$14187_CMP ;
  wire \$procmux$14188_CMP ;
  wire \$procmux$14189_CMP ;
  wire \$procmux$14190_CMP ;
  wire \$procmux$14191_CMP ;
  wire \$procmux$14192_CMP ;
  wire \$procmux$14193_CMP ;
  wire \$procmux$14194_CMP ;
  wire \$procmux$14195_CMP ;
  wire \$procmux$14196_CMP ;
  wire \$procmux$14197_CMP ;
  wire \$procmux$14198_CMP ;
  wire \$procmux$14199_CMP ;
  wire \$procmux$14200_CMP ;
  wire \$procmux$14216_Y ;
  wire \$procmux$14217_CMP ;
  wire \$procmux$14218_Y ;
  wire \$procmux$14219_CMP ;
  wire \$procmux$14224_Y ;
  wire \$procmux$14225_CMP ;
  wire \$procmux$14231_Y ;
  wire \$procmux$14232_CMP ;
  wire \$procmux$14245_Y ;
  wire \$procmux$14246_CMP ;
  wire \$procmux$14258_Y ;
  wire \$procmux$14259_CMP ;
  wire \$procmux$14267_Y ;
  wire \$procmux$14268_CMP ;
  wire [4:0] \$procmux$14269_Y ;
  wire \$procmux$14270_CMP ;
  wire [4:0] \$procmux$14274_Y ;
  wire \$procmux$14275_CMP ;
  wire [4:0] \$procmux$14279_Y ;
  wire \$procmux$14280_CMP ;
  wire [4:0] \$procmux$14283_Y ;
  wire \$procmux$14284_CMP ;
  wire [4:0] \$procmux$14286_Y ;
  wire \$procmux$14287_CMP ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$shift_dr$54 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$shift_ir$57 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire [3:0] \$tap_state_d$52 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  wire \$tdo_mux$28 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  wire \$tdo_mux$29 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$test_logic_reset$59 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$update_dr$53 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  wire \$update_ir$58 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" */
  wire bypass_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" */
  wire bypass_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:122.16" */
  wire bypass_select;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.30" */
  wire capture_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" */
  wire capture_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" */
  output capture_o;
  wire capture_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" */
  output dmi_clear_o;
  wire dmi_clear_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" */
  output dmi_select_o;
  wire dmi_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" */
  input dmi_tdo_i;
  wire dmi_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" */
  output dtmcs_select_o;
  wire dtmcs_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" */
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" */
  wire [31:0] idcode_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" */
  wire [31:0] idcode_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" */
  wire idcode_select;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" */
  wire [4:0] jtag_ir_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" */
  wire [4:0] jtag_ir_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" */
  wire [4:0] jtag_ir_shift_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" */
  wire [4:0] jtag_ir_shift_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.20" */
  wire shift_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" */
  wire shift_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" */
  output shift_o;
  wire shift_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" */
  wire [3:0] tap_state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" */
  wire [3:0] tap_state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" */
  wire tck_n;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" */
  wire tck_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" */
  output tck_o;
  wire tck_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" */
  output tdi_o;
  wire tdi_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" */
  wire tdo_mux;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.42" */
  wire test_logic_reset;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.9" */
  wire update_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" */
  wire update_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" */
  output update_o;
  wire update_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(trst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$214 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(shift_ir),
    .B(shift_dr),
    .Y(\$34 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$36  (
    .A(4'h1),
    .B(4'h0),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$216 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$37  (
    .A(4'h1),
    .B(4'h2),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$217 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$38  (
    .A(4'h3),
    .B(4'h9),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$218 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$39  (
    .A(4'h4),
    .B(4'h5),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$219 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$40  (
    .A(4'h4),
    .B(4'h5),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$220 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$41  (
    .A(4'h6),
    .B(4'h8),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$221 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$42  (
    .A(4'h6),
    .B(4'h7),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$222 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$43  (
    .A(4'h4),
    .B(4'h8),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$223 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$44  (
    .A(4'h1),
    .B(4'h2),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$224 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$45  (
    .A(4'ha),
    .B(4'h0),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$225 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$46  (
    .A(4'hb),
    .B(4'hc),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$226 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$47  (
    .A(4'hb),
    .B(4'hc),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$227 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$48  (
    .A(4'hd),
    .B(4'hf),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$228 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$49  (
    .A(4'hd),
    .B(4'he),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$229 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$50  (
    .A(4'hb),
    .B(4'hf),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$230 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$51  (
    .A(4'h1),
    .B(4'h2),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$231 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(trst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$232 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(trst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$212 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$bypass_q  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck_i),
    .D(bypass_d),
    .Q(bypass_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$idcode_q  (
    .AD(32'd202137011),
    .ALOAD(trst_ni),
    .CLK(tck_i),
    .D(idcode_d),
    .Q(idcode_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$driver$jtag_ir_q  (
    .AD(5'h01),
    .ALOAD(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_d),
    .Q(jtag_ir_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$driver$jtag_ir_shift_q  (
    .AD(5'h00),
    .ALOAD(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_shift_d),
    .Q(jtag_ir_shift_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$tap_state_q  (
    .AD(4'h1),
    .ALOAD(trst_ni),
    .CLK(tck_i),
    .D(tap_state_d),
    .Q(tap_state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$td_o  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck_n),
    .D(tdo_mux),
    .Q(td_o)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$tdo_oe_o  (
    .AD(1'h0),
    .ALOAD(trst_ni),
    .CLK(tck_n),
    .D(\$34 ),
    .Q(tdo_oe_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$14106  (
    .A(bypass_q),
    .B({ idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }),
    .S({ \$procmux$14109_CMP , \$procmux$14108_CMP , \$procmux$14107_CMP  }),
    .Y(\$procmux$14106_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14107_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(\$procmux$14107_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14108_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(\$procmux$14108_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14109_CMP0  (
    .A(jtag_ir_q),
    .B(5'h01),
    .Y(\$procmux$14109_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14111  (
    .A(\$procmux$14106_Y ),
    .B(1'hx),
    .S(\$procmux$14112_CMP ),
    .Y(\$procmux$14111_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14115  (
    .A(\$tdo_mux$28 ),
    .B(jtag_ir_shift_q[0]),
    .S(\$procmux$14116_CMP ),
    .Y(\$procmux$14115_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:159.18-159.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14119  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14120_CMP ),
    .Y(\$procmux$14119_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:159.18-159.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14120_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(\$procmux$14120_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:158.18-158.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14124  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14125_CMP ),
    .Y(\$procmux$14124_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:158.18-158.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14125_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(\$procmux$14125_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:159.18-159.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$14128  (
    .A(1'h1),
    .B(3'h0),
    .S({ \$procmux$14131_CMP , \$procmux$14130_CMP , \$procmux$14129_CMP  }),
    .Y(\$procmux$14128_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:159.18-159.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14129_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(\$procmux$14129_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:158.18-158.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14130_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(\$procmux$14130_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:157.18-157.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14131_CMP0  (
    .A(jtag_ir_q),
    .B(5'h01),
    .Y(\$procmux$14131_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:157.18-157.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14136  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14137_CMP ),
    .Y(\$procmux$14136_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:157.18-157.40|rtl/riscv-dbg/dmi_jtag_tap.sv:155.5-162.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14137_CMP0  (
    .A(jtag_ir_q),
    .B(5'h01),
    .Y(\$procmux$14137_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14138  (
    .A(\$bypass_d$19 ),
    .B(1'h0),
    .S(\$procmux$14139_CMP ),
    .Y(\$procmux$14138_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14142  (
    .A(\$idcode_d$18 ),
    .B(32'd202137011),
    .S(\$procmux$14143_CMP ),
    .Y(\$procmux$14142_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14146  (
    .A(\$bypass_d$13 ),
    .B(td_i),
    .S(\$procmux$14147_CMP ),
    .Y(\$procmux$14146_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14149  (
    .A(1'hx),
    .B(\$procmux$14146_Y ),
    .S(\$procmux$14150_CMP ),
    .Y(\$procmux$14149_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14152  (
    .A(\$idcode_d$12 ),
    .B({ td_i, \$15 [30:0] }),
    .S(\$procmux$14153_CMP ),
    .Y(\$procmux$14152_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14154  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14152_Y ),
    .S(\$procmux$14155_CMP ),
    .Y(\$procmux$14154_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14159  (
    .A(\$bypass_d$13 ),
    .B(\$bypass_d$17 ),
    .S(\$procmux$14160_CMP ),
    .Y(\$procmux$14159_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14164  (
    .A(\$idcode_d$12 ),
    .B(\$idcode_d$16 ),
    .S(\$procmux$14165_CMP ),
    .Y(\$procmux$14164_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14167  (
    .A(bypass_q),
    .B(1'h0),
    .S(\$procmux$14168_CMP ),
    .Y(\$procmux$14167_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14170  (
    .A(1'hx),
    .B(\$procmux$14167_Y ),
    .S(\$procmux$14171_CMP ),
    .Y(\$procmux$14170_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14172  (
    .A(idcode_q),
    .B(32'd202137011),
    .S(\$procmux$14173_CMP ),
    .Y(\$procmux$14172_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14174  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14172_Y ),
    .S(\$procmux$14175_CMP ),
    .Y(\$procmux$14174_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14178  (
    .A(bypass_q),
    .B(\$bypass_d$11 ),
    .S(\$procmux$14179_CMP ),
    .Y(\$procmux$14178_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14182  (
    .A(idcode_q),
    .B(\$idcode_d$10 ),
    .S(\$procmux$14183_CMP ),
    .Y(\$procmux$14182_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$pmux  #(
    .S_WIDTH(32'd16),
    .WIDTH(32'd4)
  ) \$procmux$14184  (
    .A(4'hx),
    .B({ \$auto$rtlil.cc:3092:Mux$216 , \$auto$rtlil.cc:3092:Mux$217 , \$auto$rtlil.cc:3092:Mux$218 , \$auto$rtlil.cc:3092:Mux$219 , \$auto$rtlil.cc:3092:Mux$220 , \$auto$rtlil.cc:3092:Mux$221 , \$auto$rtlil.cc:3092:Mux$222 , \$auto$rtlil.cc:3092:Mux$223 , \$auto$rtlil.cc:3092:Mux$224 , \$auto$rtlil.cc:3092:Mux$225 , \$auto$rtlil.cc:3092:Mux$226 , \$auto$rtlil.cc:3092:Mux$227 , \$auto$rtlil.cc:3092:Mux$228 , \$auto$rtlil.cc:3092:Mux$229 , \$auto$rtlil.cc:3092:Mux$230 , \$auto$rtlil.cc:3092:Mux$231  }),
    .S({ \$procmux$14200_CMP , \$procmux$14199_CMP , \$procmux$14198_CMP , \$procmux$14197_CMP , \$procmux$14196_CMP , \$procmux$14195_CMP , \$procmux$14194_CMP , \$procmux$14193_CMP , \$procmux$14192_CMP , \$procmux$14191_CMP , \$procmux$14190_CMP , \$procmux$14189_CMP , \$procmux$14188_CMP , \$procmux$14187_CMP , \$procmux$14186_CMP , \$procmux$14185_CMP  }),
    .Y(\$procmux$14184_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14185_CMP0  (
    .A(tap_state_q),
    .B(4'hf),
    .Y(\$procmux$14185_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14186_CMP0  (
    .A(tap_state_q),
    .B(4'he),
    .Y(\$procmux$14186_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14187_CMP0  (
    .A(tap_state_q),
    .B(4'hd),
    .Y(\$procmux$14187_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14188_CMP0  (
    .A(tap_state_q),
    .B(4'hc),
    .Y(\$procmux$14188_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14189_CMP0  (
    .A(tap_state_q),
    .B(4'hb),
    .Y(\$procmux$14189_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14190_CMP0  (
    .A(tap_state_q),
    .B(4'ha),
    .Y(\$procmux$14190_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14191_CMP0  (
    .A(tap_state_q),
    .B(4'h9),
    .Y(\$procmux$14191_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14192_CMP0  (
    .A(tap_state_q),
    .B(4'h8),
    .Y(\$procmux$14192_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14193_CMP0  (
    .A(tap_state_q),
    .B(4'h7),
    .Y(\$procmux$14193_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14194_CMP0  (
    .A(tap_state_q),
    .B(4'h6),
    .Y(\$procmux$14194_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14195_CMP0  (
    .A(tap_state_q),
    .B(4'h5),
    .Y(\$procmux$14195_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14196_CMP0  (
    .A(tap_state_q),
    .B(4'h4),
    .Y(\$procmux$14196_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14197_CMP0  (
    .A(tap_state_q),
    .B(4'h3),
    .Y(\$procmux$14197_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14198_CMP0  (
    .A(tap_state_q),
    .B(4'h2),
    .Y(\$procmux$14198_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14199_CMP0  (
    .A(tap_state_q),
    .B(4'h1),
    .Y(\$procmux$14199_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14200_CMP0  (
    .A(tap_state_q),
    .Y(\$procmux$14200_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14216  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14217_CMP ),
    .Y(\$procmux$14216_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14217_CMP0  (
    .A(tap_state_q),
    .Y(\$procmux$14217_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14218  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14219_CMP ),
    .Y(\$procmux$14218_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14219_CMP0  (
    .A(tap_state_q),
    .B(4'hf),
    .Y(\$procmux$14219_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14224  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14225_CMP ),
    .Y(\$procmux$14224_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14225_CMP0  (
    .A(tap_state_q),
    .B(4'hb),
    .Y(\$procmux$14225_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14231  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14232_CMP ),
    .Y(\$procmux$14231_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14232_CMP0  (
    .A(tap_state_q),
    .B(4'ha),
    .Y(\$procmux$14232_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14245  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14246_CMP ),
    .Y(\$procmux$14245_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14246_CMP0  (
    .A(tap_state_q),
    .B(4'h3),
    .Y(\$procmux$14246_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14258  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14259_CMP ),
    .Y(\$procmux$14258_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14259_CMP0  (
    .A(tap_state_q),
    .B(4'h4),
    .Y(\$procmux$14259_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14267  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14268_CMP ),
    .Y(\$procmux$14267_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14268_CMP0  (
    .A(tap_state_q),
    .B(4'h8),
    .Y(\$procmux$14268_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14269  (
    .A(\$jtag_ir_d$3 ),
    .B(5'h01),
    .S(\$procmux$14270_CMP ),
    .Y(\$procmux$14269_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14274  (
    .A(\$jtag_ir_shift_d$2 ),
    .B(5'h00),
    .S(\$procmux$14275_CMP ),
    .Y(\$procmux$14274_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:94.7-94.46|rtl/riscv-dbg/dmi_jtag_tap.sv:93.5-95.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14279  (
    .A(jtag_ir_q),
    .B(jtag_ir_shift_q),
    .S(\$procmux$14280_CMP ),
    .Y(\$procmux$14279_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14283  (
    .A(\$jtag_ir_shift_d$1 ),
    .B(5'h05),
    .S(\$procmux$14284_CMP ),
    .Y(\$procmux$14283_Y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:84.7-84.63|rtl/riscv-dbg/dmi_jtag_tap.sv:83.5-85.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14286  (
    .A(jtag_ir_shift_q),
    .B({ td_i, jtag_ir_shift_q[4:1] }),
    .S(\$procmux$14287_CMP ),
    .Y(\$procmux$14286_Y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" */
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign jtag_ir_shift_d = \$jtag_ir_shift_d$4 ;
  assign jtag_ir_d = \$jtag_ir_d$5 ;
  assign idcode_d = \$idcode_d$20 ;
  assign bypass_d = \$bypass_d$21 ;
  assign idcode_select = \$idcode_select$23 ;
  assign bypass_select = \$bypass_select$24 ;
  assign dtmcs_select_o = \$dtmcs_select_o$25 ;
  assign dmi_select_o = \$dmi_select_o$26 ;
  assign tdo_mux = \$tdo_mux$29 ;
  assign tap_state_d = \$tap_state_d$52 ;
  assign update_dr = \$update_dr$53 ;
  assign shift_dr = \$shift_dr$54 ;
  assign capture_dr = \$capture_dr$55 ;
  assign capture_ir = \$capture_ir$56 ;
  assign shift_ir = \$shift_ir$57 ;
  assign update_ir = \$update_ir$58 ;
  assign test_logic_reset = \$test_logic_reset$59 ;
  assign tck_o = tck_i;
  assign tdi_o = td_i;
  assign update_o = update_dr;
  assign shift_o = shift_dr;
  assign capture_o = capture_dr;
  assign dmi_clear_o = test_logic_reset;
  assign \$procmux$14112_CMP  = shift_ir;
  assign \$tdo_mux$28  = \$procmux$14111_Y ;
  assign \$procmux$14116_CMP  = shift_ir;
  assign \$tdo_mux$29  = \$procmux$14115_Y ;
  assign \$dmi_select_o$26  = \$procmux$14119_Y ;
  assign \$dtmcs_select_o$25  = \$procmux$14124_Y ;
  assign \$bypass_select$24  = \$procmux$14128_Y ;
  assign \$idcode_select$23  = \$procmux$14136_Y ;
  assign \$procmux$14139_CMP  = test_logic_reset;
  assign \$bypass_d$21  = \$procmux$14138_Y ;
  assign \$procmux$14143_CMP  = test_logic_reset;
  assign \$idcode_d$20  = \$procmux$14142_Y ;
  assign \$procmux$14147_CMP  = bypass_select;
  assign \$procmux$14150_CMP  = shift_dr;
  assign \$bypass_d$17  = \$procmux$14149_Y ;
  assign \$procmux$14153_CMP  = idcode_select;
  assign \$procmux$14155_CMP  = shift_dr;
  assign \$idcode_d$16  = \$procmux$14154_Y ;
  assign \$procmux$14160_CMP  = shift_dr;
  assign \$bypass_d$19  = \$procmux$14159_Y ;
  assign \$procmux$14165_CMP  = shift_dr;
  assign \$idcode_d$18  = \$procmux$14164_Y ;
  assign \$procmux$14168_CMP  = bypass_select;
  assign \$procmux$14171_CMP  = capture_dr;
  assign \$bypass_d$11  = \$procmux$14170_Y ;
  assign \$procmux$14173_CMP  = idcode_select;
  assign \$procmux$14175_CMP  = capture_dr;
  assign \$idcode_d$10  = \$procmux$14174_Y ;
  assign \$procmux$14179_CMP  = capture_dr;
  assign \$bypass_d$13  = \$procmux$14178_Y ;
  assign \$procmux$14183_CMP  = capture_dr;
  assign \$idcode_d$12  = \$procmux$14182_Y ;
  assign \$tap_state_d$52  = \$procmux$14184_Y ;
  assign \$test_logic_reset$59  = \$procmux$14216_Y ;
  assign \$update_ir$58  = \$procmux$14218_Y ;
  assign \$shift_ir$57  = \$procmux$14224_Y ;
  assign \$capture_ir$56  = \$procmux$14231_Y ;
  assign \$capture_dr$55  = \$procmux$14245_Y ;
  assign \$shift_dr$54  = \$procmux$14258_Y ;
  assign \$update_dr$53  = \$procmux$14267_Y ;
  assign \$procmux$14270_CMP  = test_logic_reset;
  assign \$jtag_ir_d$5  = \$procmux$14269_Y ;
  assign \$procmux$14275_CMP  = test_logic_reset;
  assign \$jtag_ir_shift_d$4  = \$procmux$14274_Y ;
  assign \$procmux$14280_CMP  = update_ir;
  assign \$jtag_ir_d$3  = \$procmux$14279_Y ;
  assign \$procmux$14284_CMP  = capture_ir;
  assign \$jtag_ir_shift_d$2  = \$procmux$14283_Y ;
  assign \$procmux$14287_CMP  = shift_ir;
  assign \$jtag_ir_shift_d$1  = \$procmux$14286_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$213  = trst_ni;
  assign \$15  = { 1'h0, idcode_q[31:1] };
  assign \$auto$rtlil.cc:2965:LogicNot$233  = trst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$215  = trst_ni;
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1675 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1676 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1677 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1678 ;
  wire \$auto$rtlil.cc:3009:Lt$1665 ;
  wire \$auto$rtlil.cc:3009:Lt$1669 ;
  wire \$auto$rtlil.cc:3015:Ge$1668 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1670 ;
  wire [33:0] \$auto$rtlil.cc:3092:Mux$1667 ;
  wire [33:0] \$auto$rtlil.cc:3092:Mux$1671 ;
  wire [67:0] \$auto$rtlil.cc:3093:Bwmux$1674 ;
  wire [33:0] \$auto$rtlil.cc:3113:Bmux$1666 ;
  wire [67:0] \$auto$rtlil.cc:3114:Demux$1672 ;
  wire [67:0] \$auto$rtlil.cc:3114:Demux$1673 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [67:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [67:0] \$mem_q$71 ;
  wire [67:0] \$procmux$3712_Y ;
  wire \$procmux$3713_CMP ;
  wire [1:0] \$procmux$3715_Y ;
  wire \$procmux$3716_CMP ;
  wire \$procmux$3718_Y ;
  wire \$procmux$3719_CMP ;
  wire \$procmux$3721_Y ;
  wire \$procmux$3722_CMP ;
  wire [1:0] \$procmux$3723_Y ;
  wire \$procmux$3724_CMP ;
  wire \$procmux$3728_Y ;
  wire \$procmux$3729_CMP ;
  wire \$procmux$3730_Y ;
  wire \$procmux$3731_CMP ;
  wire [1:0] \$procmux$3734_Y ;
  wire \$procmux$3735_CMP ;
  wire \$procmux$3738_Y ;
  wire \$procmux$3739_CMP ;
  wire \$procmux$3742_Y ;
  wire \$procmux$3743_CMP ;
  wire \$procmux$3744_Y ;
  wire \$procmux$3745_CMP ;
  wire [67:0] \$procmux$3747_Y ;
  wire \$procmux$3748_CMP ;
  wire [1:0] \$procmux$3750_Y ;
  wire \$procmux$3751_CMP ;
  wire \$procmux$3753_Y ;
  wire \$procmux$3754_CMP ;
  wire \$procmux$3756_Y ;
  wire \$procmux$3757_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [67:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [67:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1665 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd34)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1666 )
  );
  \$mux  #(
    .WIDTH(32'd34)
  ) \$13  (
    .A(34'hxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1666 ),
    .S(\$auto$rtlil.cc:3009:Lt$1665 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1667 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1668 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1669 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1668 ),
    .B(\$auto$rtlil.cc:3009:Lt$1669 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1670 )
  );
  \$mux  #(
    .WIDTH(32'd34)
  ) \$21  (
    .A(34'h000000000),
    .B(34'h3ffffffff),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1670 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1671 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd34)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1671 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1672 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd34)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1671 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1673 )
  );
  \$bwmux  #(
    .WIDTH(32'd68)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1673 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1674 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1675 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1677 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$driver$mem_q[0]  (
    .AD(34'h000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [33:0]),
    .Q(mem_q[33:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$driver$mem_q[1]  (
    .AD(34'h000000000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [67:34]),
    .Q(mem_q[67:34])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd68)
  ) \$procmux$3712  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$3713_CMP ),
    .Y(\$procmux$3712_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3715  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$3716_CMP ),
    .Y(\$procmux$3715_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3718  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$3719_CMP ),
    .Y(\$procmux$3718_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3721  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$3722_CMP ),
    .Y(\$procmux$3721_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3723  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$3724_CMP ),
    .Y(\$procmux$3723_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3730  (
    .A(1'hx),
    .B(\$procmux$3728_Y ),
    .S(\$procmux$3731_CMP ),
    .Y(\$procmux$3730_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3734  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$3735_CMP ),
    .Y(\$procmux$3734_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3738  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$3739_CMP ),
    .Y(\$procmux$3738_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3744  (
    .A(1'hx),
    .B(\$procmux$3742_Y ),
    .S(\$procmux$3745_CMP ),
    .Y(\$procmux$3744_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd68)
  ) \$procmux$3747  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1674 ),
    .S(\$procmux$3748_CMP ),
    .Y(\$procmux$3747_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3750  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$3751_CMP ),
    .Y(\$procmux$3750_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3753  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$3754_CMP ),
    .Y(\$procmux$3753_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3756  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$3757_CMP ),
    .Y(\$procmux$3756_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1667 ;
  assign \$procmux$3713_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$3712_Y ;
  assign \$procmux$3716_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$3715_Y ;
  assign \$procmux$3719_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$3718_Y ;
  assign \$procmux$3722_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$3721_Y ;
  assign \$procmux$3724_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$3723_Y ;
  assign \$procmux$3729_CMP  = \$41 ;
  assign \$procmux$3731_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$3730_Y ;
  assign \$procmux$3735_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$3734_Y ;
  assign \$procmux$3739_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$3738_Y ;
  assign \$procmux$3743_CMP  = \$26 ;
  assign \$procmux$3745_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$3744_Y ;
  assign \$procmux$3748_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$3747_Y ;
  assign \$procmux$3751_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$3750_Y ;
  assign \$procmux$3754_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$3753_Y ;
  assign \$procmux$3757_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$3756_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1676  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1678  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$3742_Y  = \$28 [0];
  assign \$procmux$3728_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1356 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1357 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1358 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1359 ;
  wire \$auto$rtlil.cc:3009:Lt$1346 ;
  wire \$auto$rtlil.cc:3009:Lt$1350 ;
  wire \$auto$rtlil.cc:3015:Ge$1349 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1351 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1348 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1352 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1355 ;
  wire [1:0] \$auto$rtlil.cc:3113:Bmux$1347 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1353 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1354 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [3:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [3:0] \$mem_q$71 ;
  wire [3:0] \$procmux$8077_Y ;
  wire \$procmux$8078_CMP ;
  wire [1:0] \$procmux$8080_Y ;
  wire \$procmux$8081_CMP ;
  wire \$procmux$8083_Y ;
  wire \$procmux$8084_CMP ;
  wire \$procmux$8086_Y ;
  wire \$procmux$8087_CMP ;
  wire [1:0] \$procmux$8088_Y ;
  wire \$procmux$8089_CMP ;
  wire \$procmux$8093_Y ;
  wire \$procmux$8094_CMP ;
  wire \$procmux$8095_Y ;
  wire \$procmux$8096_CMP ;
  wire [1:0] \$procmux$8099_Y ;
  wire \$procmux$8100_CMP ;
  wire \$procmux$8103_Y ;
  wire \$procmux$8104_CMP ;
  wire \$procmux$8107_Y ;
  wire \$procmux$8108_CMP ;
  wire \$procmux$8109_Y ;
  wire \$procmux$8110_CMP ;
  wire [3:0] \$procmux$8112_Y ;
  wire \$procmux$8113_CMP ;
  wire [1:0] \$procmux$8115_Y ;
  wire \$procmux$8116_CMP ;
  wire \$procmux$8118_Y ;
  wire \$procmux$8119_CMP ;
  wire \$procmux$8121_Y ;
  wire \$procmux$8122_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1346 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1347 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1347 ),
    .S(\$auto$rtlil.cc:3009:Lt$1346 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1348 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1349 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1350 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1349 ),
    .B(\$auto$rtlil.cc:3009:Lt$1350 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1351 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$21  (
    .A(2'h0),
    .B(2'h3),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1351 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1352 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1352 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1353 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1352 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1354 )
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1354 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1355 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1356 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1358 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[0]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [1:0]),
    .Q(mem_q[1:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[1]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [3:2]),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8077  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$8078_CMP ),
    .Y(\$procmux$8077_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8080  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$8081_CMP ),
    .Y(\$procmux$8080_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8083  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$8084_CMP ),
    .Y(\$procmux$8083_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8086  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$8087_CMP ),
    .Y(\$procmux$8086_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8088  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$8089_CMP ),
    .Y(\$procmux$8088_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8095  (
    .A(1'hx),
    .B(\$procmux$8093_Y ),
    .S(\$procmux$8096_CMP ),
    .Y(\$procmux$8095_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8099  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$8100_CMP ),
    .Y(\$procmux$8099_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8103  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$8104_CMP ),
    .Y(\$procmux$8103_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8109  (
    .A(1'hx),
    .B(\$procmux$8107_Y ),
    .S(\$procmux$8110_CMP ),
    .Y(\$procmux$8109_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8112  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1355 ),
    .S(\$procmux$8113_CMP ),
    .Y(\$procmux$8112_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8115  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$8116_CMP ),
    .Y(\$procmux$8115_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8118  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$8119_CMP ),
    .Y(\$procmux$8118_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8121  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$8122_CMP ),
    .Y(\$procmux$8121_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1348 ;
  assign \$procmux$8078_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$8077_Y ;
  assign \$procmux$8081_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$8080_Y ;
  assign \$procmux$8084_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$8083_Y ;
  assign \$procmux$8087_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$8086_Y ;
  assign \$procmux$8089_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$8088_Y ;
  assign \$procmux$8094_CMP  = \$41 ;
  assign \$procmux$8096_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$8095_Y ;
  assign \$procmux$8100_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$8099_Y ;
  assign \$procmux$8104_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$8103_Y ;
  assign \$procmux$8108_CMP  = \$26 ;
  assign \$procmux$8110_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$8109_Y ;
  assign \$procmux$8113_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$8112_Y ;
  assign \$procmux$8116_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$8115_Y ;
  assign \$procmux$8119_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$8118_Y ;
  assign \$procmux$8122_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$8121_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1357  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1359  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$8107_Y  = \$28 [0];
  assign \$procmux$8093_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1389 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1390 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1391 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1392 ;
  wire \$auto$rtlil.cc:3009:Lt$1379 ;
  wire \$auto$rtlil.cc:3009:Lt$1383 ;
  wire \$auto$rtlil.cc:3015:Ge$1382 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1384 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1381 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1385 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1388 ;
  wire [1:0] \$auto$rtlil.cc:3113:Bmux$1380 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1386 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1387 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [3:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [3:0] \$mem_q$71 ;
  wire [3:0] \$procmux$8022_Y ;
  wire \$procmux$8023_CMP ;
  wire [1:0] \$procmux$8025_Y ;
  wire \$procmux$8026_CMP ;
  wire \$procmux$8028_Y ;
  wire \$procmux$8029_CMP ;
  wire \$procmux$8031_Y ;
  wire \$procmux$8032_CMP ;
  wire [1:0] \$procmux$8033_Y ;
  wire \$procmux$8034_CMP ;
  wire \$procmux$8038_Y ;
  wire \$procmux$8039_CMP ;
  wire \$procmux$8040_Y ;
  wire \$procmux$8041_CMP ;
  wire [1:0] \$procmux$8044_Y ;
  wire \$procmux$8045_CMP ;
  wire \$procmux$8048_Y ;
  wire \$procmux$8049_CMP ;
  wire \$procmux$8052_Y ;
  wire \$procmux$8053_CMP ;
  wire \$procmux$8054_Y ;
  wire \$procmux$8055_CMP ;
  wire [3:0] \$procmux$8057_Y ;
  wire \$procmux$8058_CMP ;
  wire [1:0] \$procmux$8060_Y ;
  wire \$procmux$8061_CMP ;
  wire \$procmux$8063_Y ;
  wire \$procmux$8064_CMP ;
  wire \$procmux$8066_Y ;
  wire \$procmux$8067_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1379 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1380 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1380 ),
    .S(\$auto$rtlil.cc:3009:Lt$1379 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1381 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1382 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1383 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1382 ),
    .B(\$auto$rtlil.cc:3009:Lt$1383 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1384 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$21  (
    .A(2'h0),
    .B(2'h3),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1384 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1385 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1385 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1386 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1385 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1387 )
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1387 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1388 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1389 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1391 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[0]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [1:0]),
    .Q(mem_q[1:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[1]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [3:2]),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8022  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$8023_CMP ),
    .Y(\$procmux$8022_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8025  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$8026_CMP ),
    .Y(\$procmux$8025_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8028  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$8029_CMP ),
    .Y(\$procmux$8028_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8031  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$8032_CMP ),
    .Y(\$procmux$8031_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8033  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$8034_CMP ),
    .Y(\$procmux$8033_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8040  (
    .A(1'hx),
    .B(\$procmux$8038_Y ),
    .S(\$procmux$8041_CMP ),
    .Y(\$procmux$8040_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8044  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$8045_CMP ),
    .Y(\$procmux$8044_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8048  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$8049_CMP ),
    .Y(\$procmux$8048_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8054  (
    .A(1'hx),
    .B(\$procmux$8052_Y ),
    .S(\$procmux$8055_CMP ),
    .Y(\$procmux$8054_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8057  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1388 ),
    .S(\$procmux$8058_CMP ),
    .Y(\$procmux$8057_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8060  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$8061_CMP ),
    .Y(\$procmux$8060_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8063  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$8064_CMP ),
    .Y(\$procmux$8063_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8066  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$8067_CMP ),
    .Y(\$procmux$8066_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1381 ;
  assign \$procmux$8023_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$8022_Y ;
  assign \$procmux$8026_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$8025_Y ;
  assign \$procmux$8029_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$8028_Y ;
  assign \$procmux$8032_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$8031_Y ;
  assign \$procmux$8034_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$8033_Y ;
  assign \$procmux$8039_CMP  = \$41 ;
  assign \$procmux$8041_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$8040_Y ;
  assign \$procmux$8045_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$8044_Y ;
  assign \$procmux$8049_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$8048_Y ;
  assign \$procmux$8053_CMP  = \$26 ;
  assign \$procmux$8055_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$8054_Y ;
  assign \$procmux$8058_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$8057_Y ;
  assign \$procmux$8061_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$8060_Y ;
  assign \$procmux$8064_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$8063_Y ;
  assign \$procmux$8067_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$8066_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1390  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1392  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$8052_Y  = \$28 [0];
  assign \$procmux$8038_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1422 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1423 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1424 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1425 ;
  wire \$auto$rtlil.cc:3009:Lt$1412 ;
  wire \$auto$rtlil.cc:3009:Lt$1416 ;
  wire \$auto$rtlil.cc:3015:Ge$1415 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1417 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1414 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1418 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1421 ;
  wire [1:0] \$auto$rtlil.cc:3113:Bmux$1413 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1419 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1420 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [3:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [3:0] \$mem_q$71 ;
  wire [3:0] \$procmux$7967_Y ;
  wire \$procmux$7968_CMP ;
  wire [1:0] \$procmux$7970_Y ;
  wire \$procmux$7971_CMP ;
  wire \$procmux$7973_Y ;
  wire \$procmux$7974_CMP ;
  wire \$procmux$7976_Y ;
  wire \$procmux$7977_CMP ;
  wire [1:0] \$procmux$7978_Y ;
  wire \$procmux$7979_CMP ;
  wire \$procmux$7983_Y ;
  wire \$procmux$7984_CMP ;
  wire \$procmux$7985_Y ;
  wire \$procmux$7986_CMP ;
  wire [1:0] \$procmux$7989_Y ;
  wire \$procmux$7990_CMP ;
  wire \$procmux$7993_Y ;
  wire \$procmux$7994_CMP ;
  wire \$procmux$7997_Y ;
  wire \$procmux$7998_CMP ;
  wire \$procmux$7999_Y ;
  wire \$procmux$8000_CMP ;
  wire [3:0] \$procmux$8002_Y ;
  wire \$procmux$8003_CMP ;
  wire [1:0] \$procmux$8005_Y ;
  wire \$procmux$8006_CMP ;
  wire \$procmux$8008_Y ;
  wire \$procmux$8009_CMP ;
  wire \$procmux$8011_Y ;
  wire \$procmux$8012_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1412 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1413 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1413 ),
    .S(\$auto$rtlil.cc:3009:Lt$1412 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1414 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1415 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1416 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1415 ),
    .B(\$auto$rtlil.cc:3009:Lt$1416 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1417 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$21  (
    .A(2'h0),
    .B(2'h3),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1417 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1418 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1418 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1419 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1418 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1420 )
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1420 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1421 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1422 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1424 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[0]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [1:0]),
    .Q(mem_q[1:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[1]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [3:2]),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7967  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$7968_CMP ),
    .Y(\$procmux$7967_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7970  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$7971_CMP ),
    .Y(\$procmux$7970_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7973  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$7974_CMP ),
    .Y(\$procmux$7973_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7976  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$7977_CMP ),
    .Y(\$procmux$7976_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7978  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$7979_CMP ),
    .Y(\$procmux$7978_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7985  (
    .A(1'hx),
    .B(\$procmux$7983_Y ),
    .S(\$procmux$7986_CMP ),
    .Y(\$procmux$7985_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7989  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$7990_CMP ),
    .Y(\$procmux$7989_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7993  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$7994_CMP ),
    .Y(\$procmux$7993_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7999  (
    .A(1'hx),
    .B(\$procmux$7997_Y ),
    .S(\$procmux$8000_CMP ),
    .Y(\$procmux$7999_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8002  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1421 ),
    .S(\$procmux$8003_CMP ),
    .Y(\$procmux$8002_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8005  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$8006_CMP ),
    .Y(\$procmux$8005_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8008  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$8009_CMP ),
    .Y(\$procmux$8008_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8011  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$8012_CMP ),
    .Y(\$procmux$8011_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1414 ;
  assign \$procmux$7968_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$7967_Y ;
  assign \$procmux$7971_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$7970_Y ;
  assign \$procmux$7974_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$7973_Y ;
  assign \$procmux$7977_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$7976_Y ;
  assign \$procmux$7979_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$7978_Y ;
  assign \$procmux$7984_CMP  = \$41 ;
  assign \$procmux$7986_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$7985_Y ;
  assign \$procmux$7990_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$7989_Y ;
  assign \$procmux$7994_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$7993_Y ;
  assign \$procmux$7998_CMP  = \$26 ;
  assign \$procmux$8000_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$7999_Y ;
  assign \$procmux$8003_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$8002_Y ;
  assign \$procmux$8006_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$8005_Y ;
  assign \$procmux$8009_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$8008_Y ;
  assign \$procmux$8012_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$8011_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1423  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1425  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$7997_Y  = \$28 [0];
  assign \$procmux$7983_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1455 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1456 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1457 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1458 ;
  wire \$auto$rtlil.cc:3009:Lt$1445 ;
  wire \$auto$rtlil.cc:3009:Lt$1449 ;
  wire \$auto$rtlil.cc:3015:Ge$1448 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1450 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1447 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1451 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1454 ;
  wire [1:0] \$auto$rtlil.cc:3113:Bmux$1446 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1452 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1453 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [3:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [3:0] \$mem_q$71 ;
  wire [3:0] \$procmux$7912_Y ;
  wire \$procmux$7913_CMP ;
  wire [1:0] \$procmux$7915_Y ;
  wire \$procmux$7916_CMP ;
  wire \$procmux$7918_Y ;
  wire \$procmux$7919_CMP ;
  wire \$procmux$7921_Y ;
  wire \$procmux$7922_CMP ;
  wire [1:0] \$procmux$7923_Y ;
  wire \$procmux$7924_CMP ;
  wire \$procmux$7928_Y ;
  wire \$procmux$7929_CMP ;
  wire \$procmux$7930_Y ;
  wire \$procmux$7931_CMP ;
  wire [1:0] \$procmux$7934_Y ;
  wire \$procmux$7935_CMP ;
  wire \$procmux$7938_Y ;
  wire \$procmux$7939_CMP ;
  wire \$procmux$7942_Y ;
  wire \$procmux$7943_CMP ;
  wire \$procmux$7944_Y ;
  wire \$procmux$7945_CMP ;
  wire [3:0] \$procmux$7947_Y ;
  wire \$procmux$7948_CMP ;
  wire [1:0] \$procmux$7950_Y ;
  wire \$procmux$7951_CMP ;
  wire \$procmux$7953_Y ;
  wire \$procmux$7954_CMP ;
  wire \$procmux$7956_Y ;
  wire \$procmux$7957_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1445 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1446 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1446 ),
    .S(\$auto$rtlil.cc:3009:Lt$1445 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1447 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1448 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1449 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1448 ),
    .B(\$auto$rtlil.cc:3009:Lt$1449 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1450 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$21  (
    .A(2'h0),
    .B(2'h3),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1450 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1451 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1451 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1452 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1451 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1453 )
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1453 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1454 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1455 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1457 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[0]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [1:0]),
    .Q(mem_q[1:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[1]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [3:2]),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7912  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$7913_CMP ),
    .Y(\$procmux$7912_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7915  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$7916_CMP ),
    .Y(\$procmux$7915_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7918  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$7919_CMP ),
    .Y(\$procmux$7918_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7921  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$7922_CMP ),
    .Y(\$procmux$7921_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7923  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$7924_CMP ),
    .Y(\$procmux$7923_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7930  (
    .A(1'hx),
    .B(\$procmux$7928_Y ),
    .S(\$procmux$7931_CMP ),
    .Y(\$procmux$7930_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7934  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$7935_CMP ),
    .Y(\$procmux$7934_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7938  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$7939_CMP ),
    .Y(\$procmux$7938_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7944  (
    .A(1'hx),
    .B(\$procmux$7942_Y ),
    .S(\$procmux$7945_CMP ),
    .Y(\$procmux$7944_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7947  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1454 ),
    .S(\$procmux$7948_CMP ),
    .Y(\$procmux$7947_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7950  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$7951_CMP ),
    .Y(\$procmux$7950_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7953  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$7954_CMP ),
    .Y(\$procmux$7953_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7956  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$7957_CMP ),
    .Y(\$procmux$7956_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1447 ;
  assign \$procmux$7913_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$7912_Y ;
  assign \$procmux$7916_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$7915_Y ;
  assign \$procmux$7919_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$7918_Y ;
  assign \$procmux$7922_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$7921_Y ;
  assign \$procmux$7924_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$7923_Y ;
  assign \$procmux$7929_CMP  = \$41 ;
  assign \$procmux$7931_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$7930_Y ;
  assign \$procmux$7935_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$7934_Y ;
  assign \$procmux$7939_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$7938_Y ;
  assign \$procmux$7943_CMP  = \$26 ;
  assign \$procmux$7945_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$7944_Y ;
  assign \$procmux$7948_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$7947_Y ;
  assign \$procmux$7951_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$7950_Y ;
  assign \$procmux$7954_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$7953_Y ;
  assign \$procmux$7957_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$7956_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1456  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1458  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$7942_Y  = \$28 [0];
  assign \$procmux$7928_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$26 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire [31:0] \$31 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$46 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$70 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1488 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1489 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1490 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1491 ;
  wire \$auto$rtlil.cc:3009:Lt$1478 ;
  wire \$auto$rtlil.cc:3009:Lt$1482 ;
  wire \$auto$rtlil.cc:3015:Ge$1481 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1483 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1480 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1484 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$1487 ;
  wire [1:0] \$auto$rtlil.cc:3113:Bmux$1479 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1485 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1486 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [3:0] \$mem_n$35 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [3:0] \$mem_q$71 ;
  wire [3:0] \$procmux$7857_Y ;
  wire \$procmux$7858_CMP ;
  wire [1:0] \$procmux$7860_Y ;
  wire \$procmux$7861_CMP ;
  wire \$procmux$7863_Y ;
  wire \$procmux$7864_CMP ;
  wire \$procmux$7866_Y ;
  wire \$procmux$7867_CMP ;
  wire [1:0] \$procmux$7868_Y ;
  wire \$procmux$7869_CMP ;
  wire \$procmux$7873_Y ;
  wire \$procmux$7874_CMP ;
  wire \$procmux$7875_Y ;
  wire \$procmux$7876_CMP ;
  wire [1:0] \$procmux$7879_Y ;
  wire \$procmux$7880_CMP ;
  wire \$procmux$7883_Y ;
  wire \$procmux$7884_CMP ;
  wire \$procmux$7887_Y ;
  wire \$procmux$7888_CMP ;
  wire \$procmux$7889_Y ;
  wire \$procmux$7890_CMP ;
  wire [3:0] \$procmux$7892_Y ;
  wire \$procmux$7893_CMP ;
  wire [1:0] \$procmux$7895_Y ;
  wire \$procmux$7896_CMP ;
  wire \$procmux$7898_Y ;
  wire \$procmux$7899_CMP ;
  wire \$procmux$7901_Y ;
  wire \$procmux$7902_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$47 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$63 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$34 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$48 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$59 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$65 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$33 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$64 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1478 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q),
    .S(read_pointer_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$1479 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'hx),
    .B(\$auto$rtlil.cc:3113:Bmux$1479 ),
    .S(\$auto$rtlil.cc:3009:Lt$1478 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1480 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1481 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, write_pointer_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$1482 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$auto$rtlil.cc:3015:Ge$1481 ),
    .B(\$auto$rtlil.cc:3009:Lt$1482 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1483 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$21  (
    .A(2'h0),
    .B(2'h3),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1483 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1484 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$22  (
    .A(\$auto$rtlil.cc:3092:Mux$1484 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1485 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd2)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1484 ),
    .S(write_pointer_q),
    .Y(\$auto$rtlil.cc:3114:Demux$1486 )
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S(\$auto$rtlil.cc:3114:Demux$1486 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1487 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$30  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$45  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$46 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(full_o),
    .Y(\$52 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$52 ),
    .Y(\$54 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(empty_o),
    .Y(\$56 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1488 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1490 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[0]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [1:0]),
    .Q(mem_q[1:0])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$mem_q[1]  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$71 [3:2]),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$63 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$65 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$64 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7857  (
    .A(mem_q),
    .B(\$mem_n$35 ),
    .S(\$procmux$7858_CMP ),
    .Y(\$procmux$7857_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7860  (
    .A(\$status_cnt_n$59 ),
    .B(2'h0),
    .S(\$procmux$7861_CMP ),
    .Y(\$procmux$7860_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7863  (
    .A(\$write_pointer_n$33 ),
    .B(1'h0),
    .S(\$procmux$7864_CMP ),
    .Y(\$procmux$7863_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7866  (
    .A(\$read_pointer_n$47 ),
    .B(1'h0),
    .S(\$procmux$7867_CMP ),
    .Y(\$procmux$7866_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7868  (
    .A(\$status_cnt_n$48 ),
    .B(status_cnt_q),
    .S(\$procmux$7869_CMP ),
    .Y(\$procmux$7868_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7875  (
    .A(1'hx),
    .B(\$procmux$7873_Y ),
    .S(\$procmux$7876_CMP ),
    .Y(\$procmux$7875_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7879  (
    .A(\$status_cnt_n$34 ),
    .B(\$46 [1:0]),
    .S(\$procmux$7880_CMP ),
    .Y(\$procmux$7879_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7883  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$44 ),
    .S(\$procmux$7884_CMP ),
    .Y(\$procmux$7883_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7889  (
    .A(1'hx),
    .B(\$procmux$7887_Y ),
    .S(\$procmux$7890_CMP ),
    .Y(\$procmux$7889_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7892  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$1487 ),
    .S(\$procmux$7893_CMP ),
    .Y(\$procmux$7892_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7895  (
    .A(status_cnt_q),
    .B(\$31 [1:0]),
    .S(\$procmux$7896_CMP ),
    .Y(\$procmux$7895_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7898  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$29 ),
    .S(\$procmux$7899_CMP ),
    .Y(\$procmux$7898_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7901  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$7902_CMP ),
    .Y(\$procmux$7901_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$32 ;
  assign read_pointer_n = \$read_pointer_n$47 ;
  assign write_pointer_n = \$write_pointer_n$33 ;
  assign status_cnt_n = \$status_cnt_n$59 ;
  assign mem_n = \$mem_n$35 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$1480 ;
  assign \$procmux$7858_CMP  = \$70 ;
  assign \$mem_q$71  = \$procmux$7857_Y ;
  assign \$procmux$7861_CMP  = flush_i;
  assign \$status_cnt_q$65  = \$procmux$7860_Y ;
  assign \$procmux$7864_CMP  = flush_i;
  assign \$write_pointer_q$64  = \$procmux$7863_Y ;
  assign \$procmux$7867_CMP  = flush_i;
  assign \$read_pointer_q$63  = \$procmux$7866_Y ;
  assign \$procmux$7869_CMP  = \$58 ;
  assign \$status_cnt_n$59  = \$procmux$7868_Y ;
  assign \$procmux$7874_CMP  = \$41 ;
  assign \$procmux$7876_CMP  = \$39 ;
  assign \$read_pointer_n$44  = \$procmux$7875_Y ;
  assign \$procmux$7880_CMP  = \$39 ;
  assign \$status_cnt_n$48  = \$procmux$7879_Y ;
  assign \$procmux$7884_CMP  = \$39 ;
  assign \$read_pointer_n$47  = \$procmux$7883_Y ;
  assign \$procmux$7888_CMP  = \$26 ;
  assign \$procmux$7890_CMP  = \$17 ;
  assign \$write_pointer_n$29  = \$procmux$7889_Y ;
  assign \$procmux$7893_CMP  = \$17 ;
  assign \$mem_n$35  = \$procmux$7892_Y ;
  assign \$procmux$7896_CMP  = \$17 ;
  assign \$status_cnt_n$34  = \$procmux$7895_Y ;
  assign \$procmux$7899_CMP  = \$17 ;
  assign \$write_pointer_n$33  = \$procmux$7898_Y ;
  assign \$procmux$7902_CMP  = \$17 ;
  assign \$gate_clock$32  = \$procmux$7901_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$26  = 1'h0;
  assign \$auto$rtlil.cc:2965:LogicNot$1489  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1491  = rst_ni;
  assign \$70  = \$17 ;
  assign \$41  = 1'h0;
  assign \$procmux$7887_Y  = \$28 [0];
  assign \$procmux$7873_Y  = \$43 [0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$14 ;
  wire \$16 ;
  wire \$23 ;
  wire [31:0] \$25 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [31:0] \$40 ;
  wire [31:0] \$43 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$67 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$574 ;
  wire \$auto$rtlil.cc:2965:LogicNot$575 ;
  wire \$auto$rtlil.cc:2965:LogicNot$576 ;
  wire \$auto$rtlil.cc:2965:LogicNot$577 ;
  wire \$auto$rtlil.cc:3009:Lt$567 ;
  wire \$auto$rtlil.cc:3009:Lt$570 ;
  wire \$auto$rtlil.cc:3015:Ge$569 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$571 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$568 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$572 ;
  wire [2:0] \$auto$rtlil.cc:3093:Bwmux$573 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [2:0] \$mem_n$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [2:0] \$mem_q$68 ;
  wire [2:0] \$procmux$13822_Y ;
  wire \$procmux$13823_CMP ;
  wire [1:0] \$procmux$13825_Y ;
  wire \$procmux$13826_CMP ;
  wire \$procmux$13828_Y ;
  wire \$procmux$13829_CMP ;
  wire \$procmux$13831_Y ;
  wire \$procmux$13832_CMP ;
  wire [1:0] \$procmux$13833_Y ;
  wire \$procmux$13834_CMP ;
  wire \$procmux$13838_Y ;
  wire \$procmux$13839_CMP ;
  wire \$procmux$13840_Y ;
  wire \$procmux$13841_CMP ;
  wire [1:0] \$procmux$13844_Y ;
  wire \$procmux$13845_CMP ;
  wire \$procmux$13848_Y ;
  wire \$procmux$13849_CMP ;
  wire \$procmux$13852_Y ;
  wire \$procmux$13853_CMP ;
  wire \$procmux$13854_Y ;
  wire \$procmux$13855_CMP ;
  wire [2:0] \$procmux$13857_Y ;
  wire \$procmux$13858_CMP ;
  wire [1:0] \$procmux$13860_Y ;
  wire \$procmux$13861_CMP ;
  wire \$procmux$13863_Y ;
  wire \$procmux$13864_CMP ;
  wire \$procmux$13866_Y ;
  wire \$procmux$13867_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$41 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$60 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$31 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$45 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$56 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$62 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$26 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$30 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$61 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h1),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$567 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(3'hx),
    .B(mem_q),
    .S(\$auto$rtlil.cc:3009:Lt$567 ),
    .Y(\$auto$rtlil.cc:3092:Mux$568 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$569 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$570 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$auto$rtlil.cc:3015:Ge$569 ),
    .B(\$auto$rtlil.cc:3009:Lt$570 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$571 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$20  (
    .A(3'h0),
    .B(3'h7),
    .S(\$auto$rtlil.cc:3024:LogicAnd$571 ),
    .Y(\$auto$rtlil.cc:3092:Mux$572 )
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S(\$auto$rtlil.cc:3092:Mux$572 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$573 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(write_pointer_q),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$24  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$25 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(read_pointer_q),
    .Y(\$38 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$39  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$40 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(full_o),
    .Y(\$49 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$49 ),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(empty_o),
    .Y(\$53 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$53 ),
    .Y(\$55 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$574 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$576 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$mem_q[0]  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$68 ),
    .Q(mem_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$60 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$62 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$61 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13822  (
    .A(mem_q),
    .B(\$mem_n$32 ),
    .S(\$procmux$13823_CMP ),
    .Y(\$procmux$13822_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13825  (
    .A(\$status_cnt_n$56 ),
    .B(2'h0),
    .S(\$procmux$13826_CMP ),
    .Y(\$procmux$13825_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13828  (
    .A(\$write_pointer_n$30 ),
    .B(1'h0),
    .S(\$procmux$13829_CMP ),
    .Y(\$procmux$13828_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13831  (
    .A(\$read_pointer_n$44 ),
    .B(1'h0),
    .S(\$procmux$13832_CMP ),
    .Y(\$procmux$13831_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13833  (
    .A(\$status_cnt_n$45 ),
    .B(status_cnt_q),
    .S(\$procmux$13834_CMP ),
    .Y(\$procmux$13833_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:93.17-93.37|rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13838  (
    .A(1'h0),
    .B(\$40 [0]),
    .S(read_pointer_q),
    .Y(\$procmux$13838_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13840  (
    .A(1'hx),
    .B(\$procmux$13838_Y ),
    .S(\$procmux$13841_CMP ),
    .Y(\$procmux$13840_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13844  (
    .A(\$status_cnt_n$31 ),
    .B(\$43 [1:0]),
    .S(\$procmux$13845_CMP ),
    .Y(\$procmux$13844_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13848  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$41 ),
    .S(\$procmux$13849_CMP ),
    .Y(\$procmux$13848_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13852  (
    .A(1'h0),
    .B(\$25 [0]),
    .S(write_pointer_q),
    .Y(\$procmux$13852_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13854  (
    .A(1'hx),
    .B(\$procmux$13852_Y ),
    .S(\$procmux$13855_CMP ),
    .Y(\$procmux$13854_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13857  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$573 ),
    .S(\$procmux$13858_CMP ),
    .Y(\$procmux$13857_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13860  (
    .A(status_cnt_q),
    .B(\$28 [1:0]),
    .S(\$procmux$13861_CMP ),
    .Y(\$procmux$13860_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13863  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$26 ),
    .S(\$procmux$13864_CMP ),
    .Y(\$procmux$13863_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13866  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$13867_CMP ),
    .Y(\$procmux$13866_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$29 ;
  assign read_pointer_n = \$read_pointer_n$44 ;
  assign write_pointer_n = \$write_pointer_n$30 ;
  assign status_cnt_n = \$status_cnt_n$56 ;
  assign mem_n = \$mem_n$32 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$568 ;
  assign \$procmux$13823_CMP  = \$67 ;
  assign \$mem_q$68  = \$procmux$13822_Y ;
  assign \$procmux$13826_CMP  = flush_i;
  assign \$status_cnt_q$62  = \$procmux$13825_Y ;
  assign \$procmux$13829_CMP  = flush_i;
  assign \$write_pointer_q$61  = \$procmux$13828_Y ;
  assign \$procmux$13832_CMP  = flush_i;
  assign \$read_pointer_q$60  = \$procmux$13831_Y ;
  assign \$procmux$13834_CMP  = \$55 ;
  assign \$status_cnt_n$56  = \$procmux$13833_Y ;
  assign \$procmux$13839_CMP  = \$38 ;
  assign \$procmux$13841_CMP  = \$36 ;
  assign \$read_pointer_n$41  = \$procmux$13840_Y ;
  assign \$procmux$13845_CMP  = \$36 ;
  assign \$status_cnt_n$45  = \$procmux$13844_Y ;
  assign \$procmux$13849_CMP  = \$36 ;
  assign \$read_pointer_n$44  = \$procmux$13848_Y ;
  assign \$procmux$13853_CMP  = \$23 ;
  assign \$procmux$13855_CMP  = \$16 ;
  assign \$write_pointer_n$26  = \$procmux$13854_Y ;
  assign \$procmux$13858_CMP  = \$16 ;
  assign \$mem_n$32  = \$procmux$13857_Y ;
  assign \$procmux$13861_CMP  = \$16 ;
  assign \$status_cnt_n$31  = \$procmux$13860_Y ;
  assign \$procmux$13864_CMP  = \$16 ;
  assign \$write_pointer_n$30  = \$procmux$13863_Y ;
  assign \$procmux$13867_CMP  = \$16 ;
  assign \$gate_clock$29  = \$procmux$13866_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$auto$rtlil.cc:2965:LogicNot$575  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$577  = rst_ni;
  assign \$67  = \$16 ;
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$14 ;
  wire \$16 ;
  wire \$23 ;
  wire [31:0] \$25 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [31:0] \$40 ;
  wire [31:0] \$43 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$67 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$554 ;
  wire \$auto$rtlil.cc:2965:LogicNot$555 ;
  wire \$auto$rtlil.cc:2965:LogicNot$556 ;
  wire \$auto$rtlil.cc:2965:LogicNot$557 ;
  wire \$auto$rtlil.cc:3009:Lt$547 ;
  wire \$auto$rtlil.cc:3009:Lt$550 ;
  wire \$auto$rtlil.cc:3015:Ge$549 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$551 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$548 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$552 ;
  wire [2:0] \$auto$rtlil.cc:3093:Bwmux$553 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [2:0] \$mem_n$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [2:0] \$mem_q$68 ;
  wire [2:0] \$procmux$13979_Y ;
  wire \$procmux$13980_CMP ;
  wire [1:0] \$procmux$13982_Y ;
  wire \$procmux$13983_CMP ;
  wire \$procmux$13985_Y ;
  wire \$procmux$13986_CMP ;
  wire \$procmux$13988_Y ;
  wire \$procmux$13989_CMP ;
  wire [1:0] \$procmux$13990_Y ;
  wire \$procmux$13991_CMP ;
  wire \$procmux$13995_Y ;
  wire \$procmux$13996_CMP ;
  wire \$procmux$13997_Y ;
  wire \$procmux$13998_CMP ;
  wire [1:0] \$procmux$14001_Y ;
  wire \$procmux$14002_CMP ;
  wire \$procmux$14005_Y ;
  wire \$procmux$14006_CMP ;
  wire \$procmux$14009_Y ;
  wire \$procmux$14010_CMP ;
  wire \$procmux$14011_Y ;
  wire \$procmux$14012_CMP ;
  wire [2:0] \$procmux$14014_Y ;
  wire \$procmux$14015_CMP ;
  wire [1:0] \$procmux$14017_Y ;
  wire \$procmux$14018_CMP ;
  wire \$procmux$14020_Y ;
  wire \$procmux$14021_CMP ;
  wire \$procmux$14023_Y ;
  wire \$procmux$14024_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$41 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$60 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$31 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$45 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$56 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$62 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$26 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$30 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$61 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h1),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$547 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(3'hx),
    .B(mem_q),
    .S(\$auto$rtlil.cc:3009:Lt$547 ),
    .Y(\$auto$rtlil.cc:3092:Mux$548 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$549 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$550 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$auto$rtlil.cc:3015:Ge$549 ),
    .B(\$auto$rtlil.cc:3009:Lt$550 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$551 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$20  (
    .A(3'h0),
    .B(3'h7),
    .S(\$auto$rtlil.cc:3024:LogicAnd$551 ),
    .Y(\$auto$rtlil.cc:3092:Mux$552 )
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S(\$auto$rtlil.cc:3092:Mux$552 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$553 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(write_pointer_q),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$24  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$25 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(read_pointer_q),
    .Y(\$38 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$39  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$40 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(full_o),
    .Y(\$49 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$49 ),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(empty_o),
    .Y(\$53 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$53 ),
    .Y(\$55 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$554 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$556 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$mem_q[0]  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$68 ),
    .Q(mem_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$60 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$62 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$61 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13979  (
    .A(mem_q),
    .B(\$mem_n$32 ),
    .S(\$procmux$13980_CMP ),
    .Y(\$procmux$13979_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13982  (
    .A(\$status_cnt_n$56 ),
    .B(2'h0),
    .S(\$procmux$13983_CMP ),
    .Y(\$procmux$13982_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13985  (
    .A(\$write_pointer_n$30 ),
    .B(1'h0),
    .S(\$procmux$13986_CMP ),
    .Y(\$procmux$13985_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13988  (
    .A(\$read_pointer_n$44 ),
    .B(1'h0),
    .S(\$procmux$13989_CMP ),
    .Y(\$procmux$13988_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13990  (
    .A(\$status_cnt_n$45 ),
    .B(status_cnt_q),
    .S(\$procmux$13991_CMP ),
    .Y(\$procmux$13990_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:93.17-93.37|rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13995  (
    .A(1'h0),
    .B(\$40 [0]),
    .S(read_pointer_q),
    .Y(\$procmux$13995_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13997  (
    .A(1'hx),
    .B(\$procmux$13995_Y ),
    .S(\$procmux$13998_CMP ),
    .Y(\$procmux$13997_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14001  (
    .A(\$status_cnt_n$31 ),
    .B(\$43 [1:0]),
    .S(\$procmux$14002_CMP ),
    .Y(\$procmux$14001_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14005  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$41 ),
    .S(\$procmux$14006_CMP ),
    .Y(\$procmux$14005_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14009  (
    .A(1'h0),
    .B(\$25 [0]),
    .S(write_pointer_q),
    .Y(\$procmux$14009_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14011  (
    .A(1'hx),
    .B(\$procmux$14009_Y ),
    .S(\$procmux$14012_CMP ),
    .Y(\$procmux$14011_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14014  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$553 ),
    .S(\$procmux$14015_CMP ),
    .Y(\$procmux$14014_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14017  (
    .A(status_cnt_q),
    .B(\$28 [1:0]),
    .S(\$procmux$14018_CMP ),
    .Y(\$procmux$14017_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14020  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$26 ),
    .S(\$procmux$14021_CMP ),
    .Y(\$procmux$14020_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14023  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$14024_CMP ),
    .Y(\$procmux$14023_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$29 ;
  assign read_pointer_n = \$read_pointer_n$44 ;
  assign write_pointer_n = \$write_pointer_n$30 ;
  assign status_cnt_n = \$status_cnt_n$56 ;
  assign mem_n = \$mem_n$32 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$548 ;
  assign \$procmux$13980_CMP  = \$67 ;
  assign \$mem_q$68  = \$procmux$13979_Y ;
  assign \$procmux$13983_CMP  = flush_i;
  assign \$status_cnt_q$62  = \$procmux$13982_Y ;
  assign \$procmux$13986_CMP  = flush_i;
  assign \$write_pointer_q$61  = \$procmux$13985_Y ;
  assign \$procmux$13989_CMP  = flush_i;
  assign \$read_pointer_q$60  = \$procmux$13988_Y ;
  assign \$procmux$13991_CMP  = \$55 ;
  assign \$status_cnt_n$56  = \$procmux$13990_Y ;
  assign \$procmux$13996_CMP  = \$38 ;
  assign \$procmux$13998_CMP  = \$36 ;
  assign \$read_pointer_n$41  = \$procmux$13997_Y ;
  assign \$procmux$14002_CMP  = \$36 ;
  assign \$status_cnt_n$45  = \$procmux$14001_Y ;
  assign \$procmux$14006_CMP  = \$36 ;
  assign \$read_pointer_n$44  = \$procmux$14005_Y ;
  assign \$procmux$14010_CMP  = \$23 ;
  assign \$procmux$14012_CMP  = \$16 ;
  assign \$write_pointer_n$26  = \$procmux$14011_Y ;
  assign \$procmux$14015_CMP  = \$16 ;
  assign \$mem_n$32  = \$procmux$14014_Y ;
  assign \$procmux$14018_CMP  = \$16 ;
  assign \$status_cnt_n$31  = \$procmux$14017_Y ;
  assign \$procmux$14021_CMP  = \$16 ;
  assign \$write_pointer_n$30  = \$procmux$14020_Y ;
  assign \$procmux$14024_CMP  = \$16 ;
  assign \$gate_clock$29  = \$procmux$14023_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$auto$rtlil.cc:2965:LogicNot$555  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$557  = rst_ni;
  assign \$67  = \$16 ;
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$1 ;
  wire \$14 ;
  wire \$16 ;
  wire \$23 ;
  wire [31:0] \$25 ;
  wire [31:0] \$28 ;
  wire \$3 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [31:0] \$40 ;
  wire [31:0] \$43 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$67 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$823 ;
  wire \$auto$rtlil.cc:2965:LogicNot$824 ;
  wire \$auto$rtlil.cc:2965:LogicNot$825 ;
  wire \$auto$rtlil.cc:2965:LogicNot$826 ;
  wire \$auto$rtlil.cc:3009:Lt$816 ;
  wire \$auto$rtlil.cc:3009:Lt$819 ;
  wire \$auto$rtlil.cc:3015:Ge$818 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$820 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$817 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$821 ;
  wire [2:0] \$auto$rtlil.cc:3093:Bwmux$822 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$gate_clock$29 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [2:0] \$mem_n$32 ;
  /* src = "rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  wire [2:0] \$mem_q$68 ;
  wire [2:0] \$procmux$13077_Y ;
  wire \$procmux$13078_CMP ;
  wire [1:0] \$procmux$13080_Y ;
  wire \$procmux$13081_CMP ;
  wire \$procmux$13083_Y ;
  wire \$procmux$13084_CMP ;
  wire \$procmux$13086_Y ;
  wire \$procmux$13087_CMP ;
  wire [1:0] \$procmux$13088_Y ;
  wire \$procmux$13089_CMP ;
  wire \$procmux$13093_Y ;
  wire \$procmux$13094_CMP ;
  wire \$procmux$13095_Y ;
  wire \$procmux$13096_CMP ;
  wire [1:0] \$procmux$13099_Y ;
  wire \$procmux$13100_CMP ;
  wire \$procmux$13103_Y ;
  wire \$procmux$13104_CMP ;
  wire \$procmux$13107_Y ;
  wire \$procmux$13108_CMP ;
  wire \$procmux$13109_Y ;
  wire \$procmux$13110_CMP ;
  wire [2:0] \$procmux$13112_Y ;
  wire \$procmux$13113_CMP ;
  wire [1:0] \$procmux$13115_Y ;
  wire \$procmux$13116_CMP ;
  wire \$procmux$13118_Y ;
  wire \$procmux$13119_CMP ;
  wire \$procmux$13121_Y ;
  wire \$procmux$13122_CMP ;
  /* src = "rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  wire \$read_pointer_n$41 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire \$read_pointer_n$44 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$read_pointer_q$60 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire [1:0] \$status_cnt_n$31 ;
  /* src = "rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  wire [1:0] \$status_cnt_n$45 ;
  /* src = "rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  wire [1:0] \$status_cnt_n$56 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$status_cnt_q$62 ;
  /* src = "rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  wire \$write_pointer_n$26 ;
  /* src = "rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  wire \$write_pointer_n$30 ;
  /* src = "rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$write_pointer_q$61 ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:42.11" */
  wire gate_clock;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h1),
    .Y(\$1 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ 1'h0, read_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$816 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(3'hx),
    .B(mem_q),
    .S(\$auto$rtlil.cc:3009:Lt$816 ),
    .Y(\$auto$rtlil.cc:3092:Mux$817 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A({ 1'h0, write_pointer_q }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$818 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A({ 1'h0, write_pointer_q }),
    .B(2'h1),
    .Y(\$auto$rtlil.cc:3009:Lt$819 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$auto$rtlil.cc:3015:Ge$818 ),
    .B(\$auto$rtlil.cc:3009:Lt$819 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$820 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$20  (
    .A(3'h0),
    .B(3'h7),
    .S(\$auto$rtlil.cc:3024:LogicAnd$820 ),
    .Y(\$auto$rtlil.cc:3092:Mux$821 )
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S(\$auto$rtlil.cc:3092:Mux$821 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$822 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(write_pointer_q),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$24  (
    .A({ 31'h00000000, write_pointer_q }),
    .B(32'd1),
    .Y(\$25 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$27  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$28 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(read_pointer_q),
    .Y(\$38 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$39  (
    .A({ 31'h00000000, read_pointer_q }),
    .B(32'd1),
    .Y(\$40 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$42  (
    .A({ 30'h00000000, status_cnt_q }),
    .B(32'd1),
    .Y(\$43 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(full_o),
    .Y(\$49 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$49 ),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(empty_o),
    .Y(\$53 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$53 ),
    .Y(\$55 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$823 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$825 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$mem_q[0]  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$mem_q$68 ),
    .Q(mem_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$read_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$read_pointer_q$60 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$status_cnt_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$status_cnt_q$62 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$write_pointer_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$write_pointer_q$61 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:138.13-138.28|rtl/common_cells/fifo_v3.sv:137.18-139.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13077  (
    .A(mem_q),
    .B(\$mem_n$32 ),
    .S(\$procmux$13078_CMP ),
    .Y(\$procmux$13077_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13080  (
    .A(\$status_cnt_n$56 ),
    .B(2'h0),
    .S(\$procmux$13081_CMP ),
    .Y(\$procmux$13080_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13083  (
    .A(\$write_pointer_n$30 ),
    .B(1'h0),
    .S(\$procmux$13084_CMP ),
    .Y(\$procmux$13083_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13086  (
    .A(\$read_pointer_n$44 ),
    .B(1'h0),
    .S(\$procmux$13087_CMP ),
    .Y(\$procmux$13086_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:102.13-102.43|rtl/common_cells/fifo_v3.sv:101.9-102.43" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13088  (
    .A(\$status_cnt_n$45 ),
    .B(status_cnt_q),
    .S(\$procmux$13089_CMP ),
    .Y(\$procmux$13088_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:93.17-93.37|rtl/common_cells/fifo_v3.sv:92.13-95.53" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13093  (
    .A(1'h0),
    .B(\$40 [0]),
    .S(read_pointer_q),
    .Y(\$procmux$13093_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13095  (
    .A(1'hx),
    .B(\$procmux$13093_Y ),
    .S(\$procmux$13096_CMP ),
    .Y(\$procmux$13095_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13099  (
    .A(\$status_cnt_n$31 ),
    .B(\$43 [1:0]),
    .S(\$procmux$13100_CMP ),
    .Y(\$procmux$13099_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.32-98.12|rtl/common_cells/fifo_v3.sv:88.9-98.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13103  (
    .A(read_pointer_q),
    .B(\$read_pointer_n$41 ),
    .S(\$procmux$13104_CMP ),
    .Y(\$procmux$13103_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13107  (
    .A(1'h0),
    .B(\$25 [0]),
    .S(write_pointer_q),
    .Y(\$procmux$13107_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13109  (
    .A(1'hx),
    .B(\$procmux$13107_Y ),
    .S(\$procmux$13110_CMP ),
    .Y(\$procmux$13109_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13112  (
    .A(mem_q),
    .B(\$auto$rtlil.cc:3093:Bwmux$822 ),
    .S(\$procmux$13113_CMP ),
    .Y(\$procmux$13112_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13115  (
    .A(status_cnt_q),
    .B(\$28 [1:0]),
    .S(\$procmux$13116_CMP ),
    .Y(\$procmux$13115_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13118  (
    .A(write_pointer_q),
    .B(\$write_pointer_n$26 ),
    .S(\$procmux$13119_CMP ),
    .Y(\$procmux$13118_Y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.32-86.12|rtl/common_cells/fifo_v3.sv:73.9-86.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13121  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$13122_CMP ),
    .Y(\$procmux$13121_Y )
  );
  assign usage_o = status_cnt_q[0];
  assign full_o = \$1 ;
  assign empty_o = \$9 ;
  assign gate_clock = \$gate_clock$29 ;
  assign read_pointer_n = \$read_pointer_n$44 ;
  assign write_pointer_n = \$write_pointer_n$30 ;
  assign status_cnt_n = \$status_cnt_n$56 ;
  assign mem_n = \$mem_n$32 ;
  assign data_o = \$auto$rtlil.cc:3092:Mux$817 ;
  assign \$procmux$13078_CMP  = \$67 ;
  assign \$mem_q$68  = \$procmux$13077_Y ;
  assign \$procmux$13081_CMP  = flush_i;
  assign \$status_cnt_q$62  = \$procmux$13080_Y ;
  assign \$procmux$13084_CMP  = flush_i;
  assign \$write_pointer_q$61  = \$procmux$13083_Y ;
  assign \$procmux$13087_CMP  = flush_i;
  assign \$read_pointer_q$60  = \$procmux$13086_Y ;
  assign \$procmux$13089_CMP  = \$55 ;
  assign \$status_cnt_n$56  = \$procmux$13088_Y ;
  assign \$procmux$13094_CMP  = \$38 ;
  assign \$procmux$13096_CMP  = \$36 ;
  assign \$read_pointer_n$41  = \$procmux$13095_Y ;
  assign \$procmux$13100_CMP  = \$36 ;
  assign \$status_cnt_n$45  = \$procmux$13099_Y ;
  assign \$procmux$13104_CMP  = \$36 ;
  assign \$read_pointer_n$44  = \$procmux$13103_Y ;
  assign \$procmux$13108_CMP  = \$23 ;
  assign \$procmux$13110_CMP  = \$16 ;
  assign \$write_pointer_n$26  = \$procmux$13109_Y ;
  assign \$procmux$13113_CMP  = \$16 ;
  assign \$mem_n$32  = \$procmux$13112_Y ;
  assign \$procmux$13116_CMP  = \$16 ;
  assign \$status_cnt_n$31  = \$procmux$13115_Y ;
  assign \$procmux$13119_CMP  = \$16 ;
  assign \$write_pointer_n$30  = \$procmux$13118_Y ;
  assign \$procmux$13122_CMP  = \$16 ;
  assign \$gate_clock$29  = \$procmux$13121_Y ;
  assign \$5  = 1'h0;
  assign \$7  = 1'h1;
  assign \$9  = \$3 ;
  assign \$auto$rtlil.cc:2965:LogicNot$824  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$826  = rst_ni;
  assign \$67  = \$16 ;
endmodule

/* src = "rtl/gpio/gpio.sv:12.8" */
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$10 ;
  wire \$100 ;
  wire \$1000 ;
  wire \$1002 ;
  wire \$1005 ;
  wire \$1007 ;
  wire \$1009 ;
  wire \$1011 ;
  wire \$1013 ;
  wire \$1016 ;
  wire \$1018 ;
  wire \$102 ;
  wire \$1021 ;
  wire \$1023 ;
  wire \$1026 ;
  wire \$1028 ;
  wire \$1030 ;
  wire \$1032 ;
  wire \$1034 ;
  wire \$1036 ;
  wire \$1038 ;
  wire \$104 ;
  wire \$1040 ;
  wire \$1042 ;
  wire \$1044 ;
  wire \$1046 ;
  wire \$1048 ;
  wire \$1050 ;
  wire \$1052 ;
  wire \$1054 ;
  wire \$1056 ;
  wire \$1058 ;
  wire \$106 ;
  wire \$1060 ;
  wire \$1062 ;
  wire \$1064 ;
  wire \$1066 ;
  wire \$1068 ;
  wire \$1070 ;
  wire \$1072 ;
  wire \$1074 ;
  wire \$1076 ;
  wire \$1078 ;
  wire \$1080 ;
  wire \$1082 ;
  wire \$1084 ;
  wire \$1086 ;
  wire \$1088 ;
  wire \$109 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$120 ;
  wire \$122 ;
  wire \$125 ;
  wire \$127 ;
  wire \$13 ;
  wire \$132 ;
  wire \$134 ;
  wire \$136 ;
  wire \$138 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$152 ;
  wire \$154 ;
  wire \$157 ;
  wire \$159 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$17 ;
  wire \$170 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$184 ;
  wire \$186 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$196 ;
  wire \$198 ;
  wire \$200 ;
  wire \$202 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$216 ;
  wire \$218 ;
  wire \$221 ;
  wire \$223 ;
  wire \$228 ;
  wire \$230 ;
  wire \$232 ;
  wire \$234 ;
  wire \$237 ;
  wire \$239 ;
  wire \$24 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$248 ;
  wire \$250 ;
  wire \$253 ;
  wire \$255 ;
  wire \$26 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$269 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$280 ;
  wire \$282 ;
  wire \$285 ;
  wire \$287 ;
  wire \$29 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$298 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$31 ;
  wire \$312 ;
  wire \$314 ;
  wire \$317 ;
  wire \$319 ;
  wire \$324 ;
  wire \$326 ;
  wire \$328 ;
  wire \$330 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$344 ;
  wire \$346 ;
  wire \$349 ;
  wire \$351 ;
  wire \$356 ;
  wire \$358 ;
  wire \$36 ;
  wire \$360 ;
  wire \$362 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$371 ;
  wire \$373 ;
  wire \$376 ;
  wire \$378 ;
  wire \$38 ;
  wire \$381 ;
  wire \$383 ;
  wire \$388 ;
  wire \$390 ;
  wire \$392 ;
  wire \$394 ;
  wire \$397 ;
  wire \$399 ;
  wire \$4 ;
  wire \$40 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$408 ;
  wire \$410 ;
  wire \$413 ;
  wire \$415 ;
  wire \$42 ;
  wire \$420 ;
  wire \$422 ;
  wire \$424 ;
  wire \$426 ;
  wire \$429 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$440 ;
  wire \$442 ;
  wire \$445 ;
  wire \$447 ;
  wire \$45 ;
  wire \$452 ;
  wire \$454 ;
  wire \$456 ;
  wire \$458 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire \$469 ;
  wire \$47 ;
  wire \$472 ;
  wire \$474 ;
  wire \$477 ;
  wire \$479 ;
  wire \$484 ;
  wire \$486 ;
  wire \$488 ;
  wire \$49 ;
  wire \$490 ;
  wire \$493 ;
  wire \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$501 ;
  wire \$504 ;
  wire \$506 ;
  wire \$509 ;
  wire \$51 ;
  wire \$511 ;
  wire \$516 ;
  wire \$518 ;
  wire \$520 ;
  wire \$522 ;
  wire \$525 ;
  wire \$527 ;
  wire \$529 ;
  wire \$53 ;
  wire \$531 ;
  wire \$533 ;
  wire \$536 ;
  wire \$538 ;
  wire \$541 ;
  wire \$543 ;
  wire \$548 ;
  wire \$550 ;
  wire \$552 ;
  wire \$554 ;
  wire \$557 ;
  wire \$559 ;
  wire \$56 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$568 ;
  wire \$570 ;
  wire \$573 ;
  wire \$575 ;
  wire \$58 ;
  wire \$580 ;
  wire \$582 ;
  wire \$584 ;
  wire \$586 ;
  wire \$589 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$6 ;
  wire \$600 ;
  wire \$602 ;
  wire \$605 ;
  wire \$607 ;
  wire \$61 ;
  wire \$612 ;
  wire \$614 ;
  wire \$616 ;
  wire \$618 ;
  wire \$621 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$629 ;
  wire \$63 ;
  wire \$632 ;
  wire \$634 ;
  wire \$637 ;
  wire \$639 ;
  wire \$644 ;
  wire \$646 ;
  wire \$648 ;
  wire \$650 ;
  wire \$653 ;
  wire \$655 ;
  wire \$657 ;
  wire \$659 ;
  wire \$661 ;
  wire \$664 ;
  wire \$666 ;
  wire \$669 ;
  wire \$671 ;
  wire \$676 ;
  wire \$678 ;
  wire \$68 ;
  wire \$680 ;
  wire \$682 ;
  wire \$685 ;
  wire \$687 ;
  wire \$689 ;
  wire \$691 ;
  wire \$693 ;
  wire \$696 ;
  wire \$698 ;
  wire \$70 ;
  wire \$701 ;
  wire \$703 ;
  wire \$708 ;
  wire \$710 ;
  wire \$712 ;
  wire \$714 ;
  wire \$717 ;
  wire \$719 ;
  wire \$72 ;
  wire \$721 ;
  wire \$723 ;
  wire \$725 ;
  wire \$728 ;
  wire \$730 ;
  wire \$733 ;
  wire \$735 ;
  wire \$74 ;
  wire \$740 ;
  wire \$742 ;
  wire \$744 ;
  wire \$746 ;
  wire \$749 ;
  wire \$751 ;
  wire \$753 ;
  wire \$755 ;
  wire \$757 ;
  wire \$760 ;
  wire \$762 ;
  wire \$765 ;
  wire \$767 ;
  wire \$77 ;
  wire \$772 ;
  wire \$774 ;
  wire \$776 ;
  wire \$778 ;
  wire \$781 ;
  wire \$783 ;
  wire \$785 ;
  wire \$787 ;
  wire \$789 ;
  wire \$79 ;
  wire \$792 ;
  wire \$794 ;
  wire \$797 ;
  wire \$799 ;
  wire \$8 ;
  wire \$804 ;
  wire \$806 ;
  wire \$808 ;
  wire \$81 ;
  wire \$810 ;
  wire \$813 ;
  wire \$815 ;
  wire \$817 ;
  wire \$819 ;
  wire \$821 ;
  wire \$824 ;
  wire \$826 ;
  wire \$829 ;
  wire \$83 ;
  wire \$831 ;
  wire \$836 ;
  wire \$838 ;
  wire \$840 ;
  wire \$842 ;
  wire \$845 ;
  wire \$847 ;
  wire \$849 ;
  wire \$85 ;
  wire \$851 ;
  wire \$853 ;
  wire \$856 ;
  wire \$858 ;
  wire \$861 ;
  wire \$863 ;
  wire \$868 ;
  wire \$870 ;
  wire \$872 ;
  wire \$874 ;
  wire \$877 ;
  wire \$879 ;
  wire \$88 ;
  wire \$881 ;
  wire \$883 ;
  wire \$885 ;
  wire \$888 ;
  wire \$890 ;
  wire \$893 ;
  wire \$895 ;
  wire \$90 ;
  wire \$900 ;
  wire \$902 ;
  wire \$904 ;
  wire \$906 ;
  wire \$909 ;
  wire \$911 ;
  wire \$913 ;
  wire \$915 ;
  wire \$917 ;
  wire \$920 ;
  wire \$922 ;
  wire \$925 ;
  wire \$927 ;
  wire \$93 ;
  wire \$932 ;
  wire \$934 ;
  wire \$936 ;
  wire \$938 ;
  wire \$941 ;
  wire \$943 ;
  wire \$945 ;
  wire \$947 ;
  wire \$949 ;
  wire \$95 ;
  wire \$952 ;
  wire \$954 ;
  wire \$957 ;
  wire \$959 ;
  wire \$964 ;
  wire \$966 ;
  wire \$968 ;
  wire \$970 ;
  wire \$973 ;
  wire \$975 ;
  wire \$977 ;
  wire \$979 ;
  wire \$981 ;
  wire \$984 ;
  wire \$986 ;
  wire \$989 ;
  wire \$991 ;
  wire \$996 ;
  wire \$998 ;
  wire \$auto$rtlil.cc:2965:LogicNot$100 ;
  wire \$auto$rtlil.cc:2965:LogicNot$102 ;
  wire \$auto$rtlil.cc:2965:LogicNot$103 ;
  wire \$auto$rtlil.cc:2965:LogicNot$105 ;
  wire \$auto$rtlil.cc:2965:LogicNot$106 ;
  wire \$auto$rtlil.cc:2965:LogicNot$108 ;
  wire \$auto$rtlil.cc:2965:LogicNot$109 ;
  wire \$auto$rtlil.cc:2965:LogicNot$111 ;
  wire \$auto$rtlil.cc:2965:LogicNot$112 ;
  wire \$auto$rtlil.cc:2965:LogicNot$114 ;
  wire \$auto$rtlil.cc:2965:LogicNot$115 ;
  wire \$auto$rtlil.cc:2965:LogicNot$117 ;
  wire \$auto$rtlil.cc:2965:LogicNot$118 ;
  wire \$auto$rtlil.cc:2965:LogicNot$120 ;
  wire \$auto$rtlil.cc:2965:LogicNot$121 ;
  wire \$auto$rtlil.cc:2965:LogicNot$123 ;
  wire \$auto$rtlil.cc:2965:LogicNot$124 ;
  wire \$auto$rtlil.cc:2965:LogicNot$126 ;
  wire \$auto$rtlil.cc:2965:LogicNot$127 ;
  wire \$auto$rtlil.cc:2965:LogicNot$129 ;
  wire \$auto$rtlil.cc:2965:LogicNot$130 ;
  wire \$auto$rtlil.cc:2965:LogicNot$132 ;
  wire \$auto$rtlil.cc:2965:LogicNot$133 ;
  wire \$auto$rtlil.cc:2965:LogicNot$135 ;
  wire \$auto$rtlil.cc:2965:LogicNot$136 ;
  wire \$auto$rtlil.cc:2965:LogicNot$138 ;
  wire \$auto$rtlil.cc:2965:LogicNot$139 ;
  wire \$auto$rtlil.cc:2965:LogicNot$141 ;
  wire \$auto$rtlil.cc:2965:LogicNot$142 ;
  wire \$auto$rtlil.cc:2965:LogicNot$144 ;
  wire \$auto$rtlil.cc:2965:LogicNot$145 ;
  wire \$auto$rtlil.cc:2965:LogicNot$147 ;
  wire \$auto$rtlil.cc:2965:LogicNot$148 ;
  wire \$auto$rtlil.cc:2965:LogicNot$150 ;
  wire \$auto$rtlil.cc:2965:LogicNot$151 ;
  wire \$auto$rtlil.cc:2965:LogicNot$153 ;
  wire \$auto$rtlil.cc:2965:LogicNot$154 ;
  wire \$auto$rtlil.cc:2965:LogicNot$156 ;
  wire \$auto$rtlil.cc:2965:LogicNot$157 ;
  wire \$auto$rtlil.cc:2965:LogicNot$63 ;
  wire \$auto$rtlil.cc:2965:LogicNot$64 ;
  wire \$auto$rtlil.cc:2965:LogicNot$66 ;
  wire \$auto$rtlil.cc:2965:LogicNot$67 ;
  wire \$auto$rtlil.cc:2965:LogicNot$69 ;
  wire \$auto$rtlil.cc:2965:LogicNot$70 ;
  wire \$auto$rtlil.cc:2965:LogicNot$72 ;
  wire \$auto$rtlil.cc:2965:LogicNot$73 ;
  wire \$auto$rtlil.cc:2965:LogicNot$75 ;
  wire \$auto$rtlil.cc:2965:LogicNot$76 ;
  wire \$auto$rtlil.cc:2965:LogicNot$78 ;
  wire \$auto$rtlil.cc:2965:LogicNot$79 ;
  wire \$auto$rtlil.cc:2965:LogicNot$81 ;
  wire \$auto$rtlil.cc:2965:LogicNot$82 ;
  wire \$auto$rtlil.cc:2965:LogicNot$84 ;
  wire \$auto$rtlil.cc:2965:LogicNot$85 ;
  wire \$auto$rtlil.cc:2965:LogicNot$87 ;
  wire \$auto$rtlil.cc:2965:LogicNot$88 ;
  wire \$auto$rtlil.cc:2965:LogicNot$90 ;
  wire \$auto$rtlil.cc:2965:LogicNot$91 ;
  wire \$auto$rtlil.cc:2965:LogicNot$93 ;
  wire \$auto$rtlil.cc:2965:LogicNot$94 ;
  wire \$auto$rtlil.cc:2965:LogicNot$96 ;
  wire \$auto$rtlil.cc:2965:LogicNot$97 ;
  wire \$auto$rtlil.cc:2965:LogicNot$99 ;
  wire \$auto$rtlil.cc:3092:Mux$101 ;
  wire \$auto$rtlil.cc:3092:Mux$104 ;
  wire \$auto$rtlil.cc:3092:Mux$107 ;
  wire \$auto$rtlil.cc:3092:Mux$110 ;
  wire \$auto$rtlil.cc:3092:Mux$113 ;
  wire \$auto$rtlil.cc:3092:Mux$116 ;
  wire \$auto$rtlil.cc:3092:Mux$119 ;
  wire \$auto$rtlil.cc:3092:Mux$122 ;
  wire \$auto$rtlil.cc:3092:Mux$125 ;
  wire \$auto$rtlil.cc:3092:Mux$128 ;
  wire \$auto$rtlil.cc:3092:Mux$131 ;
  wire \$auto$rtlil.cc:3092:Mux$134 ;
  wire \$auto$rtlil.cc:3092:Mux$137 ;
  wire \$auto$rtlil.cc:3092:Mux$140 ;
  wire \$auto$rtlil.cc:3092:Mux$143 ;
  wire \$auto$rtlil.cc:3092:Mux$146 ;
  wire \$auto$rtlil.cc:3092:Mux$149 ;
  wire \$auto$rtlil.cc:3092:Mux$152 ;
  wire \$auto$rtlil.cc:3092:Mux$155 ;
  wire \$auto$rtlil.cc:3092:Mux$158 ;
  wire \$auto$rtlil.cc:3092:Mux$65 ;
  wire \$auto$rtlil.cc:3092:Mux$68 ;
  wire \$auto$rtlil.cc:3092:Mux$71 ;
  wire \$auto$rtlil.cc:3092:Mux$74 ;
  wire \$auto$rtlil.cc:3092:Mux$77 ;
  wire \$auto$rtlil.cc:3092:Mux$80 ;
  wire \$auto$rtlil.cc:3092:Mux$83 ;
  wire \$auto$rtlil.cc:3092:Mux$86 ;
  wire \$auto$rtlil.cc:3092:Mux$89 ;
  wire \$auto$rtlil.cc:3092:Mux$92 ;
  wire \$auto$rtlil.cc:3092:Mux$95 ;
  wire \$auto$rtlil.cc:3092:Mux$98 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[103:102]$667 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[108:107]$699 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[113:112]$731 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[118:117]$763 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[123:122]$795 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[128:127]$827 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[133:132]$859 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[138:137]$891 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[13:12]$91 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[143:142]$923 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[148:147]$955 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[153:152]$987 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[158:157]$1019 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[18:17]$123 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[23:22]$155 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[28:27]$187 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[33:32]$219 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[38:37]$251 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[3:2]$27 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[43:42]$283 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[48:47]$315 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[53:52]$347 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[58:57]$379 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[63:62]$411 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[68:67]$443 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[73:72]$475 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[78:77]$507 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[83:82]$539 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[88:87]$571 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[8:7]$59 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[93:92]$603 ;
  /* src = "rtl/gpio/gpio.sv:143.13-146.16" */
  wire [1:0] \$hw2reg[98:97]$635 ;
  wire [1:0] \$procmux$14863_Y ;
  wire \$procmux$14864_CMP ;
  wire [1:0] \$procmux$14865_Y ;
  wire \$procmux$14866_CMP ;
  wire [1:0] \$procmux$14867_Y ;
  wire \$procmux$14868_CMP ;
  wire [1:0] \$procmux$14869_Y ;
  wire \$procmux$14870_CMP ;
  wire [1:0] \$procmux$14871_Y ;
  wire \$procmux$14872_CMP ;
  wire [1:0] \$procmux$14873_Y ;
  wire \$procmux$14874_CMP ;
  wire [1:0] \$procmux$14875_Y ;
  wire \$procmux$14876_CMP ;
  wire [1:0] \$procmux$14877_Y ;
  wire \$procmux$14878_CMP ;
  wire [1:0] \$procmux$14879_Y ;
  wire \$procmux$14880_CMP ;
  wire [1:0] \$procmux$14881_Y ;
  wire \$procmux$14882_CMP ;
  wire [1:0] \$procmux$14883_Y ;
  wire \$procmux$14884_CMP ;
  wire [1:0] \$procmux$14885_Y ;
  wire \$procmux$14886_CMP ;
  wire [1:0] \$procmux$14887_Y ;
  wire \$procmux$14888_CMP ;
  wire [1:0] \$procmux$14889_Y ;
  wire \$procmux$14890_CMP ;
  wire [1:0] \$procmux$14891_Y ;
  wire \$procmux$14892_CMP ;
  wire [1:0] \$procmux$14893_Y ;
  wire \$procmux$14894_CMP ;
  wire [1:0] \$procmux$14895_Y ;
  wire \$procmux$14896_CMP ;
  wire [1:0] \$procmux$14897_Y ;
  wire \$procmux$14898_CMP ;
  wire [1:0] \$procmux$14899_Y ;
  wire \$procmux$14900_CMP ;
  wire [1:0] \$procmux$14901_Y ;
  wire \$procmux$14902_CMP ;
  wire [1:0] \$procmux$14903_Y ;
  wire \$procmux$14904_CMP ;
  wire [1:0] \$procmux$14905_Y ;
  wire \$procmux$14906_CMP ;
  wire [1:0] \$procmux$14907_Y ;
  wire \$procmux$14908_CMP ;
  wire [1:0] \$procmux$14909_Y ;
  wire \$procmux$14910_CMP ;
  wire [1:0] \$procmux$14911_Y ;
  wire \$procmux$14912_CMP ;
  wire [1:0] \$procmux$14913_Y ;
  wire \$procmux$14914_CMP ;
  wire [1:0] \$procmux$14915_Y ;
  wire \$procmux$14916_CMP ;
  wire [1:0] \$procmux$14917_Y ;
  wire \$procmux$14918_CMP ;
  wire [1:0] \$procmux$14919_Y ;
  wire \$procmux$14920_CMP ;
  wire [1:0] \$procmux$14921_Y ;
  wire \$procmux$14922_CMP ;
  wire [1:0] \$procmux$14923_Y ;
  wire \$procmux$14924_CMP ;
  wire [1:0] \$procmux$14925_Y ;
  wire \$procmux$14926_CMP ;
  /* src = "rtl/gpio/gpio.sv:25.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[0].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[0].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[0].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[0].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[0].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[0].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[10].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[10].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[10].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[10].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[10].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[10].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[11].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[11].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[11].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[11].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[11].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[11].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[12].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[12].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[12].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[12].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[12].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[12].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[13].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[13].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[13].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[13].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[13].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[13].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[14].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[14].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[14].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[14].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[14].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[14].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[15].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[15].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[15].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[15].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[15].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[15].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[16].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[16].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[16].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[16].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[16].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[16].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[17].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[17].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[17].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[17].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[17].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[17].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[18].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[18].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[18].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[18].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[18].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[18].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[19].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[19].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[19].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[19].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[19].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[19].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[1].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[1].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[1].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[1].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[1].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[1].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[20].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[20].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[20].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[20].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[20].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[20].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[21].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[21].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[21].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[21].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[21].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[21].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[22].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[22].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[22].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[22].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[22].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[22].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[23].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[23].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[23].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[23].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[23].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[23].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[24].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[24].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[24].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[24].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[24].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[24].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[25].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[25].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[25].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[25].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[25].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[25].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[26].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[26].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[26].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[26].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[26].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[26].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[27].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[27].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[27].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[27].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[27].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[27].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[28].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[28].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[28].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[28].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[28].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[28].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[29].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[29].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[29].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[29].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[29].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[29].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[2].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[2].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[2].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[2].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[2].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[2].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[30].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[30].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[30].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[30].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[30].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[30].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[31].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[31].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[31].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[31].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[31].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[31].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[3].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[3].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[3].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[3].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[3].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[3].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[4].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[4].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[4].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[4].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[4].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[4].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[5].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[5].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[5].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[5].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[5].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[5].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[6].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[6].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[6].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[6].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[6].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[6].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[7].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[7].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[7].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[7].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[7].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[7].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[8].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[8].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[8].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[8].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[8].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[8].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[9].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[9].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[9].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[9].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[9].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[9].serial_q ;
  /* src = "rtl/gpio/gpio.sv:64.25" */
  wire [31:0] gpio_edge;
  /* src = "rtl/gpio/gpio.sv:30.34" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/gpio/gpio.sv:61.25" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/gpio/gpio.sv:39.34" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/gpio/gpio.sv:65.25" */
  wire [31:0] gpio_intrpt;
  /* src = "rtl/gpio/gpio.sv:67.9" */
  wire gpio_intrpt_pending;
  /* src = "rtl/gpio/gpio.sv:32.34" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/gpio/gpio.sv:36.34" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/gpio/gpio.sv:58.33" */
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio.sv:42.34" */
  output interrupt_o;
  wire interrupt_o;
  /* src = "rtl/gpio/gpio.sv:45.34" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio.sv:47.34" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio.sv:57.33" */
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio.sv:27.34" */
  input rst_ni;
  wire rst_ni;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$63 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1001  (
    .A(\gen_gpios[31].serial_d ),
    .B(\$1000 ),
    .Y(\$1002 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1003  (
    .A(\gen_gpios[31].f_edge ),
    .B(\gen_gpios[31].r_edge ),
    .S(reg2hw[217]),
    .Y(\$auto$rtlil.cc:3092:Mux$158 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1004  (
    .A(reg2hw[223]),
    .Y(\$1005 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1006  (
    .A(reg2hw[222]),
    .B(\$1005 ),
    .Y(\$1007 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1008  (
    .A(reg2hw[222]),
    .B(reg2hw[223]),
    .Y(\$1009 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(\$100 ),
    .B(\gen_gpios[3].serial_q ),
    .Y(\$102 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1010  (
    .A(gpio_in_sync[31]),
    .B(\gen_gpios[31].is_input ),
    .Y(\$1011 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1012  (
    .A(reg2hw[221]),
    .B(\gen_gpios[31].is_output ),
    .Y(\$1013 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1015  (
    .A(\gen_gpios[31].is_output ),
    .B(reg2hw[220]),
    .Y(\$1016 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1017  (
    .A(reg2hw[221]),
    .Y(\$1018 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1020  (
    .A(gpio_edge[31]),
    .B(reg2hw[219]),
    .Y(\$1021 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1022  (
    .A(\$1021 ),
    .B(\gen_gpios[31].is_input ),
    .Y(\$1023 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1027  (
    .A(\$1026 ),
    .B(reg2hw[8]),
    .Y(\$1028 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1029  (
    .A(\$1028 ),
    .B(reg2hw[15]),
    .Y(\$1030 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\gen_gpios[3].serial_q ),
    .Y(\$104 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1031  (
    .A(\$1030 ),
    .B(reg2hw[22]),
    .Y(\$1032 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1033  (
    .A(\$1032 ),
    .B(reg2hw[29]),
    .Y(\$1034 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1035  (
    .A(\$1034 ),
    .B(reg2hw[36]),
    .Y(\$1036 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1037  (
    .A(\$1036 ),
    .B(reg2hw[43]),
    .Y(\$1038 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1039  (
    .A(\$1038 ),
    .B(reg2hw[50]),
    .Y(\$1040 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1041  (
    .A(\$1040 ),
    .B(reg2hw[57]),
    .Y(\$1042 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1043  (
    .A(\$1042 ),
    .B(reg2hw[64]),
    .Y(\$1044 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1045  (
    .A(\$1044 ),
    .B(reg2hw[71]),
    .Y(\$1046 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1047  (
    .A(\$1046 ),
    .B(reg2hw[78]),
    .Y(\$1048 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1049  (
    .A(\$1048 ),
    .B(reg2hw[85]),
    .Y(\$1050 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\gen_gpios[3].serial_d ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1051  (
    .A(\$1050 ),
    .B(reg2hw[92]),
    .Y(\$1052 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1053  (
    .A(\$1052 ),
    .B(reg2hw[99]),
    .Y(\$1054 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1055  (
    .A(\$1054 ),
    .B(reg2hw[106]),
    .Y(\$1056 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1057  (
    .A(\$1056 ),
    .B(reg2hw[113]),
    .Y(\$1058 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1059  (
    .A(\$1058 ),
    .B(reg2hw[120]),
    .Y(\$1060 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1061  (
    .A(\$1060 ),
    .B(reg2hw[127]),
    .Y(\$1062 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1063  (
    .A(\$1062 ),
    .B(reg2hw[134]),
    .Y(\$1064 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1065  (
    .A(\$1064 ),
    .B(reg2hw[141]),
    .Y(\$1066 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1067  (
    .A(\$1066 ),
    .B(reg2hw[148]),
    .Y(\$1068 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1069  (
    .A(\$1068 ),
    .B(reg2hw[155]),
    .Y(\$1070 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(\gen_gpios[3].f_edge ),
    .B(\gen_gpios[3].r_edge ),
    .S(reg2hw[21]),
    .Y(\$auto$rtlil.cc:3092:Mux$74 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1071  (
    .A(\$1070 ),
    .B(reg2hw[162]),
    .Y(\$1072 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1073  (
    .A(\$1072 ),
    .B(reg2hw[169]),
    .Y(\$1074 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1075  (
    .A(\$1074 ),
    .B(reg2hw[176]),
    .Y(\$1076 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1077  (
    .A(\$1076 ),
    .B(reg2hw[183]),
    .Y(\$1078 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1079  (
    .A(\$1078 ),
    .B(reg2hw[190]),
    .Y(\$1080 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(reg2hw[27]),
    .Y(\$109 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1081  (
    .A(\$1080 ),
    .B(reg2hw[197]),
    .Y(\$1082 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1083  (
    .A(\$1082 ),
    .B(reg2hw[204]),
    .Y(\$1084 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1085  (
    .A(\$1084 ),
    .B(reg2hw[211]),
    .Y(\$1086 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1087  (
    .A(\$1086 ),
    .B(reg2hw[218]),
    .Y(\$1088 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$11  (
    .A(\gen_gpios[0].f_edge ),
    .B(\gen_gpios[0].r_edge ),
    .S(reg2hw[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(reg2hw[26]),
    .B(\$109 ),
    .Y(\$111 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(reg2hw[26]),
    .B(reg2hw[27]),
    .Y(\$113 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(gpio_in_sync[3]),
    .B(\gen_gpios[3].is_input ),
    .Y(\$115 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(reg2hw[25]),
    .B(\gen_gpios[3].is_output ),
    .Y(\$117 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\gen_gpios[3].is_output ),
    .B(reg2hw[24]),
    .Y(\$120 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(reg2hw[6]),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$121  (
    .A(reg2hw[25]),
    .Y(\$122 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(gpio_edge[3]),
    .B(reg2hw[23]),
    .Y(\$125 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(\$125 ),
    .B(\gen_gpios[3].is_input ),
    .Y(\$127 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$129  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$75 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(\gen_gpios[4].serial_d ),
    .Y(\$132 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(\$132 ),
    .B(\gen_gpios[4].serial_q ),
    .Y(\$134 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(\gen_gpios[4].serial_q ),
    .Y(\$136 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(\gen_gpios[4].serial_d ),
    .B(\$136 ),
    .Y(\$138 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$139  (
    .A(\gen_gpios[4].f_edge ),
    .B(\gen_gpios[4].r_edge ),
    .S(reg2hw[28]),
    .Y(\$auto$rtlil.cc:3092:Mux$77 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(reg2hw[5]),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(reg2hw[34]),
    .Y(\$141 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(reg2hw[33]),
    .B(\$141 ),
    .Y(\$143 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(reg2hw[33]),
    .B(reg2hw[34]),
    .Y(\$145 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(gpio_in_sync[4]),
    .B(\gen_gpios[4].is_input ),
    .Y(\$147 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(reg2hw[32]),
    .B(\gen_gpios[4].is_output ),
    .Y(\$149 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\gen_gpios[4].is_output ),
    .B(reg2hw[31]),
    .Y(\$152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(reg2hw[32]),
    .Y(\$154 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(gpio_edge[4]),
    .B(reg2hw[30]),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$157 ),
    .B(\gen_gpios[4].is_input ),
    .Y(\$159 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(reg2hw[5]),
    .B(reg2hw[6]),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$78 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(\gen_gpios[5].serial_d ),
    .Y(\$164 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(\$164 ),
    .B(\gen_gpios[5].serial_q ),
    .Y(\$166 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(\gen_gpios[5].serial_q ),
    .Y(\$168 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(\gen_gpios[5].serial_d ),
    .B(\$168 ),
    .Y(\$170 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$171  (
    .A(\gen_gpios[5].f_edge ),
    .B(\gen_gpios[5].r_edge ),
    .S(reg2hw[35]),
    .Y(\$auto$rtlil.cc:3092:Mux$80 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(reg2hw[41]),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(reg2hw[40]),
    .B(\$173 ),
    .Y(\$175 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(reg2hw[40]),
    .B(reg2hw[41]),
    .Y(\$177 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(gpio_in_sync[5]),
    .B(\gen_gpios[5].is_input ),
    .Y(\$179 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(gpio_in_sync[0]),
    .B(\gen_gpios[0].is_input ),
    .Y(\$19 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(reg2hw[39]),
    .B(\gen_gpios[5].is_output ),
    .Y(\$181 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(\gen_gpios[5].is_output ),
    .B(reg2hw[38]),
    .Y(\$184 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(reg2hw[39]),
    .Y(\$186 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(gpio_edge[5]),
    .B(reg2hw[37]),
    .Y(\$189 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(\$189 ),
    .B(\gen_gpios[5].is_input ),
    .Y(\$191 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$81 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\gen_gpios[6].serial_d ),
    .Y(\$196 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(\$196 ),
    .B(\gen_gpios[6].serial_q ),
    .Y(\$198 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(\gen_gpios[6].serial_q ),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(reg2hw[4]),
    .B(\gen_gpios[0].is_output ),
    .Y(\$21 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\gen_gpios[6].serial_d ),
    .B(\$200 ),
    .Y(\$202 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$203  (
    .A(\gen_gpios[6].f_edge ),
    .B(\gen_gpios[6].r_edge ),
    .S(reg2hw[42]),
    .Y(\$auto$rtlil.cc:3092:Mux$83 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(reg2hw[48]),
    .Y(\$205 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(reg2hw[47]),
    .B(\$205 ),
    .Y(\$207 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(reg2hw[47]),
    .B(reg2hw[48]),
    .Y(\$209 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(gpio_in_sync[6]),
    .B(\gen_gpios[6].is_input ),
    .Y(\$211 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(reg2hw[46]),
    .B(\gen_gpios[6].is_output ),
    .Y(\$213 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$215  (
    .A(\gen_gpios[6].is_output ),
    .B(reg2hw[45]),
    .Y(\$216 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(reg2hw[46]),
    .Y(\$218 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(gpio_edge[6]),
    .B(reg2hw[44]),
    .Y(\$221 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(\$221 ),
    .B(\gen_gpios[6].is_input ),
    .Y(\$223 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$225  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$84 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$227  (
    .A(\gen_gpios[7].serial_d ),
    .Y(\$228 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$229  (
    .A(\$228 ),
    .B(\gen_gpios[7].serial_q ),
    .Y(\$230 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\gen_gpios[0].is_output ),
    .B(reg2hw[3]),
    .Y(\$24 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$231  (
    .A(\gen_gpios[7].serial_q ),
    .Y(\$232 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(\gen_gpios[7].serial_d ),
    .B(\$232 ),
    .Y(\$234 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$235  (
    .A(\gen_gpios[7].f_edge ),
    .B(\gen_gpios[7].r_edge ),
    .S(reg2hw[49]),
    .Y(\$auto$rtlil.cc:3092:Mux$86 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(reg2hw[55]),
    .Y(\$237 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(reg2hw[54]),
    .B(\$237 ),
    .Y(\$239 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(reg2hw[54]),
    .B(reg2hw[55]),
    .Y(\$241 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(gpio_in_sync[7]),
    .B(\gen_gpios[7].is_input ),
    .Y(\$243 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(reg2hw[53]),
    .B(\gen_gpios[7].is_output ),
    .Y(\$245 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(\gen_gpios[7].is_output ),
    .B(reg2hw[52]),
    .Y(\$248 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(reg2hw[53]),
    .Y(\$250 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(reg2hw[4]),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$252  (
    .A(gpio_edge[7]),
    .B(reg2hw[51]),
    .Y(\$253 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$254  (
    .A(\$253 ),
    .B(\gen_gpios[7].is_input ),
    .Y(\$255 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\gen_gpios[8].serial_d ),
    .Y(\$260 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(\$260 ),
    .B(\gen_gpios[8].serial_q ),
    .Y(\$262 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\gen_gpios[8].serial_q ),
    .Y(\$264 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(\gen_gpios[8].serial_d ),
    .B(\$264 ),
    .Y(\$266 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$267  (
    .A(\gen_gpios[8].f_edge ),
    .B(\gen_gpios[8].r_edge ),
    .S(reg2hw[56]),
    .Y(\$auto$rtlil.cc:3092:Mux$89 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$268  (
    .A(reg2hw[62]),
    .Y(\$269 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$270  (
    .A(reg2hw[61]),
    .B(\$269 ),
    .Y(\$271 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$272  (
    .A(reg2hw[61]),
    .B(reg2hw[62]),
    .Y(\$273 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$274  (
    .A(gpio_in_sync[8]),
    .B(\gen_gpios[8].is_input ),
    .Y(\$275 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$276  (
    .A(reg2hw[60]),
    .B(\gen_gpios[8].is_output ),
    .Y(\$277 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$279  (
    .A(\gen_gpios[8].is_output ),
    .B(reg2hw[59]),
    .Y(\$280 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(gpio_edge[0]),
    .B(reg2hw[2]),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(reg2hw[60]),
    .Y(\$282 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$284  (
    .A(gpio_edge[8]),
    .B(reg2hw[58]),
    .Y(\$285 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$286  (
    .A(\$285 ),
    .B(\gen_gpios[8].is_input ),
    .Y(\$287 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$289  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$90 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$291  (
    .A(\gen_gpios[9].serial_d ),
    .Y(\$292 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$293  (
    .A(\$292 ),
    .B(\gen_gpios[9].serial_q ),
    .Y(\$294 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$295  (
    .A(\gen_gpios[9].serial_q ),
    .Y(\$296 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\gen_gpios[9].serial_d ),
    .B(\$296 ),
    .Y(\$298 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$299  (
    .A(\gen_gpios[9].f_edge ),
    .B(\gen_gpios[9].r_edge ),
    .S(reg2hw[63]),
    .Y(\$auto$rtlil.cc:3092:Mux$92 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\gen_gpios[0].serial_d ),
    .Y(\$4 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_gpios[0].is_input ),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$300  (
    .A(reg2hw[69]),
    .Y(\$301 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(reg2hw[68]),
    .B(\$301 ),
    .Y(\$303 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(reg2hw[68]),
    .B(reg2hw[69]),
    .Y(\$305 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(gpio_in_sync[9]),
    .B(\gen_gpios[9].is_input ),
    .Y(\$307 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$308  (
    .A(reg2hw[67]),
    .B(\gen_gpios[9].is_output ),
    .Y(\$309 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$311  (
    .A(\gen_gpios[9].is_output ),
    .B(reg2hw[66]),
    .Y(\$312 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$313  (
    .A(reg2hw[67]),
    .Y(\$314 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$316  (
    .A(gpio_edge[9]),
    .B(reg2hw[65]),
    .Y(\$317 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$318  (
    .A(\$317 ),
    .B(\gen_gpios[9].is_input ),
    .Y(\$319 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$321  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$93 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$323  (
    .A(\gen_gpios[10].serial_d ),
    .Y(\$324 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$325  (
    .A(\$324 ),
    .B(\gen_gpios[10].serial_q ),
    .Y(\$326 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$327  (
    .A(\gen_gpios[10].serial_q ),
    .Y(\$328 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$329  (
    .A(\gen_gpios[10].serial_d ),
    .B(\$328 ),
    .Y(\$330 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$66 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$331  (
    .A(\gen_gpios[10].f_edge ),
    .B(\gen_gpios[10].r_edge ),
    .S(reg2hw[70]),
    .Y(\$auto$rtlil.cc:3092:Mux$95 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(reg2hw[76]),
    .Y(\$333 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$334  (
    .A(reg2hw[75]),
    .B(\$333 ),
    .Y(\$335 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$336  (
    .A(reg2hw[75]),
    .B(reg2hw[76]),
    .Y(\$337 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(gpio_in_sync[10]),
    .B(\gen_gpios[10].is_input ),
    .Y(\$339 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$340  (
    .A(reg2hw[74]),
    .B(\gen_gpios[10].is_output ),
    .Y(\$341 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$343  (
    .A(\gen_gpios[10].is_output ),
    .B(reg2hw[73]),
    .Y(\$344 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$345  (
    .A(reg2hw[74]),
    .Y(\$346 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$348  (
    .A(gpio_edge[10]),
    .B(reg2hw[72]),
    .Y(\$349 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\gen_gpios[1].serial_d ),
    .Y(\$36 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$350  (
    .A(\$349 ),
    .B(\gen_gpios[10].is_input ),
    .Y(\$351 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$353  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$96 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$355  (
    .A(\gen_gpios[11].serial_d ),
    .Y(\$356 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$357  (
    .A(\$356 ),
    .B(\gen_gpios[11].serial_q ),
    .Y(\$358 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$359  (
    .A(\gen_gpios[11].serial_q ),
    .Y(\$360 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$361  (
    .A(\gen_gpios[11].serial_d ),
    .B(\$360 ),
    .Y(\$362 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$363  (
    .A(\gen_gpios[11].f_edge ),
    .B(\gen_gpios[11].r_edge ),
    .S(reg2hw[77]),
    .Y(\$auto$rtlil.cc:3092:Mux$98 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$364  (
    .A(reg2hw[83]),
    .Y(\$365 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$366  (
    .A(reg2hw[82]),
    .B(\$365 ),
    .Y(\$367 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$368  (
    .A(reg2hw[82]),
    .B(reg2hw[83]),
    .Y(\$369 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(\$36 ),
    .B(\gen_gpios[1].serial_q ),
    .Y(\$38 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$370  (
    .A(gpio_in_sync[11]),
    .B(\gen_gpios[11].is_input ),
    .Y(\$371 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$372  (
    .A(reg2hw[81]),
    .B(\gen_gpios[11].is_output ),
    .Y(\$373 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$375  (
    .A(\gen_gpios[11].is_output ),
    .B(reg2hw[80]),
    .Y(\$376 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$377  (
    .A(reg2hw[81]),
    .Y(\$378 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$380  (
    .A(gpio_edge[11]),
    .B(reg2hw[79]),
    .Y(\$381 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$382  (
    .A(\$381 ),
    .B(\gen_gpios[11].is_input ),
    .Y(\$383 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$385  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$99 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$387  (
    .A(\gen_gpios[12].serial_d ),
    .Y(\$388 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$389  (
    .A(\$388 ),
    .B(\gen_gpios[12].serial_q ),
    .Y(\$390 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_gpios[1].serial_q ),
    .Y(\$40 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$391  (
    .A(\gen_gpios[12].serial_q ),
    .Y(\$392 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$393  (
    .A(\gen_gpios[12].serial_d ),
    .B(\$392 ),
    .Y(\$394 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$395  (
    .A(\gen_gpios[12].f_edge ),
    .B(\gen_gpios[12].r_edge ),
    .S(reg2hw[84]),
    .Y(\$auto$rtlil.cc:3092:Mux$101 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$396  (
    .A(reg2hw[90]),
    .Y(\$397 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$398  (
    .A(reg2hw[89]),
    .B(\$397 ),
    .Y(\$399 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$400  (
    .A(reg2hw[89]),
    .B(reg2hw[90]),
    .Y(\$401 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$402  (
    .A(gpio_in_sync[12]),
    .B(\gen_gpios[12].is_input ),
    .Y(\$403 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$404  (
    .A(reg2hw[88]),
    .B(\gen_gpios[12].is_output ),
    .Y(\$405 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$407  (
    .A(\gen_gpios[12].is_output ),
    .B(reg2hw[87]),
    .Y(\$408 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$409  (
    .A(reg2hw[88]),
    .Y(\$410 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_gpios[1].serial_d ),
    .B(\$40 ),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$412  (
    .A(gpio_edge[12]),
    .B(reg2hw[86]),
    .Y(\$413 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$414  (
    .A(\$413 ),
    .B(\gen_gpios[12].is_input ),
    .Y(\$415 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$417  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$102 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$419  (
    .A(\gen_gpios[13].serial_d ),
    .Y(\$420 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$421  (
    .A(\$420 ),
    .B(\gen_gpios[13].serial_q ),
    .Y(\$422 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$423  (
    .A(\gen_gpios[13].serial_q ),
    .Y(\$424 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$425  (
    .A(\gen_gpios[13].serial_d ),
    .B(\$424 ),
    .Y(\$426 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$427  (
    .A(\gen_gpios[13].f_edge ),
    .B(\gen_gpios[13].r_edge ),
    .S(reg2hw[91]),
    .Y(\$auto$rtlil.cc:3092:Mux$104 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$428  (
    .A(reg2hw[97]),
    .Y(\$429 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(\gen_gpios[1].f_edge ),
    .B(\gen_gpios[1].r_edge ),
    .S(reg2hw[7]),
    .Y(\$auto$rtlil.cc:3092:Mux$68 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$430  (
    .A(reg2hw[96]),
    .B(\$429 ),
    .Y(\$431 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$432  (
    .A(reg2hw[96]),
    .B(reg2hw[97]),
    .Y(\$433 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$434  (
    .A(gpio_in_sync[13]),
    .B(\gen_gpios[13].is_input ),
    .Y(\$435 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$436  (
    .A(reg2hw[95]),
    .B(\gen_gpios[13].is_output ),
    .Y(\$437 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$439  (
    .A(\gen_gpios[13].is_output ),
    .B(reg2hw[94]),
    .Y(\$440 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(reg2hw[13]),
    .Y(\$45 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$441  (
    .A(reg2hw[95]),
    .Y(\$442 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$444  (
    .A(gpio_edge[13]),
    .B(reg2hw[93]),
    .Y(\$445 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$446  (
    .A(\$445 ),
    .B(\gen_gpios[13].is_input ),
    .Y(\$447 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$449  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$105 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$451  (
    .A(\gen_gpios[14].serial_d ),
    .Y(\$452 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$453  (
    .A(\$452 ),
    .B(\gen_gpios[14].serial_q ),
    .Y(\$454 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$455  (
    .A(\gen_gpios[14].serial_q ),
    .Y(\$456 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$457  (
    .A(\gen_gpios[14].serial_d ),
    .B(\$456 ),
    .Y(\$458 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$459  (
    .A(\gen_gpios[14].f_edge ),
    .B(\gen_gpios[14].r_edge ),
    .S(reg2hw[98]),
    .Y(\$auto$rtlil.cc:3092:Mux$107 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(reg2hw[12]),
    .B(\$45 ),
    .Y(\$47 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$460  (
    .A(reg2hw[104]),
    .Y(\$461 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$462  (
    .A(reg2hw[103]),
    .B(\$461 ),
    .Y(\$463 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$464  (
    .A(reg2hw[103]),
    .B(reg2hw[104]),
    .Y(\$465 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$466  (
    .A(gpio_in_sync[14]),
    .B(\gen_gpios[14].is_input ),
    .Y(\$467 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$468  (
    .A(reg2hw[102]),
    .B(\gen_gpios[14].is_output ),
    .Y(\$469 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$471  (
    .A(\gen_gpios[14].is_output ),
    .B(reg2hw[101]),
    .Y(\$472 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$473  (
    .A(reg2hw[102]),
    .Y(\$474 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$476  (
    .A(gpio_edge[14]),
    .B(reg2hw[100]),
    .Y(\$477 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$478  (
    .A(\$477 ),
    .B(\gen_gpios[14].is_input ),
    .Y(\$479 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(reg2hw[12]),
    .B(reg2hw[13]),
    .Y(\$49 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$481  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$108 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$483  (
    .A(\gen_gpios[15].serial_d ),
    .Y(\$484 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$485  (
    .A(\$484 ),
    .B(\gen_gpios[15].serial_q ),
    .Y(\$486 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$487  (
    .A(\gen_gpios[15].serial_q ),
    .Y(\$488 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$489  (
    .A(\gen_gpios[15].serial_d ),
    .B(\$488 ),
    .Y(\$490 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$491  (
    .A(\gen_gpios[15].f_edge ),
    .B(\gen_gpios[15].r_edge ),
    .S(reg2hw[105]),
    .Y(\$auto$rtlil.cc:3092:Mux$110 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$492  (
    .A(reg2hw[111]),
    .Y(\$493 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$494  (
    .A(reg2hw[110]),
    .B(\$493 ),
    .Y(\$495 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$496  (
    .A(reg2hw[110]),
    .B(reg2hw[111]),
    .Y(\$497 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$498  (
    .A(gpio_in_sync[15]),
    .B(\gen_gpios[15].is_input ),
    .Y(\$499 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$4 ),
    .B(\gen_gpios[0].serial_q ),
    .Y(\$6 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(gpio_in_sync[1]),
    .B(\gen_gpios[1].is_input ),
    .Y(\$51 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$500  (
    .A(reg2hw[109]),
    .B(\gen_gpios[15].is_output ),
    .Y(\$501 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$503  (
    .A(\gen_gpios[15].is_output ),
    .B(reg2hw[108]),
    .Y(\$504 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$505  (
    .A(reg2hw[109]),
    .Y(\$506 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$508  (
    .A(gpio_edge[15]),
    .B(reg2hw[107]),
    .Y(\$509 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$510  (
    .A(\$509 ),
    .B(\gen_gpios[15].is_input ),
    .Y(\$511 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$513  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$111 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$515  (
    .A(\gen_gpios[16].serial_d ),
    .Y(\$516 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$517  (
    .A(\$516 ),
    .B(\gen_gpios[16].serial_q ),
    .Y(\$518 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$519  (
    .A(\gen_gpios[16].serial_q ),
    .Y(\$520 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(reg2hw[11]),
    .B(\gen_gpios[1].is_output ),
    .Y(\$53 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$521  (
    .A(\gen_gpios[16].serial_d ),
    .B(\$520 ),
    .Y(\$522 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$523  (
    .A(\gen_gpios[16].f_edge ),
    .B(\gen_gpios[16].r_edge ),
    .S(reg2hw[112]),
    .Y(\$auto$rtlil.cc:3092:Mux$113 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$524  (
    .A(reg2hw[118]),
    .Y(\$525 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$526  (
    .A(reg2hw[117]),
    .B(\$525 ),
    .Y(\$527 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$528  (
    .A(reg2hw[117]),
    .B(reg2hw[118]),
    .Y(\$529 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$530  (
    .A(gpio_in_sync[16]),
    .B(\gen_gpios[16].is_input ),
    .Y(\$531 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$532  (
    .A(reg2hw[116]),
    .B(\gen_gpios[16].is_output ),
    .Y(\$533 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$535  (
    .A(\gen_gpios[16].is_output ),
    .B(reg2hw[115]),
    .Y(\$536 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$537  (
    .A(reg2hw[116]),
    .Y(\$538 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$540  (
    .A(gpio_edge[16]),
    .B(reg2hw[114]),
    .Y(\$541 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$542  (
    .A(\$541 ),
    .B(\gen_gpios[16].is_input ),
    .Y(\$543 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$545  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$114 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$547  (
    .A(\gen_gpios[17].serial_d ),
    .Y(\$548 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$549  (
    .A(\$548 ),
    .B(\gen_gpios[17].serial_q ),
    .Y(\$550 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_gpios[1].is_output ),
    .B(reg2hw[10]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$551  (
    .A(\gen_gpios[17].serial_q ),
    .Y(\$552 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$553  (
    .A(\gen_gpios[17].serial_d ),
    .B(\$552 ),
    .Y(\$554 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$555  (
    .A(\gen_gpios[17].f_edge ),
    .B(\gen_gpios[17].r_edge ),
    .S(reg2hw[119]),
    .Y(\$auto$rtlil.cc:3092:Mux$116 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$556  (
    .A(reg2hw[125]),
    .Y(\$557 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$558  (
    .A(reg2hw[124]),
    .B(\$557 ),
    .Y(\$559 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$560  (
    .A(reg2hw[124]),
    .B(reg2hw[125]),
    .Y(\$561 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$562  (
    .A(gpio_in_sync[17]),
    .B(\gen_gpios[17].is_input ),
    .Y(\$563 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$564  (
    .A(reg2hw[123]),
    .B(\gen_gpios[17].is_output ),
    .Y(\$565 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$567  (
    .A(\gen_gpios[17].is_output ),
    .B(reg2hw[122]),
    .Y(\$568 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$569  (
    .A(reg2hw[123]),
    .Y(\$570 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(reg2hw[11]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$572  (
    .A(gpio_edge[17]),
    .B(reg2hw[121]),
    .Y(\$573 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$574  (
    .A(\$573 ),
    .B(\gen_gpios[17].is_input ),
    .Y(\$575 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$577  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$117 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$579  (
    .A(\gen_gpios[18].serial_d ),
    .Y(\$580 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$581  (
    .A(\$580 ),
    .B(\gen_gpios[18].serial_q ),
    .Y(\$582 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$583  (
    .A(\gen_gpios[18].serial_q ),
    .Y(\$584 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$585  (
    .A(\gen_gpios[18].serial_d ),
    .B(\$584 ),
    .Y(\$586 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$587  (
    .A(\gen_gpios[18].f_edge ),
    .B(\gen_gpios[18].r_edge ),
    .S(reg2hw[126]),
    .Y(\$auto$rtlil.cc:3092:Mux$119 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$588  (
    .A(reg2hw[132]),
    .Y(\$589 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$590  (
    .A(reg2hw[131]),
    .B(\$589 ),
    .Y(\$591 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$592  (
    .A(reg2hw[131]),
    .B(reg2hw[132]),
    .Y(\$593 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$594  (
    .A(gpio_in_sync[18]),
    .B(\gen_gpios[18].is_input ),
    .Y(\$595 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$596  (
    .A(reg2hw[130]),
    .B(\gen_gpios[18].is_output ),
    .Y(\$597 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$599  (
    .A(\gen_gpios[18].is_output ),
    .B(reg2hw[129]),
    .Y(\$600 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(gpio_edge[1]),
    .B(reg2hw[9]),
    .Y(\$61 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$601  (
    .A(reg2hw[130]),
    .Y(\$602 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$604  (
    .A(gpio_edge[18]),
    .B(reg2hw[128]),
    .Y(\$605 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$606  (
    .A(\$605 ),
    .B(\gen_gpios[18].is_input ),
    .Y(\$607 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$609  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$120 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$611  (
    .A(\gen_gpios[19].serial_d ),
    .Y(\$612 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$613  (
    .A(\$612 ),
    .B(\gen_gpios[19].serial_q ),
    .Y(\$614 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$615  (
    .A(\gen_gpios[19].serial_q ),
    .Y(\$616 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$617  (
    .A(\gen_gpios[19].serial_d ),
    .B(\$616 ),
    .Y(\$618 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$619  (
    .A(\gen_gpios[19].f_edge ),
    .B(\gen_gpios[19].r_edge ),
    .S(reg2hw[133]),
    .Y(\$auto$rtlil.cc:3092:Mux$122 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\$61 ),
    .B(\gen_gpios[1].is_input ),
    .Y(\$63 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$620  (
    .A(reg2hw[139]),
    .Y(\$621 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$622  (
    .A(reg2hw[138]),
    .B(\$621 ),
    .Y(\$623 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$624  (
    .A(reg2hw[138]),
    .B(reg2hw[139]),
    .Y(\$625 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$626  (
    .A(gpio_in_sync[19]),
    .B(\gen_gpios[19].is_input ),
    .Y(\$627 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$628  (
    .A(reg2hw[137]),
    .B(\gen_gpios[19].is_output ),
    .Y(\$629 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$631  (
    .A(\gen_gpios[19].is_output ),
    .B(reg2hw[136]),
    .Y(\$632 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$633  (
    .A(reg2hw[137]),
    .Y(\$634 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$636  (
    .A(gpio_edge[19]),
    .B(reg2hw[135]),
    .Y(\$637 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$638  (
    .A(\$637 ),
    .B(\gen_gpios[19].is_input ),
    .Y(\$639 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$641  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$123 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$643  (
    .A(\gen_gpios[20].serial_d ),
    .Y(\$644 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$645  (
    .A(\$644 ),
    .B(\gen_gpios[20].serial_q ),
    .Y(\$646 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$647  (
    .A(\gen_gpios[20].serial_q ),
    .Y(\$648 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$649  (
    .A(\gen_gpios[20].serial_d ),
    .B(\$648 ),
    .Y(\$650 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$69 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$651  (
    .A(\gen_gpios[20].f_edge ),
    .B(\gen_gpios[20].r_edge ),
    .S(reg2hw[140]),
    .Y(\$auto$rtlil.cc:3092:Mux$125 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$652  (
    .A(reg2hw[146]),
    .Y(\$653 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$654  (
    .A(reg2hw[145]),
    .B(\$653 ),
    .Y(\$655 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$656  (
    .A(reg2hw[145]),
    .B(reg2hw[146]),
    .Y(\$657 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$658  (
    .A(gpio_in_sync[20]),
    .B(\gen_gpios[20].is_input ),
    .Y(\$659 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$660  (
    .A(reg2hw[144]),
    .B(\gen_gpios[20].is_output ),
    .Y(\$661 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$663  (
    .A(\gen_gpios[20].is_output ),
    .B(reg2hw[143]),
    .Y(\$664 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$665  (
    .A(reg2hw[144]),
    .Y(\$666 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$668  (
    .A(gpio_edge[20]),
    .B(reg2hw[142]),
    .Y(\$669 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\gen_gpios[2].serial_d ),
    .Y(\$68 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$670  (
    .A(\$669 ),
    .B(\gen_gpios[20].is_input ),
    .Y(\$671 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$673  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$126 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$675  (
    .A(\gen_gpios[21].serial_d ),
    .Y(\$676 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$677  (
    .A(\$676 ),
    .B(\gen_gpios[21].serial_q ),
    .Y(\$678 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$679  (
    .A(\gen_gpios[21].serial_q ),
    .Y(\$680 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$681  (
    .A(\gen_gpios[21].serial_d ),
    .B(\$680 ),
    .Y(\$682 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$683  (
    .A(\gen_gpios[21].f_edge ),
    .B(\gen_gpios[21].r_edge ),
    .S(reg2hw[147]),
    .Y(\$auto$rtlil.cc:3092:Mux$128 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$684  (
    .A(reg2hw[153]),
    .Y(\$685 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$686  (
    .A(reg2hw[152]),
    .B(\$685 ),
    .Y(\$687 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$688  (
    .A(reg2hw[152]),
    .B(reg2hw[153]),
    .Y(\$689 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$68 ),
    .B(\gen_gpios[2].serial_q ),
    .Y(\$70 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$690  (
    .A(gpio_in_sync[21]),
    .B(\gen_gpios[21].is_input ),
    .Y(\$691 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$692  (
    .A(reg2hw[151]),
    .B(\gen_gpios[21].is_output ),
    .Y(\$693 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$695  (
    .A(\gen_gpios[21].is_output ),
    .B(reg2hw[150]),
    .Y(\$696 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$697  (
    .A(reg2hw[151]),
    .Y(\$698 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\gen_gpios[0].serial_q ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$700  (
    .A(gpio_edge[21]),
    .B(reg2hw[149]),
    .Y(\$701 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$702  (
    .A(\$701 ),
    .B(\gen_gpios[21].is_input ),
    .Y(\$703 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$705  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$129 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$707  (
    .A(\gen_gpios[22].serial_d ),
    .Y(\$708 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$709  (
    .A(\$708 ),
    .B(\gen_gpios[22].serial_q ),
    .Y(\$710 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(\gen_gpios[2].serial_q ),
    .Y(\$72 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$711  (
    .A(\gen_gpios[22].serial_q ),
    .Y(\$712 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$713  (
    .A(\gen_gpios[22].serial_d ),
    .B(\$712 ),
    .Y(\$714 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$715  (
    .A(\gen_gpios[22].f_edge ),
    .B(\gen_gpios[22].r_edge ),
    .S(reg2hw[154]),
    .Y(\$auto$rtlil.cc:3092:Mux$131 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$716  (
    .A(reg2hw[160]),
    .Y(\$717 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$718  (
    .A(reg2hw[159]),
    .B(\$717 ),
    .Y(\$719 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$720  (
    .A(reg2hw[159]),
    .B(reg2hw[160]),
    .Y(\$721 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$722  (
    .A(gpio_in_sync[22]),
    .B(\gen_gpios[22].is_input ),
    .Y(\$723 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$724  (
    .A(reg2hw[158]),
    .B(\gen_gpios[22].is_output ),
    .Y(\$725 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$727  (
    .A(\gen_gpios[22].is_output ),
    .B(reg2hw[157]),
    .Y(\$728 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$729  (
    .A(reg2hw[158]),
    .Y(\$730 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\gen_gpios[2].serial_d ),
    .B(\$72 ),
    .Y(\$74 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$732  (
    .A(gpio_edge[22]),
    .B(reg2hw[156]),
    .Y(\$733 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$734  (
    .A(\$733 ),
    .B(\gen_gpios[22].is_input ),
    .Y(\$735 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$737  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$132 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$739  (
    .A(\gen_gpios[23].serial_d ),
    .Y(\$740 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$741  (
    .A(\$740 ),
    .B(\gen_gpios[23].serial_q ),
    .Y(\$742 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$743  (
    .A(\gen_gpios[23].serial_q ),
    .Y(\$744 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$745  (
    .A(\gen_gpios[23].serial_d ),
    .B(\$744 ),
    .Y(\$746 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$747  (
    .A(\gen_gpios[23].f_edge ),
    .B(\gen_gpios[23].r_edge ),
    .S(reg2hw[161]),
    .Y(\$auto$rtlil.cc:3092:Mux$134 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$748  (
    .A(reg2hw[167]),
    .Y(\$749 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(\gen_gpios[2].f_edge ),
    .B(\gen_gpios[2].r_edge ),
    .S(reg2hw[14]),
    .Y(\$auto$rtlil.cc:3092:Mux$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$750  (
    .A(reg2hw[166]),
    .B(\$749 ),
    .Y(\$751 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$752  (
    .A(reg2hw[166]),
    .B(reg2hw[167]),
    .Y(\$753 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$754  (
    .A(gpio_in_sync[23]),
    .B(\gen_gpios[23].is_input ),
    .Y(\$755 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$756  (
    .A(reg2hw[165]),
    .B(\gen_gpios[23].is_output ),
    .Y(\$757 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$759  (
    .A(\gen_gpios[23].is_output ),
    .B(reg2hw[164]),
    .Y(\$760 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(reg2hw[20]),
    .Y(\$77 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$761  (
    .A(reg2hw[165]),
    .Y(\$762 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$764  (
    .A(gpio_edge[23]),
    .B(reg2hw[163]),
    .Y(\$765 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$766  (
    .A(\$765 ),
    .B(\gen_gpios[23].is_input ),
    .Y(\$767 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$769  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$135 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$771  (
    .A(\gen_gpios[24].serial_d ),
    .Y(\$772 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$773  (
    .A(\$772 ),
    .B(\gen_gpios[24].serial_q ),
    .Y(\$774 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$775  (
    .A(\gen_gpios[24].serial_q ),
    .Y(\$776 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$777  (
    .A(\gen_gpios[24].serial_d ),
    .B(\$776 ),
    .Y(\$778 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$779  (
    .A(\gen_gpios[24].f_edge ),
    .B(\gen_gpios[24].r_edge ),
    .S(reg2hw[168]),
    .Y(\$auto$rtlil.cc:3092:Mux$137 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(reg2hw[19]),
    .B(\$77 ),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$780  (
    .A(reg2hw[174]),
    .Y(\$781 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$782  (
    .A(reg2hw[173]),
    .B(\$781 ),
    .Y(\$783 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$784  (
    .A(reg2hw[173]),
    .B(reg2hw[174]),
    .Y(\$785 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$786  (
    .A(gpio_in_sync[24]),
    .B(\gen_gpios[24].is_input ),
    .Y(\$787 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$788  (
    .A(reg2hw[172]),
    .B(\gen_gpios[24].is_output ),
    .Y(\$789 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$791  (
    .A(\gen_gpios[24].is_output ),
    .B(reg2hw[171]),
    .Y(\$792 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$793  (
    .A(reg2hw[172]),
    .Y(\$794 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$796  (
    .A(gpio_edge[24]),
    .B(reg2hw[170]),
    .Y(\$797 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$798  (
    .A(\$797 ),
    .B(\gen_gpios[24].is_input ),
    .Y(\$799 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(reg2hw[19]),
    .B(reg2hw[20]),
    .Y(\$81 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$801  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$138 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$803  (
    .A(\gen_gpios[25].serial_d ),
    .Y(\$804 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$805  (
    .A(\$804 ),
    .B(\gen_gpios[25].serial_q ),
    .Y(\$806 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$807  (
    .A(\gen_gpios[25].serial_q ),
    .Y(\$808 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$809  (
    .A(\gen_gpios[25].serial_d ),
    .B(\$808 ),
    .Y(\$810 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$811  (
    .A(\gen_gpios[25].f_edge ),
    .B(\gen_gpios[25].r_edge ),
    .S(reg2hw[175]),
    .Y(\$auto$rtlil.cc:3092:Mux$140 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$812  (
    .A(reg2hw[181]),
    .Y(\$813 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$814  (
    .A(reg2hw[180]),
    .B(\$813 ),
    .Y(\$815 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$816  (
    .A(reg2hw[180]),
    .B(reg2hw[181]),
    .Y(\$817 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$818  (
    .A(gpio_in_sync[25]),
    .B(\gen_gpios[25].is_input ),
    .Y(\$819 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(gpio_in_sync[2]),
    .B(\gen_gpios[2].is_input ),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$820  (
    .A(reg2hw[179]),
    .B(\gen_gpios[25].is_output ),
    .Y(\$821 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$823  (
    .A(\gen_gpios[25].is_output ),
    .B(reg2hw[178]),
    .Y(\$824 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$825  (
    .A(reg2hw[179]),
    .Y(\$826 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$828  (
    .A(gpio_edge[25]),
    .B(reg2hw[177]),
    .Y(\$829 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$830  (
    .A(\$829 ),
    .B(\gen_gpios[25].is_input ),
    .Y(\$831 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$833  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$141 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$835  (
    .A(\gen_gpios[26].serial_d ),
    .Y(\$836 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$837  (
    .A(\$836 ),
    .B(\gen_gpios[26].serial_q ),
    .Y(\$838 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$839  (
    .A(\gen_gpios[26].serial_q ),
    .Y(\$840 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(reg2hw[18]),
    .B(\gen_gpios[2].is_output ),
    .Y(\$85 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$841  (
    .A(\gen_gpios[26].serial_d ),
    .B(\$840 ),
    .Y(\$842 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$843  (
    .A(\gen_gpios[26].f_edge ),
    .B(\gen_gpios[26].r_edge ),
    .S(reg2hw[182]),
    .Y(\$auto$rtlil.cc:3092:Mux$143 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$844  (
    .A(reg2hw[188]),
    .Y(\$845 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$846  (
    .A(reg2hw[187]),
    .B(\$845 ),
    .Y(\$847 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$848  (
    .A(reg2hw[187]),
    .B(reg2hw[188]),
    .Y(\$849 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$850  (
    .A(gpio_in_sync[26]),
    .B(\gen_gpios[26].is_input ),
    .Y(\$851 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$852  (
    .A(reg2hw[186]),
    .B(\gen_gpios[26].is_output ),
    .Y(\$853 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$855  (
    .A(\gen_gpios[26].is_output ),
    .B(reg2hw[185]),
    .Y(\$856 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$857  (
    .A(reg2hw[186]),
    .Y(\$858 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$860  (
    .A(gpio_edge[26]),
    .B(reg2hw[184]),
    .Y(\$861 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$862  (
    .A(\$861 ),
    .B(\gen_gpios[26].is_input ),
    .Y(\$863 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$865  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$144 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$867  (
    .A(\gen_gpios[27].serial_d ),
    .Y(\$868 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$869  (
    .A(\$868 ),
    .B(\gen_gpios[27].serial_q ),
    .Y(\$870 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\gen_gpios[2].is_output ),
    .B(reg2hw[17]),
    .Y(\$88 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$871  (
    .A(\gen_gpios[27].serial_q ),
    .Y(\$872 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$873  (
    .A(\gen_gpios[27].serial_d ),
    .B(\$872 ),
    .Y(\$874 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$875  (
    .A(\gen_gpios[27].f_edge ),
    .B(\gen_gpios[27].r_edge ),
    .S(reg2hw[189]),
    .Y(\$auto$rtlil.cc:3092:Mux$146 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$876  (
    .A(reg2hw[195]),
    .Y(\$877 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$878  (
    .A(reg2hw[194]),
    .B(\$877 ),
    .Y(\$879 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$880  (
    .A(reg2hw[194]),
    .B(reg2hw[195]),
    .Y(\$881 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$882  (
    .A(gpio_in_sync[27]),
    .B(\gen_gpios[27].is_input ),
    .Y(\$883 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$884  (
    .A(reg2hw[193]),
    .B(\gen_gpios[27].is_output ),
    .Y(\$885 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$887  (
    .A(\gen_gpios[27].is_output ),
    .B(reg2hw[192]),
    .Y(\$888 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$889  (
    .A(reg2hw[193]),
    .Y(\$890 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(reg2hw[18]),
    .Y(\$90 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$892  (
    .A(gpio_edge[27]),
    .B(reg2hw[191]),
    .Y(\$893 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$894  (
    .A(\$893 ),
    .B(\gen_gpios[27].is_input ),
    .Y(\$895 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$897  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$147 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$899  (
    .A(\gen_gpios[28].serial_d ),
    .Y(\$900 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\gen_gpios[0].serial_d ),
    .B(\$8 ),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$901  (
    .A(\$900 ),
    .B(\gen_gpios[28].serial_q ),
    .Y(\$902 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$903  (
    .A(\gen_gpios[28].serial_q ),
    .Y(\$904 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$905  (
    .A(\gen_gpios[28].serial_d ),
    .B(\$904 ),
    .Y(\$906 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$907  (
    .A(\gen_gpios[28].f_edge ),
    .B(\gen_gpios[28].r_edge ),
    .S(reg2hw[196]),
    .Y(\$auto$rtlil.cc:3092:Mux$149 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$908  (
    .A(reg2hw[202]),
    .Y(\$909 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$910  (
    .A(reg2hw[201]),
    .B(\$909 ),
    .Y(\$911 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$912  (
    .A(reg2hw[201]),
    .B(reg2hw[202]),
    .Y(\$913 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$914  (
    .A(gpio_in_sync[28]),
    .B(\gen_gpios[28].is_input ),
    .Y(\$915 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$916  (
    .A(reg2hw[200]),
    .B(\gen_gpios[28].is_output ),
    .Y(\$917 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$919  (
    .A(\gen_gpios[28].is_output ),
    .B(reg2hw[199]),
    .Y(\$920 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(gpio_edge[2]),
    .B(reg2hw[16]),
    .Y(\$93 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$921  (
    .A(reg2hw[200]),
    .Y(\$922 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$924  (
    .A(gpio_edge[28]),
    .B(reg2hw[198]),
    .Y(\$925 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$926  (
    .A(\$925 ),
    .B(\gen_gpios[28].is_input ),
    .Y(\$927 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$929  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$150 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$931  (
    .A(\gen_gpios[29].serial_d ),
    .Y(\$932 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$933  (
    .A(\$932 ),
    .B(\gen_gpios[29].serial_q ),
    .Y(\$934 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$935  (
    .A(\gen_gpios[29].serial_q ),
    .Y(\$936 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$937  (
    .A(\gen_gpios[29].serial_d ),
    .B(\$936 ),
    .Y(\$938 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$939  (
    .A(\gen_gpios[29].f_edge ),
    .B(\gen_gpios[29].r_edge ),
    .S(reg2hw[203]),
    .Y(\$auto$rtlil.cc:3092:Mux$152 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$93 ),
    .B(\gen_gpios[2].is_input ),
    .Y(\$95 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$940  (
    .A(reg2hw[209]),
    .Y(\$941 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$942  (
    .A(reg2hw[208]),
    .B(\$941 ),
    .Y(\$943 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$944  (
    .A(reg2hw[208]),
    .B(reg2hw[209]),
    .Y(\$945 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$946  (
    .A(gpio_in_sync[29]),
    .B(\gen_gpios[29].is_input ),
    .Y(\$947 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$948  (
    .A(reg2hw[207]),
    .B(\gen_gpios[29].is_output ),
    .Y(\$949 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$951  (
    .A(\gen_gpios[29].is_output ),
    .B(reg2hw[206]),
    .Y(\$952 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$953  (
    .A(reg2hw[207]),
    .Y(\$954 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$956  (
    .A(gpio_edge[29]),
    .B(reg2hw[205]),
    .Y(\$957 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$958  (
    .A(\$957 ),
    .B(\gen_gpios[29].is_input ),
    .Y(\$959 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$961  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$153 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$963  (
    .A(\gen_gpios[30].serial_d ),
    .Y(\$964 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$965  (
    .A(\$964 ),
    .B(\gen_gpios[30].serial_q ),
    .Y(\$966 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$967  (
    .A(\gen_gpios[30].serial_q ),
    .Y(\$968 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$969  (
    .A(\gen_gpios[30].serial_d ),
    .B(\$968 ),
    .Y(\$970 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$72 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$971  (
    .A(\gen_gpios[30].f_edge ),
    .B(\gen_gpios[30].r_edge ),
    .S(reg2hw[210]),
    .Y(\$auto$rtlil.cc:3092:Mux$155 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$972  (
    .A(reg2hw[216]),
    .Y(\$973 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$974  (
    .A(reg2hw[215]),
    .B(\$973 ),
    .Y(\$975 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$976  (
    .A(reg2hw[215]),
    .B(reg2hw[216]),
    .Y(\$977 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$978  (
    .A(gpio_in_sync[30]),
    .B(\gen_gpios[30].is_input ),
    .Y(\$979 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$980  (
    .A(reg2hw[214]),
    .B(\gen_gpios[30].is_output ),
    .Y(\$981 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$983  (
    .A(\gen_gpios[30].is_output ),
    .B(reg2hw[213]),
    .Y(\$984 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$985  (
    .A(reg2hw[214]),
    .Y(\$986 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$988  (
    .A(gpio_edge[30]),
    .B(reg2hw[212]),
    .Y(\$989 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_gpios[3].serial_d ),
    .Y(\$100 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$990  (
    .A(\$989 ),
    .B(\gen_gpios[30].is_input ),
    .Y(\$991 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$993  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$156 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$995  (
    .A(\gen_gpios[31].serial_d ),
    .Y(\$996 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$997  (
    .A(\$996 ),
    .B(\gen_gpios[31].serial_q ),
    .Y(\$998 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$999  (
    .A(\gen_gpios[31].serial_q ),
    .Y(\$1000 )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[0].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[0].serial_d ),
    .Q(\gen_gpios[0].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[10].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[10].serial_d ),
    .Q(\gen_gpios[10].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[11].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[11].serial_d ),
    .Q(\gen_gpios[11].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[12].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[12].serial_d ),
    .Q(\gen_gpios[12].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[13].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[13].serial_d ),
    .Q(\gen_gpios[13].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[14].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[14].serial_d ),
    .Q(\gen_gpios[14].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[15].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[15].serial_d ),
    .Q(\gen_gpios[15].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[16].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[16].serial_d ),
    .Q(\gen_gpios[16].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[17].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[17].serial_d ),
    .Q(\gen_gpios[17].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[18].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[18].serial_d ),
    .Q(\gen_gpios[18].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[19].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[19].serial_d ),
    .Q(\gen_gpios[19].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[1].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[1].serial_d ),
    .Q(\gen_gpios[1].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[20].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[20].serial_d ),
    .Q(\gen_gpios[20].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[21].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[21].serial_d ),
    .Q(\gen_gpios[21].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[22].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[22].serial_d ),
    .Q(\gen_gpios[22].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[23].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[23].serial_d ),
    .Q(\gen_gpios[23].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[24].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[24].serial_d ),
    .Q(\gen_gpios[24].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[25].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[25].serial_d ),
    .Q(\gen_gpios[25].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[26].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[26].serial_d ),
    .Q(\gen_gpios[26].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[27].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[27].serial_d ),
    .Q(\gen_gpios[27].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[28].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[28].serial_d ),
    .Q(\gen_gpios[28].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[29].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[29].serial_d ),
    .Q(\gen_gpios[29].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[2].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[2].serial_d ),
    .Q(\gen_gpios[2].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[30].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[30].serial_d ),
    .Q(\gen_gpios[30].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[31].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[31].serial_d ),
    .Q(\gen_gpios[31].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[3].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[3].serial_d ),
    .Q(\gen_gpios[3].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[4].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[4].serial_d ),
    .Q(\gen_gpios[4].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[5].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[5].serial_d ),
    .Q(\gen_gpios[5].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[6].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[6].serial_d ),
    .Q(\gen_gpios[6].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[7].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[7].serial_d ),
    .Q(\gen_gpios[7].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[8].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[8].serial_d ),
    .Q(\gen_gpios[8].serial_q )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[9].serial_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[9].serial_d ),
    .Q(\gen_gpios[9].serial_q )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14863  (
    .A(2'h0),
    .B({ \$506 , 1'h1 }),
    .S(\$procmux$14864_CMP ),
    .Y(\$procmux$14863_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14865  (
    .A(2'h0),
    .B({ \$762 , 1'h1 }),
    .S(\$procmux$14866_CMP ),
    .Y(\$procmux$14865_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14867  (
    .A(2'h0),
    .B({ \$474 , 1'h1 }),
    .S(\$procmux$14868_CMP ),
    .Y(\$procmux$14867_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14869  (
    .A(2'h0),
    .B({ \$890 , 1'h1 }),
    .S(\$procmux$14870_CMP ),
    .Y(\$procmux$14869_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14871  (
    .A(2'h0),
    .B({ \$442 , 1'h1 }),
    .S(\$procmux$14872_CMP ),
    .Y(\$procmux$14871_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14873  (
    .A(2'h0),
    .B({ \$730 , 1'h1 }),
    .S(\$procmux$14874_CMP ),
    .Y(\$procmux$14873_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14875  (
    .A(2'h0),
    .B({ \$410 , 1'h1 }),
    .S(\$procmux$14876_CMP ),
    .Y(\$procmux$14875_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14877  (
    .A(2'h0),
    .B({ \$954 , 1'h1 }),
    .S(\$procmux$14878_CMP ),
    .Y(\$procmux$14877_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14879  (
    .A(2'h0),
    .B({ \$378 , 1'h1 }),
    .S(\$procmux$14880_CMP ),
    .Y(\$procmux$14879_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14881  (
    .A(2'h0),
    .B({ \$698 , 1'h1 }),
    .S(\$procmux$14882_CMP ),
    .Y(\$procmux$14881_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14883  (
    .A(2'h0),
    .B({ \$346 , 1'h1 }),
    .S(\$procmux$14884_CMP ),
    .Y(\$procmux$14883_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14885  (
    .A(2'h0),
    .B({ \$858 , 1'h1 }),
    .S(\$procmux$14886_CMP ),
    .Y(\$procmux$14885_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14887  (
    .A(2'h0),
    .B({ \$314 , 1'h1 }),
    .S(\$procmux$14888_CMP ),
    .Y(\$procmux$14887_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14889  (
    .A(2'h0),
    .B({ \$666 , 1'h1 }),
    .S(\$procmux$14890_CMP ),
    .Y(\$procmux$14889_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14891  (
    .A(2'h0),
    .B({ \$282 , 1'h1 }),
    .S(\$procmux$14892_CMP ),
    .Y(\$procmux$14891_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14893  (
    .A(2'h0),
    .B({ \$986 , 1'h1 }),
    .S(\$procmux$14894_CMP ),
    .Y(\$procmux$14893_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14895  (
    .A(2'h0),
    .B({ \$250 , 1'h1 }),
    .S(\$procmux$14896_CMP ),
    .Y(\$procmux$14895_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14897  (
    .A(2'h0),
    .B({ \$634 , 1'h1 }),
    .S(\$procmux$14898_CMP ),
    .Y(\$procmux$14897_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14899  (
    .A(2'h0),
    .B({ \$218 , 1'h1 }),
    .S(\$procmux$14900_CMP ),
    .Y(\$procmux$14899_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14901  (
    .A(2'h0),
    .B({ \$826 , 1'h1 }),
    .S(\$procmux$14902_CMP ),
    .Y(\$procmux$14901_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14903  (
    .A(2'h0),
    .B({ \$186 , 1'h1 }),
    .S(\$procmux$14904_CMP ),
    .Y(\$procmux$14903_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14905  (
    .A(2'h0),
    .B({ \$602 , 1'h1 }),
    .S(\$procmux$14906_CMP ),
    .Y(\$procmux$14905_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14907  (
    .A(2'h0),
    .B({ \$154 , 1'h1 }),
    .S(\$procmux$14908_CMP ),
    .Y(\$procmux$14907_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14909  (
    .A(2'h0),
    .B({ \$922 , 1'h1 }),
    .S(\$procmux$14910_CMP ),
    .Y(\$procmux$14909_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14911  (
    .A(2'h0),
    .B({ \$122 , 1'h1 }),
    .S(\$procmux$14912_CMP ),
    .Y(\$procmux$14911_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14913  (
    .A(2'h0),
    .B({ \$570 , 1'h1 }),
    .S(\$procmux$14914_CMP ),
    .Y(\$procmux$14913_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14915  (
    .A(2'h0),
    .B({ \$90 , 1'h1 }),
    .S(\$procmux$14916_CMP ),
    .Y(\$procmux$14915_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14917  (
    .A(2'h0),
    .B({ \$794 , 1'h1 }),
    .S(\$procmux$14918_CMP ),
    .Y(\$procmux$14917_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14919  (
    .A(2'h0),
    .B({ \$58 , 1'h1 }),
    .S(\$procmux$14920_CMP ),
    .Y(\$procmux$14919_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14921  (
    .A(2'h0),
    .B({ \$538 , 1'h1 }),
    .S(\$procmux$14922_CMP ),
    .Y(\$procmux$14921_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14923  (
    .A(2'h0),
    .B({ \$26 , 1'h1 }),
    .S(\$procmux$14924_CMP ),
    .Y(\$procmux$14923_Y )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14925  (
    .A(2'h0),
    .B({ \$1018 , 1'h1 }),
    .S(\$procmux$14926_CMP ),
    .Y(\$procmux$14925_Y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  /* src = "rtl/gpio/gpio.sv:74.5" */
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg(hw2reg),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync_o = gpio_in_sync;
  assign \gen_gpios[0].f_edge  = \$6 ;
  assign \gen_gpios[0].r_edge  = \$10 ;
  assign gpio_edge[0] = \$auto$rtlil.cc:3092:Mux$65 ;
  assign gpio_in_sync[0] = \gen_gpios[0].serial_q ;
  assign \gen_gpios[0].is_input  = \$15 ;
  assign \gen_gpios[0].is_output  = \$17 ;
  assign hw2reg[4] = \$19 ;
  assign gpio_o[0] = \$21 ;
  assign gpio_out_en_o[0] = \gen_gpios[0].is_output ;
  assign hw2reg[3:2] = \$hw2reg[3:2]$27 ;
  assign gpio_intrpt[0] = \$31 ;
  assign hw2reg[1] = gpio_intrpt[0];
  assign hw2reg[0] = gpio_intrpt[0];
  assign \gen_gpios[1].f_edge  = \$38 ;
  assign \gen_gpios[1].r_edge  = \$42 ;
  assign gpio_edge[1] = \$auto$rtlil.cc:3092:Mux$68 ;
  assign gpio_in_sync[1] = \gen_gpios[1].serial_q ;
  assign \gen_gpios[1].is_input  = \$47 ;
  assign \gen_gpios[1].is_output  = \$49 ;
  assign hw2reg[9] = \$51 ;
  assign gpio_o[1] = \$53 ;
  assign gpio_out_en_o[1] = \gen_gpios[1].is_output ;
  assign hw2reg[8:7] = \$hw2reg[8:7]$59 ;
  assign gpio_intrpt[1] = \$63 ;
  assign hw2reg[6] = gpio_intrpt[1];
  assign hw2reg[5] = gpio_intrpt[1];
  assign \gen_gpios[2].f_edge  = \$70 ;
  assign \gen_gpios[2].r_edge  = \$74 ;
  assign gpio_edge[2] = \$auto$rtlil.cc:3092:Mux$71 ;
  assign gpio_in_sync[2] = \gen_gpios[2].serial_q ;
  assign \gen_gpios[2].is_input  = \$79 ;
  assign \gen_gpios[2].is_output  = \$81 ;
  assign hw2reg[14] = \$83 ;
  assign gpio_o[2] = \$85 ;
  assign gpio_out_en_o[2] = \gen_gpios[2].is_output ;
  assign hw2reg[13:12] = \$hw2reg[13:12]$91 ;
  assign gpio_intrpt[2] = \$95 ;
  assign hw2reg[11] = gpio_intrpt[2];
  assign hw2reg[10] = gpio_intrpt[2];
  assign \gen_gpios[3].f_edge  = \$102 ;
  assign \gen_gpios[3].r_edge  = \$106 ;
  assign gpio_edge[3] = \$auto$rtlil.cc:3092:Mux$74 ;
  assign gpio_in_sync[3] = \gen_gpios[3].serial_q ;
  assign \gen_gpios[3].is_input  = \$111 ;
  assign \gen_gpios[3].is_output  = \$113 ;
  assign hw2reg[19] = \$115 ;
  assign gpio_o[3] = \$117 ;
  assign gpio_out_en_o[3] = \gen_gpios[3].is_output ;
  assign hw2reg[18:17] = \$hw2reg[18:17]$123 ;
  assign gpio_intrpt[3] = \$127 ;
  assign hw2reg[16] = gpio_intrpt[3];
  assign hw2reg[15] = gpio_intrpt[3];
  assign \gen_gpios[4].f_edge  = \$134 ;
  assign \gen_gpios[4].r_edge  = \$138 ;
  assign gpio_edge[4] = \$auto$rtlil.cc:3092:Mux$77 ;
  assign gpio_in_sync[4] = \gen_gpios[4].serial_q ;
  assign \gen_gpios[4].is_input  = \$143 ;
  assign \gen_gpios[4].is_output  = \$145 ;
  assign hw2reg[24] = \$147 ;
  assign gpio_o[4] = \$149 ;
  assign gpio_out_en_o[4] = \gen_gpios[4].is_output ;
  assign hw2reg[23:22] = \$hw2reg[23:22]$155 ;
  assign gpio_intrpt[4] = \$159 ;
  assign hw2reg[21] = gpio_intrpt[4];
  assign hw2reg[20] = gpio_intrpt[4];
  assign \gen_gpios[5].f_edge  = \$166 ;
  assign \gen_gpios[5].r_edge  = \$170 ;
  assign gpio_edge[5] = \$auto$rtlil.cc:3092:Mux$80 ;
  assign gpio_in_sync[5] = \gen_gpios[5].serial_q ;
  assign \gen_gpios[5].is_input  = \$175 ;
  assign \gen_gpios[5].is_output  = \$177 ;
  assign hw2reg[29] = \$179 ;
  assign gpio_o[5] = \$181 ;
  assign gpio_out_en_o[5] = \gen_gpios[5].is_output ;
  assign hw2reg[28:27] = \$hw2reg[28:27]$187 ;
  assign gpio_intrpt[5] = \$191 ;
  assign hw2reg[26] = gpio_intrpt[5];
  assign hw2reg[25] = gpio_intrpt[5];
  assign \gen_gpios[6].f_edge  = \$198 ;
  assign \gen_gpios[6].r_edge  = \$202 ;
  assign gpio_edge[6] = \$auto$rtlil.cc:3092:Mux$83 ;
  assign gpio_in_sync[6] = \gen_gpios[6].serial_q ;
  assign \gen_gpios[6].is_input  = \$207 ;
  assign \gen_gpios[6].is_output  = \$209 ;
  assign hw2reg[34] = \$211 ;
  assign gpio_o[6] = \$213 ;
  assign gpio_out_en_o[6] = \gen_gpios[6].is_output ;
  assign hw2reg[33:32] = \$hw2reg[33:32]$219 ;
  assign gpio_intrpt[6] = \$223 ;
  assign hw2reg[31] = gpio_intrpt[6];
  assign hw2reg[30] = gpio_intrpt[6];
  assign \gen_gpios[7].f_edge  = \$230 ;
  assign \gen_gpios[7].r_edge  = \$234 ;
  assign gpio_edge[7] = \$auto$rtlil.cc:3092:Mux$86 ;
  assign gpio_in_sync[7] = \gen_gpios[7].serial_q ;
  assign \gen_gpios[7].is_input  = \$239 ;
  assign \gen_gpios[7].is_output  = \$241 ;
  assign hw2reg[39] = \$243 ;
  assign gpio_o[7] = \$245 ;
  assign gpio_out_en_o[7] = \gen_gpios[7].is_output ;
  assign hw2reg[38:37] = \$hw2reg[38:37]$251 ;
  assign gpio_intrpt[7] = \$255 ;
  assign hw2reg[36] = gpio_intrpt[7];
  assign hw2reg[35] = gpio_intrpt[7];
  assign \gen_gpios[8].f_edge  = \$262 ;
  assign \gen_gpios[8].r_edge  = \$266 ;
  assign gpio_edge[8] = \$auto$rtlil.cc:3092:Mux$89 ;
  assign gpio_in_sync[8] = \gen_gpios[8].serial_q ;
  assign \gen_gpios[8].is_input  = \$271 ;
  assign \gen_gpios[8].is_output  = \$273 ;
  assign hw2reg[44] = \$275 ;
  assign gpio_o[8] = \$277 ;
  assign gpio_out_en_o[8] = \gen_gpios[8].is_output ;
  assign hw2reg[43:42] = \$hw2reg[43:42]$283 ;
  assign gpio_intrpt[8] = \$287 ;
  assign hw2reg[41] = gpio_intrpt[8];
  assign hw2reg[40] = gpio_intrpt[8];
  assign \gen_gpios[9].f_edge  = \$294 ;
  assign \gen_gpios[9].r_edge  = \$298 ;
  assign gpio_edge[9] = \$auto$rtlil.cc:3092:Mux$92 ;
  assign gpio_in_sync[9] = \gen_gpios[9].serial_q ;
  assign \gen_gpios[9].is_input  = \$303 ;
  assign \gen_gpios[9].is_output  = \$305 ;
  assign hw2reg[49] = \$307 ;
  assign gpio_o[9] = \$309 ;
  assign gpio_out_en_o[9] = \gen_gpios[9].is_output ;
  assign hw2reg[48:47] = \$hw2reg[48:47]$315 ;
  assign gpio_intrpt[9] = \$319 ;
  assign hw2reg[46] = gpio_intrpt[9];
  assign hw2reg[45] = gpio_intrpt[9];
  assign \gen_gpios[10].f_edge  = \$326 ;
  assign \gen_gpios[10].r_edge  = \$330 ;
  assign gpio_edge[10] = \$auto$rtlil.cc:3092:Mux$95 ;
  assign gpio_in_sync[10] = \gen_gpios[10].serial_q ;
  assign \gen_gpios[10].is_input  = \$335 ;
  assign \gen_gpios[10].is_output  = \$337 ;
  assign hw2reg[54] = \$339 ;
  assign gpio_o[10] = \$341 ;
  assign gpio_out_en_o[10] = \gen_gpios[10].is_output ;
  assign hw2reg[53:52] = \$hw2reg[53:52]$347 ;
  assign gpio_intrpt[10] = \$351 ;
  assign hw2reg[51] = gpio_intrpt[10];
  assign hw2reg[50] = gpio_intrpt[10];
  assign \gen_gpios[11].f_edge  = \$358 ;
  assign \gen_gpios[11].r_edge  = \$362 ;
  assign gpio_edge[11] = \$auto$rtlil.cc:3092:Mux$98 ;
  assign gpio_in_sync[11] = \gen_gpios[11].serial_q ;
  assign \gen_gpios[11].is_input  = \$367 ;
  assign \gen_gpios[11].is_output  = \$369 ;
  assign hw2reg[59] = \$371 ;
  assign gpio_o[11] = \$373 ;
  assign gpio_out_en_o[11] = \gen_gpios[11].is_output ;
  assign hw2reg[58:57] = \$hw2reg[58:57]$379 ;
  assign gpio_intrpt[11] = \$383 ;
  assign hw2reg[56] = gpio_intrpt[11];
  assign hw2reg[55] = gpio_intrpt[11];
  assign \gen_gpios[12].f_edge  = \$390 ;
  assign \gen_gpios[12].r_edge  = \$394 ;
  assign gpio_edge[12] = \$auto$rtlil.cc:3092:Mux$101 ;
  assign gpio_in_sync[12] = \gen_gpios[12].serial_q ;
  assign \gen_gpios[12].is_input  = \$399 ;
  assign \gen_gpios[12].is_output  = \$401 ;
  assign hw2reg[64] = \$403 ;
  assign gpio_o[12] = \$405 ;
  assign gpio_out_en_o[12] = \gen_gpios[12].is_output ;
  assign hw2reg[63:62] = \$hw2reg[63:62]$411 ;
  assign gpio_intrpt[12] = \$415 ;
  assign hw2reg[61] = gpio_intrpt[12];
  assign hw2reg[60] = gpio_intrpt[12];
  assign \gen_gpios[13].f_edge  = \$422 ;
  assign \gen_gpios[13].r_edge  = \$426 ;
  assign gpio_edge[13] = \$auto$rtlil.cc:3092:Mux$104 ;
  assign gpio_in_sync[13] = \gen_gpios[13].serial_q ;
  assign \gen_gpios[13].is_input  = \$431 ;
  assign \gen_gpios[13].is_output  = \$433 ;
  assign hw2reg[69] = \$435 ;
  assign gpio_o[13] = \$437 ;
  assign gpio_out_en_o[13] = \gen_gpios[13].is_output ;
  assign hw2reg[68:67] = \$hw2reg[68:67]$443 ;
  assign gpio_intrpt[13] = \$447 ;
  assign hw2reg[66] = gpio_intrpt[13];
  assign hw2reg[65] = gpio_intrpt[13];
  assign \gen_gpios[14].f_edge  = \$454 ;
  assign \gen_gpios[14].r_edge  = \$458 ;
  assign gpio_edge[14] = \$auto$rtlil.cc:3092:Mux$107 ;
  assign gpio_in_sync[14] = \gen_gpios[14].serial_q ;
  assign \gen_gpios[14].is_input  = \$463 ;
  assign \gen_gpios[14].is_output  = \$465 ;
  assign hw2reg[74] = \$467 ;
  assign gpio_o[14] = \$469 ;
  assign gpio_out_en_o[14] = \gen_gpios[14].is_output ;
  assign hw2reg[73:72] = \$hw2reg[73:72]$475 ;
  assign gpio_intrpt[14] = \$479 ;
  assign hw2reg[71] = gpio_intrpt[14];
  assign hw2reg[70] = gpio_intrpt[14];
  assign \gen_gpios[15].f_edge  = \$486 ;
  assign \gen_gpios[15].r_edge  = \$490 ;
  assign gpio_edge[15] = \$auto$rtlil.cc:3092:Mux$110 ;
  assign gpio_in_sync[15] = \gen_gpios[15].serial_q ;
  assign \gen_gpios[15].is_input  = \$495 ;
  assign \gen_gpios[15].is_output  = \$497 ;
  assign hw2reg[79] = \$499 ;
  assign gpio_o[15] = \$501 ;
  assign gpio_out_en_o[15] = \gen_gpios[15].is_output ;
  assign hw2reg[78:77] = \$hw2reg[78:77]$507 ;
  assign gpio_intrpt[15] = \$511 ;
  assign hw2reg[76] = gpio_intrpt[15];
  assign hw2reg[75] = gpio_intrpt[15];
  assign \gen_gpios[16].f_edge  = \$518 ;
  assign \gen_gpios[16].r_edge  = \$522 ;
  assign gpio_edge[16] = \$auto$rtlil.cc:3092:Mux$113 ;
  assign gpio_in_sync[16] = \gen_gpios[16].serial_q ;
  assign \gen_gpios[16].is_input  = \$527 ;
  assign \gen_gpios[16].is_output  = \$529 ;
  assign hw2reg[84] = \$531 ;
  assign gpio_o[16] = \$533 ;
  assign gpio_out_en_o[16] = \gen_gpios[16].is_output ;
  assign hw2reg[83:82] = \$hw2reg[83:82]$539 ;
  assign gpio_intrpt[16] = \$543 ;
  assign hw2reg[81] = gpio_intrpt[16];
  assign hw2reg[80] = gpio_intrpt[16];
  assign \gen_gpios[17].f_edge  = \$550 ;
  assign \gen_gpios[17].r_edge  = \$554 ;
  assign gpio_edge[17] = \$auto$rtlil.cc:3092:Mux$116 ;
  assign gpio_in_sync[17] = \gen_gpios[17].serial_q ;
  assign \gen_gpios[17].is_input  = \$559 ;
  assign \gen_gpios[17].is_output  = \$561 ;
  assign hw2reg[89] = \$563 ;
  assign gpio_o[17] = \$565 ;
  assign gpio_out_en_o[17] = \gen_gpios[17].is_output ;
  assign hw2reg[88:87] = \$hw2reg[88:87]$571 ;
  assign gpio_intrpt[17] = \$575 ;
  assign hw2reg[86] = gpio_intrpt[17];
  assign hw2reg[85] = gpio_intrpt[17];
  assign \gen_gpios[18].f_edge  = \$582 ;
  assign \gen_gpios[18].r_edge  = \$586 ;
  assign gpio_edge[18] = \$auto$rtlil.cc:3092:Mux$119 ;
  assign gpio_in_sync[18] = \gen_gpios[18].serial_q ;
  assign \gen_gpios[18].is_input  = \$591 ;
  assign \gen_gpios[18].is_output  = \$593 ;
  assign hw2reg[94] = \$595 ;
  assign gpio_o[18] = \$597 ;
  assign gpio_out_en_o[18] = \gen_gpios[18].is_output ;
  assign hw2reg[93:92] = \$hw2reg[93:92]$603 ;
  assign gpio_intrpt[18] = \$607 ;
  assign hw2reg[91] = gpio_intrpt[18];
  assign hw2reg[90] = gpio_intrpt[18];
  assign \gen_gpios[19].f_edge  = \$614 ;
  assign \gen_gpios[19].r_edge  = \$618 ;
  assign gpio_edge[19] = \$auto$rtlil.cc:3092:Mux$122 ;
  assign gpio_in_sync[19] = \gen_gpios[19].serial_q ;
  assign \gen_gpios[19].is_input  = \$623 ;
  assign \gen_gpios[19].is_output  = \$625 ;
  assign hw2reg[99] = \$627 ;
  assign gpio_o[19] = \$629 ;
  assign gpio_out_en_o[19] = \gen_gpios[19].is_output ;
  assign hw2reg[98:97] = \$hw2reg[98:97]$635 ;
  assign gpio_intrpt[19] = \$639 ;
  assign hw2reg[96] = gpio_intrpt[19];
  assign hw2reg[95] = gpio_intrpt[19];
  assign \gen_gpios[20].f_edge  = \$646 ;
  assign \gen_gpios[20].r_edge  = \$650 ;
  assign gpio_edge[20] = \$auto$rtlil.cc:3092:Mux$125 ;
  assign gpio_in_sync[20] = \gen_gpios[20].serial_q ;
  assign \gen_gpios[20].is_input  = \$655 ;
  assign \gen_gpios[20].is_output  = \$657 ;
  assign hw2reg[104] = \$659 ;
  assign gpio_o[20] = \$661 ;
  assign gpio_out_en_o[20] = \gen_gpios[20].is_output ;
  assign hw2reg[103:102] = \$hw2reg[103:102]$667 ;
  assign gpio_intrpt[20] = \$671 ;
  assign hw2reg[101] = gpio_intrpt[20];
  assign hw2reg[100] = gpio_intrpt[20];
  assign \gen_gpios[21].f_edge  = \$678 ;
  assign \gen_gpios[21].r_edge  = \$682 ;
  assign gpio_edge[21] = \$auto$rtlil.cc:3092:Mux$128 ;
  assign gpio_in_sync[21] = \gen_gpios[21].serial_q ;
  assign \gen_gpios[21].is_input  = \$687 ;
  assign \gen_gpios[21].is_output  = \$689 ;
  assign hw2reg[109] = \$691 ;
  assign gpio_o[21] = \$693 ;
  assign gpio_out_en_o[21] = \gen_gpios[21].is_output ;
  assign hw2reg[108:107] = \$hw2reg[108:107]$699 ;
  assign gpio_intrpt[21] = \$703 ;
  assign hw2reg[106] = gpio_intrpt[21];
  assign hw2reg[105] = gpio_intrpt[21];
  assign \gen_gpios[22].f_edge  = \$710 ;
  assign \gen_gpios[22].r_edge  = \$714 ;
  assign gpio_edge[22] = \$auto$rtlil.cc:3092:Mux$131 ;
  assign gpio_in_sync[22] = \gen_gpios[22].serial_q ;
  assign \gen_gpios[22].is_input  = \$719 ;
  assign \gen_gpios[22].is_output  = \$721 ;
  assign hw2reg[114] = \$723 ;
  assign gpio_o[22] = \$725 ;
  assign gpio_out_en_o[22] = \gen_gpios[22].is_output ;
  assign hw2reg[113:112] = \$hw2reg[113:112]$731 ;
  assign gpio_intrpt[22] = \$735 ;
  assign hw2reg[111] = gpio_intrpt[22];
  assign hw2reg[110] = gpio_intrpt[22];
  assign \gen_gpios[23].f_edge  = \$742 ;
  assign \gen_gpios[23].r_edge  = \$746 ;
  assign gpio_edge[23] = \$auto$rtlil.cc:3092:Mux$134 ;
  assign gpio_in_sync[23] = \gen_gpios[23].serial_q ;
  assign \gen_gpios[23].is_input  = \$751 ;
  assign \gen_gpios[23].is_output  = \$753 ;
  assign hw2reg[119] = \$755 ;
  assign gpio_o[23] = \$757 ;
  assign gpio_out_en_o[23] = \gen_gpios[23].is_output ;
  assign hw2reg[118:117] = \$hw2reg[118:117]$763 ;
  assign gpio_intrpt[23] = \$767 ;
  assign hw2reg[116] = gpio_intrpt[23];
  assign hw2reg[115] = gpio_intrpt[23];
  assign \gen_gpios[24].f_edge  = \$774 ;
  assign \gen_gpios[24].r_edge  = \$778 ;
  assign gpio_edge[24] = \$auto$rtlil.cc:3092:Mux$137 ;
  assign gpio_in_sync[24] = \gen_gpios[24].serial_q ;
  assign \gen_gpios[24].is_input  = \$783 ;
  assign \gen_gpios[24].is_output  = \$785 ;
  assign hw2reg[124] = \$787 ;
  assign gpio_o[24] = \$789 ;
  assign gpio_out_en_o[24] = \gen_gpios[24].is_output ;
  assign hw2reg[123:122] = \$hw2reg[123:122]$795 ;
  assign gpio_intrpt[24] = \$799 ;
  assign hw2reg[121] = gpio_intrpt[24];
  assign hw2reg[120] = gpio_intrpt[24];
  assign \gen_gpios[25].f_edge  = \$806 ;
  assign \gen_gpios[25].r_edge  = \$810 ;
  assign gpio_edge[25] = \$auto$rtlil.cc:3092:Mux$140 ;
  assign gpio_in_sync[25] = \gen_gpios[25].serial_q ;
  assign \gen_gpios[25].is_input  = \$815 ;
  assign \gen_gpios[25].is_output  = \$817 ;
  assign hw2reg[129] = \$819 ;
  assign gpio_o[25] = \$821 ;
  assign gpio_out_en_o[25] = \gen_gpios[25].is_output ;
  assign hw2reg[128:127] = \$hw2reg[128:127]$827 ;
  assign gpio_intrpt[25] = \$831 ;
  assign hw2reg[126] = gpio_intrpt[25];
  assign hw2reg[125] = gpio_intrpt[25];
  assign \gen_gpios[26].f_edge  = \$838 ;
  assign \gen_gpios[26].r_edge  = \$842 ;
  assign gpio_edge[26] = \$auto$rtlil.cc:3092:Mux$143 ;
  assign gpio_in_sync[26] = \gen_gpios[26].serial_q ;
  assign \gen_gpios[26].is_input  = \$847 ;
  assign \gen_gpios[26].is_output  = \$849 ;
  assign hw2reg[134] = \$851 ;
  assign gpio_o[26] = \$853 ;
  assign gpio_out_en_o[26] = \gen_gpios[26].is_output ;
  assign hw2reg[133:132] = \$hw2reg[133:132]$859 ;
  assign gpio_intrpt[26] = \$863 ;
  assign hw2reg[131] = gpio_intrpt[26];
  assign hw2reg[130] = gpio_intrpt[26];
  assign \gen_gpios[27].f_edge  = \$870 ;
  assign \gen_gpios[27].r_edge  = \$874 ;
  assign gpio_edge[27] = \$auto$rtlil.cc:3092:Mux$146 ;
  assign gpio_in_sync[27] = \gen_gpios[27].serial_q ;
  assign \gen_gpios[27].is_input  = \$879 ;
  assign \gen_gpios[27].is_output  = \$881 ;
  assign hw2reg[139] = \$883 ;
  assign gpio_o[27] = \$885 ;
  assign gpio_out_en_o[27] = \gen_gpios[27].is_output ;
  assign hw2reg[138:137] = \$hw2reg[138:137]$891 ;
  assign gpio_intrpt[27] = \$895 ;
  assign hw2reg[136] = gpio_intrpt[27];
  assign hw2reg[135] = gpio_intrpt[27];
  assign \gen_gpios[28].f_edge  = \$902 ;
  assign \gen_gpios[28].r_edge  = \$906 ;
  assign gpio_edge[28] = \$auto$rtlil.cc:3092:Mux$149 ;
  assign gpio_in_sync[28] = \gen_gpios[28].serial_q ;
  assign \gen_gpios[28].is_input  = \$911 ;
  assign \gen_gpios[28].is_output  = \$913 ;
  assign hw2reg[144] = \$915 ;
  assign gpio_o[28] = \$917 ;
  assign gpio_out_en_o[28] = \gen_gpios[28].is_output ;
  assign hw2reg[143:142] = \$hw2reg[143:142]$923 ;
  assign gpio_intrpt[28] = \$927 ;
  assign hw2reg[141] = gpio_intrpt[28];
  assign hw2reg[140] = gpio_intrpt[28];
  assign \gen_gpios[29].f_edge  = \$934 ;
  assign \gen_gpios[29].r_edge  = \$938 ;
  assign gpio_edge[29] = \$auto$rtlil.cc:3092:Mux$152 ;
  assign gpio_in_sync[29] = \gen_gpios[29].serial_q ;
  assign \gen_gpios[29].is_input  = \$943 ;
  assign \gen_gpios[29].is_output  = \$945 ;
  assign hw2reg[149] = \$947 ;
  assign gpio_o[29] = \$949 ;
  assign gpio_out_en_o[29] = \gen_gpios[29].is_output ;
  assign hw2reg[148:147] = \$hw2reg[148:147]$955 ;
  assign gpio_intrpt[29] = \$959 ;
  assign hw2reg[146] = gpio_intrpt[29];
  assign hw2reg[145] = gpio_intrpt[29];
  assign \gen_gpios[30].f_edge  = \$966 ;
  assign \gen_gpios[30].r_edge  = \$970 ;
  assign gpio_edge[30] = \$auto$rtlil.cc:3092:Mux$155 ;
  assign gpio_in_sync[30] = \gen_gpios[30].serial_q ;
  assign \gen_gpios[30].is_input  = \$975 ;
  assign \gen_gpios[30].is_output  = \$977 ;
  assign hw2reg[154] = \$979 ;
  assign gpio_o[30] = \$981 ;
  assign gpio_out_en_o[30] = \gen_gpios[30].is_output ;
  assign hw2reg[153:152] = \$hw2reg[153:152]$987 ;
  assign gpio_intrpt[30] = \$991 ;
  assign hw2reg[151] = gpio_intrpt[30];
  assign hw2reg[150] = gpio_intrpt[30];
  assign \gen_gpios[31].f_edge  = \$998 ;
  assign \gen_gpios[31].r_edge  = \$1002 ;
  assign gpio_edge[31] = \$auto$rtlil.cc:3092:Mux$158 ;
  assign gpio_in_sync[31] = \gen_gpios[31].serial_q ;
  assign \gen_gpios[31].is_input  = \$1007 ;
  assign \gen_gpios[31].is_output  = \$1009 ;
  assign hw2reg[159] = \$1011 ;
  assign gpio_o[31] = \$1013 ;
  assign gpio_out_en_o[31] = \gen_gpios[31].is_output ;
  assign hw2reg[158:157] = \$hw2reg[158:157]$1019 ;
  assign gpio_intrpt[31] = \$1023 ;
  assign hw2reg[156] = gpio_intrpt[31];
  assign hw2reg[155] = gpio_intrpt[31];
  assign gpio_intrpt_pending = \$1088 ;
  assign interrupt_o = gpio_intrpt_pending;
  assign \$procmux$14864_CMP  = \$504 ;
  assign \$hw2reg[78:77]$507  = \$procmux$14863_Y ;
  assign \$procmux$14866_CMP  = \$760 ;
  assign \$hw2reg[118:117]$763  = \$procmux$14865_Y ;
  assign \$procmux$14868_CMP  = \$472 ;
  assign \$hw2reg[73:72]$475  = \$procmux$14867_Y ;
  assign \$procmux$14870_CMP  = \$888 ;
  assign \$hw2reg[138:137]$891  = \$procmux$14869_Y ;
  assign \$procmux$14872_CMP  = \$440 ;
  assign \$hw2reg[68:67]$443  = \$procmux$14871_Y ;
  assign \$procmux$14874_CMP  = \$728 ;
  assign \$hw2reg[113:112]$731  = \$procmux$14873_Y ;
  assign \$procmux$14876_CMP  = \$408 ;
  assign \$hw2reg[63:62]$411  = \$procmux$14875_Y ;
  assign \$procmux$14878_CMP  = \$952 ;
  assign \$hw2reg[148:147]$955  = \$procmux$14877_Y ;
  assign \$procmux$14880_CMP  = \$376 ;
  assign \$hw2reg[58:57]$379  = \$procmux$14879_Y ;
  assign \$procmux$14882_CMP  = \$696 ;
  assign \$hw2reg[108:107]$699  = \$procmux$14881_Y ;
  assign \$procmux$14884_CMP  = \$344 ;
  assign \$hw2reg[53:52]$347  = \$procmux$14883_Y ;
  assign \$procmux$14886_CMP  = \$856 ;
  assign \$hw2reg[133:132]$859  = \$procmux$14885_Y ;
  assign \$procmux$14888_CMP  = \$312 ;
  assign \$hw2reg[48:47]$315  = \$procmux$14887_Y ;
  assign \$procmux$14890_CMP  = \$664 ;
  assign \$hw2reg[103:102]$667  = \$procmux$14889_Y ;
  assign \$procmux$14892_CMP  = \$280 ;
  assign \$hw2reg[43:42]$283  = \$procmux$14891_Y ;
  assign \$procmux$14894_CMP  = \$984 ;
  assign \$hw2reg[153:152]$987  = \$procmux$14893_Y ;
  assign \$procmux$14896_CMP  = \$248 ;
  assign \$hw2reg[38:37]$251  = \$procmux$14895_Y ;
  assign \$procmux$14898_CMP  = \$632 ;
  assign \$hw2reg[98:97]$635  = \$procmux$14897_Y ;
  assign \$procmux$14900_CMP  = \$216 ;
  assign \$hw2reg[33:32]$219  = \$procmux$14899_Y ;
  assign \$procmux$14902_CMP  = \$824 ;
  assign \$hw2reg[128:127]$827  = \$procmux$14901_Y ;
  assign \$procmux$14904_CMP  = \$184 ;
  assign \$hw2reg[28:27]$187  = \$procmux$14903_Y ;
  assign \$procmux$14906_CMP  = \$600 ;
  assign \$hw2reg[93:92]$603  = \$procmux$14905_Y ;
  assign \$procmux$14908_CMP  = \$152 ;
  assign \$hw2reg[23:22]$155  = \$procmux$14907_Y ;
  assign \$procmux$14910_CMP  = \$920 ;
  assign \$hw2reg[143:142]$923  = \$procmux$14909_Y ;
  assign \$procmux$14912_CMP  = \$120 ;
  assign \$hw2reg[18:17]$123  = \$procmux$14911_Y ;
  assign \$procmux$14914_CMP  = \$568 ;
  assign \$hw2reg[88:87]$571  = \$procmux$14913_Y ;
  assign \$procmux$14916_CMP  = \$88 ;
  assign \$hw2reg[13:12]$91  = \$procmux$14915_Y ;
  assign \$procmux$14918_CMP  = \$792 ;
  assign \$hw2reg[123:122]$795  = \$procmux$14917_Y ;
  assign \$procmux$14920_CMP  = \$56 ;
  assign \$hw2reg[8:7]$59  = \$procmux$14919_Y ;
  assign \$procmux$14922_CMP  = \$536 ;
  assign \$hw2reg[83:82]$539  = \$procmux$14921_Y ;
  assign \$procmux$14924_CMP  = \$24 ;
  assign \$hw2reg[3:2]$27  = \$procmux$14923_Y ;
  assign \$procmux$14926_CMP  = \$1016 ;
  assign \$hw2reg[158:157]$1019  = \$procmux$14925_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$64  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$73  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$67  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$70  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$76  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$82  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$85  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$88  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$91  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$79  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$94  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$97  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$100  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$103  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$106  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$109  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$112  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$115  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$118  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$121  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$124  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$127  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$130  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$133  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$136  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$139  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$142  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$145  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$148  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$151  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$154  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$157  = rst_ni;
  assign \$1026  = reg2hw[1];
endmodule

/* src = "rtl/gpio/gpio_reg_top.sv:12.8" */
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire \$101 ;
  wire \$105 ;
  wire \$109 ;
  wire \$113 ;
  wire \$117 ;
  wire \$121 ;
  wire \$125 ;
  wire \$129 ;
  wire \$133 ;
  wire \$137 ;
  wire \$141 ;
  wire \$145 ;
  wire \$149 ;
  wire \$153 ;
  wire \$157 ;
  wire [31:0] \$159 ;
  wire [31:0] \$161 ;
  wire [31:0] \$163 ;
  wire [31:0] \$165 ;
  wire [31:0] \$167 ;
  wire [31:0] \$169 ;
  wire [31:0] \$171 ;
  wire [31:0] \$173 ;
  wire [31:0] \$175 ;
  wire [31:0] \$177 ;
  wire [31:0] \$179 ;
  wire [31:0] \$181 ;
  wire [31:0] \$183 ;
  wire [31:0] \$185 ;
  wire [31:0] \$187 ;
  wire [31:0] \$189 ;
  wire [31:0] \$191 ;
  wire [31:0] \$193 ;
  wire [31:0] \$195 ;
  wire [31:0] \$197 ;
  wire [31:0] \$199 ;
  wire \$2 ;
  wire \$33 ;
  wire \$37 ;
  wire \$4 ;
  wire \$41 ;
  wire \$45 ;
  wire \$49 ;
  wire \$53 ;
  wire \$57 ;
  wire \$6 ;
  wire \$61 ;
  wire \$65 ;
  wire \$69 ;
  wire \$73 ;
  wire \$77 ;
  wire \$81 ;
  wire \$85 ;
  wire \$89 ;
  wire \$93 ;
  wire \$97 ;
  wire \$auto$rtlil.cc:2965:LogicNot$653 ;
  wire \$auto$rtlil.cc:2965:LogicNot$654 ;
  wire \$auto$rtlil.cc:2965:LogicNot$655 ;
  wire \$auto$rtlil.cc:2965:LogicNot$656 ;
  wire \$auto$rtlil.cc:2965:LogicNot$657 ;
  wire \$auto$rtlil.cc:2965:LogicNot$658 ;
  wire \$auto$rtlil.cc:2965:LogicNot$659 ;
  wire \$auto$rtlil.cc:2965:LogicNot$660 ;
  wire \$auto$rtlil.cc:2965:LogicNot$661 ;
  wire \$auto$rtlil.cc:2965:LogicNot$662 ;
  wire \$auto$rtlil.cc:2965:LogicNot$663 ;
  wire \$auto$rtlil.cc:2965:LogicNot$664 ;
  wire \$auto$rtlil.cc:2965:LogicNot$665 ;
  wire \$auto$rtlil.cc:2965:LogicNot$666 ;
  wire \$auto$rtlil.cc:3092:Mux$667 ;
  wire \$auto$rtlil.cc:3092:Mux$668 ;
  wire \$auto$rtlil.cc:3092:Mux$669 ;
  wire \$auto$rtlil.cc:3092:Mux$670 ;
  wire \$auto$rtlil.cc:3092:Mux$671 ;
  wire \$auto$rtlil.cc:3092:Mux$672 ;
  wire \$auto$rtlil.cc:3092:Mux$673 ;
  wire \$auto$rtlil.cc:3092:Mux$674 ;
  wire \$auto$rtlil.cc:3092:Mux$675 ;
  wire \$auto$rtlil.cc:3092:Mux$676 ;
  wire \$auto$rtlil.cc:3092:Mux$677 ;
  wire \$auto$rtlil.cc:3092:Mux$678 ;
  wire \$auto$rtlil.cc:3092:Mux$679 ;
  wire \$auto$rtlil.cc:3092:Mux$680 ;
  wire \$auto$rtlil.cc:3092:Mux$681 ;
  wire \$auto$rtlil.cc:3092:Mux$682 ;
  wire \$auto$rtlil.cc:3092:Mux$683 ;
  wire \$auto$rtlil.cc:3092:Mux$684 ;
  wire \$auto$rtlil.cc:3092:Mux$685 ;
  wire \$auto$rtlil.cc:3092:Mux$686 ;
  wire \$auto$rtlil.cc:3092:Mux$687 ;
  wire \$auto$rtlil.cc:3092:Mux$688 ;
  wire \$auto$rtlil.cc:3092:Mux$689 ;
  wire \$auto$rtlil.cc:3092:Mux$690 ;
  wire \$auto$rtlil.cc:3092:Mux$691 ;
  wire \$auto$rtlil.cc:3092:Mux$692 ;
  wire \$auto$rtlil.cc:3092:Mux$693 ;
  wire \$auto$rtlil.cc:3092:Mux$694 ;
  wire \$auto$rtlil.cc:3092:Mux$695 ;
  wire \$auto$rtlil.cc:3092:Mux$696 ;
  wire \$auto$rtlil.cc:3092:Mux$697 ;
  wire \$auto$rtlil.cc:3092:Mux$698 ;
  wire \$auto$rtlil.cc:3092:Mux$699 ;
  wire \$auto$rtlil.cc:3092:Mux$700 ;
  wire \$auto$rtlil.cc:3092:Mux$701 ;
  wire \$auto$rtlil.cc:3092:Mux$702 ;
  wire \$auto$rtlil.cc:3092:Mux$703 ;
  wire \$auto$rtlil.cc:3092:Mux$704 ;
  wire \$auto$rtlil.cc:3092:Mux$705 ;
  wire \$auto$rtlil.cc:3092:Mux$706 ;
  wire \$auto$rtlil.cc:3092:Mux$707 ;
  wire \$auto$rtlil.cc:3092:Mux$708 ;
  wire \$auto$rtlil.cc:3092:Mux$709 ;
  wire \$auto$rtlil.cc:3092:Mux$710 ;
  wire \$auto$rtlil.cc:3092:Mux$711 ;
  wire \$auto$rtlil.cc:3092:Mux$712 ;
  wire \$auto$rtlil.cc:3092:Mux$713 ;
  wire \$auto$rtlil.cc:3092:Mux$714 ;
  wire \$auto$rtlil.cc:3092:Mux$715 ;
  wire \$auto$rtlil.cc:3092:Mux$716 ;
  wire \$auto$rtlil.cc:3092:Mux$717 ;
  wire \$auto$rtlil.cc:3092:Mux$718 ;
  wire \$auto$rtlil.cc:3092:Mux$719 ;
  wire \$auto$rtlil.cc:3092:Mux$720 ;
  wire \$auto$rtlil.cc:3092:Mux$721 ;
  wire \$auto$rtlil.cc:3092:Mux$722 ;
  wire \$auto$rtlil.cc:3092:Mux$723 ;
  wire \$auto$rtlil.cc:3092:Mux$724 ;
  wire \$auto$rtlil.cc:3092:Mux$725 ;
  wire \$auto$rtlil.cc:3092:Mux$726 ;
  wire \$auto$rtlil.cc:3092:Mux$727 ;
  wire \$auto$rtlil.cc:3092:Mux$728 ;
  wire \$auto$rtlil.cc:3092:Mux$729 ;
  wire \$auto$rtlil.cc:3092:Mux$730 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire \$obi_err$206 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire \$obi_err$213 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  wire \$obi_err$216 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$obi_rdata$214 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  wire [31:0] \$obi_rdata$217 ;
  wire [31:0] \$procmux$13251_Y ;
  wire \$procmux$13252_CMP ;
  wire \$procmux$13253_CMP ;
  wire \$procmux$13254_CMP ;
  wire \$procmux$13255_CMP ;
  wire \$procmux$13256_CMP ;
  wire \$procmux$13257_CMP ;
  wire \$procmux$13258_CMP ;
  wire \$procmux$13259_CMP ;
  wire [31:0] \$procmux$13260_Y ;
  wire \$procmux$13261_CMP ;
  wire [31:0] \$procmux$13265_Y ;
  wire \$procmux$13266_CMP ;
  wire [31:0] \$procmux$13267_Y ;
  wire \$procmux$13268_CMP ;
  wire \$procmux$13271_Y ;
  wire \$procmux$13272_CMP ;
  wire \$procmux$13273_CMP ;
  wire \$procmux$13274_CMP ;
  wire \$procmux$13275_CMP ;
  wire \$procmux$13276_CMP ;
  wire \$procmux$13277_CMP ;
  wire \$procmux$13278_CMP ;
  wire \$procmux$13279_CMP ;
  wire \$procmux$13280_Y ;
  wire \$procmux$13281_CMP ;
  wire [31:0] \$procmux$13284_Y ;
  wire \$procmux$13285_CMP ;
  wire [31:0] \$procmux$13288_Y ;
  wire \$procmux$13289_CMP ;
  wire \$procmux$13292_Y ;
  wire \$procmux$13293_CMP ;
  wire [31:0] \$procmux$13301_Y ;
  wire \$procmux$13302_CMP ;
  wire [31:0] \$procmux$13303_Y ;
  wire \$procmux$13304_CMP ;
  wire [31:0] \$procmux$13310_Y ;
  wire \$procmux$13311_CMP ;
  wire [31:0] \$procmux$13312_Y ;
  wire \$procmux$13313_CMP ;
  wire [31:0] \$procmux$13317_Y ;
  wire \$procmux$13318_CMP ;
  wire [31:0] \$procmux$13319_Y ;
  wire \$procmux$13320_CMP ;
  wire [31:0] \$procmux$13325_Y ;
  wire \$procmux$13326_CMP ;
  wire [31:0] \$procmux$13327_Y ;
  wire \$procmux$13328_CMP ;
  wire [31:0] \$procmux$13331_Y ;
  wire \$procmux$13332_CMP ;
  wire [31:0] \$procmux$13333_Y ;
  wire \$procmux$13334_CMP ;
  wire [31:0] \$procmux$13336_Y ;
  wire \$procmux$13337_CMP ;
  wire [31:0] \$procmux$13338_Y ;
  wire \$procmux$13339_CMP ;
  wire \$procmux$13341_Y ;
  wire \$procmux$13342_CMP ;
  wire \$procmux$13343_CMP ;
  wire \$procmux$13344_CMP ;
  wire \$procmux$13345_CMP ;
  wire \$procmux$13346_CMP ;
  wire \$procmux$13347_CMP ;
  wire \$procmux$13348_Y ;
  wire \$procmux$13349_CMP ;
  wire [31:0] \$procmux$13351_Y ;
  wire \$procmux$13352_CMP ;
  wire [63:0] \$procmux$13354_Y ;
  wire \$procmux$13355_CMP ;
  wire [31:0] \$procmux$13357_Y ;
  wire \$procmux$13358_CMP ;
  wire [31:0] \$procmux$13360_Y ;
  wire \$procmux$13361_CMP ;
  wire [31:0] \$procmux$13363_Y ;
  wire \$procmux$13364_CMP ;
  wire \$procmux$13366_Y ;
  wire \$procmux$13367_CMP ;
  wire \$procmux$13369_Y ;
  wire \$procmux$13370_CMP ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$reg_d[159:128]$203 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire [31:0] \$reg_d[159:128]$210 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [63:0] \$reg_d[255:192]$204 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire [63:0] \$reg_d[255:192]$211 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$reg_d[31:0]$201 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire [31:0] \$reg_d[31:0]$208 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$reg_d[63:32]$215 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  wire [31:0] \$reg_d[63:32]$218 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$reg_d[95:64]$202 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire [31:0] \$reg_d[95:64]$209 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$toggle_out$205 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire [31:0] \$toggle_out$212 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire \$w_err_d$200 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire \$w_err_d$207 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:117.32" */
  wire [31:0] bit_mask;
  /* src = "rtl/gpio/gpio_reg_top.sv:23.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:37.43" */
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.35" */
  wire id_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.41" */
  wire id_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:113.25" */
  wire [31:0] new_intrpt;
  /* src = "rtl/gpio/gpio_reg_top.sv:108.21" */
  wire [255:0] new_reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:51.35" */
  wire obi_err;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.35" */
  wire [31:0] obi_rdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.35" */
  wire obi_read_request;
  /* src = "rtl/gpio/gpio_reg_top.sv:29.23" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:31.22" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.46" */
  wire [31:0] obi_wdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.53" */
  wire obi_write_request;
  /* src = "rtl/gpio/gpio_reg_top.sv:49.35" */
  wire [11:0] read_addr_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:49.48" */
  wire [11:0] read_addr_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:35.42" */
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.21" */
  wire [255:0] reg_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.28" */
  wire [255:0] reg_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.35" */
  wire req_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.42" */
  wire req_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:25.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/gpio/gpio_reg_top.sv:114.25" */
  wire [31:0] toggle_out;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.35" */
  wire valid_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.44" */
  wire valid_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.35" */
  wire w_err_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.44" */
  wire w_err_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.35" */
  wire we_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.41" */
  wire we_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:48.35" */
  wire [11:0] write_addr;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(we_q),
    .Y(\$2 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(hw2reg[85]),
    .B(hw2reg[86]),
    .Y(\$101 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$102  (
    .A(reg_q[146]),
    .B(hw2reg[93]),
    .S(hw2reg[92]),
    .Y(\$auto$rtlil.cc:3092:Mux$703 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$103  (
    .A(reg_q[50]),
    .B(hw2reg[91]),
    .S(hw2reg[90]),
    .Y(\$auto$rtlil.cc:3092:Mux$704 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(hw2reg[90]),
    .B(hw2reg[91]),
    .Y(\$105 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$106  (
    .A(reg_q[147]),
    .B(hw2reg[98]),
    .S(hw2reg[97]),
    .Y(\$auto$rtlil.cc:3092:Mux$705 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(reg_q[51]),
    .B(hw2reg[96]),
    .S(hw2reg[95]),
    .Y(\$auto$rtlil.cc:3092:Mux$706 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(hw2reg[95]),
    .B(hw2reg[96]),
    .Y(\$109 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$655 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$110  (
    .A(reg_q[148]),
    .B(hw2reg[103]),
    .S(hw2reg[102]),
    .Y(\$auto$rtlil.cc:3092:Mux$707 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$111  (
    .A(reg_q[52]),
    .B(hw2reg[101]),
    .S(hw2reg[100]),
    .Y(\$auto$rtlil.cc:3092:Mux$708 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(hw2reg[100]),
    .B(hw2reg[101]),
    .Y(\$113 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$114  (
    .A(reg_q[149]),
    .B(hw2reg[108]),
    .S(hw2reg[107]),
    .Y(\$auto$rtlil.cc:3092:Mux$709 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$115  (
    .A(reg_q[53]),
    .B(hw2reg[106]),
    .S(hw2reg[105]),
    .Y(\$auto$rtlil.cc:3092:Mux$710 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(hw2reg[105]),
    .B(hw2reg[106]),
    .Y(\$117 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$118  (
    .A(reg_q[150]),
    .B(hw2reg[113]),
    .S(hw2reg[112]),
    .Y(\$auto$rtlil.cc:3092:Mux$711 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$119  (
    .A(reg_q[54]),
    .B(hw2reg[111]),
    .S(hw2reg[110]),
    .Y(\$auto$rtlil.cc:3092:Mux$712 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(hw2reg[110]),
    .B(hw2reg[111]),
    .Y(\$121 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$122  (
    .A(reg_q[151]),
    .B(hw2reg[118]),
    .S(hw2reg[117]),
    .Y(\$auto$rtlil.cc:3092:Mux$713 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$123  (
    .A(reg_q[55]),
    .B(hw2reg[116]),
    .S(hw2reg[115]),
    .Y(\$auto$rtlil.cc:3092:Mux$714 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(hw2reg[115]),
    .B(hw2reg[116]),
    .Y(\$125 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$126  (
    .A(reg_q[152]),
    .B(hw2reg[123]),
    .S(hw2reg[122]),
    .Y(\$auto$rtlil.cc:3092:Mux$715 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$127  (
    .A(reg_q[56]),
    .B(hw2reg[121]),
    .S(hw2reg[120]),
    .Y(\$auto$rtlil.cc:3092:Mux$716 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(hw2reg[120]),
    .B(hw2reg[121]),
    .Y(\$129 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$130  (
    .A(reg_q[153]),
    .B(hw2reg[128]),
    .S(hw2reg[127]),
    .Y(\$auto$rtlil.cc:3092:Mux$717 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$131  (
    .A(reg_q[57]),
    .B(hw2reg[126]),
    .S(hw2reg[125]),
    .Y(\$auto$rtlil.cc:3092:Mux$718 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(hw2reg[125]),
    .B(hw2reg[126]),
    .Y(\$133 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$134  (
    .A(reg_q[154]),
    .B(hw2reg[133]),
    .S(hw2reg[132]),
    .Y(\$auto$rtlil.cc:3092:Mux$719 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$135  (
    .A(reg_q[58]),
    .B(hw2reg[131]),
    .S(hw2reg[130]),
    .Y(\$auto$rtlil.cc:3092:Mux$720 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(hw2reg[130]),
    .B(hw2reg[131]),
    .Y(\$137 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$138  (
    .A(reg_q[155]),
    .B(hw2reg[138]),
    .S(hw2reg[137]),
    .Y(\$auto$rtlil.cc:3092:Mux$721 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$139  (
    .A(reg_q[59]),
    .B(hw2reg[136]),
    .S(hw2reg[135]),
    .Y(\$auto$rtlil.cc:3092:Mux$722 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$657 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(hw2reg[135]),
    .B(hw2reg[136]),
    .Y(\$141 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$142  (
    .A(reg_q[156]),
    .B(hw2reg[143]),
    .S(hw2reg[142]),
    .Y(\$auto$rtlil.cc:3092:Mux$723 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$143  (
    .A(reg_q[60]),
    .B(hw2reg[141]),
    .S(hw2reg[140]),
    .Y(\$auto$rtlil.cc:3092:Mux$724 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(hw2reg[140]),
    .B(hw2reg[141]),
    .Y(\$145 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$146  (
    .A(reg_q[157]),
    .B(hw2reg[148]),
    .S(hw2reg[147]),
    .Y(\$auto$rtlil.cc:3092:Mux$725 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$147  (
    .A(reg_q[61]),
    .B(hw2reg[146]),
    .S(hw2reg[145]),
    .Y(\$auto$rtlil.cc:3092:Mux$726 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(hw2reg[145]),
    .B(hw2reg[146]),
    .Y(\$149 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$150  (
    .A(reg_q[158]),
    .B(hw2reg[153]),
    .S(hw2reg[152]),
    .Y(\$auto$rtlil.cc:3092:Mux$727 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$151  (
    .A(reg_q[62]),
    .B(hw2reg[151]),
    .S(hw2reg[150]),
    .Y(\$auto$rtlil.cc:3092:Mux$728 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(hw2reg[150]),
    .B(hw2reg[151]),
    .Y(\$153 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$154  (
    .A(reg_q[159]),
    .B(hw2reg[158]),
    .S(hw2reg[157]),
    .Y(\$auto$rtlil.cc:3092:Mux$729 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$155  (
    .A(reg_q[63]),
    .B(hw2reg[156]),
    .S(hw2reg[155]),
    .Y(\$auto$rtlil.cc:3092:Mux$730 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(hw2reg[155]),
    .B(hw2reg[156]),
    .Y(\$157 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$158  (
    .A(bit_mask),
    .Y(\$159 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$160  (
    .A(\$159 ),
    .B(reg_q[255:224]),
    .Y(\$161 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$162  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$163 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$164  (
    .A(\$161 ),
    .B(\$163 ),
    .Y(\$165 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$166  (
    .A(bit_mask),
    .Y(\$167 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$168  (
    .A(\$167 ),
    .B(reg_q[223:192]),
    .Y(\$169 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$659 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$170  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$171 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$172  (
    .A(\$169 ),
    .B(\$171 ),
    .Y(\$173 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$174  (
    .A(bit_mask),
    .Y(\$175 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$176  (
    .A(\$175 ),
    .B({ \$auto$rtlil.cc:3092:Mux$729 , \$auto$rtlil.cc:3092:Mux$727 , \$auto$rtlil.cc:3092:Mux$725 , \$auto$rtlil.cc:3092:Mux$723 , \$auto$rtlil.cc:3092:Mux$721 , \$auto$rtlil.cc:3092:Mux$719 , \$auto$rtlil.cc:3092:Mux$717 , \$auto$rtlil.cc:3092:Mux$715 , \$auto$rtlil.cc:3092:Mux$713 , \$auto$rtlil.cc:3092:Mux$711 , \$auto$rtlil.cc:3092:Mux$709 , \$auto$rtlil.cc:3092:Mux$707 , \$auto$rtlil.cc:3092:Mux$705 , \$auto$rtlil.cc:3092:Mux$703 , \$auto$rtlil.cc:3092:Mux$701 , \$auto$rtlil.cc:3092:Mux$699 , \$auto$rtlil.cc:3092:Mux$697 , \$auto$rtlil.cc:3092:Mux$695 , \$auto$rtlil.cc:3092:Mux$693 , \$auto$rtlil.cc:3092:Mux$691 , \$auto$rtlil.cc:3092:Mux$689 , \$auto$rtlil.cc:3092:Mux$687 , \$auto$rtlil.cc:3092:Mux$685 , \$auto$rtlil.cc:3092:Mux$683 , \$auto$rtlil.cc:3092:Mux$681 , \$auto$rtlil.cc:3092:Mux$679 , \$auto$rtlil.cc:3092:Mux$677 , \$auto$rtlil.cc:3092:Mux$675 , \$auto$rtlil.cc:3092:Mux$673 , \$auto$rtlil.cc:3092:Mux$671 , \$auto$rtlil.cc:3092:Mux$669 , \$auto$rtlil.cc:3092:Mux$667  }),
    .Y(\$177 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$178  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$179 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$180  (
    .A(\$177 ),
    .B(\$179 ),
    .Y(\$181 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$182  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$183 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$184  (
    .A(bit_mask),
    .Y(\$185 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$186  (
    .A(\$185 ),
    .B(reg_q[95:64]),
    .Y(\$187 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$188  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$189 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$190  (
    .A(\$187 ),
    .B(\$189 ),
    .Y(\$191 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$192  (
    .A(bit_mask),
    .Y(\$193 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$194  (
    .A(\$193 ),
    .B(reg_q[31:0]),
    .Y(\$195 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$196  (
    .A(bit_mask),
    .B(obi_wdata),
    .Y(\$197 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$198  (
    .A(\$195 ),
    .B(\$197 ),
    .Y(\$199 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$661 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$663 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$665 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_q),
    .B(\$2 ),
    .Y(\$4 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(reg_q[128]),
    .B(hw2reg[3]),
    .S(hw2reg[2]),
    .Y(\$auto$rtlil.cc:3092:Mux$667 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$31  (
    .A(reg_q[32]),
    .B(hw2reg[1]),
    .S(hw2reg[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$668 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(hw2reg[0]),
    .B(hw2reg[1]),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$34  (
    .A(reg_q[129]),
    .B(hw2reg[8]),
    .S(hw2reg[7]),
    .Y(\$auto$rtlil.cc:3092:Mux$669 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$35  (
    .A(reg_q[33]),
    .B(hw2reg[6]),
    .S(hw2reg[5]),
    .Y(\$auto$rtlil.cc:3092:Mux$670 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(hw2reg[5]),
    .B(hw2reg[6]),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$38  (
    .A(reg_q[130]),
    .B(hw2reg[13]),
    .S(hw2reg[12]),
    .Y(\$auto$rtlil.cc:3092:Mux$671 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$39  (
    .A(reg_q[34]),
    .B(hw2reg[11]),
    .S(hw2reg[10]),
    .Y(\$auto$rtlil.cc:3092:Mux$672 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(hw2reg[10]),
    .B(hw2reg[11]),
    .Y(\$41 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$42  (
    .A(reg_q[131]),
    .B(hw2reg[18]),
    .S(hw2reg[17]),
    .Y(\$auto$rtlil.cc:3092:Mux$673 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(reg_q[35]),
    .B(hw2reg[16]),
    .S(hw2reg[15]),
    .Y(\$auto$rtlil.cc:3092:Mux$674 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(hw2reg[15]),
    .B(hw2reg[16]),
    .Y(\$45 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$46  (
    .A(reg_q[132]),
    .B(hw2reg[23]),
    .S(hw2reg[22]),
    .Y(\$auto$rtlil.cc:3092:Mux$675 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$47  (
    .A(reg_q[36]),
    .B(hw2reg[21]),
    .S(hw2reg[20]),
    .Y(\$auto$rtlil.cc:3092:Mux$676 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(hw2reg[20]),
    .B(hw2reg[21]),
    .Y(\$49 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_req_i[41]),
    .Y(\$6 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$50  (
    .A(reg_q[133]),
    .B(hw2reg[28]),
    .S(hw2reg[27]),
    .Y(\$auto$rtlil.cc:3092:Mux$677 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$51  (
    .A(reg_q[37]),
    .B(hw2reg[26]),
    .S(hw2reg[25]),
    .Y(\$auto$rtlil.cc:3092:Mux$678 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(hw2reg[25]),
    .B(hw2reg[26]),
    .Y(\$53 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$54  (
    .A(reg_q[134]),
    .B(hw2reg[33]),
    .S(hw2reg[32]),
    .Y(\$auto$rtlil.cc:3092:Mux$679 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$55  (
    .A(reg_q[38]),
    .B(hw2reg[31]),
    .S(hw2reg[30]),
    .Y(\$auto$rtlil.cc:3092:Mux$680 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(hw2reg[30]),
    .B(hw2reg[31]),
    .Y(\$57 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$58  (
    .A(reg_q[135]),
    .B(hw2reg[38]),
    .S(hw2reg[37]),
    .Y(\$auto$rtlil.cc:3092:Mux$681 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$59  (
    .A(reg_q[39]),
    .B(hw2reg[36]),
    .S(hw2reg[35]),
    .Y(\$auto$rtlil.cc:3092:Mux$682 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(hw2reg[35]),
    .B(hw2reg[36]),
    .Y(\$61 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$62  (
    .A(reg_q[136]),
    .B(hw2reg[43]),
    .S(hw2reg[42]),
    .Y(\$auto$rtlil.cc:3092:Mux$683 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$63  (
    .A(reg_q[40]),
    .B(hw2reg[41]),
    .S(hw2reg[40]),
    .Y(\$auto$rtlil.cc:3092:Mux$684 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(hw2reg[40]),
    .B(hw2reg[41]),
    .Y(\$65 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$66  (
    .A(reg_q[137]),
    .B(hw2reg[48]),
    .S(hw2reg[47]),
    .Y(\$auto$rtlil.cc:3092:Mux$685 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$67  (
    .A(reg_q[41]),
    .B(hw2reg[46]),
    .S(hw2reg[45]),
    .Y(\$auto$rtlil.cc:3092:Mux$686 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(hw2reg[45]),
    .B(hw2reg[46]),
    .Y(\$69 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$70  (
    .A(reg_q[138]),
    .B(hw2reg[53]),
    .S(hw2reg[52]),
    .Y(\$auto$rtlil.cc:3092:Mux$687 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$71  (
    .A(reg_q[42]),
    .B(hw2reg[51]),
    .S(hw2reg[50]),
    .Y(\$auto$rtlil.cc:3092:Mux$688 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(hw2reg[50]),
    .B(hw2reg[51]),
    .Y(\$73 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$74  (
    .A(reg_q[139]),
    .B(hw2reg[58]),
    .S(hw2reg[57]),
    .Y(\$auto$rtlil.cc:3092:Mux$689 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(reg_q[43]),
    .B(hw2reg[56]),
    .S(hw2reg[55]),
    .Y(\$auto$rtlil.cc:3092:Mux$690 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(hw2reg[55]),
    .B(hw2reg[56]),
    .Y(\$77 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$78  (
    .A(reg_q[140]),
    .B(hw2reg[63]),
    .S(hw2reg[62]),
    .Y(\$auto$rtlil.cc:3092:Mux$691 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(reg_q[44]),
    .B(hw2reg[61]),
    .S(hw2reg[60]),
    .Y(\$auto$rtlil.cc:3092:Mux$692 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$653 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(hw2reg[60]),
    .B(hw2reg[61]),
    .Y(\$81 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(reg_q[141]),
    .B(hw2reg[68]),
    .S(hw2reg[67]),
    .Y(\$auto$rtlil.cc:3092:Mux$693 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$83  (
    .A(reg_q[45]),
    .B(hw2reg[66]),
    .S(hw2reg[65]),
    .Y(\$auto$rtlil.cc:3092:Mux$694 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(hw2reg[65]),
    .B(hw2reg[66]),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$86  (
    .A(reg_q[142]),
    .B(hw2reg[73]),
    .S(hw2reg[72]),
    .Y(\$auto$rtlil.cc:3092:Mux$695 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$87  (
    .A(reg_q[46]),
    .B(hw2reg[71]),
    .S(hw2reg[70]),
    .Y(\$auto$rtlil.cc:3092:Mux$696 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(hw2reg[70]),
    .B(hw2reg[71]),
    .Y(\$89 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$90  (
    .A(reg_q[143]),
    .B(hw2reg[78]),
    .S(hw2reg[77]),
    .Y(\$auto$rtlil.cc:3092:Mux$697 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$91  (
    .A(reg_q[47]),
    .B(hw2reg[76]),
    .S(hw2reg[75]),
    .Y(\$auto$rtlil.cc:3092:Mux$698 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(hw2reg[75]),
    .B(hw2reg[76]),
    .Y(\$93 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$94  (
    .A(reg_q[144]),
    .B(hw2reg[83]),
    .S(hw2reg[82]),
    .Y(\$auto$rtlil.cc:3092:Mux$699 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$95  (
    .A(reg_q[48]),
    .B(hw2reg[81]),
    .S(hw2reg[80]),
    .Y(\$auto$rtlil.cc:3092:Mux$700 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(hw2reg[80]),
    .B(hw2reg[81]),
    .Y(\$97 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$98  (
    .A(reg_q[145]),
    .B(hw2reg[88]),
    .S(hw2reg[87]),
    .Y(\$auto$rtlil.cc:3092:Mux$701 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$99  (
    .A(reg_q[49]),
    .B(hw2reg[86]),
    .S(hw2reg[85]),
    .Y(\$auto$rtlil.cc:3092:Mux$702 )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$id_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(id_d),
    .Q(id_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd12)
  ) \$driver$read_addr_q  (
    .AD(12'h000),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(read_addr_d),
    .Q(read_addr_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.dir  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[255:224]),
    .Q(reg_q[255:224])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.en  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[223:192]),
    .Q(reg_q[223:192])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.in  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[191:160]),
    .Q(reg_q[191:160])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[63:32]),
    .Q(reg_q[63:32])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt_edge  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[31:0]),
    .Q(reg_q[31:0])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt_en  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[95:64]),
    .Q(reg_q[95:64])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.out  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(reg_d[159:128]),
    .Q(reg_q[159:128])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.toggle  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(32'd0),
    .Q(reg_q[127:96])
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_d),
    .Q(req_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$valid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(valid_d),
    .Q(valid_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$w_err_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(w_err_d),
    .Q(w_err_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we_d),
    .Q(we_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd32)
  ) \$procmux$13251  (
    .A(32'd3135023902),
    .B({ reg_q[255:128], 32'h00000000, reg_q[95:0] }),
    .S({ \$procmux$13259_CMP , \$procmux$13258_CMP , \$procmux$13257_CMP , \$procmux$13256_CMP , \$procmux$13255_CMP , \$procmux$13254_CMP , \$procmux$13253_CMP , \$procmux$13252_CMP  }),
    .Y(\$procmux$13251_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13252_CMP0  (
    .A(read_addr_q),
    .B(12'h0e0),
    .Y(\$procmux$13252_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13253_CMP0  (
    .A(read_addr_q),
    .B(12'h0c0),
    .Y(\$procmux$13253_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13254_CMP0  (
    .A(read_addr_q),
    .B(12'h0a0),
    .Y(\$procmux$13254_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13255_CMP0  (
    .A(read_addr_q),
    .B(12'h080),
    .Y(\$procmux$13255_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13256_CMP0  (
    .A(read_addr_q),
    .B(12'h060),
    .Y(\$procmux$13256_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13257_CMP0  (
    .A(read_addr_q),
    .B(12'h040),
    .Y(\$procmux$13257_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13258_CMP0  (
    .A(read_addr_q),
    .B(12'h020),
    .Y(\$procmux$13258_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13259_CMP0  (
    .A(read_addr_q),
    .Y(\$procmux$13259_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13260  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13251_Y ),
    .S(\$procmux$13261_CMP ),
    .Y(\$procmux$13260_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13265  (
    .A({ \$auto$rtlil.cc:3092:Mux$730 , \$auto$rtlil.cc:3092:Mux$728 , \$auto$rtlil.cc:3092:Mux$726 , \$auto$rtlil.cc:3092:Mux$724 , \$auto$rtlil.cc:3092:Mux$722 , \$auto$rtlil.cc:3092:Mux$720 , \$auto$rtlil.cc:3092:Mux$718 , \$auto$rtlil.cc:3092:Mux$716 , \$auto$rtlil.cc:3092:Mux$714 , \$auto$rtlil.cc:3092:Mux$712 , \$auto$rtlil.cc:3092:Mux$710 , \$auto$rtlil.cc:3092:Mux$708 , \$auto$rtlil.cc:3092:Mux$706 , \$auto$rtlil.cc:3092:Mux$704 , \$auto$rtlil.cc:3092:Mux$702 , \$auto$rtlil.cc:3092:Mux$700 , \$auto$rtlil.cc:3092:Mux$698 , \$auto$rtlil.cc:3092:Mux$696 , \$auto$rtlil.cc:3092:Mux$694 , \$auto$rtlil.cc:3092:Mux$692 , \$auto$rtlil.cc:3092:Mux$690 , \$auto$rtlil.cc:3092:Mux$688 , \$auto$rtlil.cc:3092:Mux$686 , \$auto$rtlil.cc:3092:Mux$684 , \$auto$rtlil.cc:3092:Mux$682 , \$auto$rtlil.cc:3092:Mux$680 , \$auto$rtlil.cc:3092:Mux$678 , \$auto$rtlil.cc:3092:Mux$676 , \$auto$rtlil.cc:3092:Mux$674 , \$auto$rtlil.cc:3092:Mux$672 , \$auto$rtlil.cc:3092:Mux$670 , \$auto$rtlil.cc:3092:Mux$668  }),
    .B({ \$157 , \$153 , \$149 , \$145 , \$141 , \$137 , \$133 , \$129 , \$125 , \$121 , \$117 , \$113 , \$109 , \$105 , \$101 , \$97 , \$93 , \$89 , \$85 , \$81 , \$77 , \$73 , \$69 , \$65 , \$61 , \$57 , \$53 , \$49 , \$45 , \$41 , \$37 , \$33  }),
    .S(\$procmux$13266_CMP ),
    .Y(\$procmux$13265_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13266_CMP0  (
    .A(read_addr_q),
    .B(12'h0c0),
    .Y(\$procmux$13266_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13267  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13265_Y ),
    .S(\$procmux$13268_CMP ),
    .Y(\$procmux$13267_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd1)
  ) \$procmux$13271  (
    .A(1'h1),
    .B(8'h00),
    .S({ \$procmux$13279_CMP , \$procmux$13278_CMP , \$procmux$13277_CMP , \$procmux$13276_CMP , \$procmux$13275_CMP , \$procmux$13274_CMP , \$procmux$13273_CMP , \$procmux$13272_CMP  }),
    .Y(\$procmux$13271_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13272_CMP0  (
    .A(read_addr_q),
    .B(12'h0e0),
    .Y(\$procmux$13272_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13273_CMP0  (
    .A(read_addr_q),
    .B(12'h0c0),
    .Y(\$procmux$13273_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13274_CMP0  (
    .A(read_addr_q),
    .B(12'h0a0),
    .Y(\$procmux$13274_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13275_CMP0  (
    .A(read_addr_q),
    .B(12'h080),
    .Y(\$procmux$13275_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13276_CMP0  (
    .A(read_addr_q),
    .B(12'h060),
    .Y(\$procmux$13276_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13277_CMP0  (
    .A(read_addr_q),
    .B(12'h040),
    .Y(\$procmux$13277_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13278_CMP0  (
    .A(read_addr_q),
    .B(12'h020),
    .Y(\$procmux$13278_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13279_CMP0  (
    .A(read_addr_q),
    .Y(\$procmux$13279_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13280  (
    .A(1'hx),
    .B(\$procmux$13271_Y ),
    .S(\$procmux$13281_CMP ),
    .Y(\$procmux$13280_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13284  (
    .A({ \$auto$rtlil.cc:3092:Mux$730 , \$auto$rtlil.cc:3092:Mux$728 , \$auto$rtlil.cc:3092:Mux$726 , \$auto$rtlil.cc:3092:Mux$724 , \$auto$rtlil.cc:3092:Mux$722 , \$auto$rtlil.cc:3092:Mux$720 , \$auto$rtlil.cc:3092:Mux$718 , \$auto$rtlil.cc:3092:Mux$716 , \$auto$rtlil.cc:3092:Mux$714 , \$auto$rtlil.cc:3092:Mux$712 , \$auto$rtlil.cc:3092:Mux$710 , \$auto$rtlil.cc:3092:Mux$708 , \$auto$rtlil.cc:3092:Mux$706 , \$auto$rtlil.cc:3092:Mux$704 , \$auto$rtlil.cc:3092:Mux$702 , \$auto$rtlil.cc:3092:Mux$700 , \$auto$rtlil.cc:3092:Mux$698 , \$auto$rtlil.cc:3092:Mux$696 , \$auto$rtlil.cc:3092:Mux$694 , \$auto$rtlil.cc:3092:Mux$692 , \$auto$rtlil.cc:3092:Mux$690 , \$auto$rtlil.cc:3092:Mux$688 , \$auto$rtlil.cc:3092:Mux$686 , \$auto$rtlil.cc:3092:Mux$684 , \$auto$rtlil.cc:3092:Mux$682 , \$auto$rtlil.cc:3092:Mux$680 , \$auto$rtlil.cc:3092:Mux$678 , \$auto$rtlil.cc:3092:Mux$676 , \$auto$rtlil.cc:3092:Mux$674 , \$auto$rtlil.cc:3092:Mux$672 , \$auto$rtlil.cc:3092:Mux$670 , \$auto$rtlil.cc:3092:Mux$668  }),
    .B(\$reg_d[63:32]$215 ),
    .S(\$procmux$13285_CMP ),
    .Y(\$procmux$13284_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13288  (
    .A(32'd0),
    .B(\$obi_rdata$214 ),
    .S(\$procmux$13289_CMP ),
    .Y(\$procmux$13288_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13292  (
    .A(\$obi_err$206 ),
    .B(\$obi_err$213 ),
    .S(\$procmux$13293_CMP ),
    .Y(\$procmux$13292_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13301  (
    .A(reg_q[255:224]),
    .B(\$165 ),
    .S(\$procmux$13302_CMP ),
    .Y(\$procmux$13301_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13302_CMP0  (
    .A(write_addr),
    .Y(\$procmux$13302_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13303  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13301_Y ),
    .S(\$procmux$13304_CMP ),
    .Y(\$procmux$13303_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13310  (
    .A(reg_q[223:192]),
    .B(\$173 ),
    .S(\$procmux$13311_CMP ),
    .Y(\$procmux$13310_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13311_CMP0  (
    .A(write_addr),
    .B(12'h020),
    .Y(\$procmux$13311_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13312  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13310_Y ),
    .S(\$procmux$13313_CMP ),
    .Y(\$procmux$13312_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13317  (
    .A(32'd0),
    .B(\$183 ),
    .S(\$procmux$13318_CMP ),
    .Y(\$procmux$13317_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13318_CMP0  (
    .A(write_addr),
    .B(12'h080),
    .Y(\$procmux$13318_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13319  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13317_Y ),
    .S(\$procmux$13320_CMP ),
    .Y(\$procmux$13319_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13325  (
    .A({ \$auto$rtlil.cc:3092:Mux$729 , \$auto$rtlil.cc:3092:Mux$727 , \$auto$rtlil.cc:3092:Mux$725 , \$auto$rtlil.cc:3092:Mux$723 , \$auto$rtlil.cc:3092:Mux$721 , \$auto$rtlil.cc:3092:Mux$719 , \$auto$rtlil.cc:3092:Mux$717 , \$auto$rtlil.cc:3092:Mux$715 , \$auto$rtlil.cc:3092:Mux$713 , \$auto$rtlil.cc:3092:Mux$711 , \$auto$rtlil.cc:3092:Mux$709 , \$auto$rtlil.cc:3092:Mux$707 , \$auto$rtlil.cc:3092:Mux$705 , \$auto$rtlil.cc:3092:Mux$703 , \$auto$rtlil.cc:3092:Mux$701 , \$auto$rtlil.cc:3092:Mux$699 , \$auto$rtlil.cc:3092:Mux$697 , \$auto$rtlil.cc:3092:Mux$695 , \$auto$rtlil.cc:3092:Mux$693 , \$auto$rtlil.cc:3092:Mux$691 , \$auto$rtlil.cc:3092:Mux$689 , \$auto$rtlil.cc:3092:Mux$687 , \$auto$rtlil.cc:3092:Mux$685 , \$auto$rtlil.cc:3092:Mux$683 , \$auto$rtlil.cc:3092:Mux$681 , \$auto$rtlil.cc:3092:Mux$679 , \$auto$rtlil.cc:3092:Mux$677 , \$auto$rtlil.cc:3092:Mux$675 , \$auto$rtlil.cc:3092:Mux$673 , \$auto$rtlil.cc:3092:Mux$671 , \$auto$rtlil.cc:3092:Mux$669 , \$auto$rtlil.cc:3092:Mux$667  }),
    .B(\$181 ),
    .S(\$procmux$13326_CMP ),
    .Y(\$procmux$13325_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13326_CMP0  (
    .A(write_addr),
    .B(12'h060),
    .Y(\$procmux$13326_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13327  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13325_Y ),
    .S(\$procmux$13328_CMP ),
    .Y(\$procmux$13327_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13331  (
    .A(reg_q[95:64]),
    .B(\$191 ),
    .S(\$procmux$13332_CMP ),
    .Y(\$procmux$13331_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13332_CMP0  (
    .A(write_addr),
    .B(12'h0a0),
    .Y(\$procmux$13332_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13333  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13331_Y ),
    .S(\$procmux$13334_CMP ),
    .Y(\$procmux$13333_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13336  (
    .A(reg_q[31:0]),
    .B(\$199 ),
    .S(\$procmux$13337_CMP ),
    .Y(\$procmux$13336_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13337_CMP0  (
    .A(write_addr),
    .B(12'h0e0),
    .Y(\$procmux$13337_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13338  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$13336_Y ),
    .S(\$procmux$13339_CMP ),
    .Y(\$procmux$13338_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$procmux$13341  (
    .A(1'h1),
    .B(6'h00),
    .S({ \$procmux$13347_CMP , \$procmux$13346_CMP , \$procmux$13345_CMP , \$procmux$13344_CMP , \$procmux$13343_CMP , \$procmux$13342_CMP  }),
    .Y(\$procmux$13341_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13342_CMP0  (
    .A(write_addr),
    .B(12'h0e0),
    .Y(\$procmux$13342_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13343_CMP0  (
    .A(write_addr),
    .B(12'h0a0),
    .Y(\$procmux$13343_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13344_CMP0  (
    .A(write_addr),
    .B(12'h080),
    .Y(\$procmux$13344_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13345_CMP0  (
    .A(write_addr),
    .B(12'h060),
    .Y(\$procmux$13345_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13346_CMP0  (
    .A(write_addr),
    .B(12'h020),
    .Y(\$procmux$13346_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$13347_CMP0  (
    .A(write_addr),
    .Y(\$procmux$13347_CMP )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13348  (
    .A(1'hx),
    .B(\$procmux$13341_Y ),
    .S(\$procmux$13349_CMP ),
    .Y(\$procmux$13348_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13351  (
    .A(32'd0),
    .B(\$toggle_out$205 ),
    .S(\$procmux$13352_CMP ),
    .Y(\$procmux$13351_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$13354  (
    .A(reg_q[255:192]),
    .B(\$reg_d[255:192]$204 ),
    .S(\$procmux$13355_CMP ),
    .Y(\$procmux$13354_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13357  (
    .A({ \$auto$rtlil.cc:3092:Mux$729 , \$auto$rtlil.cc:3092:Mux$727 , \$auto$rtlil.cc:3092:Mux$725 , \$auto$rtlil.cc:3092:Mux$723 , \$auto$rtlil.cc:3092:Mux$721 , \$auto$rtlil.cc:3092:Mux$719 , \$auto$rtlil.cc:3092:Mux$717 , \$auto$rtlil.cc:3092:Mux$715 , \$auto$rtlil.cc:3092:Mux$713 , \$auto$rtlil.cc:3092:Mux$711 , \$auto$rtlil.cc:3092:Mux$709 , \$auto$rtlil.cc:3092:Mux$707 , \$auto$rtlil.cc:3092:Mux$705 , \$auto$rtlil.cc:3092:Mux$703 , \$auto$rtlil.cc:3092:Mux$701 , \$auto$rtlil.cc:3092:Mux$699 , \$auto$rtlil.cc:3092:Mux$697 , \$auto$rtlil.cc:3092:Mux$695 , \$auto$rtlil.cc:3092:Mux$693 , \$auto$rtlil.cc:3092:Mux$691 , \$auto$rtlil.cc:3092:Mux$689 , \$auto$rtlil.cc:3092:Mux$687 , \$auto$rtlil.cc:3092:Mux$685 , \$auto$rtlil.cc:3092:Mux$683 , \$auto$rtlil.cc:3092:Mux$681 , \$auto$rtlil.cc:3092:Mux$679 , \$auto$rtlil.cc:3092:Mux$677 , \$auto$rtlil.cc:3092:Mux$675 , \$auto$rtlil.cc:3092:Mux$673 , \$auto$rtlil.cc:3092:Mux$671 , \$auto$rtlil.cc:3092:Mux$669 , \$auto$rtlil.cc:3092:Mux$667  }),
    .B(\$reg_d[159:128]$203 ),
    .S(\$procmux$13358_CMP ),
    .Y(\$procmux$13357_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13360  (
    .A(reg_q[95:64]),
    .B(\$reg_d[95:64]$202 ),
    .S(\$procmux$13361_CMP ),
    .Y(\$procmux$13360_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13363  (
    .A(reg_q[31:0]),
    .B(\$reg_d[31:0]$201 ),
    .S(\$procmux$13364_CMP ),
    .Y(\$procmux$13363_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13366  (
    .A(1'h0),
    .B(\$w_err_d$200 ),
    .S(\$procmux$13367_CMP ),
    .Y(\$procmux$13366_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13369  (
    .A(w_err_q),
    .B(1'h0),
    .S(\$procmux$13370_CMP ),
    .Y(\$procmux$13369_Y )
  );
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], valid_q };
  assign obi_wdata = obi_req_i[36:5];
  assign obi_read_request = \$4 ;
  assign obi_write_request = \$6 ;
  assign id_d = obi_req_i[2];
  assign valid_d = obi_req_i[0];
  assign write_addr = { 2'h0, obi_req_i[53:44] };
  assign read_addr_d = { 2'h0, obi_req_i[53:44] };
  assign we_d = obi_req_i[41];
  assign req_d = obi_req_i[0];
  assign bit_mask[7:0] = { obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] };
  assign bit_mask[15:8] = { obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38] };
  assign bit_mask[23:16] = { obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39] };
  assign bit_mask[31:24] = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40] };
  assign reg2hw = { reg_q[255], reg_q[223], reg_q[159], toggle_out[31], reg_q[95], reg_q[63], reg_q[31], reg_q[254], reg_q[222], reg_q[158], toggle_out[30], reg_q[94], reg_q[62], reg_q[30], reg_q[253], reg_q[221], reg_q[157], toggle_out[29], reg_q[93], reg_q[61], reg_q[29], reg_q[252], reg_q[220], reg_q[156], toggle_out[28], reg_q[92], reg_q[60], reg_q[28], reg_q[251], reg_q[219], reg_q[155], toggle_out[27], reg_q[91], reg_q[59], reg_q[27], reg_q[250], reg_q[218], reg_q[154], toggle_out[26], reg_q[90], reg_q[58], reg_q[26], reg_q[249], reg_q[217], reg_q[153], toggle_out[25], reg_q[89], reg_q[57], reg_q[25], reg_q[248], reg_q[216], reg_q[152], toggle_out[24], reg_q[88], reg_q[56], reg_q[24], reg_q[247], reg_q[215], reg_q[151], toggle_out[23], reg_q[87], reg_q[55], reg_q[23], reg_q[246], reg_q[214], reg_q[150], toggle_out[22], reg_q[86], reg_q[54], reg_q[22], reg_q[245], reg_q[213], reg_q[149], toggle_out[21], reg_q[85], reg_q[53], reg_q[21], reg_q[244], reg_q[212], reg_q[148], toggle_out[20], reg_q[84], reg_q[52], reg_q[20], reg_q[243], reg_q[211], reg_q[147], toggle_out[19], reg_q[83], reg_q[51], reg_q[19], reg_q[242], reg_q[210], reg_q[146], toggle_out[18], reg_q[82], reg_q[50], reg_q[18], reg_q[241], reg_q[209], reg_q[145], toggle_out[17], reg_q[81], reg_q[49], reg_q[17], reg_q[240], reg_q[208], reg_q[144], toggle_out[16], reg_q[80], reg_q[48], reg_q[16], reg_q[239], reg_q[207], reg_q[143], toggle_out[15], reg_q[79], reg_q[47], reg_q[15], reg_q[238], reg_q[206], reg_q[142], toggle_out[14], reg_q[78], reg_q[46], reg_q[14], reg_q[237], reg_q[205], reg_q[141], toggle_out[13], reg_q[77], reg_q[45], reg_q[13], reg_q[236], reg_q[204], reg_q[140], toggle_out[12], reg_q[76], reg_q[44], reg_q[12], reg_q[235], reg_q[203], reg_q[139], toggle_out[11], reg_q[75], reg_q[43], reg_q[11], reg_q[234], reg_q[202], reg_q[138], toggle_out[10], reg_q[74], reg_q[42], reg_q[10], reg_q[233], reg_q[201], reg_q[137], toggle_out[9], reg_q[73], reg_q[41], reg_q[9], reg_q[232], reg_q[200], reg_q[136], toggle_out[8], reg_q[72], reg_q[40], reg_q[8], reg_q[231], reg_q[199], reg_q[135], toggle_out[7], reg_q[71], reg_q[39], reg_q[7], reg_q[230], reg_q[198], reg_q[134], toggle_out[6], reg_q[70], reg_q[38], reg_q[6], reg_q[229], reg_q[197], reg_q[133], toggle_out[5], reg_q[69], reg_q[37], reg_q[5], reg_q[228], reg_q[196], reg_q[132], toggle_out[4], reg_q[68], reg_q[36], reg_q[4], reg_q[227], reg_q[195], reg_q[131], toggle_out[3], reg_q[67], reg_q[35], reg_q[3], reg_q[226], reg_q[194], reg_q[130], toggle_out[2], reg_q[66], reg_q[34], reg_q[2], reg_q[225], reg_q[193], reg_q[129], toggle_out[1], reg_q[65], reg_q[33], reg_q[1], reg_q[224], reg_q[192], reg_q[128], toggle_out[0], reg_q[64], reg_q[32], reg_q[0] };
  assign obi_err = \$obi_err$216 ;
  assign w_err_d = \$w_err_d$207 ;
  assign obi_rdata = \$obi_rdata$217 ;
  assign reg_d = { \$reg_d[255:192]$211 , hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], \$reg_d[159:128]$210 , 32'h00000000, \$reg_d[95:64]$209 , \$reg_d[63:32]$218 , \$reg_d[31:0]$208  };
  assign new_reg = { reg_q[255:192], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], \$auto$rtlil.cc:3092:Mux$729 , \$auto$rtlil.cc:3092:Mux$727 , \$auto$rtlil.cc:3092:Mux$725 , \$auto$rtlil.cc:3092:Mux$723 , \$auto$rtlil.cc:3092:Mux$721 , \$auto$rtlil.cc:3092:Mux$719 , \$auto$rtlil.cc:3092:Mux$717 , \$auto$rtlil.cc:3092:Mux$715 , \$auto$rtlil.cc:3092:Mux$713 , \$auto$rtlil.cc:3092:Mux$711 , \$auto$rtlil.cc:3092:Mux$709 , \$auto$rtlil.cc:3092:Mux$707 , \$auto$rtlil.cc:3092:Mux$705 , \$auto$rtlil.cc:3092:Mux$703 , \$auto$rtlil.cc:3092:Mux$701 , \$auto$rtlil.cc:3092:Mux$699 , \$auto$rtlil.cc:3092:Mux$697 , \$auto$rtlil.cc:3092:Mux$695 , \$auto$rtlil.cc:3092:Mux$693 , \$auto$rtlil.cc:3092:Mux$691 , \$auto$rtlil.cc:3092:Mux$689 , \$auto$rtlil.cc:3092:Mux$687 , \$auto$rtlil.cc:3092:Mux$685 , \$auto$rtlil.cc:3092:Mux$683 , \$auto$rtlil.cc:3092:Mux$681 , \$auto$rtlil.cc:3092:Mux$679 , \$auto$rtlil.cc:3092:Mux$677 , \$auto$rtlil.cc:3092:Mux$675 , \$auto$rtlil.cc:3092:Mux$673 , \$auto$rtlil.cc:3092:Mux$671 , \$auto$rtlil.cc:3092:Mux$669 , \$auto$rtlil.cc:3092:Mux$667 , 32'h00000000, reg_q[95:64], \$auto$rtlil.cc:3092:Mux$730 , \$auto$rtlil.cc:3092:Mux$728 , \$auto$rtlil.cc:3092:Mux$726 , \$auto$rtlil.cc:3092:Mux$724 , \$auto$rtlil.cc:3092:Mux$722 , \$auto$rtlil.cc:3092:Mux$720 , \$auto$rtlil.cc:3092:Mux$718 , \$auto$rtlil.cc:3092:Mux$716 , \$auto$rtlil.cc:3092:Mux$714 , \$auto$rtlil.cc:3092:Mux$712 , \$auto$rtlil.cc:3092:Mux$710 , \$auto$rtlil.cc:3092:Mux$708 , \$auto$rtlil.cc:3092:Mux$706 , \$auto$rtlil.cc:3092:Mux$704 , \$auto$rtlil.cc:3092:Mux$702 , \$auto$rtlil.cc:3092:Mux$700 , \$auto$rtlil.cc:3092:Mux$698 , \$auto$rtlil.cc:3092:Mux$696 , \$auto$rtlil.cc:3092:Mux$694 , \$auto$rtlil.cc:3092:Mux$692 , \$auto$rtlil.cc:3092:Mux$690 , \$auto$rtlil.cc:3092:Mux$688 , \$auto$rtlil.cc:3092:Mux$686 , \$auto$rtlil.cc:3092:Mux$684 , \$auto$rtlil.cc:3092:Mux$682 , \$auto$rtlil.cc:3092:Mux$680 , \$auto$rtlil.cc:3092:Mux$678 , \$auto$rtlil.cc:3092:Mux$676 , \$auto$rtlil.cc:3092:Mux$674 , \$auto$rtlil.cc:3092:Mux$672 , \$auto$rtlil.cc:3092:Mux$670 , \$auto$rtlil.cc:3092:Mux$668 , reg_q[31:0] };
  assign new_intrpt = { \$157 , \$153 , \$149 , \$145 , \$141 , \$137 , \$133 , \$129 , \$125 , \$121 , \$117 , \$113 , \$109 , \$105 , \$101 , \$97 , \$93 , \$89 , \$85 , \$81 , \$77 , \$73 , \$69 , \$65 , \$61 , \$57 , \$53 , \$49 , \$45 , \$41 , \$37 , \$33  };
  assign toggle_out = \$toggle_out$212 ;
  assign \$procmux$13261_CMP  = obi_read_request;
  assign \$obi_rdata$214  = \$procmux$13260_Y ;
  assign \$procmux$13268_CMP  = obi_read_request;
  assign \$reg_d[63:32]$215  = \$procmux$13267_Y ;
  assign \$procmux$13281_CMP  = obi_read_request;
  assign \$obi_err$213  = \$procmux$13280_Y ;
  assign \$procmux$13285_CMP  = obi_read_request;
  assign \$reg_d[63:32]$218  = \$procmux$13284_Y ;
  assign \$procmux$13289_CMP  = obi_read_request;
  assign \$obi_rdata$217  = \$procmux$13288_Y ;
  assign \$procmux$13293_CMP  = obi_read_request;
  assign \$obi_err$216  = \$procmux$13292_Y ;
  assign \$procmux$13304_CMP  = obi_write_request;
  assign \$reg_d[255:192]$204 [63:32] = \$procmux$13303_Y ;
  assign \$procmux$13313_CMP  = obi_write_request;
  assign \$reg_d[255:192]$204 [31:0] = \$procmux$13312_Y ;
  assign \$procmux$13320_CMP  = obi_write_request;
  assign \$toggle_out$205  = \$procmux$13319_Y ;
  assign \$procmux$13328_CMP  = obi_write_request;
  assign \$reg_d[159:128]$203  = \$procmux$13327_Y ;
  assign \$procmux$13334_CMP  = obi_write_request;
  assign \$reg_d[95:64]$202  = \$procmux$13333_Y ;
  assign \$procmux$13339_CMP  = obi_write_request;
  assign \$reg_d[31:0]$201  = \$procmux$13338_Y ;
  assign \$procmux$13349_CMP  = obi_write_request;
  assign \$w_err_d$200  = \$procmux$13348_Y ;
  assign \$procmux$13352_CMP  = obi_write_request;
  assign \$toggle_out$212  = \$procmux$13351_Y ;
  assign \$procmux$13355_CMP  = obi_write_request;
  assign \$reg_d[255:192]$211  = \$procmux$13354_Y ;
  assign \$procmux$13358_CMP  = obi_write_request;
  assign \$reg_d[159:128]$210  = \$procmux$13357_Y ;
  assign \$procmux$13361_CMP  = obi_write_request;
  assign \$reg_d[95:64]$209  = \$procmux$13360_Y ;
  assign \$procmux$13364_CMP  = obi_write_request;
  assign \$reg_d[31:0]$208  = \$procmux$13363_Y ;
  assign \$procmux$13367_CMP  = obi_write_request;
  assign \$w_err_d$207  = \$procmux$13366_Y ;
  assign \$procmux$13370_CMP  = obi_write_request;
  assign \$obi_err$206  = \$procmux$13369_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$654  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$658  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$660  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$662  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$664  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$666  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$656  = rst_ni;
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1688 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1689 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1690 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1689 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1690 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1688 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1688 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1689 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1690 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1685 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1686 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1687 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1686 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1687 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1685 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1685 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1686 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1687 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1694 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1695 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1696 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1695 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1696 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1694 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1694 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1695 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1696 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1691 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1692 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1693 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1692 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1693 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1691 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1691 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1692 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1693 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1700 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1701 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1702 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1701 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1702 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1700 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1700 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1701 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1702 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1697 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1698 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1699 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1698 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1699 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1697 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1697 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1698 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1699 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1706 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1707 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1708 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1707 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1708 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1706 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1706 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1707 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1708 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1703 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1704 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1705 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1704 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1705 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1703 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1703 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1704 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1705 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1712 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1713 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1714 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1713 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1714 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1712 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1712 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1713 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1714 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$4 ;
  wire \$7 ;
  wire \$9 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1709 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1710 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1711 ;
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  /* src = "rtl/common_cells/lzc.sv:50.45" */
  wire [7:0] \gen_lzc.index_nodes ;
  /* src = "rtl/common_cells/lzc.sv:49.30" */
  wire [3:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\$2 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(2'h1),
    .B(2'h0),
    .S(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1710 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_lzc.in_tmp [2]),
    .B(\gen_lzc.in_tmp [3]),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$15  (
    .A(2'h3),
    .B(2'h2),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1711 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(in_i),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .Y(\$19 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(\$21 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A(\gen_lzc.index_nodes [5:4]),
    .B(\gen_lzc.index_nodes [3:2]),
    .S(\$4 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1709 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_lzc.in_tmp [0]),
    .B(\gen_lzc.in_tmp [1]),
    .Y(\$7 )
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut [1:0] = 2'h0;
  assign \gen_lzc.index_lut [3:2] = 2'h1;
  assign \gen_lzc.index_lut [5:4] = 2'h2;
  assign \gen_lzc.index_lut [7:6] = 2'h3;
  assign \gen_lzc.sel_nodes [0] = \$2 ;
  assign \gen_lzc.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1709 ;
  assign \gen_lzc.sel_nodes [1] = \$7 ;
  assign \gen_lzc.index_nodes [3:2] = \$auto$rtlil.cc:3092:Mux$1710 ;
  assign \gen_lzc.sel_nodes [2] = \$12 ;
  assign \gen_lzc.index_nodes [5:4] = \$auto$rtlil.cc:3092:Mux$1711 ;
  assign cnt_o = \gen_lzc.index_nodes [1:0];
  assign empty_o = \$21 ;
  assign \$4  = \gen_lzc.sel_nodes [1];
  assign \$9  = \gen_lzc.in_tmp [0];
  assign \$14  = \gen_lzc.in_tmp [2];
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$268 ;
  wire \$auto$rtlil.cc:2965:LogicNot$269 ;
  wire [359:0] \$auto$rtlil.cc:3004:And$16698 ;
  wire \$auto$rtlil.cc:3009:Lt$237 ;
  wire \$auto$rtlil.cc:3009:Lt$244 ;
  wire \$auto$rtlil.cc:3009:Lt$250 ;
  wire \$auto$rtlil.cc:3009:Lt$253 ;
  wire \$auto$rtlil.cc:3009:Lt$256 ;
  wire \$auto$rtlil.cc:3009:Lt$259 ;
  wire \$auto$rtlil.cc:3009:Lt$262 ;
  wire \$auto$rtlil.cc:3009:Lt$265 ;
  wire \$auto$rtlil.cc:3015:Ge$236 ;
  wire \$auto$rtlil.cc:3015:Ge$243 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$238 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$245 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$239 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$246 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$252 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$255 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$258 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$261 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$264 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$267 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$242 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$249 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$251 ;
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$254 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$257 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$260 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$263 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$266 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$240 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$241 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$247 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$248 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [359:0] \$mgr_ports_req_o$35 ;
  wire [2:0] \$procmux$14085_Y ;
  wire \$procmux$14086_CMP ;
  wire \$procmux$14088_Y ;
  wire \$procmux$14089_CMP ;
  wire [359:0] \$procmux$14091_Y ;
  wire \$procmux$14092_CMP ;
  wire [359:0] \$procmux$14093_Y ;
  wire \$procmux$14094_CMP ;
  wire \$procmux$14095_Y ;
  wire \$procmux$14096_CMP ;
  wire \$procmux$14097_Y ;
  wire \$procmux$14098_CMP ;
  wire [359:0] \$procmux$14100_Y ;
  wire \$procmux$14101_CMP ;
  wire \$procmux$14103_Y ;
  wire \$procmux$14104_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire [2:0] \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire [2:0] select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$236 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$237 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$236 ),
    .B(\$auto$rtlil.cc:3009:Lt$237 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$238 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$18  (
    .A(72'h000000000000000000),
    .B(72'h000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$238 ),
    .Y(\$auto$rtlil.cc:3092:Mux$239 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$239 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$240 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$239 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$241 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$243 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$244 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$243 ),
    .B(\$auto$rtlil.cc:3009:Lt$244 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$245 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$25  (
    .A(72'h000000000000000000),
    .B(72'hfffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$245 ),
    .Y(\$auto$rtlil.cc:3092:Mux$246 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$246 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$247 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$246 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$248 )
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$242 ),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$248 [359:0]),
    .Y(\$auto$rtlil.cc:3093:Bwmux$249 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$250 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$251 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$31  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$251 ),
    .S(\$auto$rtlil.cc:3009:Lt$250 ),
    .Y(\$auto$rtlil.cc:3092:Mux$252 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$253 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, \$mgr_ports_req_o$35  }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$254 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$38  (
    .A(72'hxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$254 ),
    .S(\$auto$rtlil.cc:3009:Lt$253 ),
    .Y(\$auto$rtlil.cc:3092:Mux$255 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$256 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$40  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$257 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$41  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$257 ),
    .S(\$auto$rtlil.cc:3009:Lt$256 ),
    .Y(\$auto$rtlil.cc:3092:Mux$258 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$255 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$258 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$259 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$260 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$48  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$260 ),
    .S(\$auto$rtlil.cc:3009:Lt$259 ),
    .Y(\$auto$rtlil.cc:3092:Mux$261 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$262 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$50  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$263 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$51  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$263 ),
    .S(\$auto$rtlil.cc:3009:Lt$262 ),
    .Y(\$auto$rtlil.cc:3092:Mux$264 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$265 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$53  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$266 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$54  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$266 ),
    .S(\$auto$rtlil.cc:3009:Lt$265 ),
    .Y(\$auto$rtlil.cc:3092:Mux$267 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$268 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd360),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd360),
    .Y_WIDTH(32'd360)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16697  (
    .A({ 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$241 [359:0]),
    .Y(\$auto$rtlil.cc:3004:And$16698 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$select_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14085  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14086_CMP ),
    .Y(\$procmux$14085_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14088  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14089_CMP ),
    .Y(\$procmux$14088_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14091  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$249 ),
    .S(\$procmux$14092_CMP ),
    .Y(\$procmux$14091_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14093  (
    .A(\$procmux$14091_Y ),
    .B(360'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14093_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14095  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$252 [1]),
    .S(\$procmux$14096_CMP ),
    .Y(\$procmux$14095_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14097  (
    .A(\$procmux$14095_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14097_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14100  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14100_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14103  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14103_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[36:2] = \$auto$rtlil.cc:3092:Mux$261 [36:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$264 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14086_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14085_Y ;
  assign \$procmux$14089_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14088_Y ;
  assign \$procmux$14092_CMP  = \$14 ;
  assign \$procmux$14094_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14093_Y ;
  assign \$procmux$14096_CMP  = \$14 ;
  assign \$procmux$14098_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14097_Y ;
  assign \$procmux$14101_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14100_Y ;
  assign \$procmux$14104_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14103_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$267 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$242  = \$auto$rtlil.cc:3004:And$16698 ;
  assign \$auto$rtlil.cc:2965:LogicNot$269  = rst_ni;
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$302 ;
  wire \$auto$rtlil.cc:2965:LogicNot$303 ;
  wire [359:0] \$auto$rtlil.cc:3004:And$16696 ;
  wire \$auto$rtlil.cc:3009:Lt$271 ;
  wire \$auto$rtlil.cc:3009:Lt$278 ;
  wire \$auto$rtlil.cc:3009:Lt$284 ;
  wire \$auto$rtlil.cc:3009:Lt$287 ;
  wire \$auto$rtlil.cc:3009:Lt$290 ;
  wire \$auto$rtlil.cc:3009:Lt$293 ;
  wire \$auto$rtlil.cc:3009:Lt$296 ;
  wire \$auto$rtlil.cc:3009:Lt$299 ;
  wire \$auto$rtlil.cc:3015:Ge$270 ;
  wire \$auto$rtlil.cc:3015:Ge$277 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$272 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$279 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$273 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$280 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$286 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$289 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$292 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$295 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$298 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$301 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$276 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$283 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$285 ;
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$288 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$291 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$294 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$297 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$300 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$274 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$275 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$281 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$282 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [359:0] \$mgr_ports_req_o$35 ;
  wire [2:0] \$procmux$14065_Y ;
  wire \$procmux$14066_CMP ;
  wire \$procmux$14068_Y ;
  wire \$procmux$14069_CMP ;
  wire [359:0] \$procmux$14071_Y ;
  wire \$procmux$14072_CMP ;
  wire [359:0] \$procmux$14073_Y ;
  wire \$procmux$14074_CMP ;
  wire \$procmux$14075_Y ;
  wire \$procmux$14076_CMP ;
  wire \$procmux$14077_Y ;
  wire \$procmux$14078_CMP ;
  wire [359:0] \$procmux$14080_Y ;
  wire \$procmux$14081_CMP ;
  wire \$procmux$14083_Y ;
  wire \$procmux$14084_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire [2:0] \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire [2:0] select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$270 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$271 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$270 ),
    .B(\$auto$rtlil.cc:3009:Lt$271 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$272 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$18  (
    .A(72'h000000000000000000),
    .B(72'h000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$272 ),
    .Y(\$auto$rtlil.cc:3092:Mux$273 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$273 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$274 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$273 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$275 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$277 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$278 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$277 ),
    .B(\$auto$rtlil.cc:3009:Lt$278 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$279 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$25  (
    .A(72'h000000000000000000),
    .B(72'hfffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$279 ),
    .Y(\$auto$rtlil.cc:3092:Mux$280 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$280 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$281 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$280 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$282 )
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$276 ),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$282 [359:0]),
    .Y(\$auto$rtlil.cc:3093:Bwmux$283 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$284 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$285 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$31  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$285 ),
    .S(\$auto$rtlil.cc:3009:Lt$284 ),
    .Y(\$auto$rtlil.cc:3092:Mux$286 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$287 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, \$mgr_ports_req_o$35  }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$288 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$38  (
    .A(72'hxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$288 ),
    .S(\$auto$rtlil.cc:3009:Lt$287 ),
    .Y(\$auto$rtlil.cc:3092:Mux$289 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$290 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$40  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$291 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$41  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$291 ),
    .S(\$auto$rtlil.cc:3009:Lt$290 ),
    .Y(\$auto$rtlil.cc:3092:Mux$292 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$289 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$292 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$293 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$294 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$48  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$294 ),
    .S(\$auto$rtlil.cc:3009:Lt$293 ),
    .Y(\$auto$rtlil.cc:3092:Mux$295 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$296 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$50  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$297 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$51  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$297 ),
    .S(\$auto$rtlil.cc:3009:Lt$296 ),
    .Y(\$auto$rtlil.cc:3092:Mux$298 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$299 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$53  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$300 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$54  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$300 ),
    .S(\$auto$rtlil.cc:3009:Lt$299 ),
    .Y(\$auto$rtlil.cc:3092:Mux$301 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$302 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd360),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd360),
    .Y_WIDTH(32'd360)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16695  (
    .A({ 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$275 [359:0]),
    .Y(\$auto$rtlil.cc:3004:And$16696 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$select_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14065  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14066_CMP ),
    .Y(\$procmux$14065_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14068  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14069_CMP ),
    .Y(\$procmux$14068_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14071  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$283 ),
    .S(\$procmux$14072_CMP ),
    .Y(\$procmux$14071_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14073  (
    .A(\$procmux$14071_Y ),
    .B(360'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14073_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14075  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$286 [1]),
    .S(\$procmux$14076_CMP ),
    .Y(\$procmux$14075_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14077  (
    .A(\$procmux$14075_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14077_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14080  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14080_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14083  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14083_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[36:2] = \$auto$rtlil.cc:3092:Mux$295 [36:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$298 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14066_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14065_Y ;
  assign \$procmux$14069_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14068_Y ;
  assign \$procmux$14072_CMP  = \$14 ;
  assign \$procmux$14074_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14073_Y ;
  assign \$procmux$14076_CMP  = \$14 ;
  assign \$procmux$14078_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14077_Y ;
  assign \$procmux$14081_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14080_Y ;
  assign \$procmux$14084_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14083_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$301 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$276  = \$auto$rtlil.cc:3004:And$16696 ;
  assign \$auto$rtlil.cc:2965:LogicNot$303  = rst_ni;
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$336 ;
  wire \$auto$rtlil.cc:2965:LogicNot$337 ;
  wire [359:0] \$auto$rtlil.cc:3004:And$16694 ;
  wire \$auto$rtlil.cc:3009:Lt$305 ;
  wire \$auto$rtlil.cc:3009:Lt$312 ;
  wire \$auto$rtlil.cc:3009:Lt$318 ;
  wire \$auto$rtlil.cc:3009:Lt$321 ;
  wire \$auto$rtlil.cc:3009:Lt$324 ;
  wire \$auto$rtlil.cc:3009:Lt$327 ;
  wire \$auto$rtlil.cc:3009:Lt$330 ;
  wire \$auto$rtlil.cc:3009:Lt$333 ;
  wire \$auto$rtlil.cc:3015:Ge$304 ;
  wire \$auto$rtlil.cc:3015:Ge$311 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$306 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$313 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$307 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$314 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$320 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$323 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$326 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$329 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$332 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$335 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$310 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$317 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$319 ;
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$322 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$325 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$328 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$331 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$334 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$308 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$309 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$315 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$316 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [359:0] \$mgr_ports_req_o$35 ;
  wire [2:0] \$procmux$14045_Y ;
  wire \$procmux$14046_CMP ;
  wire \$procmux$14048_Y ;
  wire \$procmux$14049_CMP ;
  wire [359:0] \$procmux$14051_Y ;
  wire \$procmux$14052_CMP ;
  wire [359:0] \$procmux$14053_Y ;
  wire \$procmux$14054_CMP ;
  wire \$procmux$14055_Y ;
  wire \$procmux$14056_CMP ;
  wire \$procmux$14057_Y ;
  wire \$procmux$14058_CMP ;
  wire [359:0] \$procmux$14060_Y ;
  wire \$procmux$14061_CMP ;
  wire \$procmux$14063_Y ;
  wire \$procmux$14064_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire [2:0] \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire [2:0] select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$304 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$305 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$304 ),
    .B(\$auto$rtlil.cc:3009:Lt$305 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$306 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$18  (
    .A(72'h000000000000000000),
    .B(72'h000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$306 ),
    .Y(\$auto$rtlil.cc:3092:Mux$307 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$307 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$308 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$307 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$309 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$311 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$312 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$311 ),
    .B(\$auto$rtlil.cc:3009:Lt$312 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$313 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$25  (
    .A(72'h000000000000000000),
    .B(72'hfffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$313 ),
    .Y(\$auto$rtlil.cc:3092:Mux$314 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$314 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$315 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$314 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$316 )
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$310 ),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$316 [359:0]),
    .Y(\$auto$rtlil.cc:3093:Bwmux$317 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$318 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$319 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$31  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$319 ),
    .S(\$auto$rtlil.cc:3009:Lt$318 ),
    .Y(\$auto$rtlil.cc:3092:Mux$320 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$321 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, \$mgr_ports_req_o$35  }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$322 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$38  (
    .A(72'hxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$322 ),
    .S(\$auto$rtlil.cc:3009:Lt$321 ),
    .Y(\$auto$rtlil.cc:3092:Mux$323 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$324 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$40  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$325 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$41  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$325 ),
    .S(\$auto$rtlil.cc:3009:Lt$324 ),
    .Y(\$auto$rtlil.cc:3092:Mux$326 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$323 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$326 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$327 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$328 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$48  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$328 ),
    .S(\$auto$rtlil.cc:3009:Lt$327 ),
    .Y(\$auto$rtlil.cc:3092:Mux$329 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$330 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$50  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$331 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$51  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$331 ),
    .S(\$auto$rtlil.cc:3009:Lt$330 ),
    .Y(\$auto$rtlil.cc:3092:Mux$332 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$333 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$53  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$334 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$54  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$334 ),
    .S(\$auto$rtlil.cc:3009:Lt$333 ),
    .Y(\$auto$rtlil.cc:3092:Mux$335 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$336 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd360),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd360),
    .Y_WIDTH(32'd360)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16693  (
    .A({ 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$309 [359:0]),
    .Y(\$auto$rtlil.cc:3004:And$16694 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$select_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14045  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14046_CMP ),
    .Y(\$procmux$14045_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14048  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14049_CMP ),
    .Y(\$procmux$14048_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14051  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$317 ),
    .S(\$procmux$14052_CMP ),
    .Y(\$procmux$14051_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14053  (
    .A(\$procmux$14051_Y ),
    .B(360'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14053_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14055  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$320 [1]),
    .S(\$procmux$14056_CMP ),
    .Y(\$procmux$14055_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14057  (
    .A(\$procmux$14055_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14057_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14060  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14060_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14063  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14063_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[36:2] = \$auto$rtlil.cc:3092:Mux$329 [36:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$332 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14046_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14045_Y ;
  assign \$procmux$14049_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14048_Y ;
  assign \$procmux$14052_CMP  = \$14 ;
  assign \$procmux$14054_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14053_Y ;
  assign \$procmux$14056_CMP  = \$14 ;
  assign \$procmux$14058_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14057_Y ;
  assign \$procmux$14061_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14060_Y ;
  assign \$procmux$14064_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14063_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$335 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$310  = \$auto$rtlil.cc:3004:And$16694 ;
  assign \$auto$rtlil.cc:2965:LogicNot$337  = rst_ni;
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$370 ;
  wire \$auto$rtlil.cc:2965:LogicNot$371 ;
  wire [359:0] \$auto$rtlil.cc:3004:And$16692 ;
  wire \$auto$rtlil.cc:3009:Lt$339 ;
  wire \$auto$rtlil.cc:3009:Lt$346 ;
  wire \$auto$rtlil.cc:3009:Lt$352 ;
  wire \$auto$rtlil.cc:3009:Lt$355 ;
  wire \$auto$rtlil.cc:3009:Lt$358 ;
  wire \$auto$rtlil.cc:3009:Lt$361 ;
  wire \$auto$rtlil.cc:3009:Lt$364 ;
  wire \$auto$rtlil.cc:3009:Lt$367 ;
  wire \$auto$rtlil.cc:3015:Ge$338 ;
  wire \$auto$rtlil.cc:3015:Ge$345 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$340 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$347 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$341 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$348 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$354 ;
  wire [71:0] \$auto$rtlil.cc:3092:Mux$357 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$360 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$363 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$366 ;
  wire [36:0] \$auto$rtlil.cc:3092:Mux$369 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$344 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$351 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$353 ;
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$356 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$359 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$362 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$365 ;
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$368 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$342 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$343 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$349 ;
  wire [575:0] \$auto$rtlil.cc:3114:Demux$350 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [359:0] \$mgr_ports_req_o$35 ;
  wire [2:0] \$procmux$14025_Y ;
  wire \$procmux$14026_CMP ;
  wire \$procmux$14028_Y ;
  wire \$procmux$14029_CMP ;
  wire [359:0] \$procmux$14031_Y ;
  wire \$procmux$14032_CMP ;
  wire [359:0] \$procmux$14033_Y ;
  wire \$procmux$14034_CMP ;
  wire \$procmux$14035_Y ;
  wire \$procmux$14036_CMP ;
  wire \$procmux$14037_Y ;
  wire \$procmux$14038_CMP ;
  wire [359:0] \$procmux$14040_Y ;
  wire \$procmux$14041_CMP ;
  wire \$procmux$14043_Y ;
  wire \$procmux$14044_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire [2:0] \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire [2:0] select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$338 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$339 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$338 ),
    .B(\$auto$rtlil.cc:3009:Lt$339 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$340 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$18  (
    .A(72'h000000000000000000),
    .B(72'h000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$340 ),
    .Y(\$auto$rtlil.cc:3092:Mux$341 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$341 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$342 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$341 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$343 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$345 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$346 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$345 ),
    .B(\$auto$rtlil.cc:3009:Lt$346 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$347 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$25  (
    .A(72'h000000000000000000),
    .B(72'hfffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$347 ),
    .Y(\$auto$rtlil.cc:3092:Mux$348 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$348 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$349 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$348 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$350 )
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$344 ),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$350 [359:0]),
    .Y(\$auto$rtlil.cc:3093:Bwmux$351 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$352 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$353 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$31  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$353 ),
    .S(\$auto$rtlil.cc:3009:Lt$352 ),
    .Y(\$auto$rtlil.cc:3092:Mux$354 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$355 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, \$mgr_ports_req_o$35  }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$356 )
  );
  \$mux  #(
    .WIDTH(32'd72)
  ) \$38  (
    .A(72'hxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$356 ),
    .S(\$auto$rtlil.cc:3009:Lt$355 ),
    .Y(\$auto$rtlil.cc:3092:Mux$357 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$358 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$40  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$359 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$41  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$359 ),
    .S(\$auto$rtlil.cc:3009:Lt$358 ),
    .Y(\$auto$rtlil.cc:3092:Mux$360 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$357 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$360 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$361 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$362 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$48  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$362 ),
    .S(\$auto$rtlil.cc:3009:Lt$361 ),
    .Y(\$auto$rtlil.cc:3092:Mux$363 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$364 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$50  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$365 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$51  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$365 ),
    .S(\$auto$rtlil.cc:3009:Lt$364 ),
    .Y(\$auto$rtlil.cc:3092:Mux$366 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$367 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$53  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$368 )
  );
  \$mux  #(
    .WIDTH(32'd37)
  ) \$54  (
    .A(37'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$368 ),
    .S(\$auto$rtlil.cc:3009:Lt$367 ),
    .Y(\$auto$rtlil.cc:3092:Mux$369 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$370 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd360),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd360),
    .Y_WIDTH(32'd360)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16691  (
    .A({ 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 71'hxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$343 [359:0]),
    .Y(\$auto$rtlil.cc:3004:And$16692 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$select_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14025  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14026_CMP ),
    .Y(\$procmux$14025_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14028  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14029_CMP ),
    .Y(\$procmux$14028_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14031  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$351 ),
    .S(\$procmux$14032_CMP ),
    .Y(\$procmux$14031_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14033  (
    .A(\$procmux$14031_Y ),
    .B(360'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14033_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14035  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$354 [1]),
    .S(\$procmux$14036_CMP ),
    .Y(\$procmux$14035_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14037  (
    .A(\$procmux$14035_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14037_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14040  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14040_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14043  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14043_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[36:2] = \$auto$rtlil.cc:3092:Mux$363 [36:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$366 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14026_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14025_Y ;
  assign \$procmux$14029_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14028_Y ;
  assign \$procmux$14032_CMP  = \$14 ;
  assign \$procmux$14034_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14033_Y ;
  assign \$procmux$14036_CMP  = \$14 ;
  assign \$procmux$14038_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14037_Y ;
  assign \$procmux$14041_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14040_Y ;
  assign \$procmux$14044_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14043_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$369 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$344  = \$auto$rtlil.cc:3004:And$16692 ;
  assign \$auto$rtlil.cc:2965:LogicNot$371  = rst_ni;
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$55 ;
  wire \$auto$rtlil.cc:2965:LogicNot$56 ;
  wire [443:0] \$auto$rtlil.cc:3004:And$16702 ;
  wire \$auto$rtlil.cc:3009:Lt$24 ;
  wire \$auto$rtlil.cc:3009:Lt$31 ;
  wire \$auto$rtlil.cc:3009:Lt$37 ;
  wire \$auto$rtlil.cc:3009:Lt$40 ;
  wire \$auto$rtlil.cc:3009:Lt$43 ;
  wire \$auto$rtlil.cc:3009:Lt$46 ;
  wire \$auto$rtlil.cc:3009:Lt$49 ;
  wire \$auto$rtlil.cc:3009:Lt$52 ;
  wire \$auto$rtlil.cc:3015:Ge$23 ;
  wire \$auto$rtlil.cc:3015:Ge$30 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$25 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$32 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$26 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$33 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$39 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$42 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$45 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$48 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$51 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$54 ;
  wire [443:0] \$auto$rtlil.cc:3093:Bwmux$29 ;
  wire [443:0] \$auto$rtlil.cc:3093:Bwmux$36 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$38 ;
  wire [73:0] \$auto$rtlil.cc:3113:Bmux$41 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$44 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$47 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$50 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$53 ;
  wire [591:0] \$auto$rtlil.cc:3114:Demux$27 ;
  wire [591:0] \$auto$rtlil.cc:3114:Demux$28 ;
  wire [591:0] \$auto$rtlil.cc:3114:Demux$34 ;
  wire [591:0] \$auto$rtlil.cc:3114:Demux$35 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [443:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [443:0] \$mgr_ports_req_o$35 ;
  wire [2:0] \$procmux$14941_Y ;
  wire \$procmux$14942_CMP ;
  wire \$procmux$14944_Y ;
  wire \$procmux$14945_CMP ;
  wire [443:0] \$procmux$14947_Y ;
  wire \$procmux$14948_CMP ;
  wire [443:0] \$procmux$14949_Y ;
  wire \$procmux$14950_CMP ;
  wire \$procmux$14951_Y ;
  wire \$procmux$14952_CMP ;
  wire \$procmux$14953_Y ;
  wire \$procmux$14954_CMP ;
  wire [443:0] \$procmux$14956_Y ;
  wire \$procmux$14957_CMP ;
  wire \$procmux$14959_Y ;
  wire \$procmux$14960_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire [2:0] \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire [2:0] select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$23 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$24 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$23 ),
    .B(\$auto$rtlil.cc:3009:Lt$24 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$25 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$18  (
    .A(74'h0000000000000000000),
    .B(74'h0000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$25 ),
    .Y(\$auto$rtlil.cc:3092:Mux$26 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$26 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$27 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$26 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$28 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$30 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$31 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$30 ),
    .B(\$auto$rtlil.cc:3009:Lt$31 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$32 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$25  (
    .A(74'h0000000000000000000),
    .B(74'h3fffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$32 ),
    .Y(\$auto$rtlil.cc:3092:Mux$33 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$33 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$34 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$33 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$35 )
  );
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$29 ),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$35 [443:0]),
    .Y(\$auto$rtlil.cc:3093:Bwmux$36 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$37 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$30  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$38 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$31  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$38 ),
    .S(\$auto$rtlil.cc:3009:Lt$37 ),
    .Y(\$auto$rtlil.cc:3092:Mux$39 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$40 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$37  (
    .A({ 148'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, \$mgr_ports_req_o$35  }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$41 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$38  (
    .A(74'hxxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$41 ),
    .S(\$auto$rtlil.cc:3009:Lt$40 ),
    .Y(\$auto$rtlil.cc:3092:Mux$42 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$43 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$40  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$44 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$41  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$44 ),
    .S(\$auto$rtlil.cc:3009:Lt$43 ),
    .Y(\$auto$rtlil.cc:3092:Mux$45 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$42 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$45 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$46 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$47  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$47 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$48  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$47 ),
    .S(\$auto$rtlil.cc:3009:Lt$46 ),
    .Y(\$auto$rtlil.cc:3092:Mux$48 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$49 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$50  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$50 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$51  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$50 ),
    .S(\$auto$rtlil.cc:3009:Lt$49 ),
    .Y(\$auto$rtlil.cc:3092:Mux$51 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$52 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$53  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$53 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$54  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$53 ),
    .S(\$auto$rtlil.cc:3009:Lt$52 ),
    .Y(\$auto$rtlil.cc:3092:Mux$54 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$55 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd444),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd444),
    .Y_WIDTH(32'd444)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16701  (
    .A({ 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$28 [443:0]),
    .Y(\$auto$rtlil.cc:3004:And$16702 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$select_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14941  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14942_CMP ),
    .Y(\$procmux$14941_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14944  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14945_CMP ),
    .Y(\$procmux$14944_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$14947  (
    .A(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$36 ),
    .S(\$procmux$14948_CMP ),
    .Y(\$procmux$14947_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$14949  (
    .A(\$procmux$14947_Y ),
    .B(444'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14949_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14951  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$39 [1]),
    .S(\$procmux$14952_CMP ),
    .Y(\$procmux$14951_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14953  (
    .A(\$procmux$14951_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14953_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$14956  (
    .A(\$mgr_ports_req_o$33 ),
    .B(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14956_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14959  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14959_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[38:2] = \$auto$rtlil.cc:3092:Mux$48 [38:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$51 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14942_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14941_Y ;
  assign \$procmux$14945_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14944_Y ;
  assign \$procmux$14948_CMP  = \$14 ;
  assign \$procmux$14950_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14949_Y ;
  assign \$procmux$14952_CMP  = \$14 ;
  assign \$procmux$14954_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14953_Y ;
  assign \$procmux$14957_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14956_Y ;
  assign \$procmux$14960_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14959_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$54 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$29  = \$auto$rtlil.cc:3004:And$16702 ;
  assign \$auto$rtlil.cc:2965:LogicNot$56  = rst_ni;
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$2 ;
  wire \$4 ;
  wire \$43 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$201 ;
  wire \$auto$rtlil.cc:2965:LogicNot$202 ;
  wire [147:0] \$auto$rtlil.cc:3004:And$16700 ;
  wire \$auto$rtlil.cc:3009:Lt$170 ;
  wire \$auto$rtlil.cc:3009:Lt$177 ;
  wire \$auto$rtlil.cc:3009:Lt$183 ;
  wire \$auto$rtlil.cc:3009:Lt$186 ;
  wire \$auto$rtlil.cc:3009:Lt$189 ;
  wire \$auto$rtlil.cc:3009:Lt$192 ;
  wire \$auto$rtlil.cc:3009:Lt$195 ;
  wire \$auto$rtlil.cc:3009:Lt$198 ;
  wire \$auto$rtlil.cc:3015:Ge$169 ;
  wire \$auto$rtlil.cc:3015:Ge$176 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$171 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$178 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$172 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$179 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$185 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$188 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$191 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$194 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$197 ;
  wire [38:0] \$auto$rtlil.cc:3092:Mux$200 ;
  wire [147:0] \$auto$rtlil.cc:3093:Bwmux$175 ;
  wire [147:0] \$auto$rtlil.cc:3093:Bwmux$182 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$184 ;
  wire [73:0] \$auto$rtlil.cc:3113:Bmux$187 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$190 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$193 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$196 ;
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$199 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$173 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$174 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$180 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$181 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$cnt_up$44 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [147:0] \$mgr_ports_req_o$33 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire [147:0] \$mgr_ports_req_o$35 ;
  wire \$procmux$14311_Y ;
  wire \$procmux$14312_CMP ;
  wire \$procmux$14314_Y ;
  wire \$procmux$14315_CMP ;
  wire [147:0] \$procmux$14317_Y ;
  wire \$procmux$14318_CMP ;
  wire [147:0] \$procmux$14319_Y ;
  wire \$procmux$14320_CMP ;
  wire \$procmux$14321_Y ;
  wire \$procmux$14322_CMP ;
  wire \$procmux$14323_Y ;
  wire \$procmux$14324_CMP ;
  wire [147:0] \$procmux$14326_Y ;
  wire \$procmux$14327_CMP ;
  wire \$procmux$14329_Y ;
  wire \$procmux$14330_CMP ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$sbr_port_gnt$32 ;
  /* src = "rtl/obi/obi_demux.sv:55.5-61.8" */
  wire \$sbr_port_gnt$34 ;
  /* src = "rtl/obi/obi_demux.sv:63.5-66.8" */
  wire \$select_d$45 ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [147:0] mgr_ports_req_o;
  wire [147:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [77:0] mgr_ports_rsp_i;
  wire [77:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input sbr_port_select_i;
  wire sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.12" */
  wire select_d;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire select_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(overflow),
    .Y(\$2 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$169 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$170 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$auto$rtlil.cc:3015:Ge$169 ),
    .B(\$auto$rtlil.cc:3009:Lt$170 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$171 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$18  (
    .A(74'h0000000000000000000),
    .B(74'h0000000000000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$171 ),
    .Y(\$auto$rtlil.cc:3092:Mux$172 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd74)
  ) \$19  (
    .A(\$auto$rtlil.cc:3092:Mux$172 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$173 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd74)
  ) \$20  (
    .A(\$auto$rtlil.cc:3092:Mux$172 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$174 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$176 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$177 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$auto$rtlil.cc:3015:Ge$176 ),
    .B(\$auto$rtlil.cc:3009:Lt$177 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$178 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$25  (
    .A(74'h0000000000000000000),
    .B(74'h3fffffffffffffffffe),
    .S(\$auto$rtlil.cc:3024:LogicAnd$178 ),
    .Y(\$auto$rtlil.cc:3092:Mux$179 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd74)
  ) \$26  (
    .A(\$auto$rtlil.cc:3092:Mux$179 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$180 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd74)
  ) \$27  (
    .A(\$auto$rtlil.cc:3092:Mux$179 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3114:Demux$181 )
  );
  \$bwmux  #(
    .WIDTH(32'd148)
  ) \$28  (
    .A(\$auto$rtlil.cc:3093:Bwmux$175 ),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$181 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$182 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$183 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd39)
  ) \$30  (
    .A(mgr_ports_rsp_i),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$184 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$31  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$184 ),
    .S(\$auto$rtlil.cc:3009:Lt$183 ),
    .Y(\$auto$rtlil.cc:3092:Mux$185 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$186 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd74)
  ) \$37  (
    .A(\$mgr_ports_req_o$35 ),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$187 )
  );
  \$mux  #(
    .WIDTH(32'd74)
  ) \$38  (
    .A(74'hxxxxxxxxxxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$187 ),
    .S(\$auto$rtlil.cc:3009:Lt$186 ),
    .Y(\$auto$rtlil.cc:3092:Mux$188 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A({ 1'h0, sbr_port_select_i }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$189 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd39)
  ) \$40  (
    .A(mgr_ports_rsp_i),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3113:Bmux$190 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$41  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$190 ),
    .S(\$auto$rtlil.cc:3009:Lt$189 ),
    .Y(\$auto$rtlil.cc:3092:Mux$191 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$188 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$191 [1]),
    .Y(\$43 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A({ 1'h0, select_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$192 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd39)
  ) \$47  (
    .A(mgr_ports_rsp_i),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$193 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$48  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$193 ),
    .S(\$auto$rtlil.cc:3009:Lt$192 ),
    .Y(\$auto$rtlil.cc:3092:Mux$194 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A({ 1'h0, select_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$195 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd39)
  ) \$50  (
    .A(mgr_ports_rsp_i),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$196 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$51  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$196 ),
    .S(\$auto$rtlil.cc:3009:Lt$195 ),
    .Y(\$auto$rtlil.cc:3092:Mux$197 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A({ 1'h0, select_q }),
    .B(3'h2),
    .Y(\$auto$rtlil.cc:3009:Lt$198 )
  );
  \$bmux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd39)
  ) \$53  (
    .A(mgr_ports_rsp_i),
    .S(select_q),
    .Y(\$auto$rtlil.cc:3113:Bmux$199 )
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$54  (
    .A(39'hxxxxxxxxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$199 ),
    .S(\$auto$rtlil.cc:3009:Lt$198 ),
    .Y(\$auto$rtlil.cc:3092:Mux$200 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$201 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd148),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd148),
    .Y_WIDTH(32'd148)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16699  (
    .A({ 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0], 73'hxxxxxxxxxxxxxxxxxxx, sbr_port_req_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$174 ),
    .Y(\$auto$rtlil.cc:3004:And$16700 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$select_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(select_d),
    .Q(select_q)
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14311  (
    .A(select_q),
    .B(sbr_port_select_i),
    .S(\$procmux$14312_CMP ),
    .Y(\$procmux$14311_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.91-66.8|rtl/obi/obi_demux.sv:63.5-66.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14314  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14315_CMP ),
    .Y(\$procmux$14314_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$14317  (
    .A(148'h0000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$182 ),
    .S(\$procmux$14318_CMP ),
    .Y(\$procmux$14317_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$14319  (
    .A(\$procmux$14317_Y ),
    .B(148'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx),
    .S(overflow),
    .Y(\$procmux$14319_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14321  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:3092:Mux$185 [1]),
    .S(\$procmux$14322_CMP ),
    .Y(\$procmux$14321_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14323  (
    .A(\$procmux$14321_Y ),
    .B(1'hx),
    .S(overflow),
    .Y(\$procmux$14323_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$14326  (
    .A(\$mgr_ports_req_o$33 ),
    .B(148'h0000000000000000000000000000000000000),
    .S(overflow),
    .Y(\$procmux$14326_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14329  (
    .A(\$sbr_port_gnt$32 ),
    .B(1'h0),
    .S(overflow),
    .Y(\$procmux$14329_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign cnt_up = \$cnt_up$44 ;
  assign sbr_port_gnt = \$sbr_port_gnt$34 ;
  assign select_d = \$select_d$45 ;
  assign mgr_ports_req_o = \$mgr_ports_req_o$35 ;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign sbr_port_rsp_o[38:2] = \$auto$rtlil.cc:3092:Mux$194 [38:2];
  assign sbr_port_rsp_o[0] = \$auto$rtlil.cc:3092:Mux$197 [0];
  assign sbr_port_rready = 1'h1;
  assign cnt_down = \$56 ;
  assign \$procmux$14312_CMP  = \$43 ;
  assign \$select_d$45  = \$procmux$14311_Y ;
  assign \$procmux$14315_CMP  = \$43 ;
  assign \$cnt_up$44  = \$procmux$14314_Y ;
  assign \$procmux$14318_CMP  = \$14 ;
  assign \$procmux$14320_CMP  = \$2 ;
  assign \$mgr_ports_req_o$33  = \$procmux$14319_Y ;
  assign \$procmux$14322_CMP  = \$14 ;
  assign \$procmux$14324_CMP  = \$2 ;
  assign \$sbr_port_gnt$32  = \$procmux$14323_Y ;
  assign \$procmux$14327_CMP  = \$2 ;
  assign \$mgr_ports_req_o$35  = \$procmux$14326_Y ;
  assign \$procmux$14330_CMP  = \$2 ;
  assign \$sbr_port_gnt$34  = \$procmux$14329_Y ;
  assign \$10  = in_flight;
  assign \$56  = \$auto$rtlil.cc:3092:Mux$200 [0];
  assign \$auto$rtlil.cc:3093:Bwmux$175  = \$auto$rtlil.cc:3004:And$16700 ;
  assign \$auto$rtlil.cc:2965:LogicNot$202  = rst_ni;
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(\$2 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(\$4 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign obi_rsp_o = { 32'hbadcab1e, rid, 2'h2, \$2 , \$4  };
  assign fifo_pop = obi_rsp_o[0];
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(\$2 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(\$4 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign obi_rsp_o = { 32'hbadcab1e, rid, 2'h2, \$2 , \$4  };
  assign fifo_pop = obi_rsp_o[0];
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(\$2 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(\$4 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign obi_rsp_o = { 32'hbadcab1e, rid, 2'h2, \$2 , \$4  };
  assign fifo_pop = obi_rsp_o[0];
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [139:0] \$auto$rtlil.cc:3004:And$16688 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16690 ;
  wire \$auto$rtlil.cc:3009:Lt$373 ;
  wire \$auto$rtlil.cc:3009:Lt$380 ;
  wire \$auto$rtlil.cc:3009:Lt$387 ;
  wire \$auto$rtlil.cc:3009:Lt$394 ;
  wire \$auto$rtlil.cc:3009:Lt$401 ;
  wire \$auto$rtlil.cc:3015:Ge$372 ;
  wire \$auto$rtlil.cc:3015:Ge$379 ;
  wire \$auto$rtlil.cc:3015:Ge$386 ;
  wire \$auto$rtlil.cc:3015:Ge$393 ;
  wire \$auto$rtlil.cc:3015:Ge$400 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$374 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$381 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$388 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$395 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$402 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$375 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$382 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$389 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$396 ;
  wire \$auto$rtlil.cc:3092:Mux$403 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$378 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$385 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$392 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$399 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$406 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$376 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$377 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$383 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$384 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$390 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$391 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$397 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$398 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$404 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$405 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:102.37" */
  wire rsp_rid;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$372 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$373 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$auto$rtlil.cc:3015:Ge$372 ),
    .B(\$auto$rtlil.cc:3009:Lt$373 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$374 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$15  (
    .A(35'h000000000),
    .B(35'h7fffffff8),
    .S(\$auto$rtlil.cc:3024:LogicAnd$374 ),
    .Y(\$auto$rtlil.cc:3092:Mux$375 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$16  (
    .A(\$auto$rtlil.cc:3092:Mux$375 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$376 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$17  (
    .A(\$auto$rtlil.cc:3092:Mux$375 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$377 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$379 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$380 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3015:Ge$379 ),
    .B(\$auto$rtlil.cc:3009:Lt$380 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$381 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$22  (
    .A(35'h000000000),
    .B(35'h000000004),
    .S(\$auto$rtlil.cc:3024:LogicAnd$381 ),
    .Y(\$auto$rtlil.cc:3092:Mux$382 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$382 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$383 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$24  (
    .A(\$auto$rtlil.cc:3092:Mux$382 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$384 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A(\$auto$rtlil.cc:3093:Bwmux$378 ),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$384 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$385 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$386 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$387 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3015:Ge$386 ),
    .B(\$auto$rtlil.cc:3009:Lt$387 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$388 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$29  (
    .A(35'h000000000),
    .B(35'h000000002),
    .S(\$auto$rtlil.cc:3024:LogicAnd$388 ),
    .Y(\$auto$rtlil.cc:3092:Mux$389 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$30  (
    .A(\$auto$rtlil.cc:3092:Mux$389 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$390 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$31  (
    .A(\$auto$rtlil.cc:3092:Mux$389 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$391 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$385 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$391 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$392 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$393 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$394 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$393 ),
    .B(\$auto$rtlil.cc:3009:Lt$394 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$395 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$36  (
    .A(35'h000000000),
    .B(35'h000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$395 ),
    .Y(\$auto$rtlil.cc:3092:Mux$396 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$396 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$397 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$396 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$398 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$392 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S(\$auto$rtlil.cc:3114:Demux$398 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$399 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(fifo_full),
    .Y(\$5 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$400 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$401 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3015:Ge$400 ),
    .B(\$auto$rtlil.cc:3009:Lt$401 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$402 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$402 ),
    .Y(\$auto$rtlil.cc:3092:Mux$403 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:3092:Mux$403 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$404 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$403 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$405 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd140),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd140),
    .Y_WIDTH(32'd140)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16687  (
    .A({ mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx }),
    .B(\$auto$rtlil.cc:3114:Demux$377 ),
    .Y(\$auto$rtlil.cc:3004:And$16688 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16689  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$405 ),
    .Y(\$auto$rtlil.cc:3004:And$16690 )
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i(sbr_ports_a),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i(sbr_ports_req),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign sbr_ports_req[0] = sbr_ports_req_i[0];
  assign sbr_ports_a[70:0] = sbr_ports_req_i[71:1];
  assign sbr_ports_rsp_o[1] = sbr_ports_gnt[0];
  assign sbr_ports_req[1] = sbr_ports_req_i[72];
  assign sbr_ports_a[141:71] = sbr_ports_req_i[143:73];
  assign sbr_ports_rsp_o[38] = sbr_ports_gnt[1];
  assign sbr_ports_req[2] = sbr_ports_req_i[144];
  assign sbr_ports_a[212:142] = sbr_ports_req_i[215:145];
  assign sbr_ports_rsp_o[75] = sbr_ports_gnt[2];
  assign sbr_ports_req[3] = sbr_ports_req_i[216];
  assign sbr_ports_a[283:213] = sbr_ports_req_i[287:217];
  assign sbr_ports_rsp_o[112] = sbr_ports_gnt[3];
  assign mgr_port_req_o[0] = \$7 ;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_rsp_rvalid = \$auto$rtlil.cc:3093:Bwmux$406 ;
  assign sbr_rsp_r = \$auto$rtlil.cc:3093:Bwmux$399 ;
  assign sbr_ports_rsp_o[36:2] = sbr_rsp_r[34:0];
  assign sbr_ports_rsp_o[0] = sbr_rsp_rvalid[0];
  assign sbr_ports_rsp_o[73:39] = sbr_rsp_r[69:35];
  assign sbr_ports_rsp_o[37] = sbr_rsp_rvalid[1];
  assign sbr_ports_rsp_o[110:76] = sbr_rsp_r[104:70];
  assign sbr_ports_rsp_o[74] = sbr_rsp_rvalid[2];
  assign sbr_ports_rsp_o[147:113] = sbr_rsp_r[139:105];
  assign sbr_ports_rsp_o[111] = sbr_rsp_rvalid[3];
  assign fifo_pop = mgr_port_rsp_i[0];
  assign \$auto$rtlil.cc:3093:Bwmux$378  = \$auto$rtlil.cc:3004:And$16688 ;
  assign \$auto$rtlil.cc:3093:Bwmux$406  = \$auto$rtlil.cc:3004:And$16690 ;
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [139:0] \$auto$rtlil.cc:3004:And$16684 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16686 ;
  wire \$auto$rtlil.cc:3009:Lt$408 ;
  wire \$auto$rtlil.cc:3009:Lt$415 ;
  wire \$auto$rtlil.cc:3009:Lt$422 ;
  wire \$auto$rtlil.cc:3009:Lt$429 ;
  wire \$auto$rtlil.cc:3009:Lt$436 ;
  wire \$auto$rtlil.cc:3015:Ge$407 ;
  wire \$auto$rtlil.cc:3015:Ge$414 ;
  wire \$auto$rtlil.cc:3015:Ge$421 ;
  wire \$auto$rtlil.cc:3015:Ge$428 ;
  wire \$auto$rtlil.cc:3015:Ge$435 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$409 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$416 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$423 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$430 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$437 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$410 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$417 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$424 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$431 ;
  wire \$auto$rtlil.cc:3092:Mux$438 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$413 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$420 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$427 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$434 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$441 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$411 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$412 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$418 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$419 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$425 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$426 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$432 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$433 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$439 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$440 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:102.37" */
  wire rsp_rid;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$407 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$408 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$auto$rtlil.cc:3015:Ge$407 ),
    .B(\$auto$rtlil.cc:3009:Lt$408 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$409 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$15  (
    .A(35'h000000000),
    .B(35'h7fffffff8),
    .S(\$auto$rtlil.cc:3024:LogicAnd$409 ),
    .Y(\$auto$rtlil.cc:3092:Mux$410 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$16  (
    .A(\$auto$rtlil.cc:3092:Mux$410 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$411 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$17  (
    .A(\$auto$rtlil.cc:3092:Mux$410 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$412 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$414 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$415 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3015:Ge$414 ),
    .B(\$auto$rtlil.cc:3009:Lt$415 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$416 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$22  (
    .A(35'h000000000),
    .B(35'h000000004),
    .S(\$auto$rtlil.cc:3024:LogicAnd$416 ),
    .Y(\$auto$rtlil.cc:3092:Mux$417 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$417 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$418 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$24  (
    .A(\$auto$rtlil.cc:3092:Mux$417 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$419 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A(\$auto$rtlil.cc:3093:Bwmux$413 ),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$419 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$420 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$421 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$422 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3015:Ge$421 ),
    .B(\$auto$rtlil.cc:3009:Lt$422 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$423 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$29  (
    .A(35'h000000000),
    .B(35'h000000002),
    .S(\$auto$rtlil.cc:3024:LogicAnd$423 ),
    .Y(\$auto$rtlil.cc:3092:Mux$424 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$30  (
    .A(\$auto$rtlil.cc:3092:Mux$424 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$425 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$31  (
    .A(\$auto$rtlil.cc:3092:Mux$424 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$426 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$420 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$426 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$427 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$428 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$429 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$428 ),
    .B(\$auto$rtlil.cc:3009:Lt$429 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$430 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$36  (
    .A(35'h000000000),
    .B(35'h000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$430 ),
    .Y(\$auto$rtlil.cc:3092:Mux$431 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$431 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$432 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$431 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$433 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$427 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S(\$auto$rtlil.cc:3114:Demux$433 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$434 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(fifo_full),
    .Y(\$5 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$435 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$436 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3015:Ge$435 ),
    .B(\$auto$rtlil.cc:3009:Lt$436 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$437 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$437 ),
    .Y(\$auto$rtlil.cc:3092:Mux$438 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:3092:Mux$438 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$439 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$438 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$440 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd140),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd140),
    .Y_WIDTH(32'd140)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16683  (
    .A({ mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx }),
    .B(\$auto$rtlil.cc:3114:Demux$412 ),
    .Y(\$auto$rtlil.cc:3004:And$16684 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16685  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$440 ),
    .Y(\$auto$rtlil.cc:3004:And$16686 )
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i(sbr_ports_a),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i(sbr_ports_req),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign sbr_ports_req[0] = sbr_ports_req_i[0];
  assign sbr_ports_a[70:0] = sbr_ports_req_i[71:1];
  assign sbr_ports_rsp_o[1] = sbr_ports_gnt[0];
  assign sbr_ports_req[1] = sbr_ports_req_i[72];
  assign sbr_ports_a[141:71] = sbr_ports_req_i[143:73];
  assign sbr_ports_rsp_o[38] = sbr_ports_gnt[1];
  assign sbr_ports_req[2] = sbr_ports_req_i[144];
  assign sbr_ports_a[212:142] = sbr_ports_req_i[215:145];
  assign sbr_ports_rsp_o[75] = sbr_ports_gnt[2];
  assign sbr_ports_req[3] = sbr_ports_req_i[216];
  assign sbr_ports_a[283:213] = sbr_ports_req_i[287:217];
  assign sbr_ports_rsp_o[112] = sbr_ports_gnt[3];
  assign mgr_port_req_o[0] = \$7 ;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_rsp_rvalid = \$auto$rtlil.cc:3093:Bwmux$441 ;
  assign sbr_rsp_r = \$auto$rtlil.cc:3093:Bwmux$434 ;
  assign sbr_ports_rsp_o[36:2] = sbr_rsp_r[34:0];
  assign sbr_ports_rsp_o[0] = sbr_rsp_rvalid[0];
  assign sbr_ports_rsp_o[73:39] = sbr_rsp_r[69:35];
  assign sbr_ports_rsp_o[37] = sbr_rsp_rvalid[1];
  assign sbr_ports_rsp_o[110:76] = sbr_rsp_r[104:70];
  assign sbr_ports_rsp_o[74] = sbr_rsp_rvalid[2];
  assign sbr_ports_rsp_o[147:113] = sbr_rsp_r[139:105];
  assign sbr_ports_rsp_o[111] = sbr_rsp_rvalid[3];
  assign fifo_pop = mgr_port_rsp_i[0];
  assign \$auto$rtlil.cc:3093:Bwmux$413  = \$auto$rtlil.cc:3004:And$16684 ;
  assign \$auto$rtlil.cc:3093:Bwmux$441  = \$auto$rtlil.cc:3004:And$16686 ;
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [139:0] \$auto$rtlil.cc:3004:And$16680 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16682 ;
  wire \$auto$rtlil.cc:3009:Lt$443 ;
  wire \$auto$rtlil.cc:3009:Lt$450 ;
  wire \$auto$rtlil.cc:3009:Lt$457 ;
  wire \$auto$rtlil.cc:3009:Lt$464 ;
  wire \$auto$rtlil.cc:3009:Lt$471 ;
  wire \$auto$rtlil.cc:3015:Ge$442 ;
  wire \$auto$rtlil.cc:3015:Ge$449 ;
  wire \$auto$rtlil.cc:3015:Ge$456 ;
  wire \$auto$rtlil.cc:3015:Ge$463 ;
  wire \$auto$rtlil.cc:3015:Ge$470 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$444 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$451 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$458 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$465 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$472 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$445 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$452 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$459 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$466 ;
  wire \$auto$rtlil.cc:3092:Mux$473 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$448 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$455 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$462 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$469 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$476 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$446 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$447 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$453 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$454 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$460 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$461 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$467 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$468 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$474 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$475 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:102.37" */
  wire rsp_rid;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$442 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$443 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$auto$rtlil.cc:3015:Ge$442 ),
    .B(\$auto$rtlil.cc:3009:Lt$443 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$444 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$15  (
    .A(35'h000000000),
    .B(35'h7fffffff8),
    .S(\$auto$rtlil.cc:3024:LogicAnd$444 ),
    .Y(\$auto$rtlil.cc:3092:Mux$445 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$16  (
    .A(\$auto$rtlil.cc:3092:Mux$445 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$446 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$17  (
    .A(\$auto$rtlil.cc:3092:Mux$445 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$447 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$449 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$450 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3015:Ge$449 ),
    .B(\$auto$rtlil.cc:3009:Lt$450 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$451 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$22  (
    .A(35'h000000000),
    .B(35'h000000004),
    .S(\$auto$rtlil.cc:3024:LogicAnd$451 ),
    .Y(\$auto$rtlil.cc:3092:Mux$452 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$452 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$453 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$24  (
    .A(\$auto$rtlil.cc:3092:Mux$452 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$454 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A(\$auto$rtlil.cc:3093:Bwmux$448 ),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$454 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$455 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$456 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$457 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3015:Ge$456 ),
    .B(\$auto$rtlil.cc:3009:Lt$457 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$458 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$29  (
    .A(35'h000000000),
    .B(35'h000000002),
    .S(\$auto$rtlil.cc:3024:LogicAnd$458 ),
    .Y(\$auto$rtlil.cc:3092:Mux$459 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$30  (
    .A(\$auto$rtlil.cc:3092:Mux$459 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$460 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$31  (
    .A(\$auto$rtlil.cc:3092:Mux$459 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$461 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$455 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$461 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$462 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$463 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$464 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$463 ),
    .B(\$auto$rtlil.cc:3009:Lt$464 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$465 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$36  (
    .A(35'h000000000),
    .B(35'h000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$465 ),
    .Y(\$auto$rtlil.cc:3092:Mux$466 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$466 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$467 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$466 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$468 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$462 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S(\$auto$rtlil.cc:3114:Demux$468 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$469 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(fifo_full),
    .Y(\$5 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$470 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$471 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3015:Ge$470 ),
    .B(\$auto$rtlil.cc:3009:Lt$471 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$472 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$472 ),
    .Y(\$auto$rtlil.cc:3092:Mux$473 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:3092:Mux$473 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$474 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$473 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$475 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd140),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd140),
    .Y_WIDTH(32'd140)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16679  (
    .A({ mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx }),
    .B(\$auto$rtlil.cc:3114:Demux$447 ),
    .Y(\$auto$rtlil.cc:3004:And$16680 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16681  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$475 ),
    .Y(\$auto$rtlil.cc:3004:And$16682 )
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i(sbr_ports_a),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i(sbr_ports_req),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign sbr_ports_req[0] = sbr_ports_req_i[0];
  assign sbr_ports_a[70:0] = sbr_ports_req_i[71:1];
  assign sbr_ports_rsp_o[1] = sbr_ports_gnt[0];
  assign sbr_ports_req[1] = sbr_ports_req_i[72];
  assign sbr_ports_a[141:71] = sbr_ports_req_i[143:73];
  assign sbr_ports_rsp_o[38] = sbr_ports_gnt[1];
  assign sbr_ports_req[2] = sbr_ports_req_i[144];
  assign sbr_ports_a[212:142] = sbr_ports_req_i[215:145];
  assign sbr_ports_rsp_o[75] = sbr_ports_gnt[2];
  assign sbr_ports_req[3] = sbr_ports_req_i[216];
  assign sbr_ports_a[283:213] = sbr_ports_req_i[287:217];
  assign sbr_ports_rsp_o[112] = sbr_ports_gnt[3];
  assign mgr_port_req_o[0] = \$7 ;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_rsp_rvalid = \$auto$rtlil.cc:3093:Bwmux$476 ;
  assign sbr_rsp_r = \$auto$rtlil.cc:3093:Bwmux$469 ;
  assign sbr_ports_rsp_o[36:2] = sbr_rsp_r[34:0];
  assign sbr_ports_rsp_o[0] = sbr_rsp_rvalid[0];
  assign sbr_ports_rsp_o[73:39] = sbr_rsp_r[69:35];
  assign sbr_ports_rsp_o[37] = sbr_rsp_rvalid[1];
  assign sbr_ports_rsp_o[110:76] = sbr_rsp_r[104:70];
  assign sbr_ports_rsp_o[74] = sbr_rsp_rvalid[2];
  assign sbr_ports_rsp_o[147:113] = sbr_rsp_r[139:105];
  assign sbr_ports_rsp_o[111] = sbr_rsp_rvalid[3];
  assign fifo_pop = mgr_port_rsp_i[0];
  assign \$auto$rtlil.cc:3093:Bwmux$448  = \$auto$rtlil.cc:3004:And$16680 ;
  assign \$auto$rtlil.cc:3093:Bwmux$476  = \$auto$rtlil.cc:3004:And$16682 ;
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [139:0] \$auto$rtlil.cc:3004:And$16676 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16678 ;
  wire \$auto$rtlil.cc:3009:Lt$478 ;
  wire \$auto$rtlil.cc:3009:Lt$485 ;
  wire \$auto$rtlil.cc:3009:Lt$492 ;
  wire \$auto$rtlil.cc:3009:Lt$499 ;
  wire \$auto$rtlil.cc:3009:Lt$506 ;
  wire \$auto$rtlil.cc:3015:Ge$477 ;
  wire \$auto$rtlil.cc:3015:Ge$484 ;
  wire \$auto$rtlil.cc:3015:Ge$491 ;
  wire \$auto$rtlil.cc:3015:Ge$498 ;
  wire \$auto$rtlil.cc:3015:Ge$505 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$479 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$486 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$493 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$500 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$507 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$480 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$487 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$494 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$501 ;
  wire \$auto$rtlil.cc:3092:Mux$508 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$483 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$490 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$497 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$504 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$511 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$481 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$482 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$488 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$489 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$495 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$496 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$502 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$503 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$509 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$510 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:102.37" */
  wire rsp_rid;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$477 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$478 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$auto$rtlil.cc:3015:Ge$477 ),
    .B(\$auto$rtlil.cc:3009:Lt$478 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$479 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$15  (
    .A(35'h000000000),
    .B(35'h7fffffff8),
    .S(\$auto$rtlil.cc:3024:LogicAnd$479 ),
    .Y(\$auto$rtlil.cc:3092:Mux$480 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$16  (
    .A(\$auto$rtlil.cc:3092:Mux$480 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$481 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$17  (
    .A(\$auto$rtlil.cc:3092:Mux$480 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$482 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$484 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$485 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3015:Ge$484 ),
    .B(\$auto$rtlil.cc:3009:Lt$485 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$486 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$22  (
    .A(35'h000000000),
    .B(35'h000000004),
    .S(\$auto$rtlil.cc:3024:LogicAnd$486 ),
    .Y(\$auto$rtlil.cc:3092:Mux$487 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$487 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$488 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$24  (
    .A(\$auto$rtlil.cc:3092:Mux$487 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$489 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A(\$auto$rtlil.cc:3093:Bwmux$483 ),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$489 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$490 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$491 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$492 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3015:Ge$491 ),
    .B(\$auto$rtlil.cc:3009:Lt$492 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$493 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$29  (
    .A(35'h000000000),
    .B(35'h000000002),
    .S(\$auto$rtlil.cc:3024:LogicAnd$493 ),
    .Y(\$auto$rtlil.cc:3092:Mux$494 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$30  (
    .A(\$auto$rtlil.cc:3092:Mux$494 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$495 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$31  (
    .A(\$auto$rtlil.cc:3092:Mux$494 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$496 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$490 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$496 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$497 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$498 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$499 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$498 ),
    .B(\$auto$rtlil.cc:3009:Lt$499 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$500 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$36  (
    .A(35'h000000000),
    .B(35'h000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$500 ),
    .Y(\$auto$rtlil.cc:3092:Mux$501 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$501 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$502 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$501 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$503 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$497 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S(\$auto$rtlil.cc:3114:Demux$503 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$504 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(fifo_full),
    .Y(\$5 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$505 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$506 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3015:Ge$505 ),
    .B(\$auto$rtlil.cc:3009:Lt$506 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$507 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$507 ),
    .Y(\$auto$rtlil.cc:3092:Mux$508 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:3092:Mux$508 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$509 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$508 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$510 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd140),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd140),
    .Y_WIDTH(32'd140)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16675  (
    .A({ mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx }),
    .B(\$auto$rtlil.cc:3114:Demux$482 ),
    .Y(\$auto$rtlil.cc:3004:And$16676 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16677  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$510 ),
    .Y(\$auto$rtlil.cc:3004:And$16678 )
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i(sbr_ports_a),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i(sbr_ports_req),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign sbr_ports_req[0] = sbr_ports_req_i[0];
  assign sbr_ports_a[70:0] = sbr_ports_req_i[71:1];
  assign sbr_ports_rsp_o[1] = sbr_ports_gnt[0];
  assign sbr_ports_req[1] = sbr_ports_req_i[72];
  assign sbr_ports_a[141:71] = sbr_ports_req_i[143:73];
  assign sbr_ports_rsp_o[38] = sbr_ports_gnt[1];
  assign sbr_ports_req[2] = sbr_ports_req_i[144];
  assign sbr_ports_a[212:142] = sbr_ports_req_i[215:145];
  assign sbr_ports_rsp_o[75] = sbr_ports_gnt[2];
  assign sbr_ports_req[3] = sbr_ports_req_i[216];
  assign sbr_ports_a[283:213] = sbr_ports_req_i[287:217];
  assign sbr_ports_rsp_o[112] = sbr_ports_gnt[3];
  assign mgr_port_req_o[0] = \$7 ;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_rsp_rvalid = \$auto$rtlil.cc:3093:Bwmux$511 ;
  assign sbr_rsp_r = \$auto$rtlil.cc:3093:Bwmux$504 ;
  assign sbr_ports_rsp_o[36:2] = sbr_rsp_r[34:0];
  assign sbr_ports_rsp_o[0] = sbr_rsp_rvalid[0];
  assign sbr_ports_rsp_o[73:39] = sbr_rsp_r[69:35];
  assign sbr_ports_rsp_o[37] = sbr_rsp_rvalid[1];
  assign sbr_ports_rsp_o[110:76] = sbr_rsp_r[104:70];
  assign sbr_ports_rsp_o[74] = sbr_rsp_rvalid[2];
  assign sbr_ports_rsp_o[147:113] = sbr_rsp_r[139:105];
  assign sbr_ports_rsp_o[111] = sbr_rsp_rvalid[3];
  assign fifo_pop = mgr_port_rsp_i[0];
  assign \$auto$rtlil.cc:3093:Bwmux$483  = \$auto$rtlil.cc:3004:And$16676 ;
  assign \$auto$rtlil.cc:3093:Bwmux$511  = \$auto$rtlil.cc:3004:And$16678 ;
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire [139:0] \$auto$rtlil.cc:3004:And$16672 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16674 ;
  wire \$auto$rtlil.cc:3009:Lt$513 ;
  wire \$auto$rtlil.cc:3009:Lt$520 ;
  wire \$auto$rtlil.cc:3009:Lt$527 ;
  wire \$auto$rtlil.cc:3009:Lt$534 ;
  wire \$auto$rtlil.cc:3009:Lt$541 ;
  wire \$auto$rtlil.cc:3015:Ge$512 ;
  wire \$auto$rtlil.cc:3015:Ge$519 ;
  wire \$auto$rtlil.cc:3015:Ge$526 ;
  wire \$auto$rtlil.cc:3015:Ge$533 ;
  wire \$auto$rtlil.cc:3015:Ge$540 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$514 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$521 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$528 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$535 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$542 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$515 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$522 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$529 ;
  wire [34:0] \$auto$rtlil.cc:3092:Mux$536 ;
  wire \$auto$rtlil.cc:3092:Mux$543 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$518 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$525 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$532 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$539 ;
  wire [3:0] \$auto$rtlil.cc:3093:Bwmux$546 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$516 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$517 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$523 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$524 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$530 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$531 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$537 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$538 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$544 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$545 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:102.37" */
  wire rsp_rid;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$512 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$513 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$auto$rtlil.cc:3015:Ge$512 ),
    .B(\$auto$rtlil.cc:3009:Lt$513 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$514 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$15  (
    .A(35'h000000000),
    .B(35'h7fffffff8),
    .S(\$auto$rtlil.cc:3024:LogicAnd$514 ),
    .Y(\$auto$rtlil.cc:3092:Mux$515 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$16  (
    .A(\$auto$rtlil.cc:3092:Mux$515 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$516 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$17  (
    .A(\$auto$rtlil.cc:3092:Mux$515 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$517 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$519 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$520 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3015:Ge$519 ),
    .B(\$auto$rtlil.cc:3009:Lt$520 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$521 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$22  (
    .A(35'h000000000),
    .B(35'h000000004),
    .S(\$auto$rtlil.cc:3024:LogicAnd$521 ),
    .Y(\$auto$rtlil.cc:3092:Mux$522 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$522 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$523 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$24  (
    .A(\$auto$rtlil.cc:3092:Mux$522 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$524 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A(\$auto$rtlil.cc:3093:Bwmux$518 ),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$524 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$525 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$526 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$527 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3015:Ge$526 ),
    .B(\$auto$rtlil.cc:3009:Lt$527 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$528 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$29  (
    .A(35'h000000000),
    .B(35'h000000002),
    .S(\$auto$rtlil.cc:3024:LogicAnd$528 ),
    .Y(\$auto$rtlil.cc:3092:Mux$529 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$30  (
    .A(\$auto$rtlil.cc:3092:Mux$529 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$530 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$31  (
    .A(\$auto$rtlil.cc:3092:Mux$529 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$531 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$525 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S(\$auto$rtlil.cc:3114:Demux$531 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$532 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$533 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$534 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$533 ),
    .B(\$auto$rtlil.cc:3009:Lt$534 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$535 )
  );
  \$mux  #(
    .WIDTH(32'd35)
  ) \$36  (
    .A(35'h000000000),
    .B(35'h000000001),
    .S(\$auto$rtlil.cc:3024:LogicAnd$535 ),
    .Y(\$auto$rtlil.cc:3092:Mux$536 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$536 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$537 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd35)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$536 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$538 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$532 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S(\$auto$rtlil.cc:3114:Demux$538 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$539 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(fifo_full),
    .Y(\$5 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A({ 1'h0, response_id }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$540 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A({ 1'h0, response_id }),
    .B(4'h4),
    .Y(\$auto$rtlil.cc:3009:Lt$541 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3015:Ge$540 ),
    .B(\$auto$rtlil.cc:3009:Lt$541 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$542 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$542 ),
    .Y(\$auto$rtlil.cc:3092:Mux$543 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:3092:Mux$543 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$544 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3092:Mux$543 ),
    .S(response_id),
    .Y(\$auto$rtlil.cc:3114:Demux$545 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd140),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd140),
    .Y_WIDTH(32'd140)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16671  (
    .A({ mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx, mgr_port_rsp_i[38:7], 3'hx }),
    .B(\$auto$rtlil.cc:3114:Demux$517 ),
    .Y(\$auto$rtlil.cc:3004:And$16672 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16673  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B(\$auto$rtlil.cc:3114:Demux$545 ),
    .Y(\$auto$rtlil.cc:3004:And$16674 )
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i(sbr_ports_a),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i(sbr_ports_req),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign sbr_ports_req[0] = sbr_ports_req_i[0];
  assign sbr_ports_a[70:0] = sbr_ports_req_i[71:1];
  assign sbr_ports_rsp_o[1] = sbr_ports_gnt[0];
  assign sbr_ports_req[1] = sbr_ports_req_i[72];
  assign sbr_ports_a[141:71] = sbr_ports_req_i[143:73];
  assign sbr_ports_rsp_o[38] = sbr_ports_gnt[1];
  assign sbr_ports_req[2] = sbr_ports_req_i[144];
  assign sbr_ports_a[212:142] = sbr_ports_req_i[215:145];
  assign sbr_ports_rsp_o[75] = sbr_ports_gnt[2];
  assign sbr_ports_req[3] = sbr_ports_req_i[216];
  assign sbr_ports_a[283:213] = sbr_ports_req_i[287:217];
  assign sbr_ports_rsp_o[112] = sbr_ports_gnt[3];
  assign mgr_port_req_o[0] = \$7 ;
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_rsp_rvalid = \$auto$rtlil.cc:3093:Bwmux$546 ;
  assign sbr_rsp_r = \$auto$rtlil.cc:3093:Bwmux$539 ;
  assign sbr_ports_rsp_o[36:2] = sbr_rsp_r[34:0];
  assign sbr_ports_rsp_o[0] = sbr_rsp_rvalid[0];
  assign sbr_ports_rsp_o[73:39] = sbr_rsp_r[69:35];
  assign sbr_ports_rsp_o[37] = sbr_rsp_rvalid[1];
  assign sbr_ports_rsp_o[110:76] = sbr_rsp_r[104:70];
  assign sbr_ports_rsp_o[74] = sbr_rsp_rvalid[2];
  assign sbr_ports_rsp_o[147:113] = sbr_rsp_r[139:105];
  assign sbr_ports_rsp_o[111] = sbr_rsp_rvalid[3];
  assign fifo_pop = mgr_port_rsp_i[0];
  assign \$auto$rtlil.cc:3093:Bwmux$518  = \$auto$rtlil.cc:3004:And$16672 ;
  assign \$auto$rtlil.cc:3093:Bwmux$546  = \$auto$rtlil.cc:3004:And$16674 ;
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  wire \$2 ;
  wire \$auto$rtlil.cc:2965:LogicNot$15 ;
  wire \$auto$rtlil.cc:2965:LogicNot$16 ;
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$15 )
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(id_d),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign req_o = obi_req_i[0];
  assign we_o = obi_req_i[41];
  assign addr_o = obi_req_i[73:42];
  assign wdata_o = obi_req_i[36:5];
  assign be_o = obi_req_i[40:37];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign rvalid_d = \$2 ;
  assign id_d = obi_req_i[4:2];
  assign \$auto$rtlil.cc:2965:LogicNot$16  = rst_ni;
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  wire \$2 ;
  wire \$auto$rtlil.cc:2965:LogicNot$19 ;
  wire \$auto$rtlil.cc:2965:LogicNot$20 ;
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$19 )
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(id_d),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign req_o = obi_req_i[0];
  assign we_o = obi_req_i[41];
  assign addr_o = obi_req_i[73:42];
  assign wdata_o = obi_req_i[36:5];
  assign be_o = obi_req_i[40:37];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign rvalid_d = \$2 ;
  assign id_d = obi_req_i[4:2];
  assign \$auto$rtlil.cc:2965:LogicNot$20  = rst_ni;
endmodule

/* src = "rtl/obi/obi_xbar.sv:8.8" */
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  /* src = "rtl/obi/obi_xbar.sv:50.47" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/obi/obi_xbar.sv:40.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_xbar.sv:52.75" */
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:51.47" */
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:47.47" */
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_xbar.sv:48.47" */
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_xbar.sv:62.57" */
  wire [1439:0] mgr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:63.57" */
  wire [739:0] mgr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:41.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_xbar.sv:55.68" */
  wire [11:0] sbr_port_select;
  /* src = "rtl/obi/obi_xbar.sv:44.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_xbar.sv:45.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_xbar.sv:58.57" */
  wire [1439:0] sbr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:59.57" */
  wire [739:0] sbr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:42.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o(sbr_reqs[359:0]),
    .mgr_ports_rsp_i(sbr_rsps[184:0]),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o(sbr_reqs[719:360]),
    .mgr_ports_rsp_i(sbr_rsps[369:185]),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o(sbr_reqs[1079:720]),
    .mgr_ports_rsp_i(sbr_rsps[554:370]),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o(sbr_reqs[1439:1080]),
    .mgr_ports_rsp_i(sbr_rsps[739:555]),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
  assign mgr_reqs[71:0] = sbr_reqs[71:0];
  assign sbr_rsps[36:0] = mgr_rsps[36:0];
  assign mgr_reqs[359:288] = sbr_reqs[143:72];
  assign sbr_rsps[73:37] = mgr_rsps[184:148];
  assign mgr_reqs[647:576] = sbr_reqs[215:144];
  assign sbr_rsps[110:74] = mgr_rsps[332:296];
  assign mgr_reqs[935:864] = sbr_reqs[287:216];
  assign sbr_rsps[147:111] = mgr_rsps[480:444];
  assign mgr_reqs[1223:1152] = sbr_reqs[359:288];
  assign sbr_rsps[184:148] = mgr_rsps[628:592];
  assign mgr_reqs[143:72] = sbr_reqs[431:360];
  assign sbr_rsps[221:185] = mgr_rsps[73:37];
  assign mgr_reqs[431:360] = sbr_reqs[503:432];
  assign sbr_rsps[258:222] = mgr_rsps[221:185];
  assign mgr_reqs[719:648] = sbr_reqs[575:504];
  assign sbr_rsps[295:259] = mgr_rsps[369:333];
  assign mgr_reqs[1007:936] = sbr_reqs[647:576];
  assign sbr_rsps[332:296] = mgr_rsps[517:481];
  assign mgr_reqs[1295:1224] = sbr_reqs[719:648];
  assign sbr_rsps[369:333] = mgr_rsps[665:629];
  assign mgr_reqs[215:144] = sbr_reqs[791:720];
  assign sbr_rsps[406:370] = mgr_rsps[110:74];
  assign mgr_reqs[503:432] = sbr_reqs[863:792];
  assign sbr_rsps[443:407] = mgr_rsps[258:222];
  assign mgr_reqs[791:720] = sbr_reqs[935:864];
  assign sbr_rsps[480:444] = mgr_rsps[406:370];
  assign mgr_reqs[1079:1008] = sbr_reqs[1007:936];
  assign sbr_rsps[517:481] = mgr_rsps[554:518];
  assign mgr_reqs[1367:1296] = sbr_reqs[1079:1008];
  assign sbr_rsps[554:518] = mgr_rsps[702:666];
  assign mgr_reqs[287:216] = sbr_reqs[1151:1080];
  assign sbr_rsps[591:555] = mgr_rsps[147:111];
  assign mgr_reqs[575:504] = sbr_reqs[1223:1152];
  assign sbr_rsps[628:592] = mgr_rsps[295:259];
  assign mgr_reqs[863:792] = sbr_reqs[1295:1224];
  assign sbr_rsps[665:629] = mgr_rsps[443:407];
  assign mgr_reqs[1151:1080] = sbr_reqs[1367:1296];
  assign sbr_rsps[702:666] = mgr_rsps[591:555];
  assign mgr_reqs[1439:1368] = sbr_reqs[1439:1368];
  assign sbr_rsps[739:703] = mgr_rsps[739:703];
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$57 ;
  wire \$auto$rtlil.cc:2965:LogicNot$58 ;
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$57 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(\$7 )
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_id_d),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_opc_d),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_rdata_d),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign r_id_d = id_i;
  assign r_opc_d = reg_rsp_i[1];
  assign r_valid_d = gnt_o;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign reg_req_o[69:38] = add_i;
  assign reg_req_o[37] = \$5 ;
  assign reg_req_o[36:5] = wdata_i;
  assign reg_req_o[4:1] = be_i;
  assign reg_req_o[0] = req_i;
  assign gnt_o = \$7 ;
  assign r_rdata_o = r_rdata_q;
  assign r_opc_o = r_opc_q;
  assign r_id_o = r_id_q;
  assign r_valid_o = r_valid_q;
  assign \$auto$rtlil.cc:2965:LogicNot$58  = rst_ni;
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$61 ;
  wire \$auto$rtlil.cc:2965:LogicNot$62 ;
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$61 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(\$7 )
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_id_d),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_opc_d),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_rdata_d),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign r_id_d = id_i;
  assign r_opc_d = reg_rsp_i[1];
  assign r_valid_d = gnt_o;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign reg_req_o[69:38] = add_i;
  assign reg_req_o[37] = \$5 ;
  assign reg_req_o[36:5] = wdata_i;
  assign reg_req_o[4:1] = be_i;
  assign reg_req_o[0] = req_i;
  assign gnt_o = \$7 ;
  assign r_rdata_o = r_rdata_q;
  assign r_opc_o = r_opc_q;
  assign r_id_o = r_id_q;
  assign r_valid_o = r_valid_q;
  assign \$auto$rtlil.cc:2965:LogicNot$62  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  wire \$auto$rtlil.cc:2965:LogicNot$578 ;
  wire \$auto$rtlil.cc:2965:LogicNot$579 ;
  wire \$auto$rtlil.cc:2965:LogicNot$580 ;
  wire \$auto$rtlil.cc:2965:LogicNot$581 ;
  wire [31:0] \$procmux$13820_Y ;
  wire \$procmux$13821_CMP ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  wire [31:0] \$q$6 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$578 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$580 )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$q  (
    .AD(32'd268435456),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$q$6 ),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:58.7-58.20|rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13820  (
    .A(q),
    .B(wr_data),
    .S(\$procmux$13821_CMP ),
    .Y(\$procmux$13820_Y )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
  assign \$procmux$13821_CMP  = wr_en;
  assign \$q$6  = \$procmux$13820_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$579  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$581  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  wire \$auto$rtlil.cc:2965:LogicNot$590 ;
  wire \$auto$rtlil.cc:2965:LogicNot$591 ;
  wire \$auto$rtlil.cc:2965:LogicNot$592 ;
  wire \$auto$rtlil.cc:2965:LogicNot$593 ;
  wire \$procmux$13814_Y ;
  wire \$procmux$13815_CMP ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  wire \$q$6 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$590 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$592 )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$q$6 ),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:58.7-58.20|rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13814  (
    .A(q),
    .B(wr_data),
    .S(\$procmux$13815_CMP ),
    .Y(\$procmux$13814_Y )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
  assign \$procmux$13815_CMP  = wr_en;
  assign \$q$6  = \$procmux$13814_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$591  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$593  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  wire \$auto$rtlil.cc:2965:LogicNot$586 ;
  wire \$auto$rtlil.cc:2965:LogicNot$587 ;
  wire \$auto$rtlil.cc:2965:LogicNot$588 ;
  wire \$auto$rtlil.cc:2965:LogicNot$589 ;
  wire [31:0] \$procmux$13816_Y ;
  wire \$procmux$13817_CMP ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  wire [31:0] \$q$6 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$586 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$588 )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$q  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$q$6 ),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:58.7-58.20|rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13816  (
    .A(q),
    .B(wr_data),
    .S(\$procmux$13817_CMP ),
    .Y(\$procmux$13816_Y )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
  assign \$procmux$13817_CMP  = wr_en;
  assign \$q$6  = \$procmux$13816_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$587  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$589  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  wire \$auto$rtlil.cc:2965:LogicNot$582 ;
  wire \$auto$rtlil.cc:2965:LogicNot$583 ;
  wire \$auto$rtlil.cc:2965:LogicNot$584 ;
  wire \$auto$rtlil.cc:2965:LogicNot$585 ;
  wire \$procmux$13818_Y ;
  wire \$procmux$13819_CMP ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  wire \$q$6 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$582 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$584 )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$q$6 ),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:58.7-58.20|rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13818  (
    .A(q),
    .B(wr_data),
    .S(\$procmux$13819_CMP ),
    .Y(\$procmux$13818_Y )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
  assign \$procmux$13819_CMP  = wr_en;
  assign \$q$6  = \$procmux$13818_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$583  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$585  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  wire \$auto$rtlil.cc:2965:LogicNot$594 ;
  wire \$auto$rtlil.cc:2965:LogicNot$595 ;
  wire \$auto$rtlil.cc:2965:LogicNot$596 ;
  wire \$auto$rtlil.cc:2965:LogicNot$597 ;
  wire \$procmux$13812_Y ;
  wire \$procmux$13813_CMP ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  wire \$q$6 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$594 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$596 )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$q  (
    .AD(1'h1),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$q$6 ),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:58.7-58.20|rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:57.14-59.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13812  (
    .A(q),
    .B(wr_data),
    .S(\$procmux$13813_CMP ),
    .Y(\$procmux$13812_Y )
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
  assign \$procmux$13813_CMP  = wr_en;
  assign \$q$6  = \$procmux$13812_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$595  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$597  = rst_ni;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  wire \$1 ;
  wire \$3 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1492 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(\$1 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(\$3 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1492 )
  );
  assign wr_en = \$1 ;
  assign wr_data = \$auto$rtlil.cc:3092:Mux$1492 ;
  assign \gen_w.unused_q  = q;
  assign \$3  = we;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  wire \$1 ;
  wire \$3 ;
  wire \$auto$rtlil.cc:3092:Mux$1495 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(\$1 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(\$3 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1495 )
  );
  assign wr_en = \$1 ;
  assign wr_data = \$auto$rtlil.cc:3092:Mux$1495 ;
  assign \gen_w.unused_q  = q;
  assign \$3  = we;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  wire \$1 ;
  wire \$3 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1494 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(\$1 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(\$3 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1494 )
  );
  assign wr_en = \$1 ;
  assign wr_data = \$auto$rtlil.cc:3092:Mux$1494 ;
  assign \gen_w.unused_q  = q;
  assign \$3  = we;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  wire \$1 ;
  wire \$3 ;
  wire \$auto$rtlil.cc:3092:Mux$1493 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(\$1 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(\$3 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1493 )
  );
  assign wr_en = \$1 ;
  assign wr_data = \$auto$rtlil.cc:3092:Mux$1493 ;
  assign \gen_w.unused_q  = q;
  assign \$3  = we;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  wire \$1 ;
  wire \$3 ;
  wire \$auto$rtlil.cc:3092:Mux$1496 ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(\$1 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(\$3 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1496 )
  );
  assign wr_en = \$1 ;
  assign wr_data = \$auto$rtlil.cc:3092:Mux$1496 ;
  assign \gen_w.unused_q  = q;
  assign \$3  = we;
endmodule

/* src = "rtl/register_interface/reg_to_apb.sv:7.8" */
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  /* src = "rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  wire \$apb_req_o[37]$5 ;
  wire \$auto$rtlil.cc:2965:LogicNot$598 ;
  wire \$auto$rtlil.cc:2965:LogicNot$599 ;
  wire \$procmux$13792_Y ;
  wire \$procmux$13793_CMP ;
  wire \$procmux$13794_Y ;
  wire \$procmux$13795_CMP ;
  wire \$procmux$13797_Y ;
  wire \$procmux$13798_CMP ;
  wire \$procmux$13800_CMP ;
  wire \$procmux$13802_Y ;
  wire \$procmux$13803_CMP ;
  wire \$procmux$13804_Y ;
  wire \$procmux$13805_CMP ;
  wire \$procmux$13807_Y ;
  wire \$procmux$13808_CMP ;
  wire \$procmux$13810_Y ;
  wire \$procmux$13811_CMP ;
  /* src = "rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  wire \$reg_rsp_o[0]$4 ;
  /* src = "rtl/register_interface/reg_to_apb.sv:54.14-54.52" */
  wire \$state_d$1 ;
  /* src = "rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  wire \$state_d$2 ;
  /* src = "rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  wire \$state_d$3 ;
  /* src = "rtl/register_interface/reg_to_apb.sv:26.20" */
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:27.20" */
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:18.20" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:22.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:23.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:19.20" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.11" */
  wire state_d;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.20" */
  wire state_q;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$598 )
  );
  /* src = "rtl/register_interface/reg_to_apb.sv:66.3" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$state_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/register_interface/reg_to_apb.sv:59.31-59.47|rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13792  (
    .A(state_q),
    .B(1'h0),
    .S(\$procmux$13793_CMP ),
    .Y(\$procmux$13792_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13794  (
    .A(1'hx),
    .B(\$procmux$13792_Y ),
    .S(\$procmux$13795_CMP ),
    .Y(\$procmux$13794_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$13797  (
    .A(1'hx),
    .B({ \$state_d$1 , \$state_d$2  }),
    .S({ \$procmux$13800_CMP , \$procmux$13798_CMP  }),
    .Y(\$procmux$13797_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:54.14-54.52|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13800_CMP0  (
    .A(state_q),
    .Y(\$procmux$13800_CMP )
  );
  /* src = "rtl/register_interface/reg_to_apb.sv:54.35-54.52|rtl/register_interface/reg_to_apb.sv:54.14-54.52" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13802  (
    .A(state_q),
    .B(1'h1),
    .S(\$procmux$13803_CMP ),
    .Y(\$procmux$13802_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:54.14-54.52|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13804  (
    .A(\$procmux$13802_Y ),
    .B(1'hx),
    .S(state_q),
    .Y(\$procmux$13804_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:54.14-54.52|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13805_CMP0  (
    .A(state_q),
    .Y(\$procmux$13805_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13807  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13808_CMP ),
    .Y(\$procmux$13807_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13810  (
    .A(1'h0),
    .B(apb_rsp_i[33]),
    .S(\$procmux$13811_CMP ),
    .Y(\$procmux$13810_Y )
  );
  assign apb_req_o[73:42] = reg_req_i[69:38];
  assign apb_req_o[36] = reg_req_i[37];
  assign apb_req_o[35:4] = reg_req_i[36:5];
  assign apb_req_o[38] = reg_req_i[0];
  assign apb_req_o[3:0] = reg_req_i[4:1];
  assign reg_rsp_o[1] = apb_rsp_i[0];
  assign reg_rsp_o[33:2] = apb_rsp_i[32:1];
  assign apb_req_o[41:39] = 3'h2;
  assign state_d = \$state_d$3 ;
  assign reg_rsp_o[0] = \$reg_rsp_o[0]$4 ;
  assign apb_req_o[37] = \$apb_req_o[37]$5 ;
  assign \$procmux$13793_CMP  = apb_rsp_i[33];
  assign \$procmux$13795_CMP  = state_q;
  assign \$state_d$2  = \$procmux$13794_Y ;
  assign \$procmux$13798_CMP  = state_q;
  assign \$state_d$3  = \$procmux$13797_Y ;
  assign \$procmux$13803_CMP  = reg_req_i[0];
  assign \$state_d$1  = \$procmux$13804_Y ;
  assign \$procmux$13808_CMP  = state_q;
  assign \$apb_req_o[37]$5  = \$procmux$13807_Y ;
  assign \$procmux$13811_CMP  = state_q;
  assign \$reg_rsp_o[0]$4  = \$procmux$13810_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$599  = rst_ni;
endmodule

/* src = "rtl/apb_uart/reg_uart_wrap.sv:31.8" */
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:36.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:49.16" */
  input cts_ni;
  wire cts_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:51.16" */
  input dcd_ni;
  wire dcd_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:50.16" */
  input dsr_ni;
  wire dsr_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:48.16" */
  output dtr_no;
  wire dtr_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:44.16" */
  output intr_o;
  wire intr_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:45.16" */
  output out1_no;
  wire out1_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:46.16" */
  output out2_no;
  wire out2_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:40.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:41.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:52.16" */
  input rin_ni;
  wire rin_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:37.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:47.16" */
  output rts_no;
  wire rts_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:53.16" */
  input sin_i;
  wire sin_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:54.16" */
  output sout_o;
  wire sout_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:59.22" */
  wire [73:0] uart_apb_req;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:60.22" */
  wire [33:0] uart_apb_rsp;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:76.12" */
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:67.5" */
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$100 ;
  wire \$14 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1328 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1329 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1330 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1331 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1340 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1341 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$1327 ;
  wire \$auto$rtlil.cc:3092:Mux$1332 ;
  wire \$auto$rtlil.cc:3092:Mux$1333 ;
  wire \$auto$rtlil.cc:3092:Mux$1334 ;
  wire \$auto$rtlil.cc:3092:Mux$1335 ;
  wire \$auto$rtlil.cc:3092:Mux$1336 ;
  wire \$auto$rtlil.cc:3092:Mux$1337 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1338 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1339 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1342 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1343 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1344 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1345 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  wire [1:0] \$procmux$8124_Y ;
  wire \$procmux$8125_CMP ;
  wire [3:0] \$procmux$8127_Y ;
  wire \$procmux$8128_CMP ;
  wire \$procmux$8130_Y ;
  wire \$procmux$8131_CMP ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.40" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.lower_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:125.33" */
  wire [5:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1330 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1332 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1333 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1334 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1335 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1336 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1337 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\$auto$rtlil.cc:3092:Mux$1338 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A(\gen_arbiter.rr_q ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .S(\$33 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1339 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1340 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(\$40 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\$auto$rtlil.cc:3092:Mux$1327 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\$46 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.index_nodes [2] }),
    .B({ 1'h1, \gen_arbiter.index_nodes [4] }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1342 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1343 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$54 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1328 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1344 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$67 ),
    .B(\$69 ),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1345 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$90 ),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$gen_arbiter.rr_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .Q(\gen_arbiter.rr_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8124  (
    .A(\$auto$rtlil.cc:3092:Mux$1339 ),
    .B(2'h0),
    .S(\$procmux$8125_CMP ),
    .Y(\$procmux$8124_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8127  (
    .A(\$auto$rtlil.cc:3092:Mux$1327 ),
    .B(4'h0),
    .S(\$procmux$8128_CMP ),
    .Y(\$procmux$8127_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8130  (
    .A(\$3 ),
    .B(1'h0),
    .S(\$procmux$8131_CMP ),
    .Y(\$procmux$8130_Y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign req_o = \gen_arbiter.req_nodes [0];
  assign data_o = \gen_arbiter.data_nodes [70:0];
  assign idx_o = \gen_arbiter.index_nodes [1:0];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = \$3 ;
  assign \gen_arbiter.req_d  = \$auto$rtlil.cc:3092:Mux$1327 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$rtlil.cc:3092:Mux$1332 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$rtlil.cc:3092:Mux$1333 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \$auto$rtlil.cc:3092:Mux$1334 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \$auto$rtlil.cc:3092:Mux$1335 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$rtlil.cc:3092:Mux$1336 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$rtlil.cc:3092:Mux$1337 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \$auto$rtlil.cc:3092:Mux$1338 ;
  assign \gen_arbiter.gen_int_rr.rr_d  = \$auto$rtlil.cc:3092:Mux$1339 ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = \$40 ;
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$46 ;
  assign \gen_arbiter.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1342 ;
  assign \gen_arbiter.data_nodes [70:0] = \$auto$rtlil.cc:3092:Mux$1343 ;
  assign \gen_arbiter.gnt_nodes [1] = \$52 ;
  assign \gen_arbiter.gnt_nodes [2] = \$54 ;
  assign \gen_arbiter.req_nodes [1] = \$56 ;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$62 ;
  assign \gen_arbiter.index_nodes [3:2] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign \gen_arbiter.data_nodes [141:71] = \$auto$rtlil.cc:3092:Mux$1344 ;
  assign gnt_o[0] = \$71 ;
  assign gnt_o[1] = \$77 ;
  assign \gen_arbiter.req_nodes [2] = \$79 ;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$85 ;
  assign \gen_arbiter.index_nodes [5:4] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel  };
  assign \gen_arbiter.data_nodes [212:142] = \$auto$rtlil.cc:3092:Mux$1345 ;
  assign gnt_o[2] = \$94 ;
  assign gnt_o[3] = \$100 ;
  assign \$procmux$8125_CMP  = flush_i;
  assign \$gen_arbiter.rr_q$38  = \$procmux$8124_Y ;
  assign \$procmux$8128_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = \$procmux$8127_Y ;
  assign \$procmux$8131_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = \$procmux$8130_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1329  = rst_ni;
  assign \$65  = 1'h1;
  assign \$67  = \$52 ;
  assign \$73  = 1'h1;
  assign \$75  = \$52 ;
  assign \$88  = 1'h1;
  assign \$90  = \$54 ;
  assign \$96  = 1'h1;
  assign \$98  = \$54 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1331  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1341  = rst_ni;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$100 ;
  wire \$14 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1361 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1362 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1363 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1364 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1373 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1374 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$1360 ;
  wire \$auto$rtlil.cc:3092:Mux$1365 ;
  wire \$auto$rtlil.cc:3092:Mux$1366 ;
  wire \$auto$rtlil.cc:3092:Mux$1367 ;
  wire \$auto$rtlil.cc:3092:Mux$1368 ;
  wire \$auto$rtlil.cc:3092:Mux$1369 ;
  wire \$auto$rtlil.cc:3092:Mux$1370 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1371 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1372 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1375 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1376 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1377 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1378 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  wire [1:0] \$procmux$8069_Y ;
  wire \$procmux$8070_CMP ;
  wire [3:0] \$procmux$8072_Y ;
  wire \$procmux$8073_CMP ;
  wire \$procmux$8075_Y ;
  wire \$procmux$8076_CMP ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.40" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.lower_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:125.33" */
  wire [5:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1363 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1365 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1366 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1367 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1368 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1369 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1370 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\$auto$rtlil.cc:3092:Mux$1371 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A(\gen_arbiter.rr_q ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .S(\$33 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1372 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1373 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(\$40 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\$auto$rtlil.cc:3092:Mux$1360 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\$46 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.index_nodes [2] }),
    .B({ 1'h1, \gen_arbiter.index_nodes [4] }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1375 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1376 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$54 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1361 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1377 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$67 ),
    .B(\$69 ),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1378 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$90 ),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$gen_arbiter.rr_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .Q(\gen_arbiter.rr_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8069  (
    .A(\$auto$rtlil.cc:3092:Mux$1372 ),
    .B(2'h0),
    .S(\$procmux$8070_CMP ),
    .Y(\$procmux$8069_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8072  (
    .A(\$auto$rtlil.cc:3092:Mux$1360 ),
    .B(4'h0),
    .S(\$procmux$8073_CMP ),
    .Y(\$procmux$8072_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8075  (
    .A(\$3 ),
    .B(1'h0),
    .S(\$procmux$8076_CMP ),
    .Y(\$procmux$8075_Y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign req_o = \gen_arbiter.req_nodes [0];
  assign data_o = \gen_arbiter.data_nodes [70:0];
  assign idx_o = \gen_arbiter.index_nodes [1:0];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = \$3 ;
  assign \gen_arbiter.req_d  = \$auto$rtlil.cc:3092:Mux$1360 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$rtlil.cc:3092:Mux$1365 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$rtlil.cc:3092:Mux$1366 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \$auto$rtlil.cc:3092:Mux$1367 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \$auto$rtlil.cc:3092:Mux$1368 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$rtlil.cc:3092:Mux$1369 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$rtlil.cc:3092:Mux$1370 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \$auto$rtlil.cc:3092:Mux$1371 ;
  assign \gen_arbiter.gen_int_rr.rr_d  = \$auto$rtlil.cc:3092:Mux$1372 ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = \$40 ;
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$46 ;
  assign \gen_arbiter.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1375 ;
  assign \gen_arbiter.data_nodes [70:0] = \$auto$rtlil.cc:3092:Mux$1376 ;
  assign \gen_arbiter.gnt_nodes [1] = \$52 ;
  assign \gen_arbiter.gnt_nodes [2] = \$54 ;
  assign \gen_arbiter.req_nodes [1] = \$56 ;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$62 ;
  assign \gen_arbiter.index_nodes [3:2] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign \gen_arbiter.data_nodes [141:71] = \$auto$rtlil.cc:3092:Mux$1377 ;
  assign gnt_o[0] = \$71 ;
  assign gnt_o[1] = \$77 ;
  assign \gen_arbiter.req_nodes [2] = \$79 ;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$85 ;
  assign \gen_arbiter.index_nodes [5:4] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel  };
  assign \gen_arbiter.data_nodes [212:142] = \$auto$rtlil.cc:3092:Mux$1378 ;
  assign gnt_o[2] = \$94 ;
  assign gnt_o[3] = \$100 ;
  assign \$procmux$8070_CMP  = flush_i;
  assign \$gen_arbiter.rr_q$38  = \$procmux$8069_Y ;
  assign \$procmux$8073_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = \$procmux$8072_Y ;
  assign \$procmux$8076_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = \$procmux$8075_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1362  = rst_ni;
  assign \$65  = 1'h1;
  assign \$67  = \$52 ;
  assign \$73  = 1'h1;
  assign \$75  = \$52 ;
  assign \$88  = 1'h1;
  assign \$90  = \$54 ;
  assign \$96  = 1'h1;
  assign \$98  = \$54 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1364  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1374  = rst_ni;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$100 ;
  wire \$14 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1394 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1395 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1396 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1397 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1406 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1407 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$1393 ;
  wire \$auto$rtlil.cc:3092:Mux$1398 ;
  wire \$auto$rtlil.cc:3092:Mux$1399 ;
  wire \$auto$rtlil.cc:3092:Mux$1400 ;
  wire \$auto$rtlil.cc:3092:Mux$1401 ;
  wire \$auto$rtlil.cc:3092:Mux$1402 ;
  wire \$auto$rtlil.cc:3092:Mux$1403 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1404 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1405 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1408 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1409 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1410 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1411 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  wire [1:0] \$procmux$8014_Y ;
  wire \$procmux$8015_CMP ;
  wire [3:0] \$procmux$8017_Y ;
  wire \$procmux$8018_CMP ;
  wire \$procmux$8020_Y ;
  wire \$procmux$8021_CMP ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.40" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.lower_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:125.33" */
  wire [5:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1396 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1398 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1399 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1400 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1401 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1402 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1403 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\$auto$rtlil.cc:3092:Mux$1404 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A(\gen_arbiter.rr_q ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .S(\$33 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1405 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1406 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(\$40 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\$auto$rtlil.cc:3092:Mux$1393 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\$46 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.index_nodes [2] }),
    .B({ 1'h1, \gen_arbiter.index_nodes [4] }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1408 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1409 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$54 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1394 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1410 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$67 ),
    .B(\$69 ),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1411 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$90 ),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$gen_arbiter.rr_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .Q(\gen_arbiter.rr_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8014  (
    .A(\$auto$rtlil.cc:3092:Mux$1405 ),
    .B(2'h0),
    .S(\$procmux$8015_CMP ),
    .Y(\$procmux$8014_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8017  (
    .A(\$auto$rtlil.cc:3092:Mux$1393 ),
    .B(4'h0),
    .S(\$procmux$8018_CMP ),
    .Y(\$procmux$8017_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8020  (
    .A(\$3 ),
    .B(1'h0),
    .S(\$procmux$8021_CMP ),
    .Y(\$procmux$8020_Y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign req_o = \gen_arbiter.req_nodes [0];
  assign data_o = \gen_arbiter.data_nodes [70:0];
  assign idx_o = \gen_arbiter.index_nodes [1:0];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = \$3 ;
  assign \gen_arbiter.req_d  = \$auto$rtlil.cc:3092:Mux$1393 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$rtlil.cc:3092:Mux$1398 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$rtlil.cc:3092:Mux$1399 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \$auto$rtlil.cc:3092:Mux$1400 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \$auto$rtlil.cc:3092:Mux$1401 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$rtlil.cc:3092:Mux$1402 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$rtlil.cc:3092:Mux$1403 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \$auto$rtlil.cc:3092:Mux$1404 ;
  assign \gen_arbiter.gen_int_rr.rr_d  = \$auto$rtlil.cc:3092:Mux$1405 ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = \$40 ;
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$46 ;
  assign \gen_arbiter.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1408 ;
  assign \gen_arbiter.data_nodes [70:0] = \$auto$rtlil.cc:3092:Mux$1409 ;
  assign \gen_arbiter.gnt_nodes [1] = \$52 ;
  assign \gen_arbiter.gnt_nodes [2] = \$54 ;
  assign \gen_arbiter.req_nodes [1] = \$56 ;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$62 ;
  assign \gen_arbiter.index_nodes [3:2] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign \gen_arbiter.data_nodes [141:71] = \$auto$rtlil.cc:3092:Mux$1410 ;
  assign gnt_o[0] = \$71 ;
  assign gnt_o[1] = \$77 ;
  assign \gen_arbiter.req_nodes [2] = \$79 ;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$85 ;
  assign \gen_arbiter.index_nodes [5:4] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel  };
  assign \gen_arbiter.data_nodes [212:142] = \$auto$rtlil.cc:3092:Mux$1411 ;
  assign gnt_o[2] = \$94 ;
  assign gnt_o[3] = \$100 ;
  assign \$procmux$8015_CMP  = flush_i;
  assign \$gen_arbiter.rr_q$38  = \$procmux$8014_Y ;
  assign \$procmux$8018_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = \$procmux$8017_Y ;
  assign \$procmux$8021_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = \$procmux$8020_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1395  = rst_ni;
  assign \$65  = 1'h1;
  assign \$67  = \$52 ;
  assign \$73  = 1'h1;
  assign \$75  = \$52 ;
  assign \$88  = 1'h1;
  assign \$90  = \$54 ;
  assign \$96  = 1'h1;
  assign \$98  = \$54 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1397  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1407  = rst_ni;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$100 ;
  wire \$14 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1427 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1428 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1429 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1430 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1439 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1440 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$1426 ;
  wire \$auto$rtlil.cc:3092:Mux$1431 ;
  wire \$auto$rtlil.cc:3092:Mux$1432 ;
  wire \$auto$rtlil.cc:3092:Mux$1433 ;
  wire \$auto$rtlil.cc:3092:Mux$1434 ;
  wire \$auto$rtlil.cc:3092:Mux$1435 ;
  wire \$auto$rtlil.cc:3092:Mux$1436 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1437 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1438 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1441 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1442 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1443 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1444 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  wire [1:0] \$procmux$7959_Y ;
  wire \$procmux$7960_CMP ;
  wire [3:0] \$procmux$7962_Y ;
  wire \$procmux$7963_CMP ;
  wire \$procmux$7965_Y ;
  wire \$procmux$7966_CMP ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.40" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.lower_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:125.33" */
  wire [5:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1429 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1431 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1432 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1433 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1434 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1435 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1436 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\$auto$rtlil.cc:3092:Mux$1437 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A(\gen_arbiter.rr_q ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .S(\$33 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1438 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1439 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(\$40 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\$auto$rtlil.cc:3092:Mux$1426 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\$46 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.index_nodes [2] }),
    .B({ 1'h1, \gen_arbiter.index_nodes [4] }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1441 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1442 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$54 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1427 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1443 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$67 ),
    .B(\$69 ),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1444 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$90 ),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$gen_arbiter.rr_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .Q(\gen_arbiter.rr_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7959  (
    .A(\$auto$rtlil.cc:3092:Mux$1438 ),
    .B(2'h0),
    .S(\$procmux$7960_CMP ),
    .Y(\$procmux$7959_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7962  (
    .A(\$auto$rtlil.cc:3092:Mux$1426 ),
    .B(4'h0),
    .S(\$procmux$7963_CMP ),
    .Y(\$procmux$7962_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7965  (
    .A(\$3 ),
    .B(1'h0),
    .S(\$procmux$7966_CMP ),
    .Y(\$procmux$7965_Y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign req_o = \gen_arbiter.req_nodes [0];
  assign data_o = \gen_arbiter.data_nodes [70:0];
  assign idx_o = \gen_arbiter.index_nodes [1:0];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = \$3 ;
  assign \gen_arbiter.req_d  = \$auto$rtlil.cc:3092:Mux$1426 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$rtlil.cc:3092:Mux$1431 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$rtlil.cc:3092:Mux$1432 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \$auto$rtlil.cc:3092:Mux$1433 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \$auto$rtlil.cc:3092:Mux$1434 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$rtlil.cc:3092:Mux$1435 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$rtlil.cc:3092:Mux$1436 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \$auto$rtlil.cc:3092:Mux$1437 ;
  assign \gen_arbiter.gen_int_rr.rr_d  = \$auto$rtlil.cc:3092:Mux$1438 ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = \$40 ;
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$46 ;
  assign \gen_arbiter.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1441 ;
  assign \gen_arbiter.data_nodes [70:0] = \$auto$rtlil.cc:3092:Mux$1442 ;
  assign \gen_arbiter.gnt_nodes [1] = \$52 ;
  assign \gen_arbiter.gnt_nodes [2] = \$54 ;
  assign \gen_arbiter.req_nodes [1] = \$56 ;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$62 ;
  assign \gen_arbiter.index_nodes [3:2] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign \gen_arbiter.data_nodes [141:71] = \$auto$rtlil.cc:3092:Mux$1443 ;
  assign gnt_o[0] = \$71 ;
  assign gnt_o[1] = \$77 ;
  assign \gen_arbiter.req_nodes [2] = \$79 ;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$85 ;
  assign \gen_arbiter.index_nodes [5:4] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel  };
  assign \gen_arbiter.data_nodes [212:142] = \$auto$rtlil.cc:3092:Mux$1444 ;
  assign gnt_o[2] = \$94 ;
  assign gnt_o[3] = \$100 ;
  assign \$procmux$7960_CMP  = flush_i;
  assign \$gen_arbiter.rr_q$38  = \$procmux$7959_Y ;
  assign \$procmux$7963_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = \$procmux$7962_Y ;
  assign \$procmux$7966_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = \$procmux$7965_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1428  = rst_ni;
  assign \$65  = 1'h1;
  assign \$67  = \$52 ;
  assign \$73  = 1'h1;
  assign \$75  = \$52 ;
  assign \$88  = 1'h1;
  assign \$90  = \$54 ;
  assign \$96  = 1'h1;
  assign \$98  = \$54 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1430  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1440  = rst_ni;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$100 ;
  wire \$14 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1460 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1461 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1462 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1463 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1472 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1473 ;
  wire [3:0] \$auto$rtlil.cc:3092:Mux$1459 ;
  wire \$auto$rtlil.cc:3092:Mux$1464 ;
  wire \$auto$rtlil.cc:3092:Mux$1465 ;
  wire \$auto$rtlil.cc:3092:Mux$1466 ;
  wire \$auto$rtlil.cc:3092:Mux$1467 ;
  wire \$auto$rtlil.cc:3092:Mux$1468 ;
  wire \$auto$rtlil.cc:3092:Mux$1469 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1470 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1471 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$1474 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1475 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1476 ;
  wire [70:0] \$auto$rtlil.cc:3092:Mux$1477 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  wire [1:0] \$procmux$7904_Y ;
  wire \$procmux$7905_CMP ;
  wire [3:0] \$procmux$7907_Y ;
  wire \$procmux$7908_CMP ;
  wire \$procmux$7910_Y ;
  wire \$procmux$7911_CMP ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.40" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.lower_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:125.33" */
  wire [5:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1462 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1464 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(32'd1),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [1]),
    .S(\$17 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1465 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$20 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1466 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(32'd2),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$23 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$24  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [2]),
    .S(\$23 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1467 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$26 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$26 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1468 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(32'd3),
    .B({ 30'h00000000, \gen_arbiter.rr_q  }),
    .Y(\$29 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(1'h0),
    .B(\gen_arbiter.req_d [3]),
    .S(\$29 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1469 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\$auto$rtlil.cc:3092:Mux$1470 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A(\gen_arbiter.rr_q ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .S(\$33 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1471 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1472 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(\$40 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\$auto$rtlil.cc:3092:Mux$1459 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\$46 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.index_nodes [2] }),
    .B({ 1'h1, \gen_arbiter.index_nodes [4] }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1474 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1475 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\$50 ),
    .Y(\$52 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.gnt_nodes [0]),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$54 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1460 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\$62 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1476 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$67 ),
    .B(\$69 ),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\$79 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$rtlil.cc:3092:Mux$1477 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$90 ),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98 ),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .AD(4'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$gen_arbiter.rr_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .Q(\gen_arbiter.rr_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7904  (
    .A(\$auto$rtlil.cc:3092:Mux$1471 ),
    .B(2'h0),
    .S(\$procmux$7905_CMP ),
    .Y(\$procmux$7904_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7907  (
    .A(\$auto$rtlil.cc:3092:Mux$1459 ),
    .B(4'h0),
    .S(\$procmux$7908_CMP ),
    .Y(\$procmux$7907_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7910  (
    .A(\$3 ),
    .B(1'h0),
    .S(\$procmux$7911_CMP ),
    .Y(\$procmux$7910_Y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign req_o = \gen_arbiter.req_nodes [0];
  assign data_o = \gen_arbiter.data_nodes [70:0];
  assign idx_o = \gen_arbiter.index_nodes [1:0];
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = \$3 ;
  assign \gen_arbiter.req_d  = \$auto$rtlil.cc:3092:Mux$1459 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$rtlil.cc:3092:Mux$1464 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$rtlil.cc:3092:Mux$1465 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \$auto$rtlil.cc:3092:Mux$1466 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \$auto$rtlil.cc:3092:Mux$1467 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$rtlil.cc:3092:Mux$1468 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$rtlil.cc:3092:Mux$1469 ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \$auto$rtlil.cc:3092:Mux$1470 ;
  assign \gen_arbiter.gen_int_rr.rr_d  = \$auto$rtlil.cc:3092:Mux$1471 ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = \$40 ;
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$46 ;
  assign \gen_arbiter.index_nodes [1:0] = \$auto$rtlil.cc:3092:Mux$1474 ;
  assign \gen_arbiter.data_nodes [70:0] = \$auto$rtlil.cc:3092:Mux$1475 ;
  assign \gen_arbiter.gnt_nodes [1] = \$52 ;
  assign \gen_arbiter.gnt_nodes [2] = \$54 ;
  assign \gen_arbiter.req_nodes [1] = \$56 ;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$62 ;
  assign \gen_arbiter.index_nodes [3:2] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign \gen_arbiter.data_nodes [141:71] = \$auto$rtlil.cc:3092:Mux$1476 ;
  assign gnt_o[0] = \$71 ;
  assign gnt_o[1] = \$77 ;
  assign \gen_arbiter.req_nodes [2] = \$79 ;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$85 ;
  assign \gen_arbiter.index_nodes [5:4] = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel  };
  assign \gen_arbiter.data_nodes [212:142] = \$auto$rtlil.cc:3092:Mux$1477 ;
  assign gnt_o[2] = \$94 ;
  assign gnt_o[3] = \$100 ;
  assign \$procmux$7905_CMP  = flush_i;
  assign \$gen_arbiter.rr_q$38  = \$procmux$7904_Y ;
  assign \$procmux$7908_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.req_q$12  = \$procmux$7907_Y ;
  assign \$procmux$7911_CMP  = flush_i;
  assign \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8  = \$procmux$7910_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$1461  = rst_ni;
  assign \$65  = 1'h1;
  assign \$67  = \$52 ;
  assign \$73  = 1'h1;
  assign \$75  = \$52 ;
  assign \$88  = 1'h1;
  assign \$90  = \$54 ;
  assign \$96  = 1'h1;
  assign \$98  = \$54 ;
  assign \$auto$rtlil.cc:2965:LogicNot$1463  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$1473  = rst_ni;
endmodule

/* src = "rtl/common_cells/rstgen.sv:13.8" */
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  /* src = "rtl/common_cells/rstgen.sv:14.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen.sv:18.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen.sv:15.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen.sv:17.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen.sv:16.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "rtl/common_cells/rstgen.sv:21.19" */
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

/* src = "rtl/common_cells/rstgen_bypass.sv:15.8" */
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  wire \$auto$rtlil.cc:2965:LogicNot$3 ;
  wire \$auto$rtlil.cc:2965:LogicNot$4 ;
  /* src = "rtl/common_cells/rstgen_bypass.sv:18.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen_bypass.sv:23.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:27.11" */
  wire rst_n;
  /* src = "rtl/common_cells/rstgen_bypass.sv:19.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:22.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:20.18" */
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:29.25" */
  wire [3:0] synch_regs_q;
  /* src = "rtl/common_cells/rstgen_bypass.sv:21.18" */
  input test_mode_i;
  wire test_mode_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_n),
    .Y(\$auto$rtlil.cc:2965:LogicNot$3 )
  );
  /* src = "rtl/common_cells/rstgen_bypass.sv:53.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$synch_regs_q  (
    .AD(4'h0),
    .ALOAD(rst_n),
    .CLK(clk_i),
    .D({ synch_regs_q[2:0], 1'h1 }),
    .Q(synch_regs_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:46.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:32.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:39.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
  assign \$auto$rtlil.cc:2965:LogicNot$4  = rst_n;
endmodule

/* src = "rtl/apb_uart/slib_clock_div.sv:35.8" */
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$3 ;
  wire \$5 ;
  wire [31:0] \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1532 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  wire [2:0] \$iCounter$11 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  wire [2:0] \$iCounter$9 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  wire \$iQ$10 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  wire \$iQ$8 ;
  wire [2:0] \$procmux$7670_Y ;
  wire \$procmux$7671_CMP ;
  wire [2:0] \$procmux$7672_Y ;
  wire \$procmux$7673_CMP ;
  wire \$procmux$7675_Y ;
  wire \$procmux$7676_CMP ;
  wire \$procmux$7677_Y ;
  wire \$procmux$7678_CMP ;
  wire [2:0] \$procmux$7680_Y ;
  wire \$procmux$7681_CMP ;
  wire \$procmux$7683_Y ;
  wire \$procmux$7684_CMP ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_clock_div.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_clock_div.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_clock_div.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_clock_div.sv:44.27" */
  wire [2:0] iCounter;
  /* src = "rtl/apb_uart/slib_clock_div.sv:43.5" */
  wire iQ;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1532 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCounter),
    .B(3'h7),
    .Y(\$5 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$6  (
    .A({ 29'h00000000, iCounter }),
    .B(32'd1),
    .Y(\$7 )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$iCounter  (
    .AD(3'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCounter$11 ),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iQ$10 ),
    .Q(iQ)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7670  (
    .A(\$7 [2:0]),
    .B(3'h0),
    .S(\$procmux$7671_CMP ),
    .Y(\$procmux$7670_Y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7672  (
    .A(3'hx),
    .B(\$procmux$7670_Y ),
    .S(\$procmux$7673_CMP ),
    .Y(\$procmux$7672_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7675  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7676_CMP ),
    .Y(\$procmux$7675_Y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7677  (
    .A(1'hx),
    .B(\$procmux$7675_Y ),
    .S(\$procmux$7678_CMP ),
    .Y(\$procmux$7677_Y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7680  (
    .A(iCounter),
    .B(\$iCounter$9 ),
    .S(\$procmux$7681_CMP ),
    .Y(\$procmux$7680_Y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7683  (
    .A(1'h0),
    .B(\$iQ$8 ),
    .S(\$procmux$7684_CMP ),
    .Y(\$procmux$7683_Y )
  );
  assign Q = iQ;
  assign \$procmux$7671_CMP  = \$5 ;
  assign \$procmux$7673_CMP  = \$3 ;
  assign \$iCounter$9  = \$procmux$7672_Y ;
  assign \$procmux$7676_CMP  = \$5 ;
  assign \$procmux$7678_CMP  = \$3 ;
  assign \$iQ$8  = \$procmux$7677_Y ;
  assign \$procmux$7681_CMP  = \$3 ;
  assign \$iCounter$11  = \$procmux$7680_Y ;
  assign \$procmux$7684_CMP  = \$3 ;
  assign \$iQ$10  = \$procmux$7683_Y ;
  assign \$3  = CE;
endmodule

/* src = "rtl/apb_uart/slib_counter.sv:35.8" */
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire [31:0] \$11 ;
  wire [31:0] \$13 ;
  wire \$19 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1715 ;
  /* src = "rtl/apb_uart/slib_counter.sv:70.11-77.16" */
  wire [4:0] \$iCounter$14 ;
  /* src = "rtl/apb_uart/slib_counter.sv:68.11-78.11" */
  wire [4:0] \$iCounter$15 ;
  /* src = "rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  wire [4:0] \$iCounter$16 ;
  /* src = "rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  wire [4:0] \$iCounter$17 ;
  /* src = "rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  wire \$iCounter[4]$20 ;
  wire \$procmux$3676_Y ;
  wire \$procmux$3677_CMP ;
  wire [4:0] \$procmux$3680_Y ;
  wire \$procmux$3681_CMP ;
  wire [4:0] \$procmux$3682_Y ;
  wire \$procmux$3683_CMP ;
  wire [4:0] \$procmux$3685_Y ;
  wire \$procmux$3686_CMP ;
  wire [4:0] \$procmux$3688_Y ;
  wire \$procmux$3689_CMP ;
  wire [4:0] \$procmux$3691_Y ;
  wire \$procmux$3692_CMP ;
  wire [4:0] \$procmux$3694_Y ;
  wire \$procmux$3695_CMP ;
  wire [4:0] \$procmux$3697_Y ;
  wire \$procmux$3698_CMP ;
  wire [4:0] \$procmux$3701_Y ;
  wire \$procmux$3702_CMP ;
  wire [4:0] \$procmux$3704_Y ;
  wire \$procmux$3705_CMP ;
  wire [4:0] \$procmux$3708_Y ;
  wire \$procmux$3709_CMP ;
  /* src = "rtl/apb_uart/slib_counter.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_counter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_counter.sv:42.28" */
  input [3:0] D;
  wire [3:0] D;
  /* src = "rtl/apb_uart/slib_counter.sv:41.14" */
  input DOWN;
  wire DOWN;
  /* src = "rtl/apb_uart/slib_counter.sv:40.14" */
  input ENABLE;
  wire ENABLE;
  /* src = "rtl/apb_uart/slib_counter.sv:39.14" */
  input LOAD;
  wire LOAD;
  /* src = "rtl/apb_uart/slib_counter.sv:44.16" */
  output OVERFLOW;
  wire OVERFLOW;
  /* src = "rtl/apb_uart/slib_counter.sv:43.30" */
  output [3:0] Q;
  wire [3:0] Q;
  /* src = "rtl/apb_uart/slib_counter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_counter.sv:48.15" */
  wire [4:0] iCounter;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1715 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 27'h0000000, iCounter }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$12  (
    .A({ 27'h0000000, iCounter }),
    .B(32'd1),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(DOWN),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_counter.sv:50.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$driver$iCounter  (
    .AD(5'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ \$iCounter[4]$20 , \$iCounter$17 [3:0] }),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/slib_counter.sv:82.11-82.32|rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3676  (
    .A(\$iCounter$17 [4]),
    .B(1'h0),
    .S(\$procmux$3677_CMP ),
    .Y(\$procmux$3676_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:72.16-72.41|rtl/apb_uart/slib_counter.sv:70.11-77.16" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3680  (
    .A(\$11 [4:0]),
    .B(\$13 [4:0]),
    .S(DOWN),
    .Y(\$procmux$3680_Y )
  );
  /* src = "rtl/apb_uart/slib_counter.sv:70.11-77.16|rtl/apb_uart/slib_counter.sv:68.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3682  (
    .A(5'hxx),
    .B(\$procmux$3680_Y ),
    .S(\$procmux$3683_CMP ),
    .Y(\$procmux$3682_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3685  (
    .A(\$procmux$3682_Y ),
    .B(5'hxx),
    .S(\$procmux$3686_CMP ),
    .Y(\$procmux$3685_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3688  (
    .A(\$procmux$3685_Y ),
    .B(5'hxx),
    .S(\$procmux$3689_CMP ),
    .Y(\$procmux$3688_Y )
  );
  /* src = "rtl/apb_uart/slib_counter.sv:70.11-77.16|rtl/apb_uart/slib_counter.sv:68.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3691  (
    .A(iCounter),
    .B(\$iCounter$14 ),
    .S(\$procmux$3692_CMP ),
    .Y(\$procmux$3691_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3694  (
    .A(\$procmux$3691_Y ),
    .B(5'hxx),
    .S(\$procmux$3695_CMP ),
    .Y(\$procmux$3694_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3697  (
    .A(\$procmux$3694_Y ),
    .B(5'hxx),
    .S(\$procmux$3698_CMP ),
    .Y(\$procmux$3697_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3701  (
    .A(\$iCounter$15 ),
    .B({ 1'h0, D }),
    .S(\$procmux$3702_CMP ),
    .Y(\$procmux$3701_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3704  (
    .A(\$procmux$3701_Y ),
    .B(5'hxx),
    .S(\$procmux$3705_CMP ),
    .Y(\$procmux$3704_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3708  (
    .A(\$iCounter$16 ),
    .B(5'h00),
    .S(\$procmux$3709_CMP ),
    .Y(\$procmux$3708_Y )
  );
  assign Q = iCounter[3:0];
  assign OVERFLOW = iCounter[4];
  assign \$procmux$3677_CMP  = \$19 ;
  assign \$iCounter[4]$20  = \$procmux$3676_Y ;
  assign \$procmux$3681_CMP  = \$9 ;
  assign \$procmux$3683_CMP  = \$7 ;
  assign \$procmux$3686_CMP  = \$5 ;
  assign \$procmux$3689_CMP  = \$3 ;
  assign \$iCounter$14  = \$procmux$3688_Y ;
  assign \$procmux$3692_CMP  = \$7 ;
  assign \$procmux$3695_CMP  = \$5 ;
  assign \$procmux$3698_CMP  = \$3 ;
  assign \$iCounter$15  = \$procmux$3697_Y ;
  assign \$procmux$3702_CMP  = \$5 ;
  assign \$procmux$3705_CMP  = \$3 ;
  assign \$iCounter$16  = \$procmux$3704_Y ;
  assign \$procmux$3709_CMP  = \$3 ;
  assign \$iCounter$17  = \$procmux$3708_Y ;
  assign \$3  = CLEAR;
  assign \$5  = LOAD;
  assign \$7  = ENABLE;
  assign \$19  = iCounter[4];
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1516 ;
  wire \$auto$rtlil.cc:3092:Mux$1517 ;
  wire \$auto$rtlil.cc:3092:Mux$1518 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1516 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1518 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1517 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1517 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1518 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1519 ;
  wire \$auto$rtlil.cc:3092:Mux$1520 ;
  wire \$auto$rtlil.cc:3092:Mux$1521 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1519 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1521 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1520 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1520 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1521 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1528 ;
  wire \$auto$rtlil.cc:3092:Mux$1529 ;
  wire \$auto$rtlil.cc:3092:Mux$1530 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1528 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1530 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1529 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1529 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1530 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1522 ;
  wire \$auto$rtlil.cc:3092:Mux$1523 ;
  wire \$auto$rtlil.cc:3092:Mux$1524 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1522 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1524 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1523 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1523 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1524 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1525 ;
  wire \$auto$rtlil.cc:3092:Mux$1526 ;
  wire \$auto$rtlil.cc:3092:Mux$1527 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1525 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1527 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1526 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1526 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1527 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1513 ;
  wire \$auto$rtlil.cc:3092:Mux$1514 ;
  wire \$auto$rtlil.cc:3092:Mux$1515 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1513 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1515 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1514 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1514 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1515 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1507 ;
  wire \$auto$rtlil.cc:3092:Mux$1508 ;
  wire \$auto$rtlil.cc:3092:Mux$1509 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1507 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1509 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1508 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1508 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1509 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1510 ;
  wire \$auto$rtlil.cc:3092:Mux$1511 ;
  wire \$auto$rtlil.cc:3092:Mux$1512 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1510 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1512 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1511 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1511 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1512 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1533 ;
  wire \$auto$rtlil.cc:3092:Mux$1534 ;
  wire \$auto$rtlil.cc:3092:Mux$1535 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1533 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h0),
    .B(1'h1),
    .S(\$14 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1535 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$8  (
    .A(1'h0),
    .B(1'h1),
    .S(\$7 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1534 )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
  assign RE = \$auto$rtlil.cc:3092:Mux$1534 ;
  assign FE = \$auto$rtlil.cc:3092:Mux$1535 ;
  assign \$5  = D;
  assign \$10  = iDd;
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire [31:0] \$16 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [31:0] \$25 ;
  wire \$28 ;
  wire \$3 ;
  wire \$32 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$5 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire [31:0] \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire [31:0] \$83 ;
  wire [6:0] \$auto$rtlil.cc:2957:Not$1555 ;
  wire [6:0] \$auto$rtlil.cc:2957:Not$1562 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1553 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1554 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1567 ;
  wire \$auto$rtlil.cc:3009:Lt$1557 ;
  wire \$auto$rtlil.cc:3015:Ge$1556 ;
  wire \$auto$rtlil.cc:3015:Ge$1563 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1558 ;
  wire \$auto$rtlil.cc:3092:Mux$1552 ;
  wire [10:0] \$auto$rtlil.cc:3092:Mux$1559 ;
  wire [10:0] \$auto$rtlil.cc:3092:Mux$1565 ;
  wire [10:0] \$auto$rtlil.cc:3092:Mux$1566 ;
  wire [703:0] \$auto$rtlil.cc:3093:Bwmux$1561 ;
  wire [10:0] \$auto$rtlil.cc:3113:Bmux$1564 ;
  wire [703:0] \$auto$rtlil.cc:3114:Demux$1560 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:89.1-96.18" */
  wire \$iEMPTY$33 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:113.3-116.8" */
  wire [703:0] \$iFIFOMem$49 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:76.1-79.18" */
  wire [6:0] \$iRDAddr$26 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$30 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:140.7-143.26" */
  wire [5:0] \$iUSAGE$71 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:145.1-148.26" */
  wire [5:0] \$iUSAGE$84 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$85 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:71.3-74.18" */
  wire [6:0] \$iWRAddr$17 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$29 ;
  wire [5:0] \$procmux$7595_Y ;
  wire \$procmux$7596_CMP ;
  wire [5:0] \$procmux$7599_Y ;
  wire \$procmux$7600_CMP ;
  wire [5:0] \$procmux$7601_Y ;
  wire \$procmux$7602_CMP ;
  wire [5:0] \$procmux$7604_Y ;
  wire \$procmux$7605_CMP ;
  wire [5:0] \$procmux$7609_Y ;
  wire \$procmux$7610_CMP ;
  wire [703:0] \$procmux$7611_Y ;
  wire \$procmux$7612_CMP ;
  wire \$procmux$7614_Y ;
  wire \$procmux$7615_CMP ;
  wire [6:0] \$procmux$7619_Y ;
  wire \$procmux$7620_CMP ;
  wire [6:0] \$procmux$7623_Y ;
  wire \$procmux$7624_CMP ;
  wire [6:0] \$procmux$7627_Y ;
  wire \$procmux$7628_CMP ;
  wire [6:0] \$procmux$7630_Y ;
  wire \$procmux$7631_CMP ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [10:0] D;
  wire [10:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [10:0] Q;
  wire [10:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [703:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:53.16" */
  wire [6:0] init;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$1 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(iFULL),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$15  (
    .A({ 25'h0000000, iWRAddr }),
    .B(32'd1),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(iEMPTY),
    .Y(\$21 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$19 ),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$24  (
    .A({ 25'h0000000, iRDAddr }),
    .B(32'd1),
    .Y(\$25 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$32 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1554 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(iFULL),
    .Y(\$39 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$1 ),
    .B(\$3 ),
    .Y(\$5 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$37 ),
    .B(\$39 ),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$42  (
    .A({ 1'h0, iWRAddr[5:0] }),
    .Y(\$auto$rtlil.cc:2957:Not$1555 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\$auto$rtlil.cc:2957:Not$1555 ),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1556 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:2957:Not$1555 ),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3009:Lt$1557 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3015:Ge$1556 ),
    .B(\$auto$rtlil.cc:3009:Lt$1557 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1558 )
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) \$46  (
    .A(11'h000),
    .B(11'h7ff),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1558 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1559 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd11)
  ) \$47  (
    .A(\$auto$rtlil.cc:3092:Mux$1559 ),
    .S(\$auto$rtlil.cc:2957:Not$1555 [5:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1560 )
  );
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S(\$auto$rtlil.cc:3114:Demux$1560 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1561 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$50  (
    .A({ 1'h0, iRDAddr[5:0] }),
    .Y(\$auto$rtlil.cc:2957:Not$1562 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$auto$rtlil.cc:2957:Not$1562 ),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1563 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd11)
  ) \$52  (
    .A(iFIFOMem),
    .S(\$auto$rtlil.cc:2957:Not$1562 [5:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1564 )
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) \$53  (
    .A(11'hxxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1564 ),
    .S(\$auto$rtlil.cc:3015:Ge$1563 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1565 )
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) \$54  (
    .A(11'hxxx),
    .B(\$auto$rtlil.cc:3092:Mux$1565 ),
    .S(\$auto$rtlil.cc:2957:Not$1562 [6]),
    .Y(\$auto$rtlil.cc:3092:Mux$1566 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1567 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(READ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$6  (
    .A(1'h0),
    .B(1'h1),
    .S(\$5 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1552 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$60 ),
    .B(\$62 ),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(iFULL),
    .Y(\$66 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$64 ),
    .B(\$66 ),
    .Y(\$68 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$69  (
    .A({ 26'h0000000, iUSAGE }),
    .B(32'd1),
    .Y(\$70 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(WRITE),
    .Y(\$73 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(iEMPTY),
    .Y(\$79 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1553 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$82  (
    .A({ 26'h0000000, iUSAGE }),
    .B(32'd1),
    .Y(\$83 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$Q  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3092:Mux$1566 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .AD(1'h1),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iEMPTY$33 ),
    .Q(iEMPTY)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[0]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [703:693]),
    .Q(iFIFOMem[703:693])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[10]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [593:583]),
    .Q(iFIFOMem[593:583])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[11]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [582:572]),
    .Q(iFIFOMem[582:572])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[12]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [571:561]),
    .Q(iFIFOMem[571:561])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[13]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [560:550]),
    .Q(iFIFOMem[560:550])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[14]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [549:539]),
    .Q(iFIFOMem[549:539])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[15]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [538:528]),
    .Q(iFIFOMem[538:528])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[16]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [527:517]),
    .Q(iFIFOMem[527:517])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[17]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [516:506]),
    .Q(iFIFOMem[516:506])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[18]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [505:495]),
    .Q(iFIFOMem[505:495])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[19]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [494:484]),
    .Q(iFIFOMem[494:484])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[1]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [692:682]),
    .Q(iFIFOMem[692:682])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[20]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [483:473]),
    .Q(iFIFOMem[483:473])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[21]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [472:462]),
    .Q(iFIFOMem[472:462])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[22]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [461:451]),
    .Q(iFIFOMem[461:451])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[23]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [450:440]),
    .Q(iFIFOMem[450:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[24]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [439:429]),
    .Q(iFIFOMem[439:429])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[25]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [428:418]),
    .Q(iFIFOMem[428:418])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[26]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [417:407]),
    .Q(iFIFOMem[417:407])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[27]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [406:396]),
    .Q(iFIFOMem[406:396])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[28]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [395:385]),
    .Q(iFIFOMem[395:385])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[29]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [384:374]),
    .Q(iFIFOMem[384:374])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[2]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [681:671]),
    .Q(iFIFOMem[681:671])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[30]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [373:363]),
    .Q(iFIFOMem[373:363])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[31]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [362:352]),
    .Q(iFIFOMem[362:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[32]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [351:341]),
    .Q(iFIFOMem[351:341])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[33]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [340:330]),
    .Q(iFIFOMem[340:330])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[34]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [329:319]),
    .Q(iFIFOMem[329:319])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[35]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [318:308]),
    .Q(iFIFOMem[318:308])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[36]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [307:297]),
    .Q(iFIFOMem[307:297])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[37]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [296:286]),
    .Q(iFIFOMem[296:286])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[38]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [285:275]),
    .Q(iFIFOMem[285:275])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[39]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [274:264]),
    .Q(iFIFOMem[274:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[3]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [670:660]),
    .Q(iFIFOMem[670:660])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[40]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [263:253]),
    .Q(iFIFOMem[263:253])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[41]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [252:242]),
    .Q(iFIFOMem[252:242])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[42]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [241:231]),
    .Q(iFIFOMem[241:231])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[43]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [230:220]),
    .Q(iFIFOMem[230:220])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[44]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [219:209]),
    .Q(iFIFOMem[219:209])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[45]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [208:198]),
    .Q(iFIFOMem[208:198])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[46]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [197:187]),
    .Q(iFIFOMem[197:187])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[47]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [186:176]),
    .Q(iFIFOMem[186:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[48]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [175:165]),
    .Q(iFIFOMem[175:165])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[49]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [164:154]),
    .Q(iFIFOMem[164:154])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[4]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [659:649]),
    .Q(iFIFOMem[659:649])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[50]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [153:143]),
    .Q(iFIFOMem[153:143])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[51]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [142:132]),
    .Q(iFIFOMem[142:132])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[52]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [131:121]),
    .Q(iFIFOMem[131:121])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[53]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [120:110]),
    .Q(iFIFOMem[120:110])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[54]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [109:99]),
    .Q(iFIFOMem[109:99])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[55]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [98:88]),
    .Q(iFIFOMem[98:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[56]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [87:77]),
    .Q(iFIFOMem[87:77])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[57]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [76:66]),
    .Q(iFIFOMem[76:66])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[58]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [65:55]),
    .Q(iFIFOMem[65:55])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[59]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [54:44]),
    .Q(iFIFOMem[54:44])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[5]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [648:638]),
    .Q(iFIFOMem[648:638])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[60]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [43:33]),
    .Q(iFIFOMem[43:33])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[61]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [32:22]),
    .Q(iFIFOMem[32:22])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[62]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [21:11]),
    .Q(iFIFOMem[21:11])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[63]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [10:0]),
    .Q(iFIFOMem[10:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[6]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [637:627]),
    .Q(iFIFOMem[637:627])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[7]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [626:616]),
    .Q(iFIFOMem[626:616])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[8]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [615:605]),
    .Q(iFIFOMem[615:605])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$iFIFOMem[9]  (
    .AD(11'h000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [604:594]),
    .Q(iFIFOMem[604:594])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$iRDAddr  (
    .AD(7'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iRDAddr$30 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$iUSAGE  (
    .AD(6'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iUSAGE$85 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$iWRAddr  (
    .AD(7'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iWRAddr$29 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:147.11-147.32|rtl/apb_uart/slib_fifo.sv:145.1-148.26" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7595  (
    .A(\$iUSAGE$71 ),
    .B(\$83 [5:0]),
    .S(\$procmux$7596_CMP ),
    .Y(\$procmux$7595_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7599  (
    .A(\$procmux$7595_Y ),
    .B(6'hxx),
    .S(\$procmux$7600_CMP ),
    .Y(\$procmux$7599_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:142.11-142.32|rtl/apb_uart/slib_fifo.sv:140.7-143.26" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7601  (
    .A(iUSAGE),
    .B(\$70 [5:0]),
    .S(\$procmux$7602_CMP ),
    .Y(\$procmux$7601_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7604  (
    .A(\$procmux$7601_Y ),
    .B(6'hxx),
    .S(\$procmux$7605_CMP ),
    .Y(\$procmux$7604_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7609  (
    .A(\$iUSAGE$84 ),
    .B(6'h00),
    .S(\$procmux$7610_CMP ),
    .Y(\$procmux$7609_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.43|rtl/apb_uart/slib_fifo.sv:113.3-116.8" */
  \$mux  #(
    .WIDTH(32'd704)
  ) \$procmux$7611  (
    .A(iFIFOMem),
    .B(\$auto$rtlil.cc:3093:Bwmux$1561 ),
    .S(\$procmux$7612_CMP ),
    .Y(\$procmux$7611_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:91.7-91.23|rtl/apb_uart/slib_fifo.sv:89.1-96.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7614  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7615_CMP ),
    .Y(\$procmux$7614_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7619  (
    .A(\$iRDAddr$26 ),
    .B(7'h00),
    .S(\$procmux$7620_CMP ),
    .Y(\$procmux$7619_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7623  (
    .A(\$iWRAddr$17 ),
    .B(7'h00),
    .S(\$procmux$7624_CMP ),
    .Y(\$procmux$7623_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:78.7-78.30|rtl/apb_uart/slib_fifo.sv:76.1-79.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7627  (
    .A(iRDAddr),
    .B(\$25 [6:0]),
    .S(\$procmux$7628_CMP ),
    .Y(\$procmux$7627_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:73.7-73.30|rtl/apb_uart/slib_fifo.sv:71.3-74.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7630  (
    .A(iWRAddr),
    .B(\$16 [6:0]),
    .S(\$procmux$7631_CMP ),
    .Y(\$procmux$7630_Y )
  );
  assign iFULL = \$auto$rtlil.cc:3092:Mux$1552 ;
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
  assign \$procmux$7596_CMP  = \$81 ;
  assign \$procmux$7600_CMP  = \$58 ;
  assign \$iUSAGE$84  = \$procmux$7599_Y ;
  assign \$procmux$7602_CMP  = \$68 ;
  assign \$procmux$7605_CMP  = \$58 ;
  assign \$iUSAGE$71  = \$procmux$7604_Y ;
  assign \$procmux$7610_CMP  = \$58 ;
  assign \$iUSAGE$85  = \$procmux$7609_Y ;
  assign \$procmux$7612_CMP  = \$41 ;
  assign \$iFIFOMem$49  = \$procmux$7611_Y ;
  assign \$procmux$7615_CMP  = \$32 ;
  assign \$iEMPTY$33  = \$procmux$7614_Y ;
  assign \$procmux$7620_CMP  = \$28 ;
  assign \$iRDAddr$30  = \$procmux$7619_Y ;
  assign \$procmux$7624_CMP  = \$28 ;
  assign \$iWRAddr$29  = \$procmux$7623_Y ;
  assign \$procmux$7628_CMP  = \$23 ;
  assign \$iRDAddr$26  = \$procmux$7627_Y ;
  assign \$procmux$7631_CMP  = \$14 ;
  assign \$iWRAddr$17  = \$procmux$7630_Y ;
  assign \$10  = WRITE;
  assign \$19  = READ;
  assign \$28  = CLEAR;
  assign \$58  = CLEAR;
  assign \$62  = WRITE;
  assign \$75  = READ;
  assign \$37  = WRITE;
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire [31:0] \$16 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [31:0] \$25 ;
  wire \$28 ;
  wire \$3 ;
  wire \$32 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$5 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire [31:0] \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire [31:0] \$83 ;
  wire [6:0] \$auto$rtlil.cc:2957:Not$1539 ;
  wire [6:0] \$auto$rtlil.cc:2957:Not$1546 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1537 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1538 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1551 ;
  wire \$auto$rtlil.cc:3009:Lt$1541 ;
  wire \$auto$rtlil.cc:3015:Ge$1540 ;
  wire \$auto$rtlil.cc:3015:Ge$1547 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1542 ;
  wire \$auto$rtlil.cc:3092:Mux$1536 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1543 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1549 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1550 ;
  wire [511:0] \$auto$rtlil.cc:3093:Bwmux$1545 ;
  wire [7:0] \$auto$rtlil.cc:3113:Bmux$1548 ;
  wire [511:0] \$auto$rtlil.cc:3114:Demux$1544 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:89.1-96.18" */
  wire \$iEMPTY$33 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:113.3-116.8" */
  wire [511:0] \$iFIFOMem$49 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:76.1-79.18" */
  wire [6:0] \$iRDAddr$26 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$30 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:140.7-143.26" */
  wire [5:0] \$iUSAGE$71 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:145.1-148.26" */
  wire [5:0] \$iUSAGE$84 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$85 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:71.3-74.18" */
  wire [6:0] \$iWRAddr$17 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$29 ;
  wire [5:0] \$procmux$7632_Y ;
  wire \$procmux$7633_CMP ;
  wire [5:0] \$procmux$7636_Y ;
  wire \$procmux$7637_CMP ;
  wire [5:0] \$procmux$7638_Y ;
  wire \$procmux$7639_CMP ;
  wire [5:0] \$procmux$7641_Y ;
  wire \$procmux$7642_CMP ;
  wire [5:0] \$procmux$7646_Y ;
  wire \$procmux$7647_CMP ;
  wire [511:0] \$procmux$7648_Y ;
  wire \$procmux$7649_CMP ;
  wire \$procmux$7651_Y ;
  wire \$procmux$7652_CMP ;
  wire [6:0] \$procmux$7656_Y ;
  wire \$procmux$7657_CMP ;
  wire [6:0] \$procmux$7660_Y ;
  wire \$procmux$7661_CMP ;
  wire [6:0] \$procmux$7664_Y ;
  wire \$procmux$7665_CMP ;
  wire [6:0] \$procmux$7667_Y ;
  wire \$procmux$7668_CMP ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [7:0] D;
  wire [7:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [7:0] Q;
  wire [7:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [511:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:53.16" */
  wire [6:0] init;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$1 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(iFULL),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$10 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$15  (
    .A({ 25'h0000000, iWRAddr }),
    .B(32'd1),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(iEMPTY),
    .Y(\$21 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$19 ),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$24  (
    .A({ 25'h0000000, iRDAddr }),
    .B(32'd1),
    .Y(\$25 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$32 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1538 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(iFULL),
    .Y(\$39 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$1 ),
    .B(\$3 ),
    .Y(\$5 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$37 ),
    .B(\$39 ),
    .Y(\$41 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$42  (
    .A({ 1'h0, iWRAddr[5:0] }),
    .Y(\$auto$rtlil.cc:2957:Not$1539 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\$auto$rtlil.cc:2957:Not$1539 ),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1540 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$auto$rtlil.cc:2957:Not$1539 ),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3009:Lt$1541 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$auto$rtlil.cc:3015:Ge$1540 ),
    .B(\$auto$rtlil.cc:3009:Lt$1541 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1542 )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) \$46  (
    .A(8'h00),
    .B(8'hff),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1542 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1543 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd8)
  ) \$47  (
    .A(\$auto$rtlil.cc:3092:Mux$1543 ),
    .S(\$auto$rtlil.cc:2957:Not$1539 [5:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1544 )
  );
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S(\$auto$rtlil.cc:3114:Demux$1544 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1545 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$50  (
    .A({ 1'h0, iRDAddr[5:0] }),
    .Y(\$auto$rtlil.cc:2957:Not$1546 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$auto$rtlil.cc:2957:Not$1546 ),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1547 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd8)
  ) \$52  (
    .A(iFIFOMem),
    .S(\$auto$rtlil.cc:2957:Not$1546 [5:0]),
    .Y(\$auto$rtlil.cc:3113:Bmux$1548 )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) \$53  (
    .A(8'hxx),
    .B(\$auto$rtlil.cc:3113:Bmux$1548 ),
    .S(\$auto$rtlil.cc:3015:Ge$1547 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1549 )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) \$54  (
    .A(8'hxx),
    .B(\$auto$rtlil.cc:3092:Mux$1549 ),
    .S(\$auto$rtlil.cc:2957:Not$1546 [6]),
    .Y(\$auto$rtlil.cc:3092:Mux$1550 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1551 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(READ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$6  (
    .A(1'h0),
    .B(1'h1),
    .S(\$5 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1536 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$60 ),
    .B(\$62 ),
    .Y(\$64 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(iFULL),
    .Y(\$66 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$64 ),
    .B(\$66 ),
    .Y(\$68 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$69  (
    .A({ 26'h0000000, iUSAGE }),
    .B(32'd1),
    .Y(\$70 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(WRITE),
    .Y(\$73 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(iEMPTY),
    .Y(\$79 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1537 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$82  (
    .A({ 26'h0000000, iUSAGE }),
    .B(32'd1),
    .Y(\$83 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$Q  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3092:Mux$1550 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .AD(1'h1),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iEMPTY$33 ),
    .Q(iEMPTY)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[0]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [511:504]),
    .Q(iFIFOMem[511:504])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[10]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [431:424]),
    .Q(iFIFOMem[431:424])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[11]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [423:416]),
    .Q(iFIFOMem[423:416])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[12]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [415:408]),
    .Q(iFIFOMem[415:408])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[13]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [407:400]),
    .Q(iFIFOMem[407:400])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[14]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [399:392]),
    .Q(iFIFOMem[399:392])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[15]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [391:384]),
    .Q(iFIFOMem[391:384])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[16]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [383:376]),
    .Q(iFIFOMem[383:376])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[17]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [375:368]),
    .Q(iFIFOMem[375:368])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[18]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [367:360]),
    .Q(iFIFOMem[367:360])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[19]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [359:352]),
    .Q(iFIFOMem[359:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[1]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [503:496]),
    .Q(iFIFOMem[503:496])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[20]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [351:344]),
    .Q(iFIFOMem[351:344])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[21]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [343:336]),
    .Q(iFIFOMem[343:336])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[22]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [335:328]),
    .Q(iFIFOMem[335:328])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[23]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [327:320]),
    .Q(iFIFOMem[327:320])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[24]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [319:312]),
    .Q(iFIFOMem[319:312])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[25]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [311:304]),
    .Q(iFIFOMem[311:304])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[26]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [303:296]),
    .Q(iFIFOMem[303:296])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[27]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [295:288]),
    .Q(iFIFOMem[295:288])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[28]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [287:280]),
    .Q(iFIFOMem[287:280])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[29]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [279:272]),
    .Q(iFIFOMem[279:272])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[2]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [495:488]),
    .Q(iFIFOMem[495:488])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[30]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [271:264]),
    .Q(iFIFOMem[271:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[31]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [263:256]),
    .Q(iFIFOMem[263:256])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[32]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [255:248]),
    .Q(iFIFOMem[255:248])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[33]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [247:240]),
    .Q(iFIFOMem[247:240])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[34]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [239:232]),
    .Q(iFIFOMem[239:232])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[35]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [231:224]),
    .Q(iFIFOMem[231:224])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[36]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [223:216]),
    .Q(iFIFOMem[223:216])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[37]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [215:208]),
    .Q(iFIFOMem[215:208])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[38]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [207:200]),
    .Q(iFIFOMem[207:200])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[39]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [199:192]),
    .Q(iFIFOMem[199:192])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[3]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [487:480]),
    .Q(iFIFOMem[487:480])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[40]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [191:184]),
    .Q(iFIFOMem[191:184])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[41]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [183:176]),
    .Q(iFIFOMem[183:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[42]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [175:168]),
    .Q(iFIFOMem[175:168])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[43]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [167:160]),
    .Q(iFIFOMem[167:160])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[44]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [159:152]),
    .Q(iFIFOMem[159:152])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[45]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [151:144]),
    .Q(iFIFOMem[151:144])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[46]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [143:136]),
    .Q(iFIFOMem[143:136])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[47]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [135:128]),
    .Q(iFIFOMem[135:128])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[48]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [127:120]),
    .Q(iFIFOMem[127:120])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[49]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [119:112]),
    .Q(iFIFOMem[119:112])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[4]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [479:472]),
    .Q(iFIFOMem[479:472])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[50]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [111:104]),
    .Q(iFIFOMem[111:104])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[51]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [103:96]),
    .Q(iFIFOMem[103:96])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[52]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [95:88]),
    .Q(iFIFOMem[95:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[53]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [87:80]),
    .Q(iFIFOMem[87:80])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[54]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [79:72]),
    .Q(iFIFOMem[79:72])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[55]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [71:64]),
    .Q(iFIFOMem[71:64])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[56]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [63:56]),
    .Q(iFIFOMem[63:56])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[57]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [55:48]),
    .Q(iFIFOMem[55:48])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[58]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [47:40]),
    .Q(iFIFOMem[47:40])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[59]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [39:32]),
    .Q(iFIFOMem[39:32])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[5]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [471:464]),
    .Q(iFIFOMem[471:464])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[60]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [31:24]),
    .Q(iFIFOMem[31:24])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[61]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [23:16]),
    .Q(iFIFOMem[23:16])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[62]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [15:8]),
    .Q(iFIFOMem[15:8])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[63]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [7:0]),
    .Q(iFIFOMem[7:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[6]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [463:456]),
    .Q(iFIFOMem[463:456])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[7]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [455:448]),
    .Q(iFIFOMem[455:448])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[8]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [447:440]),
    .Q(iFIFOMem[447:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iFIFOMem[9]  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFIFOMem$49 [439:432]),
    .Q(iFIFOMem[439:432])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$iRDAddr  (
    .AD(7'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iRDAddr$30 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$iUSAGE  (
    .AD(6'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iUSAGE$85 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$driver$iWRAddr  (
    .AD(7'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iWRAddr$29 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:147.11-147.32|rtl/apb_uart/slib_fifo.sv:145.1-148.26" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7632  (
    .A(\$iUSAGE$71 ),
    .B(\$83 [5:0]),
    .S(\$procmux$7633_CMP ),
    .Y(\$procmux$7632_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7636  (
    .A(\$procmux$7632_Y ),
    .B(6'hxx),
    .S(\$procmux$7637_CMP ),
    .Y(\$procmux$7636_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:142.11-142.32|rtl/apb_uart/slib_fifo.sv:140.7-143.26" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7638  (
    .A(iUSAGE),
    .B(\$70 [5:0]),
    .S(\$procmux$7639_CMP ),
    .Y(\$procmux$7638_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7641  (
    .A(\$procmux$7638_Y ),
    .B(6'hxx),
    .S(\$procmux$7642_CMP ),
    .Y(\$procmux$7641_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7646  (
    .A(\$iUSAGE$84 ),
    .B(6'h00),
    .S(\$procmux$7647_CMP ),
    .Y(\$procmux$7646_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.43|rtl/apb_uart/slib_fifo.sv:113.3-116.8" */
  \$mux  #(
    .WIDTH(32'd512)
  ) \$procmux$7648  (
    .A(iFIFOMem),
    .B(\$auto$rtlil.cc:3093:Bwmux$1545 ),
    .S(\$procmux$7649_CMP ),
    .Y(\$procmux$7648_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:91.7-91.23|rtl/apb_uart/slib_fifo.sv:89.1-96.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7651  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7652_CMP ),
    .Y(\$procmux$7651_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7656  (
    .A(\$iRDAddr$26 ),
    .B(7'h00),
    .S(\$procmux$7657_CMP ),
    .Y(\$procmux$7656_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7660  (
    .A(\$iWRAddr$17 ),
    .B(7'h00),
    .S(\$procmux$7661_CMP ),
    .Y(\$procmux$7660_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:78.7-78.30|rtl/apb_uart/slib_fifo.sv:76.1-79.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7664  (
    .A(iRDAddr),
    .B(\$25 [6:0]),
    .S(\$procmux$7665_CMP ),
    .Y(\$procmux$7664_Y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:73.7-73.30|rtl/apb_uart/slib_fifo.sv:71.3-74.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7667  (
    .A(iWRAddr),
    .B(\$16 [6:0]),
    .S(\$procmux$7668_CMP ),
    .Y(\$procmux$7667_Y )
  );
  assign iFULL = \$auto$rtlil.cc:3092:Mux$1536 ;
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
  assign \$procmux$7633_CMP  = \$81 ;
  assign \$procmux$7637_CMP  = \$58 ;
  assign \$iUSAGE$84  = \$procmux$7636_Y ;
  assign \$procmux$7639_CMP  = \$68 ;
  assign \$procmux$7642_CMP  = \$58 ;
  assign \$iUSAGE$71  = \$procmux$7641_Y ;
  assign \$procmux$7647_CMP  = \$58 ;
  assign \$iUSAGE$85  = \$procmux$7646_Y ;
  assign \$procmux$7649_CMP  = \$41 ;
  assign \$iFIFOMem$49  = \$procmux$7648_Y ;
  assign \$procmux$7652_CMP  = \$32 ;
  assign \$iEMPTY$33  = \$procmux$7651_Y ;
  assign \$procmux$7657_CMP  = \$28 ;
  assign \$iRDAddr$30  = \$procmux$7656_Y ;
  assign \$procmux$7661_CMP  = \$28 ;
  assign \$iWRAddr$29  = \$procmux$7660_Y ;
  assign \$procmux$7665_CMP  = \$23 ;
  assign \$iRDAddr$26  = \$procmux$7664_Y ;
  assign \$procmux$7668_CMP  = \$14 ;
  assign \$iWRAddr$17  = \$procmux$7667_Y ;
  assign \$10  = WRITE;
  assign \$19  = READ;
  assign \$28  = CLEAR;
  assign \$58  = CLEAR;
  assign \$62  = WRITE;
  assign \$75  = READ;
  assign \$37  = WRITE;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire [31:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [31:0] \$19 ;
  wire \$24 ;
  wire \$26 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1502 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  wire [1:0] \$iCount$20 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  wire [1:0] \$iCount$21 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  wire [1:0] \$iCount$22 ;
  wire \$procmux$7830_Y ;
  wire \$procmux$7831_CMP ;
  wire \$procmux$7833_Y ;
  wire \$procmux$7834_CMP ;
  wire \$procmux$7838_Y ;
  wire \$procmux$7839_CMP ;
  wire [1:0] \$procmux$7841_Y ;
  wire \$procmux$7842_CMP ;
  wire [1:0] \$procmux$7844_Y ;
  wire \$procmux$7845_CMP ;
  wire [1:0] \$procmux$7846_Y ;
  wire \$procmux$7847_CMP ;
  wire [1:0] \$procmux$7850_Y ;
  wire \$procmux$7851_CMP ;
  wire [1:0] \$procmux$7852_Y ;
  wire \$procmux$7853_CMP ;
  wire [1:0] \$procmux$7855_Y ;
  wire \$procmux$7856_CMP ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1502 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$18  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$19 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iCount  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCount$22 ),
    .Q(iCount)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7830  (
    .A(Q),
    .B(1'h0),
    .S(\$procmux$7831_CMP ),
    .Y(\$procmux$7830_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7833  (
    .A(\$procmux$7830_Y ),
    .B(1'hx),
    .S(\$procmux$7834_CMP ),
    .Y(\$procmux$7833_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7838  (
    .A(\$Q$27 ),
    .B(1'h1),
    .S(\$procmux$7839_CMP ),
    .Y(\$procmux$7838_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:64.21-64.42|rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7841  (
    .A(iCount),
    .B(\$19 [1:0]),
    .S(\$procmux$7842_CMP ),
    .Y(\$procmux$7841_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7844  (
    .A(\$procmux$7841_Y ),
    .B(2'hx),
    .S(\$procmux$7845_CMP ),
    .Y(\$procmux$7844_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7846  (
    .A(2'hx),
    .B(\$procmux$7844_Y ),
    .S(\$procmux$7847_CMP ),
    .Y(\$procmux$7846_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7850  (
    .A(\$iCount$20 ),
    .B(\$11 [1:0]),
    .S(\$procmux$7851_CMP ),
    .Y(\$procmux$7850_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7852  (
    .A(2'hx),
    .B(\$procmux$7850_Y ),
    .S(\$procmux$7853_CMP ),
    .Y(\$procmux$7852_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7855  (
    .A(iCount),
    .B(\$iCount$21 ),
    .S(\$procmux$7856_CMP ),
    .Y(\$procmux$7855_Y )
  );
  assign \$procmux$7831_CMP  = \$26 ;
  assign \$procmux$7834_CMP  = \$24 ;
  assign \$Q$27  = \$procmux$7833_Y ;
  assign \$procmux$7839_CMP  = \$24 ;
  assign \$Q$28  = \$procmux$7838_Y ;
  assign \$procmux$7842_CMP  = \$17 ;
  assign \$procmux$7845_CMP  = \$9 ;
  assign \$procmux$7847_CMP  = \$3 ;
  assign \$iCount$20  = \$procmux$7846_Y ;
  assign \$procmux$7851_CMP  = \$9 ;
  assign \$procmux$7853_CMP  = \$3 ;
  assign \$iCount$21  = \$procmux$7852_Y ;
  assign \$procmux$7856_CMP  = \$3 ;
  assign \$iCount$22  = \$procmux$7855_Y ;
  assign \$3  = CE;
  assign \$5  = D;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire [31:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [31:0] \$19 ;
  wire \$24 ;
  wire \$26 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1504 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  wire [1:0] \$iCount$20 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  wire [1:0] \$iCount$21 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  wire [1:0] \$iCount$22 ;
  wire \$procmux$7776_Y ;
  wire \$procmux$7777_CMP ;
  wire \$procmux$7779_Y ;
  wire \$procmux$7780_CMP ;
  wire \$procmux$7784_Y ;
  wire \$procmux$7785_CMP ;
  wire [1:0] \$procmux$7787_Y ;
  wire \$procmux$7788_CMP ;
  wire [1:0] \$procmux$7790_Y ;
  wire \$procmux$7791_CMP ;
  wire [1:0] \$procmux$7792_Y ;
  wire \$procmux$7793_CMP ;
  wire [1:0] \$procmux$7796_Y ;
  wire \$procmux$7797_CMP ;
  wire [1:0] \$procmux$7798_Y ;
  wire \$procmux$7799_CMP ;
  wire [1:0] \$procmux$7801_Y ;
  wire \$procmux$7802_CMP ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1504 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$18  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$19 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iCount  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCount$22 ),
    .Q(iCount)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7776  (
    .A(Q),
    .B(1'h0),
    .S(\$procmux$7777_CMP ),
    .Y(\$procmux$7776_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7779  (
    .A(\$procmux$7776_Y ),
    .B(1'hx),
    .S(\$procmux$7780_CMP ),
    .Y(\$procmux$7779_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7784  (
    .A(\$Q$27 ),
    .B(1'h1),
    .S(\$procmux$7785_CMP ),
    .Y(\$procmux$7784_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:64.21-64.42|rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7787  (
    .A(iCount),
    .B(\$19 [1:0]),
    .S(\$procmux$7788_CMP ),
    .Y(\$procmux$7787_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7790  (
    .A(\$procmux$7787_Y ),
    .B(2'hx),
    .S(\$procmux$7791_CMP ),
    .Y(\$procmux$7790_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7792  (
    .A(2'hx),
    .B(\$procmux$7790_Y ),
    .S(\$procmux$7793_CMP ),
    .Y(\$procmux$7792_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7796  (
    .A(\$iCount$20 ),
    .B(\$11 [1:0]),
    .S(\$procmux$7797_CMP ),
    .Y(\$procmux$7796_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7798  (
    .A(2'hx),
    .B(\$procmux$7796_Y ),
    .S(\$procmux$7799_CMP ),
    .Y(\$procmux$7798_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7801  (
    .A(iCount),
    .B(\$iCount$21 ),
    .S(\$procmux$7802_CMP ),
    .Y(\$procmux$7801_Y )
  );
  assign \$procmux$7777_CMP  = \$26 ;
  assign \$procmux$7780_CMP  = \$24 ;
  assign \$Q$27  = \$procmux$7779_Y ;
  assign \$procmux$7785_CMP  = \$24 ;
  assign \$Q$28  = \$procmux$7784_Y ;
  assign \$procmux$7788_CMP  = \$17 ;
  assign \$procmux$7791_CMP  = \$9 ;
  assign \$procmux$7793_CMP  = \$3 ;
  assign \$iCount$20  = \$procmux$7792_Y ;
  assign \$procmux$7797_CMP  = \$9 ;
  assign \$procmux$7799_CMP  = \$3 ;
  assign \$iCount$21  = \$procmux$7798_Y ;
  assign \$procmux$7802_CMP  = \$3 ;
  assign \$iCount$22  = \$procmux$7801_Y ;
  assign \$3  = CE;
  assign \$5  = D;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire [31:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [31:0] \$19 ;
  wire \$24 ;
  wire \$26 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1503 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  wire [1:0] \$iCount$20 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  wire [1:0] \$iCount$21 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  wire [1:0] \$iCount$22 ;
  wire \$procmux$7803_Y ;
  wire \$procmux$7804_CMP ;
  wire \$procmux$7806_Y ;
  wire \$procmux$7807_CMP ;
  wire \$procmux$7811_Y ;
  wire \$procmux$7812_CMP ;
  wire [1:0] \$procmux$7814_Y ;
  wire \$procmux$7815_CMP ;
  wire [1:0] \$procmux$7817_Y ;
  wire \$procmux$7818_CMP ;
  wire [1:0] \$procmux$7819_Y ;
  wire \$procmux$7820_CMP ;
  wire [1:0] \$procmux$7823_Y ;
  wire \$procmux$7824_CMP ;
  wire [1:0] \$procmux$7825_Y ;
  wire \$procmux$7826_CMP ;
  wire [1:0] \$procmux$7828_Y ;
  wire \$procmux$7829_CMP ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1503 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$18  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$19 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iCount  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCount$22 ),
    .Q(iCount)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7803  (
    .A(Q),
    .B(1'h0),
    .S(\$procmux$7804_CMP ),
    .Y(\$procmux$7803_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7806  (
    .A(\$procmux$7803_Y ),
    .B(1'hx),
    .S(\$procmux$7807_CMP ),
    .Y(\$procmux$7806_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7811  (
    .A(\$Q$27 ),
    .B(1'h1),
    .S(\$procmux$7812_CMP ),
    .Y(\$procmux$7811_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:64.21-64.42|rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7814  (
    .A(iCount),
    .B(\$19 [1:0]),
    .S(\$procmux$7815_CMP ),
    .Y(\$procmux$7814_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7817  (
    .A(\$procmux$7814_Y ),
    .B(2'hx),
    .S(\$procmux$7818_CMP ),
    .Y(\$procmux$7817_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7819  (
    .A(2'hx),
    .B(\$procmux$7817_Y ),
    .S(\$procmux$7820_CMP ),
    .Y(\$procmux$7819_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7823  (
    .A(\$iCount$20 ),
    .B(\$11 [1:0]),
    .S(\$procmux$7824_CMP ),
    .Y(\$procmux$7823_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7825  (
    .A(2'hx),
    .B(\$procmux$7823_Y ),
    .S(\$procmux$7826_CMP ),
    .Y(\$procmux$7825_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7828  (
    .A(iCount),
    .B(\$iCount$21 ),
    .S(\$procmux$7829_CMP ),
    .Y(\$procmux$7828_Y )
  );
  assign \$procmux$7804_CMP  = \$26 ;
  assign \$procmux$7807_CMP  = \$24 ;
  assign \$Q$27  = \$procmux$7806_Y ;
  assign \$procmux$7812_CMP  = \$24 ;
  assign \$Q$28  = \$procmux$7811_Y ;
  assign \$procmux$7815_CMP  = \$17 ;
  assign \$procmux$7818_CMP  = \$9 ;
  assign \$procmux$7820_CMP  = \$3 ;
  assign \$iCount$20  = \$procmux$7819_Y ;
  assign \$procmux$7824_CMP  = \$9 ;
  assign \$procmux$7826_CMP  = \$3 ;
  assign \$iCount$21  = \$procmux$7825_Y ;
  assign \$procmux$7829_CMP  = \$3 ;
  assign \$iCount$22  = \$procmux$7828_Y ;
  assign \$3  = CE;
  assign \$5  = D;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire [31:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [31:0] \$19 ;
  wire \$24 ;
  wire \$26 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1505 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  wire [1:0] \$iCount$20 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  wire [1:0] \$iCount$21 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  wire [1:0] \$iCount$22 ;
  wire \$procmux$7749_Y ;
  wire \$procmux$7750_CMP ;
  wire \$procmux$7752_Y ;
  wire \$procmux$7753_CMP ;
  wire \$procmux$7757_Y ;
  wire \$procmux$7758_CMP ;
  wire [1:0] \$procmux$7760_Y ;
  wire \$procmux$7761_CMP ;
  wire [1:0] \$procmux$7763_Y ;
  wire \$procmux$7764_CMP ;
  wire [1:0] \$procmux$7765_Y ;
  wire \$procmux$7766_CMP ;
  wire [1:0] \$procmux$7769_Y ;
  wire \$procmux$7770_CMP ;
  wire [1:0] \$procmux$7771_Y ;
  wire \$procmux$7772_CMP ;
  wire [1:0] \$procmux$7774_Y ;
  wire \$procmux$7775_CMP ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1505 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$18  (
    .A({ 30'h00000000, iCount }),
    .B(32'd1),
    .Y(\$19 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iCount  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCount$22 ),
    .Q(iCount)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7749  (
    .A(Q),
    .B(1'h0),
    .S(\$procmux$7750_CMP ),
    .Y(\$procmux$7749_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7752  (
    .A(\$procmux$7749_Y ),
    .B(1'hx),
    .S(\$procmux$7753_CMP ),
    .Y(\$procmux$7752_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7757  (
    .A(\$Q$27 ),
    .B(1'h1),
    .S(\$procmux$7758_CMP ),
    .Y(\$procmux$7757_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:64.21-64.42|rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7760  (
    .A(iCount),
    .B(\$19 [1:0]),
    .S(\$procmux$7761_CMP ),
    .Y(\$procmux$7760_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7763  (
    .A(\$procmux$7760_Y ),
    .B(2'hx),
    .S(\$procmux$7764_CMP ),
    .Y(\$procmux$7763_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7765  (
    .A(2'hx),
    .B(\$procmux$7763_Y ),
    .S(\$procmux$7766_CMP ),
    .Y(\$procmux$7765_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7769  (
    .A(\$iCount$20 ),
    .B(\$11 [1:0]),
    .S(\$procmux$7770_CMP ),
    .Y(\$procmux$7769_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7771  (
    .A(2'hx),
    .B(\$procmux$7769_Y ),
    .S(\$procmux$7772_CMP ),
    .Y(\$procmux$7771_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7774  (
    .A(iCount),
    .B(\$iCount$21 ),
    .S(\$procmux$7775_CMP ),
    .Y(\$procmux$7774_Y )
  );
  assign \$procmux$7750_CMP  = \$26 ;
  assign \$procmux$7753_CMP  = \$24 ;
  assign \$Q$27  = \$procmux$7752_Y ;
  assign \$procmux$7758_CMP  = \$24 ;
  assign \$Q$28  = \$procmux$7757_Y ;
  assign \$procmux$7761_CMP  = \$17 ;
  assign \$procmux$7764_CMP  = \$9 ;
  assign \$procmux$7766_CMP  = \$3 ;
  assign \$iCount$20  = \$procmux$7765_Y ;
  assign \$procmux$7770_CMP  = \$9 ;
  assign \$procmux$7772_CMP  = \$3 ;
  assign \$iCount$21  = \$procmux$7771_Y ;
  assign \$procmux$7775_CMP  = \$3 ;
  assign \$iCount$22  = \$procmux$7774_Y ;
  assign \$3  = CE;
  assign \$5  = D;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire [31:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [31:0] \$19 ;
  wire \$24 ;
  wire \$26 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1717 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  wire [2:0] \$iCount$20 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  wire [2:0] \$iCount$21 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  wire [2:0] \$iCount$22 ;
  wire \$procmux$3631_Y ;
  wire \$procmux$3632_CMP ;
  wire \$procmux$3634_Y ;
  wire \$procmux$3635_CMP ;
  wire \$procmux$3639_Y ;
  wire \$procmux$3640_CMP ;
  wire [2:0] \$procmux$3642_Y ;
  wire \$procmux$3643_CMP ;
  wire [2:0] \$procmux$3645_Y ;
  wire \$procmux$3646_CMP ;
  wire [2:0] \$procmux$3647_Y ;
  wire \$procmux$3648_CMP ;
  wire [2:0] \$procmux$3651_Y ;
  wire \$procmux$3652_CMP ;
  wire [2:0] \$procmux$3653_Y ;
  wire \$procmux$3654_CMP ;
  wire [2:0] \$procmux$3656_Y ;
  wire \$procmux$3657_CMP ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [2:0] iCount;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1717 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 29'h00000000, iCount }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$18  (
    .A({ 29'h00000000, iCount }),
    .B(32'd1),
    .Y(\$19 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(3'h4),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(3'h4),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$iCount  (
    .AD(3'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCount$22 ),
    .Q(iCount)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3631  (
    .A(Q),
    .B(1'h0),
    .S(\$procmux$3632_CMP ),
    .Y(\$procmux$3631_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3634  (
    .A(\$procmux$3631_Y ),
    .B(1'hx),
    .S(\$procmux$3635_CMP ),
    .Y(\$procmux$3634_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3639  (
    .A(\$Q$27 ),
    .B(1'h1),
    .S(\$procmux$3640_CMP ),
    .Y(\$procmux$3639_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:64.21-64.42|rtl/apb_uart/slib_input_filter.sv:62.21-65.21" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3642  (
    .A(iCount),
    .B(\$19 [2:0]),
    .S(\$procmux$3643_CMP ),
    .Y(\$procmux$3642_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3645  (
    .A(\$procmux$3642_Y ),
    .B(3'hx),
    .S(\$procmux$3646_CMP ),
    .Y(\$procmux$3645_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3647  (
    .A(3'hx),
    .B(\$procmux$3645_Y ),
    .S(\$procmux$3648_CMP ),
    .Y(\$procmux$3647_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.21-60.42|rtl/apb_uart/slib_input_filter.sv:58.16-65.21" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3651  (
    .A(\$iCount$20 ),
    .B(\$11 [2:0]),
    .S(\$procmux$3652_CMP ),
    .Y(\$procmux$3651_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3653  (
    .A(3'hx),
    .B(\$procmux$3651_Y ),
    .S(\$procmux$3654_CMP ),
    .Y(\$procmux$3653_Y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.16-65.21|rtl/apb_uart/slib_input_filter.sv:56.11-66.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3656  (
    .A(iCount),
    .B(\$iCount$21 ),
    .S(\$procmux$3657_CMP ),
    .Y(\$procmux$3656_Y )
  );
  assign \$procmux$3632_CMP  = \$26 ;
  assign \$procmux$3635_CMP  = \$24 ;
  assign \$Q$27  = \$procmux$3634_Y ;
  assign \$procmux$3640_CMP  = \$24 ;
  assign \$Q$28  = \$procmux$3639_Y ;
  assign \$procmux$3643_CMP  = \$17 ;
  assign \$procmux$3646_CMP  = \$9 ;
  assign \$procmux$3648_CMP  = \$3 ;
  assign \$iCount$20  = \$procmux$3647_Y ;
  assign \$procmux$3652_CMP  = \$9 ;
  assign \$procmux$3654_CMP  = \$3 ;
  assign \$iCount$21  = \$procmux$3653_Y ;
  assign \$procmux$3657_CMP  = \$3 ;
  assign \$iCount$22  = \$procmux$3656_Y ;
  assign \$3  = CE;
  assign \$5  = D;
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  wire \$auto$rtlil.cc:2965:LogicNot$1498 ;
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1498 )
  );
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  wire \$auto$rtlil.cc:2965:LogicNot$1500 ;
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1500 )
  );
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  wire \$auto$rtlil.cc:2965:LogicNot$1499 ;
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1499 )
  );
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  wire \$auto$rtlil.cc:2965:LogicNot$1501 ;
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1501 )
  );
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  wire \$auto$rtlil.cc:2965:LogicNot$1497 ;
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1497 )
  );
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .AD(2'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_mv_filter.sv:35.8" */
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire [31:0] \$11 ;
  wire \$16 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1716 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:63.13-66.18" */
  wire [4:0] \$iCounter$12 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  wire [4:0] \$iCounter$13 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire [4:0] \$iCounter$17 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  wire \$iQ$14 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire \$iQ$18 ;
  wire \$procmux$3658_Y ;
  wire \$procmux$3659_CMP ;
  wire [4:0] \$procmux$3661_Y ;
  wire \$procmux$3662_CMP ;
  wire [4:0] \$procmux$3664_Y ;
  wire \$procmux$3665_CMP ;
  wire [4:0] \$procmux$3667_Y ;
  wire \$procmux$3668_CMP ;
  wire \$procmux$3670_Y ;
  wire \$procmux$3671_CMP ;
  wire [4:0] \$procmux$3674_Y ;
  wire \$procmux$3675_CMP ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:40.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:41.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:38.14" */
  input SAMPLE;
  wire SAMPLE;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:45.15" */
  wire [4:0] iCounter;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:46.5" */
  wire iQ;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1716 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ 27'h0000000, iCounter }),
    .B(32'd1),
    .Y(\$11 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A({ 27'h0000000, iCounter }),
    .B(32'd10),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$driver$iCounter  (
    .AD(5'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCounter$17 ),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iQ$18 ),
    .Q(iQ)
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3658  (
    .A(\$iQ$14 ),
    .B(1'h0),
    .S(\$procmux$3659_CMP ),
    .Y(\$procmux$3658_Y )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3661  (
    .A(\$iCounter$13 ),
    .B(5'h00),
    .S(\$procmux$3662_CMP ),
    .Y(\$procmux$3661_Y )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:65.18-65.43|rtl/apb_uart/slib_mv_filter.sv:63.13-66.18" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3664  (
    .A(iCounter),
    .B(\$11 [4:0]),
    .S(\$procmux$3665_CMP ),
    .Y(\$procmux$3664_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3667  (
    .A(\$procmux$3664_Y ),
    .B(5'hxx),
    .S(\$procmux$3668_CMP ),
    .Y(\$procmux$3667_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3670  (
    .A(iQ),
    .B(1'h1),
    .S(\$procmux$3671_CMP ),
    .Y(\$procmux$3670_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3674  (
    .A(\$iCounter$12 ),
    .B(iCounter),
    .S(\$procmux$3675_CMP ),
    .Y(\$procmux$3674_Y )
  );
  assign Q = iQ;
  assign \$procmux$3659_CMP  = \$16 ;
  assign \$iQ$18  = \$procmux$3658_Y ;
  assign \$procmux$3662_CMP  = \$16 ;
  assign \$iCounter$17  = \$procmux$3661_Y ;
  assign \$procmux$3665_CMP  = \$9 ;
  assign \$procmux$3668_CMP  = \$3 ;
  assign \$iCounter$12  = \$procmux$3667_Y ;
  assign \$procmux$3671_CMP  = \$3 ;
  assign \$iQ$14  = \$procmux$3670_Y ;
  assign \$procmux$3675_CMP  = \$3 ;
  assign \$iCounter$13  = \$procmux$3674_Y ;
  assign \$5  = SAMPLE;
  assign \$7  = D;
  assign \$16  = CLEAR;
endmodule

/* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" */
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$1 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$111 ;
  wire \$113 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$25 ;
  wire [3:0] \$29 ;
  wire \$3 ;
  wire [3:0] \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire [3:0] \$37 ;
  wire [3:0] \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire [3:0] \$47 ;
  wire [3:0] \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire [3:0] \$57 ;
  wire [3:0] \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire [3:0] \$67 ;
  wire [3:0] \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  wire \$auto$rtlil.cc:2965:LogicNot$59 ;
  wire \$auto$rtlil.cc:3092:Mux$60 ;
  wire [30:0] \$procmux$14928_Y ;
  wire \$procmux$14929_CMP ;
  wire \$procmux$14930_CMP ;
  wire \$procmux$14931_CMP ;
  wire \$procmux$14932_CMP ;
  wire \$procmux$14933_CMP ;
  wire \$procmux$14935_Y ;
  wire \$procmux$14936_CMP ;
  wire \$procmux$14937_CMP ;
  wire \$procmux$14938_CMP ;
  wire \$procmux$14939_CMP ;
  wire \$procmux$14940_CMP ;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  wire [31:0] \$reg_rdata_next$109 ;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" */
  wire [4:0] addr_hit;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" */
  wire addrmiss;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" */
  wire [31:0] bootaddr_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:73.16" */
  wire [31:0] bootaddr_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" */
  wire bootaddr_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" */
  wire bootmode_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:82.9" */
  wire bootmode_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" */
  wire bootmode_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" */
  wire [31:0] corestatus_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:79.16" */
  wire [31:0] corestatus_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" */
  wire corestatus_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" */
  input devmode_i;
  wire devmode_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" */
  wire fetchen_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:76.9" */
  wire fetchen_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" */
  wire fetchen_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" */
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" */
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:37.24" */
  wire [4:0] reg_addr;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:39.19" */
  wire [3:0] reg_be;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" */
  wire reg_error;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:48.14" */
  wire [69:0] reg_intf_req;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:49.14" */
  wire [33:0] reg_intf_rsp;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:40.19" */
  wire [31:0] reg_rdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:45.18" */
  wire [31:0] reg_rdata_next;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" */
  wire reg_re;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:38.19" */
  wire [31:0] reg_wdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" */
  wire reg_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" */
  wire sram_dly_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:85.9" */
  wire sram_dly_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" */
  wire sram_dly_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:298.9" */
  wire unused_be;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:297.9" */
  wire unused_wdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" */
  wire wr_err;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(reg_intf_req[0]),
    .B(reg_intf_req[37]),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(\$97 ),
    .B(\$99 ),
    .Y(\$101 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(addr_hit[4]),
    .B(reg_we),
    .Y(\$103 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(reg_error),
    .Y(\$105 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\$103 ),
    .B(\$105 ),
    .Y(\$107 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(reg_addr),
    .Y(\$12 )
  );
  \$reduce_xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(reg_wdata),
    .Y(\$111 )
  );
  \$reduce_xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(reg_be),
    .Y(\$113 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(reg_addr),
    .B(5'h04),
    .Y(\$14 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(reg_addr),
    .B(5'h08),
    .Y(\$16 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(reg_addr),
    .B(5'h0c),
    .Y(\$18 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(reg_addr),
    .B(5'h10),
    .Y(\$20 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(reg_intf_req[37]),
    .Y(\$3 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(addr_hit),
    .Y(\$22 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$22 ),
    .Y(\$auto$rtlil.cc:2965:LogicNot$59 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(reg_re),
    .B(reg_we),
    .Y(\$25 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:2965:LogicNot$59 ),
    .S(\$25 ),
    .Y(\$auto$rtlil.cc:3092:Mux$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$28  (
    .A(reg_be),
    .Y(\$29 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$31 ),
    .Y(\$33 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_hit[0]),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$36  (
    .A(reg_be),
    .Y(\$37 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(reg_intf_req[0]),
    .B(\$3 ),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(addr_hit[1]),
    .B(\$41 ),
    .Y(\$43 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$35 ),
    .B(\$43 ),
    .Y(\$45 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$46  (
    .A(reg_be),
    .Y(\$47 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49 ),
    .Y(\$51 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(addr_hit[2]),
    .B(\$51 ),
    .Y(\$53 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$45 ),
    .B(\$53 ),
    .Y(\$55 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$56  (
    .A(reg_be),
    .Y(\$57 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(devmode_i),
    .B(addrmiss),
    .Y(\$7 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(addr_hit[3]),
    .B(\$61 ),
    .Y(\$63 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$55 ),
    .B(\$63 ),
    .Y(\$65 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$66  (
    .A(reg_be),
    .Y(\$67 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_hit[4]),
    .B(\$71 ),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$65 ),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(reg_we),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_hit[0]),
    .B(reg_we),
    .Y(\$79 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .B(wr_err),
    .Y(\$9 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(reg_error),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$79 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(addr_hit[1]),
    .B(reg_we),
    .Y(\$85 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(reg_error),
    .Y(\$87 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\$85 ),
    .B(\$87 ),
    .Y(\$89 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(addr_hit[2]),
    .B(reg_we),
    .Y(\$91 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(reg_error),
    .Y(\$93 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$91 ),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(addr_hit[3]),
    .B(reg_we),
    .Y(\$97 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(reg_error),
    .Y(\$99 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd31)
  ) \$procmux$14928  (
    .A(31'h7fffffff),
    .B({ bootaddr_qs[31:1], 31'h00000000, corestatus_qs[31:1], 62'h0000000000000000 }),
    .S({ \$procmux$14933_CMP , \$procmux$14932_CMP , \$procmux$14931_CMP , \$procmux$14930_CMP , \$procmux$14929_CMP  }),
    .Y(\$procmux$14928_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$14935  (
    .A(1'h1),
    .B({ bootaddr_qs[0], fetchen_qs, corestatus_qs[0], bootmode_qs, sram_dly_qs }),
    .S({ \$procmux$14940_CMP , \$procmux$14939_CMP , \$procmux$14938_CMP , \$procmux$14937_CMP , \$procmux$14936_CMP  }),
    .Y(\$procmux$14935_Y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(bootaddr_wd),
    .we(bootaddr_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(bootmode_wd),
    .we(bootmode_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(corestatus_wd),
    .we(corestatus_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(fetchen_wd),
    .we(fetchen_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(sram_dly_wd),
    .we(sram_dly_we)
  );
  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;
  assign reg_we = \$1 ;
  assign reg_re = \$5 ;
  assign reg_addr = reg_intf_req[42:38];
  assign reg_wdata = reg_intf_req[36:5];
  assign reg_be = reg_intf_req[4:1];
  assign reg_intf_rsp[33:2] = reg_rdata;
  assign reg_intf_rsp[1] = reg_error;
  assign reg_intf_rsp[0] = 1'h1;
  assign reg_rdata = reg_rdata_next;
  assign reg_error = \$9 ;
  assign addr_hit = { \$20 , \$18 , \$16 , \$14 , \$12  };
  assign addrmiss = \$auto$rtlil.cc:3092:Mux$60 ;
  assign wr_err = \$77 ;
  assign bootaddr_we = \$83 ;
  assign bootaddr_wd = reg_wdata;
  assign fetchen_we = \$89 ;
  assign fetchen_wd = reg_wdata[0];
  assign corestatus_we = \$95 ;
  assign corestatus_wd = reg_wdata;
  assign bootmode_we = \$101 ;
  assign bootmode_wd = reg_wdata[0];
  assign sram_dly_we = \$107 ;
  assign sram_dly_wd = reg_wdata[0];
  assign reg_rdata_next = \$reg_rdata_next$109 ;
  assign unused_wdata = \$111 ;
  assign unused_be = \$113 ;
  assign \$reg_rdata_next$109 [31:1] = \$procmux$14928_Y ;
  assign \$reg_rdata_next$109 [0] = \$procmux$14935_Y ;
  assign \$59 [3:1] = 3'h0;
  assign \$59 [0] = \$57 [0];
  assign \$61  = \$57 [0];
  assign \$31  = \$29 ;
  assign \$39 [3:1] = 3'h0;
  assign \$39 [0] = \$37 [0];
  assign \$41  = \$37 [0];
  assign \$49  = \$47 ;
  assign \$69 [3:1] = 3'h0;
  assign \$69 [0] = \$67 [0];
  assign \$71  = \$67 [0];
  assign \$procmux$14929_CMP  = \$20 ;
  assign \$procmux$14930_CMP  = \$18 ;
  assign \$procmux$14931_CMP  = \$16 ;
  assign \$procmux$14932_CMP  = \$14 ;
  assign \$procmux$14933_CMP  = \$12 ;
  assign \$procmux$14936_CMP  = \$20 ;
  assign \$procmux$14937_CMP  = \$18 ;
  assign \$procmux$14938_CMP  = \$16 ;
  assign \$procmux$14939_CMP  = \$14 ;
  assign \$procmux$14940_CMP  = \$12 ;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1801 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1802 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1801 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1802  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1799 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1800 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1799 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1800  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1805 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1806 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1805 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1806  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1803 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1804 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1803 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1804  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1745 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1746 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1745 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
  assign \$auto$rtlil.cc:2965:LogicNot$1746  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1743 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1744 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1743 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
  assign \$auto$rtlil.cc:2965:LogicNot$1744  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1809 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1810 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1809 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1810  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1807 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1808 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1807 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1808  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1813 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1814 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1813 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1814  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1811 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1812 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1811 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$1812  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1757 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1758 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1757 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
  assign \$auto$rtlil.cc:2965:LogicNot$1758  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1755 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1756 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1755 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
  assign \$auto$rtlil.cc:2965:LogicNot$1756  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$731 ;
  wire \$auto$rtlil.cc:2965:LogicNot$732 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$731 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$732  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$751 ;
  wire \$auto$rtlil.cc:2965:LogicNot$752 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$751 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$752  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$753 ;
  wire \$auto$rtlil.cc:2965:LogicNot$754 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$753 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$754  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$755 ;
  wire \$auto$rtlil.cc:2965:LogicNot$756 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$755 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$756  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$757 ;
  wire \$auto$rtlil.cc:2965:LogicNot$758 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$757 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$758  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$759 ;
  wire \$auto$rtlil.cc:2965:LogicNot$760 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$759 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$760  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$761 ;
  wire \$auto$rtlil.cc:2965:LogicNot$762 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$761 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$762  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$763 ;
  wire \$auto$rtlil.cc:2965:LogicNot$764 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$763 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$764  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$765 ;
  wire \$auto$rtlil.cc:2965:LogicNot$766 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$765 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$766  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$767 ;
  wire \$auto$rtlil.cc:2965:LogicNot$768 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$767 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$768  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$769 ;
  wire \$auto$rtlil.cc:2965:LogicNot$770 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$769 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$770  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$733 ;
  wire \$auto$rtlil.cc:2965:LogicNot$734 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$733 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$734  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$771 ;
  wire \$auto$rtlil.cc:2965:LogicNot$772 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$771 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$772  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$773 ;
  wire \$auto$rtlil.cc:2965:LogicNot$774 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$773 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$774  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$775 ;
  wire \$auto$rtlil.cc:2965:LogicNot$776 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$775 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$776  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$777 ;
  wire \$auto$rtlil.cc:2965:LogicNot$778 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$777 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$778  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$779 ;
  wire \$auto$rtlil.cc:2965:LogicNot$780 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$779 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$780  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$781 ;
  wire \$auto$rtlil.cc:2965:LogicNot$782 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$781 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$782  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$783 ;
  wire \$auto$rtlil.cc:2965:LogicNot$784 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$783 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$784  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$785 ;
  wire \$auto$rtlil.cc:2965:LogicNot$786 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$785 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$786  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$787 ;
  wire \$auto$rtlil.cc:2965:LogicNot$788 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$787 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$788  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$789 ;
  wire \$auto$rtlil.cc:2965:LogicNot$790 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$789 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$790  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$735 ;
  wire \$auto$rtlil.cc:2965:LogicNot$736 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$735 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$736  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$791 ;
  wire \$auto$rtlil.cc:2965:LogicNot$792 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$791 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$792  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$793 ;
  wire \$auto$rtlil.cc:2965:LogicNot$794 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$793 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$794  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$737 ;
  wire \$auto$rtlil.cc:2965:LogicNot$738 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$737 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$738  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$739 ;
  wire \$auto$rtlil.cc:2965:LogicNot$740 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$739 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$740  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$741 ;
  wire \$auto$rtlil.cc:2965:LogicNot$742 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$741 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$742  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$743 ;
  wire \$auto$rtlil.cc:2965:LogicNot$744 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$743 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$744  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$745 ;
  wire \$auto$rtlil.cc:2965:LogicNot$746 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$745 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$746  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$747 ;
  wire \$auto$rtlil.cc:2965:LogicNot$748 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$747 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$748  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$749 ;
  wire \$auto$rtlil.cc:2965:LogicNot$750 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$749 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$750  = rst_ni;
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  wire \$auto$rtlil.cc:2965:LogicNot$1 ;
  wire \$auto$rtlil.cc:2965:LogicNot$2 ;
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
  assign \$auto$rtlil.cc:2965:LogicNot$2  = rst_ni;
endmodule

/* src = "ihp13/tc_clk.sv:9.8" */
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  /* src = "ihp13/tc_clk.sv:10.18" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_clk.sv:11.18" */
  output clk_o;
  wire clk_o;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:14.16" */
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$11 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$128 ;
  wire \$13 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$146 ;
  wire \$148 ;
  wire \$15 ;
  wire \$150 ;
  wire \$152 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$17 ;
  wire \$170 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$2 ;
  wire \$20 ;
  wire \$200 ;
  wire \$202 ;
  wire \$204 ;
  wire \$206 ;
  wire \$209 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$218 ;
  wire \$22 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$242 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$251 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$26 ;
  wire \$260 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire \$281 ;
  wire \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$29 ;
  wire \$293 ;
  wire \$295 ;
  wire \$298 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$38 ;
  wire \$4 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$17 ;
  wire \$auto$rtlil.cc:2965:LogicNot$18 ;
  /* src = "ihp13/tc_sram_impl.sv:248.12-248.46" */
  wire \$gen_512x32xBx1.sel_q$296 ;
  wire \$procmux$15555_Y ;
  wire \$procmux$15556_CMP ;
  wire \$procmux$15558_Y ;
  wire \$procmux$15559_CMP ;
  wire \$procmux$15592_Y ;
  wire \$procmux$15593_CMP ;
  wire \$procmux$15625_Y ;
  wire \$procmux$15626_CMP ;
  wire \$procmux$15657_Y ;
  wire \$procmux$15658_CMP ;
  wire \$procmux$15688_Y ;
  wire \$procmux$15689_CMP ;
  wire \$procmux$15718_Y ;
  wire \$procmux$15719_CMP ;
  wire \$procmux$15747_Y ;
  wire \$procmux$15748_CMP ;
  wire \$procmux$15775_Y ;
  wire \$procmux$15776_CMP ;
  wire \$procmux$15802_Y ;
  wire \$procmux$15803_CMP ;
  wire \$procmux$15828_Y ;
  wire \$procmux$15829_CMP ;
  wire \$procmux$15853_Y ;
  wire \$procmux$15854_CMP ;
  wire \$procmux$15877_Y ;
  wire \$procmux$15878_CMP ;
  wire \$procmux$15900_Y ;
  wire \$procmux$15901_CMP ;
  wire \$procmux$15922_Y ;
  wire \$procmux$15923_CMP ;
  wire \$procmux$15943_Y ;
  wire \$procmux$15944_CMP ;
  wire \$procmux$15963_Y ;
  wire \$procmux$15964_CMP ;
  wire \$procmux$15982_Y ;
  wire \$procmux$15983_CMP ;
  wire \$procmux$16000_Y ;
  wire \$procmux$16001_CMP ;
  wire \$procmux$16017_Y ;
  wire \$procmux$16018_CMP ;
  wire \$procmux$16033_Y ;
  wire \$procmux$16034_CMP ;
  wire \$procmux$16048_Y ;
  wire \$procmux$16049_CMP ;
  wire \$procmux$16062_Y ;
  wire \$procmux$16063_CMP ;
  wire \$procmux$16075_Y ;
  wire \$procmux$16076_CMP ;
  wire \$procmux$16087_Y ;
  wire \$procmux$16088_CMP ;
  wire \$procmux$16098_Y ;
  wire \$procmux$16099_CMP ;
  wire \$procmux$16108_Y ;
  wire \$procmux$16109_CMP ;
  wire \$procmux$16117_Y ;
  wire \$procmux$16118_CMP ;
  wire \$procmux$16125_Y ;
  wire \$procmux$16126_CMP ;
  wire \$procmux$16132_Y ;
  wire \$procmux$16133_CMP ;
  wire \$procmux$16138_Y ;
  wire \$procmux$16139_CMP ;
  wire \$procmux$16143_Y ;
  wire \$procmux$16144_CMP ;
  wire \$procmux$16147_Y ;
  wire \$procmux$16148_CMP ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[0]$9 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[10]$99 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[11]$108 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[12]$117 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[13]$126 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[14]$135 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[15]$144 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[16]$153 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[17]$162 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[18]$171 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[19]$180 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[1]$18 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[20]$189 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[21]$198 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[22]$207 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[23]$216 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[24]$225 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[25]$234 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[26]$243 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[27]$252 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[28]$261 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[29]$270 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[2]$27 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[30]$279 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[31]$288 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[3]$36 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[4]$45 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[5]$54 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[6]$63 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[7]$72 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[8]$81 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[9]$90 ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$2 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(addr_i[0]),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(addr_i[0]),
    .Y(\$101 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(bm[11]),
    .B(\$101 ),
    .Y(\$103 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(bm[11]),
    .B(addr_i[0]),
    .Y(\$105 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$107 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(addr_i[0]),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(bm[12]),
    .B(\$110 ),
    .Y(\$112 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(bm[12]),
    .B(addr_i[0]),
    .Y(\$114 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$116 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(addr_i[0]),
    .Y(\$119 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(bm[1]),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(bm[13]),
    .B(\$119 ),
    .Y(\$121 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(bm[13]),
    .B(addr_i[0]),
    .Y(\$123 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$125 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(addr_i[0]),
    .Y(\$128 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$129  (
    .A(bm[14]),
    .B(\$128 ),
    .Y(\$130 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(bm[14]),
    .B(addr_i[0]),
    .Y(\$132 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$134 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(addr_i[0]),
    .Y(\$137 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(bm[15]),
    .B(\$137 ),
    .Y(\$139 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(bm[1]),
    .B(addr_i[0]),
    .Y(\$15 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(bm[15]),
    .B(addr_i[0]),
    .Y(\$141 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$143 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(addr_i[0]),
    .Y(\$146 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(bm[16]),
    .B(\$146 ),
    .Y(\$148 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(bm[16]),
    .B(addr_i[0]),
    .Y(\$150 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(addr_i[0]),
    .Y(\$155 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(bm[17]),
    .B(\$155 ),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(bm[17]),
    .B(addr_i[0]),
    .Y(\$159 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$161 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(addr_i[0]),
    .Y(\$164 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(bm[18]),
    .B(\$164 ),
    .Y(\$166 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(bm[18]),
    .B(addr_i[0]),
    .Y(\$168 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$170 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(addr_i[0]),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(bm[19]),
    .B(\$173 ),
    .Y(\$175 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(bm[19]),
    .B(addr_i[0]),
    .Y(\$177 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$179 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(addr_i[0]),
    .Y(\$182 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(bm[20]),
    .B(\$182 ),
    .Y(\$184 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(bm[20]),
    .B(addr_i[0]),
    .Y(\$186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$188 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i[0]),
    .Y(\$20 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(addr_i[0]),
    .Y(\$191 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(bm[21]),
    .B(\$191 ),
    .Y(\$193 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$194  (
    .A(bm[21]),
    .B(addr_i[0]),
    .Y(\$195 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$197 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(addr_i[0]),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(bm[22]),
    .B(\$200 ),
    .Y(\$202 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$203  (
    .A(bm[22]),
    .B(addr_i[0]),
    .Y(\$204 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$206 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(addr_i[0]),
    .Y(\$209 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(bm[2]),
    .B(\$20 ),
    .Y(\$22 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(bm[23]),
    .B(\$209 ),
    .Y(\$211 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(bm[23]),
    .B(addr_i[0]),
    .Y(\$213 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$215 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(addr_i[0]),
    .Y(\$218 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(bm[24]),
    .B(\$218 ),
    .Y(\$220 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(bm[24]),
    .B(addr_i[0]),
    .Y(\$222 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$224 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(addr_i[0]),
    .Y(\$227 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(bm[25]),
    .B(\$227 ),
    .Y(\$229 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(bm[2]),
    .B(addr_i[0]),
    .Y(\$24 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(bm[25]),
    .B(addr_i[0]),
    .Y(\$231 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$233 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(addr_i[0]),
    .Y(\$236 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(bm[26]),
    .B(\$236 ),
    .Y(\$238 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(bm[26]),
    .B(addr_i[0]),
    .Y(\$240 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$241  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$242 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(addr_i[0]),
    .Y(\$245 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(bm[27]),
    .B(\$245 ),
    .Y(\$247 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(bm[27]),
    .B(addr_i[0]),
    .Y(\$249 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$26 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$250  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$251 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$253  (
    .A(addr_i[0]),
    .Y(\$254 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$255  (
    .A(bm[28]),
    .B(\$254 ),
    .Y(\$256 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(bm[28]),
    .B(addr_i[0]),
    .Y(\$258 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$260 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$262  (
    .A(addr_i[0]),
    .Y(\$263 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$264  (
    .A(bm[29]),
    .B(\$263 ),
    .Y(\$265 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$266  (
    .A(bm[29]),
    .B(addr_i[0]),
    .Y(\$267 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$268  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$269 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$271  (
    .A(addr_i[0]),
    .Y(\$272 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$273  (
    .A(bm[30]),
    .B(\$272 ),
    .Y(\$274 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(bm[30]),
    .B(addr_i[0]),
    .Y(\$276 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$277  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$278 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(addr_i[0]),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$280  (
    .A(addr_i[0]),
    .Y(\$281 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$282  (
    .A(bm[31]),
    .B(\$281 ),
    .Y(\$283 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$284  (
    .A(bm[31]),
    .B(addr_i[0]),
    .Y(\$285 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$286  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$287 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$290  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(we_i),
    .Y(\$293 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(req_i),
    .B(\$293 ),
    .Y(\$295 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(we_i),
    .Y(\$298 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(bm[0]),
    .B(\$2 ),
    .Y(\$4 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(bm[3]),
    .B(\$29 ),
    .Y(\$31 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(bm[3]),
    .B(addr_i[0]),
    .Y(\$33 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$35 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(addr_i[0]),
    .Y(\$38 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(bm[4]),
    .B(\$38 ),
    .Y(\$40 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(bm[4]),
    .B(addr_i[0]),
    .Y(\$42 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$44 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(addr_i[0]),
    .Y(\$47 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(bm[5]),
    .B(\$47 ),
    .Y(\$49 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(bm[0]),
    .B(addr_i[0]),
    .Y(\$6 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(bm[5]),
    .B(addr_i[0]),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$53 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_i[0]),
    .Y(\$56 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(bm[6]),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(bm[6]),
    .B(addr_i[0]),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$62 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(addr_i[0]),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(bm[7]),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(bm[7]),
    .B(addr_i[0]),
    .Y(\$69 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$8 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$71 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(addr_i[0]),
    .Y(\$74 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(bm[8]),
    .B(\$74 ),
    .Y(\$76 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(bm[8]),
    .B(addr_i[0]),
    .Y(\$78 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$80 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(addr_i[0]),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(bm[9]),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(bm[9]),
    .B(addr_i[0]),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$89 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(addr_i[0]),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(bm[10]),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(bm[10]),
    .B(addr_i[0]),
    .Y(\$96 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$98 )
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_512x32xBx1.sel_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_512x32xBx1.sel_q$296 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* src = "ihp13/tc_sram_impl.sv:248.31-248.46|ihp13/tc_sram_impl.sv:248.12-248.46" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15555  (
    .A(\gen_512x32xBx1.sel_q ),
    .B(addr_i[0]),
    .S(\$procmux$15556_CMP ),
    .Y(\$procmux$15555_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15558  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15558_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15592  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15592_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15625  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15625_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15657  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15657_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15688  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15688_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15718  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15718_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15747  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15747_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15775  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15775_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15802  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15802_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15828  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15828_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15853  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15853_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15877  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15877_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15900  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15900_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15922  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15922_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15943  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15943_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15963  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15963_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15982  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15982_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16000  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16000_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16017  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16017_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16033  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16033_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16048  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16048_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16062  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16062_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16075  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16075_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16087  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16087_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16098  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16098_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16108  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16108_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16117  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16117_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16125  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16125_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16132  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16132_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16138  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16138_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16143  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16143_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16147  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$16147_Y )
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM(\gen_512x32xBx1.bm64 ),
    .A_CLK(clk_i),
    .A_DIN(\gen_512x32xBx1.wdata64 ),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$298 ),
    .A_WEN(we_i)
  );
  assign bm[0] = be_i[0];
  assign bm[1] = be_i[0];
  assign bm[2] = be_i[0];
  assign bm[3] = be_i[0];
  assign bm[4] = be_i[0];
  assign bm[5] = be_i[0];
  assign bm[6] = be_i[0];
  assign bm[7] = be_i[0];
  assign bm[8] = be_i[1];
  assign bm[9] = be_i[1];
  assign bm[10] = be_i[1];
  assign bm[11] = be_i[1];
  assign bm[12] = be_i[1];
  assign bm[13] = be_i[1];
  assign bm[14] = be_i[1];
  assign bm[15] = be_i[1];
  assign bm[16] = be_i[2];
  assign bm[17] = be_i[2];
  assign bm[18] = be_i[2];
  assign bm[19] = be_i[2];
  assign bm[20] = be_i[2];
  assign bm[21] = be_i[2];
  assign bm[22] = be_i[2];
  assign bm[23] = be_i[2];
  assign bm[24] = be_i[3];
  assign bm[25] = be_i[3];
  assign bm[26] = be_i[3];
  assign bm[27] = be_i[3];
  assign bm[28] = be_i[3];
  assign bm[29] = be_i[3];
  assign bm[30] = be_i[3];
  assign bm[31] = be_i[3];
  assign impl_o = 1'hx;
  assign rdata_o = { \$rdata_o[31]$288 , \$rdata_o[30]$279 , \$rdata_o[29]$270 , \$rdata_o[28]$261 , \$rdata_o[27]$252 , \$rdata_o[26]$243 , \$rdata_o[25]$234 , \$rdata_o[24]$225 , \$rdata_o[23]$216 , \$rdata_o[22]$207 , \$rdata_o[21]$198 , \$rdata_o[20]$189 , \$rdata_o[19]$180 , \$rdata_o[18]$171 , \$rdata_o[17]$162 , \$rdata_o[16]$153 , \$rdata_o[15]$144 , \$rdata_o[14]$135 , \$rdata_o[13]$126 , \$rdata_o[12]$117 , \$rdata_o[11]$108 , \$rdata_o[10]$99 , \$rdata_o[9]$90 , \$rdata_o[8]$81 , \$rdata_o[7]$72 , \$rdata_o[6]$63 , \$rdata_o[5]$54 , \$rdata_o[4]$45 , \$rdata_o[3]$36 , \$rdata_o[2]$27 , \$rdata_o[1]$18 , \$rdata_o[0]$9  };
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign \gen_512x32xBx1.bm64  = { \$285 , \$283 , \$276 , \$274 , \$267 , \$265 , \$258 , \$256 , \$249 , \$247 , \$240 , \$238 , \$231 , \$229 , \$222 , \$220 , \$213 , \$211 , \$204 , \$202 , \$195 , \$193 , \$186 , \$184 , \$177 , \$175 , \$168 , \$166 , \$159 , \$157 , \$150 , \$148 , \$141 , \$139 , \$132 , \$130 , \$123 , \$121 , \$114 , \$112 , \$105 , \$103 , \$96 , \$94 , \$87 , \$85 , \$78 , \$76 , \$69 , \$67 , \$60 , \$58 , \$51 , \$49 , \$42 , \$40 , \$33 , \$31 , \$24 , \$22 , \$15 , \$13 , \$6 , \$4  };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \$procmux$15556_CMP  = \$295 ;
  assign \$gen_512x32xBx1.sel_q$296  = \$procmux$15555_Y ;
  assign \$procmux$15559_CMP  = \$287 ;
  assign \$rdata_o[31]$288  = \$procmux$15558_Y ;
  assign \$procmux$15593_CMP  = \$278 ;
  assign \$rdata_o[30]$279  = \$procmux$15592_Y ;
  assign \$procmux$15626_CMP  = \$269 ;
  assign \$rdata_o[29]$270  = \$procmux$15625_Y ;
  assign \$procmux$15658_CMP  = \$260 ;
  assign \$rdata_o[28]$261  = \$procmux$15657_Y ;
  assign \$procmux$15689_CMP  = \$251 ;
  assign \$rdata_o[27]$252  = \$procmux$15688_Y ;
  assign \$procmux$15719_CMP  = \$242 ;
  assign \$rdata_o[26]$243  = \$procmux$15718_Y ;
  assign \$procmux$15748_CMP  = \$233 ;
  assign \$rdata_o[25]$234  = \$procmux$15747_Y ;
  assign \$procmux$15776_CMP  = \$224 ;
  assign \$rdata_o[24]$225  = \$procmux$15775_Y ;
  assign \$procmux$15803_CMP  = \$215 ;
  assign \$rdata_o[23]$216  = \$procmux$15802_Y ;
  assign \$procmux$15829_CMP  = \$206 ;
  assign \$rdata_o[22]$207  = \$procmux$15828_Y ;
  assign \$procmux$15854_CMP  = \$197 ;
  assign \$rdata_o[21]$198  = \$procmux$15853_Y ;
  assign \$procmux$15878_CMP  = \$188 ;
  assign \$rdata_o[20]$189  = \$procmux$15877_Y ;
  assign \$procmux$15901_CMP  = \$179 ;
  assign \$rdata_o[19]$180  = \$procmux$15900_Y ;
  assign \$procmux$15923_CMP  = \$170 ;
  assign \$rdata_o[18]$171  = \$procmux$15922_Y ;
  assign \$procmux$15944_CMP  = \$161 ;
  assign \$rdata_o[17]$162  = \$procmux$15943_Y ;
  assign \$procmux$15964_CMP  = \$152 ;
  assign \$rdata_o[16]$153  = \$procmux$15963_Y ;
  assign \$procmux$15983_CMP  = \$143 ;
  assign \$rdata_o[15]$144  = \$procmux$15982_Y ;
  assign \$procmux$16001_CMP  = \$134 ;
  assign \$rdata_o[14]$135  = \$procmux$16000_Y ;
  assign \$procmux$16018_CMP  = \$125 ;
  assign \$rdata_o[13]$126  = \$procmux$16017_Y ;
  assign \$procmux$16034_CMP  = \$116 ;
  assign \$rdata_o[12]$117  = \$procmux$16033_Y ;
  assign \$procmux$16049_CMP  = \$107 ;
  assign \$rdata_o[11]$108  = \$procmux$16048_Y ;
  assign \$procmux$16063_CMP  = \$98 ;
  assign \$rdata_o[10]$99  = \$procmux$16062_Y ;
  assign \$procmux$16076_CMP  = \$89 ;
  assign \$rdata_o[9]$90  = \$procmux$16075_Y ;
  assign \$procmux$16088_CMP  = \$80 ;
  assign \$rdata_o[8]$81  = \$procmux$16087_Y ;
  assign \$procmux$16099_CMP  = \$71 ;
  assign \$rdata_o[7]$72  = \$procmux$16098_Y ;
  assign \$procmux$16109_CMP  = \$62 ;
  assign \$rdata_o[6]$63  = \$procmux$16108_Y ;
  assign \$procmux$16118_CMP  = \$53 ;
  assign \$rdata_o[5]$54  = \$procmux$16117_Y ;
  assign \$procmux$16126_CMP  = \$44 ;
  assign \$rdata_o[4]$45  = \$procmux$16125_Y ;
  assign \$procmux$16133_CMP  = \$35 ;
  assign \$rdata_o[3]$36  = \$procmux$16132_Y ;
  assign \$procmux$16139_CMP  = \$26 ;
  assign \$rdata_o[2]$27  = \$procmux$16138_Y ;
  assign \$procmux$16144_CMP  = \$17 ;
  assign \$rdata_o[1]$18  = \$procmux$16143_Y ;
  assign \$procmux$16148_CMP  = \$8 ;
  assign \$rdata_o[0]$9  = \$procmux$16147_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$18  = rst_ni;
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$11 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$128 ;
  wire \$13 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$146 ;
  wire \$148 ;
  wire \$15 ;
  wire \$150 ;
  wire \$152 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$17 ;
  wire \$170 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$2 ;
  wire \$20 ;
  wire \$200 ;
  wire \$202 ;
  wire \$204 ;
  wire \$206 ;
  wire \$209 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$218 ;
  wire \$22 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$242 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$251 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$26 ;
  wire \$260 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire \$281 ;
  wire \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$29 ;
  wire \$293 ;
  wire \$295 ;
  wire \$298 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$38 ;
  wire \$4 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$auto$rtlil.cc:2965:LogicNot$21 ;
  wire \$auto$rtlil.cc:2965:LogicNot$22 ;
  /* src = "ihp13/tc_sram_impl.sv:248.12-248.46" */
  wire \$gen_512x32xBx1.sel_q$296 ;
  wire \$procmux$14961_Y ;
  wire \$procmux$14962_CMP ;
  wire \$procmux$14964_Y ;
  wire \$procmux$14965_CMP ;
  wire \$procmux$14998_Y ;
  wire \$procmux$14999_CMP ;
  wire \$procmux$15031_Y ;
  wire \$procmux$15032_CMP ;
  wire \$procmux$15063_Y ;
  wire \$procmux$15064_CMP ;
  wire \$procmux$15094_Y ;
  wire \$procmux$15095_CMP ;
  wire \$procmux$15124_Y ;
  wire \$procmux$15125_CMP ;
  wire \$procmux$15153_Y ;
  wire \$procmux$15154_CMP ;
  wire \$procmux$15181_Y ;
  wire \$procmux$15182_CMP ;
  wire \$procmux$15208_Y ;
  wire \$procmux$15209_CMP ;
  wire \$procmux$15234_Y ;
  wire \$procmux$15235_CMP ;
  wire \$procmux$15259_Y ;
  wire \$procmux$15260_CMP ;
  wire \$procmux$15283_Y ;
  wire \$procmux$15284_CMP ;
  wire \$procmux$15306_Y ;
  wire \$procmux$15307_CMP ;
  wire \$procmux$15328_Y ;
  wire \$procmux$15329_CMP ;
  wire \$procmux$15349_Y ;
  wire \$procmux$15350_CMP ;
  wire \$procmux$15369_Y ;
  wire \$procmux$15370_CMP ;
  wire \$procmux$15388_Y ;
  wire \$procmux$15389_CMP ;
  wire \$procmux$15406_Y ;
  wire \$procmux$15407_CMP ;
  wire \$procmux$15423_Y ;
  wire \$procmux$15424_CMP ;
  wire \$procmux$15439_Y ;
  wire \$procmux$15440_CMP ;
  wire \$procmux$15454_Y ;
  wire \$procmux$15455_CMP ;
  wire \$procmux$15468_Y ;
  wire \$procmux$15469_CMP ;
  wire \$procmux$15481_Y ;
  wire \$procmux$15482_CMP ;
  wire \$procmux$15493_Y ;
  wire \$procmux$15494_CMP ;
  wire \$procmux$15504_Y ;
  wire \$procmux$15505_CMP ;
  wire \$procmux$15514_Y ;
  wire \$procmux$15515_CMP ;
  wire \$procmux$15523_Y ;
  wire \$procmux$15524_CMP ;
  wire \$procmux$15531_Y ;
  wire \$procmux$15532_CMP ;
  wire \$procmux$15538_Y ;
  wire \$procmux$15539_CMP ;
  wire \$procmux$15544_Y ;
  wire \$procmux$15545_CMP ;
  wire \$procmux$15549_Y ;
  wire \$procmux$15550_CMP ;
  wire \$procmux$15553_Y ;
  wire \$procmux$15554_CMP ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[0]$9 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[10]$99 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[11]$108 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[12]$117 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[13]$126 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[14]$135 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[15]$144 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[16]$153 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[17]$162 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[18]$171 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[19]$180 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[1]$18 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[20]$189 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[21]$198 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[22]$207 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[23]$216 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[24]$225 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[25]$234 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[26]$243 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[27]$252 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[28]$261 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[29]$270 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[2]$27 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[30]$279 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[31]$288 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[3]$36 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[4]$45 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[5]$54 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[6]$63 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[7]$72 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[8]$81 ;
  /* src = "ihp13/tc_sram_impl.sv:235.11-239.14" */
  wire \$rdata_o[9]$90 ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$2 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(addr_i[0]),
    .Y(\$11 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(addr_i[0]),
    .Y(\$101 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(bm[11]),
    .B(\$101 ),
    .Y(\$103 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(bm[11]),
    .B(addr_i[0]),
    .Y(\$105 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$107 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(addr_i[0]),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(bm[12]),
    .B(\$110 ),
    .Y(\$112 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(bm[12]),
    .B(addr_i[0]),
    .Y(\$114 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$116 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(addr_i[0]),
    .Y(\$119 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(bm[1]),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(bm[13]),
    .B(\$119 ),
    .Y(\$121 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(bm[13]),
    .B(addr_i[0]),
    .Y(\$123 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$125 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(addr_i[0]),
    .Y(\$128 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$129  (
    .A(bm[14]),
    .B(\$128 ),
    .Y(\$130 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(bm[14]),
    .B(addr_i[0]),
    .Y(\$132 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$134 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(addr_i[0]),
    .Y(\$137 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(bm[15]),
    .B(\$137 ),
    .Y(\$139 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(bm[1]),
    .B(addr_i[0]),
    .Y(\$15 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(bm[15]),
    .B(addr_i[0]),
    .Y(\$141 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$143 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(addr_i[0]),
    .Y(\$146 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(bm[16]),
    .B(\$146 ),
    .Y(\$148 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(bm[16]),
    .B(addr_i[0]),
    .Y(\$150 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(addr_i[0]),
    .Y(\$155 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(bm[17]),
    .B(\$155 ),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(bm[17]),
    .B(addr_i[0]),
    .Y(\$159 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$17 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$161 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(addr_i[0]),
    .Y(\$164 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(bm[18]),
    .B(\$164 ),
    .Y(\$166 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(bm[18]),
    .B(addr_i[0]),
    .Y(\$168 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$170 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(addr_i[0]),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(bm[19]),
    .B(\$173 ),
    .Y(\$175 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(bm[19]),
    .B(addr_i[0]),
    .Y(\$177 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$179 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(addr_i[0]),
    .Y(\$182 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(bm[20]),
    .B(\$182 ),
    .Y(\$184 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(bm[20]),
    .B(addr_i[0]),
    .Y(\$186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$188 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i[0]),
    .Y(\$20 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(addr_i[0]),
    .Y(\$191 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(bm[21]),
    .B(\$191 ),
    .Y(\$193 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$194  (
    .A(bm[21]),
    .B(addr_i[0]),
    .Y(\$195 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$197 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(addr_i[0]),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(bm[22]),
    .B(\$200 ),
    .Y(\$202 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$203  (
    .A(bm[22]),
    .B(addr_i[0]),
    .Y(\$204 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$206 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(addr_i[0]),
    .Y(\$209 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(bm[2]),
    .B(\$20 ),
    .Y(\$22 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(bm[23]),
    .B(\$209 ),
    .Y(\$211 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(bm[23]),
    .B(addr_i[0]),
    .Y(\$213 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$215 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(addr_i[0]),
    .Y(\$218 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(bm[24]),
    .B(\$218 ),
    .Y(\$220 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(bm[24]),
    .B(addr_i[0]),
    .Y(\$222 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$224 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(addr_i[0]),
    .Y(\$227 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(bm[25]),
    .B(\$227 ),
    .Y(\$229 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(bm[2]),
    .B(addr_i[0]),
    .Y(\$24 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(bm[25]),
    .B(addr_i[0]),
    .Y(\$231 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$233 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(addr_i[0]),
    .Y(\$236 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(bm[26]),
    .B(\$236 ),
    .Y(\$238 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(bm[26]),
    .B(addr_i[0]),
    .Y(\$240 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$241  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$242 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(addr_i[0]),
    .Y(\$245 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(bm[27]),
    .B(\$245 ),
    .Y(\$247 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(bm[27]),
    .B(addr_i[0]),
    .Y(\$249 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$26 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$250  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$251 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$253  (
    .A(addr_i[0]),
    .Y(\$254 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$255  (
    .A(bm[28]),
    .B(\$254 ),
    .Y(\$256 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(bm[28]),
    .B(addr_i[0]),
    .Y(\$258 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$260 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$262  (
    .A(addr_i[0]),
    .Y(\$263 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$264  (
    .A(bm[29]),
    .B(\$263 ),
    .Y(\$265 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$266  (
    .A(bm[29]),
    .B(addr_i[0]),
    .Y(\$267 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$268  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$269 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$271  (
    .A(addr_i[0]),
    .Y(\$272 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$273  (
    .A(bm[30]),
    .B(\$272 ),
    .Y(\$274 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(bm[30]),
    .B(addr_i[0]),
    .Y(\$276 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$277  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$278 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(addr_i[0]),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$280  (
    .A(addr_i[0]),
    .Y(\$281 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$282  (
    .A(bm[31]),
    .B(\$281 ),
    .Y(\$283 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$284  (
    .A(bm[31]),
    .B(addr_i[0]),
    .Y(\$285 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$286  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$287 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$290  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$21 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(we_i),
    .Y(\$293 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(req_i),
    .B(\$293 ),
    .Y(\$295 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(we_i),
    .Y(\$298 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(bm[0]),
    .B(\$2 ),
    .Y(\$4 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(bm[3]),
    .B(\$29 ),
    .Y(\$31 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(bm[3]),
    .B(addr_i[0]),
    .Y(\$33 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$35 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(addr_i[0]),
    .Y(\$38 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(bm[4]),
    .B(\$38 ),
    .Y(\$40 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(bm[4]),
    .B(addr_i[0]),
    .Y(\$42 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$44 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(addr_i[0]),
    .Y(\$47 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(bm[5]),
    .B(\$47 ),
    .Y(\$49 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(bm[0]),
    .B(addr_i[0]),
    .Y(\$6 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(bm[5]),
    .B(addr_i[0]),
    .Y(\$51 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$53 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_i[0]),
    .Y(\$56 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(bm[6]),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(bm[6]),
    .B(addr_i[0]),
    .Y(\$60 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$62 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(addr_i[0]),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(bm[7]),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(bm[7]),
    .B(addr_i[0]),
    .Y(\$69 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$8 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$71 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(addr_i[0]),
    .Y(\$74 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(bm[8]),
    .B(\$74 ),
    .Y(\$76 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(bm[8]),
    .B(addr_i[0]),
    .Y(\$78 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$80 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(addr_i[0]),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(bm[9]),
    .B(\$83 ),
    .Y(\$85 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(bm[9]),
    .B(addr_i[0]),
    .Y(\$87 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$89 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(addr_i[0]),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(bm[10]),
    .B(\$92 ),
    .Y(\$94 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(bm[10]),
    .B(addr_i[0]),
    .Y(\$96 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\gen_512x32xBx1.sel_q ),
    .Y(\$98 )
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_512x32xBx1.sel_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$gen_512x32xBx1.sel_q$296 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* src = "ihp13/tc_sram_impl.sv:248.31-248.46|ihp13/tc_sram_impl.sv:248.12-248.46" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14961  (
    .A(\gen_512x32xBx1.sel_q ),
    .B(addr_i[0]),
    .S(\$procmux$14962_CMP ),
    .Y(\$procmux$14961_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14964  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$14964_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14998  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$14998_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15031  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15031_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15063  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15063_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15094  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15094_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15124  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15124_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15153  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15153_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15181  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15181_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15208  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15208_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15234  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15234_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15259  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15259_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15283  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15283_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15306  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15306_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15328  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15328_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15349  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15349_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15369  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15369_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15388  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15388_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15406  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15406_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15423  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15423_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15439  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15439_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15454  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15454_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15468  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15468_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15481  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15481_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15493  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15493_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15504  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15504_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15514  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15514_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15523  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15523_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15531  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15531_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15538  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15538_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15544  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15544_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15549  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15549_Y )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15553  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(\$procmux$15553_Y )
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM(\gen_512x32xBx1.bm64 ),
    .A_CLK(clk_i),
    .A_DIN(\gen_512x32xBx1.wdata64 ),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$298 ),
    .A_WEN(we_i)
  );
  assign bm[0] = be_i[0];
  assign bm[1] = be_i[0];
  assign bm[2] = be_i[0];
  assign bm[3] = be_i[0];
  assign bm[4] = be_i[0];
  assign bm[5] = be_i[0];
  assign bm[6] = be_i[0];
  assign bm[7] = be_i[0];
  assign bm[8] = be_i[1];
  assign bm[9] = be_i[1];
  assign bm[10] = be_i[1];
  assign bm[11] = be_i[1];
  assign bm[12] = be_i[1];
  assign bm[13] = be_i[1];
  assign bm[14] = be_i[1];
  assign bm[15] = be_i[1];
  assign bm[16] = be_i[2];
  assign bm[17] = be_i[2];
  assign bm[18] = be_i[2];
  assign bm[19] = be_i[2];
  assign bm[20] = be_i[2];
  assign bm[21] = be_i[2];
  assign bm[22] = be_i[2];
  assign bm[23] = be_i[2];
  assign bm[24] = be_i[3];
  assign bm[25] = be_i[3];
  assign bm[26] = be_i[3];
  assign bm[27] = be_i[3];
  assign bm[28] = be_i[3];
  assign bm[29] = be_i[3];
  assign bm[30] = be_i[3];
  assign bm[31] = be_i[3];
  assign impl_o = 1'hx;
  assign rdata_o = { \$rdata_o[31]$288 , \$rdata_o[30]$279 , \$rdata_o[29]$270 , \$rdata_o[28]$261 , \$rdata_o[27]$252 , \$rdata_o[26]$243 , \$rdata_o[25]$234 , \$rdata_o[24]$225 , \$rdata_o[23]$216 , \$rdata_o[22]$207 , \$rdata_o[21]$198 , \$rdata_o[20]$189 , \$rdata_o[19]$180 , \$rdata_o[18]$171 , \$rdata_o[17]$162 , \$rdata_o[16]$153 , \$rdata_o[15]$144 , \$rdata_o[14]$135 , \$rdata_o[13]$126 , \$rdata_o[12]$117 , \$rdata_o[11]$108 , \$rdata_o[10]$99 , \$rdata_o[9]$90 , \$rdata_o[8]$81 , \$rdata_o[7]$72 , \$rdata_o[6]$63 , \$rdata_o[5]$54 , \$rdata_o[4]$45 , \$rdata_o[3]$36 , \$rdata_o[2]$27 , \$rdata_o[1]$18 , \$rdata_o[0]$9  };
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign \gen_512x32xBx1.bm64  = { \$285 , \$283 , \$276 , \$274 , \$267 , \$265 , \$258 , \$256 , \$249 , \$247 , \$240 , \$238 , \$231 , \$229 , \$222 , \$220 , \$213 , \$211 , \$204 , \$202 , \$195 , \$193 , \$186 , \$184 , \$177 , \$175 , \$168 , \$166 , \$159 , \$157 , \$150 , \$148 , \$141 , \$139 , \$132 , \$130 , \$123 , \$121 , \$114 , \$112 , \$105 , \$103 , \$96 , \$94 , \$87 , \$85 , \$78 , \$76 , \$69 , \$67 , \$60 , \$58 , \$51 , \$49 , \$42 , \$40 , \$33 , \$31 , \$24 , \$22 , \$15 , \$13 , \$6 , \$4  };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \$procmux$14962_CMP  = \$295 ;
  assign \$gen_512x32xBx1.sel_q$296  = \$procmux$14961_Y ;
  assign \$procmux$14965_CMP  = \$287 ;
  assign \$rdata_o[31]$288  = \$procmux$14964_Y ;
  assign \$procmux$14999_CMP  = \$278 ;
  assign \$rdata_o[30]$279  = \$procmux$14998_Y ;
  assign \$procmux$15032_CMP  = \$269 ;
  assign \$rdata_o[29]$270  = \$procmux$15031_Y ;
  assign \$procmux$15064_CMP  = \$260 ;
  assign \$rdata_o[28]$261  = \$procmux$15063_Y ;
  assign \$procmux$15095_CMP  = \$251 ;
  assign \$rdata_o[27]$252  = \$procmux$15094_Y ;
  assign \$procmux$15125_CMP  = \$242 ;
  assign \$rdata_o[26]$243  = \$procmux$15124_Y ;
  assign \$procmux$15154_CMP  = \$233 ;
  assign \$rdata_o[25]$234  = \$procmux$15153_Y ;
  assign \$procmux$15182_CMP  = \$224 ;
  assign \$rdata_o[24]$225  = \$procmux$15181_Y ;
  assign \$procmux$15209_CMP  = \$215 ;
  assign \$rdata_o[23]$216  = \$procmux$15208_Y ;
  assign \$procmux$15235_CMP  = \$206 ;
  assign \$rdata_o[22]$207  = \$procmux$15234_Y ;
  assign \$procmux$15260_CMP  = \$197 ;
  assign \$rdata_o[21]$198  = \$procmux$15259_Y ;
  assign \$procmux$15284_CMP  = \$188 ;
  assign \$rdata_o[20]$189  = \$procmux$15283_Y ;
  assign \$procmux$15307_CMP  = \$179 ;
  assign \$rdata_o[19]$180  = \$procmux$15306_Y ;
  assign \$procmux$15329_CMP  = \$170 ;
  assign \$rdata_o[18]$171  = \$procmux$15328_Y ;
  assign \$procmux$15350_CMP  = \$161 ;
  assign \$rdata_o[17]$162  = \$procmux$15349_Y ;
  assign \$procmux$15370_CMP  = \$152 ;
  assign \$rdata_o[16]$153  = \$procmux$15369_Y ;
  assign \$procmux$15389_CMP  = \$143 ;
  assign \$rdata_o[15]$144  = \$procmux$15388_Y ;
  assign \$procmux$15407_CMP  = \$134 ;
  assign \$rdata_o[14]$135  = \$procmux$15406_Y ;
  assign \$procmux$15424_CMP  = \$125 ;
  assign \$rdata_o[13]$126  = \$procmux$15423_Y ;
  assign \$procmux$15440_CMP  = \$116 ;
  assign \$rdata_o[12]$117  = \$procmux$15439_Y ;
  assign \$procmux$15455_CMP  = \$107 ;
  assign \$rdata_o[11]$108  = \$procmux$15454_Y ;
  assign \$procmux$15469_CMP  = \$98 ;
  assign \$rdata_o[10]$99  = \$procmux$15468_Y ;
  assign \$procmux$15482_CMP  = \$89 ;
  assign \$rdata_o[9]$90  = \$procmux$15481_Y ;
  assign \$procmux$15494_CMP  = \$80 ;
  assign \$rdata_o[8]$81  = \$procmux$15493_Y ;
  assign \$procmux$15505_CMP  = \$71 ;
  assign \$rdata_o[7]$72  = \$procmux$15504_Y ;
  assign \$procmux$15515_CMP  = \$62 ;
  assign \$rdata_o[6]$63  = \$procmux$15514_Y ;
  assign \$procmux$15524_CMP  = \$53 ;
  assign \$rdata_o[5]$54  = \$procmux$15523_Y ;
  assign \$procmux$15532_CMP  = \$44 ;
  assign \$rdata_o[4]$45  = \$procmux$15531_Y ;
  assign \$procmux$15539_CMP  = \$35 ;
  assign \$rdata_o[3]$36  = \$procmux$15538_Y ;
  assign \$procmux$15545_CMP  = \$26 ;
  assign \$rdata_o[2]$27  = \$procmux$15544_Y ;
  assign \$procmux$15550_CMP  = \$17 ;
  assign \$rdata_o[1]$18  = \$procmux$15549_Y ;
  assign \$procmux$15554_CMP  = \$8 ;
  assign \$rdata_o[0]$9  = \$procmux$15553_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$22  = rst_ni;
endmodule

/* src = "rtl/timer_unit/timer_unit.sv:37.8" */
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, addr_i, wdata_i, be_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o);
  wire \$101 ;
  wire \$106 ;
  wire \$109 ;
  wire \$116 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$131 ;
  wire \$133 ;
  wire \$136 ;
  wire \$138 ;
  wire \$140 ;
  wire \$142 ;
  wire \$144 ;
  wire \$150 ;
  wire \$152 ;
  wire \$154 ;
  wire \$156 ;
  wire \$158 ;
  wire \$160 ;
  wire \$162 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$179 ;
  wire \$181 ;
  wire \$184 ;
  wire \$186 ;
  wire \$19 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$198 ;
  wire \$200 ;
  wire \$202 ;
  wire \$204 ;
  wire \$206 ;
  wire \$208 ;
  wire \$218 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$226 ;
  wire \$228 ;
  wire \$230 ;
  wire \$232 ;
  wire \$234 ;
  wire \$236 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$299 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$314 ;
  wire \$316 ;
  wire \$318 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$328 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  /* src = "rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  wire [1:0] \$NS$10 ;
  /* src = "rtl/timer_unit/timer_unit.sv:116.9-119.20" */
  wire [1:0] \$NS$6 ;
  /* src = "rtl/timer_unit/timer_unit.sv:125.9-128.20" */
  wire [1:0] \$NS$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$159 ;
  wire \$auto$rtlil.cc:2965:LogicNot$160 ;
  wire \$auto$rtlil.cc:2965:LogicNot$161 ;
  wire \$auto$rtlil.cc:2965:LogicNot$162 ;
  wire \$auto$rtlil.cc:2965:LogicNot$163 ;
  wire \$auto$rtlil.cc:2965:LogicNot$164 ;
  wire \$auto$rtlil.cc:2965:LogicNot$165 ;
  wire \$auto$rtlil.cc:2965:LogicNot$166 ;
  wire \$auto$rtlil.cc:3092:Mux$167 ;
  wire \$auto$rtlil.cc:3092:Mux$168 ;
  /* src = "rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  wire \$irq_hi_o$309 ;
  /* src = "rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  wire \$irq_lo_o$308 ;
  wire [31:0] \$procmux$14331_Y ;
  wire \$procmux$14332_CMP ;
  wire \$procmux$14333_CMP ;
  wire \$procmux$14334_CMP ;
  wire \$procmux$14335_CMP ;
  wire \$procmux$14336_CMP ;
  wire \$procmux$14337_CMP ;
  wire [31:0] \$procmux$14338_Y ;
  wire \$procmux$14339_CMP ;
  wire [31:0] \$procmux$14341_Y ;
  wire \$procmux$14342_CMP ;
  wire \$procmux$14344_Y ;
  wire \$procmux$14345_CMP ;
  wire \$procmux$14347_Y ;
  wire \$procmux$14348_CMP ;
  wire \$procmux$14349_Y ;
  wire \$procmux$14350_CMP ;
  wire \$procmux$14355_Y ;
  wire \$procmux$14356_CMP ;
  wire \$procmux$14360_Y ;
  wire \$procmux$14361_CMP ;
  wire \$procmux$14363_Y ;
  wire \$procmux$14364_CMP ;
  wire \$procmux$14366_Y ;
  wire \$procmux$14367_CMP ;
  wire \$procmux$14372_Y ;
  wire \$procmux$14373_CMP ;
  wire \$procmux$14375_Y ;
  wire \$procmux$14376_CMP ;
  wire \$procmux$14381_Y ;
  wire \$procmux$14382_CMP ;
  wire \$procmux$14385_Y ;
  wire \$procmux$14386_CMP ;
  wire \$procmux$14388_Y ;
  wire \$procmux$14389_CMP ;
  wire \$procmux$14391_Y ;
  wire \$procmux$14392_CMP ;
  wire \$procmux$14397_Y ;
  wire \$procmux$14398_CMP ;
  wire \$procmux$14400_Y ;
  wire \$procmux$14401_CMP ;
  wire \$procmux$14404_Y ;
  wire \$procmux$14405_CMP ;
  wire \$procmux$14406_Y ;
  wire \$procmux$14407_CMP ;
  wire \$procmux$14409_Y ;
  wire \$procmux$14410_CMP ;
  wire \$procmux$14414_Y ;
  wire \$procmux$14415_CMP ;
  wire [31:0] \$procmux$14421_Y ;
  wire \$procmux$14422_CMP ;
  wire [31:0] \$procmux$14423_Y ;
  wire \$procmux$14424_CMP ;
  wire [31:0] \$procmux$14430_Y ;
  wire \$procmux$14431_CMP ;
  wire [31:0] \$procmux$14432_Y ;
  wire \$procmux$14433_CMP ;
  wire [31:0] \$procmux$14442_Y ;
  wire \$procmux$14443_CMP ;
  wire [31:0] \$procmux$14444_Y ;
  wire \$procmux$14445_CMP ;
  wire [31:0] \$procmux$14455_Y ;
  wire \$procmux$14456_CMP ;
  wire [31:0] \$procmux$14457_Y ;
  wire \$procmux$14458_CMP ;
  wire \$procmux$14459_Y ;
  wire \$procmux$14460_CMP ;
  wire \$procmux$14461_Y ;
  wire \$procmux$14462_CMP ;
  wire \$procmux$14464_Y ;
  wire \$procmux$14465_CMP ;
  wire \$procmux$14466_Y ;
  wire \$procmux$14467_CMP ;
  wire \$procmux$14470_Y ;
  wire \$procmux$14471_CMP ;
  wire \$procmux$14472_Y ;
  wire \$procmux$14473_CMP ;
  wire \$procmux$14477_Y ;
  wire \$procmux$14478_CMP ;
  wire \$procmux$14479_Y ;
  wire \$procmux$14480_CMP ;
  wire \$procmux$14487_Y ;
  wire \$procmux$14488_CMP ;
  wire \$procmux$14489_Y ;
  wire \$procmux$14490_CMP ;
  wire \$procmux$14498_Y ;
  wire \$procmux$14499_CMP ;
  wire \$procmux$14500_Y ;
  wire \$procmux$14501_CMP ;
  wire [31:0] \$procmux$14503_Y ;
  wire \$procmux$14504_CMP ;
  wire [31:0] \$procmux$14506_Y ;
  wire \$procmux$14507_CMP ;
  wire [31:0] \$procmux$14509_Y ;
  wire \$procmux$14510_CMP ;
  wire [31:0] \$procmux$14512_Y ;
  wire \$procmux$14513_CMP ;
  wire \$procmux$14515_Y ;
  wire \$procmux$14516_CMP ;
  wire \$procmux$14518_Y ;
  wire \$procmux$14519_CMP ;
  wire \$procmux$14521_Y ;
  wire \$procmux$14522_CMP ;
  wire \$procmux$14524_Y ;
  wire \$procmux$14525_CMP ;
  wire \$procmux$14527_Y ;
  wire \$procmux$14528_CMP ;
  wire \$procmux$14530_Y ;
  wire \$procmux$14531_CMP ;
  wire \$procmux$14533_Y ;
  wire \$procmux$14534_CMP ;
  wire \$procmux$14536_Y ;
  wire \$procmux$14537_CMP ;
  wire \$procmux$14539_Y ;
  wire \$procmux$14540_CMP ;
  wire \$procmux$14541_Y ;
  wire \$procmux$14542_CMP ;
  wire \$procmux$14546_Y ;
  wire \$procmux$14547_CMP ;
  wire \$procmux$14549_Y ;
  wire \$procmux$14550_CMP ;
  wire \$procmux$14552_Y ;
  wire \$procmux$14553_CMP ;
  wire \$procmux$14554_Y ;
  wire \$procmux$14555_CMP ;
  wire \$procmux$14561_Y ;
  wire \$procmux$14562_CMP ;
  wire \$procmux$14564_Y ;
  wire \$procmux$14565_CMP ;
  wire \$procmux$14566_Y ;
  wire \$procmux$14567_CMP ;
  wire \$procmux$14572_Y ;
  wire \$procmux$14573_CMP ;
  wire \$procmux$14575_Y ;
  wire \$procmux$14576_CMP ;
  wire \$procmux$14577_Y ;
  wire \$procmux$14578_CMP ;
  wire \$procmux$14583_Y ;
  wire \$procmux$14584_CMP ;
  wire \$procmux$14586_Y ;
  wire \$procmux$14587_CMP ;
  wire \$procmux$14588_Y ;
  wire \$procmux$14589_CMP ;
  wire \$procmux$14594_Y ;
  wire \$procmux$14595_CMP ;
  wire \$procmux$14597_Y ;
  wire \$procmux$14598_CMP ;
  wire \$procmux$14599_Y ;
  wire \$procmux$14600_CMP ;
  wire \$procmux$14605_Y ;
  wire \$procmux$14606_CMP ;
  wire \$procmux$14607_Y ;
  wire \$procmux$14608_CMP ;
  wire \$procmux$14613_Y ;
  wire \$procmux$14614_CMP ;
  wire \$procmux$14615_Y ;
  wire \$procmux$14616_CMP ;
  wire \$procmux$14621_Y ;
  wire \$procmux$14622_CMP ;
  wire \$procmux$14623_Y ;
  wire \$procmux$14624_CMP ;
  wire \$procmux$14628_Y ;
  wire \$procmux$14629_CMP ;
  wire \$procmux$14633_Y ;
  wire \$procmux$14634_CMP ;
  wire \$procmux$14638_Y ;
  wire \$procmux$14639_CMP ;
  wire \$procmux$14643_Y ;
  wire \$procmux$14644_CMP ;
  wire \$procmux$14646_Y ;
  wire \$procmux$14647_CMP ;
  wire \$procmux$14649_Y ;
  wire \$procmux$14650_CMP ;
  wire \$procmux$14651_Y ;
  wire \$procmux$14652_CMP ;
  wire \$procmux$14657_Y ;
  wire \$procmux$14658_CMP ;
  wire \$procmux$14660_Y ;
  wire \$procmux$14661_CMP ;
  wire \$procmux$14662_Y ;
  wire \$procmux$14663_CMP ;
  wire \$procmux$14667_Y ;
  wire \$procmux$14668_CMP ;
  wire \$procmux$14670_Y ;
  wire \$procmux$14671_CMP ;
  wire \$procmux$14672_Y ;
  wire \$procmux$14673_CMP ;
  wire \$procmux$14677_Y ;
  wire \$procmux$14678_CMP ;
  wire \$procmux$14680_Y ;
  wire \$procmux$14681_CMP ;
  wire \$procmux$14682_Y ;
  wire \$procmux$14683_CMP ;
  wire \$procmux$14687_Y ;
  wire \$procmux$14688_CMP ;
  wire \$procmux$14689_Y ;
  wire \$procmux$14690_CMP ;
  wire \$procmux$14694_Y ;
  wire \$procmux$14695_CMP ;
  wire \$procmux$14696_Y ;
  wire \$procmux$14697_CMP ;
  wire \$procmux$14700_Y ;
  wire \$procmux$14701_CMP ;
  wire \$procmux$14704_Y ;
  wire \$procmux$14705_CMP ;
  wire \$procmux$14708_Y ;
  wire \$procmux$14709_CMP ;
  wire \$procmux$14711_Y ;
  wire \$procmux$14712_CMP ;
  wire \$procmux$14714_Y ;
  wire \$procmux$14715_CMP ;
  wire \$procmux$14716_Y ;
  wire \$procmux$14717_CMP ;
  wire \$procmux$14721_Y ;
  wire \$procmux$14722_CMP ;
  wire \$procmux$14724_Y ;
  wire \$procmux$14725_CMP ;
  wire \$procmux$14726_Y ;
  wire \$procmux$14727_CMP ;
  wire \$procmux$14730_Y ;
  wire \$procmux$14731_CMP ;
  wire \$procmux$14733_Y ;
  wire \$procmux$14734_CMP ;
  wire \$procmux$14735_Y ;
  wire \$procmux$14736_CMP ;
  wire \$procmux$14739_Y ;
  wire \$procmux$14740_CMP ;
  wire \$procmux$14742_Y ;
  wire \$procmux$14743_CMP ;
  wire \$procmux$14744_Y ;
  wire \$procmux$14745_CMP ;
  wire \$procmux$14748_Y ;
  wire \$procmux$14749_CMP ;
  wire \$procmux$14750_Y ;
  wire \$procmux$14751_CMP ;
  wire \$procmux$14754_Y ;
  wire \$procmux$14755_CMP ;
  wire \$procmux$14756_Y ;
  wire \$procmux$14757_CMP ;
  wire \$procmux$14759_Y ;
  wire \$procmux$14760_CMP ;
  wire \$procmux$14762_Y ;
  wire \$procmux$14763_CMP ;
  wire [1:0] \$procmux$14766_Y ;
  wire \$procmux$14767_CMP ;
  wire [1:0] \$procmux$14768_Y ;
  wire \$procmux$14769_CMP ;
  wire [1:0] \$procmux$14772_Y ;
  wire \$procmux$14773_CMP ;
  wire \$procmux$14775_CMP ;
  wire [1:0] \$procmux$14779_Y ;
  wire \$procmux$14780_CMP ;
  wire [1:0] \$procmux$14781_Y ;
  wire \$procmux$14782_CMP ;
  wire \$procmux$14785_Y ;
  wire \$procmux$14786_CMP ;
  wire \$procmux$14787_Y ;
  wire \$procmux$14788_CMP ;
  wire \$procmux$14792_Y ;
  wire \$procmux$14793_CMP ;
  wire \$procmux$14796_Y ;
  wire \$procmux$14797_CMP ;
  wire \$procmux$14799_Y ;
  wire \$procmux$14800_CMP ;
  wire \$procmux$14802_Y ;
  wire \$procmux$14803_CMP ;
  wire \$procmux$14808_Y ;
  wire \$procmux$14809_CMP ;
  wire \$procmux$14811_Y ;
  wire \$procmux$14812_CMP ;
  wire \$procmux$14815_Y ;
  wire \$procmux$14816_CMP ;
  wire \$procmux$14817_Y ;
  wire \$procmux$14818_CMP ;
  wire \$procmux$14820_Y ;
  wire \$procmux$14821_CMP ;
  wire \$procmux$14825_Y ;
  wire \$procmux$14826_CMP ;
  wire \$procmux$14829_Y ;
  wire \$procmux$14830_CMP ;
  wire \$procmux$14832_Y ;
  wire \$procmux$14833_CMP ;
  wire \$procmux$14835_Y ;
  wire \$procmux$14836_CMP ;
  wire \$procmux$14838_Y ;
  wire \$procmux$14839_CMP ;
  wire \$procmux$14843_Y ;
  wire \$procmux$14844_CMP ;
  wire \$procmux$14846_Y ;
  wire \$procmux$14847_CMP ;
  wire \$procmux$14849_Y ;
  wire \$procmux$14850_CMP ;
  wire \$procmux$14851_Y ;
  wire \$procmux$14852_CMP ;
  wire \$procmux$14854_Y ;
  wire \$procmux$14855_CMP ;
  wire \$procmux$14858_Y ;
  wire \$procmux$14859_CMP ;
  wire \$procmux$14861_Y ;
  wire \$procmux$14862_CMP ;
  /* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  wire [31:0] \$r_rdata_o$117 ;
  /* src = "rtl/timer_unit/timer_unit.sv:282.9-307.14" */
  wire [31:0] \$r_rdata_o$118 ;
  /* src = "rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  wire \$r_valid_o$11 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire [31:0] \$s_cfg_hi$27 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire [31:0] \$s_cfg_hi$37 ;
  /* src = "rtl/timer_unit/timer_unit.sv:243.7-244.37" */
  wire \$s_cfg_hi[0]$102 ;
  /* src = "rtl/timer_unit/timer_unit.sv:240.7-245.9" */
  wire \$s_cfg_hi[0]$103 ;
  /* src = "rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  wire \$s_cfg_hi[0]$104 ;
  /* src = "rtl/timer_unit/timer_unit.sv:253.2-254.32" */
  wire \$s_cfg_hi[1]$110 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire [31:0] \$s_cfg_lo$26 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire [31:0] \$s_cfg_lo$36 ;
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33" */
  wire \$s_cfg_lo[0]$58 ;
  /* src = "rtl/timer_unit/timer_unit.sv:230.6-231.33" */
  wire \$s_cfg_lo[0]$69 ;
  /* src = "rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  wire \$s_cfg_lo[0]$70 ;
  /* src = "rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  wire \$s_cfg_lo[0]$71 ;
  /* src = "rtl/timer_unit/timer_unit.sv:249.2-250.32" */
  wire \$s_cfg_lo[1]$107 ;
  /* src = "rtl/timer_unit/timer_unit.sv:427.4-436.9" */
  wire \$s_enable_count_hi$237 ;
  /* src = "rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  wire \$s_enable_count_hi$239 ;
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  wire \$s_enable_count_hi$241 ;
  /* src = "rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  wire \$s_enable_count_hi$243 ;
  /* src = "rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  wire \$s_enable_count_hi$286 ;
  /* src = "rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  wire \$s_enable_count_hi$289 ;
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  wire \$s_enable_count_hi$292 ;
  /* src = "rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  wire \$s_enable_count_hi$295 ;
  /* src = "rtl/timer_unit/timer_unit.sv:402.4-411.9" */
  wire \$s_enable_count_lo$209 ;
  /* src = "rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  wire \$s_enable_count_lo$211 ;
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  wire \$s_enable_count_lo$213 ;
  /* src = "rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  wire \$s_enable_count_lo$215 ;
  /* src = "rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  wire \$s_enable_count_lo$285 ;
  /* src = "rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  wire \$s_enable_count_lo$288 ;
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  wire \$s_enable_count_lo$291 ;
  /* src = "rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  wire \$s_enable_count_lo$294 ;
  /* src = "rtl/timer_unit/timer_unit.sv:427.4-436.9" */
  wire \$s_enable_count_prescaler_hi$238 ;
  /* src = "rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  wire \$s_enable_count_prescaler_hi$240 ;
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  wire \$s_enable_count_prescaler_hi$242 ;
  /* src = "rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  wire \$s_enable_count_prescaler_hi$244 ;
  /* src = "rtl/timer_unit/timer_unit.sv:402.4-411.9" */
  wire \$s_enable_count_prescaler_lo$210 ;
  /* src = "rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  wire \$s_enable_count_prescaler_lo$212 ;
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  wire \$s_enable_count_prescaler_lo$214 ;
  /* src = "rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  wire \$s_enable_count_prescaler_lo$216 ;
  /* src = "rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  wire \$s_enable_count_prescaler_lo$287 ;
  /* src = "rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  wire \$s_enable_count_prescaler_lo$290 ;
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  wire \$s_enable_count_prescaler_lo$293 ;
  /* src = "rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  wire \$s_enable_count_prescaler_lo$296 ;
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10" */
  wire \$s_reset_count_hi$163 ;
  /* src = "rtl/timer_unit/timer_unit.sv:362.5-365.10" */
  wire \$s_reset_count_hi$174 ;
  /* src = "rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  wire \$s_reset_count_hi$175 ;
  /* src = "rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  wire \$s_reset_count_hi$176 ;
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10" */
  wire \$s_reset_count_lo$134 ;
  /* src = "rtl/timer_unit/timer_unit.sv:339.6-342.10" */
  wire \$s_reset_count_lo$145 ;
  /* src = "rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  wire \$s_reset_count_lo$146 ;
  /* src = "rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  wire \$s_reset_count_lo$147 ;
  /* src = "rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  wire \$s_reset_count_prescaler_hi$177 ;
  /* src = "rtl/timer_unit/timer_unit.sv:374.2-377.7" */
  wire \$s_reset_count_prescaler_hi$187 ;
  /* src = "rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  wire \$s_reset_count_prescaler_lo$148 ;
  /* src = "rtl/timer_unit/timer_unit.sv:369.2-372.7" */
  wire \$s_reset_count_prescaler_lo$182 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_reset_timer_hi$25 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_reset_timer_hi$35 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_reset_timer_lo$24 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_reset_timer_lo$34 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_start_timer_hi$23 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_start_timer_hi$33 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_start_timer_lo$22 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_start_timer_lo$32 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire [31:0] \$s_timer_cmp_hi$29 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire [31:0] \$s_timer_cmp_hi$39 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire [31:0] \$s_timer_cmp_lo$28 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire [31:0] \$s_timer_cmp_lo$38 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_write_counter_hi$21 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_write_counter_hi$31 ;
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  wire \$s_write_counter_lo$20 ;
  /* src = "rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  wire \$s_write_counter_lo$30 ;
  /* src = "rtl/timer_unit/timer_unit.sv:91.56" */
  wire [1:0] CS;
  /* src = "rtl/timer_unit/timer_unit.sv:91.60" */
  wire [1:0] NS;
  /* src = "rtl/timer_unit/timer_unit.sv:48.39" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/timer_unit/timer_unit.sv:51.39" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/timer_unit/timer_unit.sv:66.39" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/timer_unit/timer_unit.sv:42.39" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:61.39" */
  input event_hi_i;
  wire event_hi_i;
  /* src = "rtl/timer_unit/timer_unit.sv:60.39" */
  input event_lo_i;
  wire event_lo_i;
  /* src = "rtl/timer_unit/timer_unit.sv:53.39" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/timer_unit/timer_unit.sv:52.39" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/timer_unit/timer_unit.sv:64.39" */
  output irq_hi_o;
  wire irq_hi_o;
  /* src = "rtl/timer_unit/timer_unit.sv:63.39" */
  output irq_lo_o;
  wire irq_lo_o;
  /* src = "rtl/timer_unit/timer_unit.sv:57.39" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/timer_unit/timer_unit.sv:56.39" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/timer_unit/timer_unit.sv:58.39" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/timer_unit/timer_unit.sv:55.39" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/timer_unit/timer_unit.sv:45.39" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:47.39" */
  input req_i;
  wire req_i;
  /* src = "rtl/timer_unit/timer_unit.sv:43.39" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit.sv:70.25" */
  wire [31:0] s_addr;
  /* src = "rtl/timer_unit/timer_unit.sv:80.25" */
  wire [31:0] s_cfg_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:80.35" */
  wire [31:0] s_cfg_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:79.25" */
  wire [31:0] s_cfg_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:79.35" */
  wire [31:0] s_cfg_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:89.37" */
  wire s_clear_reset_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:89.19" */
  wire s_clear_reset_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:77.43" */
  wire [31:0] s_counter_val_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:77.25" */
  wire [31:0] s_counter_val_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:86.37" */
  wire s_enable_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.19" */
  wire s_enable_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:86.83" */
  wire s_enable_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.55" */
  wire s_enable_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:75.19" */
  wire s_ref_clk0;
  /* src = "rtl/timer_unit/timer_unit.sv:75.31" */
  wire s_ref_clk1;
  /* src = "rtl/timer_unit/timer_unit.sv:75.43" */
  wire s_ref_clk2;
  /* src = "rtl/timer_unit/timer_unit.sv:75.55" */
  wire s_ref_clk3;
  /* src = "rtl/timer_unit/timer_unit.sv:75.67" */
  wire s_ref_clk_edge;
  /* src = "rtl/timer_unit/timer_unit.sv:75.83" */
  wire s_ref_clk_edge_del;
  /* src = "rtl/timer_unit/timer_unit.sv:69.19" */
  wire s_req;
  /* src = "rtl/timer_unit/timer_unit.sv:87.36" */
  wire s_reset_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.19" */
  wire s_reset_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:87.80" */
  wire s_reset_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.53" */
  wire s_reset_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.70" */
  wire s_reset_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.53" */
  wire s_reset_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.36" */
  wire s_start_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.19" */
  wire s_start_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.39" */
  wire s_target_reached_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.19" */
  wire s_target_reached_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.90" */
  wire s_target_reached_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.59" */
  wire s_target_reached_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:84.25" */
  wire [31:0] s_timer_cmp_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:84.41" */
  wire [31:0] s_timer_cmp_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:83.25" */
  wire [31:0] s_timer_cmp_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:83.41" */
  wire [31:0] s_timer_cmp_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:82.25" */
  wire [31:0] s_timer_val_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:81.25" */
  wire [31:0] s_timer_val_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:69.25" */
  wire s_wen;
  /* src = "rtl/timer_unit/timer_unit.sv:72.39" */
  wire s_write_counter_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:72.19" */
  wire s_write_counter_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:50.39" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/timer_unit/timer_unit.sv:49.39" */
  input wen_i;
  wire wen_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$159 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(\$97 ),
    .B(\$99 ),
    .Y(\$101 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$163 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(s_req),
    .B(s_wen),
    .Y(\$116 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(\$121 ),
    .B(\$123 ),
    .Y(\$125 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(s_cfg_lo_reg[31]),
    .Y(\$127 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$161 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(\$129 ),
    .B(\$131 ),
    .Y(\$133 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(\$136 ),
    .B(\$138 ),
    .Y(\$140 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(\$140 ),
    .B(\$142 ),
    .Y(\$144 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(\$150 ),
    .B(\$152 ),
    .Y(\$154 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(s_cfg_lo_reg[31]),
    .Y(\$156 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(wen_i),
    .Y(\$17 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(\$158 ),
    .B(\$160 ),
    .Y(\$162 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(\$165 ),
    .B(\$167 ),
    .Y(\$169 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(\$169 ),
    .B(\$171 ),
    .Y(\$173 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(req_i),
    .B(\$17 ),
    .Y(\$19 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(s_cfg_lo_reg[6]),
    .B(\$179 ),
    .Y(\$181 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(s_cfg_hi_reg[6]),
    .B(\$184 ),
    .Y(\$186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$192 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(s_cfg_lo_reg[7]),
    .Y(\$194 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$192 ),
    .B(\$194 ),
    .Y(\$196 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$198 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\$198 ),
    .B(\$200 ),
    .Y(\$202 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(\$204 ),
    .B(\$206 ),
    .Y(\$208 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(s_cfg_hi_reg[6]),
    .Y(\$220 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(s_cfg_hi_reg[7]),
    .Y(\$222 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\$220 ),
    .B(\$222 ),
    .Y(\$224 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$225  (
    .A(s_cfg_hi_reg[6]),
    .Y(\$226 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$229  (
    .A(\$226 ),
    .B(\$228 ),
    .Y(\$230 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(\$232 ),
    .B(\$234 ),
    .Y(\$236 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(\$246 ),
    .B(\$248 ),
    .Y(\$250 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$251  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$252 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$253  (
    .A(s_cfg_lo_reg[7]),
    .Y(\$254 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$255  (
    .A(\$252 ),
    .B(\$254 ),
    .Y(\$256 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$258 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$260 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\$260 ),
    .B(\$262 ),
    .Y(\$264 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$266 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$267  (
    .A(s_ref_clk_edge_del),
    .B(\$266 ),
    .Y(\$268 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$273  (
    .A(\$270 ),
    .B(\$272 ),
    .Y(\$274 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(s_target_reached_prescaler_lo),
    .B(s_ref_clk_edge_del),
    .Y(\$276 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$277  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$278 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$279  (
    .A(\$276 ),
    .B(\$278 ),
    .Y(\$280 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$282 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A(s_target_reached_prescaler_lo),
    .B(\$282 ),
    .Y(\$284 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$298  (
    .A(s_cfg_lo_reg[31]),
    .Y(\$299 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$300  (
    .A(s_target_reached_lo),
    .B(s_cfg_lo_reg[2]),
    .Y(\$301 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(s_target_reached_hi),
    .B(s_cfg_hi_reg[2]),
    .Y(\$303 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(s_target_reached_lo),
    .B(s_target_reached_hi),
    .Y(\$305 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(\$305 ),
    .B(s_cfg_lo_reg[2]),
    .Y(\$307 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$311  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$165 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$315  (
    .A(s_ref_clk2),
    .Y(\$316 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$317  (
    .A(\$314 ),
    .B(\$316 ),
    .Y(\$318 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$319  (
    .A(1'h0),
    .B(1'h1),
    .S(\$318 ),
    .Y(\$auto$rtlil.cc:3092:Mux$167 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$322  (
    .A(s_ref_clk3),
    .Y(\$323 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$324  (
    .A(\$321 ),
    .B(\$323 ),
    .Y(\$325 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$326  (
    .A(1'h0),
    .B(1'h1),
    .S(\$325 ),
    .Y(\$auto$rtlil.cc:3092:Mux$168 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$327  (
    .A(s_cfg_hi_reg[0]),
    .B(s_cfg_lo_reg[0]),
    .Y(\$328 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$41 ),
    .B(\$43 ),
    .Y(\$45 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$45 ),
    .B(\$47 ),
    .Y(\$49 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(s_cfg_lo_reg[31]),
    .Y(\$51 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$53 ),
    .B(\$55 ),
    .Y(\$57 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$60 ),
    .B(\$62 ),
    .Y(\$64 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$64 ),
    .B(\$66 ),
    .Y(\$68 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(s_cfg_hi_reg[31]),
    .Y(\$83 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(\$85 ),
    .Y(\$87 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$87 ),
    .B(\$89 ),
    .Y(\$91 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(\$93 ),
    .B(\$95 ),
    .Y(\$97 )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:98.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$CS  (
    .AD(2'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(NS),
    .Q(CS)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_o  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_addr  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(addr_i),
    .Q(s_addr)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_cfg_hi_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_hi),
    .Q(s_cfg_hi_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_cfg_lo_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_lo),
    .Q(s_cfg_lo_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk0  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(ref_clk_i),
    .Q(s_ref_clk0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk1  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk0),
    .Q(s_ref_clk1)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk2  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk1),
    .Q(s_ref_clk2)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk3  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk2),
    .Q(s_ref_clk3)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_req  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_i),
    .Q(s_req)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_timer_cmp_hi_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_timer_cmp_hi),
    .Q(s_timer_cmp_hi_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_timer_cmp_lo_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_timer_cmp_lo),
    .Q(s_timer_cmp_lo_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_wen  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(wen_i),
    .Q(s_wen)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$14331  (
    .A(32'd0),
    .B({ s_cfg_lo_reg, s_cfg_hi_reg, s_timer_val_lo, s_timer_val_hi, s_timer_cmp_lo_reg, s_timer_cmp_hi_reg }),
    .S({ \$procmux$14337_CMP , \$procmux$14336_CMP , \$procmux$14335_CMP , \$procmux$14334_CMP , \$procmux$14333_CMP , \$procmux$14332_CMP  }),
    .Y(\$procmux$14331_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14332_CMP0  (
    .A(s_addr[5:0]),
    .B(6'h14),
    .Y(\$procmux$14332_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:300.18-300.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14333_CMP0  (
    .A(s_addr[5:0]),
    .B(6'h10),
    .Y(\$procmux$14333_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:297.18-297.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14334_CMP0  (
    .A(s_addr[5:0]),
    .B(6'h0c),
    .Y(\$procmux$14334_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:294.18-294.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14335_CMP0  (
    .A(s_addr[5:0]),
    .B(6'h08),
    .Y(\$procmux$14335_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:291.18-291.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14336_CMP0  (
    .A(s_addr[5:0]),
    .B(6'h04),
    .Y(\$procmux$14336_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:288.18-288.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14337_CMP0  (
    .A(s_addr[5:0]),
    .Y(\$procmux$14337_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14338  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14331_Y ),
    .S(\$procmux$14339_CMP ),
    .Y(\$procmux$14338_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14341  (
    .A(32'd0),
    .B(\$r_rdata_o$117 ),
    .S(\$procmux$14342_CMP ),
    .Y(\$procmux$14341_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14344  (
    .A(\$301 ),
    .B(\$307 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14344_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14347  (
    .A(\$303 ),
    .B(1'h0),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14347_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:254.4-254.32|rtl/timer_unit/timer_unit.sv:253.2-254.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14349  (
    .A(\$s_cfg_hi$37 [1]),
    .B(1'h0),
    .S(\$procmux$14350_CMP ),
    .Y(\$procmux$14349_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:250.4-250.32|rtl/timer_unit/timer_unit.sv:249.2-250.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14355  (
    .A(\$s_cfg_lo$36 [1]),
    .B(1'h0),
    .S(\$procmux$14356_CMP ),
    .Y(\$procmux$14355_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:244.11-244.37|rtl/timer_unit/timer_unit.sv:243.7-244.37" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14360  (
    .A(\$s_cfg_hi$37 [0]),
    .B(1'h0),
    .S(\$procmux$14361_CMP ),
    .Y(\$procmux$14360_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14363  (
    .A(\$procmux$14360_Y ),
    .B(1'hx),
    .S(\$procmux$14364_CMP ),
    .Y(\$procmux$14363_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14366  (
    .A(\$procmux$14363_Y ),
    .B(1'hx),
    .S(\$procmux$14367_CMP ),
    .Y(\$procmux$14366_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14372  (
    .A(\$s_cfg_hi[0]$102 ),
    .B(1'h0),
    .S(\$procmux$14373_CMP ),
    .Y(\$procmux$14372_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14375  (
    .A(\$procmux$14372_Y ),
    .B(1'hx),
    .S(\$procmux$14376_CMP ),
    .Y(\$procmux$14375_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14381  (
    .A(\$s_cfg_hi[0]$103 ),
    .B(1'h1),
    .S(\$procmux$14382_CMP ),
    .Y(\$procmux$14381_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:231.7-231.33|rtl/timer_unit/timer_unit.sv:230.6-231.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14385  (
    .A(\$s_cfg_lo$36 [0]),
    .B(1'h0),
    .S(\$procmux$14386_CMP ),
    .Y(\$procmux$14385_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14388  (
    .A(1'hx),
    .B(\$procmux$14385_Y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14388_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14391  (
    .A(\$procmux$14388_Y ),
    .B(1'hx),
    .S(\$procmux$14392_CMP ),
    .Y(\$procmux$14391_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14397  (
    .A(\$s_cfg_lo[0]$58 ),
    .B(\$s_cfg_lo[0]$69 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14397_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14400  (
    .A(\$procmux$14397_Y ),
    .B(1'hx),
    .S(\$procmux$14401_CMP ),
    .Y(\$procmux$14400_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:226.7-226.33|rtl/timer_unit/timer_unit.sv:225.5-226.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14404  (
    .A(\$s_cfg_lo$36 [0]),
    .B(1'h0),
    .S(\$procmux$14405_CMP ),
    .Y(\$procmux$14404_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14406  (
    .A(\$procmux$14404_Y ),
    .B(1'hx),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14406_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14409  (
    .A(\$procmux$14406_Y ),
    .B(1'hx),
    .S(\$procmux$14410_CMP ),
    .Y(\$procmux$14409_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14414  (
    .A(\$s_cfg_lo[0]$70 ),
    .B(1'h1),
    .S(\$procmux$14415_CMP ),
    .Y(\$procmux$14414_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14421  (
    .A(s_timer_cmp_hi_reg),
    .B(wdata_i),
    .S(\$procmux$14422_CMP ),
    .Y(\$procmux$14421_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14422_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h14),
    .Y(\$procmux$14422_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14423  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14421_Y ),
    .S(\$procmux$14424_CMP ),
    .Y(\$procmux$14423_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14430  (
    .A(s_timer_cmp_lo_reg),
    .B(wdata_i),
    .S(\$procmux$14431_CMP ),
    .Y(\$procmux$14430_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14431_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h10),
    .Y(\$procmux$14431_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14432  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14430_Y ),
    .S(\$procmux$14433_CMP ),
    .Y(\$procmux$14432_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14442  (
    .A(s_cfg_hi_reg),
    .B(wdata_i),
    .S(\$procmux$14443_CMP ),
    .Y(\$procmux$14442_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14443_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h04),
    .Y(\$procmux$14443_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14444  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14442_Y ),
    .S(\$procmux$14445_CMP ),
    .Y(\$procmux$14444_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14455  (
    .A(s_cfg_lo_reg),
    .B(wdata_i),
    .S(\$procmux$14456_CMP ),
    .Y(\$procmux$14455_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14456_CMP0  (
    .A(addr_i[5:0]),
    .Y(\$procmux$14456_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14457  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14455_Y ),
    .S(\$procmux$14458_CMP ),
    .Y(\$procmux$14457_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14459  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14460_CMP ),
    .Y(\$procmux$14459_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14460_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h24),
    .Y(\$procmux$14460_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14461  (
    .A(1'hx),
    .B(\$procmux$14459_Y ),
    .S(\$procmux$14462_CMP ),
    .Y(\$procmux$14461_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14464  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14465_CMP ),
    .Y(\$procmux$14464_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14465_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h20),
    .Y(\$procmux$14465_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14466  (
    .A(1'hx),
    .B(\$procmux$14464_Y ),
    .S(\$procmux$14467_CMP ),
    .Y(\$procmux$14466_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14470  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14471_CMP ),
    .Y(\$procmux$14470_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14471_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h1c),
    .Y(\$procmux$14471_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14472  (
    .A(1'hx),
    .B(\$procmux$14470_Y ),
    .S(\$procmux$14473_CMP ),
    .Y(\$procmux$14472_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14477  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14478_CMP ),
    .Y(\$procmux$14477_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14478_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h18),
    .Y(\$procmux$14478_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14479  (
    .A(1'hx),
    .B(\$procmux$14477_Y ),
    .S(\$procmux$14480_CMP ),
    .Y(\$procmux$14479_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14487  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14488_CMP ),
    .Y(\$procmux$14487_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14488_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h0c),
    .Y(\$procmux$14488_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14489  (
    .A(1'hx),
    .B(\$procmux$14487_Y ),
    .S(\$procmux$14490_CMP ),
    .Y(\$procmux$14489_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14498  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14499_CMP ),
    .Y(\$procmux$14498_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14499_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h08),
    .Y(\$procmux$14499_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14500  (
    .A(1'hx),
    .B(\$procmux$14498_Y ),
    .S(\$procmux$14501_CMP ),
    .Y(\$procmux$14500_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14503  (
    .A(s_timer_cmp_hi_reg),
    .B(\$s_timer_cmp_hi$29 ),
    .S(\$procmux$14504_CMP ),
    .Y(\$procmux$14503_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14506  (
    .A(s_timer_cmp_lo_reg),
    .B(\$s_timer_cmp_lo$28 ),
    .S(\$procmux$14507_CMP ),
    .Y(\$procmux$14506_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14509  (
    .A(s_cfg_hi_reg),
    .B(\$s_cfg_hi$27 ),
    .S(\$procmux$14510_CMP ),
    .Y(\$procmux$14509_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14512  (
    .A(s_cfg_lo_reg),
    .B(\$s_cfg_lo$26 ),
    .S(\$procmux$14513_CMP ),
    .Y(\$procmux$14512_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14515  (
    .A(1'h0),
    .B(\$s_reset_timer_hi$25 ),
    .S(\$procmux$14516_CMP ),
    .Y(\$procmux$14515_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14518  (
    .A(1'h0),
    .B(\$s_reset_timer_lo$24 ),
    .S(\$procmux$14519_CMP ),
    .Y(\$procmux$14518_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14521  (
    .A(1'h0),
    .B(\$s_start_timer_hi$23 ),
    .S(\$procmux$14522_CMP ),
    .Y(\$procmux$14521_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14524  (
    .A(1'h0),
    .B(\$s_start_timer_lo$22 ),
    .S(\$procmux$14525_CMP ),
    .Y(\$procmux$14524_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14527  (
    .A(1'h0),
    .B(\$s_write_counter_hi$21 ),
    .S(\$procmux$14528_CMP ),
    .Y(\$procmux$14527_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14530  (
    .A(1'h0),
    .B(\$s_write_counter_lo$20 ),
    .S(\$procmux$14531_CMP ),
    .Y(\$procmux$14530_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14533  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14534_CMP ),
    .Y(\$procmux$14533_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14536  (
    .A(\$procmux$14533_Y ),
    .B(1'hx),
    .S(\$procmux$14537_CMP ),
    .Y(\$procmux$14536_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14539  (
    .A(\$procmux$14536_Y ),
    .B(1'hx),
    .S(\$procmux$14540_CMP ),
    .Y(\$procmux$14539_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14541  (
    .A(1'hx),
    .B(\$procmux$14539_Y ),
    .S(\$procmux$14542_CMP ),
    .Y(\$procmux$14541_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14546  (
    .A(\$284 ),
    .B(\$280 ),
    .S(\$procmux$14547_CMP ),
    .Y(\$procmux$14546_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14549  (
    .A(\$procmux$14546_Y ),
    .B(1'hx),
    .S(\$procmux$14550_CMP ),
    .Y(\$procmux$14549_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14552  (
    .A(\$procmux$14549_Y ),
    .B(1'hx),
    .S(\$procmux$14553_CMP ),
    .Y(\$procmux$14552_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14554  (
    .A(1'hx),
    .B(\$procmux$14552_Y ),
    .S(\$procmux$14555_CMP ),
    .Y(\$procmux$14554_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14561  (
    .A(s_target_reached_prescaler_lo),
    .B(1'hx),
    .S(\$procmux$14562_CMP ),
    .Y(\$procmux$14561_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14564  (
    .A(\$procmux$14561_Y ),
    .B(1'hx),
    .S(\$procmux$14565_CMP ),
    .Y(\$procmux$14564_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14566  (
    .A(1'hx),
    .B(\$procmux$14564_Y ),
    .S(\$procmux$14567_CMP ),
    .Y(\$procmux$14566_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14572  (
    .A(\$s_enable_count_hi$286 ),
    .B(\$268 ),
    .S(\$procmux$14573_CMP ),
    .Y(\$procmux$14572_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14575  (
    .A(\$procmux$14572_Y ),
    .B(1'hx),
    .S(\$procmux$14576_CMP ),
    .Y(\$procmux$14575_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14577  (
    .A(1'hx),
    .B(\$procmux$14575_Y ),
    .S(\$procmux$14578_CMP ),
    .Y(\$procmux$14577_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14583  (
    .A(\$s_enable_count_lo$285 ),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14584_CMP ),
    .Y(\$procmux$14583_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14586  (
    .A(\$procmux$14583_Y ),
    .B(1'hx),
    .S(\$procmux$14587_CMP ),
    .Y(\$procmux$14586_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14588  (
    .A(1'hx),
    .B(\$procmux$14586_Y ),
    .S(\$procmux$14589_CMP ),
    .Y(\$procmux$14588_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14594  (
    .A(\$s_enable_count_prescaler_lo$287 ),
    .B(\$s_enable_count_prescaler_lo$216 ),
    .S(\$procmux$14595_CMP ),
    .Y(\$procmux$14594_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14597  (
    .A(\$procmux$14594_Y ),
    .B(1'hx),
    .S(\$procmux$14598_CMP ),
    .Y(\$procmux$14597_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14599  (
    .A(1'hx),
    .B(\$procmux$14597_Y ),
    .S(\$procmux$14600_CMP ),
    .Y(\$procmux$14599_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14605  (
    .A(\$s_enable_count_hi$289 ),
    .B(\$258 ),
    .S(\$procmux$14606_CMP ),
    .Y(\$procmux$14605_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14607  (
    .A(1'hx),
    .B(\$procmux$14605_Y ),
    .S(\$procmux$14608_CMP ),
    .Y(\$procmux$14607_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14613  (
    .A(\$s_enable_count_lo$288 ),
    .B(1'h1),
    .S(\$procmux$14614_CMP ),
    .Y(\$procmux$14613_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14615  (
    .A(1'hx),
    .B(\$procmux$14613_Y ),
    .S(\$procmux$14616_CMP ),
    .Y(\$procmux$14615_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14621  (
    .A(\$s_enable_count_prescaler_lo$290 ),
    .B(\$s_enable_count_prescaler_lo$216 ),
    .S(\$procmux$14622_CMP ),
    .Y(\$procmux$14621_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14623  (
    .A(1'hx),
    .B(\$procmux$14621_Y ),
    .S(\$procmux$14624_CMP ),
    .Y(\$procmux$14623_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14628  (
    .A(\$s_enable_count_prescaler_lo$216 ),
    .B(\$s_enable_count_prescaler_lo$293 ),
    .S(\$procmux$14629_CMP ),
    .Y(\$procmux$14628_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14633  (
    .A(\$s_enable_count_hi$243 ),
    .B(\$s_enable_count_hi$292 ),
    .S(\$procmux$14634_CMP ),
    .Y(\$procmux$14633_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14638  (
    .A(\$s_enable_count_lo$215 ),
    .B(\$s_enable_count_lo$291 ),
    .S(\$procmux$14639_CMP ),
    .Y(\$procmux$14638_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:428.6-431.9|rtl/timer_unit/timer_unit.sv:427.4-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14643  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14644_CMP ),
    .Y(\$procmux$14643_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14646  (
    .A(\$procmux$14643_Y ),
    .B(1'hx),
    .S(\$procmux$14647_CMP ),
    .Y(\$procmux$14646_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14649  (
    .A(\$procmux$14646_Y ),
    .B(1'hx),
    .S(\$procmux$14650_CMP ),
    .Y(\$procmux$14649_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14651  (
    .A(1'hx),
    .B(\$procmux$14649_Y ),
    .S(\$procmux$14652_CMP ),
    .Y(\$procmux$14651_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14657  (
    .A(s_target_reached_prescaler_hi),
    .B(1'hx),
    .S(\$procmux$14658_CMP ),
    .Y(\$procmux$14657_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14660  (
    .A(\$procmux$14657_Y ),
    .B(1'hx),
    .S(\$procmux$14661_CMP ),
    .Y(\$procmux$14660_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14662  (
    .A(1'hx),
    .B(\$procmux$14660_Y ),
    .S(\$procmux$14663_CMP ),
    .Y(\$procmux$14662_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14667  (
    .A(\$s_enable_count_hi$237 ),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14668_CMP ),
    .Y(\$procmux$14667_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14670  (
    .A(\$procmux$14667_Y ),
    .B(1'hx),
    .S(\$procmux$14671_CMP ),
    .Y(\$procmux$14670_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14672  (
    .A(1'hx),
    .B(\$procmux$14670_Y ),
    .S(\$procmux$14673_CMP ),
    .Y(\$procmux$14672_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14677  (
    .A(\$s_enable_count_prescaler_hi$238 ),
    .B(1'h0),
    .S(\$procmux$14678_CMP ),
    .Y(\$procmux$14677_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14680  (
    .A(\$procmux$14677_Y ),
    .B(1'hx),
    .S(\$procmux$14681_CMP ),
    .Y(\$procmux$14680_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14682  (
    .A(1'hx),
    .B(\$procmux$14680_Y ),
    .S(\$procmux$14683_CMP ),
    .Y(\$procmux$14682_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14687  (
    .A(\$s_enable_count_hi$239 ),
    .B(1'h1),
    .S(\$procmux$14688_CMP ),
    .Y(\$procmux$14687_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14689  (
    .A(1'hx),
    .B(\$procmux$14687_Y ),
    .S(\$procmux$14690_CMP ),
    .Y(\$procmux$14689_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14694  (
    .A(\$s_enable_count_prescaler_hi$240 ),
    .B(1'h0),
    .S(\$procmux$14695_CMP ),
    .Y(\$procmux$14694_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14696  (
    .A(1'hx),
    .B(\$procmux$14694_Y ),
    .S(\$procmux$14697_CMP ),
    .Y(\$procmux$14696_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14700  (
    .A(1'h0),
    .B(\$s_enable_count_prescaler_hi$242 ),
    .S(\$procmux$14701_CMP ),
    .Y(\$procmux$14700_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14704  (
    .A(1'h0),
    .B(\$s_enable_count_hi$241 ),
    .S(\$procmux$14705_CMP ),
    .Y(\$procmux$14704_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:403.6-406.9|rtl/timer_unit/timer_unit.sv:402.4-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14708  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14709_CMP ),
    .Y(\$procmux$14708_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14711  (
    .A(\$procmux$14708_Y ),
    .B(1'hx),
    .S(\$procmux$14712_CMP ),
    .Y(\$procmux$14711_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14714  (
    .A(\$procmux$14711_Y ),
    .B(1'hx),
    .S(\$procmux$14715_CMP ),
    .Y(\$procmux$14714_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14716  (
    .A(1'hx),
    .B(\$procmux$14714_Y ),
    .S(\$procmux$14717_CMP ),
    .Y(\$procmux$14716_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14721  (
    .A(s_target_reached_prescaler_lo),
    .B(1'hx),
    .S(\$procmux$14722_CMP ),
    .Y(\$procmux$14721_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14724  (
    .A(\$procmux$14721_Y ),
    .B(1'hx),
    .S(\$procmux$14725_CMP ),
    .Y(\$procmux$14724_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14726  (
    .A(1'hx),
    .B(\$procmux$14724_Y ),
    .S(\$procmux$14727_CMP ),
    .Y(\$procmux$14726_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14730  (
    .A(\$s_enable_count_lo$209 ),
    .B(\$auto$rtlil.cc:3092:Mux$167 ),
    .S(\$procmux$14731_CMP ),
    .Y(\$procmux$14730_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14733  (
    .A(\$procmux$14730_Y ),
    .B(1'hx),
    .S(\$procmux$14734_CMP ),
    .Y(\$procmux$14733_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14735  (
    .A(1'hx),
    .B(\$procmux$14733_Y ),
    .S(\$procmux$14736_CMP ),
    .Y(\$procmux$14735_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14739  (
    .A(\$s_enable_count_prescaler_lo$210 ),
    .B(1'h0),
    .S(\$procmux$14740_CMP ),
    .Y(\$procmux$14739_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14742  (
    .A(\$procmux$14739_Y ),
    .B(1'hx),
    .S(\$procmux$14743_CMP ),
    .Y(\$procmux$14742_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14744  (
    .A(1'hx),
    .B(\$procmux$14742_Y ),
    .S(\$procmux$14745_CMP ),
    .Y(\$procmux$14744_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14748  (
    .A(\$s_enable_count_lo$211 ),
    .B(1'h1),
    .S(\$procmux$14749_CMP ),
    .Y(\$procmux$14748_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14750  (
    .A(1'hx),
    .B(\$procmux$14748_Y ),
    .S(\$procmux$14751_CMP ),
    .Y(\$procmux$14750_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14754  (
    .A(\$s_enable_count_prescaler_lo$212 ),
    .B(1'h0),
    .S(\$procmux$14755_CMP ),
    .Y(\$procmux$14754_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14756  (
    .A(1'hx),
    .B(\$procmux$14754_Y ),
    .S(\$procmux$14757_CMP ),
    .Y(\$procmux$14756_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14759  (
    .A(1'h0),
    .B(\$s_enable_count_prescaler_lo$214 ),
    .S(\$procmux$14760_CMP ),
    .Y(\$procmux$14759_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14762  (
    .A(1'h0),
    .B(\$s_enable_count_lo$213 ),
    .S(\$procmux$14763_CMP ),
    .Y(\$procmux$14762_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:126.4-126.19|rtl/timer_unit/timer_unit.sv:125.9-128.20" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14766  (
    .A(2'h0),
    .B(2'h1),
    .S(\$procmux$14767_CMP ),
    .Y(\$procmux$14766_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14768  (
    .A(2'hx),
    .B(\$procmux$14766_Y ),
    .S(\$procmux$14769_CMP ),
    .Y(\$procmux$14768_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14769_CMP0  (
    .A(CS),
    .B(2'h1),
    .Y(\$procmux$14769_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$14772  (
    .A(2'h0),
    .B({ \$NS$6 , \$NS$9  }),
    .S({ \$procmux$14775_CMP , \$procmux$14773_CMP  }),
    .Y(\$procmux$14772_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14773_CMP0  (
    .A(CS),
    .B(2'h1),
    .Y(\$procmux$14773_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:116.9-119.20|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14775_CMP0  (
    .A(CS),
    .Y(\$procmux$14775_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:117.4-117.19|rtl/timer_unit/timer_unit.sv:116.9-119.20" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14779  (
    .A(2'h0),
    .B(2'h1),
    .S(\$procmux$14780_CMP ),
    .Y(\$procmux$14779_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:116.9-119.20|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14781  (
    .A(2'hx),
    .B(\$procmux$14779_Y ),
    .S(\$procmux$14782_CMP ),
    .Y(\$procmux$14781_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:116.9-119.20|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14782_CMP0  (
    .A(CS),
    .Y(\$procmux$14782_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14785  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14786_CMP ),
    .Y(\$procmux$14785_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:123.6-129.9|rtl/timer_unit/timer_unit.sv:112.2-134.9" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14786_CMP0  (
    .A(CS),
    .B(2'h1),
    .Y(\$procmux$14786_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:376.7-376.41|rtl/timer_unit/timer_unit.sv:374.2-377.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14787  (
    .A(\$s_reset_count_prescaler_hi$177 ),
    .B(1'h1),
    .S(\$procmux$14788_CMP ),
    .Y(\$procmux$14787_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:371.7-371.41|rtl/timer_unit/timer_unit.sv:369.2-372.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14792  (
    .A(\$s_reset_count_prescaler_lo$148 ),
    .B(1'h1),
    .S(\$procmux$14793_CMP ),
    .Y(\$procmux$14792_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:364.10-364.31|rtl/timer_unit/timer_unit.sv:362.5-365.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14796  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14797_CMP ),
    .Y(\$procmux$14796_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14799  (
    .A(1'hx),
    .B(\$procmux$14796_Y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14799_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14802  (
    .A(\$procmux$14799_Y ),
    .B(1'hx),
    .S(\$procmux$14803_CMP ),
    .Y(\$procmux$14802_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14808  (
    .A(\$s_reset_count_hi$163 ),
    .B(\$s_reset_count_hi$174 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14808_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14811  (
    .A(\$procmux$14808_Y ),
    .B(1'hx),
    .S(\$procmux$14812_CMP ),
    .Y(\$procmux$14811_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:357.10-357.31|rtl/timer_unit/timer_unit.sv:355.5-358.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14815  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14816_CMP ),
    .Y(\$procmux$14815_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14817  (
    .A(\$procmux$14815_Y ),
    .B(1'hx),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14817_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14820  (
    .A(\$procmux$14817_Y ),
    .B(1'hx),
    .S(\$procmux$14821_CMP ),
    .Y(\$procmux$14820_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14825  (
    .A(\$s_reset_count_hi$175 ),
    .B(1'h1),
    .S(\$procmux$14826_CMP ),
    .Y(\$procmux$14825_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14829  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14830_CMP ),
    .Y(\$procmux$14829_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:341.10-341.31|rtl/timer_unit/timer_unit.sv:339.6-342.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14832  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14833_CMP ),
    .Y(\$procmux$14832_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14835  (
    .A(1'hx),
    .B(\$procmux$14832_Y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14835_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14838  (
    .A(\$procmux$14835_Y ),
    .B(1'hx),
    .S(\$procmux$14839_CMP ),
    .Y(\$procmux$14838_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14843  (
    .A(\$s_reset_count_lo$134 ),
    .B(\$s_reset_count_lo$145 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14843_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14846  (
    .A(\$procmux$14843_Y ),
    .B(1'hx),
    .S(\$procmux$14847_CMP ),
    .Y(\$procmux$14846_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:334.10-334.32|rtl/timer_unit/timer_unit.sv:332.5-335.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14849  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14850_CMP ),
    .Y(\$procmux$14849_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14851  (
    .A(\$procmux$14849_Y ),
    .B(1'hx),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14851_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14854  (
    .A(\$procmux$14851_Y ),
    .B(1'hx),
    .S(\$procmux$14855_CMP ),
    .Y(\$procmux$14854_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14858  (
    .A(\$s_reset_count_lo$146 ),
    .B(1'h1),
    .S(\$procmux$14859_CMP ),
    .Y(\$procmux$14858_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14861  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$14862_CMP ),
    .Y(\$procmux$14861_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:561.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i  counter_hi_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_hi_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_hi),
    .enable_count_i(s_enable_count_hi),
    .reset_count_i(s_reset_count_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_hi),
    .write_counter_i(s_write_counter_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:545.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i  counter_lo_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_lo_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_lo),
    .enable_count_i(s_enable_count_lo),
    .reset_count_i(s_reset_count_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_lo),
    .write_counter_i(s_write_counter_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:529.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i  prescaler_hi_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_hi_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_hi),
    .reset_count_i(s_reset_count_prescaler_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_hi),
    .write_counter_i(1'h0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:513.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i  prescaler_lo_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_lo_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_lo),
    .reset_count_i(s_reset_count_prescaler_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_lo),
    .write_counter_i(1'h0)
  );
  assign r_opc_o = 1'h0;
  assign NS = \$NS$10 ;
  assign gnt_o = 1'h1;
  assign r_valid_o = \$r_valid_o$11 ;
  assign s_write_counter_lo = \$s_write_counter_lo$30 ;
  assign s_write_counter_hi = \$s_write_counter_hi$31 ;
  assign s_start_timer_lo = \$s_start_timer_lo$32 ;
  assign s_start_timer_hi = \$s_start_timer_hi$33 ;
  assign s_reset_timer_lo = \$s_reset_timer_lo$34 ;
  assign s_reset_timer_hi = \$s_reset_timer_hi$35 ;
  assign s_cfg_lo = { \$s_cfg_lo$36 [31:2], \$s_cfg_lo[1]$107 , \$s_cfg_lo[0]$71  };
  assign s_cfg_hi = { \$s_cfg_hi$37 [31:2], \$s_cfg_hi[1]$110 , \$s_cfg_hi[0]$104  };
  assign s_timer_cmp_lo = \$s_timer_cmp_lo$38 ;
  assign s_timer_cmp_hi = \$s_timer_cmp_hi$39 ;
  assign r_rdata_o = \$r_rdata_o$118 ;
  assign s_reset_count_lo = \$s_reset_count_lo$147 ;
  assign s_reset_count_hi = \$s_reset_count_hi$176 ;
  assign s_reset_count_prescaler_lo = \$s_reset_count_prescaler_lo$182 ;
  assign s_reset_count_prescaler_hi = \$s_reset_count_prescaler_hi$187 ;
  assign s_enable_count_lo = \$s_enable_count_lo$294 ;
  assign s_enable_count_hi = \$s_enable_count_hi$295 ;
  assign s_enable_count_prescaler_lo = \$s_enable_count_prescaler_lo$296 ;
  assign s_enable_count_prescaler_hi = \$s_enable_count_prescaler_hi$244 ;
  assign irq_lo_o = \$irq_lo_o$308 ;
  assign irq_hi_o = \$irq_hi_o$309 ;
  assign s_ref_clk_edge = \$auto$rtlil.cc:3092:Mux$167 ;
  assign s_ref_clk_edge_del = \$auto$rtlil.cc:3092:Mux$168 ;
  assign busy_o = \$328 ;
  assign \$procmux$14339_CMP  = \$116 ;
  assign \$r_rdata_o$117  = \$procmux$14338_Y ;
  assign \$procmux$14342_CMP  = \$116 ;
  assign \$r_rdata_o$118  = \$procmux$14341_Y ;
  assign \$procmux$14345_CMP  = \$299 ;
  assign \$irq_lo_o$308  = \$procmux$14344_Y ;
  assign \$procmux$14348_CMP  = \$299 ;
  assign \$irq_hi_o$309  = \$procmux$14347_Y ;
  assign \$procmux$14350_CMP  = \$109 ;
  assign \$s_cfg_hi[1]$110  = \$procmux$14349_Y ;
  assign \$procmux$14356_CMP  = \$106 ;
  assign \$s_cfg_lo[1]$107  = \$procmux$14355_Y ;
  assign \$procmux$14361_CMP  = \$101 ;
  assign \$procmux$14364_CMP  = \$91 ;
  assign \$procmux$14367_CMP  = \$81 ;
  assign \$s_cfg_hi[0]$102  = \$procmux$14366_Y ;
  assign \$procmux$14373_CMP  = \$91 ;
  assign \$procmux$14376_CMP  = \$81 ;
  assign \$s_cfg_hi[0]$103  = \$procmux$14375_Y ;
  assign \$procmux$14382_CMP  = \$81 ;
  assign \$s_cfg_hi[0]$104  = \$procmux$14381_Y ;
  assign \$procmux$14386_CMP  = \$68 ;
  assign \$procmux$14389_CMP  = \$51 ;
  assign \$procmux$14392_CMP  = \$49 ;
  assign \$s_cfg_lo[0]$69  = \$procmux$14391_Y ;
  assign \$procmux$14398_CMP  = \$51 ;
  assign \$procmux$14401_CMP  = \$49 ;
  assign \$s_cfg_lo[0]$70  = \$procmux$14400_Y ;
  assign \$procmux$14405_CMP  = \$57 ;
  assign \$procmux$14407_CMP  = \$51 ;
  assign \$procmux$14410_CMP  = \$49 ;
  assign \$s_cfg_lo[0]$58  = \$procmux$14409_Y ;
  assign \$procmux$14415_CMP  = \$49 ;
  assign \$s_cfg_lo[0]$71  = \$procmux$14414_Y ;
  assign \$procmux$14424_CMP  = \$19 ;
  assign \$s_timer_cmp_hi$29  = \$procmux$14423_Y ;
  assign \$procmux$14433_CMP  = \$19 ;
  assign \$s_timer_cmp_lo$28  = \$procmux$14432_Y ;
  assign \$procmux$14445_CMP  = \$19 ;
  assign \$s_cfg_hi$27  = \$procmux$14444_Y ;
  assign \$procmux$14458_CMP  = \$19 ;
  assign \$s_cfg_lo$26  = \$procmux$14457_Y ;
  assign \$procmux$14462_CMP  = \$19 ;
  assign \$s_reset_timer_hi$25  = \$procmux$14461_Y ;
  assign \$procmux$14467_CMP  = \$19 ;
  assign \$s_reset_timer_lo$24  = \$procmux$14466_Y ;
  assign \$procmux$14473_CMP  = \$19 ;
  assign \$s_start_timer_hi$23  = \$procmux$14472_Y ;
  assign \$procmux$14480_CMP  = \$19 ;
  assign \$s_start_timer_lo$22  = \$procmux$14479_Y ;
  assign \$procmux$14490_CMP  = \$19 ;
  assign \$s_write_counter_hi$21  = \$procmux$14489_Y ;
  assign \$procmux$14501_CMP  = \$19 ;
  assign \$s_write_counter_lo$20  = \$procmux$14500_Y ;
  assign \$procmux$14504_CMP  = \$19 ;
  assign \$s_timer_cmp_hi$39  = \$procmux$14503_Y ;
  assign \$procmux$14507_CMP  = \$19 ;
  assign \$s_timer_cmp_lo$38  = \$procmux$14506_Y ;
  assign \$procmux$14510_CMP  = \$19 ;
  assign \$s_cfg_hi$37  = \$procmux$14509_Y ;
  assign \$procmux$14513_CMP  = \$19 ;
  assign \$s_cfg_lo$36  = \$procmux$14512_Y ;
  assign \$procmux$14516_CMP  = \$19 ;
  assign \$s_reset_timer_hi$35  = \$procmux$14515_Y ;
  assign \$procmux$14519_CMP  = \$19 ;
  assign \$s_reset_timer_lo$34  = \$procmux$14518_Y ;
  assign \$procmux$14522_CMP  = \$19 ;
  assign \$s_start_timer_hi$33  = \$procmux$14521_Y ;
  assign \$procmux$14525_CMP  = \$19 ;
  assign \$s_start_timer_lo$32  = \$procmux$14524_Y ;
  assign \$procmux$14528_CMP  = \$19 ;
  assign \$s_write_counter_hi$31  = \$procmux$14527_Y ;
  assign \$procmux$14531_CMP  = \$19 ;
  assign \$s_write_counter_lo$30  = \$procmux$14530_Y ;
  assign \$procmux$14534_CMP  = \$274 ;
  assign \$procmux$14537_CMP  = \$264 ;
  assign \$procmux$14540_CMP  = \$256 ;
  assign \$procmux$14542_CMP  = \$250 ;
  assign \$s_enable_count_prescaler_lo$287  = \$procmux$14541_Y ;
  assign \$procmux$14547_CMP  = \$274 ;
  assign \$procmux$14550_CMP  = \$264 ;
  assign \$procmux$14553_CMP  = \$256 ;
  assign \$procmux$14555_CMP  = \$250 ;
  assign \$s_enable_count_hi$286  = \$procmux$14554_Y ;
  assign \$procmux$14562_CMP  = \$264 ;
  assign \$procmux$14565_CMP  = \$256 ;
  assign \$procmux$14567_CMP  = \$250 ;
  assign \$s_enable_count_lo$285  = \$procmux$14566_Y ;
  assign \$procmux$14573_CMP  = \$264 ;
  assign \$procmux$14576_CMP  = \$256 ;
  assign \$procmux$14578_CMP  = \$250 ;
  assign \$s_enable_count_hi$289  = \$procmux$14577_Y ;
  assign \$procmux$14584_CMP  = \$264 ;
  assign \$procmux$14587_CMP  = \$256 ;
  assign \$procmux$14589_CMP  = \$250 ;
  assign \$s_enable_count_lo$288  = \$procmux$14588_Y ;
  assign \$procmux$14595_CMP  = \$264 ;
  assign \$procmux$14598_CMP  = \$256 ;
  assign \$procmux$14600_CMP  = \$250 ;
  assign \$s_enable_count_prescaler_lo$290  = \$procmux$14599_Y ;
  assign \$procmux$14606_CMP  = \$256 ;
  assign \$procmux$14608_CMP  = \$250 ;
  assign \$s_enable_count_hi$292  = \$procmux$14607_Y ;
  assign \$procmux$14614_CMP  = \$256 ;
  assign \$procmux$14616_CMP  = \$250 ;
  assign \$s_enable_count_lo$291  = \$procmux$14615_Y ;
  assign \$procmux$14622_CMP  = \$256 ;
  assign \$procmux$14624_CMP  = \$250 ;
  assign \$s_enable_count_prescaler_lo$293  = \$procmux$14623_Y ;
  assign \$procmux$14629_CMP  = \$250 ;
  assign \$s_enable_count_prescaler_lo$296  = \$procmux$14628_Y ;
  assign \$procmux$14634_CMP  = \$250 ;
  assign \$s_enable_count_hi$295  = \$procmux$14633_Y ;
  assign \$procmux$14639_CMP  = \$250 ;
  assign \$s_enable_count_lo$294  = \$procmux$14638_Y ;
  assign \$procmux$14644_CMP  = \$236 ;
  assign \$procmux$14647_CMP  = \$230 ;
  assign \$procmux$14650_CMP  = \$224 ;
  assign \$procmux$14652_CMP  = \$218 ;
  assign \$s_enable_count_prescaler_hi$238  = \$procmux$14651_Y ;
  assign \$procmux$14658_CMP  = \$230 ;
  assign \$procmux$14661_CMP  = \$224 ;
  assign \$procmux$14663_CMP  = \$218 ;
  assign \$s_enable_count_hi$237  = \$procmux$14662_Y ;
  assign \$procmux$14668_CMP  = \$230 ;
  assign \$procmux$14671_CMP  = \$224 ;
  assign \$procmux$14673_CMP  = \$218 ;
  assign \$s_enable_count_hi$239  = \$procmux$14672_Y ;
  assign \$procmux$14678_CMP  = \$230 ;
  assign \$procmux$14681_CMP  = \$224 ;
  assign \$procmux$14683_CMP  = \$218 ;
  assign \$s_enable_count_prescaler_hi$240  = \$procmux$14682_Y ;
  assign \$procmux$14688_CMP  = \$224 ;
  assign \$procmux$14690_CMP  = \$218 ;
  assign \$s_enable_count_hi$241  = \$procmux$14689_Y ;
  assign \$procmux$14695_CMP  = \$224 ;
  assign \$procmux$14697_CMP  = \$218 ;
  assign \$s_enable_count_prescaler_hi$242  = \$procmux$14696_Y ;
  assign \$procmux$14701_CMP  = \$218 ;
  assign \$s_enable_count_prescaler_hi$244  = \$procmux$14700_Y ;
  assign \$procmux$14705_CMP  = \$218 ;
  assign \$s_enable_count_hi$243  = \$procmux$14704_Y ;
  assign \$procmux$14709_CMP  = \$208 ;
  assign \$procmux$14712_CMP  = \$202 ;
  assign \$procmux$14715_CMP  = \$196 ;
  assign \$procmux$14717_CMP  = \$190 ;
  assign \$s_enable_count_prescaler_lo$210  = \$procmux$14716_Y ;
  assign \$procmux$14722_CMP  = \$202 ;
  assign \$procmux$14725_CMP  = \$196 ;
  assign \$procmux$14727_CMP  = \$190 ;
  assign \$s_enable_count_lo$209  = \$procmux$14726_Y ;
  assign \$procmux$14731_CMP  = \$202 ;
  assign \$procmux$14734_CMP  = \$196 ;
  assign \$procmux$14736_CMP  = \$190 ;
  assign \$s_enable_count_lo$211  = \$procmux$14735_Y ;
  assign \$procmux$14740_CMP  = \$202 ;
  assign \$procmux$14743_CMP  = \$196 ;
  assign \$procmux$14745_CMP  = \$190 ;
  assign \$s_enable_count_prescaler_lo$212  = \$procmux$14744_Y ;
  assign \$procmux$14749_CMP  = \$196 ;
  assign \$procmux$14751_CMP  = \$190 ;
  assign \$s_enable_count_lo$213  = \$procmux$14750_Y ;
  assign \$procmux$14755_CMP  = \$196 ;
  assign \$procmux$14757_CMP  = \$190 ;
  assign \$s_enable_count_prescaler_lo$214  = \$procmux$14756_Y ;
  assign \$procmux$14760_CMP  = \$190 ;
  assign \$s_enable_count_prescaler_lo$216  = \$procmux$14759_Y ;
  assign \$procmux$14763_CMP  = \$190 ;
  assign \$s_enable_count_lo$215  = \$procmux$14762_Y ;
  assign \$procmux$14767_CMP  = \$8 ;
  assign \$NS$9  = \$procmux$14768_Y ;
  assign \$NS$10  = \$procmux$14772_Y ;
  assign \$procmux$14780_CMP  = \$5 ;
  assign \$NS$6  = \$procmux$14781_Y ;
  assign \$r_valid_o$11  = \$procmux$14785_Y ;
  assign \$procmux$14788_CMP  = \$186 ;
  assign \$s_reset_count_prescaler_hi$187  = \$procmux$14787_Y ;
  assign \$procmux$14793_CMP  = \$181 ;
  assign \$s_reset_count_prescaler_lo$182  = \$procmux$14792_Y ;
  assign \$procmux$14797_CMP  = \$173 ;
  assign \$procmux$14800_CMP  = \$156 ;
  assign \$procmux$14803_CMP  = \$154 ;
  assign \$s_reset_count_hi$174  = \$procmux$14802_Y ;
  assign \$procmux$14809_CMP  = \$156 ;
  assign \$procmux$14812_CMP  = \$154 ;
  assign \$s_reset_count_hi$175  = \$procmux$14811_Y ;
  assign \$procmux$14816_CMP  = \$162 ;
  assign \$procmux$14818_CMP  = \$156 ;
  assign \$procmux$14821_CMP  = \$154 ;
  assign \$s_reset_count_hi$163  = \$procmux$14820_Y ;
  assign \$procmux$14826_CMP  = \$154 ;
  assign \$s_reset_count_hi$176  = \$procmux$14825_Y ;
  assign \$procmux$14830_CMP  = \$154 ;
  assign \$s_reset_count_prescaler_hi$177  = \$procmux$14829_Y ;
  assign \$procmux$14833_CMP  = \$144 ;
  assign \$procmux$14836_CMP  = \$127 ;
  assign \$procmux$14839_CMP  = \$125 ;
  assign \$s_reset_count_lo$145  = \$procmux$14838_Y ;
  assign \$procmux$14844_CMP  = \$127 ;
  assign \$procmux$14847_CMP  = \$125 ;
  assign \$s_reset_count_lo$146  = \$procmux$14846_Y ;
  assign \$procmux$14850_CMP  = \$133 ;
  assign \$procmux$14852_CMP  = \$127 ;
  assign \$procmux$14855_CMP  = \$125 ;
  assign \$s_reset_count_lo$134  = \$procmux$14854_Y ;
  assign \$procmux$14859_CMP  = \$125 ;
  assign \$s_reset_count_lo$147  = \$procmux$14858_Y ;
  assign \$procmux$14862_CMP  = \$125 ;
  assign \$s_reset_count_prescaler_lo$148  = \$procmux$14861_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$160  = rst_ni;
  assign \$5  = req_i;
  assign \$8  = req_i;
  assign \$auto$rtlil.cc:2965:LogicNot$162  = rst_ni;
  assign \$53  = \$s_cfg_lo$36 [5];
  assign \$55  = s_target_reached_lo;
  assign \$60  = \$s_cfg_lo$36 [5];
  assign \$62  = s_target_reached_lo;
  assign \$66  = s_target_reached_hi;
  assign \$73  = event_hi_i;
  assign \$75  = \$s_cfg_hi$37 [3];
  assign \$79  = \$s_start_timer_hi$33 ;
  assign \$85  = \$s_cfg_hi$37 [5];
  assign \$89  = s_target_reached_hi;
  assign \$93  = \$s_cfg_lo$36 [5];
  assign \$95  = s_target_reached_lo;
  assign \$99  = s_target_reached_hi;
  assign \$150  = s_cfg_hi_reg[1];
  assign \$152  = s_reset_timer_hi;
  assign \$165  = s_cfg_lo_reg[4];
  assign \$167  = s_target_reached_lo;
  assign \$171  = s_target_reached_hi;
  assign \$158  = s_cfg_hi_reg[4];
  assign \$160  = s_target_reached_hi;
  assign \$109  = s_reset_count_hi;
  assign \$41  = event_lo_i;
  assign \$43  = \$s_cfg_lo$36 [3];
  assign \$47  = \$s_start_timer_lo$32 ;
  assign \$121  = s_cfg_lo_reg[1];
  assign \$123  = s_reset_timer_lo;
  assign \$138  = s_target_reached_lo;
  assign \$136  = s_cfg_lo_reg[4];
  assign \$142  = s_target_reached_hi;
  assign \$129  = s_cfg_lo_reg[4];
  assign \$131  = s_target_reached_lo;
  assign \$106  = s_reset_count_lo;
  assign \$auto$rtlil.cc:2965:LogicNot$164  = rst_ni;
  assign \$179  = s_target_reached_prescaler_lo;
  assign \$184  = s_target_reached_prescaler_hi;
  assign \$200  = s_cfg_lo_reg[7];
  assign \$204  = s_cfg_lo_reg[6];
  assign \$206  = s_cfg_lo_reg[7];
  assign \$218  = s_cfg_hi_reg[0];
  assign \$228  = s_cfg_hi_reg[7];
  assign \$232  = s_cfg_hi_reg[6];
  assign \$234  = s_cfg_hi_reg[7];
  assign \$246  = s_cfg_lo_reg[0];
  assign \$248  = s_cfg_lo_reg[31];
  assign \$262  = s_cfg_lo_reg[7];
  assign \$321  = s_ref_clk2;
  assign \$270  = s_cfg_lo_reg[6];
  assign \$272  = s_cfg_lo_reg[7];
  assign \$190  = s_cfg_lo_reg[0];
  assign \$auto$rtlil.cc:2965:LogicNot$166  = rst_ni;
  assign \$314  = s_ref_clk1;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire [31:0] \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$807 ;
  wire \$auto$rtlil.cc:2965:LogicNot$808 ;
  wire \$auto$rtlil.cc:2965:LogicNot$809 ;
  wire \$auto$rtlil.cc:2965:LogicNot$810 ;
  wire \$procmux$13163_Y ;
  wire \$procmux$13164_CMP ;
  wire [31:0] \$procmux$13165_Y ;
  wire \$procmux$13166_CMP ;
  wire [31:0] \$procmux$13168_Y ;
  wire \$procmux$13169_CMP ;
  wire [31:0] \$procmux$13171_Y ;
  wire \$procmux$13172_CMP ;
  wire [31:0] \$procmux$13175_Y ;
  wire \$procmux$13176_CMP ;
  wire [31:0] \$procmux$13178_Y ;
  wire \$procmux$13179_CMP ;
  wire [31:0] \$procmux$13182_Y ;
  wire \$procmux$13183_CMP ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  wire [31:0] \$s_count$10 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  wire [31:0] \$s_count$11 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  wire [31:0] \$s_count$9 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:65.10-68.38" */
  wire \$target_reached_o$20 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$807 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$809 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$19 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$7  (
    .A(s_count_reg),
    .B(32'd1),
    .Y(\$8 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$target_reached_o$20 ),
    .Q(target_reached_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:66.13-66.38|rtl/timer_unit/timer_unit_counter.sv:65.10-68.38" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13163  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13164_CMP ),
    .Y(\$procmux$13163_Y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13165  (
    .A(s_count_reg),
    .B(\$8 ),
    .S(\$procmux$13166_CMP ),
    .Y(\$procmux$13165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13168  (
    .A(\$procmux$13165_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13169_CMP ),
    .Y(\$procmux$13168_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13171  (
    .A(\$procmux$13168_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13172_CMP ),
    .Y(\$procmux$13171_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13175  (
    .A(\$s_count$9 ),
    .B(counter_value_i),
    .S(\$procmux$13176_CMP ),
    .Y(\$procmux$13175_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13178  (
    .A(\$procmux$13175_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13179_CMP ),
    .Y(\$procmux$13178_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13182  (
    .A(\$s_count$10 ),
    .B(32'd0),
    .S(\$procmux$13183_CMP ),
    .Y(\$procmux$13182_Y )
  );
  assign s_count = \$s_count$11 ;
  assign counter_value_o = s_count_reg;
  assign \$procmux$13164_CMP  = \$19 ;
  assign \$target_reached_o$20  = \$procmux$13163_Y ;
  assign \$procmux$13166_CMP  = \$6 ;
  assign \$procmux$13169_CMP  = \$4 ;
  assign \$procmux$13172_CMP  = \$2 ;
  assign \$s_count$9  = \$procmux$13171_Y ;
  assign \$procmux$13176_CMP  = \$4 ;
  assign \$procmux$13179_CMP  = \$2 ;
  assign \$s_count$10  = \$procmux$13178_Y ;
  assign \$procmux$13183_CMP  = \$2 ;
  assign \$s_count$11  = \$procmux$13182_Y ;
  assign \$2  = reset_count_i;
  assign \$4  = write_counter_i;
  assign \$6  = enable_count_i;
  assign \$auto$rtlil.cc:2965:LogicNot$808  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$810  = rst_ni;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire [31:0] \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$803 ;
  wire \$auto$rtlil.cc:2965:LogicNot$804 ;
  wire \$auto$rtlil.cc:2965:LogicNot$805 ;
  wire \$auto$rtlil.cc:2965:LogicNot$806 ;
  wire \$procmux$13185_Y ;
  wire \$procmux$13186_CMP ;
  wire [31:0] \$procmux$13187_Y ;
  wire \$procmux$13188_CMP ;
  wire [31:0] \$procmux$13190_Y ;
  wire \$procmux$13191_CMP ;
  wire [31:0] \$procmux$13193_Y ;
  wire \$procmux$13194_CMP ;
  wire [31:0] \$procmux$13197_Y ;
  wire \$procmux$13198_CMP ;
  wire [31:0] \$procmux$13200_Y ;
  wire \$procmux$13201_CMP ;
  wire [31:0] \$procmux$13204_Y ;
  wire \$procmux$13205_CMP ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  wire [31:0] \$s_count$10 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  wire [31:0] \$s_count$11 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  wire [31:0] \$s_count$9 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:65.10-68.38" */
  wire \$target_reached_o$20 ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$803 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$805 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$19 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$7  (
    .A(s_count_reg),
    .B(32'd1),
    .Y(\$8 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$target_reached_o$20 ),
    .Q(target_reached_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:66.13-66.38|rtl/timer_unit/timer_unit_counter.sv:65.10-68.38" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13185  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13186_CMP ),
    .Y(\$procmux$13185_Y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13187  (
    .A(s_count_reg),
    .B(\$8 ),
    .S(\$procmux$13188_CMP ),
    .Y(\$procmux$13187_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13190  (
    .A(\$procmux$13187_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13191_CMP ),
    .Y(\$procmux$13190_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13193  (
    .A(\$procmux$13190_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13194_CMP ),
    .Y(\$procmux$13193_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13197  (
    .A(\$s_count$9 ),
    .B(counter_value_i),
    .S(\$procmux$13198_CMP ),
    .Y(\$procmux$13197_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13200  (
    .A(\$procmux$13197_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13201_CMP ),
    .Y(\$procmux$13200_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13204  (
    .A(\$s_count$10 ),
    .B(32'd0),
    .S(\$procmux$13205_CMP ),
    .Y(\$procmux$13204_Y )
  );
  assign s_count = \$s_count$11 ;
  assign counter_value_o = s_count_reg;
  assign \$procmux$13186_CMP  = \$19 ;
  assign \$target_reached_o$20  = \$procmux$13185_Y ;
  assign \$procmux$13188_CMP  = \$6 ;
  assign \$procmux$13191_CMP  = \$4 ;
  assign \$procmux$13194_CMP  = \$2 ;
  assign \$s_count$9  = \$procmux$13193_Y ;
  assign \$procmux$13198_CMP  = \$4 ;
  assign \$procmux$13201_CMP  = \$2 ;
  assign \$s_count$10  = \$procmux$13200_Y ;
  assign \$procmux$13205_CMP  = \$2 ;
  assign \$s_count$11  = \$procmux$13204_Y ;
  assign \$2  = reset_count_i;
  assign \$4  = write_counter_i;
  assign \$6  = enable_count_i;
  assign \$auto$rtlil.cc:2965:LogicNot$804  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$806  = rst_ni;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$10 ;
  wire [31:0] \$12 ;
  wire \$2 ;
  wire \$23 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$799 ;
  wire \$auto$rtlil.cc:2965:LogicNot$800 ;
  wire \$auto$rtlil.cc:2965:LogicNot$801 ;
  wire \$auto$rtlil.cc:2965:LogicNot$802 ;
  wire \$procmux$13207_Y ;
  wire \$procmux$13208_CMP ;
  wire [31:0] \$procmux$13209_Y ;
  wire \$procmux$13210_CMP ;
  wire [31:0] \$procmux$13212_Y ;
  wire \$procmux$13213_CMP ;
  wire [31:0] \$procmux$13215_Y ;
  wire \$procmux$13216_CMP ;
  wire [31:0] \$procmux$13219_Y ;
  wire \$procmux$13220_CMP ;
  wire [31:0] \$procmux$13222_Y ;
  wire \$procmux$13223_CMP ;
  wire [31:0] \$procmux$13226_Y ;
  wire \$procmux$13227_CMP ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  wire [31:0] \$s_count$13 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  wire [31:0] \$s_count$14 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  wire [31:0] \$s_count$15 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.10-68.38" */
  wire \$target_reached_o$24 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$11  (
    .A(s_count_reg),
    .B(32'd1),
    .Y(\$12 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$799 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$801 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$23 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$2 ),
    .B(\$4 ),
    .Y(\$6 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$target_reached_o$24 ),
    .Q(target_reached_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:66.13-66.38|rtl/timer_unit/timer_unit_counter_presc.sv:65.10-68.38" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13207  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13208_CMP ),
    .Y(\$procmux$13207_Y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13209  (
    .A(s_count_reg),
    .B(\$12 ),
    .S(\$procmux$13210_CMP ),
    .Y(\$procmux$13209_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13212  (
    .A(\$procmux$13209_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13213_CMP ),
    .Y(\$procmux$13212_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13215  (
    .A(\$procmux$13212_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13216_CMP ),
    .Y(\$procmux$13215_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13219  (
    .A(\$s_count$13 ),
    .B(counter_value_i),
    .S(\$procmux$13220_CMP ),
    .Y(\$procmux$13219_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13222  (
    .A(\$procmux$13219_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13223_CMP ),
    .Y(\$procmux$13222_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13226  (
    .A(\$s_count$14 ),
    .B(32'd0),
    .S(\$procmux$13227_CMP ),
    .Y(\$procmux$13226_Y )
  );
  assign s_count = \$s_count$15 ;
  assign counter_value_o = s_count_reg;
  assign \$procmux$13208_CMP  = \$23 ;
  assign \$target_reached_o$24  = \$procmux$13207_Y ;
  assign \$procmux$13210_CMP  = \$10 ;
  assign \$procmux$13213_CMP  = \$8 ;
  assign \$procmux$13216_CMP  = \$6 ;
  assign \$s_count$13  = \$procmux$13215_Y ;
  assign \$procmux$13220_CMP  = \$8 ;
  assign \$procmux$13223_CMP  = \$6 ;
  assign \$s_count$14  = \$procmux$13222_Y ;
  assign \$procmux$13227_CMP  = \$6 ;
  assign \$s_count$15  = \$procmux$13226_Y ;
  assign \$2  = reset_count_i;
  assign \$4  = target_reached_o;
  assign \$8  = write_counter_i;
  assign \$10  = enable_count_i;
  assign \$auto$rtlil.cc:2965:LogicNot$800  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$802  = rst_ni;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$10 ;
  wire [31:0] \$12 ;
  wire \$2 ;
  wire \$23 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:2965:LogicNot$795 ;
  wire \$auto$rtlil.cc:2965:LogicNot$796 ;
  wire \$auto$rtlil.cc:2965:LogicNot$797 ;
  wire \$auto$rtlil.cc:2965:LogicNot$798 ;
  wire \$procmux$13229_Y ;
  wire \$procmux$13230_CMP ;
  wire [31:0] \$procmux$13231_Y ;
  wire \$procmux$13232_CMP ;
  wire [31:0] \$procmux$13234_Y ;
  wire \$procmux$13235_CMP ;
  wire [31:0] \$procmux$13237_Y ;
  wire \$procmux$13238_CMP ;
  wire [31:0] \$procmux$13241_Y ;
  wire \$procmux$13242_CMP ;
  wire [31:0] \$procmux$13244_Y ;
  wire \$procmux$13245_CMP ;
  wire [31:0] \$procmux$13248_Y ;
  wire \$procmux$13249_CMP ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  wire [31:0] \$s_count$13 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  wire [31:0] \$s_count$14 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  wire [31:0] \$s_count$15 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.10-68.38" */
  wire \$target_reached_o$24 ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$11  (
    .A(s_count_reg),
    .B(32'd1),
    .Y(\$12 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$795 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$797 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$23 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$2 ),
    .B(\$4 ),
    .Y(\$6 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .AD(32'd0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(\$target_reached_o$24 ),
    .Q(target_reached_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:66.13-66.38|rtl/timer_unit/timer_unit_counter_presc.sv:65.10-68.38" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13229  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$13230_CMP ),
    .Y(\$procmux$13229_Y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13231  (
    .A(s_count_reg),
    .B(\$12 ),
    .S(\$procmux$13232_CMP ),
    .Y(\$procmux$13231_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13234  (
    .A(\$procmux$13231_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13235_CMP ),
    .Y(\$procmux$13234_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13237  (
    .A(\$procmux$13234_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13238_CMP ),
    .Y(\$procmux$13237_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13241  (
    .A(\$s_count$13 ),
    .B(counter_value_i),
    .S(\$procmux$13242_CMP ),
    .Y(\$procmux$13241_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13244  (
    .A(\$procmux$13241_Y ),
    .B(32'hxxxxxxxx),
    .S(\$procmux$13245_CMP ),
    .Y(\$procmux$13244_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13248  (
    .A(\$s_count$14 ),
    .B(32'd0),
    .S(\$procmux$13249_CMP ),
    .Y(\$procmux$13248_Y )
  );
  assign s_count = \$s_count$15 ;
  assign counter_value_o = s_count_reg;
  assign \$procmux$13230_CMP  = \$23 ;
  assign \$target_reached_o$24  = \$procmux$13229_Y ;
  assign \$procmux$13232_CMP  = \$10 ;
  assign \$procmux$13235_CMP  = \$8 ;
  assign \$procmux$13238_CMP  = \$6 ;
  assign \$s_count$13  = \$procmux$13237_Y ;
  assign \$procmux$13242_CMP  = \$8 ;
  assign \$procmux$13245_CMP  = \$6 ;
  assign \$s_count$14  = \$procmux$13244_Y ;
  assign \$procmux$13249_CMP  = \$6 ;
  assign \$s_count$15  = \$procmux$13248_Y ;
  assign \$2  = reset_count_i;
  assign \$4  = target_reached_o;
  assign \$8  = write_counter_i;
  assign \$10  = enable_count_i;
  assign \$auto$rtlil.cc:2965:LogicNot$796  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$798  = rst_ni;
endmodule

/* src = "rtl/apb_uart/uart_baudgen.sv:35.8" */
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire \$11 ;
  wire [31:0] \$13 ;
  wire \$3 ;
  wire \$5 ;
  wire [31:0] \$7 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  wire \$BAUDTICK$15 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1531 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  wire [15:0] \$iCounter$14 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:62.16-65.18" */
  wire [15:0] \$iCounter$8 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  wire [15:0] \$iCounter$9 ;
  wire \$procmux$7685_Y ;
  wire \$procmux$7686_CMP ;
  wire [15:0] \$procmux$7688_Y ;
  wire \$procmux$7689_CMP ;
  wire [15:0] \$procmux$7691_Y ;
  wire \$procmux$7692_CMP ;
  wire [15:0] \$procmux$7694_Y ;
  wire \$procmux$7695_CMP ;
  wire [15:0] \$procmux$7698_Y ;
  wire \$procmux$7699_CMP ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:41.16" */
  output BAUDTICK;
  wire BAUDTICK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/uart_baudgen.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_baudgen.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:40.21" */
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  /* src = "rtl/apb_uart/uart_baudgen.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_baudgen.sv:45.12" */
  wire [15:0] iCounter;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1531 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(iCounter),
    .Y(\$11 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$12  (
    .A({ 16'h0000, DIVIDER }),
    .B(32'd1),
    .Y(\$13 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$6  (
    .A({ 16'h0000, iCounter }),
    .B(32'd1),
    .Y(\$7 )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$BAUDTICK  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$BAUDTICK$15 ),
    .Q(BAUDTICK)
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$driver$iCounter  (
    .AD(16'h0000),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iCounter$14 ),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7685  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7686_CMP ),
    .Y(\$procmux$7685_Y )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7688  (
    .A(\$iCounter$9 ),
    .B(\$13 [15:0]),
    .S(\$procmux$7689_CMP ),
    .Y(\$procmux$7688_Y )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:64.7-64.32|rtl/apb_uart/uart_baudgen.sv:62.16-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7691  (
    .A(iCounter),
    .B(\$7 [15:0]),
    .S(\$procmux$7692_CMP ),
    .Y(\$procmux$7691_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7694  (
    .A(\$procmux$7691_Y ),
    .B(16'hxxxx),
    .S(\$procmux$7695_CMP ),
    .Y(\$procmux$7694_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7698  (
    .A(\$iCounter$8 ),
    .B(16'h0000),
    .S(\$procmux$7699_CMP ),
    .Y(\$procmux$7698_Y )
  );
  assign \$procmux$7686_CMP  = \$11 ;
  assign \$BAUDTICK$15  = \$procmux$7685_Y ;
  assign \$procmux$7689_CMP  = \$11 ;
  assign \$iCounter$14  = \$procmux$7688_Y ;
  assign \$procmux$7692_CMP  = \$5 ;
  assign \$procmux$7695_CMP  = \$3 ;
  assign \$iCounter$8  = \$procmux$7694_Y ;
  assign \$procmux$7699_CMP  = \$3 ;
  assign \$iCounter$9  = \$procmux$7698_Y ;
  assign \$3  = CLEAR;
  assign \$5  = CE;
endmodule

/* src = "rtl/apb_uart/uart_interrupt.sv:35.8" */
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$44 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1506 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  wire [3:0] \$iIIR$38 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  wire [3:0] \$iIIR$39 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  wire [3:0] \$iIIR$40 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  wire [3:0] \$iIIR$41 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  wire [3:0] \$iIIR$42 ;
  wire [3:0] \$procmux$7701_Y ;
  wire \$procmux$7702_CMP ;
  wire [3:0] \$procmux$7704_Y ;
  wire \$procmux$7705_CMP ;
  wire [3:0] \$procmux$7707_Y ;
  wire \$procmux$7708_CMP ;
  wire [3:0] \$procmux$7710_Y ;
  wire \$procmux$7711_CMP ;
  wire [3:0] \$procmux$7713_Y ;
  wire \$procmux$7714_CMP ;
  wire [3:0] \$procmux$7717_Y ;
  wire \$procmux$7718_CMP ;
  wire [3:0] \$procmux$7720_Y ;
  wire \$procmux$7721_CMP ;
  wire [3:0] \$procmux$7723_Y ;
  wire \$procmux$7724_CMP ;
  wire [3:0] \$procmux$7726_Y ;
  wire \$procmux$7727_CMP ;
  wire [3:0] \$procmux$7730_Y ;
  wire \$procmux$7731_CMP ;
  wire [3:0] \$procmux$7733_Y ;
  wire \$procmux$7734_CMP ;
  wire [3:0] \$procmux$7736_Y ;
  wire \$procmux$7737_CMP ;
  wire [3:0] \$procmux$7740_Y ;
  wire \$procmux$7741_CMP ;
  wire [3:0] \$procmux$7743_Y ;
  wire \$procmux$7744_CMP ;
  wire [3:0] \$procmux$7747_Y ;
  wire \$procmux$7748_CMP ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:43.14" */
  input AFE;
  wire AFE;
  /* src = "rtl/apb_uart/uart_interrupt.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_interrupt.sv:42.14" */
  input CTI;
  wire CTI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:38.20" */
  input [3:0] IER;
  wire [3:0] IER;
  /* src = "rtl/apb_uart/uart_interrupt.sv:45.22" */
  output [3:0] IIR;
  wire [3:0] IIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/uart_interrupt.sv:39.20" */
  input [4:0] LSR;
  wire [4:0] LSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:44.20" */
  input [3:0] MSR;
  wire [3:0] MSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:41.14" */
  input RDA;
  wire RDA;
  /* src = "rtl/apb_uart/uart_interrupt.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_interrupt.sv:40.14" */
  input THI;
  wire THI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:52.5" */
  wire iCTIInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:55.11" */
  wire [3:0] iIIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:54.5" */
  wire iMSRInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:51.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:50.5" */
  wire iRLSInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:53.5" */
  wire iTHRInterrupt;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(LSR[1]),
    .B(LSR[2]),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(IER[0]),
    .B(CTI),
    .Y(\$11 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(IER[1]),
    .B(THI),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(AFE),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(MSR[0]),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(MSR[1]),
    .Y(\$19 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(LSR[3]),
    .Y(\$3 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19 ),
    .B(MSR[2]),
    .Y(\$21 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21 ),
    .B(MSR[3]),
    .Y(\$23 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(IER[3]),
    .B(\$23 ),
    .Y(\$25 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1506 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .B(LSR[4]),
    .Y(\$5 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(iIIR[0]),
    .Y(\$44 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(IER[2]),
    .B(\$5 ),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(IER[0]),
    .B(RDA),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:62.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$iIIR  (
    .AD(4'h1),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iIIR$42 ),
    .Q(iIIR)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:87.13-87.29|rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7701  (
    .A(4'h1),
    .B(4'h0),
    .S(\$procmux$7702_CMP ),
    .Y(\$procmux$7701_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7704  (
    .A(\$procmux$7701_Y ),
    .B(4'hx),
    .S(\$procmux$7705_CMP ),
    .Y(\$procmux$7704_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7707  (
    .A(\$procmux$7704_Y ),
    .B(4'hx),
    .S(\$procmux$7708_CMP ),
    .Y(\$procmux$7707_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7710  (
    .A(\$procmux$7707_Y ),
    .B(4'hx),
    .S(\$procmux$7711_CMP ),
    .Y(\$procmux$7710_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7713  (
    .A(\$procmux$7710_Y ),
    .B(4'hx),
    .S(\$procmux$7714_CMP ),
    .Y(\$procmux$7713_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7717  (
    .A(\$iIIR$38 ),
    .B(4'h2),
    .S(\$procmux$7718_CMP ),
    .Y(\$procmux$7717_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7720  (
    .A(\$procmux$7717_Y ),
    .B(4'hx),
    .S(\$procmux$7721_CMP ),
    .Y(\$procmux$7720_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7723  (
    .A(\$procmux$7720_Y ),
    .B(4'hx),
    .S(\$procmux$7724_CMP ),
    .Y(\$procmux$7723_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7726  (
    .A(\$procmux$7723_Y ),
    .B(4'hx),
    .S(\$procmux$7727_CMP ),
    .Y(\$procmux$7726_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7730  (
    .A(\$iIIR$39 ),
    .B(4'h4),
    .S(\$procmux$7731_CMP ),
    .Y(\$procmux$7730_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7733  (
    .A(\$procmux$7730_Y ),
    .B(4'hx),
    .S(\$procmux$7734_CMP ),
    .Y(\$procmux$7733_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7736  (
    .A(\$procmux$7733_Y ),
    .B(4'hx),
    .S(\$procmux$7737_CMP ),
    .Y(\$procmux$7736_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7740  (
    .A(\$iIIR$40 ),
    .B(4'hc),
    .S(\$procmux$7741_CMP ),
    .Y(\$procmux$7740_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7743  (
    .A(\$procmux$7740_Y ),
    .B(4'hx),
    .S(\$procmux$7744_CMP ),
    .Y(\$procmux$7743_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7747  (
    .A(\$iIIR$41 ),
    .B(4'h6),
    .S(\$procmux$7748_CMP ),
    .Y(\$procmux$7747_Y )
  );
  assign iRLSInterrupt = \$7 ;
  assign iRDAInterrupt = \$9 ;
  assign iCTIInterrupt = \$11 ;
  assign iTHRInterrupt = \$13 ;
  assign iMSRInterrupt = \$25 ;
  assign IIR = iIIR;
  assign INT = \$44 ;
  assign \$procmux$7702_CMP  = \$37 ;
  assign \$procmux$7705_CMP  = \$35 ;
  assign \$procmux$7708_CMP  = \$33 ;
  assign \$procmux$7711_CMP  = \$31 ;
  assign \$procmux$7714_CMP  = \$29 ;
  assign \$iIIR$38  = \$procmux$7713_Y ;
  assign \$procmux$7718_CMP  = \$35 ;
  assign \$procmux$7721_CMP  = \$33 ;
  assign \$procmux$7724_CMP  = \$31 ;
  assign \$procmux$7727_CMP  = \$29 ;
  assign \$iIIR$39  = \$procmux$7726_Y ;
  assign \$procmux$7731_CMP  = \$33 ;
  assign \$procmux$7734_CMP  = \$31 ;
  assign \$procmux$7737_CMP  = \$29 ;
  assign \$iIIR$40  = \$procmux$7736_Y ;
  assign \$procmux$7741_CMP  = \$31 ;
  assign \$procmux$7744_CMP  = \$29 ;
  assign \$iIIR$41  = \$procmux$7743_Y ;
  assign \$procmux$7748_CMP  = \$29 ;
  assign \$iIIR$42  = \$procmux$7747_Y ;
  assign \$29  = iRLSInterrupt;
  assign \$31  = iCTIInterrupt;
  assign \$33  = iRDAInterrupt;
  assign \$35  = iTHRInterrupt;
  assign \$37  = iMSRInterrupt;
endmodule

/* src = "rtl/apb_uart/uart_receiver.sv:35.8" */
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$10 ;
  wire \$101 ;
  wire \$107 ;
  wire \$116 ;
  wire \$118 ;
  wire \$12 ;
  wire \$120 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$132 ;
  wire \$138 ;
  wire \$14 ;
  wire \$140 ;
  wire \$142 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire \$156 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire [31:0] \$41 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$8 ;
  wire \$81 ;
  wire \$84 ;
  wire \$86 ;
  wire \$90 ;
  wire \$92 ;
  wire \$96 ;
  wire \$99 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26" */
  wire [2:0] \$NState$102 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  wire [2:0] \$NState$104 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  wire [2:0] \$NState$108 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  wire [2:0] \$NState$109 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:169.3-172.18" */
  wire [2:0] \$NState$82 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  wire [2:0] \$NState$87 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  wire [2:0] \$NState$88 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  wire [2:0] \$NState$93 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  wire [2:0] \$NState$94 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  wire [2:0] \$NState$97 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  wire \$PE$130 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:292.11-295.34" */
  wire \$PE$133 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  wire \$PE$134 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$PE$136 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1571 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1572 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1581 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1582 ;
  wire \$auto$rtlil.cc:3009:Lt$1574 ;
  wire \$auto$rtlil.cc:3015:Ge$1573 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1575 ;
  wire \$auto$rtlil.cc:3092:Mux$1576 ;
  wire \$auto$rtlil.cc:3092:Mux$1580 ;
  wire \$auto$rtlil.cc:3092:Mux$1583 ;
  wire \$auto$rtlil.cc:3092:Mux$1584 ;
  wire \$auto$rtlil.cc:3092:Mux$1585 ;
  wire [7:0] \$auto$rtlil.cc:3093:Bwmux$1579 ;
  wire [7:0] \$auto$rtlil.cc:3114:Demux$1577 ;
  wire [7:0] \$auto$rtlil.cc:3114:Demux$1578 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  wire \$iBaudCountClear$110 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:140.13-144.18" */
  wire [7:0] \$iDOUT$43 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [7:0] \$iDOUT$45 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:140.13-144.18" */
  wire [3:0] \$iDataCount$42 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [3:0] \$iDataCount$44 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  wire \$iDataCountInit$111 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  wire \$iParityReceived$121 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$iParityReceived$135 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26" */
  wire \$iRXFinished$103 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  wire \$iRXFinished$105 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  wire \$iRXFinished$112 ;
  wire [7:0] \$procmux$7184_Y ;
  wire \$procmux$7185_CMP ;
  wire [7:0] \$procmux$7187_Y ;
  wire \$procmux$7188_CMP ;
  wire [3:0] \$procmux$7189_Y ;
  wire \$procmux$7190_CMP ;
  wire [3:0] \$procmux$7192_Y ;
  wire \$procmux$7193_CMP ;
  wire [7:0] \$procmux$7196_Y ;
  wire \$procmux$7197_CMP ;
  wire [3:0] \$procmux$7200_Y ;
  wire \$procmux$7201_CMP ;
  wire [2:0] \$procmux$7202_Y ;
  wire \$procmux$7203_CMP ;
  wire [2:0] \$procmux$7204_Y ;
  wire \$procmux$7205_CMP ;
  wire [2:0] \$procmux$7209_Y ;
  wire \$procmux$7210_CMP ;
  wire [2:0] \$procmux$7211_Y ;
  wire \$procmux$7212_CMP ;
  wire \$procmux$7217_Y ;
  wire \$procmux$7218_CMP ;
  wire \$procmux$7219_Y ;
  wire \$procmux$7220_CMP ;
  wire [2:0] \$procmux$7224_Y ;
  wire \$procmux$7225_CMP ;
  wire [2:0] \$procmux$7226_Y ;
  wire \$procmux$7227_CMP ;
  wire [2:0] \$procmux$7228_Y ;
  wire \$procmux$7229_CMP ;
  wire \$procmux$7233_Y ;
  wire \$procmux$7234_CMP ;
  wire \$procmux$7235_Y ;
  wire \$procmux$7236_CMP ;
  wire [2:0] \$procmux$7240_Y ;
  wire \$procmux$7241_CMP ;
  wire [2:0] \$procmux$7242_Y ;
  wire \$procmux$7243_CMP ;
  wire [2:0] \$procmux$7249_Y ;
  wire \$procmux$7250_CMP ;
  wire [2:0] \$procmux$7251_Y ;
  wire \$procmux$7252_CMP ;
  wire [2:0] \$procmux$7258_Y ;
  wire \$procmux$7259_CMP ;
  wire [2:0] \$procmux$7260_Y ;
  wire \$procmux$7261_CMP ;
  wire [2:0] \$procmux$7262_Y ;
  wire \$procmux$7263_CMP ;
  wire [2:0] \$procmux$7270_Y ;
  wire \$procmux$7271_CMP ;
  wire [2:0] \$procmux$7272_Y ;
  wire \$procmux$7273_CMP ;
  wire [2:0] \$procmux$7279_Y ;
  wire \$procmux$7280_CMP ;
  wire [2:0] \$procmux$7281_Y ;
  wire \$procmux$7282_CMP ;
  wire [2:0] \$procmux$7283_Y ;
  wire \$procmux$7284_CMP ;
  wire [2:0] \$procmux$7290_Y ;
  wire \$procmux$7291_CMP ;
  wire [2:0] \$procmux$7292_Y ;
  wire \$procmux$7293_CMP ;
  wire \$procmux$7296_Y ;
  wire \$procmux$7297_CMP ;
  wire \$procmux$7303_Y ;
  wire \$procmux$7304_CMP ;
  wire \$procmux$7306_CMP ;
  wire \$procmux$7313_Y ;
  wire \$procmux$7314_CMP ;
  wire [2:0] \$procmux$7316_Y ;
  wire \$procmux$7317_CMP ;
  wire \$procmux$7319_CMP ;
  wire \$procmux$7321_CMP ;
  wire \$procmux$7323_CMP ;
  wire \$procmux$7325_CMP ;
  wire \$procmux$7327_CMP ;
  wire \$procmux$7330_Y ;
  wire \$procmux$7331_CMP ;
  wire \$procmux$7334_Y ;
  wire \$procmux$7335_CMP ;
  wire \$procmux$7337_Y ;
  wire \$procmux$7338_CMP ;
  wire \$procmux$7339_Y ;
  wire \$procmux$7340_CMP ;
  wire \$procmux$7346_Y ;
  wire \$procmux$7347_CMP ;
  wire \$procmux$7348_Y ;
  wire \$procmux$7349_CMP ;
  wire \$procmux$7353_Y ;
  wire \$procmux$7354_CMP ;
  wire \$procmux$7355_Y ;
  wire \$procmux$7356_CMP ;
  wire \$procmux$7357_Y ;
  wire \$procmux$7358_CMP ;
  wire \$procmux$7361_Y ;
  wire \$procmux$7362_CMP ;
  wire \$procmux$7364_Y ;
  wire \$procmux$7365_CMP ;
  /* src = "rtl/apb_uart/uart_receiver.sv:48.16" */
  output BI;
  wire BI;
  /* src = "rtl/apb_uart/uart_receiver.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.12" */
  wire [2:0] CState;
  /* src = "rtl/apb_uart/uart_receiver.sv:49.22" */
  output [7:0] DOUT;
  wire [7:0] DOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:43.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_receiver.sv:47.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.20" */
  wire [2:0] NState;
  /* src = "rtl/apb_uart/uart_receiver.sv:46.16" */
  output PE;
  wire PE;
  /* src = "rtl/apb_uart/uart_receiver.sv:42.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_receiver.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_receiver.sv:39.14" */
  input RXCLEAR;
  wire RXCLEAR;
  /* src = "rtl/apb_uart/uart_receiver.sv:38.14" */
  input RXCLK;
  wire RXCLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:50.16" */
  output RXFINISHED;
  wire RXFINISHED;
  /* src = "rtl/apb_uart/uart_receiver.sv:45.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:44.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_receiver.sv:41.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_receiver.sv:40.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_receiver.sv:75.5" */
  wire iBI;
  /* src = "rtl/apb_uart/uart_receiver.sv:61.11" */
  wire [3:0] iBaudCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:62.5" */
  wire iBaudCountClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:63.5" */
  wire iBaudStep;
  /* src = "rtl/apb_uart/uart_receiver.sv:64.5" */
  wire iBaudStepD;
  /* src = "rtl/apb_uart/uart_receiver.sv:77.11" */
  wire [7:0] iDOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:70.11" */
  wire [3:0] iDataCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:72.5" */
  wire iDataCountFinish;
  /* src = "rtl/apb_uart/uart_receiver.sv:71.5" */
  wire iDataCountInit;
  /* src = "rtl/apb_uart/uart_receiver.sv:74.5" */
  wire iFE;
  /* src = "rtl/apb_uart/uart_receiver.sv:66.5" */
  wire iFSIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:67.5" */
  wire iFStopBit;
  /* src = "rtl/apb_uart/uart_receiver.sv:65.5" */
  wire iFilterClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:76.5" */
  wire iNoStopReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:68.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_receiver.sv:69.5" */
  wire iParityReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:73.5" */
  wire iRXFinished;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1571 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(iFStopBit),
    .Y(\$101 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(SIN),
    .Y(\$107 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(iDOUT[3]),
    .Y(\$12 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1582 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(CState),
    .B(3'h3),
    .Y(\$116 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\$116 ),
    .B(\$118 ),
    .Y(\$120 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(EPS),
    .B(iParityReceived),
    .Y(\$127 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\$127 ),
    .Y(\$129 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$12 ),
    .B(iDOUT[2]),
    .Y(\$14 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(iParity),
    .B(iParityReceived),
    .Y(\$132 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(iFStopBit),
    .Y(\$138 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(CState),
    .B(3'h4),
    .Y(\$140 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(\$138 ),
    .B(\$140 ),
    .Y(\$142 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$143  (
    .A(1'h0),
    .B(1'h1),
    .S(\$142 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1583 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(iDOUT),
    .Y(\$145 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(iParityReceived),
    .Y(\$147 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(\$145 ),
    .B(\$147 ),
    .Y(\$149 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(iDOUT[1]),
    .Y(\$16 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(\$149 ),
    .B(\$151 ),
    .Y(\$153 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$154  (
    .A(1'h0),
    .B(1'h1),
    .S(\$153 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1584 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$157  (
    .A(1'h0),
    .B(1'h1),
    .S(\$156 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1585 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$16 ),
    .B(iDOUT[0]),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(EPS),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iBaudStepD),
    .B(iBaudCountClear),
    .Y(\$3 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$18 ),
    .B(\$20 ),
    .Y(\$22 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1572 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(iDataCountFinish),
    .Y(\$30 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\$28 ),
    .B(\$30 ),
    .Y(\$32 )
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A({ 1'h0, iDataCount }),
    .B(1'h0),
    .Y(\$auto$rtlil.cc:3015:Ge$1573 )
  );
  \$lt  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A({ 1'h0, iDataCount }),
    .B(5'h08),
    .Y(\$auto$rtlil.cc:3009:Lt$1574 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$auto$rtlil.cc:3015:Ge$1573 ),
    .B(\$auto$rtlil.cc:3009:Lt$1574 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1575 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(1'h0),
    .B(1'h1),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1575 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1576 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$37  (
    .A(\$auto$rtlil.cc:3092:Mux$1576 ),
    .S(iDataCount[2:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1577 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$38  (
    .A(\$auto$rtlil.cc:3092:Mux$1576 ),
    .S(iDataCount[2:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1578 )
  );
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$39  (
    .A(iDOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$auto$rtlil.cc:3114:Demux$1578 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1579 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$40  (
    .A({ 28'h0000000, iDataCount }),
    .B(32'd1),
    .Y(\$41 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(WLS),
    .Y(\$47 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(iDataCount),
    .B(4'h5),
    .Y(\$49 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(iDOUT[7]),
    .B(iDOUT[6]),
    .Y(\$6 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$49 ),
    .Y(\$51 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(WLS),
    .B(2'h1),
    .Y(\$53 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(iDataCount),
    .B(4'h6),
    .Y(\$55 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$53 ),
    .B(\$55 ),
    .Y(\$57 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$51 ),
    .B(\$57 ),
    .Y(\$59 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(WLS),
    .B(2'h2),
    .Y(\$61 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(iDataCount),
    .B(4'h7),
    .Y(\$63 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$61 ),
    .B(\$63 ),
    .Y(\$65 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$59 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(WLS),
    .B(2'h3),
    .Y(\$69 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$6 ),
    .B(iDOUT[5]),
    .Y(\$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(iDataCount),
    .B(4'h8),
    .Y(\$71 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$69 ),
    .B(\$71 ),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$67 ),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$76  (
    .A(1'h0),
    .B(1'h1),
    .S(\$75 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1580 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1581 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(SIN),
    .Y(\$81 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(iFSIN),
    .Y(\$86 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8 ),
    .B(iDOUT[4]),
    .Y(\$10 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:150.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$CState  (
    .AD(3'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(NState),
    .Q(CState)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$PE  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$PE$136 ),
    .Q(PE)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:102.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBaudStepD  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(iBaudStep),
    .Q(iBaudStepD)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$iDOUT  (
    .AD(8'h00),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iDOUT$45 ),
    .Q(iDOUT)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$iDataCount  (
    .AD(4'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iDataCount$44 ),
    .Q(iDataCount)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iParityReceived  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iParityReceived$135 ),
    .Q(iParityReceived)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:141.15-144.18|rtl/apb_uart/uart_receiver.sv:140.13-144.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7184  (
    .A(iDOUT),
    .B(\$auto$rtlil.cc:3093:Bwmux$1579 ),
    .S(\$procmux$7185_CMP ),
    .Y(\$procmux$7184_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7187  (
    .A(\$procmux$7184_Y ),
    .B(8'hxx),
    .S(\$procmux$7188_CMP ),
    .Y(\$procmux$7187_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:141.15-144.18|rtl/apb_uart/uart_receiver.sv:140.13-144.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7189  (
    .A(iDataCount),
    .B(\$41 [3:0]),
    .S(\$procmux$7190_CMP ),
    .Y(\$procmux$7189_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7192  (
    .A(\$procmux$7189_Y ),
    .B(4'hx),
    .S(\$procmux$7193_CMP ),
    .Y(\$procmux$7192_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7196  (
    .A(\$iDOUT$43 ),
    .B(8'h00),
    .S(\$procmux$7197_CMP ),
    .Y(\$procmux$7196_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7200  (
    .A(\$iDataCount$42 ),
    .B(4'h0),
    .S(\$procmux$7201_CMP ),
    .Y(\$procmux$7200_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:251.7-251.23|rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7202  (
    .A(3'h5),
    .B(3'h0),
    .S(SIN),
    .Y(\$procmux$7202_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7204  (
    .A(3'hx),
    .B(\$procmux$7202_Y ),
    .S(\$procmux$7205_CMP ),
    .Y(\$procmux$7204_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7205_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$7205_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7209  (
    .A(3'h4),
    .B(\$NState$102 ),
    .S(\$procmux$7210_CMP ),
    .Y(\$procmux$7209_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7211  (
    .A(3'hx),
    .B(\$procmux$7209_Y ),
    .S(\$procmux$7212_CMP ),
    .Y(\$procmux$7211_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7212_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7212_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7217  (
    .A(1'hx),
    .B(1'h1),
    .S(\$procmux$7218_CMP ),
    .Y(\$procmux$7217_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7219  (
    .A(1'hx),
    .B(\$procmux$7217_Y ),
    .S(\$procmux$7220_CMP ),
    .Y(\$procmux$7219_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7220_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7220_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:231.19-234.26|rtl/apb_uart/uart_receiver.sv:230.7-239.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7224  (
    .A(3'h5),
    .B(3'h0),
    .S(iFStopBit),
    .Y(\$procmux$7224_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7226  (
    .A(3'hx),
    .B(\$procmux$7224_Y ),
    .S(\$procmux$7227_CMP ),
    .Y(\$procmux$7226_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7228  (
    .A(3'hx),
    .B(\$procmux$7226_Y ),
    .S(\$procmux$7229_CMP ),
    .Y(\$procmux$7228_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7229_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7229_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7233  (
    .A(1'h0),
    .B(\$iRXFinished$103 ),
    .S(\$procmux$7234_CMP ),
    .Y(\$procmux$7233_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7235  (
    .A(1'hx),
    .B(\$procmux$7233_Y ),
    .S(\$procmux$7236_CMP ),
    .Y(\$procmux$7235_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7236_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7236_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:218.7-218.22|rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7240  (
    .A(3'h3),
    .B(3'h4),
    .S(\$procmux$7241_CMP ),
    .Y(\$procmux$7240_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7242  (
    .A(3'hx),
    .B(\$procmux$7240_Y ),
    .S(\$procmux$7243_CMP ),
    .Y(\$procmux$7242_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7243_CMP0  (
    .A(CState),
    .B(3'h3),
    .Y(\$procmux$7243_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7249  (
    .A(3'h2),
    .B(\$NState$93 ),
    .S(\$procmux$7250_CMP ),
    .Y(\$procmux$7249_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7251  (
    .A(3'hx),
    .B(\$procmux$7249_Y ),
    .S(\$procmux$7252_CMP ),
    .Y(\$procmux$7251_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7252_CMP0  (
    .A(CState),
    .B(3'h2),
    .Y(\$procmux$7252_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:201.11-201.25|rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7258  (
    .A(3'h4),
    .B(3'h3),
    .S(\$procmux$7259_CMP ),
    .Y(\$procmux$7258_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7260  (
    .A(3'hx),
    .B(\$procmux$7258_Y ),
    .S(\$procmux$7261_CMP ),
    .Y(\$procmux$7260_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7262  (
    .A(3'hx),
    .B(\$procmux$7260_Y ),
    .S(\$procmux$7263_CMP ),
    .Y(\$procmux$7262_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7263_CMP0  (
    .A(CState),
    .B(3'h2),
    .Y(\$procmux$7263_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7270  (
    .A(3'h1),
    .B(\$NState$87 ),
    .S(\$procmux$7271_CMP ),
    .Y(\$procmux$7270_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7272  (
    .A(3'hx),
    .B(\$procmux$7270_Y ),
    .S(\$procmux$7273_CMP ),
    .Y(\$procmux$7272_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7273_CMP0  (
    .A(CState),
    .B(3'h1),
    .Y(\$procmux$7273_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:185.11-185.26|rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7279  (
    .A(3'h2),
    .B(3'h0),
    .S(iFSIN),
    .Y(\$procmux$7279_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7281  (
    .A(3'hx),
    .B(\$procmux$7279_Y ),
    .S(\$procmux$7282_CMP ),
    .Y(\$procmux$7281_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7283  (
    .A(3'hx),
    .B(\$procmux$7281_Y ),
    .S(\$procmux$7284_CMP ),
    .Y(\$procmux$7283_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7284_CMP0  (
    .A(CState),
    .B(3'h1),
    .Y(\$procmux$7284_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:171.7-171.23|rtl/apb_uart/uart_receiver.sv:169.3-172.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7290  (
    .A(3'h1),
    .B(3'h0),
    .S(SIN),
    .Y(\$procmux$7290_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7292  (
    .A(3'hx),
    .B(\$procmux$7290_Y ),
    .S(\$procmux$7293_CMP ),
    .Y(\$procmux$7292_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7293_CMP0  (
    .A(CState),
    .Y(\$procmux$7293_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7296  (
    .A(1'h0),
    .B(\$iRXFinished$105 ),
    .S(\$procmux$7297_CMP ),
    .Y(\$procmux$7296_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7297_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7297_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7303  (
    .A(1'h0),
    .B(2'h3),
    .S({ \$procmux$7306_CMP , \$procmux$7304_CMP  }),
    .Y(\$procmux$7303_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7304_CMP0  (
    .A(CState),
    .B(3'h1),
    .Y(\$procmux$7304_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7306_CMP0  (
    .A(CState),
    .Y(\$procmux$7306_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7313  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7314_CMP ),
    .Y(\$procmux$7313_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7314_CMP0  (
    .A(CState),
    .Y(\$procmux$7314_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$7316  (
    .A(3'h0),
    .B({ \$NState$82 , \$NState$88 , \$NState$94 , \$NState$97 , \$NState$104 , \$NState$108  }),
    .S({ \$procmux$7327_CMP , \$procmux$7325_CMP , \$procmux$7323_CMP , \$procmux$7321_CMP , \$procmux$7319_CMP , \$procmux$7317_CMP  }),
    .Y(\$procmux$7316_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7317_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$7317_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7319_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7319_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7321_CMP0  (
    .A(CState),
    .B(3'h3),
    .Y(\$procmux$7321_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7323_CMP0  (
    .A(CState),
    .B(3'h2),
    .Y(\$procmux$7323_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7325_CMP0  (
    .A(CState),
    .B(3'h1),
    .Y(\$procmux$7325_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7327_CMP0  (
    .A(CState),
    .Y(\$procmux$7327_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7330  (
    .A(1'h0),
    .B(\$PE$134 ),
    .S(\$procmux$7331_CMP ),
    .Y(\$procmux$7330_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:294.15-294.27|rtl/apb_uart/uart_receiver.sv:292.11-295.34" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7334  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7335_CMP ),
    .Y(\$procmux$7334_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7337  (
    .A(\$procmux$7334_Y ),
    .B(1'hx),
    .S(\$procmux$7338_CMP ),
    .Y(\$procmux$7337_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7339  (
    .A(1'hx),
    .B(\$procmux$7337_Y ),
    .S(\$procmux$7340_CMP ),
    .Y(\$procmux$7339_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7346  (
    .A(\$PE$133 ),
    .B(\$PE$130 ),
    .S(\$procmux$7347_CMP ),
    .Y(\$procmux$7346_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7348  (
    .A(1'hx),
    .B(\$procmux$7346_Y ),
    .S(\$procmux$7349_CMP ),
    .Y(\$procmux$7348_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:286.15-286.27|rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7353  (
    .A(1'h1),
    .B(1'h0),
    .S(\$127 ),
    .Y(\$procmux$7353_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7355  (
    .A(1'hx),
    .B(\$procmux$7353_Y ),
    .S(\$procmux$7356_CMP ),
    .Y(\$procmux$7355_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7357  (
    .A(1'hx),
    .B(\$procmux$7355_Y ),
    .S(\$procmux$7358_CMP ),
    .Y(\$procmux$7357_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7361  (
    .A(1'h0),
    .B(\$iParityReceived$121 ),
    .S(\$procmux$7362_CMP ),
    .Y(\$procmux$7361_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:276.7-276.32|rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7364  (
    .A(iParityReceived),
    .B(iFSIN),
    .S(\$procmux$7365_CMP ),
    .Y(\$procmux$7364_Y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:78.27" */
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:95.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:88.44" */
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign iFilterClear = \$3 ;
  assign iParity = \$22 ;
  assign iDataCountFinish = \$auto$rtlil.cc:3092:Mux$1580 ;
  assign NState = \$NState$109 ;
  assign iBaudCountClear = \$iBaudCountClear$110 ;
  assign iDataCountInit = \$iDataCountInit$111 ;
  assign iRXFinished = \$iRXFinished$112 ;
  assign iNoStopReceived = \$auto$rtlil.cc:3092:Mux$1583 ;
  assign iBI = \$auto$rtlil.cc:3092:Mux$1584 ;
  assign iFE = \$auto$rtlil.cc:3092:Mux$1585 ;
  assign DOUT = iDOUT;
  assign BI = iBI;
  assign FE = iFE;
  assign RXFINISHED = iRXFinished;
  assign \$procmux$7185_CMP  = \$32 ;
  assign \$procmux$7188_CMP  = \$26 ;
  assign \$iDOUT$43  = \$procmux$7187_Y ;
  assign \$procmux$7190_CMP  = \$32 ;
  assign \$procmux$7193_CMP  = \$26 ;
  assign \$iDataCount$42  = \$procmux$7192_Y ;
  assign \$procmux$7197_CMP  = \$26 ;
  assign \$iDOUT$45  = \$procmux$7196_Y ;
  assign \$procmux$7201_CMP  = \$26 ;
  assign \$iDataCount$44  = \$procmux$7200_Y ;
  assign \$procmux$7203_CMP  = \$107 ;
  assign \$NState$108  = \$procmux$7204_Y ;
  assign \$procmux$7210_CMP  = \$99 ;
  assign \$NState$104  = \$procmux$7211_Y ;
  assign \$procmux$7218_CMP  = \$99 ;
  assign \$iRXFinished$103  = \$procmux$7219_Y ;
  assign \$procmux$7225_CMP  = \$101 ;
  assign \$procmux$7227_CMP  = \$99 ;
  assign \$NState$102  = \$procmux$7228_Y ;
  assign \$procmux$7234_CMP  = \$99 ;
  assign \$iRXFinished$105  = \$procmux$7235_Y ;
  assign \$procmux$7241_CMP  = \$96 ;
  assign \$NState$97  = \$procmux$7242_Y ;
  assign \$procmux$7250_CMP  = \$90 ;
  assign \$NState$94  = \$procmux$7251_Y ;
  assign \$procmux$7259_CMP  = \$92 ;
  assign \$procmux$7261_CMP  = \$90 ;
  assign \$NState$93  = \$procmux$7262_Y ;
  assign \$procmux$7271_CMP  = \$84 ;
  assign \$NState$88  = \$procmux$7272_Y ;
  assign \$procmux$7280_CMP  = \$86 ;
  assign \$procmux$7282_CMP  = \$84 ;
  assign \$NState$87  = \$procmux$7283_Y ;
  assign \$procmux$7291_CMP  = \$81 ;
  assign \$NState$82  = \$procmux$7292_Y ;
  assign \$iRXFinished$112  = \$procmux$7296_Y ;
  assign \$iDataCountInit$111  = \$procmux$7303_Y ;
  assign \$iBaudCountClear$110  = \$procmux$7313_Y ;
  assign \$NState$109  = \$procmux$7316_Y ;
  assign \$procmux$7331_CMP  = \$123 ;
  assign \$PE$136  = \$procmux$7330_Y ;
  assign \$procmux$7335_CMP  = \$132 ;
  assign \$procmux$7338_CMP  = \$125 ;
  assign \$procmux$7340_CMP  = \$123 ;
  assign \$PE$133  = \$procmux$7339_Y ;
  assign \$procmux$7347_CMP  = \$125 ;
  assign \$procmux$7349_CMP  = \$123 ;
  assign \$PE$134  = \$procmux$7348_Y ;
  assign \$procmux$7354_CMP  = \$129 ;
  assign \$procmux$7356_CMP  = \$125 ;
  assign \$procmux$7358_CMP  = \$123 ;
  assign \$PE$130  = \$procmux$7357_Y ;
  assign \$procmux$7362_CMP  = \$123 ;
  assign \$iParityReceived$135  = \$procmux$7361_Y ;
  assign \$procmux$7365_CMP  = \$120 ;
  assign \$iParityReceived$121  = \$procmux$7364_Y ;
  assign \$26  = iDataCountInit;
  assign \$28  = iBaudStep;
  assign \$90  = iDataCountFinish;
  assign \$92  = PEN;
  assign \$96  = iBaudStep;
  assign \$99  = iBaudCount[3];
  assign \$84  = iBaudStep;
  assign \$118  = iBaudStep;
  assign \$123  = PEN;
  assign \$125  = SP;
  assign \$151  = iNoStopReceived;
  assign \$156  = iNoStopReceived;
endmodule

/* src = "rtl/apb_uart/uart_transmitter.sv:35.8" */
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$24 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$35 ;
  wire \$39 ;
  wire \$41 ;
  wire \$45 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$53 ;
  wire \$55 ;
  wire \$59 ;
  wire \$61 ;
  wire \$65 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$88 ;
  wire \$9 ;
  wire \$90 ;
  wire \$92 ;
  wire \$95 ;
  wire \$98 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:89.18-98.23" */
  wire [3:0] \$CState$16 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  wire [3:0] \$CState$18 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  wire [3:0] \$CState$20 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18" */
  wire [3:0] \$NState$25 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23" */
  wire [3:0] \$NState$30 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  wire [3:0] \$NState$31 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23" */
  wire [3:0] \$NState$36 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  wire [3:0] \$NState$37 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23" */
  wire [3:0] \$NState$42 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  wire [3:0] \$NState$43 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:210.13-217.18" */
  wire [3:0] \$NState$46 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:255.18-258.23" */
  wire [3:0] \$NState$62 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  wire [3:0] \$NState$63 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13" */
  wire [3:0] \$NState$66 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  wire [3:0] \$NState$67 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1568 ;
  wire \$auto$rtlil.cc:2965:LogicNot$1569 ;
  wire \$auto$rtlil.cc:3092:Mux$1570 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:308.14-309.34" */
  wire \$iFinished$93 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:310.14-313.30" */
  wire \$iLast$96 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  wire \$iParity$84 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  wire \$iSout$51 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  wire \$iSout$56 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  wire \$iSout$57 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  wire \$iSout$68 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:89.18-98.23" */
  wire \$iTx2$17 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  wire \$iTx2$19 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  wire \$iTx2$21 ;
  wire \$procmux$7367_Y ;
  wire \$procmux$7368_CMP ;
  wire \$procmux$7370_Y ;
  wire \$procmux$7371_CMP ;
  wire \$procmux$7373_Y ;
  wire \$procmux$7374_CMP ;
  wire \$procmux$7375_CMP ;
  wire \$procmux$7376_CMP ;
  wire [3:0] \$procmux$7377_Y ;
  wire \$procmux$7378_CMP ;
  wire [3:0] \$procmux$7379_Y ;
  wire \$procmux$7380_CMP ;
  wire [3:0] \$procmux$7382_Y ;
  wire \$procmux$7383_CMP ;
  wire [3:0] \$procmux$7385_Y ;
  wire \$procmux$7386_CMP ;
  wire [3:0] \$procmux$7387_Y ;
  wire \$procmux$7388_CMP ;
  wire [3:0] \$procmux$7392_Y ;
  wire \$procmux$7393_CMP ;
  wire [3:0] \$procmux$7394_Y ;
  wire \$procmux$7395_CMP ;
  wire \$procmux$7399_Y ;
  wire \$procmux$7400_CMP ;
  wire \$procmux$7402_Y ;
  wire \$procmux$7403_CMP ;
  wire \$procmux$7404_Y ;
  wire \$procmux$7405_CMP ;
  wire \$procmux$7411_Y ;
  wire \$procmux$7412_CMP ;
  wire \$procmux$7413_Y ;
  wire \$procmux$7414_CMP ;
  wire \$procmux$7419_Y ;
  wire \$procmux$7420_CMP ;
  wire \$procmux$7421_Y ;
  wire \$procmux$7422_CMP ;
  wire \$procmux$7423_Y ;
  wire \$procmux$7424_CMP ;
  wire [3:0] \$procmux$7429_Y ;
  wire \$procmux$7430_CMP ;
  wire [3:0] \$procmux$7431_Y ;
  wire \$procmux$7432_CMP ;
  wire [3:0] \$procmux$7439_Y ;
  wire \$procmux$7440_CMP ;
  wire [3:0] \$procmux$7441_Y ;
  wire \$procmux$7442_CMP ;
  wire [3:0] \$procmux$7449_Y ;
  wire \$procmux$7450_CMP ;
  wire [3:0] \$procmux$7451_Y ;
  wire \$procmux$7452_CMP ;
  wire [3:0] \$procmux$7453_Y ;
  wire \$procmux$7454_CMP ;
  wire [3:0] \$procmux$7462_Y ;
  wire \$procmux$7463_CMP ;
  wire [3:0] \$procmux$7464_Y ;
  wire \$procmux$7465_CMP ;
  wire [3:0] \$procmux$7473_Y ;
  wire \$procmux$7474_CMP ;
  wire [3:0] \$procmux$7475_Y ;
  wire \$procmux$7476_CMP ;
  wire [3:0] \$procmux$7477_Y ;
  wire \$procmux$7478_CMP ;
  wire [3:0] \$procmux$7487_Y ;
  wire \$procmux$7488_CMP ;
  wire [3:0] \$procmux$7489_Y ;
  wire \$procmux$7490_CMP ;
  wire [3:0] \$procmux$7499_Y ;
  wire \$procmux$7500_CMP ;
  wire [3:0] \$procmux$7501_Y ;
  wire \$procmux$7502_CMP ;
  wire [3:0] \$procmux$7503_Y ;
  wire \$procmux$7504_CMP ;
  wire [3:0] \$procmux$7517_Y ;
  wire \$procmux$7518_CMP ;
  wire [3:0] \$procmux$7519_Y ;
  wire \$procmux$7520_CMP ;
  wire \$procmux$7524_Y ;
  wire \$procmux$7525_CMP ;
  wire \$procmux$7527_CMP ;
  wire \$procmux$7529_CMP ;
  wire \$procmux$7531_CMP ;
  wire \$procmux$7533_CMP ;
  wire \$procmux$7534_CMP ;
  wire \$procmux$7535_CMP ;
  wire \$procmux$7536_CMP ;
  wire \$procmux$7537_CMP ;
  wire \$procmux$7538_CMP ;
  wire [3:0] \$procmux$7540_Y ;
  wire \$procmux$7541_CMP ;
  wire \$procmux$7543_CMP ;
  wire \$procmux$7545_CMP ;
  wire \$procmux$7547_CMP ;
  wire \$procmux$7549_CMP ;
  wire \$procmux$7551_CMP ;
  wire \$procmux$7553_CMP ;
  wire \$procmux$7554_CMP ;
  wire \$procmux$7555_CMP ;
  wire \$procmux$7556_CMP ;
  wire \$procmux$7557_CMP ;
  wire \$procmux$7558_CMP ;
  wire \$procmux$7560_CMP ;
  wire \$procmux$7562_Y ;
  wire \$procmux$7563_CMP ;
  wire \$procmux$7565_Y ;
  wire \$procmux$7566_CMP ;
  wire \$procmux$7567_Y ;
  wire \$procmux$7568_CMP ;
  wire [3:0] \$procmux$7570_Y ;
  wire \$procmux$7571_CMP ;
  wire [3:0] \$procmux$7573_Y ;
  wire \$procmux$7574_CMP ;
  wire [3:0] \$procmux$7575_Y ;
  wire \$procmux$7576_CMP ;
  wire \$procmux$7579_Y ;
  wire \$procmux$7580_CMP ;
  wire \$procmux$7581_Y ;
  wire \$procmux$7582_CMP ;
  wire [3:0] \$procmux$7585_Y ;
  wire \$procmux$7586_CMP ;
  wire [3:0] \$procmux$7587_Y ;
  wire \$procmux$7588_CMP ;
  wire \$procmux$7590_Y ;
  wire \$procmux$7591_CMP ;
  wire [3:0] \$procmux$7593_Y ;
  wire \$procmux$7594_CMP ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:46.14" */
  input BC;
  wire BC;
  /* src = "rtl/apb_uart/uart_transmitter.sv:40.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_transmitter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.12" */
  wire [3:0] CState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:47.20" */
  input [7:0] DIN;
  wire [7:0] DIN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:44.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.20" */
  wire [3:0] NState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:43.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_transmitter.sv:49.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/uart_transmitter.sv:45.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_transmitter.sv:42.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_transmitter.sv:38.14" */
  input TXCLK;
  wire TXCLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:48.16" */
  output TXFINISHED;
  wire TXFINISHED;
  /* src = "rtl/apb_uart/uart_transmitter.sv:39.14" */
  input TXSTART;
  wire TXSTART;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.15" */
  wire \TX_PAR.iP40 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.21" */
  wire \TX_PAR.iP50 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.27" */
  wire \TX_PAR.iP60 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.33" */
  wire \TX_PAR.iP70 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:41.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:70.5" */
  wire iFinished;
  /* src = "rtl/apb_uart/uart_transmitter.sv:297.9" */
  wire iLast;
  /* src = "rtl/apb_uart/uart_transmitter.sv:69.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_transmitter.sv:68.5" */
  wire iSout;
  /* src = "rtl/apb_uart/uart_transmitter.sv:67.5" */
  wire iTx2;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1568 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$7 ),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(CState),
    .B(4'hc),
    .Y(\$13 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(WLS),
    .Y(\$27 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(WLS),
    .B(2'h1),
    .Y(\$33 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(WLS),
    .B(2'h2),
    .Y(\$39 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iTx2),
    .Y(\$5 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(iParity),
    .Y(\$55 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(WLS),
    .Y(\$7 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(DIN[4]),
    .B(DIN[3]),
    .Y(\$71 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$71 ),
    .B(DIN[2]),
    .Y(\$73 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$73 ),
    .B(DIN[1]),
    .Y(\$75 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(DIN[0]),
    .Y(\$77 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(DIN[5]),
    .B(\$77 ),
    .Y(\$79 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(DIN[6]),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(DIN[7]),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(RST),
    .Y(\$auto$rtlil.cc:2965:LogicNot$1569 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(iLast),
    .Y(\$88 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(CState),
    .B(4'hb),
    .Y(\$90 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\$88 ),
    .B(\$90 ),
    .Y(\$92 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(CState),
    .B(4'hb),
    .Y(\$95 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(BC),
    .Y(\$98 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$99  (
    .A(iSout),
    .B(1'h0),
    .S(BC),
    .Y(\$auto$rtlil.cc:3092:Mux$1570 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$CState  (
    .AD(4'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$CState$20 ),
    .Q(CState)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFinished  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iFinished$93 ),
    .Q(iFinished)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLast  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iLast$96 ),
    .Q(iLast)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$aldff  #(
    .ALOAD_POLARITY(32'd1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTx2  (
    .AD(1'h0),
    .ALOAD(RST),
    .CLK(CLK),
    .D(\$iTx2$21 ),
    .Q(iTx2)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:311.16-311.30|rtl/apb_uart/uart_transmitter.sv:310.14-313.30" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7367  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7368_CMP ),
    .Y(\$procmux$7367_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:309.16-309.34|rtl/apb_uart/uart_transmitter.sv:308.14-309.34" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7370  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7371_CMP ),
    .Y(\$procmux$7370_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$7373  (
    .A(\$83 ),
    .B({ \$77 , \$79 , \$81  }),
    .S({ \$procmux$7376_CMP , \$procmux$7375_CMP , \$procmux$7374_CMP  }),
    .Y(\$procmux$7373_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7374_CMP0  (
    .A(WLS),
    .B(2'h2),
    .Y(\$procmux$7374_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:291.20-291.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7375_CMP0  (
    .A(WLS),
    .B(2'h1),
    .Y(\$procmux$7375_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:290.20-290.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7376_CMP0  (
    .A(WLS),
    .Y(\$procmux$7376_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:267.13-267.29|rtl/apb_uart/uart_transmitter.sv:265.8-268.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7377  (
    .A(4'h0),
    .B(4'h1),
    .S(\$procmux$7378_CMP ),
    .Y(\$procmux$7377_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7379  (
    .A(4'hx),
    .B(\$procmux$7377_Y ),
    .S(\$procmux$7380_CMP ),
    .Y(\$procmux$7379_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7380_CMP0  (
    .A(CState),
    .B(4'hc),
    .Y(\$procmux$7380_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:257.23-257.39|rtl/apb_uart/uart_transmitter.sv:255.18-258.23" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7382  (
    .A(4'h0),
    .B(4'h1),
    .S(\$procmux$7383_CMP ),
    .Y(\$procmux$7382_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7385  (
    .A(\$procmux$7382_Y ),
    .B(4'hx),
    .S(\$procmux$7386_CMP ),
    .Y(\$procmux$7385_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7387  (
    .A(4'hx),
    .B(\$procmux$7385_Y ),
    .S(\$procmux$7388_CMP ),
    .Y(\$procmux$7387_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7388_CMP0  (
    .A(CState),
    .B(4'hb),
    .Y(\$procmux$7388_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7392  (
    .A(\$NState$62 ),
    .B(4'hc),
    .S(\$procmux$7393_CMP ),
    .Y(\$procmux$7392_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7394  (
    .A(4'hx),
    .B(\$procmux$7392_Y ),
    .S(\$procmux$7395_CMP ),
    .Y(\$procmux$7394_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7395_CMP0  (
    .A(CState),
    .B(4'hb),
    .Y(\$procmux$7395_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:237.23-237.40|rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7399  (
    .A(\$55 ),
    .B(\$iParity$84 ),
    .S(\$procmux$7400_CMP ),
    .Y(\$procmux$7399_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7402  (
    .A(\$procmux$7399_Y ),
    .B(1'hx),
    .S(\$procmux$7403_CMP ),
    .Y(\$procmux$7402_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7404  (
    .A(1'hx),
    .B(\$procmux$7402_Y ),
    .S(\$procmux$7405_CMP ),
    .Y(\$procmux$7404_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7405_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7405_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7411  (
    .A(\$iSout$56 ),
    .B(\$iSout$51 ),
    .S(\$procmux$7412_CMP ),
    .Y(\$procmux$7411_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7413  (
    .A(1'hx),
    .B(\$procmux$7411_Y ),
    .S(\$procmux$7414_CMP ),
    .Y(\$procmux$7413_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7414_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7414_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:226.23-226.38|rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7419  (
    .A(1'h1),
    .B(1'h0),
    .S(\$procmux$7420_CMP ),
    .Y(\$procmux$7419_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7421  (
    .A(1'hx),
    .B(\$procmux$7419_Y ),
    .S(\$procmux$7422_CMP ),
    .Y(\$procmux$7421_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7423  (
    .A(1'hx),
    .B(\$procmux$7421_Y ),
    .S(\$procmux$7424_CMP ),
    .Y(\$procmux$7423_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7424_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7424_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:212.18-212.32|rtl/apb_uart/uart_transmitter.sv:210.13-217.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7429  (
    .A(4'hb),
    .B(4'ha),
    .S(\$procmux$7430_CMP ),
    .Y(\$procmux$7429_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7431  (
    .A(4'hx),
    .B(\$procmux$7429_Y ),
    .S(\$procmux$7432_CMP ),
    .Y(\$procmux$7431_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7432_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$7432_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7439  (
    .A(4'h9),
    .B(\$NState$42 ),
    .S(\$procmux$7440_CMP ),
    .Y(\$procmux$7439_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7441  (
    .A(4'hx),
    .B(\$procmux$7439_Y ),
    .S(\$procmux$7442_CMP ),
    .Y(\$procmux$7441_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7442_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$7442_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:194.23-194.37|rtl/apb_uart/uart_transmitter.sv:192.18-199.23" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7449  (
    .A(4'hb),
    .B(4'ha),
    .S(\$procmux$7450_CMP ),
    .Y(\$procmux$7449_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7451  (
    .A(4'hx),
    .B(\$procmux$7449_Y ),
    .S(\$procmux$7452_CMP ),
    .Y(\$procmux$7451_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7453  (
    .A(4'hx),
    .B(\$procmux$7451_Y ),
    .S(\$procmux$7454_CMP ),
    .Y(\$procmux$7453_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7454_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$7454_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7462  (
    .A(4'h8),
    .B(\$NState$36 ),
    .S(\$procmux$7463_CMP ),
    .Y(\$procmux$7462_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7464  (
    .A(4'hx),
    .B(\$procmux$7462_Y ),
    .S(\$procmux$7465_CMP ),
    .Y(\$procmux$7464_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7465_CMP0  (
    .A(CState),
    .B(4'h7),
    .Y(\$procmux$7465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:174.23-174.37|rtl/apb_uart/uart_transmitter.sv:172.18-179.23" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7473  (
    .A(4'hb),
    .B(4'ha),
    .S(\$procmux$7474_CMP ),
    .Y(\$procmux$7473_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7475  (
    .A(4'hx),
    .B(\$procmux$7473_Y ),
    .S(\$procmux$7476_CMP ),
    .Y(\$procmux$7475_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7477  (
    .A(4'hx),
    .B(\$procmux$7475_Y ),
    .S(\$procmux$7478_CMP ),
    .Y(\$procmux$7477_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7478_CMP0  (
    .A(CState),
    .B(4'h7),
    .Y(\$procmux$7478_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7487  (
    .A(4'h7),
    .B(\$NState$30 ),
    .S(\$procmux$7488_CMP ),
    .Y(\$procmux$7487_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7489  (
    .A(4'hx),
    .B(\$procmux$7487_Y ),
    .S(\$procmux$7490_CMP ),
    .Y(\$procmux$7489_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7490_CMP0  (
    .A(CState),
    .B(4'h6),
    .Y(\$procmux$7490_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:154.23-154.37|rtl/apb_uart/uart_transmitter.sv:152.18-159.23" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7499  (
    .A(4'hb),
    .B(4'ha),
    .S(\$procmux$7500_CMP ),
    .Y(\$procmux$7499_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7501  (
    .A(4'hx),
    .B(\$procmux$7499_Y ),
    .S(\$procmux$7502_CMP ),
    .Y(\$procmux$7501_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7503  (
    .A(4'hx),
    .B(\$procmux$7501_Y ),
    .S(\$procmux$7504_CMP ),
    .Y(\$procmux$7503_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7504_CMP0  (
    .A(CState),
    .B(4'h6),
    .Y(\$procmux$7504_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:112.18-112.34|rtl/apb_uart/uart_transmitter.sv:110.13-113.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7517  (
    .A(4'h0),
    .B(4'h1),
    .S(\$procmux$7518_CMP ),
    .Y(\$procmux$7517_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7519  (
    .A(4'hx),
    .B(\$procmux$7517_Y ),
    .S(\$procmux$7520_CMP ),
    .Y(\$procmux$7519_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7520_CMP0  (
    .A(CState),
    .Y(\$procmux$7520_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd1)
  ) \$procmux$7524  (
    .A(1'h1),
    .B({ 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$iSout$57  }),
    .S({ \$procmux$7538_CMP , \$procmux$7537_CMP , \$procmux$7536_CMP , \$procmux$7535_CMP , \$procmux$7534_CMP , \$procmux$7533_CMP , \$procmux$7531_CMP , \$procmux$7529_CMP , \$procmux$7527_CMP , \$procmux$7525_CMP  }),
    .Y(\$procmux$7524_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7525_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7525_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7527_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$7527_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7529_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$7529_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7531_CMP0  (
    .A(CState),
    .B(4'h7),
    .Y(\$procmux$7531_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7533_CMP0  (
    .A(CState),
    .B(4'h6),
    .Y(\$procmux$7533_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7534_CMP0  (
    .A(CState),
    .B(4'h5),
    .Y(\$procmux$7534_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7535_CMP0  (
    .A(CState),
    .B(4'h4),
    .Y(\$procmux$7535_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7536_CMP0  (
    .A(CState),
    .B(4'h3),
    .Y(\$procmux$7536_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7537_CMP0  (
    .A(CState),
    .B(4'h2),
    .Y(\$procmux$7537_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7538_CMP0  (
    .A(CState),
    .B(4'h1),
    .Y(\$procmux$7538_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd13),
    .WIDTH(32'd4)
  ) \$procmux$7540  (
    .A(4'h0),
    .B({ \$NState$25 , 20'h23456, \$NState$31 , \$NState$37 , \$NState$43 , \$NState$46 , 4'hb, \$NState$63 , \$NState$66  }),
    .S({ \$procmux$7560_CMP , \$procmux$7558_CMP , \$procmux$7557_CMP , \$procmux$7556_CMP , \$procmux$7555_CMP , \$procmux$7554_CMP , \$procmux$7553_CMP , \$procmux$7551_CMP , \$procmux$7549_CMP , \$procmux$7547_CMP , \$procmux$7545_CMP , \$procmux$7543_CMP , \$procmux$7541_CMP  }),
    .Y(\$procmux$7540_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7541_CMP0  (
    .A(CState),
    .B(4'hc),
    .Y(\$procmux$7541_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7543_CMP0  (
    .A(CState),
    .B(4'hb),
    .Y(\$procmux$7543_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7545_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7545_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7547_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$7547_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7549_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$7549_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7551_CMP0  (
    .A(CState),
    .B(4'h7),
    .Y(\$procmux$7551_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7553_CMP0  (
    .A(CState),
    .B(4'h6),
    .Y(\$procmux$7553_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7554_CMP0  (
    .A(CState),
    .B(4'h5),
    .Y(\$procmux$7554_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7555_CMP0  (
    .A(CState),
    .B(4'h4),
    .Y(\$procmux$7555_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7556_CMP0  (
    .A(CState),
    .B(4'h3),
    .Y(\$procmux$7556_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7557_CMP0  (
    .A(CState),
    .B(4'h2),
    .Y(\$procmux$7557_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7558_CMP0  (
    .A(CState),
    .B(4'h1),
    .Y(\$procmux$7558_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7560_CMP0  (
    .A(CState),
    .Y(\$procmux$7560_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:90.20-93.23|rtl/apb_uart/uart_transmitter.sv:89.18-98.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7562  (
    .A(1'h0),
    .B(1'h1),
    .S(\$procmux$7563_CMP ),
    .Y(\$procmux$7562_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7565  (
    .A(1'hx),
    .B(\$procmux$7562_Y ),
    .S(iTx2),
    .Y(\$procmux$7565_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7567  (
    .A(1'hx),
    .B(\$procmux$7565_Y ),
    .S(\$procmux$7568_CMP ),
    .Y(\$procmux$7567_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:90.20-93.23|rtl/apb_uart/uart_transmitter.sv:89.18-98.23" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7570  (
    .A(CState),
    .B(\$NState$67 ),
    .S(\$procmux$7571_CMP ),
    .Y(\$procmux$7570_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7573  (
    .A(4'hx),
    .B(\$procmux$7570_Y ),
    .S(iTx2),
    .Y(\$procmux$7573_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7575  (
    .A(4'hx),
    .B(\$procmux$7573_Y ),
    .S(\$procmux$7576_CMP ),
    .Y(\$procmux$7575_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7579  (
    .A(1'h1),
    .B(\$iTx2$17 ),
    .S(iTx2),
    .Y(\$procmux$7579_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7581  (
    .A(1'hx),
    .B(\$procmux$7579_Y ),
    .S(\$procmux$7582_CMP ),
    .Y(\$procmux$7581_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7585  (
    .A(\$NState$67 ),
    .B(\$CState$16 ),
    .S(iTx2),
    .Y(\$procmux$7585_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7587  (
    .A(4'hx),
    .B(\$procmux$7585_Y ),
    .S(\$procmux$7588_CMP ),
    .Y(\$procmux$7587_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7590  (
    .A(iTx2),
    .B(\$iTx2$19 ),
    .S(\$procmux$7591_CMP ),
    .Y(\$procmux$7590_Y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18|rtl/apb_uart/uart_transmitter.sv:80.8-100.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7593  (
    .A(CState),
    .B(\$CState$18 ),
    .S(\$procmux$7594_CMP ),
    .Y(\$procmux$7593_Y )
  );
  assign NState = \$NState$67 ;
  assign iSout = \$iSout$68 ;
  assign iParity = \$iParity$84 ;
  assign \TX_PAR.iP40  = \$77 ;
  assign \TX_PAR.iP50  = \$79 ;
  assign \TX_PAR.iP60  = \$81 ;
  assign \TX_PAR.iP70  = \$83 ;
  assign SOUT = \$auto$rtlil.cc:3092:Mux$1570 ;
  assign TXFINISHED = iFinished;
  assign \$procmux$7368_CMP  = \$95 ;
  assign \$iLast$96  = \$procmux$7367_Y ;
  assign \$procmux$7371_CMP  = \$92 ;
  assign \$iFinished$93  = \$procmux$7370_Y ;
  assign \$iParity$84  = \$procmux$7373_Y ;
  assign \$procmux$7378_CMP  = \$65 ;
  assign \$NState$66  = \$procmux$7379_Y ;
  assign \$procmux$7383_CMP  = \$61 ;
  assign \$procmux$7386_CMP  = \$59 ;
  assign \$NState$62  = \$procmux$7387_Y ;
  assign \$procmux$7393_CMP  = \$59 ;
  assign \$NState$63  = \$procmux$7394_Y ;
  assign \$procmux$7400_CMP  = \$53 ;
  assign \$procmux$7403_CMP  = \$48 ;
  assign \$iSout$56  = \$procmux$7404_Y ;
  assign \$procmux$7412_CMP  = \$48 ;
  assign \$iSout$57  = \$procmux$7413_Y ;
  assign \$procmux$7420_CMP  = \$50 ;
  assign \$procmux$7422_CMP  = \$48 ;
  assign \$iSout$51  = \$procmux$7423_Y ;
  assign \$procmux$7430_CMP  = \$45 ;
  assign \$NState$46  = \$procmux$7431_Y ;
  assign \$procmux$7440_CMP  = \$39 ;
  assign \$NState$43  = \$procmux$7441_Y ;
  assign \$procmux$7450_CMP  = \$41 ;
  assign \$procmux$7452_CMP  = \$39 ;
  assign \$NState$42  = \$procmux$7453_Y ;
  assign \$procmux$7463_CMP  = \$33 ;
  assign \$NState$37  = \$procmux$7464_Y ;
  assign \$procmux$7474_CMP  = \$35 ;
  assign \$procmux$7476_CMP  = \$33 ;
  assign \$NState$36  = \$procmux$7477_Y ;
  assign \$procmux$7488_CMP  = \$27 ;
  assign \$NState$31  = \$procmux$7489_Y ;
  assign \$procmux$7500_CMP  = \$29 ;
  assign \$procmux$7502_CMP  = \$27 ;
  assign \$NState$30  = \$procmux$7503_Y ;
  assign \$procmux$7518_CMP  = \$24 ;
  assign \$NState$25  = \$procmux$7519_Y ;
  assign \$iSout$68  = \$procmux$7524_Y ;
  assign \$NState$67  = \$procmux$7540_Y ;
  assign \$procmux$7563_CMP  = \$15 ;
  assign \$procmux$7566_CMP  = \$5 ;
  assign \$procmux$7568_CMP  = \$3 ;
  assign \$iTx2$17  = \$procmux$7567_Y ;
  assign \$procmux$7571_CMP  = \$15 ;
  assign \$procmux$7574_CMP  = \$5 ;
  assign \$procmux$7576_CMP  = \$3 ;
  assign \$CState$16  = \$procmux$7575_Y ;
  assign \$procmux$7580_CMP  = \$5 ;
  assign \$procmux$7582_CMP  = \$3 ;
  assign \$iTx2$19  = \$procmux$7581_Y ;
  assign \$procmux$7586_CMP  = \$5 ;
  assign \$procmux$7588_CMP  = \$3 ;
  assign \$CState$18  = \$procmux$7587_Y ;
  assign \$procmux$7591_CMP  = \$3 ;
  assign \$iTx2$21  = \$procmux$7590_Y ;
  assign \$procmux$7594_CMP  = \$3 ;
  assign \$CState$20  = \$procmux$7593_Y ;
  assign \$3  = TXCLK;
  assign \$9  = STB;
  assign \$24  = TXSTART;
  assign \$29  = PEN;
  assign \$59  = STB;
  assign \$65  = TXSTART;
  assign \$48  = SP;
  assign \$53  = EPS;
  assign \$50  = EPS;
  assign \$35  = PEN;
  assign \$41  = PEN;
  assign \$45  = PEN;
  assign \$61  = TXSTART;
endmodule

/* src = "rtl/user_domain.sv:8.8" */
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, ref_clk_i, testmode_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  /* src = "rtl/user_domain.sv:46.35" */
  wire [147:0] all_user_sbr_obi_req;
  /* src = "rtl/user_domain.sv:47.35" */
  wire [77:0] all_user_sbr_obi_rsp;
  /* src = "rtl/user_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain.sv:22.38" */
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  /* src = "rtl/user_domain.sv:23.38" */
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  /* src = "rtl/user_domain.sv:12.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/user_domain.sv:13.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/user_domain.sv:54.17" */
  wire [73:0] user_error_obi_req;
  /* src = "rtl/user_domain.sv:55.17" */
  wire [38:0] user_error_obi_rsp;
  /* src = "rtl/user_domain.sv:68.51" */
  wire user_idx;
  /* src = "rtl/user_domain.sv:19.24" */
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  /* src = "rtl/user_domain.sv:20.24" */
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  /* src = "rtl/user_domain.sv:50.17" */
  wire [73:0] user_rom_obi_req;
  /* src = "rtl/user_domain.sv:51.17" */
  wire [38:0] user_rom_obi_rsp;
  /* src = "rtl/user_domain.sv:16.24" */
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  /* src = "rtl/user_domain.sv:17.24" */
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  /* src = "rtl/user_domain.sv:76.5" */
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(96'h000000012000000020001000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  /* src = "rtl/user_domain.sv:92.5" */
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i(all_user_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  /* src = "rtl/user_domain.sv:128.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(user_error_obi_req),
    .obi_rsp_o(user_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/user_domain.sv:114.5" */
  \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom  i_user_rom (
    .clk_i(clk_i),
    .obi_req_i(user_rom_obi_req),
    .obi_rsp_o(user_rom_obi_rsp),
    .rst_ni(rst_ni)
  );
  assign interrupts_o = 4'h0;
  assign user_mgr_obi_req_o = 72'h000000000000000000;
  assign user_error_obi_req = all_user_sbr_obi_req[73:0];
  assign all_user_sbr_obi_rsp[38:0] = user_error_obi_rsp;
  assign user_rom_obi_req = all_user_sbr_obi_req[147:74];
  assign all_user_sbr_obi_rsp[77:39] = user_rom_obi_rsp;
endmodule

/* src = "rtl/user_domain/user_rom.sv:9.8" */
module \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom (clk_i, rst_ni, obi_req_i, obi_rsp_o);
  wire \$15 ;
  wire [31:0] \$auto$proc_rom.cc:154:do_switch$1819 ;
  wire \$auto$rtlil.cc:2965:LogicNot$203 ;
  wire \$auto$rtlil.cc:2965:LogicNot$204 ;
  wire \$auto$rtlil.cc:2965:LogicNot$205 ;
  wire \$auto$rtlil.cc:2965:LogicNot$206 ;
  wire \$auto$rtlil.cc:2965:LogicNot$207 ;
  wire \$auto$rtlil.cc:2965:LogicNot$208 ;
  wire \$auto$rtlil.cc:2965:LogicNot$209 ;
  wire \$auto$rtlil.cc:2965:LogicNot$210 ;
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10" */
  wire \$obi_err$18 ;
  /* src = "rtl/user_domain/user_rom.sv:64.5-81.8" */
  wire \$obi_err$20 ;
  wire [31:0] \$procmux$14290_Y ;
  wire \$procmux$14291_CMP ;
  wire [31:0] \$procmux$14292_Y ;
  wire \$procmux$14293_CMP ;
  wire \$procmux$14295_Y ;
  wire \$procmux$14296_CMP ;
  wire \$procmux$14297_Y ;
  wire \$procmux$14298_CMP ;
  wire [31:0] \$procmux$14301_Y ;
  wire \$procmux$14302_CMP ;
  wire [31:0] \$procmux$14303_Y ;
  wire \$procmux$14304_CMP ;
  wire \$procmux$14306_Y ;
  wire \$procmux$14307_CMP ;
  wire [31:0] \$procmux$14309_Y ;
  wire \$procmux$14310_CMP ;
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16" */
  wire [31:0] \$rsp_data$16 ;
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10" */
  wire [31:0] \$rsp_data$17 ;
  /* src = "rtl/user_domain/user_rom.sv:64.5-81.8" */
  wire [31:0] \$rsp_data$19 ;
  /* src = "rtl/user_domain/user_rom.sv:18.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain/user_rom.sv:33.30" */
  wire [2:0] id_d;
  /* src = "rtl/user_domain/user_rom.sv:33.36" */
  wire [2:0] id_q;
  /* src = "rtl/user_domain/user_rom.sv:29.9" */
  wire obi_err;
  /* src = "rtl/user_domain/user_rom.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/user_domain/user_rom.sv:25.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/user_domain/user_rom.sv:31.9" */
  wire req_d;
  /* src = "rtl/user_domain/user_rom.sv:31.16" */
  wire req_q;
  /* src = "rtl/user_domain/user_rom.sv:28.32" */
  wire [31:0] rsp_data;
  /* src = "rtl/user_domain/user_rom.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain/user_rom.sv:30.9" */
  wire we_d;
  /* src = "rtl/user_domain/user_rom.sv:30.15" */
  wire we_q;
  /* src = "rtl/user_domain/user_rom.sv:32.15" */
  wire [2:0] word_addr_d;
  /* src = "rtl/user_domain/user_rom.sv:32.28" */
  wire [2:0] word_addr_q;
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16" */
  reg [31:0] \$auto$proc_rom.cc:155:do_switch$1820  [7:0];
  initial begin
    \$auto$proc_rom.cc:155:do_switch$1820 [0] = 32'd1229991508;
    \$auto$proc_rom.cc:155:do_switch$1820 [1] = 32'd642338375;
    \$auto$proc_rom.cc:155:do_switch$1820 [2] = 32'd1430531651;
    \$auto$proc_rom.cc:155:do_switch$1820 [3] = 32'd658592328;
    \$auto$proc_rom.cc:155:do_switch$1820 [4] = 32'd1396777075;
    \$auto$proc_rom.cc:155:do_switch$1820 [5] = 32'd17225;
    \$auto$proc_rom.cc:155:do_switch$1820 [6] = 32'd0;
    \$auto$proc_rom.cc:155:do_switch$1820 [7] = 32'd0;
  end
  assign \$auto$proc_rom.cc:154:do_switch$1819  = \$auto$proc_rom.cc:155:do_switch$1820 [word_addr_q];
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$203 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$209 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(we_q),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$205 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(rst_ni),
    .Y(\$auto$rtlil.cc:2965:LogicNot$207 )
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(id_d),
    .Q(id_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(req_d),
    .Q(req_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .AD(1'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(we_d),
    .Q(we_q)
  );
  \$aldff  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$word_addr_q  (
    .AD(3'h0),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(word_addr_d),
    .Q(word_addr_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14290  (
    .A(\$auto$proc_rom.cc:154:do_switch$1819 ),
    .B(32'hxxxxxxxx),
    .S(we_q),
    .Y(\$procmux$14290_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14292  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14290_Y ),
    .S(\$procmux$14293_CMP ),
    .Y(\$procmux$14292_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14295  (
    .A(1'h0),
    .B(1'h1),
    .S(we_q),
    .Y(\$procmux$14295_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14297  (
    .A(1'hx),
    .B(\$procmux$14295_Y ),
    .S(\$procmux$14298_CMP ),
    .Y(\$procmux$14297_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14301  (
    .A(\$rsp_data$16 ),
    .B(32'd0),
    .S(we_q),
    .Y(\$procmux$14301_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14303  (
    .A(32'hxxxxxxxx),
    .B(\$procmux$14301_Y ),
    .S(\$procmux$14304_CMP ),
    .Y(\$procmux$14303_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14306  (
    .A(1'h0),
    .B(\$obi_err$18 ),
    .S(\$procmux$14307_CMP ),
    .Y(\$procmux$14306_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14309  (
    .A(32'd0),
    .B(\$rsp_data$17 ),
    .S(\$procmux$14310_CMP ),
    .Y(\$procmux$14309_Y )
  );
  assign obi_rsp_o[1] = obi_req_i[0];
  assign id_d = obi_req_i[4:2];
  assign word_addr_d = obi_req_i[46:44];
  assign we_d = obi_req_i[41];
  assign req_d = obi_req_i[0];
  assign obi_rsp_o[0] = req_q;
  assign obi_rsp_o[38:2] = { rsp_data, id_q, obi_err, 1'h0 };
  assign rsp_data = \$rsp_data$19 ;
  assign obi_err = \$obi_err$20 ;
  assign \$procmux$14291_CMP  = \$15 ;
  assign \$procmux$14293_CMP  = req_q;
  assign \$rsp_data$16  = \$procmux$14292_Y ;
  assign \$procmux$14296_CMP  = \$15 ;
  assign \$procmux$14298_CMP  = req_q;
  assign \$obi_err$18  = \$procmux$14297_Y ;
  assign \$procmux$14302_CMP  = \$15 ;
  assign \$procmux$14304_CMP  = req_q;
  assign \$rsp_data$17  = \$procmux$14303_Y ;
  assign \$procmux$14307_CMP  = req_q;
  assign \$obi_err$20  = \$procmux$14306_Y ;
  assign \$procmux$14310_CMP  = req_q;
  assign \$rsp_data$19  = \$procmux$14309_Y ;
  assign \$auto$rtlil.cc:2965:LogicNot$204  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$206  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$208  = rst_ni;
  assign \$auto$rtlil.cc:2965:LogicNot$210  = rst_ni;
endmodule
