/* Generated by Yosys 0.53+101 (git sha1 0b19f628e, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output idx_o;
  wire idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$110 ;
  wire \$12 ;
  wire \$14 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$96 ;
  wire \$auto$rtlil.cc:3092:Mux$558 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$559 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$560 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$561 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$562 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$563 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$564 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$94 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$93 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$92 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$558 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(addr_map_i[415:384]),
    .Y(\$102 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\$100 ),
    .B(\$102 ),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$96 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(config_ongoing_i),
    .Y(\$110 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$113  (
    .A(addr_map_i[450:448]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$564 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$559 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$560 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$27 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$561 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$50 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$562 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$73 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$563 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(addr_i),
    .B(addr_map_i[447:416]),
    .Y(\$96 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(addr_i),
    .B(addr_map_i[415:384]),
    .Y(\$100 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13899  (
    .A(\$dec_error_o$94 ),
    .B(1'h0),
    .S(\$106 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13905  (
    .A(\$dec_valid_o$93 ),
    .B(\$110 ),
    .S(\$106 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13911  (
    .A(\$idx_o$92 ),
    .B(\$auto$rtlil.cc:3092:Mux$564 ),
    .S(\$106 ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13923  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$83 ),
    .Y(\$dec_error_o$94 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13928  (
    .A(\$dec_valid_o$70 ),
    .B(\$110 ),
    .S(\$83 ),
    .Y(\$dec_valid_o$93 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13933  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$563 ),
    .S(\$83 ),
    .Y(\$idx_o$92 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13943  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$60 ),
    .Y(\$dec_error_o$71 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13947  (
    .A(\$dec_valid_o$47 ),
    .B(\$110 ),
    .S(\$60 ),
    .Y(\$dec_valid_o$70 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13951  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$562 ),
    .S(\$60 ),
    .Y(\$idx_o$69 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13959  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$37 ),
    .Y(\$dec_error_o$48 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13962  (
    .A(\$dec_valid_o$24 ),
    .B(\$110 ),
    .S(\$37 ),
    .Y(\$dec_valid_o$47 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13965  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$561 ),
    .S(\$37 ),
    .Y(\$idx_o$46 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13971  (
    .A(\$auto$rtlil.cc:3092:Mux$558 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(\$dec_error_o$25 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13973  (
    .A(\$14 ),
    .B(\$110 ),
    .Y(\$dec_valid_o$24 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13975  (
    .A(\$auto$rtlil.cc:3092:Mux$559 ),
    .B(\$auto$rtlil.cc:3092:Mux$560 ),
    .S(\$14 ),
    .Y(\$idx_o$23 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1295 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1296 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1297 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1298 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1299 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1300 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1295 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1296 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1297 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$27 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1298 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$50 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1299 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$73 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1300 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8424  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$83 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8429  (
    .A(\$dec_valid_o$70 ),
    .B(\$18 ),
    .S(\$83 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8434  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1300 ),
    .S(\$83 ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8444  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$60 ),
    .Y(\$dec_error_o$71 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8448  (
    .A(\$dec_valid_o$47 ),
    .B(\$18 ),
    .S(\$60 ),
    .Y(\$dec_valid_o$70 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8452  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1299 ),
    .S(\$60 ),
    .Y(\$idx_o$69 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8460  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$37 ),
    .Y(\$dec_error_o$48 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8463  (
    .A(\$dec_valid_o$24 ),
    .B(\$18 ),
    .S(\$37 ),
    .Y(\$dec_valid_o$47 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8466  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1298 ),
    .S(\$37 ),
    .Y(\$idx_o$46 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8472  (
    .A(\$auto$rtlil.cc:3092:Mux$1295 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(\$dec_error_o$25 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8474  (
    .A(\$14 ),
    .B(\$18 ),
    .Y(\$dec_valid_o$24 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8476  (
    .A(\$auto$rtlil.cc:3092:Mux$1296 ),
    .B(\$auto$rtlil.cc:3092:Mux$1297 ),
    .S(\$14 ),
    .Y(\$idx_o$23 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1303 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1304 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1305 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1306 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1307 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1308 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1303 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1304 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1305 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$27 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1306 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$50 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1307 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$73 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1308 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8337  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$83 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8342  (
    .A(\$dec_valid_o$70 ),
    .B(\$18 ),
    .S(\$83 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8347  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1308 ),
    .S(\$83 ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8357  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$60 ),
    .Y(\$dec_error_o$71 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8361  (
    .A(\$dec_valid_o$47 ),
    .B(\$18 ),
    .S(\$60 ),
    .Y(\$dec_valid_o$70 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8365  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1307 ),
    .S(\$60 ),
    .Y(\$idx_o$69 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8373  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$37 ),
    .Y(\$dec_error_o$48 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8376  (
    .A(\$dec_valid_o$24 ),
    .B(\$18 ),
    .S(\$37 ),
    .Y(\$dec_valid_o$47 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8379  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1306 ),
    .S(\$37 ),
    .Y(\$idx_o$46 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8385  (
    .A(\$auto$rtlil.cc:3092:Mux$1303 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(\$dec_error_o$25 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8387  (
    .A(\$14 ),
    .B(\$18 ),
    .Y(\$dec_valid_o$24 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8389  (
    .A(\$auto$rtlil.cc:3092:Mux$1304 ),
    .B(\$auto$rtlil.cc:3092:Mux$1305 ),
    .S(\$14 ),
    .Y(\$idx_o$23 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1311 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1312 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1313 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1314 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1315 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1316 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1311 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1312 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1313 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$27 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1314 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$50 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1315 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$73 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1316 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8250  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$83 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8255  (
    .A(\$dec_valid_o$70 ),
    .B(\$18 ),
    .S(\$83 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8260  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1316 ),
    .S(\$83 ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8270  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$60 ),
    .Y(\$dec_error_o$71 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8274  (
    .A(\$dec_valid_o$47 ),
    .B(\$18 ),
    .S(\$60 ),
    .Y(\$dec_valid_o$70 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8278  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1315 ),
    .S(\$60 ),
    .Y(\$idx_o$69 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8286  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$37 ),
    .Y(\$dec_error_o$48 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8289  (
    .A(\$dec_valid_o$24 ),
    .B(\$18 ),
    .S(\$37 ),
    .Y(\$dec_valid_o$47 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8292  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1314 ),
    .S(\$37 ),
    .Y(\$idx_o$46 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8298  (
    .A(\$auto$rtlil.cc:3092:Mux$1311 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(\$dec_error_o$25 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8300  (
    .A(\$14 ),
    .B(\$18 ),
    .Y(\$dec_valid_o$24 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8302  (
    .A(\$auto$rtlil.cc:3092:Mux$1312 ),
    .B(\$auto$rtlil.cc:3092:Mux$1313 ),
    .S(\$14 ),
    .Y(\$idx_o$23 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$4 ;
  wire \$50 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$73 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$auto$rtlil.cc:3092:Mux$1319 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1320 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1321 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1322 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1323 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$1324 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$25 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$48 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$71 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$24 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$47 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$70 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$23 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$46 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$69 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1319 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1320 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1321 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$27 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$31 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(addr_map_i[127:96]),
    .Y(\$33 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$31 ),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$27 ),
    .B(\$35 ),
    .Y(\$37 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$44  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1322 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$50 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(addr_map_i[223:192]),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$50 ),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$67  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1323 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$73 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$77 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_map_i[319:288]),
    .Y(\$79 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$73 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$90  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1324 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8163  (
    .A(\$dec_error_o$71 ),
    .B(1'h0),
    .S(\$83 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8168  (
    .A(\$dec_valid_o$70 ),
    .B(\$18 ),
    .S(\$83 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8173  (
    .A(\$idx_o$69 ),
    .B(\$auto$rtlil.cc:3092:Mux$1324 ),
    .S(\$83 ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8183  (
    .A(\$dec_error_o$48 ),
    .B(1'h0),
    .S(\$60 ),
    .Y(\$dec_error_o$71 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8187  (
    .A(\$dec_valid_o$47 ),
    .B(\$18 ),
    .S(\$60 ),
    .Y(\$dec_valid_o$70 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8191  (
    .A(\$idx_o$46 ),
    .B(\$auto$rtlil.cc:3092:Mux$1323 ),
    .S(\$60 ),
    .Y(\$idx_o$69 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8199  (
    .A(\$dec_error_o$25 ),
    .B(1'h0),
    .S(\$37 ),
    .Y(\$dec_error_o$48 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8202  (
    .A(\$dec_valid_o$24 ),
    .B(\$18 ),
    .S(\$37 ),
    .Y(\$dec_valid_o$47 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8205  (
    .A(\$idx_o$23 ),
    .B(\$auto$rtlil.cc:3092:Mux$1322 ),
    .S(\$37 ),
    .Y(\$idx_o$46 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8211  (
    .A(\$auto$rtlil.cc:3092:Mux$1319 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(\$dec_error_o$25 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8213  (
    .A(\$14 ),
    .B(\$18 ),
    .Y(\$dec_valid_o$24 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8215  (
    .A(\$auto$rtlil.cc:3092:Mux$1320 ),
    .B(\$auto$rtlil.cc:3092:Mux$1321 ),
    .S(\$14 ),
    .Y(\$idx_o$23 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$18 ;
  wire \$4 ;
  wire \$8 ;
  wire \$auto$rtlil.cc:3092:Mux$811 ;
  wire \$auto$rtlil.cc:3092:Mux$812 ;
  wire \$auto$rtlil.cc:3092:Mux$813 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output idx_o;
  wire idx_o;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$811 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$8 ),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$4 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(config_ongoing_i),
    .Y(\$18 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(en_default_idx_i),
    .B(default_idx_i),
    .Y(\$auto$rtlil.cc:3092:Mux$812 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(addr_map_i[64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:3092:Mux$813 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$4 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$8 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(addr_map_i[31:0]),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13154  (
    .A(\$auto$rtlil.cc:3092:Mux$811 ),
    .B(1'h0),
    .S(\$14 ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13156  (
    .A(\$14 ),
    .B(\$18 ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13158  (
    .A(\$auto$rtlil.cc:3092:Mux$812 ),
    .B(\$auto$rtlil.cc:3092:Mux$813 ),
    .S(\$14 ),
    .Y(idx_o)
  );
endmodule

/* src = "rtl/apb_uart/apb_uart.sv:35.8" */
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$104 ;
  wire \$111 ;
  wire \$118 ;
  wire \$125 ;
  wire \$149 ;
  wire \$155 ;
  wire \$159 ;
  wire \$16 ;
  wire \$161 ;
  wire \$165 ;
  wire \$167 ;
  wire \$171 ;
  wire \$175 ;
  wire \$179 ;
  wire \$18 ;
  wire \$185 ;
  wire \$197 ;
  wire \$201 ;
  wire \$203 ;
  wire \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire [5:0] \$213 ;
  wire \$239 ;
  wire \$241 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$260 ;
  wire \$268 ;
  wire \$28 ;
  wire \$297 ;
  wire \$30 ;
  wire \$303 ;
  wire \$307 ;
  wire \$309 ;
  wire \$32 ;
  wire \$333 ;
  wire \$337 ;
  wire \$339 ;
  wire \$347 ;
  wire \$349 ;
  wire \$353 ;
  wire \$357 ;
  wire \$387 ;
  wire \$396 ;
  wire \$402 ;
  wire \$406 ;
  wire \$41 ;
  wire \$423 ;
  wire \$434 ;
  wire \$436 ;
  wire \$438 ;
  wire \$440 ;
  wire \$449 ;
  wire \$453 ;
  wire \$455 ;
  wire \$464 ;
  wire \$468 ;
  wire \$470 ;
  wire \$479 ;
  wire \$483 ;
  wire \$485 ;
  wire \$496 ;
  wire \$506 ;
  wire \$522 ;
  wire \$540 ;
  wire \$544 ;
  wire \$546 ;
  wire \$548 ;
  wire \$564 ;
  wire \$568 ;
  wire \$570 ;
  wire \$576 ;
  wire \$578 ;
  wire \$580 ;
  wire \$582 ;
  wire \$586 ;
  wire \$588 ;
  wire \$590 ;
  wire \$594 ;
  wire \$598 ;
  wire \$602 ;
  wire \$604 ;
  wire \$61 ;
  wire \$623 ;
  wire \$625 ;
  wire \$627 ;
  wire \$63 ;
  wire \$633 ;
  wire \$635 ;
  wire \$641 ;
  wire \$645 ;
  wire \$649 ;
  wire \$651 ;
  wire \$664 ;
  wire \$666 ;
  wire \$672 ;
  wire \$674 ;
  wire \$715 ;
  wire \$721 ;
  wire \$723 ;
  wire \$733 ;
  wire \$735 ;
  wire \$737 ;
  wire \$748 ;
  wire \$750 ;
  wire \$755 ;
  wire \$757 ;
  wire \$762 ;
  wire \$764 ;
  wire \$769 ;
  wire \$771 ;
  wire \$778 ;
  wire \$83 ;
  wire \$97 ;
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  wire [7:0] \$PRDATA[7:0]$783 ;
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  wire [7:0] \$PRDATA[7:0]$786 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17270 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17285 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17277 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17290 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16704 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$18438 ;
  wire \$auto$rtlil.cc:2957:Not$17276 ;
  wire [6:0] \$auto$rtlil.cc:3092:Mux$18440 ;
  /* src = "rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  wire \$iBAUDOUTN$744 ;
  /* src = "rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  wire \$iCharTimeout$222 ;
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  wire \$iCharTimeout$223 ;
  /* src = "rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  wire \$iCharTimeout$224 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_RXFIFOReset$271 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_TXFIFOReset$272 ;
  /* src = "rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  wire [6:0] \$iFECounter$362 ;
  /* src = "rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  wire \$iLSR_BI$330 ;
  /* src = "rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  wire \$iLSR_BI$331 ;
  /* src = "rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  wire \$iLSR_FE$324 ;
  /* src = "rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  wire \$iLSR_FE$325 ;
  /* src = "rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  wire \$iLSR_FIFOERR$340 ;
  /* src = "rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  wire \$iLSR_FIFOERR$341 ;
  /* src = "rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  wire \$iLSR_OE$312 ;
  /* src = "rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  wire \$iLSR_OE$313 ;
  /* src = "rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  wire \$iLSR_PE$318 ;
  /* src = "rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  wire \$iLSR_PE$319 ;
  /* src = "rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  wire \$iMSR_TERI$515 ;
  /* src = "rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  wire \$iMSR_TERI$516 ;
  /* src = "rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  wire \$iMSR_dCTS$499 ;
  /* src = "rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  wire \$iMSR_dCTS$500 ;
  /* src = "rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  wire \$iMSR_dDCD$525 ;
  /* src = "rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  wire \$iMSR_dDCD$526 ;
  /* src = "rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  wire \$iMSR_dDSR$509 ;
  /* src = "rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  wire \$iMSR_dDSR$510 ;
  /* src = "rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  wire \$iRTS$738 ;
  /* src = "rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  wire \$iRTS$739 ;
  /* src = "rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  wire \$iRXFIFOClear$698 ;
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire \$iRXFIFOClear$699 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOClear$708 ;
  /* src = "rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  wire \$iRXFIFOWrite$706 ;
  /* src = "rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  wire \$iRXFIFOWrite$707 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOWrite$709 ;
  /* src = "rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  wire \$iTHRInterrupt$172 ;
  /* src = "rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  wire \$iTHRInterrupt$173 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXFIFORead$688 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXRunning$690 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXStart$689 ;
  /* src = "rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  wire [5:0] \$iTimeoutCount$215 ;
  wire \$procmux$13455_Y ;
  wire [1:0] \$procmux$13505_Y ;
  wire \$procmux$13506_CMP ;
  wire \$procmux$13511_CMP ;
  /* src = "rtl/apb_uart/apb_uart.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/apb_uart.sv:51.14" */
  input CTSN;
  wire CTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:53.14" */
  input DCDN;
  wire DCDN;
  /* src = "rtl/apb_uart/apb_uart.sv:52.14" */
  input DSRN;
  wire DSRN;
  /* src = "rtl/apb_uart/apb_uart.sv:50.16" */
  output DTRN;
  wire DTRN;
  /* src = "rtl/apb_uart/apb_uart.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/apb_uart.sv:47.16" */
  output OUT1N;
  wire OUT1N;
  /* src = "rtl/apb_uart/apb_uart.sv:48.16" */
  output OUT2N;
  wire OUT2N;
  /* src = "rtl/apb_uart/apb_uart.sv:41.20" */
  input [2:0] PADDR;
  wire [2:0] PADDR;
  /* src = "rtl/apb_uart/apb_uart.sv:39.14" */
  input PENABLE;
  wire PENABLE;
  /* src = "rtl/apb_uart/apb_uart.sv:43.23" */
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:44.16" */
  output PREADY;
  wire PREADY;
  /* src = "rtl/apb_uart/apb_uart.sv:38.14" */
  input PSEL;
  wire PSEL;
  /* src = "rtl/apb_uart/apb_uart.sv:45.16" */
  output PSLVERR;
  wire PSLVERR;
  /* src = "rtl/apb_uart/apb_uart.sv:42.21" */
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:40.14" */
  input PWRITE;
  wire PWRITE;
  /* src = "rtl/apb_uart/apb_uart.sv:54.14" */
  input RIN;
  wire RIN;
  /* src = "rtl/apb_uart/apb_uart.sv:37.14" */
  input RSTN;
  wire RSTN;
  /* src = "rtl/apb_uart/apb_uart.sv:49.16" */
  output RTSN;
  wire RTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:55.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/apb_uart.sv:56.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:157.5" */
  wire iBAUDOUTN;
  /* src = "rtl/apb_uart/apb_uart.sv:198.5" */
  wire iBIRE;
  /* src = "rtl/apb_uart/apb_uart.sv:153.12" */
  wire [15:0] iBaudgenDiv;
  /* src = "rtl/apb_uart/apb_uart.sv:154.5" */
  wire iBaudtick16x;
  /* src = "rtl/apb_uart/apb_uart.sv:155.5" */
  wire iBaudtick2x;
  /* src = "rtl/apb_uart/apb_uart.sv:137.5" */
  wire iCTSNs;
  /* src = "rtl/apb_uart/apb_uart.sv:141.5" */
  wire iCTSn;
  /* src = "rtl/apb_uart/apb_uart.sv:146.5" */
  wire iCTSnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:145.5" */
  wire iCTSnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:204.5" */
  wire iCharTimeout;
  /* src = "rtl/apb_uart/apb_uart.sv:139.5" */
  wire iDCDNs;
  /* src = "rtl/apb_uart/apb_uart.sv:143.5" */
  wire iDCDn;
  /* src = "rtl/apb_uart/apb_uart.sv:150.5" */
  wire iDCDnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:149.5" */
  wire iDCDnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:83.11" */
  wire [7:0] iDLL;
  /* src = "rtl/apb_uart/apb_uart.sv:71.5" */
  wire iDLLWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:84.11" */
  wire [7:0] iDLM;
  /* src = "rtl/apb_uart/apb_uart.sv:72.5" */
  wire iDLMWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:138.5" */
  wire iDSRNs;
  /* src = "rtl/apb_uart/apb_uart.sv:142.5" */
  wire iDSRn;
  /* src = "rtl/apb_uart/apb_uart.sv:148.5" */
  wire iDSRnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:147.5" */
  wire iDSRnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:87.11" */
  wire [7:0] iFCR;
  /* src = "rtl/apb_uart/apb_uart.sv:75.5" */
  wire iFCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:105.5" */
  wire iFCR_DMAMode;
  /* src = "rtl/apb_uart/apb_uart.sv:106.5" */
  wire iFCR_FIFO64E;
  /* src = "rtl/apb_uart/apb_uart.sv:102.5" */
  wire iFCR_FIFOEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:103.5" */
  wire iFCR_RXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:107.11" */
  wire [1:0] iFCR_RXTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:104.5" */
  wire iFCR_TXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:199.11" */
  wire [6:0] iFECounter;
  /* src = "rtl/apb_uart/apb_uart.sv:201.5" */
  wire iFEDecrement;
  /* src = "rtl/apb_uart/apb_uart.sv:200.5" */
  wire iFEIncrement;
  /* src = "rtl/apb_uart/apb_uart.sv:196.5" */
  wire iFERE;
  /* src = "rtl/apb_uart/apb_uart.sv:85.11" */
  wire [7:0] iIER;
  /* src = "rtl/apb_uart/apb_uart.sv:73.5" */
  wire iIERWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:96.5" */
  wire iIER_EDSSI;
  /* src = "rtl/apb_uart/apb_uart.sv:95.5" */
  wire iIER_ELSI;
  /* src = "rtl/apb_uart/apb_uart.sv:93.5" */
  wire iIER_ERBI;
  /* src = "rtl/apb_uart/apb_uart.sv:94.5" */
  wire iIER_ETBEI;
  /* src = "rtl/apb_uart/apb_uart.sv:86.11" */
  wire [7:0] iIIR;
  /* src = "rtl/apb_uart/apb_uart.sv:74.5" */
  wire iIIRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:101.5" */
  wire iIIR_FIFO64;
  /* src = "rtl/apb_uart/apb_uart.sv:98.5" */
  wire iIIR_ID0;
  /* src = "rtl/apb_uart/apb_uart.sv:99.5" */
  wire iIIR_ID1;
  /* src = "rtl/apb_uart/apb_uart.sv:100.5" */
  wire iIIR_ID2;
  /* src = "rtl/apb_uart/apb_uart.sv:97.5" */
  wire iIIR_PI;
  /* src = "rtl/apb_uart/apb_uart.sv:88.11" */
  wire [7:0] iLCR;
  /* src = "rtl/apb_uart/apb_uart.sv:76.5" */
  wire iLCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:113.5" */
  wire iLCR_BC;
  /* src = "rtl/apb_uart/apb_uart.sv:114.5" */
  wire iLCR_DLAB;
  /* src = "rtl/apb_uart/apb_uart.sv:111.5" */
  wire iLCR_EPS;
  /* src = "rtl/apb_uart/apb_uart.sv:110.5" */
  wire iLCR_PEN;
  /* src = "rtl/apb_uart/apb_uart.sv:112.5" */
  wire iLCR_SP;
  /* src = "rtl/apb_uart/apb_uart.sv:109.5" */
  wire iLCR_STB;
  /* src = "rtl/apb_uart/apb_uart.sv:108.11" */
  wire [1:0] iLCR_WLS;
  /* src = "rtl/apb_uart/apb_uart.sv:90.11" */
  wire [7:0] iLSR;
  /* src = "rtl/apb_uart/apb_uart.sv:78.5" */
  wire iLSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:125.5" */
  wire iLSR_BI;
  /* src = "rtl/apb_uart/apb_uart.sv:121.5" */
  wire iLSR_DR;
  /* src = "rtl/apb_uart/apb_uart.sv:124.5" */
  wire iLSR_FE;
  /* src = "rtl/apb_uart/apb_uart.sv:128.5" */
  wire iLSR_FIFOERR;
  /* src = "rtl/apb_uart/apb_uart.sv:122.5" */
  wire iLSR_OE;
  /* src = "rtl/apb_uart/apb_uart.sv:123.5" */
  wire iLSR_PE;
  /* src = "rtl/apb_uart/apb_uart.sv:127.5" */
  wire iLSR_TEMT;
  /* src = "rtl/apb_uart/apb_uart.sv:126.5" */
  wire iLSR_THRE;
  /* src = "rtl/apb_uart/apb_uart.sv:205.5" */
  wire iLSR_THRERE;
  /* src = "rtl/apb_uart/apb_uart.sv:89.11" */
  wire [7:0] iMCR;
  /* src = "rtl/apb_uart/apb_uart.sv:77.5" */
  wire iMCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:120.5" */
  wire iMCR_AFE;
  /* src = "rtl/apb_uart/apb_uart.sv:115.5" */
  wire iMCR_DTR;
  /* src = "rtl/apb_uart/apb_uart.sv:119.5" */
  wire iMCR_LOOP;
  /* src = "rtl/apb_uart/apb_uart.sv:117.5" */
  wire iMCR_OUT1;
  /* src = "rtl/apb_uart/apb_uart.sv:118.5" */
  wire iMCR_OUT2;
  /* src = "rtl/apb_uart/apb_uart.sv:116.5" */
  wire iMCR_RTS;
  /* src = "rtl/apb_uart/apb_uart.sv:91.11" */
  wire [7:0] iMSR;
  /* src = "rtl/apb_uart/apb_uart.sv:79.5" */
  wire iMSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:133.5" */
  wire iMSR_CTS;
  /* src = "rtl/apb_uart/apb_uart.sv:136.5" */
  wire iMSR_DCD;
  /* src = "rtl/apb_uart/apb_uart.sv:134.5" */
  wire iMSR_DSR;
  /* src = "rtl/apb_uart/apb_uart.sv:135.5" */
  wire iMSR_RI;
  /* src = "rtl/apb_uart/apb_uart.sv:131.5" */
  wire iMSR_TERI;
  /* src = "rtl/apb_uart/apb_uart.sv:129.5" */
  wire iMSR_dCTS;
  /* src = "rtl/apb_uart/apb_uart.sv:132.5" */
  wire iMSR_dDCD;
  /* src = "rtl/apb_uart/apb_uart.sv:130.5" */
  wire iMSR_dDSR;
  /* src = "rtl/apb_uart/apb_uart.sv:197.5" */
  wire iPERE;
  /* src = "rtl/apb_uart/apb_uart.sv:82.11" */
  wire [7:0] iRBR;
  /* src = "rtl/apb_uart/apb_uart.sv:69.5" */
  wire iRBRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:156.5" */
  wire iRCLK;
  /* src = "rtl/apb_uart/apb_uart.sv:202.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:140.5" */
  wire iRINs;
  /* src = "rtl/apb_uart/apb_uart.sv:144.5" */
  wire iRIn;
  /* src = "rtl/apb_uart/apb_uart.sv:152.5" */
  wire iRInFE;
  /* src = "rtl/apb_uart/apb_uart.sv:151.5" */
  /* unused_bits = "0" */
  wire iRInRE;
  /* src = "rtl/apb_uart/apb_uart.sv:68.5" */
  wire iRST;
  /* src = "rtl/apb_uart/apb_uart.sv:208.5" */
  wire iRTS;
  /* src = "rtl/apb_uart/apb_uart.sv:195.5" */
  wire iRXBI;
  /* src = "rtl/apb_uart/apb_uart.sv:191.5" */
  wire iRXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:192.11" */
  wire [7:0] iRXData;
  /* src = "rtl/apb_uart/apb_uart.sv:194.5" */
  wire iRXFE;
  /* src = "rtl/apb_uart/apb_uart.sv:172.5" */
  wire iRXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:178.5" */
  wire iRXFIFO16Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:173.5" */
  wire iRXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:179.5" */
  wire iRXFIFO64Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:182.5" */
  wire iRXFIFOBI;
  /* src = "rtl/apb_uart/apb_uart.sv:167.5" */
  wire iRXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:174.12" */
  wire [10:0] iRXFIFOD;
  /* src = "rtl/apb_uart/apb_uart.sv:170.5" */
  wire iRXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:181.5" */
  wire iRXFIFOFE;
  /* src = "rtl/apb_uart/apb_uart.sv:171.5" */
  wire iRXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:180.5" */
  wire iRXFIFOPE;
  /* src = "rtl/apb_uart/apb_uart.sv:175.12" */
  wire [10:0] iRXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:169.5" */
  wire iRXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:177.5" */
  wire iRXFIFOTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:176.11" */
  /* unused_bits = "0" */
  wire [5:0] iRXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:168.5" */
  wire iRXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:190.5" */
  wire iRXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:193.5" */
  wire iRXPE;
  /* src = "rtl/apb_uart/apb_uart.sv:67.5" */
  wire iRead;
  /* src = "rtl/apb_uart/apb_uart.sv:92.11" */
  wire [7:0] iSCR;
  /* src = "rtl/apb_uart/apb_uart.sv:80.5" */
  wire iSCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:189.5" */
  wire iSIN;
  /* src = "rtl/apb_uart/apb_uart.sv:188.5" */
  wire iSINr;
  /* src = "rtl/apb_uart/apb_uart.sv:183.5" */
  wire iSOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:206.5" */
  wire iTHRInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:70.5" */
  wire iTHRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:81.11" */
  wire [7:0] iTSR;
  /* src = "rtl/apb_uart/apb_uart.sv:185.5" */
  wire iTXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:207.5" */
  wire iTXEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:163.5" */
  wire iTXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:164.5" */
  wire iTXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:158.5" */
  wire iTXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:161.5" */
  wire iTXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:162.5" */
  wire iTXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:166.11" */
  wire [7:0] iTXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:160.5" */
  wire iTXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:165.11" */
  /* unused_bits = "0 1 2 3 5" */
  wire [5:0] iTXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:159.5" */
  wire iTXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:186.5" */
  wire iTXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:187.5" */
  wire iTXRunning;
  /* src = "rtl/apb_uart/apb_uart.sv:184.5" */
  wire iTXStart;
  /* src = "rtl/apb_uart/apb_uart.sv:203.11" */
  wire [5:0] iTimeoutCount;
  /* src = "rtl/apb_uart/apb_uart.sv:66.5" */
  wire iWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:720.18" */
  wire rx_State;
  /* src = "rtl/apb_uart/apb_uart.sv:721.18" */
  wire [1:0] tx_State;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(PADDR),
    .B(3'h4),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(iWrite),
    .B(\$104 ),
    .Y(iMCRWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(PADDR),
    .B(3'h5),
    .Y(\$111 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(iRead),
    .B(\$111 ),
    .Y(iLSRRead)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(PADDR),
    .B(3'h6),
    .Y(\$118 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(iRead),
    .B(\$118 ),
    .Y(iMSRRead)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(PADDR),
    .B(3'h7),
    .Y(\$125 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(iWrite),
    .B(\$125 ),
    .Y(iSCRWrite)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(iLSR_THRERE),
    .B(iFCR_TXFIFOReset),
    .Y(\$149 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(PSEL),
    .B(PENABLE),
    .Y(\$16 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(iIERWrite),
    .B(PWDATA[1]),
    .Y(\$155 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$155 ),
    .B(iLSR_THRE),
    .Y(\$159 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\$149 ),
    .B(\$159 ),
    .Y(\$161 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(iIIR[3:1]),
    .B(1'h1),
    .Y(\$165 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(iIIRRead),
    .B(\$165 ),
    .Y(\$167 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(PWRITE),
    .Y(\$18 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(\$167 ),
    .B(iTHRWrite),
    .Y(\$171 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(iFCR_FIFOEnable),
    .Y(\$175 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(\$175 ),
    .B(iLSR_DR),
    .Y(\$179 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOTrigger),
    .Y(\$185 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(\$179 ),
    .B(\$185 ),
    .Y(iRDAInterrupt)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(iFCR_FIFOEnable),
    .B(iFCR_FIFO64E),
    .Y(iIIR_FIFO64)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$16 ),
    .B(\$18 ),
    .Y(iRead)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(iRXFIFOEmpty),
    .B(iRBRRead),
    .Y(\$197 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$200  (
    .A(\$197 ),
    .B(iRXFIFOWrite),
    .Y(\$201 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(iRXFIFOEmpty),
    .Y(\$203 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(\$203 ),
    .B(iBaudtick2x),
    .Y(\$207 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(iTimeoutCount[5]),
    .Y(\$209 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(\$207 ),
    .B(\$209 ),
    .Y(\$211 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd6)
  ) \$212  (
    .A(iTimeoutCount),
    .B(1'h1),
    .Y(\$213 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$175 ),
    .B(PWDATA[0]),
    .Y(\$239 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(RSTN),
    .Y(iRST)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(PWDATA[1]),
    .B(\$239 ),
    .Y(\$241 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(PWDATA[0]),
    .Y(\$245 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(iFCR_FIFOEnable),
    .B(\$245 ),
    .Y(\$247 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(\$241 ),
    .B(\$247 ),
    .Y(\$249 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(PWDATA[2]),
    .B(\$239 ),
    .Y(\$260 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$267  (
    .A(\$260 ),
    .B(\$247 ),
    .Y(\$268 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(PADDR),
    .Y(\$28 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(iRead),
    .B(\$28 ),
    .Y(\$30 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$296  (
    .A(\$179 ),
    .B(iRXFinished),
    .Y(\$297 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOFull),
    .Y(\$303 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(\$303 ),
    .B(iRXFinished),
    .Y(\$307 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$308  (
    .A(\$297 ),
    .B(\$307 ),
    .Y(\$309 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iLCR[7]),
    .Y(\$32 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$30 ),
    .B(\$32 ),
    .Y(iRBRRead)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(iFECounter),
    .Y(\$333 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$336  (
    .A(iRXFIFOQ[10:8]),
    .Y(\$337 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(iRXFIFOEmpty),
    .B(\$337 ),
    .Y(\$339 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$346  (
    .A(iFEDecrement),
    .Y(\$347 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$348  (
    .A(iFEIncrement),
    .B(\$347 ),
    .Y(\$349 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$350  (
    .A(iFECounter),
    .B({ \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18438 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$352  (
    .A(iFEIncrement),
    .Y(\$353 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$356  (
    .A(\$353 ),
    .B(iFEDecrement),
    .Y(\$357 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$367  (
    .A(\$203 ),
    .B(iRXFIFOQ[8]),
    .Y(iRXFIFOPE)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$374  (
    .A(\$203 ),
    .B(iRXFIFOQ[9]),
    .Y(iRXFIFOFE)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$381  (
    .A(\$203 ),
    .B(iRXFIFOQ[10]),
    .Y(iRXFIFOBI)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$386  (
    .A(iRXFIFOD[10:8]),
    .Y(\$387 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$388  (
    .A(iRXFIFOWrite),
    .B(\$387 ),
    .Y(iFEIncrement)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$395  (
    .A(\$333 ),
    .B(\$203 ),
    .Y(\$396 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(iWrite),
    .B(\$28 ),
    .Y(\$41 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$401  (
    .A(iPERE),
    .B(iFERE),
    .Y(\$402 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$405  (
    .A(\$402 ),
    .B(iBIRE),
    .Y(\$406 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$407  (
    .A(\$396 ),
    .B(\$406 ),
    .Y(iFEDecrement)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$410  (
    .A(iFCR_FIFOEnable),
    .B(iLSR_FIFOERR),
    .Y(iLSR[7])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$416  (
    .A(\$203 ),
    .B(iRXFIFOWrite),
    .Y(iLSR_DR)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$422  (
    .A(iTXRunning),
    .Y(\$423 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$426  (
    .A(\$423 ),
    .B(iLSR_THRE),
    .Y(iLSR_TEMT)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$433  (
    .A(iMCR[4]),
    .B(iRTS),
    .Y(\$434 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$435  (
    .A(iMCR[4]),
    .Y(\$436 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$437  (
    .A(iCTSn),
    .Y(\$438 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$439  (
    .A(\$436 ),
    .B(\$438 ),
    .Y(\$440 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$41 ),
    .B(\$32 ),
    .Y(iTHRWrite)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$441  (
    .A(\$434 ),
    .B(\$440 ),
    .Y(iMSR_CTS)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$448  (
    .A(iMCR[4]),
    .B(iMCR[0]),
    .Y(\$449 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$452  (
    .A(iDSRn),
    .Y(\$453 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$454  (
    .A(\$436 ),
    .B(\$453 ),
    .Y(\$455 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$456  (
    .A(\$449 ),
    .B(\$455 ),
    .Y(iMSR_DSR)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$463  (
    .A(iMCR[4]),
    .B(iMCR[2]),
    .Y(\$464 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$467  (
    .A(iRIn),
    .Y(\$468 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$469  (
    .A(\$436 ),
    .B(\$468 ),
    .Y(\$470 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$471  (
    .A(\$464 ),
    .B(\$470 ),
    .Y(iMSR_RI)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$478  (
    .A(iMCR[4]),
    .B(iMCR[3]),
    .Y(\$479 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$482  (
    .A(iDCDn),
    .Y(\$483 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$484  (
    .A(\$436 ),
    .B(\$483 ),
    .Y(\$485 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$486  (
    .A(\$479 ),
    .B(\$485 ),
    .Y(iMSR_DCD)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$495  (
    .A(iCTSnRE),
    .B(iCTSnFE),
    .Y(\$496 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$505  (
    .A(iDSRnRE),
    .B(iDSRnFE),
    .Y(\$506 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$521  (
    .A(iDCDnRE),
    .B(iDCDnFE),
    .Y(\$522 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$534  (
    .A(iTXFIFOUsage[4]),
    .B(iTXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iTXFIFOFull)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$539  (
    .A(\$175 ),
    .B(iLSR_THRE),
    .Y(\$540 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$543  (
    .A(iTXFIFOFull),
    .Y(\$544 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$545  (
    .A(iFCR_FIFOEnable),
    .B(\$544 ),
    .Y(\$546 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$547  (
    .A(\$540 ),
    .B(\$546 ),
    .Y(\$548 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\$41 ),
    .B(iLCR[7]),
    .Y(iDLLWrite)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$551  (
    .A(\$548 ),
    .B(iTHRWrite),
    .Y(iTXFIFOWrite)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$562  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOFull)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$563  (
    .A(iFCR_RXTrigger),
    .Y(\$564 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$567  (
    .A(\$564 ),
    .B(\$203 ),
    .Y(\$568 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$569  (
    .A(iFCR_RXTrigger),
    .B(1'h1),
    .Y(\$570 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$575  (
    .A(iRXFIFOUsage[2]),
    .B(iRXFIFOUsage[3]),
    .Y(\$576 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$577  (
    .A(\$570 ),
    .B(\$576 ),
    .Y(\$578 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$579  (
    .A(\$568 ),
    .B(\$578 ),
    .Y(\$580 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$581  (
    .A(iFCR_RXTrigger),
    .B(2'h2),
    .Y(\$582 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$585  (
    .A(\$582 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$586 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$587  (
    .A(\$580 ),
    .B(\$586 ),
    .Y(\$588 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$589  (
    .A(iFCR_RXTrigger),
    .B(2'h3),
    .Y(\$590 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$593  (
    .A(\$590 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$594 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$597  (
    .A(\$594 ),
    .B(iRXFIFOUsage[2]),
    .Y(\$598 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(PADDR),
    .B(1'h1),
    .Y(\$61 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$601  (
    .A(\$598 ),
    .B(iRXFIFOUsage[1]),
    .Y(\$602 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$603  (
    .A(\$588 ),
    .B(\$602 ),
    .Y(\$604 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$607  (
    .A(\$604 ),
    .B(iRXFIFOUsage[4]),
    .Y(iRXFIFO16Trigger)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(iWrite),
    .B(\$61 ),
    .Y(\$63 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$622  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFOUsage[5]),
    .Y(\$623 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$624  (
    .A(\$570 ),
    .B(\$623 ),
    .Y(\$625 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$626  (
    .A(\$568 ),
    .B(\$625 ),
    .Y(\$627 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$632  (
    .A(\$582 ),
    .B(iRXFIFOUsage[5]),
    .Y(\$633 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$634  (
    .A(\$627 ),
    .B(\$633 ),
    .Y(\$635 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$640  (
    .A(\$590 ),
    .B(iRXFIFOUsage[5]),
    .Y(\$641 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$644  (
    .A(\$641 ),
    .B(iRXFIFOUsage[4]),
    .Y(\$645 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$648  (
    .A(\$645 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$649 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$650  (
    .A(\$635 ),
    .B(\$649 ),
    .Y(\$651 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$654  (
    .A(\$651 ),
    .B(iRXFIFO64Full),
    .Y(iRXFIFO64Trigger)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$659  (
    .A(iRXFIFO16Trigger),
    .B(iRXFIFO64Trigger),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOTrigger)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(iLCR[7]),
    .Y(iDLMWrite)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$662  (
    .A(iSINr),
    .B(iSOUT),
    .S(iMCR[4]),
    .Y(iSIN)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$663  (
    .A(iLSR_THRE),
    .Y(\$664 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$665  (
    .A(iMCR[5]),
    .Y(\$666 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$671  (
    .A(iMCR[5]),
    .B(iMSR_CTS),
    .Y(\$672 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$673  (
    .A(\$666 ),
    .B(\$672 ),
    .Y(\$674 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$675  (
    .A(\$664 ),
    .B(\$674 ),
    .Y(iTXEnable)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$714  (
    .A(iMCR[1]),
    .Y(\$715 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$720  (
    .A(iMCR[5]),
    .B(iRXFIFOTrigger),
    .Y(\$721 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$722  (
    .A(\$715 ),
    .B(\$721 ),
    .Y(\$723 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$732  (
    .A(iMCR[5]),
    .B(iRXFIFOEmpty),
    .Y(\$733 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$734  (
    .A(\$666 ),
    .B(\$733 ),
    .Y(\$735 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$736  (
    .A(iMCR[1]),
    .B(\$735 ),
    .Y(\$737 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$747  (
    .A(iMCR[2]),
    .Y(\$748 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$749  (
    .A(iMCR[4]),
    .B(\$748 ),
    .Y(\$750 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$754  (
    .A(iMCR[3]),
    .Y(\$755 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$756  (
    .A(iMCR[4]),
    .B(\$755 ),
    .Y(\$757 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$761  (
    .A(iRTS),
    .Y(\$762 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$763  (
    .A(iMCR[4]),
    .B(\$762 ),
    .Y(\$764 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$768  (
    .A(iMCR[0]),
    .Y(\$769 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(\$63 ),
    .B(\$32 ),
    .Y(iIERWrite)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$770  (
    .A(iMCR[4]),
    .B(\$769 ),
    .Y(\$771 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$777  (
    .A(iMCR[4]),
    .B(iSOUT),
    .Y(\$778 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$16 ),
    .B(PWRITE),
    .Y(iWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(PADDR),
    .B(2'h2),
    .Y(\$83 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(iRead),
    .B(\$83 ),
    .Y(iIIRRead)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(iWrite),
    .B(\$83 ),
    .Y(iFCRWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(PADDR),
    .B(2'h3),
    .Y(\$97 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(iWrite),
    .B(\$97 ),
    .Y(iLCRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17269  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTimeoutCount$215 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17270 ),
    .Q(iTimeoutCount)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17272  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(iTXFIFOQ),
    .EN(\$iTXFIFORead$688 ),
    .Q(iTSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:614.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17273  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iSCRWrite),
    .Q(iSCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17274  (
    .ARST(RSTN),
    .CLK(CLK),
    .D({ iRXBI, iRXFE, iRXPE, iRXData }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17277 ),
    .Q(iRXFIFOD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:422.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17279  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5:0]),
    .EN(iMCRWrite),
    .Q(iMCR[5:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:400.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17281  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iLCRWrite),
    .Q(iLCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:254.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17282  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[3:0]),
    .EN(iIERWrite),
    .Q(iIER[3:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17284  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFECounter$362 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17285 ),
    .Q(iFECounter)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17287  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:6]),
    .EN(iFCRWrite),
    .Q(iFCR_RXTrigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17288  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[0]),
    .EN(iFCRWrite),
    .Q(iFCR_FIFOEnable)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17289  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17290 ),
    .Q(iFCR_FIFO64E)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17292  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLMWrite),
    .Q(iDLM)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17293  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLLWrite),
    .Q(iDLL)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17271  (
    .A({ \$211 , \$201  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17270 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17286  (
    .A({ iRXFIFOClear, \$357 , \$349  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17285 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17275  (
    .A(rx_State),
    .Y(\$auto$rtlil.cc:2957:Not$17276 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17278  (
    .A({ \$auto$rtlil.cc:2957:Not$17276 , iRXFinished }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17277 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17291  (
    .A({ iLCR[7], iFCRWrite }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17290 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16703  (
    .A({ \$iTXRunning$690 , \$iTXFIFORead$688  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16704 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18439  (
    .A(\$349 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18440 [6])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$DTRN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$771 ),
    .Q(DTRN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT1N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$750 ),
    .Q(OUT1N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT2N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$757 ),
    .Q(OUT2N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$RTSN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$764 ),
    .Q(RTSN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$SOUT  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$778 ),
    .Q(SOUT)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBAUDOUTN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iBAUDOUTN$744 ),
    .Q(iBAUDOUTN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iCharTimeout  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iCharTimeout$224 ),
    .Q(iCharTimeout)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_RXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFCR_RXFIFOReset$271 ),
    .Q(iFCR_RXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_TXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFCR_TXFIFOReset$272 ),
    .Q(iFCR_TXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_BI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_BI$331 ),
    .Q(iLSR_BI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FE$325 ),
    .Q(iLSR_FE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FIFOERR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FIFOERR$341 ),
    .Q(iLSR_FIFOERR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_OE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_OE$313 ),
    .Q(iLSR_OE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_PE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_PE$319 ),
    .Q(iLSR_PE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_TERI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_TERI$516 ),
    .Q(iMSR_TERI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dCTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dCTS$500 ),
    .Q(iMSR_dCTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDCD  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDCD$526 ),
    .Q(iMSR_dDCD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDSR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDSR$510 ),
    .Q(iMSR_dDSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:812.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRTS$739 ),
    .Q(iRTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOClear  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOClear$708 ),
    .Q(iRXFIFOClear)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOWrite  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOWrite$709 ),
    .Q(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:292.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTHRInterrupt  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTHRInterrupt$173 ),
    .Q(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXFIFORead  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXFIFORead$688 ),
    .Q(iTXFIFORead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXRunning  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXRunning$690 ),
    .Q(iTXRunning)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXStart  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXStart$689 ),
    .Q(iTXStart)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$procmux$13455_Y ),
    .Q(rx_State)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$tx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$procmux$13505_Y ),
    .Q(tx_State)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:897.18-897.38|rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13378  (
    .A({ 4'h0, iIER[3:0] }),
    .B(iDLM),
    .S(iLCR[7]),
    .Y(\$PRDATA[7:0]$786 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd8)
  ) \$procmux$13382  (
    .A(\$PRDATA[7:0]$783 ),
    .B({ \$PRDATA[7:0]$786 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }),
    .S({ \$61 , \$83 , \$97 , \$104 , \$111 , \$118 , \$125  }),
    .Y(PRDATA[7:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:885.18-885.38|rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$13401  (
    .A(iRXFIFOQ[7:0]),
    .B(iDLL),
    .S(iLCR[7]),
    .Y(\$PRDATA[7:0]$783 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:849.13-849.32|rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13430  (
    .A(iBaudtick16x),
    .Y(\$iBAUDOUTN$744 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:825.13-825.27|rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13432  (
    .A(iRTS),
    .B(\$737 ),
    .Y(\$iRTS$738 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13439  (
    .A(\$iRTS$738 ),
    .B(1'h0),
    .S(\$723 ),
    .Y(\$iRTS$739 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:805.24-805.45|rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13441  (
    .A(iRXFIFOFull),
    .Y(\$iRXFIFOWrite$706 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13450  (
    .A(1'h1),
    .B(\$iRXFIFOWrite$706 ),
    .S(iFCR_FIFOEnable),
    .Y(\$iRXFIFOWrite$707 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13455  (
    .A(iRXFinished),
    .B(1'h0),
    .S(rx_State),
    .Y(\$procmux$13455_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:794.29-794.50|rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13468  (
    .A(1'h1),
    .B(iFCR_RXFIFOReset),
    .S(iFCR_FIFOEnable),
    .Y(\$iRXFIFOClear$698 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13484  (
    .A(iFCR_RXFIFOReset),
    .B(\$iRXFIFOClear$698 ),
    .S(iRXFinished),
    .Y(\$iRXFIFOClear$699 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13493  (
    .A(rx_State),
    .B(\$iRXFIFOWrite$707 ),
    .Y(\$iRXFIFOWrite$709 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13497  (
    .A(\$iRXFIFOClear$699 ),
    .B(iFCR_RXFIFOReset),
    .S(rx_State),
    .Y(\$iRXFIFOClear$708 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13504_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$iTXRunning$690 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$13505  (
    .A({ 1'h0, iTXEnable }),
    .B({ 3'h5, iTXFinished, 2'h0 }),
    .S({ \$iTXFIFORead$688 , \$iTXRunning$690 , \$procmux$13506_CMP  }),
    .Y(\$procmux$13505_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13506_CMP0  (
    .A(tx_State),
    .B(2'h3),
    .Y(\$procmux$13506_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13509_CMP0  (
    .A(tx_State),
    .B(1'h1),
    .Y(\$iTXFIFORead$688 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13511_CMP0  (
    .A(tx_State),
    .Y(\$procmux$13511_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$13534  (
    .A(1'h0),
    .B({ iTXEnable, 1'h1 }),
    .S({ \$procmux$13511_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16704  }),
    .Y(\$iTXStart$689 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:601.13-601.32|rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13549  (
    .A(iMSR_dDCD),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dDCD$525 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13559  (
    .A(\$iMSR_dDCD$525 ),
    .B(\$522 ),
    .Y(\$iMSR_dDCD$526 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:593.13-593.32|rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13564  (
    .A(iMSR_TERI),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_TERI$515 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13573  (
    .A(\$iMSR_TERI$515 ),
    .B(iRInFE),
    .Y(\$iMSR_TERI$516 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:585.13-585.32|rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13577  (
    .A(iMSR_dDSR),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dDSR$509 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13585  (
    .A(\$iMSR_dDSR$509 ),
    .B(\$506 ),
    .Y(\$iMSR_dDSR$510 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:577.13-577.32|rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13588  (
    .A(iMSR_dCTS),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dCTS$499 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13595  (
    .A(\$iMSR_dCTS$499 ),
    .B(\$496 ),
    .Y(\$iMSR_dCTS$500 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13624  (
    .A(\$auto$opt_share.cc:222:merge_operators$18438 ),
    .B(7'h00),
    .S(iRXFIFOClear),
    .Y(\$iFECounter$362 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:493.13-493.35|rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13631  (
    .A(iLSR_FIFOERR),
    .B(1'h0),
    .S(\$339 ),
    .Y(\$iLSR_FIFOERR$340 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13642  (
    .A(\$iLSR_FIFOERR$340 ),
    .B(\$333 ),
    .Y(\$iLSR_FIFOERR$341 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:485.13-485.30|rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13648  (
    .A(iLSR_BI),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_BI$330 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13658  (
    .A(\$iLSR_BI$330 ),
    .B(iBIRE),
    .Y(\$iLSR_BI$331 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:477.13-477.30|rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13663  (
    .A(iLSR_FE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_FE$324 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13672  (
    .A(\$iLSR_FE$324 ),
    .B(iFERE),
    .Y(\$iLSR_FE$325 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:469.13-469.30|rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13676  (
    .A(iLSR_PE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_PE$318 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13684  (
    .A(\$iLSR_PE$318 ),
    .B(iPERE),
    .Y(\$iLSR_PE$319 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:461.13-461.30|rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13687  (
    .A(iLSR_OE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_OE$312 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13694  (
    .A(\$iLSR_OE$312 ),
    .B(\$309 ),
    .Y(\$iLSR_OE$313 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13733  (
    .A(iFCRWrite),
    .B(\$268 ),
    .Y(\$iFCR_TXFIFOReset$272 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13738  (
    .A(iFCRWrite),
    .B(\$249 ),
    .Y(\$iFCR_RXFIFOReset$271 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13747  (
    .A(iFCR_FIFOEnable),
    .B(\$iCharTimeout$223 ),
    .Y(\$iCharTimeout$224 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:346.18-346.40|rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13751  (
    .A(iCharTimeout),
    .B(iTimeoutCount[5]),
    .Y(\$iCharTimeout$222 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13762  (
    .A(\$iCharTimeout$222 ),
    .B(1'h0),
    .S(iRBRRead),
    .Y(\$iCharTimeout$223 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13774  (
    .A(\$213 ),
    .B(6'h00),
    .S(\$201 ),
    .Y(\$iTimeoutCount$215 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:305.13-305.36|rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13776  (
    .A(iTHRInterrupt),
    .B(1'h0),
    .S(\$171 ),
    .Y(\$iTHRInterrupt$172 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13783  (
    .A(\$iTHRInterrupt$172 ),
    .B(\$161 ),
    .Y(\$iTHRInterrupt$173 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:630.14" */
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:637.29" */
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:517.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:536.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:554.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:542.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:548.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:516.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:229.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:231.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:230.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:232.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:273.16" */
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:285.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:225.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:227.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:226.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:228.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:224.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:515.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:642.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:697.15" */
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:663.37" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:681.18" */
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:648.36" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:3092:Mux$18440 [5:0] = { \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], \$auto$rtlil.cc:3092:Mux$18440 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iBaudgenDiv = { iDLM, iDLL };
  assign iFCR = { iFCR_RXTrigger, iFCR_FIFO64E, 2'b0x, iFCR_TXFIFOReset, iFCR_RXFIFOReset, iFCR_FIFOEnable };
  assign iFCR_DMAMode = 1'hx;
  assign iIER[7:4] = 4'h0;
  assign iIER_EDSSI = iIER[3];
  assign iIER_ELSI = iIER[2];
  assign iIER_ERBI = iIER[0];
  assign iIER_ETBEI = iIER[1];
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iIIR_ID0 = iIIR[1];
  assign iIIR_ID1 = iIIR[2];
  assign iIIR_ID2 = iIIR[3];
  assign iIIR_PI = iIIR[0];
  assign iLCR_BC = iLCR[6];
  assign iLCR_DLAB = iLCR[7];
  assign iLCR_EPS = iLCR[4];
  assign iLCR_PEN = iLCR[3];
  assign iLCR_SP = iLCR[5];
  assign iLCR_STB = iLCR[2];
  assign iLCR_WLS = iLCR[1:0];
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
  assign iMCR_AFE = iMCR[5];
  assign iMCR_DTR = iMCR[0];
  assign iMCR_LOOP = iMCR[4];
  assign iMCR_OUT1 = iMCR[2];
  assign iMCR_OUT2 = iMCR[3];
  assign iMCR_RTS = iMCR[1];
  assign iMSR = { iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS };
  assign iRBR = iRXFIFOQ[7:0];
  assign iRXClear = 1'h0;
  assign iRXFIFO16Full = iRXFIFOUsage[4];
  assign iRXFIFORead = iRBRRead;
  assign iTXClear = 1'h0;
  assign iTXFIFO16Full = iTXFIFOUsage[4];
  assign iTXFIFOClear = iFCR_TXFIFOReset;
  assign iTXFIFOEmpty = iLSR_THRE;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$3 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [40:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(dst_ready_i),
    .B(\$13 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(s_dst_isolate_req),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_dst_valid),
    .B(\$13 ),
    .Y(dst_valid_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(src_valid_i),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(s_src_ready),
    .B(\$1 ),
    .Y(src_ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$3 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [33:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(dst_ready_i),
    .B(\$13 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(s_dst_isolate_req),
    .Y(\$13 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_dst_valid),
    .B(\$13 ),
    .Y(dst_valid_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(src_valid_i),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(s_src_ready),
    .B(\$1 ),
    .Y(src_ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$11 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$3 )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17298 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [40:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [40:0] data_o;
  wire [40:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(valid_o),
    .Y(\$11 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$9 ),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(ack_dst_q),
    .Y(\$4 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$9 )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17294  (
    .CLK(clk_i),
    .D(async_data_i[33:32]),
    .EN(\$13 ),
    .Q(data_dst_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17295  (
    .CLK(clk_i),
    .D(async_data_i[31:0]),
    .EN(\$13 ),
    .Q(data_dst_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17296  (
    .CLK(clk_i),
    .D(async_data_i[40:34]),
    .EN(\$13 ),
    .Q(data_dst_q[40:34])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17297  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17298 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17299  (
    .A({ clear_i, \$2  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17298 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3787  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$13 ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3796  (
    .A(\$4 ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$11 ;
  wire \$13 ;
  wire \$2 ;
  wire \$4 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17303 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [33:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(valid_o),
    .Y(\$11 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$9 ),
    .B(\$11 ),
    .Y(\$13 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(ack_dst_q),
    .Y(\$4 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$9 )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17300  (
    .CLK(clk_i),
    .D(async_data_i[1:0]),
    .EN(\$13 ),
    .Q(data_dst_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17301  (
    .CLK(clk_i),
    .D(async_data_i[33:2]),
    .EN(\$13 ),
    .Q(data_dst_q[33:2])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17302  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17303 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17304  (
    .A({ clear_i, \$2  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17303 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3758  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$13 ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3767  (
    .A(\$4 ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$2 ;
  wire \$4 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17306 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17311 ;
  wire \$auto$rtlil.cc:2957:Not$17310 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [40:0] \$data_src_d$6 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [40:0] async_data_o;
  wire [40:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [40:0] data_i;
  wire [40:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [40:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$2 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_src_q),
    .Y(\$4 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17305  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17306 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17308  (
    .CLK(clk_i),
    .D(data_i[33:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17311 ),
    .Q(data_src_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17313  (
    .CLK(clk_i),
    .D(data_i[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17311 ),
    .Q(data_src_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17318  (
    .CLK(clk_i),
    .D(data_i[40:34]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17311 ),
    .Q(data_src_q[40:34])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17307  (
    .A({ clear_i, \$2  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17306 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17309  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2957:Not$17310 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17312  (
    .A({ \$auto$rtlil.cc:2957:Not$17310 , \$2  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17311 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3798  (
    .A(data_src_q),
    .B(data_i),
    .S(\$2 ),
    .Y(\$data_src_d$6 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3810  (
    .A(\$4 ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$3814  (
    .A(\$data_src_d$6 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$2 ;
  wire \$4 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17324 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17329 ;
  wire \$auto$rtlil.cc:2957:Not$17328 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [33:0] \$data_src_d$6 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [33:0] async_data_o;
  wire [33:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [33:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$2 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_src_q),
    .Y(\$4 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17323  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17324 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17326  (
    .CLK(clk_i),
    .D(data_i[1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17329 ),
    .Q(data_src_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17331  (
    .CLK(clk_i),
    .D(data_i[33:2]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17329 ),
    .Q(data_src_q[33:2])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17325  (
    .A({ clear_i, \$2  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17324 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17327  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2957:Not$17328 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17330  (
    .A({ \$auto$rtlil.cc:2957:Not$17328 , \$2  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17329 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3769  (
    .A(data_src_q),
    .B(data_i),
    .S(\$2 ),
    .Y(\$data_src_d$6 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3781  (
    .A(\$4 ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$3785  (
    .A(\$data_src_d$6 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17337 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17339 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17341 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17343 ;
  wire \$procmux$2274_CMP ;
  wire \$procmux$2285_CMP ;
  wire \$procmux$2299_CMP ;
  wire [1:0] \$procmux$2304_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17336  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17343 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17338  (
    .A({ \$procmux$2285_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17337 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17340  (
    .A({ \$procmux$2299_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17339 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17342  (
    .A({ \$procmux$2274_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17341 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17344  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17337 , \$auto$opt_dff.cc:194:make_patterns_logic$17341 , \$auto$opt_dff.cc:194:make_patterns_logic$17339  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17343 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2274_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2274_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2285_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$2285_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$2294  (
    .A(2'h0),
    .B({ \$procmux$2304_Y , 2'h2 }),
    .S({ \$procmux$2299_CMP , \$procmux$2285_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2299_CMP0  (
    .A(state_q),
    .Y(\$procmux$2299_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2304  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$2304_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2329  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$2299_CMP , \$procmux$2285_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2335  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$2285_CMP , \$procmux$2274_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17346 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17348 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17350 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17352 ;
  wire \$procmux$2125_CMP ;
  wire \$procmux$2136_CMP ;
  wire \$procmux$2150_CMP ;
  wire [1:0] \$procmux$2155_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17345  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17352 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17347  (
    .A({ \$procmux$2136_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17346 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17349  (
    .A({ \$procmux$2150_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17348 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17351  (
    .A({ \$procmux$2125_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17350 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17353  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17350 , \$auto$opt_dff.cc:194:make_patterns_logic$17348 , \$auto$opt_dff.cc:194:make_patterns_logic$17346  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17352 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2125_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2125_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2136_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$2136_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$2145  (
    .A(2'h0),
    .B({ \$procmux$2155_Y , 2'h2 }),
    .S({ \$procmux$2150_CMP , \$procmux$2136_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2150_CMP0  (
    .A(state_q),
    .Y(\$procmux$2150_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2155  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$2155_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2180  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$2150_CMP , \$procmux$2136_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2186  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$2136_CMP , \$procmux$2125_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17355 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17357 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17359 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17361 ;
  wire \$procmux$1976_CMP ;
  wire \$procmux$1987_CMP ;
  wire \$procmux$2001_CMP ;
  wire [1:0] \$procmux$2006_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17354  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17361 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17356  (
    .A({ \$procmux$1987_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17355 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17358  (
    .A({ \$procmux$2001_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17357 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17360  (
    .A({ \$procmux$1976_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17359 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17362  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17355 , \$auto$opt_dff.cc:194:make_patterns_logic$17357 , \$auto$opt_dff.cc:194:make_patterns_logic$17359  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17361 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1976_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1976_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1987_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$1987_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$1996  (
    .A(2'h0),
    .B({ \$procmux$2006_Y , 2'h2 }),
    .S({ \$procmux$2001_CMP , \$procmux$1987_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2001_CMP0  (
    .A(state_q),
    .Y(\$procmux$2001_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2006  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$2006_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2031  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$2001_CMP , \$procmux$1987_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2037  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$1987_CMP , \$procmux$1976_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17364 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17366 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17368 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17370 ;
  wire \$procmux$1827_CMP ;
  wire \$procmux$1838_CMP ;
  wire \$procmux$1852_CMP ;
  wire [1:0] \$procmux$1857_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17363  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17370 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17365  (
    .A({ \$procmux$1838_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17364 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17367  (
    .A({ \$procmux$1852_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17366 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17369  (
    .A({ \$procmux$1827_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17368 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17371  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17364 , \$auto$opt_dff.cc:194:make_patterns_logic$17366 , \$auto$opt_dff.cc:194:make_patterns_logic$17368  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17370 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1827_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1827_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1838_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$1838_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$1847  (
    .A(2'h0),
    .B({ \$procmux$1857_Y , 2'h2 }),
    .S({ \$procmux$1852_CMP , \$procmux$1838_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1852_CMP0  (
    .A(state_q),
    .Y(\$procmux$1852_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1857  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$1857_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1882  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$1852_CMP , \$procmux$1838_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1888  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$1838_CMP , \$procmux$1827_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17376 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17378 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17380 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17373 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17382 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2343_CMP ;
  wire \$procmux$2345_Y ;
  wire \$procmux$2359_CMP ;
  wire \$procmux$2373_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17372  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17373 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17375  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17382 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17377  (
    .A({ \$procmux$2373_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17376 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17379  (
    .A({ \$procmux$2359_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17378 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17381  (
    .A({ \$procmux$2343_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17380 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17374  (
    .A({ \$procmux$2373_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17373 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17383  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17376 , \$auto$opt_dff.cc:194:make_patterns_logic$17378 , \$auto$opt_dff.cc:194:make_patterns_logic$17380  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17382 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2343_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2343_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2359_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$2359_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2362  (
    .A(ack_synced),
    .Y(\$procmux$2345_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$2368  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$2373_CMP , \$procmux$2359_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2373_CMP0  (
    .A(state_q),
    .Y(\$procmux$2373_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2384  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2402  (
    .A(\$procmux$2343_CMP ),
    .B(\$procmux$2345_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2410  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2373_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2415  (
    .A(1'h0),
    .B({ valid_i, \$procmux$2345_Y  }),
    .S({ \$procmux$2373_CMP , \$procmux$2359_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17388 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17390 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17392 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17385 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17394 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2194_CMP ;
  wire \$procmux$2196_Y ;
  wire \$procmux$2210_CMP ;
  wire \$procmux$2224_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17384  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17385 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17387  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17394 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17389  (
    .A({ \$procmux$2224_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17388 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17391  (
    .A({ \$procmux$2210_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17390 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17393  (
    .A({ \$procmux$2194_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17392 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17386  (
    .A({ \$procmux$2224_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17385 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17395  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17388 , \$auto$opt_dff.cc:194:make_patterns_logic$17390 , \$auto$opt_dff.cc:194:make_patterns_logic$17392  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17394 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2194_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2194_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2210_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$2210_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2213  (
    .A(ack_synced),
    .Y(\$procmux$2196_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$2219  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$2224_CMP , \$procmux$2210_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2224_CMP0  (
    .A(state_q),
    .Y(\$procmux$2224_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2235  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2253  (
    .A(\$procmux$2194_CMP ),
    .B(\$procmux$2196_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2261  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2224_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2266  (
    .A(1'h0),
    .B({ valid_i, \$procmux$2196_Y  }),
    .S({ \$procmux$2224_CMP , \$procmux$2210_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17400 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17402 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17404 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17397 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17406 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$2045_CMP ;
  wire \$procmux$2047_Y ;
  wire \$procmux$2061_CMP ;
  wire \$procmux$2075_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17396  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17397 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17399  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17406 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17401  (
    .A({ \$procmux$2075_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17400 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17403  (
    .A({ \$procmux$2061_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17402 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17405  (
    .A({ \$procmux$2045_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17404 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17398  (
    .A({ \$procmux$2075_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17397 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17407  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17400 , \$auto$opt_dff.cc:194:make_patterns_logic$17402 , \$auto$opt_dff.cc:194:make_patterns_logic$17404  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17406 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2045_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$2045_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2061_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$2061_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2064  (
    .A(ack_synced),
    .Y(\$procmux$2047_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$2070  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$2075_CMP , \$procmux$2061_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2075_CMP0  (
    .A(state_q),
    .Y(\$procmux$2075_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2086  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2104  (
    .A(\$procmux$2045_CMP ),
    .B(\$procmux$2047_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2112  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$2075_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2117  (
    .A(1'h0),
    .B({ valid_i, \$procmux$2047_Y  }),
    .S({ \$procmux$2075_CMP , \$procmux$2061_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17412 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17414 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17416 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17409 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17418 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$1896_CMP ;
  wire \$procmux$1898_Y ;
  wire \$procmux$1912_CMP ;
  wire \$procmux$1926_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17408  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17409 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17411  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17418 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17413  (
    .A({ \$procmux$1926_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17412 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17415  (
    .A({ \$procmux$1912_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17414 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17417  (
    .A({ \$procmux$1896_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17416 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17410  (
    .A({ \$procmux$1926_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17409 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17419  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17412 , \$auto$opt_dff.cc:194:make_patterns_logic$17414 , \$auto$opt_dff.cc:194:make_patterns_logic$17416  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17418 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1896_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$1896_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1912_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$1912_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1915  (
    .A(ack_synced),
    .Y(\$procmux$1898_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$1921  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$1926_CMP , \$procmux$1912_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1926_CMP0  (
    .A(state_q),
    .Y(\$procmux$1926_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1937  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1955  (
    .A(\$procmux$1896_CMP ),
    .B(\$procmux$1898_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1963  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$1926_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1968  (
    .A(1'h0),
    .B({ valid_i, \$procmux$1898_Y  }),
    .S({ \$procmux$1926_CMP , \$procmux$1912_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17422 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17424 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17426 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17428 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17430 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17432 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17434 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17436 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17438 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17440 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16706 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16708 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16714 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16718 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16720 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16724 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18413 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18415 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$3301_Y ;
  wire \$procmux$3302_CMP ;
  wire \$procmux$3303_CMP ;
  wire \$procmux$3304_CMP ;
  wire \$procmux$3305_CMP ;
  wire \$procmux$3336_Y ;
  wire \$procmux$3337_CMP ;
  wire \$procmux$3338_CMP ;
  wire \$procmux$3339_CMP ;
  wire \$procmux$3340_CMP ;
  wire \$procmux$3352_Y ;
  wire \$procmux$3365_CMP ;
  wire \$procmux$3371_CMP ;
  wire \$procmux$3378_CMP ;
  wire \$procmux$3386_CMP ;
  wire \$procmux$3401_CMP ;
  wire \$procmux$3436_CMP ;
  wire \$procmux$3447_CMP ;
  wire \$procmux$3465_CMP ;
  wire \$procmux$3516_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17420  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$31 ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17421  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17440 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17423  (
    .A({ \$procmux$3465_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17422 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17425  (
    .A({ \$procmux$3401_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17424 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17427  (
    .A({ \$procmux$3516_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17426 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17429  (
    .A({ \$procmux$3447_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17428 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17431  (
    .A({ \$procmux$3386_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17430 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17433  (
    .A({ \$procmux$3365_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17432 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17435  (
    .A({ \$procmux$3371_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17434 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17437  (
    .A({ \$procmux$3378_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17436 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17439  (
    .A({ \$procmux$3436_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17438 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17441  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17422 , \$auto$opt_dff.cc:194:make_patterns_logic$17424 , \$auto$opt_dff.cc:194:make_patterns_logic$17426 , \$auto$opt_dff.cc:194:make_patterns_logic$17428 , \$auto$opt_dff.cc:194:make_patterns_logic$17434 , \$auto$opt_dff.cc:194:make_patterns_logic$17436 , \$auto$opt_dff.cc:194:make_patterns_logic$17438 , \$auto$opt_dff.cc:194:make_patterns_logic$17432 , \$auto$opt_dff.cc:194:make_patterns_logic$17430  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17440 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16705  (
    .A({ \$procmux$3304_CMP , \$procmux$3303_CMP , \$procmux$3302_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16706 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16707  (
    .A({ \$procmux$3340_CMP , \$procmux$3339_CMP , \$procmux$3337_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16708 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16711  (
    .A({ \$procmux$3465_CMP , \$procmux$3447_CMP , \$procmux$3436_CMP , \$procmux$3401_CMP , \$procmux$3386_CMP , \$procmux$3378_CMP , \$procmux$3371_CMP , \$procmux$3365_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16713  (
    .A({ \$procmux$3339_CMP , \$procmux$3338_CMP , \$procmux$3337_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16714 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16715  (
    .A({ \$procmux$3465_CMP , \$procmux$3436_CMP , \$procmux$3401_CMP , \$procmux$3378_CMP , \$procmux$3371_CMP , \$procmux$3365_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16717  (
    .A({ \$procmux$3340_CMP , \$procmux$3337_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16718 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16719  (
    .A({ \$procmux$3305_CMP , \$procmux$3304_CMP , \$procmux$3302_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16720 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16721  (
    .A({ \$procmux$3401_CMP , \$procmux$3386_CMP , \$procmux$3378_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16723  (
    .A({ \$procmux$3465_CMP , \$procmux$3447_CMP , \$procmux$3436_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16724 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18412  (
    .A({ \$procmux$3386_CMP , \$procmux$3378_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18413 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18414  (
    .A({ \$procmux$3447_CMP , \$procmux$3436_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18415 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3301  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16720 ),
    .Y(\$procmux$3301_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3302_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3302_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3303_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3303_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3304_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$3304_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3305_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3305_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3323  (
    .A(\$procmux$3301_Y ),
    .B(\$procmux$3336_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3328  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16706 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$16714 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3333  (
    .A(receiver_phase_req),
    .B(\$procmux$3352_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3336  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16708 ),
    .Y(\$procmux$3336_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3337_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3337_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3338_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3338_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3339_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$3339_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3340_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3340_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3352  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$3338_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16718  }),
    .Y(\$procmux$3352_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3365_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3365_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3371_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$3371_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3378_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$3378_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3386_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$3386_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3401_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$3401_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3409  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$12 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3423  (
    .A(\$initiator_state_d$12 [1:0]),
    .B(2'h3),
    .S(\$10 ),
    .Y(\$initiator_state_d$13 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3436_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$3436_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3447_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$3447_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3465_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$3465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3493  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$3 ),
    .Y(\$initiator_state_d$6 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$3499  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }),
    .S({ \$procmux$3465_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18415 , \$procmux$3401_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18413 , \$procmux$3371_CMP , \$procmux$3365_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3516_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3516_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$3581  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16724 , initiator_clear_out, \$procmux$3371_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17444 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17446 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17448 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17450 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17452 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17454 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17456 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17458 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17460 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17462 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16726 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16728 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16734 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16738 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16740 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16744 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18417 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18419 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$3007_Y ;
  wire \$procmux$3008_CMP ;
  wire \$procmux$3009_CMP ;
  wire \$procmux$3010_CMP ;
  wire \$procmux$3011_CMP ;
  wire \$procmux$3042_Y ;
  wire \$procmux$3043_CMP ;
  wire \$procmux$3044_CMP ;
  wire \$procmux$3045_CMP ;
  wire \$procmux$3046_CMP ;
  wire \$procmux$3058_Y ;
  wire \$procmux$3071_CMP ;
  wire \$procmux$3077_CMP ;
  wire \$procmux$3084_CMP ;
  wire \$procmux$3092_CMP ;
  wire \$procmux$3107_CMP ;
  wire \$procmux$3142_CMP ;
  wire \$procmux$3153_CMP ;
  wire \$procmux$3171_CMP ;
  wire \$procmux$3222_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17442  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$31 ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17443  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17462 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17445  (
    .A({ \$procmux$3171_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17444 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17447  (
    .A({ \$procmux$3107_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17446 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17449  (
    .A({ \$procmux$3222_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17448 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17451  (
    .A({ \$procmux$3153_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17450 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17453  (
    .A({ \$procmux$3092_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17452 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17455  (
    .A({ \$procmux$3071_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17454 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17457  (
    .A({ \$procmux$3077_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17456 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17459  (
    .A({ \$procmux$3084_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17458 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17461  (
    .A({ \$procmux$3142_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17460 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17463  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17444 , \$auto$opt_dff.cc:194:make_patterns_logic$17446 , \$auto$opt_dff.cc:194:make_patterns_logic$17448 , \$auto$opt_dff.cc:194:make_patterns_logic$17450 , \$auto$opt_dff.cc:194:make_patterns_logic$17452 , \$auto$opt_dff.cc:194:make_patterns_logic$17454 , \$auto$opt_dff.cc:194:make_patterns_logic$17456 , \$auto$opt_dff.cc:194:make_patterns_logic$17458 , \$auto$opt_dff.cc:194:make_patterns_logic$17460  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17462 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16725  (
    .A({ \$procmux$3010_CMP , \$procmux$3009_CMP , \$procmux$3008_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16726 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16727  (
    .A({ \$procmux$3046_CMP , \$procmux$3045_CMP , \$procmux$3043_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16728 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16731  (
    .A({ \$procmux$3171_CMP , \$procmux$3153_CMP , \$procmux$3142_CMP , \$procmux$3107_CMP , \$procmux$3092_CMP , \$procmux$3084_CMP , \$procmux$3077_CMP , \$procmux$3071_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16733  (
    .A({ \$procmux$3045_CMP , \$procmux$3044_CMP , \$procmux$3043_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16734 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16735  (
    .A({ \$procmux$3171_CMP , \$procmux$3142_CMP , \$procmux$3107_CMP , \$procmux$3084_CMP , \$procmux$3077_CMP , \$procmux$3071_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16737  (
    .A({ \$procmux$3046_CMP , \$procmux$3043_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16738 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16739  (
    .A({ \$procmux$3011_CMP , \$procmux$3010_CMP , \$procmux$3008_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16740 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16741  (
    .A({ \$procmux$3107_CMP , \$procmux$3092_CMP , \$procmux$3084_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16743  (
    .A({ \$procmux$3171_CMP , \$procmux$3153_CMP , \$procmux$3142_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16744 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18416  (
    .A({ \$procmux$3092_CMP , \$procmux$3084_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18417 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18418  (
    .A({ \$procmux$3153_CMP , \$procmux$3142_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18419 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3007  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16740 ),
    .Y(\$procmux$3007_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3008_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$3008_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3009_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$3009_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3010_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$3010_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3011_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$3011_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3029  (
    .A(\$procmux$3007_Y ),
    .B(\$procmux$3042_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3034  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16726 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$16734 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3039  (
    .A(receiver_phase_req),
    .B(\$procmux$3058_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3042  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16728 ),
    .Y(\$procmux$3042_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3043_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$3043_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3044_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$3044_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3045_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$3045_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3046_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$3046_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3058  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$3044_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16738  }),
    .Y(\$procmux$3058_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3071_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$3071_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3077_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$3077_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3084_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$3084_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3092_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$3092_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3107_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$3107_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3115  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$12 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3129  (
    .A(\$initiator_state_d$12 [1:0]),
    .B(2'h3),
    .S(\$10 ),
    .Y(\$initiator_state_d$13 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3142_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$3142_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3153_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$3153_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3171_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$3171_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3199  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$3 ),
    .Y(\$initiator_state_d$6 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$3205  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }),
    .S({ \$procmux$3171_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18419 , \$procmux$3107_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18417 , \$procmux$3077_CMP , \$procmux$3071_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3222_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$3222_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$3287  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16744 , initiator_clear_out, \$procmux$3077_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17466 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17468 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17470 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17472 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17474 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17476 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17478 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17480 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17482 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17484 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16746 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16748 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16754 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16758 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16760 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16764 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18421 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18423 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$2713_Y ;
  wire \$procmux$2714_CMP ;
  wire \$procmux$2715_CMP ;
  wire \$procmux$2716_CMP ;
  wire \$procmux$2717_CMP ;
  wire \$procmux$2748_Y ;
  wire \$procmux$2749_CMP ;
  wire \$procmux$2750_CMP ;
  wire \$procmux$2751_CMP ;
  wire \$procmux$2752_CMP ;
  wire \$procmux$2764_Y ;
  wire \$procmux$2777_CMP ;
  wire \$procmux$2783_CMP ;
  wire \$procmux$2790_CMP ;
  wire \$procmux$2798_CMP ;
  wire \$procmux$2813_CMP ;
  wire \$procmux$2848_CMP ;
  wire \$procmux$2859_CMP ;
  wire \$procmux$2877_CMP ;
  wire \$procmux$2928_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17464  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$31 ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17465  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17484 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17467  (
    .A({ \$procmux$2877_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17466 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17469  (
    .A({ \$procmux$2813_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17468 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17471  (
    .A({ \$procmux$2928_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17470 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17473  (
    .A({ \$procmux$2859_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17472 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17475  (
    .A({ \$procmux$2798_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17474 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17477  (
    .A({ \$procmux$2777_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17476 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17479  (
    .A({ \$procmux$2783_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17478 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17481  (
    .A({ \$procmux$2790_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17480 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17483  (
    .A({ \$procmux$2848_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17482 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17485  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17466 , \$auto$opt_dff.cc:194:make_patterns_logic$17468 , \$auto$opt_dff.cc:194:make_patterns_logic$17470 , \$auto$opt_dff.cc:194:make_patterns_logic$17472 , \$auto$opt_dff.cc:194:make_patterns_logic$17474 , \$auto$opt_dff.cc:194:make_patterns_logic$17476 , \$auto$opt_dff.cc:194:make_patterns_logic$17478 , \$auto$opt_dff.cc:194:make_patterns_logic$17480 , \$auto$opt_dff.cc:194:make_patterns_logic$17482  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17484 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16745  (
    .A({ \$procmux$2716_CMP , \$procmux$2715_CMP , \$procmux$2714_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16746 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16747  (
    .A({ \$procmux$2752_CMP , \$procmux$2751_CMP , \$procmux$2749_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16748 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16751  (
    .A({ \$procmux$2877_CMP , \$procmux$2859_CMP , \$procmux$2848_CMP , \$procmux$2813_CMP , \$procmux$2798_CMP , \$procmux$2790_CMP , \$procmux$2783_CMP , \$procmux$2777_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16753  (
    .A({ \$procmux$2751_CMP , \$procmux$2750_CMP , \$procmux$2749_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16754 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16755  (
    .A({ \$procmux$2877_CMP , \$procmux$2848_CMP , \$procmux$2813_CMP , \$procmux$2790_CMP , \$procmux$2783_CMP , \$procmux$2777_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16757  (
    .A({ \$procmux$2752_CMP , \$procmux$2749_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16758 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16759  (
    .A({ \$procmux$2717_CMP , \$procmux$2716_CMP , \$procmux$2714_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16760 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16761  (
    .A({ \$procmux$2813_CMP , \$procmux$2798_CMP , \$procmux$2790_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16763  (
    .A({ \$procmux$2877_CMP , \$procmux$2859_CMP , \$procmux$2848_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16764 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18420  (
    .A({ \$procmux$2798_CMP , \$procmux$2790_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18421 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18422  (
    .A({ \$procmux$2859_CMP , \$procmux$2848_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18423 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2713  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16760 ),
    .Y(\$procmux$2713_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2714_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2714_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2715_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2715_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2716_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$2716_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2717_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2717_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2735  (
    .A(\$procmux$2713_Y ),
    .B(\$procmux$2748_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2740  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16746 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$16754 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2745  (
    .A(receiver_phase_req),
    .B(\$procmux$2764_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2748  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16748 ),
    .Y(\$procmux$2748_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2749_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2749_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2750_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2750_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2751_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$2751_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2752_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2752_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2764  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$2750_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16758  }),
    .Y(\$procmux$2764_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2777_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2777_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2783_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$2783_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2790_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$2790_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2798_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$2798_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2813_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$2813_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2821  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$12 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2835  (
    .A(\$initiator_state_d$12 [1:0]),
    .B(2'h3),
    .S(\$10 ),
    .Y(\$initiator_state_d$13 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2848_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$2848_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2859_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$2859_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2877_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$2877_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$2905  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$3 ),
    .Y(\$initiator_state_d$6 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$2911  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }),
    .S({ \$procmux$2877_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18423 , \$procmux$2813_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18421 , \$procmux$2783_CMP , \$procmux$2777_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2928_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2928_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2993  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16764 , initiator_clear_out, \$procmux$2783_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$10 ;
  wire \$3 ;
  wire \$31 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17488 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17490 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17492 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17494 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17496 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17498 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17500 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17502 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17504 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17506 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16766 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16768 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16774 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16778 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16780 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16784 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18425 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18427 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$12 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$13 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$6 ;
  wire \$procmux$2419_Y ;
  wire \$procmux$2420_CMP ;
  wire \$procmux$2421_CMP ;
  wire \$procmux$2422_CMP ;
  wire \$procmux$2423_CMP ;
  wire \$procmux$2454_Y ;
  wire \$procmux$2455_CMP ;
  wire \$procmux$2456_CMP ;
  wire \$procmux$2457_CMP ;
  wire \$procmux$2458_CMP ;
  wire \$procmux$2470_Y ;
  wire \$procmux$2483_CMP ;
  wire \$procmux$2489_CMP ;
  wire \$procmux$2496_CMP ;
  wire \$procmux$2504_CMP ;
  wire \$procmux$2519_CMP ;
  wire \$procmux$2554_CMP ;
  wire \$procmux$2565_CMP ;
  wire \$procmux$2583_CMP ;
  wire \$procmux$2634_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$31 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$10 )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17486  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$31 ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17487  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17506 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17489  (
    .A({ \$procmux$2583_CMP , initiator_phase_transition_ack, isolate_ack_i, \$3  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17488 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17491  (
    .A({ \$procmux$2519_CMP , initiator_phase_transition_ack, clear_ack_i, \$10  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17490 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17493  (
    .A({ \$procmux$2634_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17492 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17495  (
    .A({ \$procmux$2565_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17494 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17497  (
    .A({ \$procmux$2504_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17496 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17499  (
    .A({ \$procmux$2483_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17498 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17501  (
    .A({ \$procmux$2489_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17500 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17503  (
    .A({ \$procmux$2496_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17502 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17505  (
    .A({ \$procmux$2554_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17504 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17507  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17492 , \$auto$opt_dff.cc:194:make_patterns_logic$17488 , \$auto$opt_dff.cc:194:make_patterns_logic$17490 , \$auto$opt_dff.cc:194:make_patterns_logic$17494 , \$auto$opt_dff.cc:194:make_patterns_logic$17496 , \$auto$opt_dff.cc:194:make_patterns_logic$17498 , \$auto$opt_dff.cc:194:make_patterns_logic$17500 , \$auto$opt_dff.cc:194:make_patterns_logic$17502 , \$auto$opt_dff.cc:194:make_patterns_logic$17504  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17506 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16765  (
    .A({ \$procmux$2422_CMP , \$procmux$2421_CMP , \$procmux$2420_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16766 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16767  (
    .A({ \$procmux$2458_CMP , \$procmux$2457_CMP , \$procmux$2455_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16768 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16771  (
    .A({ \$procmux$2583_CMP , \$procmux$2565_CMP , \$procmux$2554_CMP , \$procmux$2519_CMP , \$procmux$2504_CMP , \$procmux$2496_CMP , \$procmux$2489_CMP , \$procmux$2483_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16773  (
    .A({ \$procmux$2457_CMP , \$procmux$2456_CMP , \$procmux$2455_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16774 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16775  (
    .A({ \$procmux$2583_CMP , \$procmux$2554_CMP , \$procmux$2519_CMP , \$procmux$2496_CMP , \$procmux$2489_CMP , \$procmux$2483_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16777  (
    .A({ \$procmux$2458_CMP , \$procmux$2455_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16778 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16779  (
    .A({ \$procmux$2423_CMP , \$procmux$2422_CMP , \$procmux$2420_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16780 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16781  (
    .A({ \$procmux$2519_CMP , \$procmux$2504_CMP , \$procmux$2496_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16783  (
    .A({ \$procmux$2583_CMP , \$procmux$2565_CMP , \$procmux$2554_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16784 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18424  (
    .A({ \$procmux$2504_CMP , \$procmux$2496_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18425 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18426  (
    .A({ \$procmux$2565_CMP , \$procmux$2554_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18427 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2419  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16780 ),
    .Y(\$procmux$2419_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2420_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$2420_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2421_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$2421_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2422_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$2422_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2423_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$2423_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2441  (
    .A(\$procmux$2419_Y ),
    .B(\$procmux$2454_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2446  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16766 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$16774 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2451  (
    .A(receiver_phase_req),
    .B(\$procmux$2470_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2454  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16768 ),
    .Y(\$procmux$2454_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2455_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$2455_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2456_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$2456_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2457_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$2457_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2458_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$2458_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$2470  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$2456_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16778  }),
    .Y(\$procmux$2470_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2483_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$2483_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2489_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$2489_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2496_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$2496_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2504_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$2504_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2519_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$2519_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2527  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$12 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2541  (
    .A(\$initiator_state_d$12 [1:0]),
    .B(2'h3),
    .S(\$10 ),
    .Y(\$initiator_state_d$13 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2554_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$2554_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2565_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$2565_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2583_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$2583_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$2611  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$3 ),
    .Y(\$initiator_state_d$6 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$2617  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$6 [2:0], 6'h11, \$initiator_state_d$13 [1:0], 12'h780 }),
    .S({ \$procmux$2583_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18427 , \$procmux$2519_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18425 , \$procmux$2489_CMP , \$procmux$2483_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2634_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$2634_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$2699  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16784 , initiator_clear_out, \$procmux$2489_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$12 [3:2] = 2'h1;
  assign \$initiator_state_d$13 [3:2] = 2'h1;
  assign \$initiator_state_d$6 [3] = 1'h0;
endmodule

/* src = "rtl/core_wrap.sv:8.8" */
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o
, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i);
  /* src = "rtl/core_wrap.sv:17.23" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/core_wrap.sv:9.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/core_wrap.sv:44.23" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/core_wrap.sv:33.23" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/core_wrap.sv:32.23" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/core_wrap.sv:36.23" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/core_wrap.sv:29.23" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/core_wrap.sv:35.23" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/core_wrap.sv:28.23" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/core_wrap.sv:30.23" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/core_wrap.sv:34.23" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/core_wrap.sv:31.23" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/core_wrap.sv:39.23" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/core_wrap.sv:42.23" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/core_wrap.sv:48.15" */
  wire [31:0] ibex_boot_addr;
  /* src = "rtl/core_wrap.sv:23.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/core_wrap.sv:25.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/core_wrap.sv:21.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/core_wrap.sv:24.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/core_wrap.sv:20.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/core_wrap.sv:22.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/core_wrap.sv:14.22" */
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  /* src = "rtl/core_wrap.sv:11.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/core_wrap.sv:10.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/core_wrap.sv:12.16" */
  input test_enable_i;
  wire test_enable_i;
  /* src = "rtl/core_wrap.sv:15.15" */
  input timer0_irq_i;
  wire timer0_irq_i;
  /* src = "rtl/core_wrap.sv:68.5" */
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
  assign ibex_boot_addr = { boot_addr_i[31:8], 8'h00 };
endmodule

/* top =  1  */
/* src = "rtl/croc_chip.sv:8.8" */
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  /* src = "rtl/croc_chip.sv:9.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_chip.sv:22.15" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_chip.sv:25.15" */
  inout gpio0_io;
  wire gpio0_io;
  /* src = "rtl/croc_chip.sv:35.15" */
  inout gpio10_io;
  wire gpio10_io;
  /* src = "rtl/croc_chip.sv:36.15" */
  inout gpio11_io;
  wire gpio11_io;
  /* src = "rtl/croc_chip.sv:37.15" */
  inout gpio12_io;
  wire gpio12_io;
  /* src = "rtl/croc_chip.sv:38.15" */
  inout gpio13_io;
  wire gpio13_io;
  /* src = "rtl/croc_chip.sv:39.15" */
  inout gpio14_io;
  wire gpio14_io;
  /* src = "rtl/croc_chip.sv:40.15" */
  inout gpio15_io;
  wire gpio15_io;
  /* src = "rtl/croc_chip.sv:41.15" */
  inout gpio16_io;
  wire gpio16_io;
  /* src = "rtl/croc_chip.sv:42.15" */
  inout gpio17_io;
  wire gpio17_io;
  /* src = "rtl/croc_chip.sv:43.15" */
  inout gpio18_io;
  wire gpio18_io;
  /* src = "rtl/croc_chip.sv:44.15" */
  inout gpio19_io;
  wire gpio19_io;
  /* src = "rtl/croc_chip.sv:26.15" */
  inout gpio1_io;
  wire gpio1_io;
  /* src = "rtl/croc_chip.sv:45.15" */
  inout gpio20_io;
  wire gpio20_io;
  /* src = "rtl/croc_chip.sv:46.15" */
  inout gpio21_io;
  wire gpio21_io;
  /* src = "rtl/croc_chip.sv:47.15" */
  inout gpio22_io;
  wire gpio22_io;
  /* src = "rtl/croc_chip.sv:48.15" */
  inout gpio23_io;
  wire gpio23_io;
  /* src = "rtl/croc_chip.sv:49.15" */
  inout gpio24_io;
  wire gpio24_io;
  /* src = "rtl/croc_chip.sv:50.15" */
  inout gpio25_io;
  wire gpio25_io;
  /* src = "rtl/croc_chip.sv:51.15" */
  inout gpio26_io;
  wire gpio26_io;
  /* src = "rtl/croc_chip.sv:52.15" */
  inout gpio27_io;
  wire gpio27_io;
  /* src = "rtl/croc_chip.sv:53.15" */
  inout gpio28_io;
  wire gpio28_io;
  /* src = "rtl/croc_chip.sv:54.15" */
  inout gpio29_io;
  wire gpio29_io;
  /* src = "rtl/croc_chip.sv:27.15" */
  inout gpio2_io;
  wire gpio2_io;
  /* src = "rtl/croc_chip.sv:55.15" */
  inout gpio30_io;
  wire gpio30_io;
  /* src = "rtl/croc_chip.sv:56.15" */
  inout gpio31_io;
  wire gpio31_io;
  /* src = "rtl/croc_chip.sv:28.15" */
  inout gpio3_io;
  wire gpio3_io;
  /* src = "rtl/croc_chip.sv:29.15" */
  inout gpio4_io;
  wire gpio4_io;
  /* src = "rtl/croc_chip.sv:30.15" */
  inout gpio5_io;
  wire gpio5_io;
  /* src = "rtl/croc_chip.sv:31.15" */
  inout gpio6_io;
  wire gpio6_io;
  /* src = "rtl/croc_chip.sv:32.15" */
  inout gpio7_io;
  wire gpio7_io;
  /* src = "rtl/croc_chip.sv:33.15" */
  inout gpio8_io;
  wire gpio8_io;
  /* src = "rtl/croc_chip.sv:34.15" */
  inout gpio9_io;
  wire gpio9_io;
  /* src = "rtl/croc_chip.sv:13.15" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_chip.sv:16.15" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:17.15" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:15.15" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_chip.sv:14.15" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:11.15" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_chip.sv:10.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_chip.sv:62.11" */
  wire soc_clk_i;
  /* src = "rtl/croc_chip.sv:73.11" */
  wire soc_fetch_en_i;
  /* src = "rtl/croc_chip.sv:78.27" */
  wire [31:0] soc_gpio_i;
  /* src = "rtl/croc_chip.sv:79.27" */
  wire [31:0] soc_gpio_o;
  /* src = "rtl/croc_chip.sv:80.27" */
  wire [31:0] soc_gpio_out_en_o;
  /* src = "rtl/croc_chip.sv:67.11" */
  wire soc_jtag_tck_i;
  /* src = "rtl/croc_chip.sv:70.11" */
  wire soc_jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:71.11" */
  wire soc_jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:69.11" */
  wire soc_jtag_tms_i;
  /* src = "rtl/croc_chip.sv:68.11" */
  wire soc_jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:64.11" */
  wire soc_ref_clk_i;
  /* src = "rtl/croc_chip.sv:63.11" */
  wire soc_rst_ni;
  /* src = "rtl/croc_chip.sv:74.11" */
  wire soc_status_o;
  /* src = "rtl/croc_chip.sv:85.12" */
  wire soc_testmode_i;
  /* src = "rtl/croc_chip.sv:93.70" */
  wire soc_uart_rx_i;
  /* src = "rtl/croc_chip.sv:94.70" */
  wire soc_uart_tx_o;
  /* src = "rtl/croc_chip.sv:23.15" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_chip.sv:19.15" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_chip.sv:20.15" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_chip.sv:57.15" */
  output unused0_o;
  wire unused0_o;
  /* src = "rtl/croc_chip.sv:58.15" */
  output unused1_o;
  wire unused1_o;
  /* src = "rtl/croc_chip.sv:59.15" */
  output unused2_o;
  wire unused2_o;
  /* src = "rtl/croc_chip.sv:60.15" */
  output unused3_o;
  wire unused3_o;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_chip.sv:159.3" */
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:82.27" */
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  /* src = "rtl/croc_chip.sv:96.27" */
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  /* src = "rtl/croc_chip.sv:99.27" */
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  /* src = "rtl/croc_chip.sv:109.27" */
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  /* src = "rtl/croc_chip.sv:110.27" */
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  /* src = "rtl/croc_chip.sv:111.27" */
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  /* src = "rtl/croc_chip.sv:112.27" */
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  /* src = "rtl/croc_chip.sv:113.27" */
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  /* src = "rtl/croc_chip.sv:114.27" */
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  /* src = "rtl/croc_chip.sv:115.27" */
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  /* src = "rtl/croc_chip.sv:116.27" */
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  /* src = "rtl/croc_chip.sv:117.27" */
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  /* src = "rtl/croc_chip.sv:118.27" */
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  /* src = "rtl/croc_chip.sv:100.27" */
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  /* src = "rtl/croc_chip.sv:119.27" */
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  /* src = "rtl/croc_chip.sv:120.27" */
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  /* src = "rtl/croc_chip.sv:121.27" */
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  /* src = "rtl/croc_chip.sv:122.27" */
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  /* src = "rtl/croc_chip.sv:123.27" */
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  /* src = "rtl/croc_chip.sv:124.27" */
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  /* src = "rtl/croc_chip.sv:125.27" */
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  /* src = "rtl/croc_chip.sv:126.27" */
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  /* src = "rtl/croc_chip.sv:127.27" */
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  /* src = "rtl/croc_chip.sv:128.27" */
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  /* src = "rtl/croc_chip.sv:101.27" */
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  /* src = "rtl/croc_chip.sv:129.27" */
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  /* src = "rtl/croc_chip.sv:130.27" */
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  /* src = "rtl/croc_chip.sv:102.27" */
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  /* src = "rtl/croc_chip.sv:103.27" */
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  /* src = "rtl/croc_chip.sv:104.27" */
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  /* src = "rtl/croc_chip.sv:105.27" */
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  /* src = "rtl/croc_chip.sv:106.27" */
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  /* src = "rtl/croc_chip.sv:107.27" */
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  /* src = "rtl/croc_chip.sv:108.27" */
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  /* src = "rtl/croc_chip.sv:87.27" */
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  /* src = "rtl/croc_chip.sv:90.27" */
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  /* src = "rtl/croc_chip.sv:91.27" */
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  /* src = "rtl/croc_chip.sv:89.27" */
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  /* src = "rtl/croc_chip.sv:88.27" */
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  /* src = "rtl/croc_chip.sv:84.27" */
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  /* src = "rtl/croc_chip.sv:83.27" */
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  /* src = "rtl/croc_chip.sv:97.27" */
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  /* src = "rtl/croc_chip.sv:93.27" */
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  /* src = "rtl/croc_chip.sv:94.27" */
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:131.25" */
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  /* src = "rtl/croc_chip.sv:132.25" */
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  /* src = "rtl/croc_chip.sv:133.25" */
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  /* src = "rtl/croc_chip.sv:134.25" */
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:136.46" */
  sg13g2_IOPadVdd pad_vdd0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:137.46" */
  sg13g2_IOPadVdd pad_vdd1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:138.46" */
  sg13g2_IOPadVdd pad_vdd2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:139.46" */
  sg13g2_IOPadVdd pad_vdd3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:146.48" */
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:147.48" */
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:148.48" */
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:149.48" */
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:141.46" */
  sg13g2_IOPadVss pad_vss0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:142.46" */
  sg13g2_IOPadVss pad_vss1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:143.46" */
  sg13g2_IOPadVss pad_vss2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:144.46" */
  sg13g2_IOPadVss pad_vss3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:151.48" */
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:152.48" */
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:153.48" */
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:154.48" */
  sg13g2_IOPadIOVss pad_vssio3 (
  );
  assign soc_testmode_i = 1'h0;
endmodule

/* src = "rtl/croc_domain.sv:8.8" */
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, testmode_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o, interrupts_i
, core_busy_o);
  wire \$2 ;
  wire \$6 ;
  wire \$8 ;
  /* src = "rtl/croc_domain.sv:133.34" */
  /* unused_bits = "75 149 223 371" */
  wire [443:0] all_periph_obi_req;
  /* src = "rtl/croc_domain.sv:134.34" */
  wire [233:0] all_periph_obi_rsp;
  /* src = "rtl/croc_domain.sv:97.34" */
  wire [369:0] all_sbr_obi_req;
  /* src = "rtl/croc_domain.sv:98.34" */
  wire [194:0] all_sbr_obi_rsp;
  /* src = "rtl/croc_domain.sv:52.16" */
  wire [31:0] boot_addr;
  /* src = "rtl/croc_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_domain.sv:43.16" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/croc_domain.sv:82.17" */
  wire [71:0] core_data_obi_req;
  /* src = "rtl/croc_domain.sv:83.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_data_obi_rsp;
  /* src = "rtl/croc_domain.sv:73.17" */
  wire [71:0] core_instr_obi_req;
  /* src = "rtl/croc_domain.sv:74.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_instr_obi_rsp;
  /* src = "rtl/croc_domain.sv:141.17" */
  /* unused_bits = "1" */
  wire [73:0] dbg_mem_obi_req;
  /* src = "rtl/croc_domain.sv:142.17" */
  wire [38:0] dbg_mem_obi_rsp;
  /* src = "rtl/croc_domain.sv:88.17" */
  wire [71:0] dbg_req_obi_req;
  /* src = "rtl/croc_domain.sv:89.17" */
  /* unused_bits = "2 4" */
  wire [36:0] dbg_req_obi_rsp;
  /* src = "rtl/croc_domain.sv:50.9" */
  wire debug_req;
  /* src = "rtl/croc_domain.sv:228.17" */
  wire [40:0] dmi_req;
  /* src = "rtl/croc_domain.sv:227.35" */
  wire dmi_req_ready;
  /* src = "rtl/croc_domain.sv:227.20" */
  wire dmi_req_valid;
  /* src = "rtl/croc_domain.sv:229.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/croc_domain.sv:227.66" */
  wire dmi_resp_ready;
  /* src = "rtl/croc_domain.sv:227.50" */
  wire dmi_resp_valid;
  /* src = "rtl/croc_domain.sv:227.9" */
  wire dmi_rst_n;
  /* src = "rtl/croc_domain.sv:137.17" */
  wire [73:0] error_obi_req;
  /* src = "rtl/croc_domain.sv:138.17" */
  wire [38:0] error_obi_rsp;
  /* src = "rtl/croc_domain.sv:15.21" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_domain.sv:51.9" */
  wire fetch_enable;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[0].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[0].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[0].bank_req ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[0].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[0].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[1].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[1].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[1].bank_req ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[1].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[1].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:26.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_domain.sv:30.32" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/croc_domain.sv:56.9" */
  wire gpio_irq;
  /* src = "rtl/croc_domain.sv:27.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_domain.sv:153.17" */
  wire [73:0] gpio_obi_req;
  /* src = "rtl/croc_domain.sv:154.17" */
  wire [38:0] gpio_obi_rsp;
  /* src = "rtl/croc_domain.sv:28.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/croc_domain.sv:225.18" */
  wire [31:0] hartinfo;
  wire [6:0] interrupts;
  /* src = "rtl/croc_domain.sv:42.38" */
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  /* src = "rtl/croc_domain.sv:17.21" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_domain.sv:18.21" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_domain.sv:19.21" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_domain.sv:20.21" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_domain.sv:21.21" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_domain.sv:418.50" */
  wire [2:0] periph_idx;
  /* src = "rtl/croc_domain.sv:13.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_domain.sv:12.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_domain.sv:503.39" */
  wire [3:0] soc_ctrl_hw2reg;
  /* src = "rtl/croc_domain.sv:145.17" */
  /* unused_bits = "1" */
  wire [73:0] soc_ctrl_obi_req;
  /* src = "rtl/croc_domain.sv:146.17" */
  wire [38:0] soc_ctrl_obi_rsp;
  /* src = "rtl/croc_domain.sv:502.39" */
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [66:0] soc_ctrl_reg2hw;
  /* src = "rtl/croc_domain.sv:470.13" */
  wire [69:0] soc_ctrl_reg_req;
  /* src = "rtl/croc_domain.sv:471.13" */
  wire [33:0] soc_ctrl_reg_rsp;
  /* src = "rtl/croc_domain.sv:49.9" */
  wire sram_impl;
  /* src = "rtl/croc_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_domain.sv:57.9" */
  wire timer0_irq0;
  /* src = "rtl/croc_domain.sv:58.9" */
  wire timer0_irq1;
  /* src = "rtl/croc_domain.sv:157.17" */
  /* unused_bits = "1" */
  wire [73:0] timer_obi_req;
  /* src = "rtl/croc_domain.sv:158.17" */
  wire [38:0] timer_obi_rsp;
  /* src = "rtl/croc_domain.sv:55.9" */
  wire uart_irq;
  /* src = "rtl/croc_domain.sv:149.17" */
  /* unused_bits = "1" */
  wire [73:0] uart_obi_req;
  /* src = "rtl/croc_domain.sv:150.17" */
  wire [38:0] uart_obi_rsp;
  /* src = "rtl/croc_domain.sv:524.13" */
  wire [69:0] uart_reg_req;
  /* src = "rtl/croc_domain.sv:525.13" */
  wire [33:0] uart_reg_rsp;
  /* src = "rtl/croc_domain.sv:23.21" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_domain.sv:24.21" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_domain.sv:39.24" */
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  /* src = "rtl/croc_domain.sv:40.24" */
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  /* src = "rtl/croc_domain.sv:35.24" */
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  /* src = "rtl/croc_domain.sv:36.24" */
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  /* src = "rtl/croc_domain.sv:111.17" */
  wire [73:0] xbar_error_obi_req;
  /* src = "rtl/croc_domain.sv:112.17" */
  wire [38:0] xbar_error_obi_rsp;
  /* src = "rtl/croc_domain.sv:103.36" */
  wire [147:0] xbar_mem_bank_obi_req;
  /* src = "rtl/croc_domain.sv:104.36" */
  wire [77:0] xbar_mem_bank_obi_rsp;
  /* src = "rtl/croc_domain.sv:107.17" */
  wire [73:0] xbar_periph_obi_req;
  /* src = "rtl/croc_domain.sv:108.17" */
  wire [38:0] xbar_periph_obi_rsp;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(all_periph_obi_req[189]),
    .Y(\$2 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(soc_ctrl_reg2hw[34]),
    .B(fetch_en_i),
    .Y(fetch_enable)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(all_periph_obi_req[263]),
    .Y(\$6 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(all_periph_obi_req[411]),
    .Y(\$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:426.5" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:179.5" */
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  /* src = "rtl/croc_domain.sv:258.5" */
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:233.5" */
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:584.5" */
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:323.5" */
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/croc_domain.sv:442.5" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  /* src = "rtl/croc_domain.sv:461.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:513.5" */
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:480.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$2 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:599.5" */
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:559.5" */
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  /* src = "rtl/croc_domain.sv:534.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$6 )
  );
  /* src = "rtl/croc_domain.sv:404.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign boot_addr = soc_ctrl_reg2hw[66:35];
  assign core_data_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign dbg_mem_obi_req = all_periph_obi_req[147:74];
  assign dbg_mem_obi_rsp = { all_periph_obi_rsp[77:43], 2'h0, all_periph_obi_rsp[40:39] };
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign error_obi_req = all_periph_obi_req[73:0];
  assign \gen_sram_bank[0].bank_gnt  = 1'h1;
  assign \gen_sram_bank[0].bank_word_addr  = \gen_sram_bank[0].bank_byte_addr [10:2];
  assign \gen_sram_bank[1].bank_gnt  = 1'h1;
  assign \gen_sram_bank[1].bank_word_addr  = \gen_sram_bank[1].bank_byte_addr [10:2];
  assign gpio_obi_req = all_periph_obi_req[369:296];
  assign hartinfo = 32'd2171776;
  assign interrupts = { interrupts_i, gpio_irq, uart_irq, timer0_irq1 };
  assign soc_ctrl_hw2reg = 4'h0;
  assign soc_ctrl_obi_req = all_periph_obi_req[221:148];
  assign soc_ctrl_obi_rsp = { all_periph_obi_rsp[116:81], 1'h0, all_periph_obi_rsp[79:78] };
  assign sram_impl = soc_ctrl_reg2hw[0];
  assign timer_obi_req = all_periph_obi_req[443:370];
  assign timer_obi_rsp = { all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195] };
  assign uart_obi_req = all_periph_obi_req[295:222];
  assign uart_obi_rsp = { all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:117] };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
  assign xbar_error_obi_req = all_sbr_obi_req[73:0];
  assign xbar_mem_bank_obi_req = all_sbr_obi_req[295:148];
  assign xbar_mem_bank_obi_rsp = all_sbr_obi_rsp[155:78];
  assign xbar_periph_obi_req = all_sbr_obi_req[147:74];
endmodule

/* src = "rtl/croc_soc.sv:8.8" */
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, testmode_i, gpio_i, gpio_o, gpio_out_en_o);
  /* src = "rtl/croc_soc.sv:11.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_soc.sv:15.16" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_soc.sv:27.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_soc.sv:61.23" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/croc_soc.sv:28.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_soc.sv:29.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/croc_soc.sv:60.29" */
  wire [3:0] interrupts;
  /* src = "rtl/croc_soc.sv:18.16" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_soc.sv:19.16" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_soc.sv:20.16" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_soc.sv:21.16" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_soc.sv:22.16" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_soc.sv:13.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_soc.sv:12.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_soc.sv:16.16" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_soc.sv:32.23" */
  wire synced_fetch_en;
  /* src = "rtl/croc_soc.sv:32.9" */
  wire synced_rst_n;
  /* src = "rtl/croc_soc.sv:14.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_soc.sv:24.16" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_soc.sv:25.16" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_soc.sv:57.15" */
  wire [71:0] user_mgr_obi_req;
  /* src = "rtl/croc_soc.sv:58.15" */
  wire [36:0] user_mgr_obi_rsp;
  /* src = "rtl/croc_soc.sv:53.15" */
  wire [73:0] user_sbr_obi_req;
  /* src = "rtl/croc_soc.sv:54.15" */
  wire [38:0] user_sbr_obi_rsp;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:65.3" */
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:45.7" */
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  /* src = "rtl/croc_soc.sv:34.10" */
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:99.3" */
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

/* src = "rtl/cve2/cve2_alu.sv:9.8" */
module \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$16 ;
  wire \$20 ;
  wire \$22 ;
  wire \$26 ;
  wire \$28 ;
  wire \$58 ;
  wire \$74 ;
  wire \$76 ;
  wire \$80 ;
  wire \$82 ;
  wire [5:0] \$auto$wreduce.cc:514:run$16931 ;
  wire [7:0] \$procmux$3889_CMP ;
  wire \$procmux$3889_CTRL ;
  wire [4:0] \$procmux$3890_CMP ;
  wire \$procmux$3890_CTRL ;
  wire [4:0] \$procmux$3891_CMP ;
  wire \$procmux$3891_CTRL ;
  wire \$procmux$3892_CTRL ;
  wire [5:0] \$procmux$3917_CMP ;
  wire \$procmux$3917_CTRL ;
  wire [3:0] \$procmux$3918_CMP ;
  wire \$procmux$3918_CTRL ;
  /* src = "rtl/cve2/cve2_alu.sv:52.16" */
  wire [32:0] adder_in_a;
  /* src = "rtl/cve2/cve2_alu.sv:52.28" */
  wire [32:0] adder_in_b;
  /* src = "rtl/cve2/cve2_alu.sv:48.16" */
  wire adder_op_a_shift1;
  /* src = "rtl/cve2/cve2_alu.sv:49.16" */
  wire adder_op_a_shift2;
  /* src = "rtl/cve2/cve2_alu.sv:50.16" */
  wire adder_op_a_shift3;
  /* src = "rtl/cve2/cve2_alu.sv:51.16" */
  wire adder_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:53.16" */
  wire [31:0] adder_result;
  /* src = "rtl/cve2/cve2_alu.sv:28.29" */
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  /* src = "rtl/cve2/cve2_alu.sv:27.29" */
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  wire [3:0] bfp_len;
  /* src = "rtl/cve2/cve2_alu.sv:261.16" */
  wire [31:0] bfp_mask;
  /* src = "rtl/cve2/cve2_alu.sv:262.16" */
  wire [31:0] bfp_mask_rev;
  /* src = "rtl/cve2/cve2_alu.sv:260.16" */
  wire [4:0] bfp_off;
  /* src = "rtl/cve2/cve2_alu.sv:258.9" */
  wire bfp_op;
  /* src = "rtl/cve2/cve2_alu.sv:263.16" */
  wire [31:0] bfp_result;
  /* src = "rtl/cve2/cve2_alu.sv:399.16" */
  wire [5:0] bitcnt_result;
  /* src = "rtl/cve2/cve2_alu.sv:407.16" */
  wire [31:0] butterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:362.9" */
  wire bwlogic_and;
  /* src = "rtl/cve2/cve2_alu.sv:365.16" */
  wire [31:0] bwlogic_and_result;
  /* src = "rtl/cve2/cve2_alu.sv:369.9" */
  wire bwlogic_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:363.16" */
  wire [31:0] bwlogic_operand_b;
  /* src = "rtl/cve2/cve2_alu.sv:361.9" */
  wire bwlogic_or;
  /* src = "rtl/cve2/cve2_alu.sv:364.16" */
  wire [31:0] bwlogic_or_result;
  /* src = "rtl/cve2/cve2_alu.sv:367.16" */
  wire [31:0] bwlogic_result;
  /* src = "rtl/cve2/cve2_alu.sv:366.16" */
  wire [31:0] bwlogic_xor_result;
  /* src = "rtl/cve2/cve2_alu.sv:409.16" */
  wire [31:0] clmul_result;
  /* src = "rtl/cve2/cve2_alu.sv:157.9" */
  wire cmp_result;
  /* src = "rtl/cve2/cve2_alu.sv:117.9" */
  wire cmp_signed;
  /* src = "rtl/cve2/cve2_alu.sv:31.29" */
  output comparison_result_o;
  wire comparison_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:1293.18" */
  wire [31:0] \g_no_alu_rvb.unused_butterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:1291.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63" */
  wire [63:0] \g_no_alu_rvb.unused_imd_val_q ;
  /* src = "rtl/cve2/cve2_alu.sv:1295.18" */
  wire [31:0] \g_no_alu_rvb.unused_invbutterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:24.29" */
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_alu.sv:23.29" */
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_alu.sv:25.29" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_alu.sv:16.29" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_alu.sv:408.16" */
  wire [31:0] invbutterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:115.9" */
  wire is_equal;
  /* src = "rtl/cve2/cve2_alu.sv:32.29" */
  output is_equal_result_o;
  wire is_equal_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:116.9" */
  wire is_greater_equal;
  /* src = "rtl/cve2/cve2_alu.sv:400.16" */
  wire [31:0] minmax_result;
  /* src = "rtl/cve2/cve2_alu.sv:18.29" */
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:19.29" */
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:21.29" */
  input multdiv_sel_i;
  wire multdiv_sel_i;
  /* src = "rtl/cve2/cve2_alu.sv:410.16" */
  wire [31:0] multicycle_result;
  /* src = "rtl/cve2/cve2_alu.sv:13.29" */
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:36.16" */
  wire [31:0] operand_a_rev;
  /* src = "rtl/cve2/cve2_alu.sv:14.29" */
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:37.16" */
  wire [32:0] operand_b_neg;
  /* src = "rtl/cve2/cve2_alu.sv:12.29" */
  input [6:0] operator_i;
  wire [6:0] operator_i;
  /* src = "rtl/cve2/cve2_alu.sv:401.16" */
  wire [31:0] pack_result;
  /* src = "rtl/cve2/cve2_alu.sv:30.29" */
  output [31:0] result_o;
  wire [31:0] result_o;
  /* src = "rtl/cve2/cve2_alu.sv:404.16" */
  wire [31:0] rev_result;
  /* src = "rtl/cve2/cve2_alu.sv:402.16" */
  wire [31:0] sext_result;
  wire [4:0] shift_amt;
  wire [4:0] shift_amt_compl;
  /* src = "rtl/cve2/cve2_alu.sv:244.15" */
  wire shift_arith;
  /* src = "rtl/cve2/cve2_alu.sv:245.15" */
  wire shift_funnel;
  /* src = "rtl/cve2/cve2_alu.sv:242.15" */
  wire shift_left;
  /* src = "rtl/cve2/cve2_alu.sv:243.15" */
  wire shift_ones;
  /* src = "rtl/cve2/cve2_alu.sv:250.23" */
  wire [31:0] shift_operand;
  /* src = "rtl/cve2/cve2_alu.sv:254.23" */
  wire [31:0] shift_result;
  wire [31:0] shift_result_ext;
  /* src = "rtl/cve2/cve2_alu.sv:251.23" */
  wire [32:0] shift_result_ext_signed;
  /* src = "rtl/cve2/cve2_alu.sv:255.23" */
  wire [31:0] shift_result_rev;
  /* src = "rtl/cve2/cve2_alu.sv:246.15" */
  wire shift_sbmode;
  /* src = "rtl/cve2/cve2_alu.sv:405.16" */
  wire [31:0] shuffle_result;
  /* src = "rtl/cve2/cve2_alu.sv:403.16" */
  wire [31:0] singlebit_result;
  /* src = "rtl/cve2/cve2_alu.sv:253.23" */
  wire unused_shift_result_ext;
  /* src = "rtl/cve2/cve2_alu.sv:406.16" */
  wire [31:0] xperm_result;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(adder_result_ext_o[32:1]),
    .Y(is_equal)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(operand_a_i[31]),
    .B(operand_b_i[31]),
    .Y(\$16 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(adder_result_ext_o[32]),
    .Y(\$20 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(operand_a_i[31]),
    .B(cmp_signed),
    .Y(\$22 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(is_equal),
    .Y(\$26 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(is_greater_equal),
    .Y(\$28 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$36  (
    .A(1'h0),
    .B(operand_b_i[4:0]),
    .Y(shift_amt_compl)
  );
  \$mux  #(
    .WIDTH(32'd5)
  ) \$45  (
    .A(shift_amt_compl),
    .B(operand_b_i[4:0]),
    .S(instr_first_cycle_i),
    .Y(shift_amt)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(operator_i),
    .B(4'h8),
    .Y(shift_arith)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$53  (
    .A(operand_a_i),
    .B({ operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] }),
    .S(shift_left),
    .Y(shift_operand)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(shift_arith),
    .B(shift_operand[31]),
    .Y(\$58 )
  );
  \$sshr  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd33),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$61  (
    .A({ \$58 , shift_operand }),
    .B(shift_amt),
    .Y(shift_result_ext)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$63  (
    .A(shift_result_ext),
    .B({ shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] }),
    .S(shift_left),
    .Y(shift_result)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$67  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_or_result)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$69  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_and_result)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$71  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_xor_result)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(operator_i),
    .B(2'h3),
    .Y(\$74 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(operator_i),
    .B(3'h6),
    .Y(\$76 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(\$74 ),
    .B(\$76 ),
    .Y(bwlogic_or)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(operator_i),
    .B(3'h4),
    .Y(\$80 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd33),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd34)
  ) \$8  (
    .A(adder_in_a),
    .B(adder_in_b),
    .Y(adder_result_ext_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(operator_i),
    .B(3'h7),
    .Y(\$82 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(\$80 ),
    .B(\$82 ),
    .Y(bwlogic_and)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17120  (
    .A(operand_b_i),
    .Y(operand_b_neg[32:1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$3888  (
    .A(32'd0),
    .B({ bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, comparison_result_o }),
    .S({ \$procmux$3892_CTRL , \$procmux$3891_CTRL , \$procmux$3890_CTRL , \$procmux$3889_CTRL  }),
    .Y(result_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_ANY  (
    .A(\$procmux$3889_CMP ),
    .Y(\$procmux$3889_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP0  (
    .A(operator_i),
    .B(5'h1d),
    .Y(\$procmux$3889_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP1  (
    .A(operator_i),
    .B(5'h1e),
    .Y(\$procmux$3889_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP2  (
    .A(operator_i),
    .B(5'h1b),
    .Y(\$procmux$3889_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP3  (
    .A(operator_i),
    .B(5'h1c),
    .Y(\$procmux$3889_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP4  (
    .A(operator_i),
    .B(5'h19),
    .Y(\$procmux$3889_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP5  (
    .A(operator_i),
    .B(5'h1a),
    .Y(\$procmux$3889_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP6  (
    .A(operator_i),
    .B(6'h2b),
    .Y(\$procmux$3889_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3889_CMP7  (
    .A(operator_i),
    .B(6'h2c),
    .Y(\$procmux$3889_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_ANY  (
    .A({ \$procmux$3890_CMP [4:3], \$procmux$3890_CMP [1], shift_arith, shift_left }),
    .Y(\$procmux$3890_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP0  (
    .A(operator_i),
    .B(4'ha),
    .Y(shift_left)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP1  (
    .A(operator_i),
    .B(4'h9),
    .Y(\$procmux$3890_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP3  (
    .A(operator_i),
    .B(4'hc),
    .Y(\$procmux$3890_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3890_CMP4  (
    .A(operator_i),
    .B(4'hb),
    .Y(\$procmux$3890_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_ANY  (
    .A(\$procmux$3891_CMP ),
    .Y(\$procmux$3891_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP0  (
    .A(operator_i),
    .Y(\$procmux$3891_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP1  (
    .A(operator_i),
    .B(1'h1),
    .Y(\$procmux$3891_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP2  (
    .A(operator_i),
    .B(5'h16),
    .Y(\$procmux$3891_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP3  (
    .A(operator_i),
    .B(5'h17),
    .Y(\$procmux$3891_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3891_CMP4  (
    .A(operator_i),
    .B(5'h18),
    .Y(\$procmux$3891_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_ANY  (
    .A({ \$auto$wreduce.cc:514:run$16931 [1:0], \$82 , \$76 , \$80 , \$74  }),
    .Y(\$procmux$3892_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP0  (
    .A(operator_i),
    .B(2'h2),
    .Y(\$auto$wreduce.cc:514:run$16931 [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3892_CMP1  (
    .A(operator_i),
    .B(3'h5),
    .Y(\$auto$wreduce.cc:514:run$16931 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:394.20-394.56|rtl/cve2/cve2_alu.sv:392.5-396.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$3894  (
    .A(bwlogic_xor_result),
    .B({ bwlogic_or_result, bwlogic_and_result }),
    .S({ bwlogic_or, bwlogic_and }),
    .Y(bwlogic_result)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3916  (
    .A(is_equal),
    .B({ \$26 , is_greater_equal, \$28  }),
    .S({ \$procmux$3889_CMP [1], \$procmux$3918_CTRL , \$procmux$3917_CTRL  }),
    .Y(comparison_result_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_ANY  (
    .A({ \$procmux$3917_CMP [3:2], \$procmux$3889_CMP [7:4] }),
    .Y(\$procmux$3917_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP2  (
    .A(operator_i),
    .B(5'h1f),
    .Y(\$procmux$3917_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3917_CMP3  (
    .A(operator_i),
    .B(6'h20),
    .Y(\$procmux$3917_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_ANY  (
    .A({ \$procmux$3918_CMP [3:2], \$procmux$3889_CMP [3:2] }),
    .Y(\$procmux$3918_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP2  (
    .A(operator_i),
    .B(6'h21),
    .Y(\$procmux$3918_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3918_CMP3  (
    .A(operator_i),
    .B(6'h22),
    .Y(\$procmux$3918_CMP [3])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:138.7-138.53|rtl/cve2/cve2_alu.sv:137.5-141.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3921  (
    .A(\$20 ),
    .B(\$22 ),
    .S(\$16 ),
    .Y(is_greater_equal)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3925_ANY  (
    .A({ \$procmux$3918_CMP [2], \$procmux$3917_CMP [2], \$procmux$3889_CMP [6], \$procmux$3889_CMP [4], \$procmux$3889_CMP [2] }),
    .Y(cmp_signed)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:99.26-99.53|rtl/cve2/cve2_alu.sv:97.5-101.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd33)
  ) \$procmux$3927  (
    .A({ operand_b_i, 1'h0 }),
    .B({ multdiv_operand_b_i, operand_b_neg[32:1], 1'h1 }),
    .S({ multdiv_sel_i, adder_op_b_negate }),
    .Y(adder_in_b)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:89.26-89.67|rtl/cve2/cve2_alu.sv:85.5-91.12" */
  \$mux  #(
    .WIDTH(32'd33)
  ) \$procmux$3931  (
    .A({ operand_a_i, 1'h1 }),
    .B(multdiv_operand_a_i),
    .S(multdiv_sel_i),
    .Y(adder_in_a)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd13),
    .Y_WIDTH(32'd1)
  ) \$procmux$3941_ANY  (
    .A({ \$procmux$3918_CMP [3:2], \$procmux$3917_CMP [3:2], \$procmux$3891_CMP [1], \$procmux$3889_CMP  }),
    .Y(adder_op_b_negate)
  );
  assign \$auto$wreduce.cc:514:run$16931 [5:2] = { \$82 , \$80 , \$76 , \$74  };
  assign { \$procmux$3890_CMP [2], \$procmux$3890_CMP [0] } = { shift_arith, shift_left };
  assign { \$procmux$3917_CMP [5:4], \$procmux$3917_CMP [1:0] } = \$procmux$3889_CMP [7:4];
  assign \$procmux$3918_CMP [1:0] = \$procmux$3889_CMP [3:2];
  assign adder_op_a_shift1 = 1'h0;
  assign adder_op_a_shift2 = 1'h0;
  assign adder_op_a_shift3 = 1'h0;
  assign adder_result = adder_result_ext_o[32:1];
  assign adder_result_o = adder_result_ext_o[32:1];
  assign bfp_len = operand_b_i[27:24];
  assign bfp_mask = 32'd0;
  assign bfp_mask_rev = 32'd0;
  assign bfp_off = operand_b_i[20:16];
  assign bfp_op = 1'h0;
  assign bfp_result = 32'd0;
  assign bitcnt_result = 6'h00;
  assign butterfly_result = 32'd0;
  assign bwlogic_op_b_negate = 1'h0;
  assign bwlogic_operand_b = operand_b_i;
  assign clmul_result = 32'd0;
  assign cmp_result = comparison_result_o;
  assign \g_no_alu_rvb.unused_butterfly_result  = 32'd0;
  assign \g_no_alu_rvb.unused_imd_val_q  = imd_val_q_i;
  assign \g_no_alu_rvb.unused_invbutterfly_result  = 32'd0;
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign invbutterfly_result = 32'd0;
  assign is_equal_result_o = is_equal;
  assign minmax_result = 32'd0;
  assign multicycle_result = 32'd0;
  assign operand_a_rev = { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] };
  assign operand_b_neg[0] = 1'h1;
  assign pack_result = 32'd0;
  assign rev_result = 32'd0;
  assign sext_result = 32'd0;
  assign shift_funnel = 1'h0;
  assign shift_ones = 1'h0;
  assign shift_result_ext_signed = { 1'hx, shift_result_ext };
  assign shift_result_rev = { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] };
  assign shift_sbmode = 1'h0;
  assign shuffle_result = 32'd0;
  assign singlebit_result = 32'd0;
  assign unused_shift_result_ext = 1'hx;
  assign xperm_result = 32'd0;
endmodule

/* src = "rtl/cve2/cve2_compressed_decoder.sv:16.8" */
module \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$12 ;
  wire \$2 ;
  wire \$27 ;
  wire \$32 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire [31:0] \$auto$wreduce.cc:514:run$16936 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  wire [31:0] \$auto$wreduce.cc:514:run$16937 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  wire [31:0] \$auto$wreduce.cc:514:run$16938 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire [31:0] \$auto$wreduce.cc:514:run$16939 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire \$illegal_instr_o$18 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire \$illegal_instr_o$20 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire \$illegal_instr_o$22 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire \$illegal_instr_o$37 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire \$illegal_instr_o$45 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire \$illegal_instr_o$47 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire \$illegal_instr_o$5 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  wire [31:0] \$instr_o$10 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire [31:0] \$instr_o$17 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire [31:0] \$instr_o$19 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire [31:0] \$instr_o$21 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire [31:0] \$instr_o$4 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire [31:0] \$instr_o$46 ;
  wire \$procmux$6895_CMP ;
  wire \$procmux$6897_CMP ;
  wire \$procmux$6985_CMP ;
  wire \$procmux$6996_CMP ;
  wire [3:0] \$procmux$7001_CMP ;
  wire \$procmux$7001_CTRL ;
  wire \$procmux$7013_CMP ;
  wire [3:0] \$procmux$7026_CMP ;
  wire \$procmux$7028_CMP ;
  wire \$procmux$7032_CMP ;
  wire \$procmux$7038_CMP ;
  wire \$procmux$7039_CMP ;
  wire \$procmux$7040_CMP ;
  wire \$procmux$7041_CMP ;
  wire \$procmux$7054_CMP ;
  wire [1:0] \$procmux$7056_CMP ;
  wire \$procmux$7056_CTRL ;
  wire \$procmux$7110_CTRL ;
  wire \$procmux$7117_CTRL ;
  wire \$procmux$7143_CMP ;
  wire \$procmux$7148_CTRL ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:17.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:23.23" */
  output illegal_instr_o;
  wire illegal_instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:20.23" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:21.23" */
  output [31:0] instr_o;
  wire [31:0] instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:22.23" */
  output is_compressed_o;
  wire is_compressed_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:18.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:29.9" */
  /* unused_bits = "0" */
  wire unused_valid;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:19.23" */
  input valid_i;
  wire valid_i;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(instr_i[12:5]),
    .Y(\$2 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A({ instr_i[12], instr_i[6:2] }),
    .Y(\$12 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(instr_i[11:7]),
    .Y(\$27 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(instr_i[6:2]),
    .Y(\$32 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(instr_i[1:0]),
    .B(2'h3),
    .Y(is_compressed_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(instr_i[15]),
    .Y(\$7 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(instr_i[11:7]),
    .B(2'h2),
    .Y(\$9 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$6886  (
    .A({ instr_i[11:7], 2'h1 }),
    .B(7'h02),
    .S(\$27 ),
    .Y({ \$auto$wreduce.cc:514:run$16937 [19:15], \$auto$wreduce.cc:514:run$16937 [20], \$auto$wreduce.cc:514:run$16937 [7] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6895_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$6895_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6897_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$6897_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$6903  (
    .A({ 4'h0, \$auto$wreduce.cc:514:run$16937 [20:15], 4'h0, \$auto$wreduce.cc:514:run$16937 [7], 1'h1, \$auto$wreduce.cc:514:run$16937 [20], \$auto$wreduce.cc:514:run$16937 [7] }),
    .B({ instr_i[6:2], instr_i[11:7], instr_i[11:7], 3'h2 }),
    .S(\$32 ),
    .Y({ \$auto$wreduce.cc:514:run$16938 [24:15], \$auto$wreduce.cc:514:run$16938 [11:6], \$auto$wreduce.cc:514:run$16938 [4], \$auto$wreduce.cc:514:run$16938 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$6918  (
    .A({ \$auto$wreduce.cc:514:run$16936 [24:15], \$auto$wreduce.cc:514:run$16936 [11:6], \$auto$wreduce.cc:514:run$16936 [4], \$auto$wreduce.cc:514:run$16936 [6] }),
    .B({ \$auto$wreduce.cc:514:run$16938 [24:15], \$auto$wreduce.cc:514:run$16938 [11:6], \$auto$wreduce.cc:514:run$16938 [4], \$auto$wreduce.cc:514:run$16938 [2] }),
    .S(instr_i[12]),
    .Y({ \$auto$wreduce.cc:514:run$16939 [24:15], \$auto$wreduce.cc:514:run$16939 [11:6], \$auto$wreduce.cc:514:run$16939 [4], \$auto$wreduce.cc:514:run$16939 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$6945  (
    .A({ 5'h00, instr_i[11:7], 7'h01 }),
    .B({ instr_i[6:2], 5'h00, instr_i[11:7], 2'h2 }),
    .S(\$32 ),
    .Y({ \$auto$wreduce.cc:514:run$16936 [24:15], \$auto$wreduce.cc:514:run$16936 [11:7], \$auto$wreduce.cc:514:run$16936 [4], \$auto$wreduce.cc:514:run$16936 [6] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6959  (
    .A(\$27 ),
    .B(1'h0),
    .S(\$32 ),
    .Y(\$illegal_instr_o$37 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6972  (
    .A(\$illegal_instr_o$37 ),
    .B(1'h0),
    .S(instr_i[12]),
    .Y(\$illegal_instr_o$45 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6985_CMP0  (
    .A(instr_i[15:13]),
    .B(2'h2),
    .Y(\$procmux$6985_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6996_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$6996_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$7000  (
    .A(1'h0),
    .B({ instr_i[12], \$27 , \$illegal_instr_o$45 , 1'h1 }),
    .S({ \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$6895_CMP , \$procmux$7001_CTRL  }),
    .Y(\$illegal_instr_o$47 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_ANY  (
    .A(\$procmux$7001_CMP ),
    .Y(\$procmux$7001_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP0  (
    .A(instr_i[15:13]),
    .B(1'h1),
    .Y(\$procmux$7001_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP1  (
    .A(instr_i[15:13]),
    .B(2'h3),
    .Y(\$procmux$7001_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP2  (
    .A(instr_i[15:13]),
    .B(3'h5),
    .Y(\$procmux$7001_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7001_CMP3  (
    .A(instr_i[15:13]),
    .B(3'h7),
    .Y(\$procmux$7001_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$7012  (
    .A(instr_i),
    .B({ 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 14'h0180, \$auto$wreduce.cc:514:run$16939 [24:15], 3'h0, \$auto$wreduce.cc:514:run$16939 [11:6], 1'h1, \$auto$wreduce.cc:514:run$16939 [4], 1'h0, \$auto$wreduce.cc:514:run$16939 [2], 6'h30, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023 }),
    .S({ \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$6895_CMP , \$procmux$7013_CMP  }),
    .Y(\$instr_o$46 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7013_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h6),
    .Y(\$procmux$7013_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_ANY  (
    .A(\$procmux$7026_CMP ),
    .Y(\$illegal_instr_o$18 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h4),
    .Y(\$procmux$7026_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP1  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h5),
    .Y(\$procmux$7026_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP2  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h6),
    .Y(\$procmux$7026_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7026_CMP3  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h7),
    .Y(\$procmux$7026_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7028_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$7028_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7032_CMP0  (
    .A(instr_i[1:0]),
    .B(1'h1),
    .Y(\$procmux$7032_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd29)
  ) \$procmux$7037  (
    .A({ instr_i[31:10], instr_i[6:0] }),
    .B({ 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 21'h016601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h116601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h196601, instr_i[4:2], 2'h1, instr_i[9:7], 12'heb3 }),
    .S({ \$procmux$7041_CMP , \$procmux$7040_CMP , \$procmux$7039_CMP , \$procmux$7038_CMP  }),
    .Y({ \$instr_o$17 [31:10], \$instr_o$17 [6:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7038_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(2'h3),
    .Y(\$procmux$7038_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7039_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(2'h2),
    .Y(\$procmux$7039_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7040_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(1'h1),
    .Y(\$procmux$7040_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:145.21-146.74|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7041_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .Y(\$procmux$7041_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd29)
  ) \$procmux$7052  (
    .A({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 12'ha93 }),
    .B({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 12'he93, \$instr_o$17 [31:10], \$instr_o$17 [6:0] }),
    .S({ \$procmux$7054_CMP , \$procmux$7028_CMP  }),
    .Y({ \$instr_o$19 [31:10], \$instr_o$19 [6:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7054_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h2),
    .Y(\$procmux$7054_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_ANY  (
    .A(\$procmux$7056_CMP ),
    .Y(\$procmux$7056_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_CMP0  (
    .A(instr_i[11:10]),
    .Y(\$procmux$7056_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7056_CMP1  (
    .A(instr_i[11:10]),
    .B(1'h1),
    .Y(\$procmux$7056_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7078  (
    .A(1'h0),
    .B({ instr_i[12], \$illegal_instr_o$18  }),
    .S({ \$procmux$7056_CTRL , \$procmux$7028_CMP  }),
    .Y(\$illegal_instr_o$20 )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$7101  (
    .A({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 1'h1 }),
    .B({ instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 12'h404 }),
    .S(\$9 ),
    .Y({ \$instr_o$10 [28:23], \$instr_o$10 [16:7], \$instr_o$10 [5] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$procmux$7109  (
    .A({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13 }),
    .B({ instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$7 , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], \$instr_o$10 [28:23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [16:7], 1'h0, \$instr_o$10 [5], 2'h2, \$instr_o$10 [5], 2'h3, \$instr_o$19 [31:10], instr_i[9:7], \$instr_o$19 [6:0], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }),
    .S({ \$procmux$7117_CTRL , \$procmux$6985_CMP , \$procmux$7001_CMP [1], \$procmux$6895_CMP , \$procmux$7110_CTRL  }),
    .Y(\$instr_o$21 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7110_ANY  (
    .A({ \$procmux$7013_CMP , \$procmux$7001_CMP [3] }),
    .Y(\$procmux$7110_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7117_ANY  (
    .A({ \$procmux$7001_CMP [2], \$procmux$7001_CMP [0] }),
    .Y(\$procmux$7117_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7125  (
    .A(1'h0),
    .B({ \$12 , \$illegal_instr_o$20  }),
    .S({ \$procmux$7001_CMP [1], \$procmux$6895_CMP  }),
    .Y(\$illegal_instr_o$22 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7143_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$7143_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7147  (
    .A(1'h0),
    .B({ \$2 , 1'h1 }),
    .S({ \$procmux$6996_CMP , \$procmux$7148_CTRL  }),
    .Y(\$illegal_instr_o$5 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$7148_ANY  (
    .A({ \$procmux$7001_CMP , \$procmux$6895_CMP  }),
    .Y(\$procmux$7148_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$7157  (
    .A(instr_i),
    .B({ 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023 }),
    .S({ \$procmux$6996_CMP , \$procmux$6985_CMP , \$procmux$7013_CMP  }),
    .Y(\$instr_o$4 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$7166  (
    .A(1'h0),
    .B({ \$illegal_instr_o$5 , \$illegal_instr_o$22 , \$illegal_instr_o$47  }),
    .S({ \$procmux$7143_CMP , \$procmux$7032_CMP , \$procmux$6897_CMP  }),
    .Y(illegal_instr_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$7174  (
    .A(instr_i),
    .B({ \$instr_o$4 , \$instr_o$21 , \$instr_o$46  }),
    .S({ \$procmux$7143_CMP , \$procmux$7032_CMP , \$procmux$6897_CMP  }),
    .Y(instr_o)
  );
  assign { \$auto$wreduce.cc:514:run$16936 [31:25], \$auto$wreduce.cc:514:run$16936 [14:12], \$auto$wreduce.cc:514:run$16936 [5], \$auto$wreduce.cc:514:run$16936 [3:0] } = { 12'h002, \$auto$wreduce.cc:514:run$16936 [6], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$16937 [31:21], \$auto$wreduce.cc:514:run$16937 [14:8], \$auto$wreduce.cc:514:run$16937 [6:0] } = { 20'h00003, \$auto$wreduce.cc:514:run$16937 [20], 1'h0, \$auto$wreduce.cc:514:run$16937 [7], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$16938 [31:25], \$auto$wreduce.cc:514:run$16938 [14:12], \$auto$wreduce.cc:514:run$16938 [5], \$auto$wreduce.cc:514:run$16938 [3], \$auto$wreduce.cc:514:run$16938 [1:0] } = 14'h000b;
  assign { \$auto$wreduce.cc:514:run$16939 [31:25], \$auto$wreduce.cc:514:run$16939 [14:12], \$auto$wreduce.cc:514:run$16939 [5], \$auto$wreduce.cc:514:run$16939 [3], \$auto$wreduce.cc:514:run$16939 [1:0] } = 14'h000b;
  assign { \$instr_o$10 [31:29], \$instr_o$10 [22:17], \$instr_o$10 [6], \$instr_o$10 [4:0] } = { instr_i[12], instr_i[12], instr_i[12], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], \$instr_o$10 [23], 3'h2, \$instr_o$10 [5], 2'h3 };
  assign \$instr_o$17 [9:7] = instr_i[9:7];
  assign \$instr_o$19 [9:7] = instr_i[9:7];
  assign unused_valid = valid_i;
endmodule

/* src = "rtl/cve2/cve2_controller.sv:12.8" */
module \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i (clk_i, rst_ni, irqs_i, instr_req_o, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o
, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$152 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$170 ;
  wire \$172 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$19 ;
  wire \$198 ;
  wire \$200 ;
  wire \$206 ;
  wire \$208 ;
  wire \$21 ;
  wire [31:0] \$211 ;
  wire \$215 ;
  wire \$218 ;
  wire \$23 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$27 ;
  wire \$29 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$300 ;
  wire \$302 ;
  wire \$31 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$49 ;
  wire \$51 ;
  wire \$81 ;
  wire \$84 ;
  wire \$92 ;
  wire \$96 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17509 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17511 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17513 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17515 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17520 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17522 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17526 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17531 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17533 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17535 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17517 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17528 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17537 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16786 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16788 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16792 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16796 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16798 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16800 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18429 ;
  wire \$auto$rtlil.cc:3092:Mux$1604 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1607 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1608 ;
  /* src = "rtl/cve2/cve2_controller.sv:670.20-672.14" */
  wire [3:0] \$auto$wreduce.cc:514:run$16941 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire [3:0] \$auto$wreduce.cc:514:run$16942 ;
  /* src = "rtl/cve2/cve2_controller.sv:509.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$16943 ;
  /* src = "rtl/cve2/cve2_controller.sv:507.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$16944 ;
  /* src = "rtl/cve2/cve2_controller.sv:500.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$16945 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$16946 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [6:0] \$auto$wreduce.cc:514:run$16947 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [6:0] \$auto$wreduce.cc:514:run$16948 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [6:0] \$auto$wreduce.cc:514:run$16949 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [31:0] \$csr_mtval_o$231 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [31:0] \$csr_mtval_o$258 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$csr_restore_dret_id_o$245 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_dret_id_o$256 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_mret_id_o$255 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$csr_save_cause_o$230 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_save_cause_o$257 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire [3:0] \$ctrl_fsm_ns$147 ;
  /* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" */
  wire [3:0] \$ctrl_fsm_ns$149 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire [3:0] \$ctrl_fsm_ns$173 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire [3:0] \$ctrl_fsm_ns$175 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire [3:0] \$ctrl_fsm_ns$177 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [3:0] \$ctrl_fsm_ns$219 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [3:0] \$ctrl_fsm_ns$225 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [3:0] \$ctrl_fsm_ns$239 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [3:0] \$ctrl_fsm_ns$246 ;
  /* src = "rtl/cve2/cve2_controller.sv:689.9-691.12" */
  wire [3:0] \$ctrl_fsm_ns$265 ;
  /* src = "rtl/cve2/cve2_controller.sv:534.18-538.12" */
  wire [2:0] \$debug_cause_o$195 ;
  /* src = "rtl/cve2/cve2_controller.sv:532.9-538.12" */
  wire [2:0] \$debug_cause_o$196 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$ebrk_insn_prio$64 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ebrk_insn_prio$69 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ecall_insn_prio$68 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire [6:0] \$exc_cause_o$192 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [1:0] \$exc_pc_mux_o$252 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$flush_id$249 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire \$halt_if$148 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire \$halt_if$174 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire \$halt_if$176 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire \$halt_if$178 ;
  /* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" */
  wire \$load_err_prio$59 ;
  /* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" */
  wire \$load_err_prio$62 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$load_err_prio$66 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$load_err_prio$71 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$115 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$116 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$117 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$118 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$119 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$120 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$121 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$122 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$123 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$124 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$125 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$126 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$127 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$128 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire \$nmi_mode_d$188 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [2:0] \$pc_mux_o$243 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [2:0] \$pc_mux_o$251 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$pc_set_o$250 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_jump_o$154 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_tbranch_o$155 ;
  wire \$procmux$3947_CMP ;
  wire \$procmux$4375_CMP ;
  wire \$procmux$4403_CMP ;
  wire \$procmux$4432_CMP ;
  wire \$procmux$4696_CMP ;
  wire \$procmux$4752_CMP ;
  wire \$procmux$4787_CMP ;
  wire \$procmux$4788_CMP ;
  wire \$procmux$4790_CMP ;
  wire \$procmux$5239_Y ;
  wire \$procmux$5274_Y ;
  wire \$procmux$5310_Y ;
  /* src = "rtl/cve2/cve2_controller.sv:58.33" */
  input branch_set_i;
  wire branch_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:14.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_controller.sv:41.33" */
  output controller_run_o;
  wire controller_run_o;
  /* src = "rtl/cve2/cve2_controller.sv:63.33" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_controller.sv:87.33" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_controller.sv:85.33" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_controller.sv:150.9" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_controller.sv:27.33" */
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  /* src = "rtl/cve2/cve2_controller.sv:83.33" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:82.33" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:84.33" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:81.33" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:80.33" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_controller.sv:18.33" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_controller.sv:107.14" */
  wire [3:0] ctrl_fsm_cs;
  /* src = "rtl/cve2/cve2_controller.sv:107.27" */
  wire [3:0] ctrl_fsm_ns;
  /* src = "rtl/cve2/cve2_controller.sv:72.33" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:73.33" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_controller.sv:76.33" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_controller.sv:77.33" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_controller.sv:110.23" */
  wire debug_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:74.33" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:110.9" */
  wire debug_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:71.33" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_controller.sv:75.33" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_controller.sv:135.9" */
  wire do_single_step_d;
  /* src = "rtl/cve2/cve2_controller.sv:136.9" */
  wire do_single_step_q;
  /* src = "rtl/cve2/cve2_controller.sv:147.9" */
  wire dret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:24.33" */
  input dret_insn_i;
  wire dret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:140.9" */
  wire ebreak_into_debug;
  /* src = "rtl/cve2/cve2_controller.sv:149.9" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_controller.sv:26.33" */
  input ebrk_insn_i;
  wire ebrk_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:121.9" */
  wire ebrk_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:145.9" */
  wire ecall_insn;
  /* src = "rtl/cve2/cve2_controller.sv:22.33" */
  input ecall_insn_i;
  wire ecall_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:120.9" */
  wire ecall_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:139.9" */
  wire enter_debug_mode;
  /* src = "rtl/cve2/cve2_controller.sv:137.9" */
  wire enter_debug_mode_prio_d;
  /* src = "rtl/cve2/cve2_controller.sv:138.9" */
  wire enter_debug_mode_prio_q;
  /* src = "rtl/cve2/cve2_controller.sv:50.33" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:49.33" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:113.20" */
  wire exc_req_d;
  /* src = "rtl/cve2/cve2_controller.sv:131.9" */
  wire exc_req_lsu;
  /* src = "rtl/cve2/cve2_controller.sv:113.9" */
  wire exc_req_q;
  /* src = "rtl/cve2/cve2_controller.sv:17.33" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_controller.sv:128.9" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_controller.sv:91.33" */
  output flush_id_o;
  wire flush_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:126.9" */
  wire halt_if;
  /* src = "rtl/cve2/cve2_controller.sv:141.9" */
  wire handle_irq;
  /* src = "rtl/cve2/cve2_controller.sv:40.33" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_controller.sv:129.9" */
  wire illegal_dret;
  /* src = "rtl/cve2/cve2_controller.sv:114.25" */
  wire illegal_insn_d;
  /* src = "rtl/cve2/cve2_controller.sv:21.33" */
  input illegal_insn_i;
  wire illegal_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:119.9" */
  wire illegal_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:114.9" */
  wire illegal_insn_q;
  /* src = "rtl/cve2/cve2_controller.sv:130.9" */
  wire illegal_umode;
  /* src = "rtl/cve2/cve2_controller.sv:32.33" */
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:151.9" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_controller.sv:34.33" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:35.33" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_controller.sv:118.9" */
  wire instr_fetch_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:31.33" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_controller.sv:33.33" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:45.33" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_controller.sv:39.33" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_controller.sv:30.33" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_controller.sv:67.33" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_controller.sv:64.33" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_controller.sv:65.33" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_controller.sv:60.33" */
  input jump_set_i;
  wire jump_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:111.21" */
  wire load_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:54.33" */
  input load_err_i;
  wire load_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:123.9" */
  wire load_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:111.9" */
  wire load_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:53.33" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_controller.sv:142.15" */
  wire [3:0] mfip_id;
  /* src = "rtl/cve2/cve2_controller.sv:146.9" */
  wire mret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:23.33" */
  input mret_insn_i;
  wire mret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:109.21" */
  wire nmi_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:68.33" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:109.9" */
  wire nmi_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:36.33" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:47.33" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:46.33" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_controller.sv:94.33" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_controller.sv:96.33" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_controller.sv:86.33" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_controller.sv:127.9" */
  wire retain_id;
  /* src = "rtl/cve2/cve2_controller.sv:15.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_controller.sv:132.9" */
  wire special_req;
  /* src = "rtl/cve2/cve2_controller.sv:134.9" */
  wire special_req_flush_only;
  /* src = "rtl/cve2/cve2_controller.sv:133.9" */
  wire special_req_pc_change;
  /* src = "rtl/cve2/cve2_controller.sv:125.9" */
  wire stall;
  /* src = "rtl/cve2/cve2_controller.sv:90.33" */
  input stall_id_i;
  wire stall_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:112.22" */
  wire store_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:55.33" */
  input store_err_i;
  wire store_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:122.9" */
  wire store_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:112.9" */
  wire store_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:78.33" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_controller.sv:143.15" */
  /* unused_bits = "0" */
  wire unused_irq_timer;
  /* src = "rtl/cve2/cve2_controller.sv:148.9" */
  wire wfi_insn;
  /* src = "rtl/cve2/cve2_controller.sv:25.33" */
  input wfi_insn_i;
  wire wfi_insn_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ecall_insn_i),
    .B(instr_valid_i),
    .Y(ecall_insn)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(csr_pipe_flush_i),
    .B(instr_valid_i),
    .Y(csr_pipe_flush)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(\$auto$rtlil.cc:3092:Mux$1604 ),
    .B(debug_ebreakm_i),
    .S(\$215 ),
    .Y(ebreak_into_debug)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(debug_mode_q),
    .Y(\$102 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(nmi_mode_q),
    .Y(\$104 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$102 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(irq_pending_i),
    .B(csr_mstatus_mie_i),
    .Y(\$108 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(irq_nm_i),
    .B(\$108 ),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(\$106 ),
    .B(\$110 ),
    .Y(handle_irq)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_fetch_err_i),
    .B(instr_valid_i),
    .Y(instr_fetch_err)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(irq_nm_i),
    .B(irq_pending_i),
    .Y(\$135 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$135 ),
    .B(debug_req_i),
    .Y(\$137 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(\$137 ),
    .B(debug_mode_q),
    .Y(\$139 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(\$139 ),
    .B(debug_single_step_i),
    .Y(\$141 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(branch_set_i),
    .B(jump_set_i),
    .Y(\$152 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(enter_debug_mode),
    .B(handle_irq),
    .Y(\$157 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(stall_id_i),
    .B(instr_valid_i),
    .Y(\$159 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(dret_insn),
    .B(\$102 ),
    .Y(illegal_dret)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\$157 ),
    .B(\$159 ),
    .Y(\$161 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(stall_id_i),
    .Y(\$164 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(special_req),
    .Y(\$166 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(\$164 ),
    .B(\$166 ),
    .Y(\$168 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(instr_valid_i),
    .Y(\$170 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$171  (
    .A(\$168 ),
    .B(\$170 ),
    .Y(\$172 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$179  (
    .A(nmi_mode_q),
    .Y(\$180 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$19 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(irq_nm_i),
    .B(\$180 ),
    .Y(\$182 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(irqs_i[15:0]),
    .Y(\$184 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(debug_mode_q),
    .Y(\$198 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(ebreak_into_debug),
    .B(\$198 ),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mret_insn_i),
    .B(instr_valid_i),
    .Y(mret_insn)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(csr_mstatus_tw_i),
    .B(wfi_insn),
    .Y(\$21 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(exc_req_q),
    .B(store_err_q),
    .Y(\$206 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(\$206 ),
    .B(load_err_q),
    .Y(\$208 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd31)
  ) \$210  (
    .A(pc_id_i[31:1]),
    .B(1'h1),
    .Y(\$211 [31:1])
  );
  \$mux  #(
    .WIDTH(32'd31)
  ) \$212  (
    .A(pc_id_i[31:1]),
    .B(\$211 [31:1]),
    .S(instr_fetch_err_plus2_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1607 [31:1])
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$213  (
    .A(instr_i),
    .B({ 16'h0000, instr_compressed_i }),
    .S(instr_is_compressed_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1608 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$215 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(debug_mode_q),
    .B(ebreak_into_debug),
    .Y(\$218 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(mret_insn),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$19 ),
    .B(\$23 ),
    .Y(illegal_umode)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(ebrk_insn_prio),
    .B(ebreak_into_debug),
    .Y(\$260 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(illegal_insn_i),
    .B(illegal_dret),
    .Y(\$27 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(\$260 ),
    .Y(\$262 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(enter_debug_mode_prio_q),
    .B(\$262 ),
    .Y(\$264 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$27 ),
    .B(illegal_umode),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$289  (
    .A(stall_id_i),
    .Y(\$290 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$291  (
    .A(halt_if),
    .Y(\$292 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$293  (
    .A(\$290 ),
    .B(\$292 ),
    .Y(\$294 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$295  (
    .A(retain_id),
    .Y(\$296 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\$294 ),
    .B(\$296 ),
    .Y(id_in_ready_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(stall_id_i),
    .B(retain_id),
    .Y(\$300 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(ctrl_fsm_cs),
    .B(3'h6),
    .Y(\$31 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$301  (
    .A(\$300 ),
    .Y(\$302 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$303  (
    .A(\$302 ),
    .B(flush_id),
    .Y(instr_valid_clear_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$29 ),
    .B(\$31 ),
    .Y(illegal_insn_d)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(ecall_insn),
    .B(ebrk_insn),
    .Y(\$35 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$35 ),
    .B(illegal_insn_d),
    .Y(\$37 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$37 ),
    .B(instr_fetch_err),
    .Y(\$39 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(dret_insn_i),
    .B(instr_valid_i),
    .Y(dret_insn)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$39 ),
    .B(\$31 ),
    .Y(exc_req_d)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(store_err_i),
    .B(load_err_i),
    .Y(exc_req_lsu)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(wfi_insn),
    .B(csr_pipe_flush),
    .Y(special_req_flush_only)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(mret_insn),
    .B(dret_insn),
    .Y(\$49 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49 ),
    .B(exc_req_d),
    .Y(\$51 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\$51 ),
    .B(exc_req_lsu),
    .Y(special_req_pc_change)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(special_req_pc_change),
    .B(special_req_flush_only),
    .Y(special_req)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(wfi_insn_i),
    .B(instr_valid_i),
    .Y(wfi_insn)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(ebrk_insn_i),
    .B(instr_valid_i),
    .Y(ebrk_insn)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$102 ),
    .B(debug_single_step_i),
    .Y(\$81 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(do_single_step_q),
    .B(\$81 ),
    .S(instr_valid_i),
    .Y(do_single_step_d)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(debug_req_i),
    .B(do_single_step_d),
    .Y(\$84 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\$84 ),
    .B(\$102 ),
    .Y(enter_debug_mode_prio_d)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(trigger_match_i),
    .B(\$102 ),
    .Y(\$92 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(enter_debug_mode_prio_d),
    .B(\$92 ),
    .Y(enter_debug_mode)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(priv_mode_i),
    .Y(\$96 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\$96 ),
    .B(debug_ebreaku_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1604 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17508  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(nmi_mode_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17517 ),
    .Q(nmi_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17519  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(debug_mode_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17528 ),
    .Q(debug_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17530  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ctrl_fsm_ns),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17537 ),
    .Q(ctrl_fsm_cs)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17510  (
    .A({ \$procmux$3947_CMP , mret_insn, \$208  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17509 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17512  (
    .A({ \$procmux$3947_CMP , \$208  }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17511 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17514  (
    .A({ \$procmux$4432_CMP , handle_irq }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17513 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17516  (
    .A({ \$procmux$4432_CMP , \$procmux$3947_CMP  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17515 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17521  (
    .A({ \$procmux$3947_CMP , dret_insn, mret_insn, \$208  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17520 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17523  (
    .A({ \$procmux$3947_CMP , mret_insn, \$208  }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17522 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17527  (
    .A({ \$auto$opt_reduce.cc:137:opt_pmux$16788 , \$procmux$3947_CMP  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17526 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17532  (
    .A({ \$procmux$4790_CMP , fetch_enable_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17531 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17534  (
    .A({ \$procmux$4752_CMP , \$141  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17533 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17536  (
    .A({ \$procmux$4696_CMP , handle_irq, enter_debug_mode, id_in_ready_o }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17535 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17518  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17515 , \$auto$opt_dff.cc:194:make_patterns_logic$17513 , \$auto$opt_dff.cc:194:make_patterns_logic$17511 , \$auto$opt_dff.cc:194:make_patterns_logic$17509  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17517 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17529  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17526 , \$auto$opt_dff.cc:194:make_patterns_logic$17511 , \$auto$opt_dff.cc:194:make_patterns_logic$17520 , \$auto$opt_dff.cc:194:make_patterns_logic$17522  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17528 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17538  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17531 , \$auto$opt_dff.cc:194:make_patterns_logic$17533 , \$auto$opt_dff.cc:194:make_patterns_logic$17535  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17537 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16787  (
    .A({ \$procmux$4403_CMP , \$procmux$4375_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16788 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16789  (
    .A({ \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16786 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16791  (
    .A({ \$procmux$4790_CMP , \$procmux$4788_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16792 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16793  (
    .A({ \$procmux$4788_CMP , \$procmux$4696_CMP , \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP , \$procmux$3947_CMP , controller_run_o }),
    .Y(instr_req_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16795  (
    .A({ load_err_prio, store_err_prio }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16796 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16797  (
    .A({ \$procmux$4787_CMP , \$procmux$4752_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16798 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16799  (
    .A({ \$procmux$4787_CMP , \$procmux$4752_CMP , \$procmux$3947_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16800 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18428  (
    .A({ \$procmux$4788_CMP , \$procmux$4752_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18429 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$do_single_step_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(do_single_step_d),
    .Q(do_single_step_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$enter_debug_mode_prio_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(enter_debug_mode_prio_d),
    .Q(enter_debug_mode_prio_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$exc_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(exc_req_d),
    .Q(exc_req_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$illegal_insn_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(illegal_insn_d),
    .Q(illegal_insn_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$load_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(load_err_i),
    .Q(load_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$store_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(store_err_i),
    .Q(store_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:690.11-690.38|rtl/cve2/cve2_controller.sv:689.9-691.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3943  (
    .A(\$ctrl_fsm_ns$246 ),
    .B(4'h8),
    .S(\$264 ),
    .Y(\$ctrl_fsm_ns$265 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3947_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h6),
    .Y(\$procmux$3947_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:671.13-671.48|rtl/cve2/cve2_controller.sv:670.20-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3949  (
    .A(2'h1),
    .B(2'h2),
    .S(wfi_insn),
    .Y({ \$auto$wreduce.cc:514:run$16941 [1], \$auto$wreduce.cc:514:run$16941 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4013  (
    .A({ \$auto$wreduce.cc:514:run$16941 [1], \$auto$wreduce.cc:514:run$16941 [2] }),
    .B(2'h1),
    .S(dret_insn),
    .Y({ \$auto$wreduce.cc:514:run$16942 [1], \$auto$wreduce.cc:514:run$16942 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4027  (
    .A({ dret_insn, 1'h0 }),
    .B(2'h1),
    .S(mret_insn),
    .Y(\$pc_mux_o$243 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4059  (
    .A(dret_insn),
    .B(1'h0),
    .S(mret_insn),
    .Y(\$csr_restore_dret_id_o$245 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4099  (
    .A({ \$auto$wreduce.cc:514:run$16942 [1], \$auto$wreduce.cc:514:run$16942 [2] }),
    .B(2'h1),
    .S(mret_insn),
    .Y({ \$ctrl_fsm_ns$239 [1], \$ctrl_fsm_ns$239 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4110  (
    .A({ \$pc_mux_o$243 [2:1], \$pc_mux_o$243 [1] }),
    .B(3'h2),
    .S(\$208 ),
    .Y(\$pc_mux_o$251 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4118  (
    .A(\$49 ),
    .B(\$csr_save_cause_o$230 ),
    .S(\$208 ),
    .Y(\$pc_set_o$250 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4126  (
    .A({ 1'h0, \$ctrl_fsm_ns$239 [2:1], \$ctrl_fsm_ns$239 [2] }),
    .B({ \$ctrl_fsm_ns$225 [3:2], 2'h1 }),
    .S(\$208 ),
    .Y(\$ctrl_fsm_ns$246 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4163  (
    .A(\$218 ),
    .Y(\$auto$wreduce.cc:514:run$16947 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4205  (
    .A(2'h1),
    .B(2'h2),
    .S(\$218 ),
    .Y(\$ctrl_fsm_ns$219 [3:2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$4216  (
    .A(32'd0),
    .B({ \$auto$rtlil.cc:3092:Mux$1607 [31:1], pc_id_i[0], \$auto$rtlil.cc:3092:Mux$1608 , lsu_addr_last_i }),
    .S({ instr_fetch_err, illegal_insn_prio, \$auto$opt_reduce.cc:137:opt_pmux$16796  }),
    .Y(\$csr_mtval_o$231 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4231  (
    .A(1'h1),
    .B(\$auto$wreduce.cc:514:run$16947 [1]),
    .S(ebrk_insn_prio),
    .Y(\$csr_save_cause_o$230 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$4252  (
    .A(4'h0),
    .B({ 10'h04a, \$215 , \$215 , 2'h0, \$auto$wreduce.cc:514:run$16947 [1], \$auto$wreduce.cc:514:run$16947 [1], 8'h75 }),
    .S({ instr_fetch_err, illegal_insn_prio, ecall_insn_prio, ebrk_insn_prio, store_err_prio, load_err_prio }),
    .Y(\$auto$wreduce.cc:514:run$16948 [3:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4294  (
    .A(2'h1),
    .B(\$ctrl_fsm_ns$219 [3:2]),
    .S(ebrk_insn_prio),
    .Y(\$ctrl_fsm_ns$225 [3:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4303  (
    .A(32'd0),
    .B(\$csr_mtval_o$231 ),
    .S(\$208 ),
    .Y(\$csr_mtval_o$258 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4310  (
    .A(\$208 ),
    .B(\$csr_save_cause_o$230 ),
    .Y(\$csr_save_cause_o$257 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4317  (
    .A(\$csr_restore_dret_id_o$245 ),
    .B(1'h0),
    .S(\$208 ),
    .Y(\$csr_restore_dret_id_o$256 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4324  (
    .A(mret_insn),
    .B(1'h0),
    .S(\$208 ),
    .Y(\$csr_restore_mret_id_o$255 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4338  (
    .A(4'h0),
    .B(\$auto$wreduce.cc:514:run$16948 [3:0]),
    .S(\$208 ),
    .Y(\$auto$wreduce.cc:514:run$16949 [3:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4345  (
    .A(2'h1),
    .B({ debug_mode_q, debug_mode_q }),
    .S(\$208 ),
    .Y(\$exc_pc_mux_o$252 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4352  (
    .A(1'h1),
    .B(\$csr_save_cause_o$230 ),
    .S(\$208 ),
    .Y(\$flush_id$249 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4375_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$4375_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:535.11-535.45|rtl/cve2/cve2_controller.sv:534.18-538.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4397  (
    .A(2'h2),
    .B(2'h1),
    .S(debug_req_i),
    .Y(\$debug_cause_o$195 [2:1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4403_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$4403_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4409  (
    .A({ \$debug_cause_o$195 [2:1], \$debug_cause_o$195 [1] }),
    .B(3'h2),
    .S(trigger_match_i),
    .Y(\$debug_cause_o$196 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:510.13-510.52|rtl/cve2/cve2_controller.sv:509.20-513.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4418  (
    .A(irqs_i[18]),
    .Y(\$auto$wreduce.cc:514:run$16943 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4432_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h7),
    .Y(\$procmux$4432_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4439  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$16943 [2] }),
    .B(2'h2),
    .S(irqs_i[16]),
    .Y(\$auto$wreduce.cc:514:run$16944 [3:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$4457  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$16944 [3:2], 2'h3 }),
    .B({ 1'h1, mfip_id }),
    .S(\$184 ),
    .Y(\$auto$wreduce.cc:514:run$16945 [4:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$4472  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$16945 [4:0] }),
    .B(6'h20),
    .S(\$182 ),
    .Y(\$auto$wreduce.cc:514:run$16946 [5:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4483  (
    .A(nmi_mode_q),
    .B(\$182 ),
    .Y(\$nmi_mode_d$188 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4512  (
    .A(7'h00),
    .B({ 1'h1, \$auto$wreduce.cc:514:run$16946 [5:0] }),
    .S(handle_irq),
    .Y(\$exc_cause_o$192 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4539  (
    .A(\$161 ),
    .B(handle_irq),
    .Y(\$halt_if$174 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4550_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h5),
    .Y(controller_run_o)
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4556  (
    .A(\$ctrl_fsm_ns$149 ),
    .B(4'h7),
    .S(handle_irq),
    .Y(\$ctrl_fsm_ns$173 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4575  (
    .A(\$halt_if$174 ),
    .B(enter_debug_mode),
    .Y(\$halt_if$176 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4591  (
    .A(\$ctrl_fsm_ns$173 ),
    .B(4'h8),
    .S(enter_debug_mode),
    .Y(\$ctrl_fsm_ns$175 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4606  (
    .A(\$161 ),
    .B(\$halt_if$176 ),
    .S(\$172 ),
    .Y(\$halt_if$178 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4619  (
    .A(\$ctrl_fsm_ns$149 ),
    .B(\$ctrl_fsm_ns$175 ),
    .S(\$172 ),
    .Y(\$ctrl_fsm_ns$177 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4642  (
    .A(\$152 ),
    .B(branch_set_i),
    .Y(\$perf_tbranch_o$155 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4652  (
    .A(\$152 ),
    .B(jump_set_i),
    .Y(\$perf_jump_o$154 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$4681  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .S(special_req),
    .Y(\$ctrl_fsm_ns$149 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4691  (
    .A(handle_irq),
    .B(enter_debug_mode),
    .Y(\$halt_if$148 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4696_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$4696_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4703  (
    .A({ 1'h0, handle_irq, 1'h1 }),
    .B(3'h4),
    .S(enter_debug_mode),
    .Y({ \$ctrl_fsm_ns$147 [3], \$ctrl_fsm_ns$147 [1], \$ctrl_fsm_ns$147 [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4752_CMP0  (
    .A(ctrl_fsm_cs),
    .B(2'h3),
    .Y(\$procmux$4752_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd4)
  ) \$procmux$4768  (
    .A(4'h0),
    .B({ 12'h134, \$ctrl_fsm_ns$147 [3:1], \$ctrl_fsm_ns$147 [2], \$ctrl_fsm_ns$177 , 4'h5, \$ctrl_fsm_ns$265  }),
    .S({ \$procmux$4790_CMP , \$procmux$4787_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18429 , \$procmux$4696_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16786 , \$procmux$3947_CMP  }),
    .Y(ctrl_fsm_ns)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4787_CMP0  (
    .A(ctrl_fsm_cs),
    .B(2'h2),
    .Y(\$procmux$4787_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4788_CMP0  (
    .A(ctrl_fsm_cs),
    .B(1'h1),
    .Y(\$procmux$4788_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4790_CMP0  (
    .A(ctrl_fsm_cs),
    .Y(\$procmux$4790_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4814  (
    .A(controller_run_o),
    .B(\$perf_tbranch_o$155 ),
    .Y(perf_tbranch_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4825  (
    .A(controller_run_o),
    .B(\$perf_jump_o$154 ),
    .Y(perf_jump_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$4830  (
    .A(32'd0),
    .B(\$csr_mtval_o$258 ),
    .S(\$procmux$3947_CMP ),
    .Y(csr_mtval_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$4835  (
    .A(1'h0),
    .B({ handle_irq, 1'h1, \$200 , \$csr_save_cause_o$257  }),
    .S({ \$procmux$4432_CMP , \$procmux$4403_CMP , \$procmux$4375_CMP , \$procmux$3947_CMP  }),
    .Y(csr_save_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4846  (
    .A(\$procmux$3947_CMP ),
    .B(\$csr_restore_dret_id_o$256 ),
    .Y(csr_restore_dret_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4851  (
    .A(\$procmux$3947_CMP ),
    .B(\$csr_restore_mret_id_o$255 ),
    .Y(csr_restore_mret_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4856  (
    .A(\$procmux$4375_CMP ),
    .B(\$200 ),
    .Y(csr_save_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4864  (
    .A(1'h0),
    .B({ handle_irq, 1'h1 }),
    .S({ \$procmux$4432_CMP , \$procmux$4403_CMP  }),
    .Y(csr_save_if_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4871  (
    .A(1'h0),
    .B({ 1'h1, \$200  }),
    .S({ \$procmux$4403_CMP , \$procmux$4375_CMP  }),
    .Y(debug_csr_save_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$4878  (
    .A(3'h1),
    .B(\$debug_cause_o$196 ),
    .S(\$procmux$4403_CMP ),
    .Y(debug_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$4885  (
    .A(7'h00),
    .B({ \$exc_cause_o$192 , 3'h0, \$auto$wreduce.cc:514:run$16949 [3:0] }),
    .S({ \$procmux$4432_CMP , \$procmux$3947_CMP  }),
    .Y(exc_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$4892  (
    .A(2'h1),
    .B({ 2'h2, \$exc_pc_mux_o$252  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16788 , \$procmux$3947_CMP  }),
    .Y(exc_pc_mux_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$4902  (
    .A(3'h0),
    .B({ 6'h0a, \$pc_mux_o$251  }),
    .S({ controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16786 , \$procmux$3947_CMP  }),
    .Y(pc_mux_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$4919  (
    .A(1'h0),
    .B({ \$152 , handle_irq, 1'h1, \$pc_set_o$250  }),
    .S({ controller_run_o, \$procmux$4432_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16792 , \$procmux$3947_CMP  }),
    .Y(pc_set_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4965  (
    .A(1'h1),
    .B({ 1'h0, \$141  }),
    .S({ \$procmux$4787_CMP , \$procmux$4752_CMP  }),
    .Y(ctrl_busy_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4971  (
    .A(1'h0),
    .B({ 1'h1, \$flush_id$249  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16798 , \$procmux$3947_CMP  }),
    .Y(flush_id)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4989  (
    .A(controller_run_o),
    .B(special_req),
    .Y(retain_id)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$4994  (
    .A(1'h0),
    .B({ \$halt_if$148 , \$halt_if$178 , 1'h1 }),
    .S({ \$procmux$4696_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$16800  }),
    .Y(halt_if)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5011  (
    .A(\$procmux$3947_CMP ),
    .Y(debug_mode_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5020  (
    .A(\$nmi_mode_d$188 ),
    .B(1'h0),
    .S(\$procmux$3947_CMP ),
    .Y(nmi_mode_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5024  (
    .A(\$mfip_id$128 ),
    .B(4'h0),
    .S(irqs_i[0]),
    .Y(mfip_id)
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5041  (
    .A(\$mfip_id$127 ),
    .B(4'h1),
    .S(irqs_i[1]),
    .Y(\$mfip_id$128 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5057  (
    .A(\$mfip_id$126 ),
    .B(4'h2),
    .S(irqs_i[2]),
    .Y(\$mfip_id$127 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5072  (
    .A(\$mfip_id$125 ),
    .B(4'h3),
    .S(irqs_i[3]),
    .Y(\$mfip_id$126 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5086  (
    .A(\$mfip_id$124 ),
    .B(4'h4),
    .S(irqs_i[4]),
    .Y(\$mfip_id$125 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5099  (
    .A(\$mfip_id$123 ),
    .B(4'h5),
    .S(irqs_i[5]),
    .Y(\$mfip_id$124 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5111  (
    .A(\$mfip_id$122 ),
    .B(4'h6),
    .S(irqs_i[6]),
    .Y(\$mfip_id$123 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5122  (
    .A(\$mfip_id$121 ),
    .B(4'h7),
    .S(irqs_i[7]),
    .Y(\$mfip_id$122 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5132  (
    .A(\$mfip_id$120 ),
    .B(4'h8),
    .S(irqs_i[8]),
    .Y(\$mfip_id$121 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5141  (
    .A(\$mfip_id$119 ),
    .B(4'h9),
    .S(irqs_i[9]),
    .Y(\$mfip_id$120 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5149  (
    .A(\$mfip_id$118 ),
    .B(4'ha),
    .S(irqs_i[10]),
    .Y(\$mfip_id$119 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5156  (
    .A({ \$mfip_id$117 [3], \$mfip_id$117 [3], \$mfip_id$117 [1:0] }),
    .B(4'hb),
    .S(irqs_i[11]),
    .Y(\$mfip_id$118 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5162  (
    .A({ \$mfip_id$116 [3], \$mfip_id$116 [1:0] }),
    .B(3'h4),
    .S(irqs_i[12]),
    .Y({ \$mfip_id$117 [3], \$mfip_id$117 [1:0] })
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5167  (
    .A({ \$mfip_id$115 [3], \$mfip_id$115 [3], \$mfip_id$115 [0] }),
    .B(3'h5),
    .S(irqs_i[13]),
    .Y({ \$mfip_id$116 [3], \$mfip_id$116 [1:0] })
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5171  (
    .A({ irqs_i[15], irqs_i[15] }),
    .B(2'h2),
    .S(irqs_i[14]),
    .Y({ \$mfip_id$115 [3], \$mfip_id$115 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5195  (
    .A(load_err_q),
    .B(1'h0),
    .S(store_err_q),
    .Y(\$load_err_prio$59 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5226  (
    .A(\$load_err_prio$59 ),
    .B(1'h0),
    .S(ebrk_insn),
    .Y(\$load_err_prio$62 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5239  (
    .A(store_err_q),
    .B(1'h0),
    .S(ebrk_insn),
    .Y(\$procmux$5239_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5264  (
    .A(\$load_err_prio$62 ),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$load_err_prio$66 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5274  (
    .A(\$procmux$5239_Y ),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$procmux$5274_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5284  (
    .A(ebrk_insn),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$ebrk_insn_prio$64 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5303  (
    .A(\$load_err_prio$66 ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$load_err_prio$71 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5310  (
    .A(\$procmux$5274_Y ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$procmux$5310_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5317  (
    .A(\$ebrk_insn_prio$64 ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$ebrk_insn_prio$69 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5324  (
    .A(ecall_insn),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$ecall_insn_prio$68 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5337  (
    .A(\$load_err_prio$71 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(load_err_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5341  (
    .A(\$procmux$5310_Y ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(store_err_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5345  (
    .A(\$ebrk_insn_prio$69 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(ebrk_insn_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5349  (
    .A(\$ecall_insn_prio$68 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(ecall_insn_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5353  (
    .A(illegal_insn_q),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(illegal_insn_prio)
  );
  assign \$211 [0] = pc_id_i[0];
  assign \$auto$rtlil.cc:3092:Mux$1607 [0] = pc_id_i[0];
  assign { \$auto$wreduce.cc:514:run$16941 [3], \$auto$wreduce.cc:514:run$16941 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$16941 [2] };
  assign { \$auto$wreduce.cc:514:run$16942 [3], \$auto$wreduce.cc:514:run$16942 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$16942 [2] };
  assign { \$auto$wreduce.cc:514:run$16943 [6:3], \$auto$wreduce.cc:514:run$16943 [1:0] } = 6'h23;
  assign { \$auto$wreduce.cc:514:run$16944 [6:4], \$auto$wreduce.cc:514:run$16944 [1:0] } = 5'h13;
  assign \$auto$wreduce.cc:514:run$16945 [6:5] = 2'h2;
  assign \$auto$wreduce.cc:514:run$16946 [6] = 1'h1;
  assign { \$auto$wreduce.cc:514:run$16947 [6:2], \$auto$wreduce.cc:514:run$16947 [0] } = { 5'h00, \$auto$wreduce.cc:514:run$16947 [1] };
  assign \$auto$wreduce.cc:514:run$16948 [6:4] = 3'h0;
  assign \$auto$wreduce.cc:514:run$16949 [6:4] = 3'h0;
  assign \$ctrl_fsm_ns$147 [0] = \$ctrl_fsm_ns$147 [2];
  assign \$ctrl_fsm_ns$219 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$225 [1:0] = 2'h1;
  assign { \$ctrl_fsm_ns$239 [3], \$ctrl_fsm_ns$239 [0] } = { 1'h0, \$ctrl_fsm_ns$239 [2] };
  assign \$debug_cause_o$195 [0] = \$debug_cause_o$195 [1];
  assign \$mfip_id$115 [2:1] = { \$mfip_id$115 [3], \$mfip_id$115 [3] };
  assign \$mfip_id$116 [2] = \$mfip_id$116 [3];
  assign \$mfip_id$117 [2] = \$mfip_id$117 [3];
  assign \$pc_mux_o$243 [0] = \$pc_mux_o$243 [1];
  assign debug_mode_o = debug_mode_q;
  assign flush_id_o = flush_id;
  assign instr_fetch_err_prio = instr_fetch_err;
  assign load_err_d = load_err_i;
  assign nmi_mode_o = nmi_mode_q;
  assign stall = stall_id_i;
  assign store_err_d = store_err_i;
  assign unused_irq_timer = irqs_i[17];
endmodule

/* src = "rtl/cve2/cve2_core.sv:15.8" */
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, core_busy_o, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i
, test_en_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, crash_dump_o);
  wire \$1 ;
  wire \$5 ;
  /* src = "rtl/cve2/cve2_core.sv:177.16" */
  wire [31:0] alu_adder_result_ex;
  /* src = "rtl/cve2/cve2_core.sv:174.16" */
  wire [31:0] alu_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:175.16" */
  wire [31:0] alu_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:173.16" */
  wire [6:0] alu_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:36.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_core.sv:146.16" */
  wire branch_decision;
  /* src = "rtl/cve2/cve2_core.sv:145.16" */
  wire [31:0] branch_target_ex;
  /* src = "rtl/cve2/cve2_core.sv:30.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_core.sv:106.40" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/cve2/cve2_core.sv:67.40" */
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  /* src = "rtl/cve2/cve2_core.sv:191.16" */
  wire csr_access;
  /* src = "rtl/cve2/cve2_core.sv:194.16" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_core.sv:226.26" */
  wire [31:0] csr_depc;
  /* src = "rtl/cve2/cve2_core.sv:226.16" */
  wire [31:0] csr_mepc;
  /* src = "rtl/cve2/cve2_core.sv:225.16" */
  wire csr_mstatus_mie;
  /* src = "rtl/cve2/cve2_core.sv:243.16" */
  wire csr_mstatus_tw;
  /* src = "rtl/cve2/cve2_core.sv:242.16" */
  wire [31:0] csr_mtval;
  /* src = "rtl/cve2/cve2_core.sv:241.16" */
  wire [31:0] csr_mtvec;
  /* src = "rtl/cve2/cve2_core.sv:240.16" */
  wire csr_mtvec_init;
  /* src = "rtl/cve2/cve2_core.sv:192.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_core.sv:193.16" */
  wire csr_op_en;
  /* src = "rtl/cve2/cve2_core.sv:229.17" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" */
  wire [135:0] csr_pmp_addr;
  /* src = "rtl/cve2/cve2_core.sv:230.17" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" */
  wire [23:0] csr_pmp_cfg;
  /* src = "rtl/cve2/cve2_core.sv:231.17" */
  /* unused_bits = "0 1 2" */
  wire [2:0] csr_pmp_mseccfg;
  /* src = "rtl/cve2/cve2_core.sv:195.16" */
  wire [31:0] csr_rdata;
  /* src = "rtl/cve2/cve2_core.sv:238.16" */
  wire csr_restore_dret_id;
  /* src = "rtl/cve2/cve2_core.sv:237.16" */
  wire csr_restore_mret_id;
  /* src = "rtl/cve2/cve2_core.sv:239.16" */
  wire csr_save_cause;
  /* src = "rtl/cve2/cve2_core.sv:236.16" */
  wire csr_save_id;
  /* src = "rtl/cve2/cve2_core.sv:235.16" */
  wire csr_save_if;
  /* src = "rtl/cve2/cve2_core.sv:196.16" */
  wire [31:0] csr_wdata;
  /* src = "rtl/cve2/cve2_core.sv:149.16" */
  wire ctrl_busy;
  /* src = "rtl/cve2/cve2_core.sv:52.40" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:51.40" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_core.sv:55.40" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_core.sv:48.40" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:54.40" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:47.40" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_core.sv:233.17" */
  wire data_req_out;
  /* src = "rtl/cve2/cve2_core.sv:49.40" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:53.40" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_core.sv:50.40" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_core.sv:249.16" */
  wire [2:0] debug_cause;
  /* src = "rtl/cve2/cve2_core.sv:250.16" */
  wire debug_csr_save;
  /* src = "rtl/cve2/cve2_core.sv:252.16" */
  wire debug_ebreakm;
  /* src = "rtl/cve2/cve2_core.sv:253.16" */
  wire debug_ebreaku;
  /* src = "rtl/cve2/cve2_core.sv:248.16" */
  wire debug_mode;
  /* src = "rtl/cve2/cve2_core.sv:66.40" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_core.sv:251.16" */
  wire debug_single_step;
  /* src = "rtl/cve2/cve2_core.sv:182.16" */
  wire div_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:184.16" */
  wire div_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:220.16" */
  wire en_wb;
  /* src = "rtl/cve2/cve2_core.sv:210.16" */
  wire ex_valid;
  /* src = "rtl/cve2/cve2_core.sv:135.16" */
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_core.sv:134.16" */
  wire [1:0] exc_pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:105.40" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_core.sv:799.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" */
  wire [135:0] \g_no_pmp.unused_csr_pmp_addr ;
  /* src = "rtl/cve2/cve2_core.sv:800.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" */
  wire [23:0] \g_no_pmp.unused_csr_pmp_cfg ;
  /* src = "rtl/cve2/cve2_core.sv:801.19" */
  /* unused_bits = "0 1 2" */
  wire [2:0] \g_no_pmp.unused_csr_pmp_mseccfg ;
  /* src = "rtl/cve2/cve2_core.sv:798.16" */
  /* unused_bits = "0 1" */
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  /* src = "rtl/cve2/cve2_core.sv:35.40" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_core.sv:209.16" */
  wire id_in_ready;
  /* src = "rtl/cve2/cve2_core.sv:150.16" */
  wire if_busy;
  /* src = "rtl/cve2/cve2_core.sv:123.16" */
  wire illegal_c_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:197.16" */
  wire illegal_csr_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:273.16" */
  /* unused_bits = "0" */
  wire illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:126.16" */
  wire [67:0] imd_val_d_ex;
  /* src = "rtl/cve2/cve2_core.sv:127.16" */
  wire [67:0] imd_val_q_ex;
  /* src = "rtl/cve2/cve2_core.sv:128.16" */
  wire [1:0] imd_val_we_ex;
  /* src = "rtl/cve2/cve2_core.sv:42.40" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:44.40" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_core.sv:121.16" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_core.sv:122.16" */
  wire instr_fetch_err_plus2;
  /* src = "rtl/cve2/cve2_core.sv:130.16" */
  wire instr_first_cycle_id;
  /* src = "rtl/cve2/cve2_core.sv:40.40" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:258.16" */
  /* unused_bits = "0" */
  wire instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:119.16" */
  wire instr_is_compressed_id;
  /* src = "rtl/cve2/cve2_core.sv:114.16" */
  /* unused_bits = "0" */
  wire instr_new_id;
  /* src = "rtl/cve2/cve2_core.sv:120.16" */
  wire instr_perf_count_id;
  /* src = "rtl/cve2/cve2_core.sv:116.16" */
  wire [31:0] instr_rdata_alu_id;
  /* src = "rtl/cve2/cve2_core.sv:118.16" */
  wire [15:0] instr_rdata_c_id;
  /* src = "rtl/cve2/cve2_core.sv:43.40" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:115.16" */
  wire [31:0] instr_rdata_id;
  /* src = "rtl/cve2/cve2_core.sv:217.16" */
  wire instr_req_gated;
  /* src = "rtl/cve2/cve2_core.sv:216.16" */
  wire instr_req_int;
  /* src = "rtl/cve2/cve2_core.sv:39.40" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_core.sv:41.40" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:131.16" */
  wire instr_valid_clear;
  /* src = "rtl/cve2/cve2_core.sv:113.16" */
  wire instr_valid_id;
  /* src = "rtl/cve2/cve2_core.sv:60.40" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_core.sv:61.40" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_core.sv:62.40" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_core.sv:63.40" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_core.sv:58.40" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_core.sv:59.40" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_core.sv:224.16" */
  wire [18:0] irqs;
  /* src = "rtl/cve2/cve2_core.sv:141.16" */
  wire lsu_addr_incr_req;
  /* src = "rtl/cve2/cve2_core.sv:142.16" */
  wire [31:0] lsu_addr_last;
  /* src = "rtl/cve2/cve2_core.sv:151.16" */
  wire lsu_busy;
  /* src = "rtl/cve2/cve2_core.sv:137.16" */
  wire lsu_load_err;
  /* src = "rtl/cve2/cve2_core.sv:205.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_core.sv:213.16" */
  wire lsu_resp_err;
  /* src = "rtl/cve2/cve2_core.sv:212.16" */
  wire lsu_resp_valid;
  /* src = "rtl/cve2/cve2_core.sv:204.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_core.sv:138.16" */
  wire lsu_store_err;
  /* src = "rtl/cve2/cve2_core.sv:203.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_core.sv:206.16" */
  wire [31:0] lsu_wdata;
  /* src = "rtl/cve2/cve2_core.sv:202.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_core.sv:181.16" */
  wire mult_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:183.16" */
  wire mult_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:187.16" */
  wire [31:0] multdiv_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:188.16" */
  wire [31:0] multdiv_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:185.16" */
  wire [1:0] multdiv_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:186.16" */
  wire [1:0] multdiv_signed_mode_ex;
  /* src = "rtl/cve2/cve2_core.sv:223.16" */
  wire nmi_mode;
  /* src = "rtl/cve2/cve2_core.sv:125.16" */
  wire [31:0] pc_id;
  /* src = "rtl/cve2/cve2_core.sv:124.16" */
  wire [31:0] pc_if;
  /* src = "rtl/cve2/cve2_core.sv:133.16" */
  wire [2:0] pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:132.16" */
  wire pc_set;
  /* src = "rtl/cve2/cve2_core.sv:267.16" */
  wire perf_branch;
  /* src = "rtl/cve2/cve2_core.sv:265.16" */
  wire perf_div_wait;
  /* src = "rtl/cve2/cve2_core.sv:263.16" */
  wire perf_dside_wait;
  /* src = "rtl/cve2/cve2_core.sv:261.16" */
  wire perf_instr_ret_compressed_wb;
  /* src = "rtl/cve2/cve2_core.sv:260.16" */
  wire perf_instr_ret_wb;
  /* src = "rtl/cve2/cve2_core.sv:262.16" */
  wire perf_iside_wait;
  /* src = "rtl/cve2/cve2_core.sv:266.16" */
  wire perf_jump;
  /* src = "rtl/cve2/cve2_core.sv:269.16" */
  wire perf_load;
  /* src = "rtl/cve2/cve2_core.sv:270.16" */
  wire perf_store;
  /* src = "rtl/cve2/cve2_core.sv:268.16" */
  wire perf_tbranch;
  /* src = "rtl/cve2/cve2_core.sv:264.16" */
  wire perf_wfi_wait;
  /* src = "rtl/cve2/cve2_core.sv:232.17" */
  wire [2:0] pmp_req_err;
  /* src = "rtl/cve2/cve2_core.sv:244.16" */
  wire [1:0] priv_mode_id;
  /* src = "rtl/cve2/cve2_core.sv:245.16" */
  /* unused_bits = "0 1" */
  wire [1:0] priv_mode_lsu;
  /* src = "rtl/cve2/cve2_core.sv:178.16" */
  wire [31:0] result_ex;
  /* src = "rtl/cve2/cve2_core.sv:154.16" */
  wire [4:0] rf_raddr_a;
  /* src = "rtl/cve2/cve2_core.sv:156.16" */
  wire [4:0] rf_raddr_b;
  /* src = "rtl/cve2/cve2_core.sv:155.16" */
  wire [31:0] rf_rdata_a;
  /* src = "rtl/cve2/cve2_core.sv:157.16" */
  wire [31:0] rf_rdata_b;
  /* src = "rtl/cve2/cve2_core.sv:158.16" */
  /* unused_bits = "0" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_core.sv:159.16" */
  /* unused_bits = "0" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_core.sv:168.16" */
  wire [4:0] rf_waddr_id;
  /* src = "rtl/cve2/cve2_core.sv:160.16" */
  wire [4:0] rf_waddr_wb;
  /* src = "rtl/cve2/cve2_core.sv:169.16" */
  wire [31:0] rf_wdata_id;
  /* src = "rtl/cve2/cve2_core.sv:164.16" */
  wire [31:0] rf_wdata_lsu;
  /* src = "rtl/cve2/cve2_core.sv:161.16" */
  wire [31:0] rf_wdata_wb;
  /* src = "rtl/cve2/cve2_core.sv:170.16" */
  wire rf_we_id;
  /* src = "rtl/cve2/cve2_core.sv:166.16" */
  wire rf_we_lsu;
  /* src = "rtl/cve2/cve2_core.sv:165.16" */
  wire rf_we_wb;
  /* src = "rtl/cve2/cve2_core.sv:31.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_core.sv:33.40" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_core.sv:254.16" */
  wire trigger_match;
  /* src = "rtl/cve2/cve2_core.sv:273.33" */
  /* unused_bits = "0" */
  wire unused_illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:1342.30" */
  /* unused_bits = "0" */
  wire unused_instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:1342.9" */
  /* unused_bits = "0" */
  wire unused_instr_new_id;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ctrl_busy),
    .B(if_busy),
    .Y(\$1 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(lsu_load_err),
    .B(lsu_store_err),
    .Y(lsu_resp_err)
  );
  \$mux  #(
    .WIDTH(32'd12)
  ) \$14  (
    .A(12'h000),
    .B(alu_operand_b_ex[11:0]),
    .S(csr_access),
    .Y(csr_addr)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(lsu_busy),
    .Y(core_busy_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(instr_valid_id),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(id_in_ready),
    .B(\$5 ),
    .Y(perf_iside_wait)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:680.5" */
  \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(alu_operand_a_ex),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(priv_mode_lsu),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  /* src = "rtl/cve2/cve2_core.sv:490.5" */
  \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:357.5" */
  \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_gated),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  /* src = "rtl/cve2/cve2_core.sv:290.5" */
  \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:532.24" */
  \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_out),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:646.5" */
  \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  /* src = "rtl/cve2/cve2_core.sv:578.5" */
  \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc };
  assign csr_wdata = alu_operand_a_ex;
  assign data_req_o = data_req_out;
  assign \g_no_pmp.unused_csr_pmp_addr  = csr_pmp_addr;
  assign \g_no_pmp.unused_csr_pmp_cfg  = csr_pmp_cfg;
  assign \g_no_pmp.unused_csr_pmp_mseccfg  = csr_pmp_mseccfg;
  assign \g_no_pmp.unused_priv_lvl_ls  = priv_mode_lsu;
  assign instr_req_int = instr_req_gated;
  assign pmp_req_err = 3'h0;
  assign unused_illegal_insn_id = illegal_insn_id;
  assign unused_instr_id_done = instr_id_done;
  assign unused_instr_new_id = instr_new_id;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17540 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17542 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17549 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17544 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17551 ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter_q),
    .B(1'h1),
    .Y(counter_upd)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(we)
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17539  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17544 ),
    .Q(counter_q[63:32])
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17546  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17551 ),
    .Q(counter_q[31:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17541  (
    .A({ counter_inc_i, we }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17540 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17543  (
    .A({ counterh_we_i, we }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17542 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17550  (
    .A({ counterh_we_i, we }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17549 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17545  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17542 , \$auto$opt_dff.cc:194:make_patterns_logic$17540  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17544 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17552  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17549 , \$auto$opt_dff.cc:194:make_patterns_logic$17540  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17551 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3845  (
    .A(counter_upd),
    .B(counter_load),
    .S(we),
    .Y(counter_d)
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3848  (
    .A({ 32'hxxxxxxxx, counter_val_i }),
    .B({ counter_val_i, 32'hxxxxxxxx }),
    .S(counterh_we_i),
    .Y(counter_load)
  );
  assign counter = counter_q;
  assign counter_val_o = counter_q;
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17554 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17556 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17563 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17558 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17565 ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter_q),
    .B(1'h1),
    .Y(counter_val_upd_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(we)
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17553  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17558 ),
    .Q(counter_q[63:32])
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17560  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17565 ),
    .Q(counter_q[31:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17555  (
    .A({ counter_inc_i, we }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17554 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17557  (
    .A({ counterh_we_i, we }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17556 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17564  (
    .A({ counterh_we_i, we }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17563 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17559  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17556 , \$auto$opt_dff.cc:194:make_patterns_logic$17554  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17558 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17566  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17554 , \$auto$opt_dff.cc:194:make_patterns_logic$17563  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17565 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3831  (
    .A(counter_val_upd_o),
    .B(counter_load),
    .S(we),
    .Y(counter_d)
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$3834  (
    .A({ 32'hxxxxxxxx, counter_val_i }),
    .B({ counter_val_i, 32'hxxxxxxxx }),
    .S(counterh_we_i),
    .Y(counter_load)
  );
  assign counter = counter_q;
  assign counter_upd = counter_val_upd_o;
  assign counter_val_o = counter_q;
endmodule

/* src = "rtl/cve2/cve2_cs_registers.sv:15.8" */
module \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i (clk_i, rst_ni, boot_addr_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire \$152 ;
  wire \$16 ;
  wire [31:0] \$181 ;
  wire [31:0] \$183 ;
  wire [31:0] \$185 ;
  wire \$192 ;
  wire \$194 ;
  wire \$208 ;
  wire \$212 ;
  wire \$214 ;
  wire \$219 ;
  wire \$221 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$241 ;
  wire \$245 ;
  wire \$248 ;
  wire \$3 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17568 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17123 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16804 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16806 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16808 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$1003 ;
  /* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$auto$rtlil.cc:3004:And$16668 ;
  wire \$auto$rtlil.cc:3011:Eq$1000 ;
  wire \$auto$rtlil.cc:3011:Eq$1001 ;
  wire \$auto$rtlil.cc:3011:Eq$1002 ;
  wire \$auto$rtlil.cc:3011:Eq$1022 ;
  wire \$auto$rtlil.cc:3011:Eq$1023 ;
  wire \$auto$rtlil.cc:3011:Eq$1024 ;
  wire \$auto$rtlil.cc:3011:Eq$983 ;
  wire \$auto$rtlil.cc:3011:Eq$984 ;
  wire \$auto$rtlil.cc:3011:Eq$985 ;
  wire \$auto$rtlil.cc:3011:Eq$986 ;
  wire \$auto$rtlil.cc:3011:Eq$987 ;
  wire \$auto$rtlil.cc:3011:Eq$988 ;
  wire \$auto$rtlil.cc:3011:Eq$989 ;
  wire \$auto$rtlil.cc:3011:Eq$990 ;
  wire \$auto$rtlil.cc:3011:Eq$991 ;
  wire \$auto$rtlil.cc:3011:Eq$992 ;
  wire \$auto$rtlil.cc:3011:Eq$993 ;
  wire \$auto$rtlil.cc:3011:Eq$994 ;
  wire \$auto$rtlil.cc:3011:Eq$995 ;
  wire \$auto$rtlil.cc:3011:Eq$996 ;
  wire \$auto$rtlil.cc:3011:Eq$997 ;
  wire \$auto$rtlil.cc:3011:Eq$998 ;
  wire \$auto$rtlil.cc:3011:Eq$999 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$971 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$976 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$auto$wreduce.cc:514:run$16950 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$auto$wreduce.cc:514:run$16951 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [5:0] \$auto$wreduce.cc:514:run$16952 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$dcsr_d$101 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [31:0] \$dcsr_d$117 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [1:0] \$dcsr_d[1:0]$145 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  wire [1:0] \$dcsr_d[1:0]$78 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [2:0] \$dcsr_d[8:6]$146 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dcsr_en$102 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$dcsr_en$118 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$dcsr_en$147 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$depc_d$148 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$depc_en$103 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$depc_en$119 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$depc_en$149 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch0_en$104 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch1_en$105 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  wire [31:0] \$exception_pc$125 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  wire \$illegal_csr$39 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [6:0] \$mcause_d$132 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [6:0] \$mcause_d$141 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [6:0] \$mcause_d$157 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mcause_en$114 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mcause_en$133 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mcause_en$142 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mcause_en$158 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcause_en$98 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcountinhibit_we$106 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mepc_d$130 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mepc_d$139 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [31:0] \$mepc_d$155 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mepc_en$113 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mepc_en$131 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mepc_en$140 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mepc_en$156 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mepc_en$97 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mie_en$95 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mscratch_en$96 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstack_en$150 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [5:0] \$mstatus_d$93 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  wire \$mstatus_d[1]$153 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  wire [1:0] \$mstatus_d[3:2]$71 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [2:0] \$mstatus_d[4:2]$154 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [3:0] \$mstatus_d[5:2]$128 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [3:0] \$mstatus_d[5:2]$137 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mstatus_en$110 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mstatus_en$129 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstatus_en$138 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mstatus_en$94 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mtval_d$134 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mtval_d$143 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mtval_en$115 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mtval_en$135 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mtval_en$144 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtval_en$99 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtvec_en$100 ;
  wire \$procmux$11228_CMP ;
  wire [30:0] \$procmux$11725_CMP ;
  wire \$procmux$11725_CTRL ;
  wire [30:0] \$procmux$11731_CMP ;
  wire \$procmux$11731_CTRL ;
  wire \$procmux$11801_CMP ;
  wire \$procmux$12049_CMP ;
  wire \$procmux$12050_CMP ;
  wire \$procmux$12051_CMP ;
  wire \$procmux$12052_CMP ;
  wire [28:0] \$procmux$12058_CMP ;
  wire \$procmux$12058_CTRL ;
  wire \$procmux$12086_CMP ;
  wire \$procmux$12092_CMP ;
  wire \$procmux$12094_CMP ;
  wire [1:0] \$procmux$12095_CMP ;
  wire \$procmux$12096_CMP ;
  wire \$procmux$12098_CMP ;
  wire \$procmux$12099_CMP ;
  wire \$procmux$12100_CMP ;
  wire \$procmux$12101_CMP ;
  wire \$procmux$12102_CMP ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:43.32" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:98.32" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:99.32" */
  input branch_taken_i;
  wire branch_taken_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:29.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:46.32" */
  input csr_access_i;
  wire csr_access_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:246.32" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:47.32" */
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:73.32" */
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:88.32" */
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:62.32" */
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:61.32" */
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:38.32" */
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:89.32" */
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:42.32" */
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:41.32" */
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:50.32" */
  input csr_op_en_i;
  wire csr_op_en_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:49.32" */
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:66.34" */
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:65.34" */
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:67.34" */
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:228.16" */
  wire [31:0] csr_rdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:51.32" */
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:86.32" */
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:85.32" */
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:87.32" */
  input csr_save_cause_i;
  wire csr_save_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:84.32" */
  input csr_save_id_i;
  wire csr_save_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:83.32" */
  input csr_save_if_i;
  wire csr_save_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:48.32" */
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:227.16" */
  wire [31:0] csr_wdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:229.16" */
  wire csr_we_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:230.16" */
  wire csr_wr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.24" */
  wire [31:0] dcsr_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:181.16" */
  wire dcsr_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.16" */
  wire [31:0] dcsr_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:71.32" */
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:72.32" */
  input debug_csr_save_i;
  wire debug_csr_save_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:75.32" */
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:76.32" */
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:70.32" */
  input debug_mode_i;
  wire debug_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:74.32" */
  output debug_single_step_o;
  wire debug_single_step_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.24" */
  wire [31:0] depc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:183.16" */
  wire depc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.16" */
  wire [31:0] depc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:104.32" */
  input div_wait_i;
  wire div_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.16" */
  wire dscratch0_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:184.16" */
  wire [31:0] dscratch0_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.30" */
  wire dscratch1_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:185.16" */
  wire [31:0] dscratch1_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:102.32" */
  input dside_wait_i;
  wire dside_wait_i;
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9" */
  wire [9:0] \g_mcountinhibit_reduced.unused_mhphcounter_incr ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1290.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1291.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounterh_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1325.31" */
  wire \gen_trigger_regs.selected_tmatch_control ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1326.31" */
  wire [31:0] \gen_trigger_regs.selected_tmatch_value ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1321.31" */
  wire \gen_trigger_regs.tmatch_control_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1322.31" */
  wire \gen_trigger_regs.tmatch_control_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1330.31" */
  wire \gen_trigger_regs.tmatch_control_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1323.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1324.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1331.31" */
  wire \gen_trigger_regs.tmatch_value_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1333.31" */
  wire \gen_trigger_regs.trigger_match ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.31" */
  wire \gen_trigger_regs.tselect_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.42" */
  wire \gen_trigger_regs.tselect_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1329.31" */
  wire \gen_trigger_regs.tselect_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:33.32" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:233.16" */
  wire illegal_csr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:90.32" */
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:234.16" */
  wire illegal_csr_priv;
  /* src = "rtl/cve2/cve2_cs_registers.sv:235.16" */
  wire illegal_csr_write;
  /* src = "rtl/cve2/cve2_cs_registers.sv:95.32" */
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:94.32" */
  input instr_ret_i;
  wire instr_ret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:56.32" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:57.32" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:59.32" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:54.32" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:55.32" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:60.32" */
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:96.32" */
  input iside_wait_i;
  wire iside_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:97.32" */
  input jump_i;
  wire jump_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.26" */
  wire [6:0] mcause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:174.16" */
  wire mcause_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.16" */
  wire [6:0] mcause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:201.32" */
  wire [31:0] mcountinhibit;
  /* src = "rtl/cve2/cve2_cs_registers.sv:203.49" */
  wire [2:0] mcountinhibit_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:204.32" */
  wire mcountinhibit_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:100.32" */
  input mem_load_i;
  wire mem_load_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:101.32" */
  input mem_store_i;
  wire mem_store_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.24" */
  wire [31:0] mepc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:172.16" */
  wire mepc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.16" */
  wire [31:0] mepc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:209.16" */
  wire [2047:0] mhpmcounter;
  /* src = "rtl/cve2/cve2_cs_registers.sv:214.16" */
  wire [4:0] mhpmcounter_idx;
  /* unused_bits = "3 4 5 6 7 8 9 10 11 12" */
  wire [12:0] mhpmcounter_incr;
  /* unused_bits = "1" */
  wire [2:0] mhpmcounter_we;
  /* unused_bits = "1" */
  wire [2:0] mhpmcounterh_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:213.16" */
  wire [1023:0] mhpmevent;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.23" */
  wire [18:0] mie_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:168.16" */
  wire mie_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.16" */
  wire [18:0] mie_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:219.16" */
  wire [63:0] minstret_raw;
  /* src = "rtl/cve2/cve2_cs_registers.sv:179.16" */
  wire [18:0] mip;
  /* src = "rtl/cve2/cve2_cs_registers.sv:170.16" */
  wire mscratch_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:169.16" */
  wire [31:0] mscratch_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.32" */
  wire [6:0] mstack_cause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.16" */
  wire [6:0] mstack_cause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.26" */
  wire [2:0] mstack_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:191.16" */
  wire mstack_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.30" */
  wire [31:0] mstack_epc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.16" */
  wire [31:0] mstack_epc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.16" */
  wire [2:0] mstack_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.27" */
  wire [5:0] mstatus_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:166.16" */
  wire mstatus_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.16" */
  wire [5:0] mstatus_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.25" */
  wire [31:0] mtval_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:176.16" */
  wire mtval_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.16" */
  wire [31:0] mtval_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.25" */
  wire [31:0] mtvec_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:178.16" */
  wire mtvec_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.16" */
  wire [31:0] mtvec_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:58.32" */
  input nmi_mode_i;
  wire nmi_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:80.32" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:79.32" */
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:196.32" */
  wire [511:0] pmp_addr_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:197.32" */
  wire [127:0] pmp_cfg_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:198.32" */
  wire [2:0] pmp_mseccfg;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.28" */
  wire [1:0] priv_lvl_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.16" */
  wire [1:0] priv_lvl_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:36.32" */
  output [1:0] priv_mode_id_o;
  wire [1:0] priv_mode_id_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:37.32" */
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:30.32" */
  input rst_ni;
  wire rst_ni;
  wire [2:0] tmatch_control_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:224.16" */
  wire [31:0] tmatch_value_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:77.32" */
  output trigger_match_o;
  wire trigger_match_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:222.16" */
  wire [31:0] tselect_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:237.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:238.16" */
  wire [2:0] unused_csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:217.16" */
  wire unused_mhpmcounter_incr_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:215.16" */
  /* unused_bits = "0" */
  wire unused_mhpmcounter_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:216.16" */
  /* unused_bits = "0" */
  wire unused_mhpmcounterh_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:103.32" */
  input wfi_wait_i;
  wire wfi_wait_i;
  reg [1:0] \$auto$memory_bmux2rom.cc:63:execute$18542  [31:0];
  initial begin
    \$auto$memory_bmux2rom.cc:63:execute$18542 [0] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [1] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [2] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [3] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [4] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [5] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [6] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [7] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [8] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [9] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [10] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [11] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [12] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [13] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [14] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [15] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [16] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [17] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [18] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [19] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [20] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [21] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [22] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [23] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [24] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [25] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [26] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [27] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [28] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [29] = 2'h2;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [30] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$18542 [31] = 2'h1;
  end
  assign { \$auto$rtlil.cc:3092:Mux$971 [2], \$auto$rtlil.cc:3092:Mux$971 [0] } = \$auto$memory_bmux2rom.cc:63:execute$18542 [\$auto$opt_expr.cc:205:group_cell_inputs$17123 ];
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(csr_addr_i[9:8]),
    .B(priv_lvl_q),
    .Y(illegal_csr_priv)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(csr_access_i),
    .B(\$9 ),
    .Y(illegal_csr_insn_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(debug_mode_i),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(mstatus_q[3:2]),
    .B(2'h3),
    .Y(\$152 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$178  (
    .A(priv_lvl_q),
    .B(mstatus_q[3:2]),
    .S(mstatus_q[1]),
    .Y(priv_mode_lsu_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$180  (
    .A(csr_wdata_i),
    .B(csr_rdata_o),
    .Y(\$181 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$182  (
    .A(csr_wdata_i),
    .Y(\$183 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$184  (
    .A(\$183 ),
    .B(csr_rdata_o),
    .Y(\$185 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(csr_op_i),
    .B(1'h1),
    .Y(\$auto$rtlil.cc:3011:Eq$1022 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(csr_op_i),
    .B(2'h2),
    .Y(\$auto$rtlil.cc:3011:Eq$1023 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(csr_op_i),
    .B(2'h3),
    .Y(\$auto$rtlil.cc:3011:Eq$1024 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A({ \$auto$rtlil.cc:3011:Eq$1024 , \$auto$rtlil.cc:3011:Eq$1023 , \$auto$rtlil.cc:3011:Eq$1022  }),
    .Y(csr_wr)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(csr_wr),
    .B(csr_op_en_i),
    .Y(\$192 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(illegal_csr_insn_o),
    .Y(\$194 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$192 ),
    .B(\$194 ),
    .Y(csr_we_int)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd19),
    .Y_WIDTH(32'd19)
  ) \$197  (
    .A({ irq_software_i, irq_timer_i, irq_external_i, irq_fast_i }),
    .B(mie_q),
    .Y(irqs_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(irqs_o),
    .Y(irq_pending_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(csr_addr_i[11:10]),
    .B(2'h3),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(mcountinhibit_q[0]),
    .Y(\$208 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$211  (
    .A(mcountinhibit_q[2]),
    .Y(\$212 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$213  (
    .A(instr_ret_i),
    .B(\$212 ),
    .Y(\$214 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A(csr_we_int),
    .B(debug_mode_i),
    .Y(\$219 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(csr_addr_i),
    .B(11'h7a0),
    .Y(\$221 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(\$219 ),
    .B(\$221 ),
    .Y(\gen_trigger_regs.tselect_we )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(\gen_trigger_regs.tselect_q ),
    .Y(\$225 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(\$225 ),
    .B(csr_we_int),
    .Y(\$227 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(\$227 ),
    .B(debug_mode_i),
    .Y(\$229 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(csr_addr_i),
    .B(11'h7a1),
    .Y(\$231 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(\$229 ),
    .B(\$231 ),
    .Y(\gen_trigger_regs.tmatch_control_we )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(csr_addr_i),
    .B(11'h7a2),
    .Y(\$241 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\$229 ),
    .B(\$241 ),
    .Y(\gen_trigger_regs.tmatch_value_we )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(\$245 ),
    .B(csr_wdata_int[0]),
    .Y(\gen_trigger_regs.tselect_d )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(pc_if_i),
    .B(\gen_trigger_regs.tmatch_value_q ),
    .Y(\$248 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(\gen_trigger_regs.tmatch_control_q ),
    .B(\$248 ),
    .Y(trigger_match_o)
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$30  (
    .A({ mhpmcounter[2047:1984], 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 }),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17123 ),
    .Y(\$auto$rtlil.cc:3092:Mux$976 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .B(csr_wr),
    .Y(illegal_csr_write)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(csr_addr_i),
    .B(10'h3a0),
    .Y(\$auto$rtlil.cc:3011:Eq$983 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(csr_addr_i),
    .B(10'h3a1),
    .Y(\$auto$rtlil.cc:3011:Eq$984 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(csr_addr_i),
    .B(10'h3a2),
    .Y(\$auto$rtlil.cc:3011:Eq$985 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(csr_addr_i),
    .B(10'h3a3),
    .Y(\$auto$rtlil.cc:3011:Eq$986 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(csr_addr_i),
    .B(10'h3b0),
    .Y(\$auto$rtlil.cc:3011:Eq$987 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(csr_addr_i),
    .B(10'h3b1),
    .Y(\$auto$rtlil.cc:3011:Eq$988 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(csr_addr_i),
    .B(10'h3b2),
    .Y(\$auto$rtlil.cc:3011:Eq$989 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(csr_addr_i),
    .B(10'h3b3),
    .Y(\$auto$rtlil.cc:3011:Eq$990 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(csr_addr_i),
    .B(10'h3b4),
    .Y(\$auto$rtlil.cc:3011:Eq$991 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(csr_addr_i),
    .B(10'h3b5),
    .Y(\$auto$rtlil.cc:3011:Eq$992 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(csr_addr_i),
    .B(10'h3b6),
    .Y(\$auto$rtlil.cc:3011:Eq$993 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(csr_addr_i),
    .B(10'h3b7),
    .Y(\$auto$rtlil.cc:3011:Eq$994 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(csr_addr_i),
    .B(10'h3b8),
    .Y(\$auto$rtlil.cc:3011:Eq$995 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(csr_addr_i),
    .B(10'h3b9),
    .Y(\$auto$rtlil.cc:3011:Eq$996 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(csr_addr_i),
    .B(10'h3ba),
    .Y(\$auto$rtlil.cc:3011:Eq$997 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_addr_i),
    .B(10'h3bb),
    .Y(\$auto$rtlil.cc:3011:Eq$998 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(csr_addr_i),
    .B(10'h3bc),
    .Y(\$auto$rtlil.cc:3011:Eq$999 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(csr_addr_i),
    .B(10'h3bd),
    .Y(\$auto$rtlil.cc:3011:Eq$1000 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(csr_addr_i),
    .B(10'h3be),
    .Y(\$auto$rtlil.cc:3011:Eq$1001 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(csr_addr_i),
    .B(10'h3bf),
    .Y(\$auto$rtlil.cc:3011:Eq$1002 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(illegal_csr),
    .B(illegal_csr_write),
    .Y(\$7 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd20),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A({ \$auto$rtlil.cc:3011:Eq$1002 , \$auto$rtlil.cc:3011:Eq$1001 , \$auto$rtlil.cc:3011:Eq$1000 , \$auto$rtlil.cc:3011:Eq$999 , \$auto$rtlil.cc:3011:Eq$998 , \$auto$rtlil.cc:3011:Eq$997 , \$auto$rtlil.cc:3011:Eq$996 , \$auto$rtlil.cc:3011:Eq$995 , \$auto$rtlil.cc:3011:Eq$994 , \$auto$rtlil.cc:3011:Eq$993 , \$auto$rtlil.cc:3011:Eq$992 , \$auto$rtlil.cc:3011:Eq$991 , \$auto$rtlil.cc:3011:Eq$990 , \$auto$rtlil.cc:3011:Eq$989 , \$auto$rtlil.cc:3011:Eq$988 , \$auto$rtlil.cc:3011:Eq$987 , \$auto$rtlil.cc:3011:Eq$986 , \$auto$rtlil.cc:3011:Eq$985 , \$auto$rtlil.cc:3011:Eq$984 , \$auto$rtlil.cc:3011:Eq$983  }),
    .Y(\$auto$rtlil.cc:2964:ReduceBool$1003 )
  );
  \$mux  #(
    .WIDTH(32'd24)
  ) \$64  (
    .A(csr_wdata_int[31:8]),
    .B(boot_addr_i[31:8]),
    .S(csr_mtvec_init_i),
    .Y(mtvec_d[31:8])
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(csr_wdata_int[12:11]),
    .B(2'h3),
    .Y(\$66 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(csr_wdata_int[12:11]),
    .Y(\$68 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$66 ),
    .B(\$68 ),
    .Y(\$70 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(csr_wdata_int[1:0]),
    .B(2'h3),
    .Y(\$73 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(csr_wdata_int[1:0]),
    .Y(\$75 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(\$75 ),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .B(illegal_csr_priv),
    .Y(\$9 )
  );
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$83  (
    .A(1'h1),
    .S(csr_addr_i[4:0]),
    .Y(\$auto$rtlil.cc:3004:And$16668 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:704.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h3),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17567  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(priv_lvl_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17568 ),
    .Q(priv_lvl_q)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1303.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17571  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ csr_wdata_int[2], csr_wdata_int[0] }),
    .EN(mcountinhibit_we),
    .Q({ mcountinhibit_q[2], mcountinhibit_q[0] })
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17569  (
    .A({ csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17568 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17127  (
    .A(csr_wdata_int),
    .Y(\$245 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17124  (
    .A(csr_addr_i[4:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17123 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd137),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16803  (
    .A({ \$procmux$12102_CMP , \$procmux$12101_CMP , \$procmux$12100_CMP , \$procmux$12099_CMP , \$procmux$12098_CMP , \$procmux$12096_CMP , \$procmux$12095_CMP , \$procmux$12094_CMP , \$procmux$12092_CMP , \$procmux$12086_CMP , \$procmux$12058_CMP , \$procmux$12052_CMP , \$procmux$12051_CMP , \$procmux$12050_CMP , \$procmux$12049_CMP , \$procmux$11801_CMP , \$procmux$11731_CMP , \$procmux$11725_CMP , \$mcountinhibit_we$106 , \$mtval_en$99 , \$mcause_en$98 , \$mepc_en$97 , \$mscratch_en$96 , \$mie_en$95 , \$mstatus_en$94 , \$auto$rtlil.cc:3011:Eq$1002 , \$auto$rtlil.cc:3011:Eq$1001 , \$auto$rtlil.cc:3011:Eq$1000 , \$auto$rtlil.cc:3011:Eq$999 , \$auto$rtlil.cc:3011:Eq$998 , \$auto$rtlil.cc:3011:Eq$997 , \$auto$rtlil.cc:3011:Eq$996 , \$auto$rtlil.cc:3011:Eq$995 , \$auto$rtlil.cc:3011:Eq$994 , \$auto$rtlil.cc:3011:Eq$993 , \$auto$rtlil.cc:3011:Eq$992 , \$auto$rtlil.cc:3011:Eq$991 , \$auto$rtlil.cc:3011:Eq$990 , \$auto$rtlil.cc:3011:Eq$989 , \$auto$rtlil.cc:3011:Eq$988 , \$auto$rtlil.cc:3011:Eq$987 , \$auto$rtlil.cc:3011:Eq$986 , \$auto$rtlil.cc:3011:Eq$985 , \$auto$rtlil.cc:3011:Eq$984 , \$auto$rtlil.cc:3011:Eq$983 , \$241 , \$231 , \$221  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16804 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16805  (
    .A({ \$dscratch1_en$105 , \$dscratch0_en$104 , \$depc_en$103 , \$dcsr_en$102  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16806 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16807  (
    .A({ \$procmux$11228_CMP , \$auto$rtlil.cc:3011:Eq$1022  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16808 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$11227  (
    .A(\$181 ),
    .B({ \$185 , csr_wdata_i }),
    .S({ \$auto$rtlil.cc:3011:Eq$1024 , \$auto$opt_reduce.cc:137:opt_pmux$16808  }),
    .Y(csr_wdata_int)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11228_CMP0  (
    .A(csr_op_i),
    .Y(\$procmux$11228_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$11238  (
    .A(\$auto$wreduce.cc:514:run$16952 [5:2]),
    .B({ \$mstatus_d[5:2]$137 , mstatus_q[4], \$mstatus_d[4:2]$154  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mstatus_d[5:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11246  (
    .A(\$mcause_en$114 ),
    .B(nmi_mode_i),
    .Y(\$mcause_en$158 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11254  (
    .A({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .B(mstack_cause_q),
    .S(nmi_mode_i),
    .Y(\$mcause_d$157 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11262  (
    .A(\$mepc_en$113 ),
    .B(nmi_mode_i),
    .Y(\$mepc_en$156 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11270  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(mstack_epc_q),
    .S(nmi_mode_i),
    .Y(\$mepc_d$155 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:677.11-677.33|rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11277  (
    .A(\$auto$wreduce.cc:514:run$16952 [1]),
    .B(1'h0),
    .S(\$152 ),
    .Y(\$mstatus_d[1]$153 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11285  (
    .A(\$auto$wreduce.cc:514:run$16952 [1]),
    .B(\$mstatus_d[1]$153 ),
    .S(csr_restore_mret_i),
    .Y(mstatus_d[1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11290  (
    .A(3'h4),
    .B(mstack_q),
    .S(nmi_mode_i),
    .Y(\$mstatus_d[4:2]$154 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11299  (
    .A(1'h1),
    .B(\$mtval_en$115 ),
    .S(debug_mode_i),
    .Y(\$mtval_en$135 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11311  (
    .A(csr_mtval_i),
    .B(csr_wdata_int),
    .S(debug_mode_i),
    .Y(\$mtval_d$134 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11323  (
    .A(1'h1),
    .B(\$mcause_en$114 ),
    .S(debug_mode_i),
    .Y(\$mcause_en$133 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11335  (
    .A(csr_mcause_i),
    .B({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .S(debug_mode_i),
    .Y(\$mcause_d$132 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11347  (
    .A(1'h1),
    .B(\$mepc_en$113 ),
    .S(debug_mode_i),
    .Y(\$mepc_en$131 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11359  (
    .A(\$exception_pc$125 ),
    .B({ csr_wdata_int[31:1], 1'h0 }),
    .S(debug_mode_i),
    .Y(\$mepc_d$130 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11371  (
    .A(1'h1),
    .B(\$mstatus_en$110 ),
    .S(debug_mode_i),
    .Y(\$mstatus_en$129 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11383  (
    .A({ 1'h0, mstatus_q[5], priv_lvl_q }),
    .B(\$auto$wreduce.cc:514:run$16952 [5:2]),
    .S(debug_mode_i),
    .Y(\$mstatus_d[5:2]$128 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11397  (
    .A(\$16 ),
    .B(1'h0),
    .S(debug_csr_save_i),
    .Y(\$mstack_en$150 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11407  (
    .A(\$depc_en$119 ),
    .B(debug_csr_save_i),
    .Y(\$depc_en$149 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11417  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(\$exception_pc$125 ),
    .S(debug_csr_save_i),
    .Y(\$depc_d$148 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11427  (
    .A(\$dcsr_en$118 ),
    .B(debug_csr_save_i),
    .Y(\$dcsr_en$147 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11437  (
    .A(dcsr_q[8:6]),
    .B(debug_cause_i),
    .S(debug_csr_save_i),
    .Y(\$dcsr_d[8:6]$146 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11447  (
    .A(\$dcsr_d$117 [1:0]),
    .B(priv_lvl_q),
    .S(debug_csr_save_i),
    .Y(\$dcsr_d[1:0]$145 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11458  (
    .A(\$mtval_en$135 ),
    .B(\$mtval_en$115 ),
    .S(debug_csr_save_i),
    .Y(\$mtval_en$144 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11469  (
    .A(\$mtval_d$134 ),
    .B(csr_wdata_int),
    .S(debug_csr_save_i),
    .Y(\$mtval_d$143 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11480  (
    .A(\$mcause_en$133 ),
    .B(\$mcause_en$114 ),
    .S(debug_csr_save_i),
    .Y(\$mcause_en$142 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11491  (
    .A(\$mcause_d$132 ),
    .B({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .S(debug_csr_save_i),
    .Y(\$mcause_d$141 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11502  (
    .A(\$mepc_en$131 ),
    .B(\$mepc_en$113 ),
    .S(debug_csr_save_i),
    .Y(\$mepc_en$140 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11513  (
    .A(\$mepc_d$130 ),
    .B({ csr_wdata_int[31:1], 1'h0 }),
    .S(debug_csr_save_i),
    .Y(\$mepc_d$139 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11524  (
    .A(\$mstatus_en$129 ),
    .B(\$mstatus_en$110 ),
    .S(debug_csr_save_i),
    .Y(\$mstatus_en$138 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$11535  (
    .A(\$mstatus_d[5:2]$128 ),
    .B(\$auto$wreduce.cc:514:run$16952 [5:2]),
    .S(debug_csr_save_i),
    .Y(\$mstatus_d[5:2]$137 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:628.13-628.36|rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11546  (
    .A(pc_id_i),
    .B(pc_if_i),
    .S(csr_save_if_i),
    .Y(\$exception_pc$125 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11556  (
    .A(csr_save_cause_i),
    .B(\$mstack_en$150 ),
    .Y(mstack_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11564  (
    .A(\$depc_en$119 ),
    .B(\$depc_en$149 ),
    .S(csr_save_cause_i),
    .Y(depc_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11572  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(\$depc_d$148 ),
    .S(csr_save_cause_i),
    .Y(depc_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11580  (
    .A(\$dcsr_en$118 ),
    .B(\$dcsr_en$147 ),
    .S(csr_save_cause_i),
    .Y(dcsr_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11588  (
    .A(dcsr_q[8:6]),
    .B(\$dcsr_d[8:6]$146 ),
    .S(csr_save_cause_i),
    .Y(dcsr_d[8:6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11596  (
    .A(\$dcsr_d$117 [1:0]),
    .B(\$dcsr_d[1:0]$145 ),
    .S(csr_save_cause_i),
    .Y(dcsr_d[1:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11604  (
    .A(\$mtval_en$115 ),
    .B(\$mtval_en$144 ),
    .S(csr_save_cause_i),
    .Y(mtval_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11612  (
    .A(csr_wdata_int),
    .B(\$mtval_d$143 ),
    .S(csr_save_cause_i),
    .Y(mtval_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11618  (
    .A(\$mcause_en$114 ),
    .B({ \$mcause_en$142 , \$mcause_en$158  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mcause_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$11627  (
    .A({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .B({ \$mcause_d$141 , \$mcause_d$157  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mcause_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11636  (
    .A(\$mepc_en$113 ),
    .B({ \$mepc_en$140 , \$mepc_en$156  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mepc_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$11645  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B({ \$mepc_d$139 , \$mepc_d$155  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mepc_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11654  (
    .A(\$mstatus_en$110 ),
    .B({ \$mstatus_en$138 , 1'h1 }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mstatus_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11675  (
    .A(2'h3),
    .B({ dcsr_q[1:0], mstatus_q[3:2] }),
    .S({ csr_restore_dret_i, csr_restore_mret_i }),
    .Y(priv_lvl_d)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:561.13-561.37|rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11697  (
    .A(csr_wdata_int[1:0]),
    .B(2'h3),
    .S(\$77 ),
    .Y(\$dcsr_d[1:0]$78 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$11700_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b0),
    .Y(\$dcsr_en$102 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:535.13-535.40|rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11717  (
    .A(csr_wdata_int[12:11]),
    .B(2'h3),
    .S(\$70 ),
    .Y(\$mstatus_d[3:2]$71 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11720_CMP0  (
    .A(csr_addr_i),
    .B(10'h300),
    .Y(\$mstatus_en$94 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11724  (
    .A(3'h0),
    .B(\$auto$rtlil.cc:3004:And$16668 [2:0]),
    .S(\$procmux$11725_CTRL ),
    .Y(\$auto$wreduce.cc:514:run$16951 [2:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP0  (
    .A(csr_addr_i),
    .B(12'hb80),
    .Y(\$procmux$11725_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP1  (
    .A(csr_addr_i),
    .B(12'hb82),
    .Y(\$procmux$11725_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP10  (
    .A(csr_addr_i),
    .B(12'hb8b),
    .Y(\$procmux$11725_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP11  (
    .A(csr_addr_i),
    .B(12'hb8c),
    .Y(\$procmux$11725_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP12  (
    .A(csr_addr_i),
    .B(12'hb8d),
    .Y(\$procmux$11725_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP13  (
    .A(csr_addr_i),
    .B(12'hb8e),
    .Y(\$procmux$11725_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP14  (
    .A(csr_addr_i),
    .B(12'hb8f),
    .Y(\$procmux$11725_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP15  (
    .A(csr_addr_i),
    .B(12'hb90),
    .Y(\$procmux$11725_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP16  (
    .A(csr_addr_i),
    .B(12'hb91),
    .Y(\$procmux$11725_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP17  (
    .A(csr_addr_i),
    .B(12'hb92),
    .Y(\$procmux$11725_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP18  (
    .A(csr_addr_i),
    .B(12'hb93),
    .Y(\$procmux$11725_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP19  (
    .A(csr_addr_i),
    .B(12'hb94),
    .Y(\$procmux$11725_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP2  (
    .A(csr_addr_i),
    .B(12'hb83),
    .Y(\$procmux$11725_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP20  (
    .A(csr_addr_i),
    .B(12'hb95),
    .Y(\$procmux$11725_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP21  (
    .A(csr_addr_i),
    .B(12'hb96),
    .Y(\$procmux$11725_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP22  (
    .A(csr_addr_i),
    .B(12'hb97),
    .Y(\$procmux$11725_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP23  (
    .A(csr_addr_i),
    .B(12'hb98),
    .Y(\$procmux$11725_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP24  (
    .A(csr_addr_i),
    .B(12'hb99),
    .Y(\$procmux$11725_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP25  (
    .A(csr_addr_i),
    .B(12'hb9a),
    .Y(\$procmux$11725_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP26  (
    .A(csr_addr_i),
    .B(12'hb9b),
    .Y(\$procmux$11725_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP27  (
    .A(csr_addr_i),
    .B(12'hb9c),
    .Y(\$procmux$11725_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP28  (
    .A(csr_addr_i),
    .B(12'hb9d),
    .Y(\$procmux$11725_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP29  (
    .A(csr_addr_i),
    .B(12'hb9e),
    .Y(\$procmux$11725_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP3  (
    .A(csr_addr_i),
    .B(12'hb84),
    .Y(\$procmux$11725_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP30  (
    .A(csr_addr_i),
    .B(12'hb9f),
    .Y(\$procmux$11725_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP4  (
    .A(csr_addr_i),
    .B(12'hb85),
    .Y(\$procmux$11725_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP5  (
    .A(csr_addr_i),
    .B(12'hb86),
    .Y(\$procmux$11725_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP6  (
    .A(csr_addr_i),
    .B(12'hb87),
    .Y(\$procmux$11725_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP7  (
    .A(csr_addr_i),
    .B(12'hb88),
    .Y(\$procmux$11725_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP8  (
    .A(csr_addr_i),
    .B(12'hb89),
    .Y(\$procmux$11725_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11725_CMP9  (
    .A(csr_addr_i),
    .B(12'hb8a),
    .Y(\$procmux$11725_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11730  (
    .A(3'h0),
    .B(\$auto$rtlil.cc:3004:And$16668 [2:0]),
    .S(\$procmux$11731_CTRL ),
    .Y(\$auto$wreduce.cc:514:run$16950 [2:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_ANY  (
    .A(\$procmux$11731_CMP ),
    .Y(\$procmux$11731_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP0  (
    .A(csr_addr_i),
    .B(12'hb00),
    .Y(\$procmux$11731_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP1  (
    .A(csr_addr_i),
    .B(12'hb02),
    .Y(\$procmux$11731_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP10  (
    .A(csr_addr_i),
    .B(12'hb0b),
    .Y(\$procmux$11731_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP11  (
    .A(csr_addr_i),
    .B(12'hb0c),
    .Y(\$procmux$11731_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP12  (
    .A(csr_addr_i),
    .B(12'hb0d),
    .Y(\$procmux$11731_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP13  (
    .A(csr_addr_i),
    .B(12'hb0e),
    .Y(\$procmux$11731_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP14  (
    .A(csr_addr_i),
    .B(12'hb0f),
    .Y(\$procmux$11731_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP15  (
    .A(csr_addr_i),
    .B(12'hb10),
    .Y(\$procmux$11731_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP16  (
    .A(csr_addr_i),
    .B(12'hb11),
    .Y(\$procmux$11731_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP17  (
    .A(csr_addr_i),
    .B(12'hb12),
    .Y(\$procmux$11731_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP18  (
    .A(csr_addr_i),
    .B(12'hb13),
    .Y(\$procmux$11731_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP19  (
    .A(csr_addr_i),
    .B(12'hb14),
    .Y(\$procmux$11731_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP2  (
    .A(csr_addr_i),
    .B(12'hb03),
    .Y(\$procmux$11731_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP20  (
    .A(csr_addr_i),
    .B(12'hb15),
    .Y(\$procmux$11731_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP21  (
    .A(csr_addr_i),
    .B(12'hb16),
    .Y(\$procmux$11731_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP22  (
    .A(csr_addr_i),
    .B(12'hb17),
    .Y(\$procmux$11731_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP23  (
    .A(csr_addr_i),
    .B(12'hb18),
    .Y(\$procmux$11731_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP24  (
    .A(csr_addr_i),
    .B(12'hb19),
    .Y(\$procmux$11731_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP25  (
    .A(csr_addr_i),
    .B(12'hb1a),
    .Y(\$procmux$11731_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP26  (
    .A(csr_addr_i),
    .B(12'hb1b),
    .Y(\$procmux$11731_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP27  (
    .A(csr_addr_i),
    .B(12'hb1c),
    .Y(\$procmux$11731_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP28  (
    .A(csr_addr_i),
    .B(12'hb1d),
    .Y(\$procmux$11731_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP29  (
    .A(csr_addr_i),
    .B(12'hb1e),
    .Y(\$procmux$11731_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP3  (
    .A(csr_addr_i),
    .B(12'hb04),
    .Y(\$procmux$11731_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP30  (
    .A(csr_addr_i),
    .B(12'hb1f),
    .Y(\$procmux$11731_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP4  (
    .A(csr_addr_i),
    .B(12'hb05),
    .Y(\$procmux$11731_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP5  (
    .A(csr_addr_i),
    .B(12'hb06),
    .Y(\$procmux$11731_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP6  (
    .A(csr_addr_i),
    .B(12'hb07),
    .Y(\$procmux$11731_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP7  (
    .A(csr_addr_i),
    .B(12'hb08),
    .Y(\$procmux$11731_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP8  (
    .A(csr_addr_i),
    .B(12'hb09),
    .Y(\$procmux$11731_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731_CMP9  (
    .A(csr_addr_i),
    .B(12'hb0a),
    .Y(\$procmux$11731_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11738_CMP0  (
    .A(csr_addr_i),
    .B(10'h320),
    .Y(\$mcountinhibit_we$106 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$11746_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b3),
    .Y(\$dscratch1_en$105 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$11755_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b2),
    .Y(\$dscratch0_en$104 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$11765_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b1),
    .Y(\$depc_en$103 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd29)
  ) \$procmux$11788  (
    .A({ dcsr_q[31:9], dcsr_q[5:0] }),
    .B({ 16'h4000, csr_wdata_int[15], 1'h0, csr_wdata_int[13:12], 6'h00, csr_wdata_int[2], \$dcsr_d[1:0]$78  }),
    .S(\$dcsr_en$102 ),
    .Y({ \$dcsr_d$101 [31:9], \$dcsr_d$101 [5:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11800  (
    .A(csr_mtvec_init_i),
    .B(\$procmux$11801_CMP ),
    .Y(\$mtvec_en$100 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11801_CMP0  (
    .A(csr_addr_i),
    .B(10'h305),
    .Y(\$procmux$11801_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11814_CMP0  (
    .A(csr_addr_i),
    .B(10'h343),
    .Y(\$mtval_en$99 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11828_CMP0  (
    .A(csr_addr_i),
    .B(10'h342),
    .Y(\$mcause_en$98 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11843_CMP0  (
    .A(csr_addr_i),
    .B(10'h341),
    .Y(\$mepc_en$97 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11859_CMP0  (
    .A(csr_addr_i),
    .B(10'h340),
    .Y(\$mscratch_en$96 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11876_CMP0  (
    .A(csr_addr_i),
    .B(10'h304),
    .Y(\$mie_en$95 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11913  (
    .A(mstatus_q),
    .B({ csr_wdata_int[3], csr_wdata_int[7], \$mstatus_d[3:2]$71 , csr_wdata_int[17], csr_wdata_int[21] }),
    .S(\$mstatus_en$94 ),
    .Y(\$mstatus_d$93 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11918  (
    .A(3'h0),
    .B(\$auto$wreduce.cc:514:run$16951 [2:0]),
    .S(csr_we_int),
    .Y(mhpmcounterh_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11921  (
    .A(3'h0),
    .B(\$auto$wreduce.cc:514:run$16950 [2:0]),
    .S(csr_we_int),
    .Y(mhpmcounter_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11924  (
    .A(csr_we_int),
    .B(\$mcountinhibit_we$106 ),
    .Y(mcountinhibit_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11927  (
    .A(csr_we_int),
    .B(\$dscratch1_en$105 ),
    .Y(dscratch1_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11930  (
    .A(csr_we_int),
    .B(\$dscratch0_en$104 ),
    .Y(dscratch0_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11933  (
    .A(csr_we_int),
    .B(\$depc_en$103 ),
    .Y(\$depc_en$119 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11936  (
    .A(csr_we_int),
    .B(\$dcsr_en$102 ),
    .Y(\$dcsr_en$118 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd29)
  ) \$procmux$11939  (
    .A({ dcsr_q[31:9], dcsr_q[5:0] }),
    .B({ \$dcsr_d$101 [31:9], \$dcsr_d$101 [5:0] }),
    .S(csr_we_int),
    .Y({ dcsr_d[31:9], dcsr_d[5:2], \$dcsr_d$117 [1:0] })
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11942  (
    .A(csr_mtvec_init_i),
    .B(\$mtvec_en$100 ),
    .S(csr_we_int),
    .Y(mtvec_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11945  (
    .A(csr_we_int),
    .B(\$mtval_en$99 ),
    .Y(\$mtval_en$115 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11948  (
    .A(csr_we_int),
    .B(\$mcause_en$98 ),
    .Y(\$mcause_en$114 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11951  (
    .A(csr_we_int),
    .B(\$mepc_en$97 ),
    .Y(\$mepc_en$113 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11954  (
    .A(csr_we_int),
    .B(\$mscratch_en$96 ),
    .Y(mscratch_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11957  (
    .A(csr_we_int),
    .B(\$mie_en$95 ),
    .Y(mie_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11960  (
    .A(csr_we_int),
    .B(\$mstatus_en$94 ),
    .Y(\$mstatus_en$110 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11963  (
    .A(mstatus_q),
    .B(\$mstatus_d$93 ),
    .S(csr_we_int),
    .Y({ \$auto$wreduce.cc:514:run$16952 [5:1], mstatus_d[0] })
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:479.9-479.28|rtl/cve2/cve2_cs_registers.sv:474.7-480.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11967  (
    .A(\$illegal_csr$39 ),
    .B(\$auto$rtlil.cc:2964:ReduceBool$1003 ),
    .Y(illegal_csr)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12048  (
    .A(1'h1),
    .B({ \$16 , 1'h0 }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16806 , \$auto$opt_reduce.cc:137:opt_pmux$16804  }),
    .Y(\$illegal_csr$39 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$12049_CMP0  (
    .A(csr_addr_i),
    .B(11'h7c1),
    .Y(\$procmux$12049_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:458.21-461.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$12050_CMP0  (
    .A(csr_addr_i),
    .B(11'h7aa),
    .Y(\$procmux$12050_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:454.21-457.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$12051_CMP0  (
    .A(csr_addr_i),
    .B(11'h7a8),
    .Y(\$procmux$12051_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:450.19-453.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$12052_CMP0  (
    .A(csr_addr_i),
    .B(11'h7a3),
    .Y(\$procmux$12052_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$12056_ANY  (
    .A(\$procmux$11725_CMP ),
    .Y(\$procmux$11725_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd29),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_ANY  (
    .A(\$procmux$12058_CMP ),
    .Y(\$procmux$12058_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP0  (
    .A(csr_addr_i),
    .B(10'h323),
    .Y(\$procmux$12058_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP1  (
    .A(csr_addr_i),
    .B(10'h324),
    .Y(\$procmux$12058_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP10  (
    .A(csr_addr_i),
    .B(10'h32d),
    .Y(\$procmux$12058_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP11  (
    .A(csr_addr_i),
    .B(10'h32e),
    .Y(\$procmux$12058_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP12  (
    .A(csr_addr_i),
    .B(10'h32f),
    .Y(\$procmux$12058_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP13  (
    .A(csr_addr_i),
    .B(10'h330),
    .Y(\$procmux$12058_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP14  (
    .A(csr_addr_i),
    .B(10'h331),
    .Y(\$procmux$12058_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP15  (
    .A(csr_addr_i),
    .B(10'h332),
    .Y(\$procmux$12058_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP16  (
    .A(csr_addr_i),
    .B(10'h333),
    .Y(\$procmux$12058_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP17  (
    .A(csr_addr_i),
    .B(10'h334),
    .Y(\$procmux$12058_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP18  (
    .A(csr_addr_i),
    .B(10'h335),
    .Y(\$procmux$12058_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP19  (
    .A(csr_addr_i),
    .B(10'h336),
    .Y(\$procmux$12058_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP2  (
    .A(csr_addr_i),
    .B(10'h325),
    .Y(\$procmux$12058_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP20  (
    .A(csr_addr_i),
    .B(10'h337),
    .Y(\$procmux$12058_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP21  (
    .A(csr_addr_i),
    .B(10'h338),
    .Y(\$procmux$12058_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP22  (
    .A(csr_addr_i),
    .B(10'h339),
    .Y(\$procmux$12058_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP23  (
    .A(csr_addr_i),
    .B(10'h33a),
    .Y(\$procmux$12058_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP24  (
    .A(csr_addr_i),
    .B(10'h33b),
    .Y(\$procmux$12058_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP25  (
    .A(csr_addr_i),
    .B(10'h33c),
    .Y(\$procmux$12058_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP26  (
    .A(csr_addr_i),
    .B(10'h33d),
    .Y(\$procmux$12058_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP27  (
    .A(csr_addr_i),
    .B(10'h33e),
    .Y(\$procmux$12058_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP28  (
    .A(csr_addr_i),
    .B(10'h33f),
    .Y(\$procmux$12058_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP3  (
    .A(csr_addr_i),
    .B(10'h326),
    .Y(\$procmux$12058_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP4  (
    .A(csr_addr_i),
    .B(10'h327),
    .Y(\$procmux$12058_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP5  (
    .A(csr_addr_i),
    .B(10'h328),
    .Y(\$procmux$12058_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP6  (
    .A(csr_addr_i),
    .B(10'h329),
    .Y(\$procmux$12058_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP7  (
    .A(csr_addr_i),
    .B(10'h32a),
    .Y(\$procmux$12058_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP8  (
    .A(csr_addr_i),
    .B(10'h32b),
    .Y(\$procmux$12058_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12058_CMP9  (
    .A(csr_addr_i),
    .B(10'h32c),
    .Y(\$procmux$12058_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12086_CMP0  (
    .A(csr_addr_i),
    .B(10'h344),
    .Y(\$procmux$12086_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:310.9-310.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12092_CMP0  (
    .A(csr_addr_i),
    .B(10'h306),
    .Y(\$procmux$12092_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12094_CMP0  (
    .A(csr_addr_i),
    .B(10'h301),
    .Y(\$procmux$12094_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_CMP0  (
    .A(csr_addr_i),
    .B(10'h30a),
    .Y(\$procmux$12095_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_CMP1  (
    .A(csr_addr_i),
    .B(10'h31a),
    .Y(\$procmux$12095_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:290.21-290.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$12096_CMP0  (
    .A(csr_addr_i),
    .B(10'h310),
    .Y(\$procmux$12096_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:277.23-277.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12098_CMP0  (
    .A(csr_addr_i),
    .B(12'hf15),
    .Y(\$procmux$12098_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12099_CMP0  (
    .A(csr_addr_i),
    .B(12'hf14),
    .Y(\$procmux$12099_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:273.19-273.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12100_CMP0  (
    .A(csr_addr_i),
    .B(12'hf13),
    .Y(\$procmux$12100_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12101_CMP0  (
    .A(csr_addr_i),
    .B(12'hf12),
    .Y(\$procmux$12101_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$12102_CMP0  (
    .A(csr_addr_i),
    .B(12'hf11),
    .Y(\$procmux$12102_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd23),
    .WIDTH(32'd32)
  ) \$procmux$12108  (
    .A(32'd0),
    .B({ 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040100104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, mtvec_q, mepc_q, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, depc_q, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit_q[2], 1'h0, mcountinhibit_q[0], 29'h00000000, \$auto$rtlil.cc:3092:Mux$971 [2], 1'h0, \$auto$rtlil.cc:3092:Mux$971 [0], \$auto$rtlil.cc:3092:Mux$976 [31:0], \$auto$rtlil.cc:3092:Mux$976 [63:32], 31'h00000000, \gen_trigger_regs.tselect_q , 29'h05000209, \gen_trigger_regs.tmatch_control_q , 2'h0, \gen_trigger_regs.tmatch_value_q  }),
    .S({ \$procmux$12102_CMP , \$procmux$12101_CMP , \$procmux$12099_CMP , \$mstatus_en$94 , \$procmux$12094_CMP , \$mie_en$95 , \$mscratch_en$96 , \$procmux$11801_CMP , \$mepc_en$97 , \$mcause_en$98 , \$mtval_en$99 , \$procmux$12086_CMP , \$dcsr_en$102 , \$depc_en$103 , \$dscratch0_en$104 , \$dscratch1_en$105 , \$mcountinhibit_we$106 , \$procmux$12058_CTRL , \$procmux$11731_CTRL , \$procmux$11725_CTRL , \$221 , \$231 , \$241  }),
    .Y(csr_rdata_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1372.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_control_q ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int[2]),
    .wr_en_i(\gen_trigger_regs.tmatch_control_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1385.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_value_q ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(\gen_trigger_regs.tmatch_value_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1358.7" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr  \gen_trigger_regs.u_tselect_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tselect_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tselect_d ),
    .wr_en_i(\gen_trigger_regs.tselect_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1210.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$208 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1226.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$214 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:871.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:885.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(depc_q),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:899.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:913.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:824.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:778.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(mepc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:796.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] }),
    .wr_en_i(mie_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:810.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:956.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:928.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:942.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_q),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:764.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:838.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:851.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(mtvec_q),
    .rst_ni(rst_ni),
    .wr_data_i({ mtvec_d[31:8], 8'h01 }),
    .wr_en_i(mtvec_en)
  );
  assign { \$auto$rtlil.cc:3092:Mux$971 [31:3], \$auto$rtlil.cc:3092:Mux$971 [1] } = 30'h00000000;
  assign \$auto$wreduce.cc:514:run$16950 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$16951 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$16952 [0] = mstatus_d[0];
  assign \$dcsr_d$101 [8:6] = dcsr_q[8:6];
  assign \$dcsr_d$117 [31:2] = { dcsr_d[31:9], dcsr_q[8:6], dcsr_d[5:2] };
  assign csr_addr = csr_addr_i;
  assign csr_depc_o = depc_q;
  assign csr_mepc_o = mepc_q;
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_mtvec_o = mtvec_q;
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign csr_rdata_int = csr_rdata_o;
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign \g_mcountinhibit_reduced.unused_mhphcounter_incr  = { div_wait_i, wfi_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i };
  assign \g_mcountinhibit_reduced.unused_mhphcounter_we  = 29'hxxxxxxxx;
  assign \g_mcountinhibit_reduced.unused_mhphcounterh_we  = 29'hxxxxxxxx;
  assign \gen_trigger_regs.selected_tmatch_control  = \gen_trigger_regs.tmatch_control_q ;
  assign \gen_trigger_regs.selected_tmatch_value  = \gen_trigger_regs.tmatch_value_q ;
  assign \gen_trigger_regs.tmatch_control_d  = csr_wdata_int[2];
  assign \gen_trigger_regs.tmatch_value_d  = csr_wdata_int;
  assign \gen_trigger_regs.trigger_match  = trigger_match_o;
  assign mcountinhibit = { 29'h1fffffff, mcountinhibit_q[2], 1'h0, mcountinhibit_q[0] };
  assign mcountinhibit_q[1] = 1'h0;
  assign mhpmcounter[1983:0] = { 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 };
  assign mhpmcounter_idx = csr_addr_i[4:0];
  assign mhpmcounter_incr = { div_wait_i, wfi_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i, instr_ret_i, 2'h1 };
  assign mhpmevent = 1024'h0000000100000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign mie_d = { csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] };
  assign mip = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i };
  assign mstack_cause_d = mcause_q;
  assign mstack_d = mstatus_q[4:2];
  assign mstack_epc_d = mepc_q;
  assign mtvec_d[7:0] = 8'h01;
  assign pmp_addr_rdata = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign pmp_cfg_rdata = 128'h00000000000000000000000000000000;
  assign pmp_mseccfg = 3'h0;
  assign priv_mode_id_o = priv_lvl_q;
  assign tmatch_control_rdata = { \gen_trigger_regs.tmatch_control_q , 2'h0 };
  assign tmatch_value_rdata = \gen_trigger_regs.tmatch_value_q ;
  assign tselect_rdata = { 31'h00000000, \gen_trigger_regs.tselect_q  };
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_addr = csr_addr_i[7:5];
  assign unused_mhpmcounter_incr_1 = 1'h0;
  assign unused_mhpmcounter_we_1 = mhpmcounter_we[1];
  assign unused_mhpmcounterh_we_1 = mhpmcounterh_we[1];
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17572  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17573  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17574  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd1073741827),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17575  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17576  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17577  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17578  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17579  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17580  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [18:0] rd_data_o;
  wire [18:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [18:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(19'h00000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd19)
  ) \$auto$ff.cc:266:slice$17581  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17582  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17583  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [2:0] rd_data_o;
  wire [2:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [2:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h4),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17584  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17585  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [5:0] rd_data_o;
  wire [5:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [5:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h0c),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17586  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17587  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17588  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_decoder.sv:16.8" */
module \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o, multdiv_signed_mode_o
, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$152 ;
  wire \$154 ;
  wire \$170 ;
  wire \$23 ;
  wire \$30 ;
  wire \$35 ;
  wire \$58 ;
  wire \$7 ;
  wire \$71 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$9 ;
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$139 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [1:0] \$alu_op_a_mux_sel_o$167 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$174 ;
  /* src = "rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  wire \$alu_op_b_mux_sel_o$149 ;
  wire [5:0] \$alu_operator_o$141 ;
  /* src = "rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  wire [6:0] \$alu_operator_o$143 ;
  wire [5:0] \$alu_operator_o$155 ;
  wire [5:0] \$alu_operator_o$156 ;
  /* src = "rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  wire [6:0] \$alu_operator_o$158 ;
  /* src = "rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  wire [6:0] \$alu_operator_o$159 ;
  /* src = "rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  wire [6:0] \$alu_operator_o$162 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [6:0] \$alu_operator_o$166 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16810 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16812 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16814 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16816 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16818 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16820 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16822 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16824 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16826 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16828 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16830 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16832 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16834 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16836 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16840 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16842 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16844 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16846 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16848 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16850 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16878 ;
  wire \$auto$rtlil.cc:3092:Mux$1599 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$branch_in_dec_o$123 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$csr_access_o$101 ;
  /* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  wire \$csr_illegal$88 ;
  /* src = "rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  wire [1:0] \$csr_op$89 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire [1:0] \$csr_op$93 ;
  /* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  wire [1:0] \$data_type_o$28 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$data_we_o$119 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$dret_insn_o$75 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$dret_insn_o$96 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$ebrk_insn_o$73 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$ebrk_insn_o$94 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$ecall_insn_o$76 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$ecall_insn_o$97 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$illegal_insn$102 ;
  /* src = "rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  wire \$illegal_insn$25 ;
  /* src = "rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  wire \$illegal_insn$27 ;
  /* src = "rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  wire \$illegal_insn$32 ;
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  wire \$illegal_insn$40 ;
  /* src = "rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  wire \$illegal_insn$41 ;
  /* src = "rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  wire \$illegal_insn$54 ;
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  wire \$illegal_insn$55 ;
  /* src = "rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  wire \$illegal_insn$56 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire \$illegal_insn$59 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire \$illegal_insn$62 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$illegal_insn$66 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$illegal_insn$72 ;
  /* src = "rtl/cve2/cve2_decoder.sv:609.11-611.14" */
  wire \$illegal_insn$84 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$illegal_insn$90 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  wire [2:0] \$imm_b_mux_sel_o$165 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$jump_in_dec_o$122 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$jump_in_dec_o$69 ;
  /* src = "rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  wire \$jump_set_o$111 ;
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  wire \$jump_set_o$68 ;
  /* src = "rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  wire \$mret_insn_o$74 ;
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  wire \$mret_insn_o$95 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire [1:0] \$multdiv_operator_o$60 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire [1:0] \$multdiv_operator_o$63 ;
  /* src = "rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  wire [1:0] \$multdiv_signed_mode_o$61 ;
  /* src = "rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  wire [1:0] \$multdiv_signed_mode_o$64 ;
  wire \$procmux$5366_CMP ;
  wire \$procmux$5399_CMP ;
  wire \$procmux$5483_CMP ;
  wire \$procmux$5550_CMP ;
  wire \$procmux$5551_CMP ;
  wire \$procmux$5552_CMP ;
  wire \$procmux$5553_CMP ;
  wire \$procmux$5554_CMP ;
  wire \$procmux$5555_CMP ;
  wire \$procmux$5556_CMP ;
  wire \$procmux$5557_CMP ;
  wire \$procmux$5558_CMP ;
  wire \$procmux$5559_CMP ;
  wire \$procmux$5560_CMP ;
  wire \$procmux$5561_CMP ;
  wire \$procmux$5562_CMP ;
  wire \$procmux$5563_CMP ;
  wire \$procmux$5564_CMP ;
  wire \$procmux$5565_CMP ;
  wire \$procmux$5566_CMP ;
  wire \$procmux$5605_CMP ;
  wire \$procmux$5607_CMP ;
  wire \$procmux$5650_CMP ;
  wire \$procmux$5651_CMP ;
  wire \$procmux$5652_CMP ;
  wire \$procmux$5653_CMP ;
  wire \$procmux$5654_CMP ;
  wire \$procmux$5669_CMP ;
  wire \$procmux$5696_CMP ;
  wire \$procmux$5774_CMP ;
  wire \$procmux$5833_CMP ;
  wire \$procmux$5920_CMP ;
  wire \$procmux$5921_CMP ;
  wire \$procmux$5941_CMP ;
  wire \$procmux$6008_CMP ;
  wire \$procmux$6009_CMP ;
  wire \$procmux$6010_CMP ;
  wire \$procmux$6016_CMP ;
  wire \$procmux$6059_Y ;
  wire \$procmux$6136_Y ;
  wire \$procmux$6152_Y ;
  wire \$procmux$6220_CMP ;
  wire [9:0] \$procmux$6269_CMP ;
  wire \$procmux$6269_CTRL ;
  wire \$procmux$6274_CMP ;
  wire \$procmux$6281_CMP ;
  wire \$procmux$6282_CMP ;
  wire \$procmux$6283_CMP ;
  wire \$procmux$6284_CMP ;
  wire \$procmux$6295_CMP ;
  wire \$procmux$6297_CMP ;
  wire \$procmux$6299_CMP ;
  wire \$procmux$6347_CMP ;
  wire \$procmux$6349_CMP ;
  wire [1:0] \$procmux$6426_CMP ;
  wire \$procmux$6426_CTRL ;
  wire \$procmux$6456_CMP ;
  /* unused_bits = "1 2" */
  wire [5:0] \$procmux$6501_CMP ;
  wire \$procmux$6517_CMP ;
  wire \$procmux$6530_CMP ;
  wire \$procmux$6603_CTRL ;
  wire \$procmux$6620_CMP ;
  wire \$procmux$6666_CMP ;
  wire \$procmux$6838_Y ;
  wire \$procmux$6846_CMP ;
  wire \$procmux$6847_CMP ;
  /* src = "rtl/cve2/cve2_decoder.sv:67.32" */
  output alu_multicycle_o;
  wire alu_multicycle_o;
  /* src = "rtl/cve2/cve2_decoder.sv:63.32" */
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:65.32" */
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:62.32" */
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:92.32" */
  output branch_in_dec_o;
  wire branch_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:21.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_decoder.sv:79.32" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_decoder.sv:114.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_decoder.sv:80.32" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_decoder.sv:83.32" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_decoder.sv:87.32" */
  output data_sign_extension_o;
  wire data_sign_extension_o;
  /* src = "rtl/cve2/cve2_decoder.sv:85.32" */
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:84.32" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:71.32" */
  output div_en_o;
  wire div_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:73.32" */
  output div_sel_o;
  wire div_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:29.32" */
  output dret_insn_o;
  wire dret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:26.32" */
  output ebrk_insn_o;
  wire ebrk_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:30.32" */
  output ecall_insn_o;
  wire ecall_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:149.11" */
  /* unused_bits = "0" */
  wire \gen_no_rs3_flop.unused_clk ;
  /* src = "rtl/cve2/cve2_decoder.sv:150.11" */
  /* unused_bits = "0" */
  wire \gen_no_rs3_flop.unused_rst_n ;
  /* src = "rtl/cve2/cve2_decoder.sv:40.32" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_decoder.sv:97.16" */
  wire illegal_insn;
  /* src = "rtl/cve2/cve2_decoder.sv:25.32" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:98.16" */
  wire illegal_reg_rv32e;
  /* src = "rtl/cve2/cve2_decoder.sv:43.33" */
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:44.33" */
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:47.33" */
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:45.33" */
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:49.33" */
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:46.33" */
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:48.33" */
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:102.16" */
  wire [31:0] instr;
  /* src = "rtl/cve2/cve2_decoder.sv:103.16" */
  /* unused_bits = "7 8 9 10 11 15 16 17 18 19 20 21 22 23 24" */
  wire [31:0] instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:35.32" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_decoder.sv:109.15" */
  wire [4:0] instr_rd;
  /* src = "rtl/cve2/cve2_decoder.sv:37.32" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_decoder.sv:36.32" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_decoder.sv:106.15" */
  wire [4:0] instr_rs1;
  /* src = "rtl/cve2/cve2_decoder.sv:107.15" */
  wire [4:0] instr_rs2;
  /* src = "rtl/cve2/cve2_decoder.sv:108.15" */
  wire [4:0] instr_rs3;
  /* src = "rtl/cve2/cve2_decoder.sv:91.32" */
  output jump_in_dec_o;
  wire jump_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:32.32" */
  output jump_set_o;
  wire jump_set_o;
  /* src = "rtl/cve2/cve2_decoder.sv:27.32" */
  output mret_insn_o;
  wire mret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:70.32" */
  output mult_en_o;
  wire mult_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:72.32" */
  output mult_sel_o;
  wire mult_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:75.32" */
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:76.32" */
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  /* src = "rtl/cve2/cve2_decoder.sv:116.16" */
  wire [6:0] opcode;
  /* src = "rtl/cve2/cve2_decoder.sv:117.16" */
  wire [6:0] opcode_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:55.32" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:56.32" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:58.32" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:59.32" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:57.32" */
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  /* src = "rtl/cve2/cve2_decoder.sv:53.32" */
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:100.16" */
  wire rf_we;
  /* src = "rtl/cve2/cve2_decoder.sv:54.32" */
  output rf_we_o;
  wire rf_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:22.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_decoder.sv:104.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9" */
  wire [9:0] unused_instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:111.16" */
  wire use_rs3_d;
  /* src = "rtl/cve2/cve2_decoder.sv:112.16" */
  wire use_rs3_q;
  /* src = "rtl/cve2/cve2_decoder.sv:31.32" */
  output wfi_insn_o;
  wire wfi_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:50.33" */
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$7 ),
    .B(\$9 ),
    .Y(\$11 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_rdata_i[19:15]),
    .Y(\$13 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(instr_rdata_alu_i[31:27]),
    .Y(\$152 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(instr_rdata_alu_i[31:27]),
    .B(4'h8),
    .Y(\$154 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(instr_rdata_alu_i[14:12]),
    .Y(\$170 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(instr_rdata_i[14:12]),
    .Y(\$23 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(instr_rdata_i[26:25]),
    .Y(\$35 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$35 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1599 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A({ instr_rdata_i[26], instr_rdata_i[13:12] }),
    .B(3'h5),
    .Y(\$58 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(csr_op),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(instr_rdata_i[14:12]),
    .Y(\$71 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(instr_rdata_i[19:15]),
    .Y(\$79 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(csr_op),
    .B(2'h3),
    .Y(\$9 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(instr_rdata_i[11:7]),
    .Y(\$81 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$79 ),
    .B(\$81 ),
    .Y(\$83 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16809  (
    .A({ \$procmux$6059_Y , \$ecall_insn_o$76 , \$dret_insn_o$75 , \$mret_insn_o$74 , \$ebrk_insn_o$73  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16810 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16811  (
    .A({ \$jump_in_dec_o$69 , \$71  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16812 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16813  (
    .A({ \$procmux$6530_CMP , \$procmux$6010_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16814 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16815  (
    .A({ \$procmux$6284_CMP , \$procmux$6282_CMP , \$procmux$6281_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16816 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16817  (
    .A({ \$procmux$6530_CMP , \$procmux$6010_CMP , \$procmux$6009_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16818 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16819  (
    .A({ \$imm_b_mux_sel_o$165 [2], \$170  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16820 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16821  (
    .A({ \$procmux$6295_CMP , \$procmux$6281_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16822 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16823  (
    .A({ \$procmux$6297_CMP , \$procmux$6282_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16824 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16825  (
    .A({ \$procmux$6299_CMP , \$procmux$6284_CMP , \$procmux$6283_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16826 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16829  (
    .A({ \$procmux$5921_CMP , \$procmux$5669_CMP , \$procmux$5607_CMP , \$procmux$5483_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16830 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16831  (
    .A({ \$procmux$5920_CMP , \$procmux$5833_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16832 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16835  (
    .A({ \$procmux$5941_CMP , \$procmux$5921_CMP , \$procmux$5920_CMP , \$procmux$5833_CMP , \$procmux$5774_CMP , \$procmux$5669_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16836 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16837  (
    .A({ \$procmux$6274_CMP , \$branch_in_dec_o$123 , \$data_we_o$119  }),
    .Y(rf_ren_b_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16839  (
    .A({ \$procmux$5566_CMP , \$procmux$5557_CMP , \$procmux$5556_CMP , \$procmux$5555_CMP , \$procmux$5554_CMP , \$procmux$5553_CMP , \$procmux$5552_CMP , \$procmux$5551_CMP , \$procmux$5550_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16840 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16841  (
    .A({ \$procmux$6620_CMP , \$procmux$6517_CMP , \$procmux$6349_CMP , \$procmux$6274_CMP , \$branch_in_dec_o$123 , \$data_we_o$119  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16842 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16843  (
    .A({ \$procmux$5941_CMP , \$procmux$5920_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16844 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16845  (
    .A({ \$procmux$6847_CMP , \$procmux$6846_CMP , \$procmux$6349_CMP , \$procmux$6274_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16846 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16847  (
    .A({ \$procmux$6847_CMP , \$procmux$6846_CMP , \$procmux$6666_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16848 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16849  (
    .A({ \$procmux$6010_CMP , \$procmux$6009_CMP , \$procmux$6008_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16850 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16877  (
    .A({ \$procmux$5774_CMP , \$procmux$5696_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16878 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16879  (
    .A({ \$procmux$6517_CMP , \$data_we_o$119  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16834 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16883  (
    .A({ \$procmux$6666_CMP , \$procmux$6620_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16828 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5366_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h73),
    .Y(\$procmux$5366_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.41-1136.12|rtl/cve2/cve2_decoder.sv:1132.9-1148.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5376  (
    .A(instr_rdata_alu_i[14]),
    .B(1'h0),
    .S(\$170 ),
    .Y(\$alu_op_a_mux_sel_o$174 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5399_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(4'hf),
    .Y(\$procmux$5399_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$5403  (
    .A(2'h3),
    .B(4'h2),
    .S({ \$170 , \$imm_b_mux_sel_o$165 [2] }),
    .Y(\$alu_op_a_mux_sel_o$167 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5404_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(1'h1),
    .Y(\$imm_b_mux_sel_o$165 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.19-1126.14|rtl/cve2/cve2_decoder.sv:1113.9-1128.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5411  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16820 ),
    .Y(\$alu_operator_o$166 [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:918.18-1106.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$5483_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h33),
    .Y(\$procmux$5483_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd5)
  ) \$procmux$5549  (
    .A(5'h1c),
    .B(45'h01d886452500),
    .S({ \$procmux$5565_CMP , \$procmux$5564_CMP , \$procmux$5563_CMP , \$procmux$5562_CMP , \$procmux$5561_CMP , \$procmux$5560_CMP , \$procmux$5559_CMP , \$procmux$5558_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16840  }),
    .Y({ \$alu_operator_o$159 [5], \$alu_operator_o$159 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1098.36-1101.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5550_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hf),
    .Y(\$procmux$5550_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1094.36-1097.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5551_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'he),
    .Y(\$procmux$5551_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1090.36-1093.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5552_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hd),
    .Y(\$procmux$5552_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1086.36-1089.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5553_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hc),
    .Y(\$procmux$5553_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1082.36-1085.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5554_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hb),
    .Y(\$procmux$5554_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1078.36-1081.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5555_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'ha),
    .Y(\$procmux$5555_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1074.36-1077.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5556_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'h9),
    .Y(\$procmux$5556_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1070.36-1073.16|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5557_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'h8),
    .Y(\$procmux$5557_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:976.36-976.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$5558_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(9'h105),
    .Y(\$procmux$5558_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:975.36-975.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5559_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h5),
    .Y(\$procmux$5559_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:974.36-974.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5560_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(1'h1),
    .Y(\$procmux$5560_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:973.36-973.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5561_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h7),
    .Y(\$procmux$5561_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:972.36-972.60|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5562_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h6),
    .Y(\$procmux$5562_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:971.36-971.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5563_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h4),
    .Y(\$procmux$5563_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:969.36-969.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5564_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(2'h2),
    .Y(\$procmux$5564_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:968.36-968.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$5565_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(9'h100),
    .Y(\$procmux$5565_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:967.36-967.61|rtl/cve2/cve2_decoder.sv:965.11-1104.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$5566_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .Y(\$procmux$5566_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:923.11-963.14|rtl/cve2/cve2_decoder.sv:922.9-1105.12" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$5595  (
    .A({ \$alu_operator_o$159 [5], \$alu_operator_o$159 [3:0] }),
    .B(5'h1c),
    .S(instr_rdata_alu_i[26]),
    .Y({ \$alu_operator_o$162 [5], \$alu_operator_o$162 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5605_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h5),
    .Y(\$procmux$5605_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:790.22-916.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$5607_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(5'h13),
    .Y(\$procmux$5607_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:909.17-909.42|rtl/cve2/cve2_decoder.sv:908.24-910.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5612  (
    .A(\$154 ),
    .Y(\$alu_operator_o$155 [5])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:907.17-907.42|rtl/cve2/cve2_decoder.sv:906.15-910.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5627  (
    .A({ \$alu_operator_o$155 [5], 1'h0 }),
    .B(2'h1),
    .S(\$152 ),
    .Y({ \$alu_operator_o$156 [5], \$alu_operator_o$156 [0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:871.13-911.16|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd5)
  ) \$procmux$5647  (
    .A(5'h00),
    .B({ 30'h37c10c8a, \$alu_operator_o$156 [5], 1'h1, \$alu_operator_o$156 [5], 1'h0, \$alu_operator_o$156 [0] }),
    .S({ \$procmux$5654_CMP , \$procmux$5653_CMP , \$procmux$5652_CMP , \$procmux$5651_CMP , \$procmux$5650_CMP , \$imm_b_mux_sel_o$165 [2], \$procmux$5605_CMP  }),
    .Y({ \$alu_operator_o$158 [5], \$alu_operator_o$158 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:801.19-801.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5650_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h7),
    .Y(\$procmux$5650_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:800.19-800.43|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5651_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h6),
    .Y(\$procmux$5651_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:799.19-799.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5652_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h4),
    .Y(\$procmux$5652_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:798.19-798.45|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5653_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(2'h3),
    .Y(\$procmux$5653_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:797.19-797.44|rtl/cve2/cve2_decoder.sv:795.9-915.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5654_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(2'h2),
    .Y(\$procmux$5654_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:755.29-759.12|rtl/cve2/cve2_decoder.sv:755.9-759.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5666  (
    .A(instr_rdata_alu_i[14]),
    .Y(\$alu_op_b_mux_sel_o$149 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.21-760.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$5669_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h23),
    .Y(\$procmux$5669_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5692  (
    .A(instr_first_cycle_i),
    .Y(\$alu_op_a_mux_sel_o$139 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:718.22-744.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5696_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h63),
    .Y(\$procmux$5696_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:732.34-736.12|rtl/cve2/cve2_decoder.sv:732.9-743.12" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$5722  (
    .A(6'h00),
    .B({ \$alu_operator_o$141 [5:4], 1'h1, \$alu_operator_o$141 [2:0] }),
    .S(instr_first_cycle_i),
    .Y(\$alu_operator_o$143 [5:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:726.20-726.45|rtl/cve2/cve2_decoder.sv:720.9-728.16" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd5)
  ) \$procmux$5752  (
    .A(5'h14),
    .B(30'h1ae4ad4c),
    .S({ \$170 , \$imm_b_mux_sel_o$165 [2], \$procmux$5652_CMP , \$procmux$5605_CMP , \$procmux$5651_CMP , \$procmux$5650_CMP  }),
    .Y({ \$alu_operator_o$141 [5:4], \$alu_operator_o$141 [2:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:703.9-715.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5774_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h67),
    .Y(\$procmux$5774_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:686.9-698.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$5833_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h6f),
    .Y(\$procmux$5833_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$5894  (
    .A(1'h1),
    .B({ \$alu_op_a_mux_sel_o$139 [1], \$alu_op_b_mux_sel_o$149 , 1'h0 }),
    .S({ \$procmux$5696_CMP , \$procmux$5669_CMP , \$procmux$5483_CMP  }),
    .Y(alu_op_b_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd2)
  ) \$procmux$5912  (
    .A(2'h3),
    .B({ \$alu_op_a_mux_sel_o$139 [1], 5'h08, \$alu_op_a_mux_sel_o$167 , \$alu_op_a_mux_sel_o$174 [1], \$alu_op_a_mux_sel_o$174 [1] }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16878 , \$auto$opt_reduce.cc:137:opt_pmux$16832 , \$auto$opt_reduce.cc:137:opt_pmux$16830 , \$procmux$5399_CMP , \$procmux$5366_CMP  }),
    .Y(alu_op_a_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:783.21-788.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$5920_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(5'h17),
    .Y(\$procmux$5920_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:762.20-769.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5921_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(2'h3),
    .Y(\$procmux$5921_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1113.9-1128.16|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd6)
  ) \$procmux$5934  (
    .A(6'h2c),
    .B({ \$alu_operator_o$143 [5:0], 6'h00, \$alu_operator_o$158 [5], 1'h0, \$alu_operator_o$158 [3:0], \$alu_operator_o$162 [5], 1'h0, \$alu_operator_o$162 [3:0], \$alu_operator_o$166 [5], 1'h0, \$alu_operator_o$166 [5], \$alu_operator_o$166 [5], 2'h0 }),
    .S({ \$procmux$5696_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16836 , \$procmux$5607_CMP , \$procmux$5483_CMP , \$procmux$5399_CMP  }),
    .Y(alu_operator_o[5:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:775.19-781.10|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$5941_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h37),
    .Y(\$procmux$5941_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$5954  (
    .A(3'h0),
    .B({ 2'h2, \$alu_op_a_mux_sel_o$139 [1], \$alu_op_a_mux_sel_o$139 [1], 1'h0, \$alu_op_a_mux_sel_o$139 [1], 1'h0, \$alu_op_a_mux_sel_o$139 [1], 3'h0, \$alu_op_b_mux_sel_o$149 , 3'h3, \$imm_b_mux_sel_o$165 [2], 1'h0, \$imm_b_mux_sel_o$165 [2] }),
    .S({ \$procmux$5833_CMP , \$procmux$5774_CMP , \$procmux$5696_CMP , \$procmux$5669_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16844 , \$procmux$5399_CMP  }),
    .Y(imm_b_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1132.9-1148.12|rtl/cve2/cve2_decoder.sv:678.5-1152.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5972  (
    .A(1'h1),
    .B(\$170 ),
    .S(\$procmux$5366_CMP ),
    .Y(imm_a_mux_sel_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5974  (
    .A(\$branch_in_dec_o$123 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(branch_in_dec_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5978  (
    .A(\$jump_in_dec_o$122 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(jump_in_dec_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5982  (
    .A(\$data_we_o$119 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(data_we_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5986  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16834 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(data_req_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5990  (
    .A(rf_wdata_sel_o),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(csr_access_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5994  (
    .A(\$jump_set_o$111 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(jump_set_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:648.23-656.8|rtl/cve2/cve2_decoder.sv:648.5-656.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5998  (
    .A(\$procmux$6838_Y ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(rf_we_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:640.7-640.27|rtl/cve2/cve2_decoder.sv:639.5-641.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6002  (
    .A(\$illegal_insn$102 ),
    .B(illegal_c_insn_i),
    .Y(illegal_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$6007  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$procmux$6010_CMP , \$procmux$6009_CMP , \$procmux$6008_CMP  }),
    .Y(\$csr_op$89 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6008_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(2'h3),
    .Y(\$procmux$6008_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:624.22-624.42|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6009_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(2'h2),
    .Y(\$procmux$6009_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:623.22-623.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6010_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(1'h1),
    .Y(\$procmux$6010_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6016_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h73),
    .Y(\$procmux$6016_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:625.22-625.44|rtl/cve2/cve2_decoder.sv:622.11-627.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6019  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16850 ),
    .Y(\$csr_illegal$88 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:619.13-619.39|rtl/cve2/cve2_decoder.sv:618.11-620.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6030  (
    .A(instr_rdata_i[14]),
    .Y(\$30 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6043  (
    .A(\$csr_illegal$88 ),
    .B(\$illegal_insn$84 ),
    .S(\$71 ),
    .Y(\$illegal_insn$90 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:610.13-610.33|rtl/cve2/cve2_decoder.sv:609.11-611.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6049  (
    .A(\$illegal_insn$72 ),
    .B(\$83 ),
    .Y(\$illegal_insn$84 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$6060_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(9'h105),
    .Y(\$procmux$6059_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:589.15-589.35|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$6073_CMP0  (
    .A(instr_rdata_i[31:20]),
    .Y(\$ecall_insn_o$76 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:599.15-599.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$6083_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b2),
    .Y(\$dret_insn_o$75 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:596.15-596.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6094_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(10'h302),
    .Y(\$mret_insn_o$74 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:593.15-593.34|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6106_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(1'h1),
    .Y(\$ebrk_insn_o$73 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.15-602.33|rtl/cve2/cve2_decoder.sv:586.11-606.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6114  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16810 ),
    .Y(\$illegal_insn$72 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6136  (
    .A(\$30 ),
    .B(1'h0),
    .S(\$71 ),
    .Y(\$procmux$6136_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6152  (
    .A(\$71 ),
    .B(\$procmux$6059_Y ),
    .Y(\$procmux$6152_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6160  (
    .A(\$71 ),
    .B(\$ecall_insn_o$76 ),
    .Y(\$ecall_insn_o$97 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6168  (
    .A(\$71 ),
    .B(\$dret_insn_o$75 ),
    .Y(\$dret_insn_o$96 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6176  (
    .A(\$71 ),
    .B(\$mret_insn_o$74 ),
    .Y(\$mret_insn_o$95 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6184  (
    .A(\$71 ),
    .B(\$ebrk_insn_o$73 ),
    .Y(\$ebrk_insn_o$94 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6192  (
    .A(\$csr_op$89 ),
    .B(2'h0),
    .S(\$71 ),
    .Y(\$csr_op$93 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.37-612.12|rtl/cve2/cve2_decoder.sv:584.9-630.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6200  (
    .A(\$71 ),
    .Y(\$csr_access_o$101 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6218_CMP0  (
    .A(instr_rdata_i[14:12]),
    .B(1'h1),
    .Y(\$jump_in_dec_o$69 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6220_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(4'hf),
    .Y(\$procmux$6220_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6233  (
    .A(\$jump_in_dec_o$69 ),
    .B(instr_first_cycle_i),
    .Y(\$jump_set_o$68 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:565.19-576.14|rtl/cve2/cve2_decoder.sv:560.9-580.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6248  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16812 ),
    .Y(\$illegal_insn$66 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6268  (
    .A(\$procmux$6269_CTRL ),
    .Y(\$illegal_insn$59 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_ANY  (
    .A(\$procmux$6269_CMP ),
    .Y(\$procmux$6269_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .Y(\$procmux$6269_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP1  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(9'h100),
    .Y(\$procmux$6269_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP2  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(2'h2),
    .Y(\$procmux$6269_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP3  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(2'h3),
    .Y(\$procmux$6269_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP4  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h4),
    .Y(\$procmux$6269_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP5  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h6),
    .Y(\$procmux$6269_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP6  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h7),
    .Y(\$procmux$6269_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP7  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(1'h1),
    .Y(\$procmux$6269_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP8  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h5),
    .Y(\$procmux$6269_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:461.36-461.56|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$6269_CMP9  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(9'h105),
    .Y(\$procmux$6269_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6274_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h33),
    .Y(\$procmux$6274_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$6280  (
    .A(2'h0),
    .B(4'h7),
    .S({ \$procmux$6283_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16816  }),
    .Y(\$multdiv_signed_mode_o$61 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:538.36-542.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6281_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'he),
    .Y(\$procmux$6281_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:528.36-532.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6282_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hc),
    .Y(\$procmux$6282_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:518.36-522.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6283_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'ha),
    .Y(\$procmux$6283_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:513.36-517.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6284_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'h9),
    .Y(\$procmux$6284_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$6294  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16826 , \$auto$opt_reduce.cc:137:opt_pmux$16824 , \$auto$opt_reduce.cc:137:opt_pmux$16822  }),
    .Y(\$multdiv_operator_o$60 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:543.36-547.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6295_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hf),
    .Y(\$procmux$6295_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:533.36-537.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6297_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hd),
    .Y(\$procmux$6297_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:523.36-527.16|rtl/cve2/cve2_decoder.sv:450.11-551.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6299_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hb),
    .Y(\$procmux$6299_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6312  (
    .A(\$illegal_insn$59 ),
    .B(\$58 ),
    .Y(\$illegal_insn$62 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6321  (
    .A(\$multdiv_signed_mode_o$61 ),
    .B(2'h0),
    .S(\$58 ),
    .Y(\$multdiv_signed_mode_o$64 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.11-448.61|rtl/cve2/cve2_decoder.sv:447.9-552.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6330  (
    .A(\$multdiv_operator_o$60 ),
    .B(2'h0),
    .S(\$58 ),
    .Y(\$multdiv_operator_o$63 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6347_CMP0  (
    .A(instr_rdata_i[14:12]),
    .B(3'h5),
    .Y(\$procmux$6347_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:344.22-441.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6349_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(5'h13),
    .Y(\$procmux$6349_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:427.19-431.22|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6421  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:3092:Mux$1599 ),
    .S(\$procmux$6426_CTRL ),
    .Y(\$illegal_insn$54 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_ANY  (
    .A(\$procmux$6426_CMP ),
    .Y(\$procmux$6426_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_CMP0  (
    .A(instr_rdata_i[31:27]),
    .Y(\$procmux$6426_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.28-400.81|rtl/cve2/cve2_decoder.sv:398.15-435.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6426_CMP1  (
    .A(instr_rdata_i[31:27]),
    .B(4'h8),
    .Y(\$procmux$6426_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:396.15-396.65|rtl/cve2/cve2_decoder.sv:395.13-436.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6440  (
    .A(\$illegal_insn$54 ),
    .B(instr_rdata_i[26]),
    .Y(\$illegal_insn$55 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6453  (
    .A(1'h1),
    .B(1'h1),
    .S(\$35 ),
    .Y(\$illegal_insn$40 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$6456_CMP0  (
    .A(instr_rdata_i[31:27]),
    .B(4'hc),
    .Y(\$procmux$6456_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:373.17-388.24|rtl/cve2/cve2_decoder.sv:357.13-391.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6483  (
    .A(1'h1),
    .B({ \$auto$rtlil.cc:3092:Mux$1599 , \$illegal_insn$40  }),
    .S({ \$procmux$6426_CMP [0], \$procmux$6456_CMP  }),
    .Y(\$illegal_insn$41 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:395.13-436.16|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6497  (
    .A(1'h0),
    .B({ \$illegal_insn$41 , \$illegal_insn$55  }),
    .S({ \$jump_in_dec_o$69 , \$procmux$6347_CMP  }),
    .Y(\$illegal_insn$56 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP3  (
    .A(instr_rdata_i[14:12]),
    .B(3'h4),
    .Y(\$procmux$6501_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP4  (
    .A(instr_rdata_i[14:12]),
    .B(3'h6),
    .Y(\$procmux$6501_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:354.19-354.39|rtl/cve2/cve2_decoder.sv:348.9-440.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$6501_CMP5  (
    .A(instr_rdata_i[14:12]),
    .B(3'h7),
    .Y(\$procmux$6501_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6517_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(2'h3),
    .Y(\$procmux$6517_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:319.18-319.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$6528  (
    .A(2'h0),
    .B(4'h9),
    .S({ \$procmux$6530_CMP , \$procmux$6010_CMP  }),
    .Y(\$data_type_o$28 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:318.18-318.38|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$6530_CMP0  (
    .A(instr_rdata_i[13:12]),
    .Y(\$procmux$6530_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:320.18-325.14|rtl/cve2/cve2_decoder.sv:317.9-329.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6542  (
    .A(1'h1),
    .B({ 1'h0, instr_rdata_i[14] }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16814 , \$procmux$6009_CMP  }),
    .Y(\$illegal_insn$32 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:289.21-306.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6563_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h23),
    .Y(\$data_we_o$119 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:303.20-303.41|rtl/cve2/cve2_decoder.sv:300.9-305.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6573  (
    .A(1'h1),
    .B(instr_rdata_i[14]),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16818 ),
    .Y(\$illegal_insn$27 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6602  (
    .A(\$procmux$6603_CTRL ),
    .Y(\$illegal_insn$25 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:277.20-277.40|rtl/cve2/cve2_decoder.sv:271.9-279.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6603_ANY  (
    .A({ \$procmux$6501_CMP [5:3], \$procmux$6347_CMP , \$jump_in_dec_o$69 , \$71  }),
    .Y(\$procmux$6603_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:268.22-283.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6605_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h63),
    .Y(\$branch_in_dec_o$123 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:250.20-266.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6620_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h67),
    .Y(\$procmux$6620_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:237.19-248.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$6666_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h6f),
    .Y(\$procmux$6666_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6698  (
    .A(1'h0),
    .B({ 1'h1, \$jump_in_dec_o$69  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$procmux$6220_CMP  }),
    .Y(\$jump_in_dec_o$122 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6713  (
    .A(\$procmux$6517_CMP ),
    .B(\$30 ),
    .Y(data_sign_extension_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-330.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6723  (
    .A(2'h0),
    .B(\$data_type_o$28 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16834 ),
    .Y(data_type_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6755  (
    .A(\$procmux$6016_CMP ),
    .B(\$csr_access_o$101 ),
    .Y(rf_wdata_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6761  (
    .A(2'h0),
    .B(\$multdiv_signed_mode_o$64 ),
    .S(\$procmux$6274_CMP ),
    .Y(multdiv_signed_mode_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:443.18-553.10|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6767  (
    .A(2'h0),
    .B(\$multdiv_operator_o$63 ),
    .S(\$procmux$6274_CMP ),
    .Y(multdiv_operator_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6782  (
    .A(1'h0),
    .B({ 1'h1, \$procmux$6136_Y  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16842 , \$procmux$6016_CMP  }),
    .Y(rf_ren_a_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:560.9-580.16|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$6805  (
    .A(1'h0),
    .B({ instr_first_cycle_i, \$jump_set_o$68  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$procmux$6220_CMP  }),
    .Y(\$jump_set_o$111 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6814  (
    .A(\$procmux$6016_CMP ),
    .B(\$procmux$6152_Y ),
    .Y(wfi_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6818  (
    .A(\$procmux$6016_CMP ),
    .B(\$ecall_insn_o$97 ),
    .Y(ecall_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6822  (
    .A(\$procmux$6016_CMP ),
    .B(\$dret_insn_o$96 ),
    .Y(dret_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6826  (
    .A(\$procmux$6016_CMP ),
    .B(\$mret_insn_o$95 ),
    .Y(mret_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6830  (
    .A(\$procmux$6016_CMP ),
    .B(\$ebrk_insn_o$94 ),
    .Y(ebrk_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6834  (
    .A(2'h0),
    .B(\$csr_op$93 ),
    .S(\$procmux$6016_CMP ),
    .Y(csr_op)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$6838  (
    .A(1'h0),
    .B({ \$alu_op_a_mux_sel_o$139 [1], 1'h1, \$csr_access_o$101  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16828 , \$auto$opt_reduce.cc:137:opt_pmux$16846 , \$procmux$6016_CMP  }),
    .Y(\$procmux$6838_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:341.9-341.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$6846_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(5'h17),
    .Y(\$procmux$6846_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:337.9-337.33|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$6847_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h37),
    .Y(\$procmux$6847_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:584.9-630.12|rtl/cve2/cve2_decoder.sv:231.5-636.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd1)
  ) \$procmux$6859  (
    .A(1'h1),
    .B({ \$23 , \$illegal_insn$25 , \$illegal_insn$27 , \$illegal_insn$32 , 1'h0, \$illegal_insn$56 , \$illegal_insn$62 , \$illegal_insn$66 , \$illegal_insn$90  }),
    .S({ \$procmux$6620_CMP , \$branch_in_dec_o$123 , \$data_we_o$119 , \$procmux$6517_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16848 , \$procmux$6349_CMP , \$procmux$6274_CMP , \$procmux$6220_CMP , \$procmux$6016_CMP  }),
    .Y(\$illegal_insn$102 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:192.7-192.30|rtl/cve2/cve2_decoder.sv:190.5-193.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6880  (
    .A(csr_op),
    .B(2'h0),
    .S(\$15 ),
    .Y(csr_op_o)
  );
  assign \$alu_op_a_mux_sel_o$139 [0] = 1'h0;
  assign \$alu_op_a_mux_sel_o$174 [0] = \$alu_op_a_mux_sel_o$174 [1];
  assign \$alu_operator_o$141 [3] = 1'h1;
  assign \$alu_operator_o$143 [6] = 1'h0;
  assign \$alu_operator_o$155 [4:0] = { 2'h1, \$alu_operator_o$155 [5], 2'h0 };
  assign \$alu_operator_o$156 [4:1] = { 2'h1, \$alu_operator_o$156 [5], 1'h0 };
  assign { \$alu_operator_o$158 [6], \$alu_operator_o$158 [4] } = 2'h0;
  assign { \$alu_operator_o$159 [6], \$alu_operator_o$159 [4] } = 2'h0;
  assign { \$alu_operator_o$162 [6], \$alu_operator_o$162 [4] } = 2'h0;
  assign { \$alu_operator_o$166 [6], \$alu_operator_o$166 [4:0] } = { 2'h0, \$alu_operator_o$166 [5], \$alu_operator_o$166 [5], 2'h0 };
  assign \$imm_b_mux_sel_o$165 [1:0] = { 1'h0, \$imm_b_mux_sel_o$165 [2] };
  assign \$procmux$6501_CMP [0] = \$71 ;
  assign alu_multicycle_o = 1'h0;
  assign alu_operator_o[6] = 1'h0;
  assign div_en_o = 1'h0;
  assign div_sel_o = 1'h0;
  assign \gen_no_rs3_flop.unused_clk  = clk_i;
  assign \gen_no_rs3_flop.unused_rst_n  = rst_ni;
  assign illegal_insn = illegal_insn_o;
  assign illegal_reg_rv32e = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign instr = instr_rdata_i;
  assign instr_alu = instr_rdata_alu_i;
  assign instr_rd = instr_rdata_i[11:7];
  assign instr_rs1 = instr_rdata_i[19:15];
  assign instr_rs2 = instr_rdata_i[24:20];
  assign instr_rs3 = instr_rdata_i[31:27];
  assign mult_en_o = 1'h0;
  assign mult_sel_o = 1'h0;
  assign opcode = instr_rdata_i[6:0];
  assign opcode_alu = instr_rdata_alu_i[6:0];
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign rf_we = rf_we_o;
  assign unused_instr_alu = { instr_rdata_alu_i[19:15], instr_rdata_alu_i[11:7] };
  assign use_rs3_d = 1'h0;
  assign use_rs3_q = 1'h0;
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

/* src = "rtl/cve2/cve2_ex_block.sv:11.8" */
module \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire \$9 ;
  /* src = "rtl/cve2/cve2_ex_block.sv:40.33" */
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:53.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] alu_adder_result_ext;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.16" */
  wire alu_cmp_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:58.16" */
  wire [63:0] alu_imd_val_d;
  /* src = "rtl/cve2/cve2_ex_block.sv:57.16" */
  wire [63:0] alu_imd_val_q;
  /* src = "rtl/cve2/cve2_ex_block.sv:59.16" */
  wire [1:0] alu_imd_val_we;
  /* src = "rtl/cve2/cve2_ex_block.sv:22.33" */
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.32" */
  /* unused_bits = "0" */
  wire alu_is_equal_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:20.33" */
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:21.33" */
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:19.33" */
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.16" */
  wire [31:0] alu_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:43.33" */
  output branch_decision_o;
  wire branch_decision_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:42.33" */
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:15.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:27.33" */
  input div_en_i;
  wire div_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:29.33" */
  input div_sel_i;
  wire div_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:45.33" */
  output ex_valid_o;
  wire ex_valid_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:36.33" */
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:37.33" */
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:35.33" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:26.33" */
  input mult_en_i;
  wire mult_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:28.33" */
  input mult_sel_i;
  wire mult_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.39" */
  wire [32:0] multdiv_alu_operand_a;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.16" */
  wire [32:0] multdiv_alu_operand_b;
  /* src = "rtl/cve2/cve2_ex_block.sv:31.33" */
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:32.33" */
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:25.33" */
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.28" */
  wire [31:0] multdiv_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:56.16" */
  wire multdiv_sel;
  /* src = "rtl/cve2/cve2_ex_block.sv:30.33" */
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:55.16" */
  wire multdiv_valid;
  /* src = "rtl/cve2/cve2_ex_block.sv:41.33" */
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:16.33" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$9 ),
    .Y(ex_valid_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(alu_imd_val_we),
    .Y(\$9 )
  );
  /* src = "rtl/cve2/cve2_ex_block.sv:97.5" */
  \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(alu_cmp_result),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[65:34], imd_val_q_i[31:0] }),
    .imd_val_we_o(alu_imd_val_we),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(33'h000000000),
    .multdiv_operand_b_i(33'h000000000),
    .multdiv_sel_i(1'h0),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(alu_result)
  );
  assign alu_imd_val_q = { imd_val_q_i[65:34], imd_val_q_i[31:0] };
  assign branch_decision_o = alu_cmp_result;
  assign branch_target_o = alu_adder_result_ex_o;
  assign imd_val_d_o = { 2'h0, alu_imd_val_d[63:32], 2'h0, alu_imd_val_d[31:0] };
  assign imd_val_we_o = alu_imd_val_we;
  assign multdiv_alu_operand_a = 33'h000000000;
  assign multdiv_alu_operand_b = 33'h000000000;
  assign multdiv_result = 32'd0;
  assign multdiv_sel = 1'h0;
  assign multdiv_valid = 1'h0;
  assign result_ex_o = alu_result;
endmodule

/* src = "rtl/cve2/cve2_fetch_fifo.sv:15.8" */
module \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$10 ;
  wire \$102 ;
  wire \$106 ;
  wire \$111 ;
  wire \$115 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$127 ;
  wire \$14 ;
  wire \$16 ;
  wire \$20 ;
  wire \$22 ;
  wire \$25 ;
  wire \$27 ;
  wire \$36 ;
  wire \$39 ;
  wire \$41 ;
  wire \$45 ;
  wire \$57 ;
  wire \$6 ;
  wire \$62 ;
  wire \$73 ;
  wire \$75 ;
  wire \$81 ;
  wire \$90 ;
  wire \$96 ;
  wire \$auto$rtlil.cc:3092:Mux$17224 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  wire \$out_valid_o$51 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:57.29" */
  wire addr_incr_two;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.29" */
  wire aligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:23.31" */
  output [1:0] busy_o;
  wire [1:0] busy_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:22.31" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:18.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:48.29" */
  wire [2:0] entry_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.29" */
  wire err;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.29" */
  wire [2:0] err_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.51" */
  wire err_plus2;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.40" */
  wire [2:0] err_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.36" */
  wire err_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:27.31" */
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:29.31" */
  input in_err_i;
  wire in_err_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:28.31" */
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:26.31" */
  input in_valid_i;
  wire in_valid_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.29" */
  wire [30:0] instr_addr_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:60.29" */
  wire instr_addr_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:58.29" */
  wire [30:0] instr_addr_next;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.43" */
  wire [30:0] instr_addr_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:46.29" */
  wire [2:0] lowest_free_entry;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:34.31" */
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:36.31" */
  output out_err_o;
  wire out_err_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:37.31" */
  output out_err_plus2_o;
  wire out_err_plus2_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:35.31" */
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:33.31" */
  input out_ready_i;
  wire out_ready_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:32.31" */
  output out_valid_o;
  wire out_valid_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:50.29" */
  wire pop_fifo;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.29" */
  wire [31:0] rdata;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.29" */
  wire [95:0] rdata_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.40" */
  wire [95:0] rdata_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.36" */
  wire [31:0] rdata_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:19.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.52" */
  wire unaligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:61.29" */
  /* unused_bits = "0" */
  wire unused_addr_in;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.29" */
  wire valid;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.29" */
  wire [2:0] valid_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.43" */
  wire [2:0] valid_popped;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.29" */
  wire [2:0] valid_pushed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.40" */
  wire [2:0] valid_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.36" */
  wire valid_unaligned;
  \$mux  #(
    .WIDTH(32'd32)
  ) \$0  (
    .A(in_rdata_i),
    .B(rdata_q[31:0]),
    .S(valid_q[0]),
    .Y(rdata)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(in_err_i),
    .B(err_q[0]),
    .S(valid_q[0]),
    .Y(err)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(in_err_i),
    .B(err_q[1]),
    .S(valid_q[1]),
    .Y(err_d[0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(valid_q[1]),
    .Y(\$102 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\$102 ),
    .B(valid_q[0]),
    .Y(lowest_free_entry[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(in_valid_i),
    .B(lowest_free_entry[1]),
    .Y(\$106 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(\$106 ),
    .B(valid_q[1]),
    .Y(valid_pushed[1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$109  (
    .A(valid_pushed[1]),
    .B(valid_pushed[2]),
    .S(pop_fifo),
    .Y(valid_popped[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(lowest_free_entry[0]),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(clear_i),
    .Y(\$111 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(valid_popped[1]),
    .B(\$111 ),
    .Y(valid_d[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(valid_pushed[2]),
    .B(pop_fifo),
    .Y(\$115 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(pop_fifo),
    .Y(\$119 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(\$106 ),
    .B(\$119 ),
    .Y(\$121 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(\$115 ),
    .B(\$121 ),
    .Y(entry_en[1])
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$124  (
    .A(in_rdata_i),
    .B(rdata_q[95:64]),
    .S(valid_q[2]),
    .Y(rdata_d[63:32])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$125  (
    .A(in_err_i),
    .B(err_q[2]),
    .S(valid_q[2]),
    .Y(err_d[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(valid_q[2]),
    .Y(\$127 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\$127 ),
    .B(valid_q[1]),
    .Y(lowest_free_entry[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(in_err_i),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(in_valid_i),
    .B(lowest_free_entry[2]),
    .Y(entry_en[2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(valid_q[2]),
    .B(entry_en[2]),
    .Y(valid_pushed[2])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$134  (
    .A(valid_pushed[2]),
    .B(1'h0),
    .S(pop_fifo),
    .Y(valid_popped[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(valid_popped[2]),
    .B(\$111 ),
    .Y(valid_d[2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$6 ),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(unaligned_is_compressed),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(err_q[1]),
    .B(\$10 ),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(valid)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$20 ),
    .B(err_q[0]),
    .Y(\$22 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$23  (
    .A(\$16 ),
    .B(\$22 ),
    .S(valid_q[1]),
    .Y(err_unaligned)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(in_err_i),
    .B(valid_q[0]),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(err_q[0]),
    .Y(\$27 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$auto$rtlil.cc:3092:Mux$17224 ),
    .B(\$27 ),
    .Y(err_plus2)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(\$36 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(\$36 ),
    .B(valid_q[1]),
    .Y(valid_unaligned)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(rdata[17:16]),
    .B(2'h3),
    .Y(\$39 )
  );
  \$mux  #(
    .WIDTH(32'd16)
  ) \$4  (
    .A(in_rdata_i[15:0]),
    .B(rdata_q[47:32]),
    .S(valid_q[1]),
    .Y(rdata_unaligned[31:16])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(err),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$39 ),
    .B(\$41 ),
    .Y(unaligned_is_compressed)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(rdata[1:0]),
    .B(2'h3),
    .Y(\$45 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$45 ),
    .B(\$41 ),
    .Y(aligned_is_compressed)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(valid_q[0]),
    .B(err_q[0]),
    .Y(\$6 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(out_ready_i),
    .B(out_valid_o),
    .Y(\$57 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(clear_i),
    .B(\$57 ),
    .Y(instr_addr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$60  (
    .A(aligned_is_compressed),
    .B(unaligned_is_compressed),
    .S(instr_addr_q[0]),
    .Y(addr_incr_two)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(addr_incr_two),
    .Y(\$62 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd31)
  ) \$63  (
    .A(instr_addr_q),
    .B({ \$62 , addr_incr_two }),
    .Y(instr_addr_next)
  );
  \$mux  #(
    .WIDTH(32'd31)
  ) \$65  (
    .A(instr_addr_next),
    .B(in_addr_i[31:1]),
    .S(clear_i),
    .Y(instr_addr_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(valid_q[0]),
    .Y(lowest_free_entry[0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(aligned_is_compressed),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$73 ),
    .B(instr_addr_q[0]),
    .Y(\$75 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$57 ),
    .B(\$75 ),
    .Y(pop_fifo)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(in_valid_i),
    .B(lowest_free_entry[0]),
    .Y(\$81 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$81 ),
    .B(valid_q[0]),
    .Y(valid_pushed[0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(valid_pushed[0]),
    .B(valid_pushed[1]),
    .S(pop_fifo),
    .Y(valid_popped[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(valid_popped[0]),
    .B(\$111 ),
    .Y(valid_d[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(valid_pushed[1]),
    .B(pop_fifo),
    .Y(\$90 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(\$81 ),
    .B(\$119 ),
    .Y(\$96 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\$90 ),
    .B(\$96 ),
    .Y(entry_en[0])
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$99  (
    .A(in_rdata_i),
    .B(rdata_q[63:32]),
    .S(valid_q[1]),
    .Y(rdata_d[31:0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17589  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(in_rdata_i),
    .EN(entry_en[2]),
    .Q(rdata_q[95:64])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17590  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_d[63:32]),
    .EN(entry_en[1]),
    .Q(rdata_q[63:32])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17591  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_d[31:0]),
    .EN(entry_en[0]),
    .Q(rdata_q[31:0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(31'h00000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd31)
  ) \$auto$ff.cc:266:slice$17592  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_addr_d),
    .EN(instr_addr_en),
    .Q(instr_addr_q)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17593  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(in_err_i),
    .EN(entry_en[2]),
    .Q(err_q[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17594  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(err_d[1]),
    .EN(entry_en[1]),
    .Q(err_q[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17595  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(err_d[0]),
    .EN(entry_en[0]),
    .Q(err_q[0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$17223  (
    .A(\$25 ),
    .B(err_q[1]),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$17224 )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:219.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(valid_d),
    .Q(valid_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3611  (
    .A(instr_addr_q[0]),
    .B(err_plus2),
    .Y(out_err_plus2_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3615  (
    .A(err),
    .B(err_unaligned),
    .S(instr_addr_q[0]),
    .Y(out_err_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$3619  (
    .A(rdata),
    .B({ rdata_unaligned[31:16], rdata[31:16] }),
    .S(instr_addr_q[0]),
    .Y(out_rdata_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3623  (
    .A(valid),
    .B(\$out_valid_o$51 ),
    .S(instr_addr_q[0]),
    .Y(out_valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3627  (
    .A(valid_unaligned),
    .B(valid),
    .S(unaligned_is_compressed),
    .Y(\$out_valid_o$51 )
  );
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign rdata_unaligned[15:0] = rdata[31:16];
  assign unused_addr_in = in_addr_i[0];
endmodule

/* src = "rtl/cve2/cve2_id_stage.sv:19.8" */
module \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i (clk_i, rst_ni, irqs_i, instr_req_o, instr_rdata_i, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o
, exc_cause_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o
, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$1 ;
  wire \$100 ;
  wire \$106 ;
  wire \$111 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$129 ;
  wire \$13 ;
  wire \$15 ;
  wire \$157 ;
  wire \$17 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$198 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$217 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$43 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16852 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$835 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$branch_set_raw_d$147 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$branch_set_raw_d$163 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:430.14-437.8" */
  wire \$csr_pipe_flush$97 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  wire \$id_fsm_d$145 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$id_fsm_d$154 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  wire \$id_fsm_d$162 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  wire \$jump_set_raw$148 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$jump_set_raw$164 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  wire \$perf_branch_o$171 ;
  wire \$procmux$12754_Y ;
  wire \$procmux$12762_Y ;
  wire \$procmux$12770_Y ;
  wire \$procmux$12777_Y ;
  wire \$procmux$12793_Y ;
  wire \$procmux$12801_Y ;
  wire \$procmux$12809_Y ;
  wire \$procmux$12817_Y ;
  wire \$procmux$12895_Y ;
  wire \$procmux$12928_Y ;
  wire \$procmux$12961_Y ;
  wire \$procmux$13039_CMP ;
  wire \$procmux$13040_CMP ;
  wire \$procmux$13041_CMP ;
  wire \$procmux$13042_CMP ;
  wire \$procmux$13043_CMP ;
  wire \$procmux$13044_CMP ;
  wire \$procmux$13046_CMP ;
  wire \$procmux$13047_CMP ;
  wire \$procmux$13048_CMP ;
  /* src = "rtl/cve2/cve2_id_stage.sv:217.16" */
  wire alu_multicycle_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:215.16" */
  wire [1:0] alu_op_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:215.34" */
  wire [1:0] alu_op_a_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:216.16" */
  wire alu_op_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:216.34" */
  wire alu_op_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:242.16" */
  wire [31:0] alu_operand_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:62.37" */
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:243.16" */
  wire [31:0] alu_operand_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:63.37" */
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:214.16" */
  wire [6:0] alu_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:61.37" */
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:43.37" */
  input branch_decision_i;
  wire branch_decision_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:165.16" */
  wire branch_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:167.40" */
  wire branch_jump_set_done_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:167.16" */
  wire branch_jump_set_done_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.16" */
  wire branch_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.28" */
  wire branch_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:166.44" */
  wire branch_set_raw_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:563.9" */
  wire branch_set_raw_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:24.37" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:176.16" */
  wire controller_run;
  /* src = "rtl/cve2/cve2_id_stage.sv:81.37" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:105.37" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:91.37" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:89.37" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:83.37" */
  output csr_op_en_o;
  wire csr_op_en_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:82.37" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:240.16" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_id_stage.sv:126.37" */
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:87.37" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:86.37" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:88.37" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:85.37" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:84.37" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:28.37" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:237.16" */
  wire data_req_allowed;
  /* src = "rtl/cve2/cve2_id_stage.sv:116.37" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:117.37" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:120.37" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:121.37" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:115.37" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:118.37" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:119.37" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.27" */
  wire div_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:72.37" */
  output div_en_ex_o;
  wire div_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.16" */
  wire div_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:74.37" */
  output div_sel_ex_o;
  wire div_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:161.16" */
  wire dret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:159.16" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_id_stage.sv:162.16" */
  wire ecall_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:141.37" */
  output en_wb_o;
  wire en_wb_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:58.37" */
  input ex_valid_i;
  wire ex_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:49.37" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:48.37" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:27.37" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:182.16" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:606.22" */
  wire id_fsm_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:606.12" */
  wire id_fsm_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:40.37" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:51.37" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:92.37" */
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:158.16" */
  wire illegal_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:29.37" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:67.37" */
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:220.16" */
  wire [67:0] imd_val_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:68.37" */
  output [67:0] imd_val_q_ex_o;
  wire [67:0] imd_val_q_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:66.37" */
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:193.16" */
  wire [31:0] imm_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:222.16" */
  wire imm_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:194.16" */
  wire [31:0] imm_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:223.16" */
  wire [2:0] imm_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:223.31" */
  wire [2:0] imm_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:188.16" */
  wire [31:0] imm_b_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:186.16" */
  wire [31:0] imm_i_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:190.16" */
  wire [31:0] imm_j_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:187.16" */
  wire [31:0] imm_s_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:189.16" */
  wire [31:0] imm_u_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:175.16" */
  wire instr_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:174.16" */
  wire instr_executing;
  /* src = "rtl/cve2/cve2_id_stage.sv:173.16" */
  wire instr_executing_spec;
  /* src = "rtl/cve2/cve2_id_stage.sv:52.37" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:53.37" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:172.16" */
  wire instr_first_cycle;
  /* src = "rtl/cve2/cve2_id_stage.sv:38.37" */
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:152.37" */
  output instr_id_done_o;
  wire instr_id_done_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:36.37" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:142.37" */
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:34.37" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:35.37" */
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:33.37" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:37.37" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:39.37" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:32.37" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:108.37" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:106.37" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:107.37" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:168.16" */
  wire jump_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:170.16" */
  wire jump_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:169.16" */
  wire jump_set_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:170.26" */
  wire jump_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:101.37" */
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:102.37" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:111.37" */
  input lsu_load_err_i;
  wire lsu_load_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:236.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_id_stage.sv:236.25" */
  wire lsu_req_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:95.37" */
  output lsu_req_o;
  wire lsu_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:59.37" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:235.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_id_stage.sv:98.37" */
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:112.37" */
  input lsu_store_err_i;
  wire lsu_store_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:234.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:97.37" */
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:99.37" */
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:233.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_id_stage.sv:96.37" */
  output lsu_we_o;
  wire lsu_we_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:160.16" */
  wire mret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:226.28" */
  wire mult_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:71.37" */
  output mult_en_ex_o;
  wire mult_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:226.16" */
  wire mult_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:73.37" */
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:228.16" */
  wire multdiv_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:77.37" */
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:78.37" */
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:229.16" */
  wire [1:0] multdiv_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:75.37" */
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:230.16" */
  wire [1:0] multdiv_signed_mode;
  /* src = "rtl/cve2/cve2_id_stage.sv:76.37" */
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:183.16" */
  wire multicycle_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:109.37" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:55.37" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:47.37" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:46.37" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:146.37" */
  output perf_branch_o;
  wire perf_branch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:151.37" */
  output perf_div_wait_o;
  wire perf_div_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:148.37" */
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:145.37" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:147.37" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:150.37" */
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:90.37" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:125.37" */
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:129.37" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:131.37" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:210.16" */
  wire [31:0] rf_rdata_a_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:130.37" */
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:211.16" */
  wire [31:0] rf_rdata_b_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:132.37" */
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:200.16" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:201.16" */
  wire rf_ren_a_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:133.37" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:200.26" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:201.30" */
  wire rf_ren_b_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:134.37" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:137.37" */
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:138.37" */
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:198.16" */
  wire rf_wdata_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:199.16" */
  wire rf_we_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:139.37" */
  output rf_we_id_o;
  wire rf_we_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:199.27" */
  wire rf_we_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:25.37" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_id_stage.sv:218.16" */
  wire stall_alu;
  /* src = "rtl/cve2/cve2_id_stage.sv:179.16" */
  wire stall_branch;
  /* src = "rtl/cve2/cve2_id_stage.sv:181.16" */
  wire stall_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:180.16" */
  wire stall_jump;
  /* src = "rtl/cve2/cve2_id_stage.sv:177.16" */
  wire stall_mem;
  /* src = "rtl/cve2/cve2_id_stage.sv:178.16" */
  wire stall_multdiv;
  /* src = "rtl/cve2/cve2_id_stage.sv:122.37" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:163.16" */
  wire wfi_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:191.16" */
  wire [31:0] zimm_rs1_type;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_fetch_err_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(instr_valid_i),
    .B(\$100 ),
    .Y(illegal_insn_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(mult_en_dec),
    .B(div_en_dec),
    .Y(multdiv_en_dec)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(data_req_allowed),
    .B(lsu_req_dec),
    .Y(\$106 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(instr_executing),
    .B(\$106 ),
    .Y(lsu_req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(instr_executing),
    .B(mult_en_dec),
    .Y(mult_en_ex_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(instr_executing),
    .B(div_en_dec),
    .Y(div_en_ex_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(csr_access_o),
    .B(instr_executing),
    .Y(\$111 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(\$111 ),
    .B(instr_id_done_o),
    .Y(csr_op_en_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(branch_set_raw_q),
    .B(jump_set_raw),
    .Y(\$118 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\$118 ),
    .B(branch_jump_set_done_q),
    .Y(\$120 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(instr_valid_i),
    .B(\$1 ),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$121  (
    .A(instr_valid_clear_o),
    .Y(\$122 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(\$120 ),
    .B(\$122 ),
    .Y(branch_jump_set_done_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(branch_jump_set_done_q),
    .Y(\$129 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(jump_set_raw),
    .B(\$129 ),
    .Y(jump_set)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(branch_set_raw_q),
    .B(\$129 ),
    .Y(branch_set)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(illegal_insn_o),
    .Y(\$15 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(rf_we_dec),
    .B(ex_valid_i),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(rf_ren_b_dec),
    .Y(rf_ren_b_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(stall_mem),
    .B(stall_multdiv),
    .Y(\$182 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(\$182 ),
    .B(stall_jump),
    .Y(\$184 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$184 ),
    .B(stall_branch),
    .Y(\$186 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(\$186 ),
    .B(stall_alu),
    .Y(stall_id)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(stall_id),
    .Y(\$190 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(flush_id),
    .Y(\$192 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(\$190 ),
    .B(\$192 ),
    .Y(\$194 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$194 ),
    .B(instr_executing),
    .Y(instr_id_done_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(id_fsm_q),
    .Y(\$198 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(instr_valid_i),
    .B(\$198 ),
    .Y(data_req_allowed)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$20  (
    .A(alu_op_a_mux_sel_dec),
    .B(2'h1),
    .S(lsu_addr_incr_req_i),
    .Y(alu_op_a_mux_sel)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$201  (
    .A(ex_valid_i),
    .B(lsu_resp_valid_i),
    .S(lsu_req_dec),
    .Y(multicycle_done)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(lsu_resp_valid_i),
    .Y(\$203 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(\$203 ),
    .B(data_req_allowed),
    .Y(\$205 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(lsu_req_dec),
    .B(\$205 ),
    .Y(\$207 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(instr_valid_i),
    .B(\$207 ),
    .Y(stall_mem)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(alu_op_b_mux_sel_dec),
    .B(lsu_addr_incr_req_i),
    .Y(alu_op_b_mux_sel)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(\$13 ),
    .B(controller_run),
    .Y(instr_executing)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$216  (
    .A(instr_executing),
    .B(lsu_req_dec),
    .Y(\$217 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$22  (
    .A(imm_b_mux_sel_dec),
    .B(3'h6),
    .S(lsu_addr_incr_req_i),
    .Y(imm_b_mux_sel)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(\$217 ),
    .B(\$203 ),
    .Y(perf_dside_wait_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(ebrk_insn),
    .Y(\$223 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(ecall_insn_dec),
    .Y(\$225 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(\$223 ),
    .B(\$225 ),
    .Y(\$227 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(illegal_insn_dec),
    .Y(\$229 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$230  (
    .A(\$227 ),
    .B(\$229 ),
    .Y(\$231 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(debug_mode_o),
    .Y(\$233 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(dret_insn_dec),
    .B(\$233 ),
    .Y(\$235 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(\$235 ),
    .Y(\$237 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$231 ),
    .B(\$237 ),
    .Y(\$239 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(illegal_csr_insn_i),
    .Y(\$241 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\$239 ),
    .B(\$241 ),
    .Y(\$243 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(\$243 ),
    .B(\$1 ),
    .Y(instr_perf_count_id_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(stall_multdiv),
    .B(div_en_dec),
    .Y(perf_div_wait_o)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A(zimm_rs1_type),
    .B(32'd0),
    .S(imm_a_mux_sel),
    .Y(imm_a)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$29  (
    .A(2'h2),
    .B(2'h1),
    .S(instr_is_compressed_i),
    .Y(\$auto$rtlil.cc:3092:Mux$835 [2:1])
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$33  (
    .A(rf_rdata_b_i),
    .B(imm_b),
    .S(alu_op_b_mux_sel),
    .Y(alu_operand_b_ex_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(rf_we_raw),
    .B(instr_executing),
    .Y(\$43 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$43 ),
    .B(\$241 ),
    .Y(rf_we_id_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(csr_op_o),
    .B(1'h1),
    .Y(\$54 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_op_o),
    .B(2'h2),
    .Y(\$56 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$56 ),
    .Y(\$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(csr_op_en_o),
    .B(\$58 ),
    .Y(\$60 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(instr_rdata_i[31:20]),
    .B(10'h300),
    .Y(\$62 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(instr_rdata_i[31:20]),
    .B(10'h304),
    .Y(\$64 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(\$62 ),
    .B(\$64 ),
    .Y(\$66 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(instr_rdata_i[31:20]),
    .B(11'h747),
    .Y(\$68 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$66 ),
    .B(\$68 ),
    .Y(\$70 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(instr_rdata_i[31:25]),
    .B(5'h1d),
    .Y(\$72 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\$70 ),
    .B(\$72 ),
    .Y(\$74 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(csr_op_o),
    .Y(\$79 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$17 ),
    .B(rf_ren_a_dec),
    .Y(rf_ren_a_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(csr_op_en_o),
    .B(\$79 ),
    .Y(\$81 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b0),
    .Y(\$83 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b1),
    .Y(\$85 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(\$85 ),
    .Y(\$87 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b2),
    .Y(\$89 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$87 ),
    .B(\$89 ),
    .Y(\$91 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b3),
    .Y(\$93 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$91 ),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(illegal_insn_dec),
    .B(illegal_csr_insn_i),
    .Y(\$100 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:305.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$17596  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(imd_val_d_ex_i[33:0]),
    .EN(imd_val_we_ex_i[1]),
    .Q(imd_val_q[33:0])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:305.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$17597  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(imd_val_d_ex_i[67:34]),
    .EN(imd_val_we_ex_i[0]),
    .Q(imd_val_q[67:34])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:608.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17598  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_fsm_d),
    .EN(instr_executing),
    .Q(id_fsm_q)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16851  (
    .A({ lsu_req_dec, alu_multicycle_dec, jump_in_dec }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16852 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:583.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_jump_set_done_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_jump_set_done_d),
    .Q(branch_jump_set_done_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:565.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_set_raw_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_set_raw_d),
    .Q(branch_set_raw_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12746  (
    .A(multicycle_done),
    .Y(\$id_fsm_d$162 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12754  (
    .A(jump_in_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$12754_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12762  (
    .A(branch_in_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$12762_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:687.13-687.43|rtl/cve2/cve2_id_stage.sv:686.11-692.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12770  (
    .A(multdiv_en_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$12770_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:683.13-683.54|rtl/cve2/cve2_id_stage.sv:682.11-684.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12777  (
    .A(rf_we_dec),
    .B(\$157 ),
    .S(multdiv_en_dec),
    .Y(\$procmux$12777_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12785  (
    .A(\$id_fsm_d$154 ),
    .B(\$id_fsm_d$162 ),
    .S(id_fsm_q),
    .Y(id_fsm_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12793  (
    .A(\$procmux$12895_Y ),
    .B(\$procmux$12777_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$12793_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12801  (
    .A(jump_in_dec),
    .B(\$procmux$12754_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$12801_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12809  (
    .A(\$branch_set_raw_d$147 ),
    .B(\$procmux$12762_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$12809_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:681.22-693.12|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12817  (
    .A(\$procmux$12928_Y ),
    .B(\$procmux$12770_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$12817_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:644.32-650.18|rtl/cve2/cve2_id_stage.sv:644.15-650.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12828  (
    .A(ex_valid_i),
    .Y(\$id_fsm_d$145 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12864  (
    .A(1'h0),
    .B({ \$id_fsm_d$145 , branch_decision_i, 1'h1 }),
    .S({ multdiv_en_dec, branch_in_dec, \$auto$opt_reduce.cc:137:opt_pmux$16852  }),
    .Y(\$id_fsm_d$154 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:670.33-674.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12895  (
    .A(rf_we_dec),
    .B({ \$157 , 1'h0 }),
    .S({ multdiv_en_dec, alu_multicycle_dec }),
    .Y(\$procmux$12895_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:652.28-663.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12916  (
    .A(branch_in_dec),
    .B(branch_decision_i),
    .Y(\$branch_set_raw_d$147 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:644.15-650.18|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12928  (
    .A(multdiv_en_dec),
    .B(\$id_fsm_d$145 ),
    .Y(\$procmux$12928_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:664.26-669.16|rtl/cve2/cve2_id_stage.sv:635.11-678.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12937  (
    .A(jump_in_dec),
    .B(jump_set_dec),
    .Y(\$jump_set_raw$148 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12955  (
    .A(branch_in_dec),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$perf_branch_o$171 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12961  (
    .A(alu_multicycle_dec),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$12961_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12967  (
    .A(\$jump_set_raw$148 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$jump_set_raw$164 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:635.11-678.18|rtl/cve2/cve2_id_stage.sv:633.7-698.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12973  (
    .A(\$branch_set_raw_d$147 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$branch_set_raw_d$163 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12978  (
    .A(instr_executing),
    .B(\$perf_branch_o$171 ),
    .Y(perf_branch_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12984  (
    .A(instr_executing),
    .B(\$procmux$12961_Y ),
    .Y(stall_alu)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12987  (
    .A(rf_we_dec),
    .B(\$procmux$12793_Y ),
    .S(instr_executing),
    .Y(rf_we_raw)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12990  (
    .A(instr_executing),
    .B(\$procmux$12801_Y ),
    .Y(stall_jump)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12993  (
    .A(instr_executing),
    .B(\$procmux$12809_Y ),
    .Y(stall_branch)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12996  (
    .A(instr_executing),
    .B(\$procmux$12817_Y ),
    .Y(stall_multdiv)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12999  (
    .A(instr_executing),
    .B(\$jump_set_raw$164 ),
    .Y(jump_set_raw)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:633.7-698.14|rtl/cve2/cve2_id_stage.sv:632.5-699.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13002  (
    .A(instr_executing),
    .B(\$branch_set_raw_d$163 ),
    .Y(branch_set_raw_d)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:431.7-436.10|rtl/cve2/cve2_id_stage.sv:430.14-437.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13014  (
    .A(\$81 ),
    .B(\$95 ),
    .Y(\$csr_pipe_flush$97 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:423.7-429.10|rtl/cve2/cve2_id_stage.sv:422.5-437.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13022  (
    .A(\$csr_pipe_flush$97 ),
    .B(\$74 ),
    .S(\$60 ),
    .Y(csr_pipe_flush)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:327.18-327.46|rtl/cve2/cve2_id_stage.sv:325.5-329.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13029  (
    .A(result_ex_i),
    .B(csr_rdata_i),
    .S(rf_wdata_sel),
    .Y(rf_wdata_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$13038  (
    .A(32'd4),
    .B({ imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, 29'h00000000, \$auto$rtlil.cc:3092:Mux$835 [2:1], 1'h0 }),
    .S({ \$procmux$13044_CMP , \$procmux$13043_CMP , \$procmux$13042_CMP , \$procmux$13041_CMP , \$procmux$13040_CMP , \$procmux$13039_CMP  }),
    .Y(imm_b)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:283.24-283.70|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13039_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h5),
    .Y(\$procmux$13039_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:282.24-282.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13040_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h4),
    .Y(\$procmux$13040_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:281.24-281.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13041_CMP0  (
    .A(imm_b_mux_sel),
    .B(2'h3),
    .Y(\$procmux$13041_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:280.24-280.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13042_CMP0  (
    .A(imm_b_mux_sel),
    .B(2'h2),
    .Y(\$procmux$13042_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:279.24-279.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13043_CMP0  (
    .A(imm_b_mux_sel),
    .B(1'h1),
    .Y(\$procmux$13043_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:278.24-278.43|rtl/cve2/cve2_id_stage.sv:277.5-286.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13044_CMP0  (
    .A(imm_b_mux_sel),
    .Y(\$procmux$13044_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$13045  (
    .A(rf_rdata_a_i),
    .B({ lsu_addr_last_i, pc_id_i, imm_a }),
    .S({ \$procmux$13048_CMP , \$procmux$13047_CMP , \$procmux$13046_CMP  }),
    .Y(alu_operand_a_ex_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:267.20-267.42|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13046_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h3),
    .Y(\$procmux$13046_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:266.20-266.44|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13047_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h2),
    .Y(\$procmux$13047_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:265.20-265.52|rtl/cve2/cve2_id_stage.sv:263.5-269.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13048_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(1'h1),
    .Y(\$procmux$13048_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:447.5" */
  \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(wfi_insn_dec)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:340.5" */
  \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext),
    .data_type_o(lsu_type),
    .data_we_o(lsu_we),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(data_req_allowed),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator),
    .multdiv_signed_mode_o(multdiv_signed_mode),
    .rf_raddr_a_o(rf_raddr_a_o),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o(rf_waddr_id_o),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(wfi_insn_dec),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  assign \$auto$rtlil.cc:3092:Mux$835 [0] = 1'h0;
  assign alu_operand_a = alu_operand_a_ex_o;
  assign alu_operand_b = alu_operand_b_ex_o;
  assign alu_operator_ex_o = alu_operator;
  assign branch_set_raw = branch_set_raw_q;
  assign div_en_id = div_en_ex_o;
  assign en_wb_o = instr_id_done_o;
  assign imd_val_q_ex_o = imd_val_q;
  assign instr_done = instr_id_done_o;
  assign instr_executing_spec = instr_executing;
  assign instr_first_cycle = data_req_allowed;
  assign instr_first_cycle_id_o = data_req_allowed;
  assign lsu_req = lsu_req_o;
  assign lsu_sign_ext_o = lsu_sign_ext;
  assign lsu_type_o = lsu_type;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign lsu_we_o = lsu_we;
  assign mult_en_id = mult_en_ex_o;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
  assign multdiv_operator_ex_o = multdiv_operator;
  assign multdiv_signed_mode_ex_o = multdiv_signed_mode;
  assign perf_wfi_wait_o = wfi_insn_dec;
  assign rf_rdata_a_fwd = rf_rdata_a_i;
  assign rf_rdata_b_fwd = rf_rdata_b_i;
  assign rf_ren_a = rf_ren_a_o;
  assign rf_ren_b = rf_ren_b_o;
endmodule

/* src = "rtl/cve2/cve2_if_stage.sv:15.8" */
module \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, exc_cause, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$11 ;
  wire \$13 ;
  wire \$19 ;
  wire \$25 ;
  wire \$27 ;
  wire \$31 ;
  wire \$33 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$5 ;
  wire \$procmux$13068_CMP ;
  wire \$procmux$13069_CMP ;
  wire \$procmux$13070_CMP ;
  wire \$procmux$13071_CMP ;
  wire \$procmux$13073_CMP ;
  wire \$procmux$13074_CMP ;
  wire \$procmux$13075_CMP ;
  /* src = "rtl/cve2/cve2_if_stage.sv:22.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:83.22" */
  wire branch_req;
  /* src = "rtl/cve2/cve2_if_stage.sv:61.39" */
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:19.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:66.39" */
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:64.39" */
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:68.39" */
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:69.39" */
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:58.39" */
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_if_stage.sv:102.22" */
  wire [31:0] exc_pc;
  /* src = "rtl/cve2/cve2_if_stage.sv:57.39" */
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:90.22" */
  wire [31:0] fetch_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:84.22" */
  /* unused_bits = "0" */
  wire [31:0] fetch_addr_n;
  /* src = "rtl/cve2/cve2_if_stage.sv:91.22" */
  wire fetch_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:92.22" */
  wire fetch_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:89.22" */
  wire [31:0] fetch_rdata;
  /* src = "rtl/cve2/cve2_if_stage.sv:88.22" */
  wire fetch_ready;
  /* src = "rtl/cve2/cve2_if_stage.sv:87.22" */
  wire fetch_valid;
  /* src = "rtl/cve2/cve2_if_stage.sv:72.39" */
  input id_in_ready_i;
  wire id_in_ready_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:75.39" */
  output if_busy_o;
  wire if_busy_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:107.22" */
  wire if_id_pipe_reg_we;
  /* src = "rtl/cve2/cve2_if_stage.sv:99.22" */
  wire if_instr_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:100.22" */
  wire if_instr_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:98.22" */
  wire if_instr_pmp_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:95.22" */
  wire illegal_c_insn;
  /* src = "rtl/cve2/cve2_if_stage.sv:46.39" */
  output illegal_c_insn_id_o;
  wire illegal_c_insn_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:27.39" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:94.22" */
  wire [31:0] instr_decompressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:31.39" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:44.39" */
  output instr_fetch_err_o;
  wire instr_fetch_err_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:45.39" */
  output instr_fetch_err_plus2_o;
  wire instr_fetch_err_plus2_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:28.39" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:96.22" */
  wire instr_is_compressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:42.39" */
  output instr_is_compressed_id_o;
  wire instr_is_compressed_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.22" */
  wire instr_new_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:35.39" */
  output instr_new_id_o;
  wire instr_new_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.38" */
  wire instr_new_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:37.39" */
  output [31:0] instr_rdata_alu_id_o;
  wire [31:0] instr_rdata_alu_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:39.39" */
  output [15:0] instr_rdata_c_id_o;
  wire [15:0] instr_rdata_c_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:30.39" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:36.39" */
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:26.39" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:29.39" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:54.39" */
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.22" */
  wire instr_valid_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:34.39" */
  output instr_valid_id_o;
  wire instr_valid_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.40" */
  wire instr_valid_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:104.22" */
  /* unused_bits = "6" */
  wire [6:0] irq_id;
  /* src = "rtl/cve2/cve2_if_stage.sv:49.39" */
  output [31:0] pc_id_o;
  wire [31:0] pc_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:48.39" */
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:56.39" */
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:109.22" */
  wire [2:0] pc_mux_internal;
  /* src = "rtl/cve2/cve2_if_stage.sv:55.39" */
  input pc_set_i;
  wire pc_set_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:50.39" */
  input pmp_err_if_i;
  wire pmp_err_if_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:51.39" */
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:82.22" */
  wire prefetch_busy;
  /* src = "rtl/cve2/cve2_if_stage.sv:23.40" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:20.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_if_stage.sv:111.22" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:112.22" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_csr_mtvec;
  /* src = "rtl/cve2/cve2_if_stage.sv:85.22" */
  /* unused_bits = "0" */
  wire unused_fetch_addr_n0;
  /* src = "rtl/cve2/cve2_if_stage.sv:105.22" */
  /* unused_bits = "0" */
  wire unused_irq_bit;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(pmp_err_if_i),
    .B(\$13 ),
    .Y(if_instr_pmp_err)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(fetch_err),
    .B(if_instr_pmp_err),
    .Y(if_instr_err)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(instr_is_compressed),
    .Y(\$19 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(fetch_addr[2]),
    .B(\$19 ),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$11 ),
    .B(pmp_err_if_plus2_i),
    .Y(\$13 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$13 ),
    .B(fetch_err_plus2),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(pmp_err_if_i),
    .Y(\$27 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$25 ),
    .B(\$27 ),
    .Y(if_instr_err_plus2)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(fetch_err),
    .Y(\$31 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(fetch_valid),
    .B(\$31 ),
    .Y(\$33 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(fetch_valid),
    .B(id_in_ready_i),
    .Y(instr_new_id_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(pc_set_i),
    .Y(\$37 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(instr_new_id_d),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(pc_mux_i),
    .Y(\$5 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(instr_valid_clear_i),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(instr_valid_id_q),
    .B(\$41 ),
    .Y(\$43 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$39 ),
    .B(\$43 ),
    .Y(instr_valid_id_d)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5 ),
    .B(pc_set_i),
    .Y(csr_mtvec_init_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17599  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_addr),
    .EN(instr_new_id_d),
    .Q(pc_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17600  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_decompressed),
    .EN(instr_new_id_d),
    .Q(instr_rdata_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(16'h0000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$auto$ff.cc:266:slice$17601  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_rdata[15:0]),
    .EN(instr_new_id_d),
    .Q(instr_rdata_c_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17603  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_is_compressed),
    .EN(instr_new_id_d),
    .Q(instr_is_compressed_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17604  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(if_instr_err_plus2),
    .EN(instr_new_id_d),
    .Q(instr_fetch_err_plus2_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17605  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(if_instr_err),
    .EN(instr_new_id_d),
    .Q(instr_fetch_err_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17606  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(illegal_c_insn),
    .EN(instr_new_id_d),
    .Q(illegal_c_insn_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_new_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_new_id_d),
    .Q(instr_new_id_q)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_valid_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_valid_id_d),
    .Q(instr_valid_id_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$13067  (
    .A({ boot_addr_i[31:8], 8'h00 }),
    .B({ branch_target_ex_i, exc_pc[31:2], 2'h0, csr_mepc_i, csr_depc_i }),
    .S({ \$procmux$13071_CMP , \$procmux$13070_CMP , \$procmux$13069_CMP , \$procmux$13068_CMP  }),
    .Y(fetch_addr_n)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13068_CMP0  (
    .A(pc_mux_i),
    .B(3'h4),
    .Y(\$procmux$13068_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:141.16-141.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13069_CMP0  (
    .A(pc_mux_i),
    .B(2'h3),
    .Y(\$procmux$13069_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:140.16-140.38|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13070_CMP0  (
    .A(pc_mux_i),
    .B(2'h2),
    .Y(\$procmux$13070_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:139.16-139.50|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13071_CMP0  (
    .A(pc_mux_i),
    .B(1'h1),
    .Y(\$procmux$13071_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd30)
  ) \$procmux$13072  (
    .A({ csr_mtvec_i[31:8], 6'h00 }),
    .B({ csr_mtvec_i[31:8], exc_cause[5:0], 60'h000008000000204 }),
    .S({ \$procmux$13075_CMP , \$procmux$13074_CMP , \$procmux$13073_CMP  }),
    .Y(exc_pc[31:2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13073_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h3),
    .Y(\$procmux$13073_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:126.23-126.43|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13074_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h2),
    .Y(\$procmux$13074_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:125.23-125.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13075_CMP0  (
    .A(exc_pc_mux_i),
    .B(1'h1),
    .Y(\$procmux$13075_CMP )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:203.27" */
  \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$33 )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:152.5" */
  \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(fetch_addr),
    .branch_i(pc_set_i),
    .busy_o(prefetch_busy),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign branch_req = pc_set_i;
  assign exc_pc[1:0] = 2'h0;
  assign fetch_ready = id_in_ready_i;
  assign if_busy_o = prefetch_busy;
  assign if_id_pipe_reg_we = instr_new_id_d;
  assign instr_new_id_o = instr_new_id_q;
  assign instr_rdata_alu_id_o = instr_rdata_id_o;
  assign instr_valid_id_o = instr_valid_id_q;
  assign irq_id = exc_cause;
  assign pc_if_o = fetch_addr;
  assign pc_mux_internal = pc_mux_i;
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_mtvec = csr_mtvec_i[7:0];
  assign unused_fetch_addr_n0 = fetch_addr_n[0];
  assign unused_irq_bit = exc_cause[6];
endmodule

/* src = "rtl/cve2/cve2_load_store_unit.sv:16.8" */
module \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, busy_o, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i
, addr_incr_req_o, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, perf_load_o, perf_store_o);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$124 ;
  wire \$126 ;
  wire \$132 ;
  wire \$155 ;
  wire \$159 ;
  wire \$161 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$179 ;
  wire \$183 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$78 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$addr_update$117 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire \$addr_update$127 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$addr_update$135 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$addr_update$85 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17610 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17612 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17614 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17630 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17634 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17636 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17645 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17649 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17616 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17627 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17640 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17653 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16854 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16856 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16886 ;
  wire \$auto$opt_share.cc:222:merge_operators$17225 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$865 ;
  wire \$auto$rtlil.cc:3094:Pmux$17227 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  wire [3:0] \$data_be$10 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  wire [3:0] \$data_be$3 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  wire [3:0] \$data_be$4 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  wire [3:0] \$data_be$5 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  wire [3:0] \$data_be$8 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  wire [3:0] \$data_be$9 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$handle_misaligned_d$119 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire \$handle_misaligned_d$98 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire [2:0] \$ls_fsm_ns$122 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire [2:0] \$ls_fsm_ns$84 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_load_o$92 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_store_o$93 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$pmp_err_d$88 ;
  wire \$procmux$12198_CMP ;
  wire \$procmux$12224_CMP ;
  wire \$procmux$12252_CMP ;
  wire \$procmux$12320_CMP ;
  wire [1:0] \$procmux$12585_CMP ;
  wire \$procmux$12585_CTRL ;
  wire \$procmux$12586_CMP ;
  wire [31:0] \$procmux$12589_Y ;
  wire \$procmux$12592_CMP ;
  wire [31:0] \$procmux$12595_Y ;
  wire \$procmux$12598_CMP ;
  wire [31:0] \$procmux$12602_Y ;
  wire \$procmux$12605_CMP ;
  wire [31:0] \$procmux$12619_Y ;
  wire \$procmux$12677_CMP ;
  wire \$procmux$12678_CMP ;
  wire [1:0] \$procmux$12686_CMP ;
  wire \$procmux$12686_CTRL ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:44.24" */
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:46.24" */
  output addr_incr_req_o;
  wire addr_incr_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.30" */
  wire [31:0] addr_last_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:48.24" */
  output [31:0] addr_last_o;
  wire [31:0] addr_last_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.17" */
  wire [31:0] addr_last_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:68.17" */
  wire addr_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:58.24" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:69.17" */
  wire ctrl_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:64.17" */
  wire [31:0] data_addr;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:28.24" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:65.17" */
  wire [31:0] data_addr_w_aligned;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:79.17" */
  wire [3:0] data_be;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:30.24" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:25.24" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:23.24" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:77.17" */
  wire [1:0] data_offset;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:93.17" */
  wire data_or_pmp_err;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:26.24" */
  input data_pmp_err_i;
  wire data_pmp_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:82.17" */
  wire [31:0] data_rdata_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:32.24" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:22.24" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:24.24" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:74.17" */
  wire data_sign_ext_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:73.17" */
  wire [1:0] data_type_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:80.17" */
  wire [31:0] data_wdata;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:31.24" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:29.24" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:75.17" */
  wire data_we_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.38" */
  wire handle_misaligned_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.17" */
  wire handle_misaligned_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:55.24" */
  output load_err_o;
  wire load_err_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.12" */
  wire [2:0] ls_fsm_cs;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.23" */
  wire [2:0] ls_fsm_ns;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.28" */
  wire lsu_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.17" */
  wire lsu_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:40.24" */
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:41.24" */
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:42.24" */
  input lsu_req_i;
  wire lsu_req_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:52.24" */
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:38.24" */
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:36.24" */
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:37.24" */
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:35.24" */
  input lsu_we_i;
  wire lsu_we_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:60.24" */
  output perf_load_o;
  wire perf_load_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:61.24" */
  output perf_store_o;
  wire perf_store_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.28" */
  wire pmp_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.17" */
  wire pmp_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:86.17" */
  wire [31:0] rdata_b_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:85.17" */
  wire [31:0] rdata_h_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:72.17" */
  wire [1:0] rdata_offset_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:71.17" */
  wire [23:0] rdata_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:70.17" */
  wire rdata_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:84.17" */
  wire [31:0] rdata_w_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:88.17" */
  wire split_misaligned_access;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:56.24" */
  output store_err_o;
  wire store_err_o;
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$101 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(data_err_i),
    .B(pmp_err_q),
    .Y(\$103 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(data_we_q),
    .Y(\$105 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(data_gnt_i),
    .Y(\$114 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\$103 ),
    .Y(\$110 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(data_gnt_i),
    .B(\$110 ),
    .Y(\$112 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(data_gnt_i),
    .B(pmp_err_q),
    .Y(\$124 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(lsu_err_q),
    .Y(\$126 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(data_err_i),
    .Y(\$132 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(lsu_err_q),
    .B(data_err_i),
    .Y(\$155 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(\$155 ),
    .B(pmp_err_q),
    .Y(data_or_pmp_err)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$159 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(ls_fsm_cs),
    .Y(\$161 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$162  (
    .A(\$159 ),
    .B(\$161 ),
    .Y(lsu_resp_valid_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(\$161 ),
    .B(data_rvalid_i),
    .Y(\$167 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(data_or_pmp_err),
    .Y(\$169 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(\$167 ),
    .B(\$169 ),
    .Y(\$171 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(\$171 ),
    .B(\$105 ),
    .Y(lsu_rdata_valid_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(data_or_pmp_err),
    .B(\$105 ),
    .Y(\$179 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(\$179 ),
    .B(lsu_resp_valid_o),
    .Y(load_err_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$182  (
    .A(data_or_pmp_err),
    .B(data_we_q),
    .Y(\$183 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(\$183 ),
    .B(lsu_resp_valid_o),
    .Y(store_err_o)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(ls_fsm_cs),
    .Y(busy_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$25  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h0),
    .S(addr_incr_req_o),
    .Y(addr_last_d[1:0])
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(lsu_type_i),
    .Y(\$63 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(adder_result_ex_i[1:0]),
    .Y(\$65 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(lsu_type_i),
    .B(1'h1),
    .Y(\$69 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h3),
    .Y(\$71 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$69 ),
    .B(\$71 ),
    .Y(\$73 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$67 ),
    .B(\$73 ),
    .Y(split_misaligned_access)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(lsu_we_i),
    .Y(\$78 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(split_misaligned_access),
    .Y(\$auto$rtlil.cc:3092:Mux$865 [1])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(24'h000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$auto$ff.cc:266:slice$17607  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_rdata_i[31:8]),
    .EN(rdata_update),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17608  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(adder_result_ex_i[1:0]),
    .EN(ctrl_update),
    .Q(rdata_offset_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17609  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(pmp_err_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17616 ),
    .Q(pmp_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17618  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_err_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17627 ),
    .Q(lsu_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17629  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ls_fsm_ns),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17640 ),
    .Q(ls_fsm_cs)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17642  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(handle_misaligned_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17653 ),
    .Q(handle_misaligned_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17655  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_we_i),
    .EN(ctrl_update),
    .Q(data_we_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17656  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_type_i),
    .EN(ctrl_update),
    .Q(data_type_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17657  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_sign_ext_i),
    .EN(ctrl_update),
    .Q(data_sign_ext_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:210.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17658  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ adder_result_ex_i[31:2], addr_last_d[1:0] }),
    .EN(addr_update),
    .Q(addr_last_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17611  (
    .A({ \$procmux$12198_CMP , data_rvalid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17610 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17613  (
    .A({ \$procmux$12252_CMP , \$101  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17612 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17615  (
    .A({ \$procmux$12252_CMP , \$procmux$12198_CMP , \$161  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17614 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17626  (
    .A({ lsu_req_i, \$161  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17625 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17631  (
    .A({ \$procmux$12252_CMP , \$101 , data_gnt_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17630 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17635  (
    .A({ \$procmux$12224_CMP , \$124  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17634 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17637  (
    .A({ \$procmux$12320_CMP , \$124  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17636 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17646  (
    .A({ lsu_req_i, \$161 , data_gnt_i }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17645 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17650  (
    .A({ \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP , \$161  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17649 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17617  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17614 , \$auto$opt_dff.cc:194:make_patterns_logic$17612 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17616 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17628  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17614 , \$auto$opt_dff.cc:194:make_patterns_logic$17612 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17627 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17641  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17636 , \$auto$opt_dff.cc:194:make_patterns_logic$17634 , \$auto$opt_dff.cc:194:make_patterns_logic$17630 , \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17610  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17640 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17654  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17649 , \$auto$opt_dff.cc:194:make_patterns_logic$17645 , \$auto$opt_dff.cc:194:make_patterns_logic$17634 , \$auto$opt_dff.cc:194:make_patterns_logic$17630 , \$auto$opt_dff.cc:194:make_patterns_logic$17625  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17653 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16855  (
    .A({ \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16856 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16885  (
    .A({ \$procmux$12320_CMP , \$procmux$12224_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16886 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18432  (
    .A({ \$procmux$12252_CMP , \$procmux$12198_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16854 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:246:merge_operators$17226  (
    .A(\$101 ),
    .B(data_rvalid_i),
    .S(\$procmux$12198_CMP ),
    .Y(\$auto$rtlil.cc:3094:Pmux$17227 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12198_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$12198_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12210  (
    .A(\$auto$rtlil.cc:3094:Pmux$17227 ),
    .B(\$105 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17225 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12215  (
    .A(data_rvalid_i),
    .B(\$132 ),
    .Y(\$addr_update$135 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12224_CMP0  (
    .A(ls_fsm_cs),
    .B(2'h3),
    .Y(\$procmux$12224_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12239  (
    .A(\$124 ),
    .B(\$126 ),
    .Y(\$addr_update$127 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12252_CMP0  (
    .A(ls_fsm_cs),
    .B(2'h2),
    .Y(\$procmux$12252_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12268  (
    .A(2'h2),
    .B({ 1'h0, \$114  }),
    .S(\$101 ),
    .Y(\$ls_fsm_ns$122 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12277  (
    .A(\$101 ),
    .B(\$114 ),
    .Y(\$handle_misaligned_d$119 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12309  (
    .A(\$101 ),
    .B(\$112 ),
    .Y(\$addr_update$117 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12320_CMP0  (
    .A(ls_fsm_cs),
    .B(1'h1),
    .Y(\$procmux$12320_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12325  (
    .A(handle_misaligned_q),
    .B(\$124 ),
    .Y(\$handle_misaligned_d$98 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$12347  (
    .A(3'h0),
    .B({ 1'h0, \$ls_fsm_ns$84 [1:0], 3'h2, \$ls_fsm_ns$122 [2:1], \$ls_fsm_ns$122 [1] }),
    .S({ \$161 , \$procmux$12320_CMP , \$procmux$12252_CMP  }),
    .Y(ls_fsm_ns)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12363  (
    .A({ \$auto$rtlil.cc:3092:Mux$865 [1], 1'h1 }),
    .B({ split_misaligned_access, 1'h0 }),
    .S(data_gnt_i),
    .Y(\$ls_fsm_ns$84 [1:0])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12411  (
    .A(lsu_req_i),
    .B(lsu_we_i),
    .Y(\$perf_store_o$93 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12421  (
    .A(lsu_req_i),
    .B(\$78 ),
    .Y(\$perf_load_o$92 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12461  (
    .A(lsu_req_i),
    .B(data_pmp_err_i),
    .Y(\$pmp_err_d$88 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12481  (
    .A(lsu_req_i),
    .B(data_gnt_i),
    .Y(\$addr_update$85 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12501  (
    .A(\$161 ),
    .B(\$perf_store_o$93 ),
    .Y(perf_store_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12509  (
    .A(\$161 ),
    .B(\$perf_load_o$92 ),
    .Y(perf_load_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12513  (
    .A(1'h0),
    .B({ handle_misaligned_q, 1'h1 }),
    .S({ \$procmux$12224_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16854  }),
    .Y(addr_incr_req_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12522  (
    .A(1'h0),
    .B({ lsu_req_i, 1'h1 }),
    .S({ \$161 , \$auto$opt_reduce.cc:137:opt_pmux$16856  }),
    .Y(data_req_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12532  (
    .A(1'h0),
    .B({ \$103 , data_err_i }),
    .S({ \$procmux$12252_CMP , \$procmux$12198_CMP  }),
    .Y(lsu_err_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12540  (
    .A(\$pmp_err_d$88 ),
    .B(data_pmp_err_i),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16854 ),
    .Y(pmp_err_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12549  (
    .A(split_misaligned_access),
    .B({ \$handle_misaligned_d$98 , \$handle_misaligned_d$119 , 1'h0 }),
    .S({ \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP  }),
    .Y(handle_misaligned_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12559  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16854 ),
    .B(\$auto$opt_share.cc:222:merge_operators$17225 ),
    .Y(rdata_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12566  (
    .A(1'h0),
    .B({ \$addr_update$85 , \$124  }),
    .S({ \$161 , \$auto$opt_reduce.cc:137:opt_pmux$16886  }),
    .Y(ctrl_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$12574  (
    .A(1'h0),
    .B({ \$addr_update$85 , \$124 , \$addr_update$117 , \$addr_update$127 , \$addr_update$135  }),
    .S({ \$161 , \$procmux$12320_CMP , \$procmux$12252_CMP , \$procmux$12224_CMP , \$procmux$12198_CMP  }),
    .Y(addr_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$12584  (
    .A(rdata_w_ext),
    .B({ rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[15:0], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[7:0] }),
    .S({ \$procmux$12586_CMP , \$procmux$12585_CTRL  }),
    .Y(lsu_rdata_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_ANY  (
    .A(\$procmux$12585_CMP ),
    .Y(\$procmux$12585_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_CMP0  (
    .A(data_type_q),
    .B(2'h2),
    .Y(\$procmux$12585_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12585_CMP1  (
    .A(data_type_q),
    .B(2'h3),
    .Y(\$procmux$12585_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12586_CMP0  (
    .A(data_type_q),
    .B(1'h1),
    .Y(\$procmux$12586_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12589  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[31]),
    .Y(\$procmux$12589_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12592_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$12592_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12595  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[23]),
    .Y(\$procmux$12595_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12598_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$12598_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12602  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[15]),
    .Y(\$procmux$12602_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12605_CMP0  (
    .A(rdata_offset_q),
    .B(1'h1),
    .Y(\$procmux$12605_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd9)
  ) \$procmux$12607  (
    .A({ \$procmux$12619_Y [31], data_rdata_i[7:0] }),
    .B({ \$procmux$12602_Y [31], data_rdata_i[15:8], \$procmux$12595_Y [31], data_rdata_i[23:16], \$procmux$12589_Y [31], data_rdata_i[31:24] }),
    .S({ \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  }),
    .Y({ rdata_b_ext[31], rdata_b_ext[7:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12619  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[7]),
    .Y(\$procmux$12619_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd17)
  ) \$procmux$12642  (
    .A({ \$procmux$12602_Y [31], data_rdata_i[15:0] }),
    .B({ \$procmux$12595_Y [31], data_rdata_i[23:8], \$procmux$12589_Y [31], data_rdata_i[31:16], \$procmux$12619_Y [31], data_rdata_i[7:0], rdata_q[23:16] }),
    .S({ \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  }),
    .Y({ rdata_h_ext[31], rdata_h_ext[15:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$12658  (
    .A(data_rdata_i),
    .B({ data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }),
    .S({ \$procmux$12605_CMP , \$procmux$12598_CMP , \$procmux$12592_CMP  }),
    .Y(rdata_w_ext)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$12675  (
    .A(lsu_wdata_i),
    .B({ lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }),
    .S({ \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  }),
    .Y(data_wdata_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12677_CMP0  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$12677_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12678_CMP0  (
    .A(adder_result_ex_i[1:0]),
    .B(1'h1),
    .Y(\$procmux$12678_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$12680  (
    .A(4'h1),
    .B(12'h248),
    .S({ \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  }),
    .Y(\$data_be$10 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_ANY  (
    .A(\$procmux$12686_CMP ),
    .Y(\$procmux$12686_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_CMP0  (
    .A(lsu_type_i),
    .B(2'h2),
    .Y(\$procmux$12686_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12686_CMP1  (
    .A(lsu_type_i),
    .B(2'h3),
    .Y(\$procmux$12686_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12690  (
    .A(\$data_be$8 ),
    .B(4'h1),
    .S(handle_misaligned_q),
    .Y(\$data_be$9 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$12696  (
    .A(4'h3),
    .B(12'h6c8),
    .S({ \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  }),
    .Y(\$data_be$8 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$12706  (
    .A(\$data_be$5 ),
    .B({ \$data_be$9 , \$data_be$10  }),
    .S({ \$69 , \$procmux$12686_CTRL  }),
    .Y(data_be_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$12714  (
    .A(3'h0),
    .B(9'h05f),
    .S({ \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  }),
    .Y(\$data_be$4 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12729  (
    .A({ 1'h1, \$data_be$3 [2:0] }),
    .B({ 1'h0, \$data_be$4 [2:0] }),
    .S(handle_misaligned_q),
    .Y(\$data_be$5 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$12736  (
    .A(3'h7),
    .B(9'h1a0),
    .S({ \$procmux$12678_CMP , \$procmux$12677_CMP , \$71  }),
    .Y(\$data_be$3 [2:0])
  );
  assign \$auto$rtlil.cc:3092:Mux$865 [0] = 1'h1;
  assign \$data_be$3 [3] = 1'h1;
  assign \$data_be$4 [3] = 1'h0;
  assign \$ls_fsm_ns$122 [0] = \$ls_fsm_ns$122 [1];
  assign \$ls_fsm_ns$84 [2] = 1'h0;
  assign \$procmux$12589_Y [30:0] = { \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], \$procmux$12589_Y [31], data_rdata_i[31:24] };
  assign \$procmux$12595_Y [30:0] = { \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], \$procmux$12595_Y [31], data_rdata_i[23:16] };
  assign \$procmux$12602_Y [30:0] = { \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], \$procmux$12602_Y [31], data_rdata_i[15:8] };
  assign \$procmux$12619_Y [30:0] = { \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], \$procmux$12619_Y [31], data_rdata_i[7:0] };
  assign addr_last_d[31:2] = adder_result_ex_i[31:2];
  assign addr_last_o = addr_last_q;
  assign data_addr = adder_result_ex_i;
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_addr_w_aligned = { adder_result_ex_i[31:2], 2'h0 };
  assign data_be = data_be_o;
  assign data_offset = adder_result_ex_i[1:0];
  assign data_rdata_ext = lsu_rdata_o;
  assign data_wdata = data_wdata_o;
  assign data_we_o = lsu_we_i;
  assign rdata_b_ext[30:8] = { rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31] };
  assign rdata_h_ext[30:16] = { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31] };
endmodule

/* src = "rtl/cve2/cve2_prefetch_buffer.sv:12.8" */
module \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, addr_o, req_i, addr_i, rdata_o, busy_o, branch_i, ready_i, valid_o, err_o, err_plus2_o);
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$20 ;
  wire \$24 ;
  wire \$28 ;
  wire \$30 ;
  wire [1:0] \$5 ;
  wire \$59 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$75 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$93 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17662 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1589 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1592 ;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:20.23" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:26.23" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.24" */
  wire [1:0] branch_discard_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.60" */
  wire [1:0] branch_discard_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.42" */
  wire [1:0] branch_discard_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:19.23" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:39.23" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:14.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.24" */
  wire discard_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.39" */
  wire discard_req_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:27.23" */
  output err_o;
  wire err_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:28.23" */
  output err_plus2_o;
  wire err_plus2_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.24" */
  wire [31:0] fetch_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:54.24" */
  wire fetch_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.38" */
  wire [31:0] fetch_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:58.24" */
  wire [31:0] fifo_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:61.24" */
  wire [1:0] fifo_busy;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:60.24" */
  wire fifo_clear;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:59.24" */
  wire fifo_ready;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:57.24" */
  wire fifo_valid;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.24" */
  /* unused_bits = "0 1" */
  wire [31:0] instr_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:33.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.36" */
  wire [31:0] instr_addr_w_aligned;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:35.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:32.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:34.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:31.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:36.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:25.23" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.24" */
  wire [1:0] rdata_outstanding_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.66" */
  wire [1:0] rdata_outstanding_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:49.24" */
  wire [1:0] rdata_outstanding_rev;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.45" */
  wire [1:0] rdata_outstanding_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:23.23" */
  input ready_i;
  wire ready_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:17.23" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:15.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.24" */
  /* unused_bits = "0 1" */
  wire [31:0] stored_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:52.24" */
  wire stored_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.39" */
  wire [31:0] stored_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.24" */
  wire valid_new_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:24.23" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:63.24" */
  wire valid_raw;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.39" */
  wire valid_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.24" */
  wire valid_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.37" */
  wire valid_req_q;
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(rdata_outstanding_q),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(req_i),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(rdata_outstanding_q[1]),
    .Y(\$14 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$12 ),
    .B(\$14 ),
    .Y(valid_new_req)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(valid_req_q),
    .B(valid_new_req),
    .Y(instr_req_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(instr_gnt_i),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(instr_req_o),
    .Y(busy_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(instr_req_o),
    .B(\$20 ),
    .Y(valid_req_d)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(branch_i),
    .B(discard_req_q),
    .Y(\$24 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(valid_req_q),
    .B(\$24 ),
    .Y(discard_req_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(valid_req_q),
    .Y(\$28 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(valid_new_req),
    .B(\$28 ),
    .Y(\$30 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$30 ),
    .B(\$20 ),
    .Y(stored_addr_en)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$4  (
    .A(fifo_busy),
    .B({ rdata_outstanding_q[0], rdata_outstanding_q[1] }),
    .Y(\$5 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(branch_i),
    .B(\$30 ),
    .Y(fetch_addr_en)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$45  (
    .A({ fetch_addr_q[31:2], 2'h0 }),
    .B(addr_i),
    .S(branch_i),
    .Y({ \$auto$rtlil.cc:3092:Mux$1589 [31:2], fetch_addr_d[1:0] })
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd30),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd30)
  ) \$50  (
    .A(\$auto$rtlil.cc:3092:Mux$1589 [31:2]),
    .B(\$30 ),
    .Y(fetch_addr_d[31:2])
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$56  (
    .A(fetch_addr_q),
    .B(addr_i),
    .S(branch_i),
    .Y(\$auto$rtlil.cc:3092:Mux$1592 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$57  (
    .A(\$auto$rtlil.cc:3092:Mux$1592 ),
    .B(stored_addr_q),
    .S(valid_req_q),
    .Y(instr_addr)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(instr_req_o),
    .B(instr_gnt_i),
    .Y(\$59 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5 ),
    .Y(\$7 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$59 ),
    .B(rdata_outstanding_q[0]),
    .Y(rdata_outstanding_n[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$59 ),
    .B(discard_req_d),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(branch_i),
    .B(rdata_outstanding_q[0]),
    .Y(\$67 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\$65 ),
    .B(\$67 ),
    .Y(\$69 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\$69 ),
    .B(branch_discard_q[0]),
    .Y(branch_discard_n[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$59 ),
    .B(rdata_outstanding_q[0]),
    .Y(\$75 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(rdata_outstanding_q[1]),
    .Y(rdata_outstanding_n[1])
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .Y(fifo_ready)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$65 ),
    .B(rdata_outstanding_q[0]),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(branch_i),
    .B(rdata_outstanding_q[1]),
    .Y(\$85 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(\$85 ),
    .Y(\$87 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\$87 ),
    .B(branch_discard_q[1]),
    .Y(branch_discard_n[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(fifo_ready),
    .B(branch_i),
    .Y(\$10 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$90  (
    .A(rdata_outstanding_n),
    .B({ 1'h0, rdata_outstanding_n[1] }),
    .S(instr_rvalid_i),
    .Y(rdata_outstanding_s)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$91  (
    .A(branch_discard_n),
    .B({ 1'h0, branch_discard_n[1] }),
    .S(instr_rvalid_i),
    .Y(branch_discard_s)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(branch_discard_q[0]),
    .Y(\$93 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(instr_rvalid_i),
    .B(\$93 ),
    .Y(fifo_valid)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17659  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$rtlil.cc:3092:Mux$1592 [1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17662 ),
    .Q(stored_addr_q[1:0])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(30'h00000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd30)
  ) \$auto$ff.cc:266:slice$17664  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_addr[31:2]),
    .EN(stored_addr_en),
    .Q(stored_addr_q[31:2])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:168.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17665  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_addr_d),
    .EN(fetch_addr_en),
    .Q(fetch_addr_q)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17663  (
    .A({ stored_addr_en, \$28  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17662 )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$branch_discard_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_discard_s),
    .Q(branch_discard_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$discard_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(discard_req_d),
    .Q(discard_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$rdata_outstanding_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_outstanding_s),
    .Q(rdata_outstanding_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$valid_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(valid_req_d),
    .Q(valid_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:92.5" */
  \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_raw),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:3092:Mux$1589 [1:0] = fetch_addr_d[1:0];
  assign fifo_addr = addr_i;
  assign fifo_clear = branch_i;
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
  assign instr_addr_w_aligned = { instr_addr[31:2], 2'h0 };
  assign rdata_outstanding_rev = { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign stored_addr_d = instr_addr;
  assign valid_o = valid_raw;
  assign valid_req = instr_req_o;
endmodule

/* src = "rtl/cve2/cve2_register_file_ff.sv:13.8" */
module \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire \$11 ;
  wire \$14 ;
  wire \$17 ;
  wire \$2 ;
  wire \$20 ;
  wire \$23 ;
  wire \$26 ;
  wire \$29 ;
  wire \$32 ;
  wire \$35 ;
  wire \$38 ;
  wire \$41 ;
  wire \$44 ;
  wire \$47 ;
  wire \$5 ;
  wire \$50 ;
  wire \$53 ;
  wire \$56 ;
  wire \$59 ;
  wire \$62 ;
  wire \$65 ;
  wire \$68 ;
  wire \$71 ;
  wire \$74 ;
  wire \$77 ;
  wire \$8 ;
  wire \$80 ;
  wire \$83 ;
  wire \$86 ;
  wire \$89 ;
  wire \$92 ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:19.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:25.32" */
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:29.32" */
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:26.32" */
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:30.32" */
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:43.40" */
  wire [1023:0] rf_reg;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:44.40" */
  wire [991:0] rf_reg_q;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:20.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:22.32" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:73.9" */
  /* unused_bits = "0" */
  wire unused_test_en;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:34.32" */
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:35.32" */
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:45.40" */
  wire [30:0] we_a_dec;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:36.32" */
  input we_a_i;
  wire we_a_i;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(waddr_a_i),
    .B(1'h1),
    .Y(\$2 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(waddr_a_i),
    .B(3'h4),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11 ),
    .B(we_a_i),
    .Y(we_a_dec[3])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(waddr_a_i),
    .B(3'h5),
    .Y(\$14 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(we_a_i),
    .Y(we_a_dec[4])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(waddr_a_i),
    .B(3'h6),
    .Y(\$17 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(we_a_i),
    .Y(we_a_dec[5])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(waddr_a_i),
    .B(3'h7),
    .Y(\$20 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$20 ),
    .B(we_a_i),
    .Y(we_a_dec[6])
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$219  (
    .A({ rf_reg_q, 32'h00000000 }),
    .S(raddr_a_i),
    .Y(rdata_a_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(waddr_a_i),
    .B(4'h8),
    .Y(\$23 )
  );
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$222  (
    .A({ rf_reg_q, 32'h00000000 }),
    .S(raddr_b_i),
    .Y(rdata_b_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$23 ),
    .B(we_a_i),
    .Y(we_a_dec[7])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(waddr_a_i),
    .B(4'h9),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(we_a_i),
    .Y(we_a_dec[8])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(waddr_a_i),
    .B(4'ha),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\$2 ),
    .B(we_a_i),
    .Y(we_a_dec[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(we_a_i),
    .Y(we_a_dec[9])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(waddr_a_i),
    .B(4'hb),
    .Y(\$32 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$32 ),
    .B(we_a_i),
    .Y(we_a_dec[10])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(waddr_a_i),
    .B(4'hc),
    .Y(\$35 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$35 ),
    .B(we_a_i),
    .Y(we_a_dec[11])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(waddr_a_i),
    .B(4'hd),
    .Y(\$38 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\$38 ),
    .B(we_a_i),
    .Y(we_a_dec[12])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(waddr_a_i),
    .B(2'h2),
    .Y(\$5 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(waddr_a_i),
    .B(4'he),
    .Y(\$41 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$41 ),
    .B(we_a_i),
    .Y(we_a_dec[13])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(waddr_a_i),
    .B(4'hf),
    .Y(\$44 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$44 ),
    .B(we_a_i),
    .Y(we_a_dec[14])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(waddr_a_i),
    .B(5'h10),
    .Y(\$47 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$47 ),
    .B(we_a_i),
    .Y(we_a_dec[15])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(waddr_a_i),
    .B(5'h11),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$50 ),
    .B(we_a_i),
    .Y(we_a_dec[16])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(waddr_a_i),
    .B(5'h12),
    .Y(\$53 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$53 ),
    .B(we_a_i),
    .Y(we_a_dec[17])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(waddr_a_i),
    .B(5'h13),
    .Y(\$56 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$56 ),
    .B(we_a_i),
    .Y(we_a_dec[18])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(waddr_a_i),
    .B(5'h14),
    .Y(\$59 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5 ),
    .B(we_a_i),
    .Y(we_a_dec[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$59 ),
    .B(we_a_i),
    .Y(we_a_dec[19])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(waddr_a_i),
    .B(5'h15),
    .Y(\$62 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$62 ),
    .B(we_a_i),
    .Y(we_a_dec[20])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(waddr_a_i),
    .B(5'h16),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$65 ),
    .B(we_a_i),
    .Y(we_a_dec[21])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(waddr_a_i),
    .B(5'h17),
    .Y(\$68 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$68 ),
    .B(we_a_i),
    .Y(we_a_dec[22])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(waddr_a_i),
    .B(2'h3),
    .Y(\$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(waddr_a_i),
    .B(5'h18),
    .Y(\$71 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$71 ),
    .B(we_a_i),
    .Y(we_a_dec[23])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(waddr_a_i),
    .B(5'h19),
    .Y(\$74 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(\$74 ),
    .B(we_a_i),
    .Y(we_a_dec[24])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(waddr_a_i),
    .B(5'h1a),
    .Y(\$77 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\$77 ),
    .B(we_a_i),
    .Y(we_a_dec[25])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(waddr_a_i),
    .B(5'h1b),
    .Y(\$80 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(\$80 ),
    .B(we_a_i),
    .Y(we_a_dec[26])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(waddr_a_i),
    .B(5'h1c),
    .Y(\$83 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$83 ),
    .B(we_a_i),
    .Y(we_a_dec[27])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(waddr_a_i),
    .B(5'h1d),
    .Y(\$86 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\$86 ),
    .B(we_a_i),
    .Y(we_a_dec[28])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(waddr_a_i),
    .B(5'h1e),
    .Y(\$89 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8 ),
    .B(we_a_i),
    .Y(we_a_dec[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$89 ),
    .B(we_a_i),
    .Y(we_a_dec[29])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(waddr_a_i),
    .B(5'h1f),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\$92 ),
    .B(we_a_i),
    .Y(we_a_dec[30])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17666  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[8]),
    .Q(rf_reg_q[287:256])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17667  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[7]),
    .Q(rf_reg_q[255:224])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17668  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[6]),
    .Q(rf_reg_q[223:192])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17669  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[5]),
    .Q(rf_reg_q[191:160])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17670  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[4]),
    .Q(rf_reg_q[159:128])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17671  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[3]),
    .Q(rf_reg_q[127:96])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17672  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[2]),
    .Q(rf_reg_q[95:64])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17673  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[30]),
    .Q(rf_reg_q[991:960])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17674  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[29]),
    .Q(rf_reg_q[959:928])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17675  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[1]),
    .Q(rf_reg_q[63:32])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17676  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[28]),
    .Q(rf_reg_q[927:896])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17677  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[27]),
    .Q(rf_reg_q[895:864])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17678  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[26]),
    .Q(rf_reg_q[863:832])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17679  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[25]),
    .Q(rf_reg_q[831:800])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17680  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[24]),
    .Q(rf_reg_q[799:768])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17681  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[23]),
    .Q(rf_reg_q[767:736])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17682  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[22]),
    .Q(rf_reg_q[735:704])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17683  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[21]),
    .Q(rf_reg_q[703:672])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17684  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[20]),
    .Q(rf_reg_q[671:640])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17685  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[19]),
    .Q(rf_reg_q[639:608])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17686  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[0]),
    .Q(rf_reg_q[31:0])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17687  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[18]),
    .Q(rf_reg_q[607:576])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17688  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[17]),
    .Q(rf_reg_q[575:544])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17689  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[16]),
    .Q(rf_reg_q[543:512])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17690  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[15]),
    .Q(rf_reg_q[511:480])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17691  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[14]),
    .Q(rf_reg_q[479:448])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17692  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[13]),
    .Q(rf_reg_q[447:416])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17693  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[12]),
    .Q(rf_reg_q[415:384])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17694  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[11]),
    .Q(rf_reg_q[383:352])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17695  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[10]),
    .Q(rf_reg_q[351:320])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:55.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17696  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[9]),
    .Q(rf_reg_q[319:288])
  );
  assign rf_reg = { rf_reg_q, 32'h00000000 };
  assign unused_test_en = test_en_i;
endmodule

/* src = "rtl/cve2/cve2_wb.sv:14.8" */
module \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$1 ;
  wire [31:0] \$11 ;
  wire [31:0] \$13 ;
  wire \$3 ;
  wire \$5 ;
  /* src = "rtl/cve2/cve2_wb.sv:16.36" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_wb.sv:18.36" */
  input en_wb_i;
  wire en_wb_i;
  /* src = "rtl/cve2/cve2_wb.sv:20.36" */
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:21.36" */
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:38.36" */
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  /* src = "rtl/cve2/cve2_wb.sv:37.36" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_wb.sv:24.36" */
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:23.36" */
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:26.36" */
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:33.36" */
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:27.36" */
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:30.36" */
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:45.16" */
  wire [63:0] rf_wdata_wb_mux;
  /* src = "rtl/cve2/cve2_wb.sv:46.16" */
  wire [1:0] rf_wdata_wb_mux_we;
  /* src = "rtl/cve2/cve2_wb.sv:34.36" */
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:28.36" */
  input rf_we_id_i;
  wire rf_we_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:31.36" */
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:35.36" */
  output rf_we_wb_o;
  wire rf_we_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:17.36" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_perf_count_id_i),
    .B(en_wb_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$10  (
    .A({ rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i }),
    .B(rf_wdata_id_i),
    .Y(\$11 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$12  (
    .A({ rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i }),
    .B(rf_wdata_lsu_i),
    .Y(\$13 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(rf_wdata_wb_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A({ rf_we_lsu_i, rf_we_id_i }),
    .Y(rf_we_wb_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(lsu_resp_valid_i),
    .B(lsu_resp_err_i),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .Y(\$5 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$1 ),
    .B(\$5 ),
    .Y(perf_instr_ret_wb_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(perf_instr_ret_wb_o),
    .B(instr_is_compressed_id_i),
    .Y(perf_instr_ret_compressed_wb_o)
  );
  assign rf_waddr_wb_o = rf_waddr_id_i;
  assign rf_wdata_wb_mux = { rf_wdata_id_i, rf_wdata_lsu_i };
  assign rf_wdata_wb_mux_we = { rf_we_lsu_i, rf_we_id_i };
endmodule

/* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:17.8" */
module \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom (clk_i, rst_ni, req_i, addr_i, rdata_o);
  wire \$6 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1684 ;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:21.24" */
  input [63:0] addr_i;
  wire [63:0] addr_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.39" */
  wire [4:0] addr_q;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:27.29" */
  wire [1279:0] mem;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:22.24" */
  output [63:0] rdata_o;
  wire [63:0] rdata_o;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:20.24" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  reg [49:0] \$auto$memory_bmux2rom.cc:63:execute$18545  [31:0];
  initial begin
    \$auto$memory_bmux2rom.cc:63:execute$18545 [0] = 50'h0000040300037;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [1] = 50'h0000041080037;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [2] = 50'h0000040a00037;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [3] = 50'h1f311c1fe0007;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [4] = 50'h000066f678839;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [5] = 50'h00d964019aa89;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [6] = 50'h089a09e281239;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [7] = 50'h1014400150219;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [8] = 50'h0211d80033a09;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [9] = 50'h00b04de281239;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [10] = 50'h0037448012201;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [11] = 50'h3d5f1bf410c71;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [12] = 50'h00dd64000028b;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [13] = 50'h081ac80198a89;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [14] = 50'h1f225cf6612b9;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [15] = 50'h081a480020039;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [16] = 50'h1f225cf6612b9;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [17] = 50'h39425d4f3f837;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [18] = 50'h1f227c2119411;
    \$auto$memory_bmux2rom.cc:63:execute$18545 [19] = 50'h1f201cf641239;
  end
  assign { \$auto$rtlil.cc:3092:Mux$1684 [63:62], \$auto$rtlil.cc:3092:Mux$1684 [60:59], \$auto$rtlil.cc:3092:Mux$1684 [57], \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [55:53], \$auto$rtlil.cc:3092:Mux$1684 [50], \$auto$rtlil.cc:3092:Mux$1684 [48], \$auto$rtlil.cc:3092:Mux$1684 [46:42], \$auto$rtlil.cc:3092:Mux$1684 [40], \$auto$rtlil.cc:3092:Mux$1684 [38:36], \$auto$rtlil.cc:3092:Mux$1684 [34], \$auto$rtlil.cc:3092:Mux$1684 [31:20], \$auto$rtlil.cc:3092:Mux$1684 [18], \$auto$rtlil.cc:3092:Mux$1684 [16], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [14:12], \$auto$rtlil.cc:3092:Mux$1684 [52], \$auto$rtlil.cc:3092:Mux$1684 [10], \$auto$rtlil.cc:3092:Mux$1684 [41], \$auto$rtlil.cc:3092:Mux$1684 [8], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [6:2], \$auto$rtlil.cc:3092:Mux$1684 [33] } = \$auto$memory_bmux2rom.cc:63:execute$18545 [addr_q];
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_q),
    .B(5'h14),
    .Y(\$6 )
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:55.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$17697  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[7:3]),
    .EN(req_i),
    .Q(addr_q)
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.7-68.29|rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" */
  \$mux  #(
    .WIDTH(32'd50)
  ) \$procmux$3710  (
    .A(50'h0000000000000),
    .B({ \$auto$rtlil.cc:3092:Mux$1684 [63:62], \$auto$rtlil.cc:3092:Mux$1684 [60:59], \$auto$rtlil.cc:3092:Mux$1684 [57], \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [55:53], \$auto$rtlil.cc:3092:Mux$1684 [50], \$auto$rtlil.cc:3092:Mux$1684 [48], \$auto$rtlil.cc:3092:Mux$1684 [46:42], \$auto$rtlil.cc:3092:Mux$1684 [40], \$auto$rtlil.cc:3092:Mux$1684 [38:36], \$auto$rtlil.cc:3092:Mux$1684 [34], \$auto$rtlil.cc:3092:Mux$1684 [31:20], \$auto$rtlil.cc:3092:Mux$1684 [18], \$auto$rtlil.cc:3092:Mux$1684 [16], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [14:12], \$auto$rtlil.cc:3092:Mux$1684 [52], \$auto$rtlil.cc:3092:Mux$1684 [10], \$auto$rtlil.cc:3092:Mux$1684 [41], \$auto$rtlil.cc:3092:Mux$1684 [8], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [6:2], \$auto$rtlil.cc:3092:Mux$1684 [33] }),
    .S(\$6 ),
    .Y({ rdata_o[63:62], rdata_o[60:59], rdata_o[57:53], rdata_o[50], rdata_o[48], rdata_o[46:42], rdata_o[40], rdata_o[38:36], rdata_o[34], rdata_o[31:20], rdata_o[18], rdata_o[16:2], rdata_o[0] })
  );
  assign { \$auto$rtlil.cc:3092:Mux$1684 [56], \$auto$rtlil.cc:3092:Mux$1684 [51], \$auto$rtlil.cc:3092:Mux$1684 [49], \$auto$rtlil.cc:3092:Mux$1684 [47], \$auto$rtlil.cc:3092:Mux$1684 [39], \$auto$rtlil.cc:3092:Mux$1684 [35], \$auto$rtlil.cc:3092:Mux$1684 [32], \$auto$rtlil.cc:3092:Mux$1684 [17], \$auto$rtlil.cc:3092:Mux$1684 [15], \$auto$rtlil.cc:3092:Mux$1684 [11], \$auto$rtlil.cc:3092:Mux$1684 [9], \$auto$rtlil.cc:3092:Mux$1684 [7], \$auto$rtlil.cc:3092:Mux$1684 [1:0] } = { \$auto$rtlil.cc:3092:Mux$1684 [61], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [41], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [33], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [19], \$auto$rtlil.cc:3092:Mux$1684 [52], \$auto$rtlil.cc:3092:Mux$1684 [41], \$auto$rtlil.cc:3092:Mux$1684 [58], \$auto$rtlil.cc:3092:Mux$1684 [33], \$auto$rtlil.cc:3092:Mux$1684 [33] };
  assign mem = 1280'h7b2000737b2024737b30257310852823f1402473a79ff06f7b2024737b30257310052423001000737b2024737b30257310052c2300c5151300c5551300000517fd5ff06ffa0418e3002474134004440300a40433f140247302041c63001474134004440300a4043310852023f140247300c5151300c55513000005177b3510737b2410730ff0000f000000130500006f000000130840006f000000130180006f;
  assign { rdata_o[61], rdata_o[58], rdata_o[52:51], rdata_o[49], rdata_o[47], rdata_o[41], rdata_o[39], rdata_o[35], rdata_o[33:32], rdata_o[19], rdata_o[17], rdata_o[1] } = { rdata_o[56], rdata_o[7], rdata_o[11], rdata_o[7], rdata_o[7], rdata_o[7], rdata_o[9], rdata_o[9], rdata_o[7], rdata_o[0], rdata_o[0], rdata_o[15], rdata_o[15], rdata_o[0] };
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17699 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17230 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17229 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17232 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17232 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17230 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17698  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17699 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17700  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17699 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17228  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17229 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17231  (
    .A(\$auto$rtlil.cc:2959:Neg$17229 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17232 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8415  (
    .A(\$auto$opt_share.cc:222:merge_operators$17230 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8422  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17702 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17235 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17234 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17237 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17237 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17235 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17701  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17702 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17703  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17702 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17233  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17234 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17236  (
    .A(\$auto$rtlil.cc:2959:Neg$17234 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17237 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8328  (
    .A(\$auto$opt_share.cc:222:merge_operators$17235 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8335  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17705 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17240 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17239 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17242 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17242 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17240 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17704  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17705 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17706  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17705 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17238  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17239 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17241  (
    .A(\$auto$rtlil.cc:2959:Neg$17239 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17242 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8241  (
    .A(\$auto$opt_share.cc:222:merge_operators$17240 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8248  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17708 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17245 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17244 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17247 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17247 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17245 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17707  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17708 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17709  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17708 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17243  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17244 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17246  (
    .A(\$auto$rtlil.cc:2959:Neg$17244 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17247 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8154  (
    .A(\$auto$opt_share.cc:222:merge_operators$17245 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8161  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17711 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17250 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17249 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17252 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17252 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17250 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17710  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17711 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17712  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17711 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17248  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17249 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17251  (
    .A(\$auto$rtlil.cc:2959:Neg$17249 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17252 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13890  (
    .A(\$auto$opt_share.cc:222:merge_operators$17250 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13897  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17714 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17255 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$17254 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$17257 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$7 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$17257 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17255 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17713  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17714 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17715  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17714 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17253  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$17254 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17256  (
    .A(\$auto$rtlil.cc:2959:Neg$17254 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$17257 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13145  (
    .A(\$auto$opt_share.cc:222:merge_operators$17255 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$7 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13152  (
    .A(\$counter_d$7 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/riscv-dbg/dm_csrs.sv:18.8" */
module \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs (clk_i, rst_ni, testmode_i, unavailable_i, hartinfo_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, data_i, data_o, halted_i, resumeack_i, hartsel_o
, haltreq_o, resumereq_o, clear_resumeack_o, cmd_valid_o, cmd_o, cmderror_valid_i, cmderror_i, cmdbusy_i, progbuf_o, data_valid_i, sbaddress_o, sbaddress_i, sbaddress_write_valid_o, sbreadonaddr_o, sbautoincrement_o, sbaccess_o, sbreadondata_o, sbdata_o, sbdata_read_valid_o, sbdata_write_valid_o, sbdata_i
, sbdata_valid_i, sbbusy_i, sberror_valid_i, sberror_i);
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$119 ;
  wire \$160 ;
  wire \$162 ;
  wire \$184 ;
  wire \$186 ;
  wire [2:0] \$228 ;
  wire [2:0] \$230 ;
  wire \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$357 ;
  wire \$362 ;
  wire \$386 ;
  wire \$64 ;
  wire \$81 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$abstractauto_q$398 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17719 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17721 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17726 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17730 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17735 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17737 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17739 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17762 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17764 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17766 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17768 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17793 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17795 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17865 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17877 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17879 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17881 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17897 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17899 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17915 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17917 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17723 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17732 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17741 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17770 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17797 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17867 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17883 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17901 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17919 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18531 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16888 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16892 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16894 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16896 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18535 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18541 ;
  wire \$auto$opt_share.cc:222:merge_operators$18441 ;
  wire \$auto$rtlil.cc:3010:Le$1086 ;
  wire \$auto$rtlil.cc:3010:Le$1105 ;
  wire \$auto$rtlil.cc:3011:Eq$1094 ;
  wire \$auto$rtlil.cc:3011:Eq$1095 ;
  wire \$auto$rtlil.cc:3011:Eq$1096 ;
  wire \$auto$rtlil.cc:3011:Eq$1100 ;
  wire \$auto$rtlil.cc:3011:Eq$1101 ;
  wire \$auto$rtlil.cc:3011:Eq$1102 ;
  wire \$auto$rtlil.cc:3011:Eq$1103 ;
  wire \$auto$rtlil.cc:3011:Eq$1113 ;
  wire \$auto$rtlil.cc:3011:Eq$1114 ;
  wire \$auto$rtlil.cc:3011:Eq$1115 ;
  wire \$auto$rtlil.cc:3011:Eq$1116 ;
  wire \$auto$rtlil.cc:3011:Eq$1117 ;
  wire \$auto$rtlil.cc:3011:Eq$1118 ;
  wire \$auto$rtlil.cc:3011:Eq$1119 ;
  wire \$auto$rtlil.cc:3011:Eq$1120 ;
  wire \$auto$rtlil.cc:3011:Eq$1121 ;
  wire \$auto$rtlil.cc:3015:Ge$1085 ;
  wire \$auto$rtlil.cc:3015:Ge$1104 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1087 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1106 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1090 ;
  wire \$auto$rtlil.cc:3092:Mux$1093 ;
  wire [31:0] \$auto$rtlil.cc:3092:Mux$1109 ;
  wire \$auto$rtlil.cc:3092:Mux$1112 ;
  wire [63:0] \$auto$rtlil.cc:3093:Bwmux$1131 ;
  wire \$auto$rtlil.cc:3094:Pmux$18443 ;
  wire [63:0] \$auto$rtlil.cc:3114:Demux$1129 ;
  wire [255:0] \$auto$rtlil.cc:3114:Demux$1156 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  wire [1:0] \$auto$wreduce.cc:514:run$16968 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [1:0] \$auto$wreduce.cc:514:run$16969 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [1:0] \$auto$wreduce.cc:514:run$16970 ;
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 21" */
  wire [31:0] \$auto$wreduce.cc:514:run$16972 ;
  wire [31:0] \$auto$wreduce.cc:514:run$16973 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire \$cmd_valid_d$122 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire \$cmd_valid_d$149 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire \$cmd_valid_d$172 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire \$cmd_valid_d$177 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire \$cmd_valid_d$206 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire \$cmd_valid_d$244 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire \$cmd_valid_d$275 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire \$cmd_valid_d$322 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire \$cmd_valid_q$397 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:306.13-308.16" */
  wire [2:0] \$cmderr_d$120 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire [2:0] \$cmderr_d$121 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire [2:0] \$cmderr_d$171 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire [2:0] \$cmderr_d$176 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" */
  wire [2:0] \$cmderr_d$204 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire [2:0] \$cmderr_d$205 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  wire [2:0] \$cmderr_d$234 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [2:0] \$cmderr_d$320 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [2:0] \$cmderr_d$336 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [2:0] \$cmderr_q$395 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$command_q$396 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [63:0] \$data_q$403 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$dmcontrol_d$319 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29" */
  wire [31:0] \$dmcontrol_d$335 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  /* unused_bits = "0" */
  wire [31:0] \$dmcontrol_q$394 ;
  wire [21:0] \$procmux$10004_Y ;
  wire \$procmux$10043_Y ;
  wire \$procmux$10552_Y ;
  wire \$procmux$10562_Y ;
  wire [1:0] \$procmux$10615_Y ;
  wire \$procmux$10673_Y ;
  wire [31:0] \$procmux$10852_Y ;
  wire \$procmux$10885_Y ;
  wire [1:0] \$procmux$10893_Y ;
  wire [31:0] \$procmux$10932_Y ;
  wire [31:0] \$procmux$10994_Y ;
  wire \$procmux$11132_Y ;
  wire [33:0] \$procmux$11176_Y ;
  wire \$procmux$11179_Y ;
  wire [255:0] \$procmux$11191_Y ;
  wire [63:0] \$procmux$11194_Y ;
  wire [63:0] \$procmux$11197_Y ;
  wire \$procmux$9819_Y ;
  wire [31:0] \$procmux$9886_Y ;
  wire [31:0] \$procmux$9908_Y ;
  wire [31:0] \$procmux$9918_Y ;
  wire \$procmux$9925_Y ;
  wire [21:0] \$procmux$9944_Y ;
  wire [31:0] \$procmux$9966_Y ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.23" */
  wire [31:0] abstractauto_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.39" */
  wire [31:0] abstractauto_q;
  wire [12:0] abstractcs;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:219.15" */
  wire [3:0] autoexecdata_idx;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:50.45" */
  output clear_resumeack_o;
  wire clear_resumeack_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:23.45" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:53.45" */
  output [31:0] cmd_o;
  wire [31:0] cmd_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.23" */
  wire cmd_valid_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:52.45" */
  output cmd_valid_o;
  wire cmd_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.36" */
  wire cmd_valid_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:56.45" */
  input cmdbusy_i;
  wire cmdbusy_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.23" */
  wire [2:0] cmderr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.33" */
  wire [2:0] cmderr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:55.45" */
  input [2:0] cmderror_i;
  wire [2:0] cmderror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:54.45" */
  input cmderror_valid_i;
  wire cmderror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.23" */
  wire [31:0] command_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.34" */
  wire [31:0] command_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.35" */
  wire [63:0] data_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:61.45" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:59.45" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.43" */
  wire [63:0] data_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:62.45" */
  input data_valid_i;
  wire data_valid_i;
  wire [6:0] dm_csr_addr;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:39.45" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.23" */
  /* unused_bits = "0" */
  wire [31:0] dmcontrol_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.36" */
  wire [31:0] dmcontrol_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:31.45" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:30.45" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:29.45" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:35.45" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:34.45" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:33.45" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:27.45" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  wire [19:0] dmstatus;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:88.16" */
  wire [1:0] dtm_op;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:100.47" */
  wire [31:0] halted;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:201.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:104.40" */
  wire [31:0] halted_flat1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:105.40" */
  wire [31:0] halted_flat2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:106.16" */
  wire [31:0] halted_flat3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:43.45" */
  input halted_i;
  wire halted_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:101.36" */
  wire [31:0] halted_reshaped0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:102.37" */
  wire [31:0] halted_reshaped1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:103.37" */
  wire [31:0] halted_reshaped2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:48.45" */
  output haltreq_o;
  wire haltreq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.16" */
  wire [31:0] haltsum0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.26" */
  wire [31:0] haltsum1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.36" */
  wire [31:0] haltsum2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.46" */
  wire [31:0] haltsum3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:209.39" */
  wire [63:0] hartinfo_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:42.45" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:109.16" */
  wire [14:0] hartsel_idx0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:122.15" */
  wire [9:0] hartsel_idx1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:139.15" */
  wire [4:0] hartsel_idx2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:47.45" */
  output [19:0] hartsel_o;
  wire [19:0] hartsel_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.23" */
  wire havereset_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.30" */
  wire [1:0] havereset_d_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.36" */
  wire havereset_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.51" */
  wire [1:0] havereset_q_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:38.45" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:37.45" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:25.45" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.37" */
  wire [255:0] progbuf_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:58.45" */
  output [255:0] progbuf_o;
  wire [255:0] progbuf_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.48" */
  wire [255:0] progbuf_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:92.16" */
  wire resp_queue_empty;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:91.16" */
  wire resp_queue_full;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:183.18" */
  wire [33:0] resp_queue_inp;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:94.16" */
  wire resp_queue_pop;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:93.16" */
  wire resp_queue_push;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.30" */
  wire [1:0] resumeack_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:45.45" */
  input resumeack_i;
  wire resumeack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:49.45" */
  output resumereq_o;
  wire resumereq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:24.45" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:70.45" */
  output [2:0] sbaccess_o;
  wire [2:0] sbaccess_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.23" */
  wire [63:0] sbaddr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.33" */
  wire [63:0] sbaddr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:65.45" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:64.45" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:66.45" */
  output sbaddress_write_valid_o;
  wire sbaddress_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:69.45" */
  output sbautoincrement_o;
  wire sbautoincrement_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:80.45" */
  input sbbusy_i;
  wire sbbusy_i;
  wire [28:0] sbcs_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:172.31" */
  wire [31:0] sbcs_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.23" */
  wire [63:0] sbdata_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:77.45" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:73.45" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.33" */
  wire [63:0] sbdata_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:74.45" */
  output sbdata_read_valid_o;
  wire sbdata_read_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:78.45" */
  input sbdata_valid_i;
  wire sbdata_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:75.45" */
  output sbdata_write_valid_o;
  wire sbdata_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:82.45" */
  input [2:0] sberror_i;
  wire [2:0] sberror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:81.45" */
  input sberror_valid_i;
  wire sberror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:68.45" */
  output sbreadonaddr_o;
  wire sbreadonaddr_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:72.45" */
  output sbreadondata_o;
  wire sbreadondata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:181.26" */
  wire selected_hart;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:26.45" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.49" */
  wire [1:0] unavailable_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:44.45" */
  input unavailable_i;
  wire unavailable_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(dmi_req_ready_o),
    .B(dmi_req_valid_i),
    .Y(\$102 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(dmi_req_i[33:32]),
    .B(1'h1),
    .Y(\$104 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\$102 ),
    .B(\$104 ),
    .Y(\$106 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(dmi_req_i[40:34]),
    .B(3'h5),
    .Y(\$auto$rtlil.cc:3010:Le$1086 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\$auto$rtlil.cc:3015:Ge$1085 ),
    .B(\$auto$rtlil.cc:3010:Le$1086 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1087 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$111  (
    .A(data_q[31:0]),
    .B(data_q[63:32]),
    .S(dmi_req_i[34]),
    .Y(\$auto$rtlil.cc:3092:Mux$1090 )
  );
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$116  (
    .A({ 14'bxxxx0000000000, abstractauto_q[1:0] }),
    .S({ autoexecdata_idx[3:2], dmi_req_i[35:34] }),
    .Y(\$auto$rtlil.cc:3092:Mux$1093 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(cmderr_q),
    .Y(\$119 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(dmi_req_i[40:34]),
    .B(5'h10),
    .Y(\$auto$rtlil.cc:3011:Eq$1094 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(dmi_req_i[40:34]),
    .B(5'h11),
    .Y(\$auto$rtlil.cc:3011:Eq$1095 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(dmi_req_i[40:34]),
    .B(5'h12),
    .Y(\$auto$rtlil.cc:3011:Eq$1096 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(dmi_req_i[40:34]),
    .B(5'h16),
    .Y(\$auto$rtlil.cc:3011:Eq$1100 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(dmi_req_i[40:34]),
    .B(5'h18),
    .Y(\$auto$rtlil.cc:3011:Eq$1101 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(dmi_req_i[40:34]),
    .B(5'h17),
    .Y(\$auto$rtlil.cc:3011:Eq$1102 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(dmi_req_i[40:34]),
    .B(5'h1d),
    .Y(\$auto$rtlil.cc:3011:Eq$1103 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(dmi_req_i[40:34]),
    .B(6'h27),
    .Y(\$auto$rtlil.cc:3010:Le$1105 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$auto$rtlil.cc:3015:Ge$1104 ),
    .B(\$auto$rtlil.cc:3010:Le$1105 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1106 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$138  (
    .A(progbuf_q),
    .S(dmi_req_i[36:34]),
    .Y(\$auto$rtlil.cc:3092:Mux$1109 )
  );
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$143  (
    .A({ 8'h00, abstractauto_q[23:16] }),
    .S(dmi_req_i[37:34]),
    .Y(\$auto$rtlil.cc:3092:Mux$1112 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(dmi_req_i[40:34]),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3011:Eq$1113 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(dmi_req_i[40:34]),
    .B(5'h13),
    .Y(\$auto$rtlil.cc:3011:Eq$1114 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(dmi_req_i[40:34]),
    .B(6'h34),
    .Y(\$auto$rtlil.cc:3011:Eq$1115 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(dmi_req_i[40:34]),
    .B(6'h35),
    .Y(\$auto$rtlil.cc:3011:Eq$1116 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(dmi_req_i[40:34]),
    .B(6'h38),
    .Y(\$auto$rtlil.cc:3011:Eq$1117 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(dmi_req_i[40:34]),
    .B(6'h39),
    .Y(\$auto$rtlil.cc:3011:Eq$1118 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$157  (
    .A(dmi_req_i[40:34]),
    .B(6'h3a),
    .Y(\$auto$rtlil.cc:3011:Eq$1119 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(dmi_req_i[40:34]),
    .B(6'h3c),
    .Y(\$auto$rtlil.cc:3011:Eq$1120 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$159  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$160 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(sbcs_q[14:12]),
    .Y(\$162 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(dmi_req_i[40:34]),
    .B(6'h3d),
    .Y(\$auto$rtlil.cc:3011:Eq$1121 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(dmi_req_i[33:32]),
    .B(2'h2),
    .Y(\$184 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$102 ),
    .B(\$184 ),
    .Y(\$186 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$196  (
    .A(1'h1),
    .S(dmi_req_i[34]),
    .Y({ \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [31] })
  );
  \$bwmux  #(
    .WIDTH(32'd64)
  ) \$198  (
    .A(data_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1131 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$227  (
    .A(dmi_req_i[10:8]),
    .Y(\$228 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$229  (
    .A(\$228 ),
    .B(cmderr_q),
    .Y(\$230 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(resp_queue_empty),
    .Y(dmi_resp_valid_o)
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$265  (
    .A(1'h1),
    .S(dmi_req_i[36:34]),
    .Y({ \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [31] })
  );
  \$bwmux  #(
    .WIDTH(32'd256)
  ) \$267  (
    .A(progbuf_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31] }),
    .Y(progbuf_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(resp_queue_full),
    .Y(dmi_req_ready_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$279  (
    .A(dmi_req_i[22]),
    .Y(\$280 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(sbcs_q[22]),
    .B(\$280 ),
    .Y(\$282 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A(dmi_req_i[14:12]),
    .Y(\$284 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(dmi_req_valid_i),
    .B(dmi_req_ready_o),
    .Y(resp_queue_push)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) \$32  (
    .A(dmi_req_i[37:36]),
    .B(1'h1),
    .Y(autoexecdata_idx[3:2])
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$356  (
    .A(dmcontrol_q[30]),
    .Y(\$357 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$358  (
    .A(\$357 ),
    .B(\$dmcontrol_d$335 [30]),
    .Y(clear_resumeack_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$361  (
    .A(dmcontrol_q[30]),
    .B(resumeack_i),
    .Y(\$362 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$383  (
    .A(dmi_resp_ready_i),
    .B(dmi_resp_valid_o),
    .Y(resp_queue_pop)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$385  (
    .A(dmi_rst_ni),
    .Y(\$386 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(unavailable_i),
    .Y(\$64 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(halted_i),
    .B(\$64 ),
    .Y(dmstatus[9])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(halted_i),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\$81 ),
    .B(\$64 ),
    .Y(dmstatus[11])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17716  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11194_Y [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17723 ),
    .Q(sbdata_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17725  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11194_Y [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17732 ),
    .Q(sbdata_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17734  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [28:23]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17741 ),
    .Q(sbcs_q[28:23])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17743  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [15]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17741 ),
    .Q(sbcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17752  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [20]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17741 ),
    .Q(sbcs_q[20])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17761  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [14:12]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17770 ),
    .Q(sbcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17772  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [16]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17741 ),
    .Q(sbcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h2),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17781  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [19:17]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17741 ),
    .Q(sbcs_q[19:17])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17790  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [255:224]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[255:224])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17799  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [223:192]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[223:192])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17808  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [191:160]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[191:160])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17817  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [159:128]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[159:128])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17826  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [127:96]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[127:96])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17835  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [95:64]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[95:64])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17844  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17853  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11191_Y [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17797 ),
    .Q(progbuf_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17862  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17867 ),
    .Q(dmcontrol_q[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17869  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [31]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17867 ),
    .Q(dmcontrol_q[31])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17876  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$403 [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17883 ),
    .Q(data_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17885  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$403 [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17883 ),
    .Q(data_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(24'h000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$auto$ff.cc:266:slice$17894  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$396 [23:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17901 ),
    .Q(command_q[23:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17903  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$396 [31:24]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17901 ),
    .Q(command_q[31:24])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17930  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [29]),
    .Q(sbcs_q[29])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18530  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(dmi_req_i[0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18531 ),
    .Q(dmcontrol_q[0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18538  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$398 [23:16]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17919 ),
    .Q(abstractauto_q[23:16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18539  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$398 [1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17919 ),
    .Q(abstractauto_q[1:0])
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17718  (
    .A({ \$auto$rtlil.cc:3011:Eq$1120 , dmcontrol_q[0], sbdata_valid_i, \$186 , \$160  }),
    .B(5'h1b),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17717 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17720  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$186  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17719 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17722  (
    .A({ \$auto$rtlil.cc:3011:Eq$1120 , dmcontrol_q[0], sbdata_valid_i, \$186  }),
    .B(4'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17721 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17727  (
    .A({ \$auto$rtlil.cc:3011:Eq$1121 , dmcontrol_q[0], sbdata_valid_i, \$186 , \$160  }),
    .B(5'h1b),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17726 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17731  (
    .A({ \$auto$rtlil.cc:3011:Eq$1121 , dmcontrol_q[0], sbdata_valid_i, \$186  }),
    .B(4'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17730 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17736  (
    .A({ dmcontrol_q[0], \$186  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17735 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17738  (
    .A({ \$auto$rtlil.cc:3011:Eq$1117 , dmcontrol_q[0], sbbusy_i, \$186  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17737 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17740  (
    .A({ \$auto$rtlil.cc:3011:Eq$1117 , dmcontrol_q[0], \$186  }),
    .B(3'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17739 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17763  (
    .A({ dmcontrol_q[0], sberror_valid_i, \$186  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17762 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17765  (
    .A({ \$auto$rtlil.cc:3011:Eq$1117 , dmcontrol_q[0], sberror_valid_i, sbbusy_i, \$284 , \$186  }),
    .B(6'h31),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17764 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17767  (
    .A({ \$auto$rtlil.cc:3011:Eq$1117 , dmcontrol_q[0], sberror_valid_i, sbbusy_i, \$186  }),
    .B(5'h1b),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17766 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17769  (
    .A({ \$auto$rtlil.cc:3011:Eq$1117 , dmcontrol_q[0], sberror_valid_i, \$186  }),
    .B(4'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17768 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17794  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1106 , dmcontrol_q[0], cmdbusy_i, \$186  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17793 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17796  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1106 , dmcontrol_q[0], \$186  }),
    .B(3'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17795 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17866  (
    .A({ \$auto$rtlil.cc:3011:Eq$1094 , dmcontrol_q[0], \$186  }),
    .B(3'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17865 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17878  (
    .A({ dmcontrol_q[0], data_valid_i, \$186  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17877 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17880  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1087 , dmcontrol_q[0], data_valid_i, cmdbusy_i, \$186  }),
    .B(5'h1b),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17879 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17882  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1087 , dmcontrol_q[0], data_valid_i, \$186  }),
    .B(4'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17881 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17898  (
    .A({ \$auto$rtlil.cc:3011:Eq$1102 , dmcontrol_q[0], cmdbusy_i, \$186  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17897 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17900  (
    .A({ \$auto$rtlil.cc:3011:Eq$1102 , dmcontrol_q[0], \$186  }),
    .B(3'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17899 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17916  (
    .A({ \$auto$rtlil.cc:3011:Eq$1101 , dmcontrol_q[0], cmdbusy_i, \$186  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17915 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17918  (
    .A({ \$auto$rtlil.cc:3011:Eq$1101 , dmcontrol_q[0], \$186  }),
    .B(3'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17917 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17724  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17721 , \$auto$opt_dff.cc:194:make_patterns_logic$17719 , \$auto$opt_dff.cc:194:make_patterns_logic$17717  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17723 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17733  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17730 , \$auto$opt_dff.cc:194:make_patterns_logic$17726 , \$auto$opt_dff.cc:194:make_patterns_logic$17719  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17732 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17742  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17737 , \$auto$opt_dff.cc:194:make_patterns_logic$17735 , \$auto$opt_dff.cc:194:make_patterns_logic$17739  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17741 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17771  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17768 , \$auto$opt_dff.cc:194:make_patterns_logic$17766 , \$auto$opt_dff.cc:194:make_patterns_logic$17764 , \$auto$opt_dff.cc:194:make_patterns_logic$17762  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17770 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17798  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17735 , \$auto$opt_dff.cc:194:make_patterns_logic$17795 , \$auto$opt_dff.cc:194:make_patterns_logic$17793  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17797 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17868  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17865 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17867 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17884  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17881 , \$auto$opt_dff.cc:194:make_patterns_logic$17879 , \$auto$opt_dff.cc:194:make_patterns_logic$17877  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17883 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17902  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17899 , \$auto$opt_dff.cc:194:make_patterns_logic$17897 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17901 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17920  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17917 , \$auto$opt_dff.cc:194:make_patterns_logic$17915 , \$auto$opt_dff.cc:194:make_patterns_logic$17735  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17919 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18532  (
    .A({ \$auto$rtlil.cc:3011:Eq$1094 , \$186  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18531 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17133  (
    .A(dmi_req_i[40:36]),
    .Y(\$auto$rtlil.cc:3015:Ge$1085 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17135  (
    .A(dmi_req_i[40:39]),
    .Y(\$auto$rtlil.cc:3015:Ge$1104 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16891  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3024:LogicAnd$1087  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16892 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16897  (
    .A({ \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16894 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16899  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3024:LogicAnd$1087  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16896 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16901  (
    .A({ \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1118  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16888 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18534  (
    .A({ \$auto$rtlil.cc:3011:Eq$1121 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1118 , \$auto$rtlil.cc:3011:Eq$1117 , \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3011:Eq$1100 , \$auto$rtlil.cc:3024:LogicAnd$1087  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18535 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18540  (
    .A({ \$auto$rtlil.cc:3011:Eq$1116 , \$auto$rtlil.cc:3011:Eq$1115 , \$auto$rtlil.cc:3011:Eq$1114 , \$auto$rtlil.cc:3011:Eq$1113  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18541 )
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:246:merge_operators$18442  (
    .A(cmdbusy_i),
    .B({ sbbusy_i, \$160  }),
    .S({ \$auto$rtlil.cc:3011:Eq$1117 , \$auto$opt_reduce.cc:137:opt_pmux$16888  }),
    .Y(\$auto$rtlil.cc:3094:Pmux$18443 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$cmd_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$cmd_valid_q$397 ),
    .Q(cmd_valid_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$cmderr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$cmderr_q$395 ),
    .Q(cmderr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.resumereq  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$394 [30]),
    .Q(dmcontrol_q[30])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$havereset_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(havereset_d),
    .Q(havereset_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(64'h0000000000000000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$sbaddr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11197_Y ),
    .Q(sbaddr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusy  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [21]),
    .Q(sbcs_q[21])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusyerror  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$16973 [22]),
    .Q(sbcs_q[22])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd20)
  ) \$procmux$10004  (
    .A({ dmi_req_i[21:15], 1'h0, dmi_req_i[11:0] }),
    .B({ sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .S(sbbusy_i),
    .Y({ \$procmux$10004_Y [21:14], \$procmux$10004_Y [11:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10043  (
    .A(\$282 ),
    .B(sbbusy_i),
    .Y(\$procmux$10043_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:455.15-455.41|rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10056  (
    .A(\$cmderr_d$176 ),
    .B(3'h1),
    .S(\$119 ),
    .Y(\$cmderr_d$204 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10102  (
    .A(\$auto$rtlil.cc:3092:Mux$1112 ),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$275 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10117  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$204 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$205 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10235  (
    .A(1'h1),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$244 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10309  (
    .A(\$230 ),
    .B(\$cmderr_d$204 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$234 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:392.13-392.55|rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10348  (
    .A(havereset_q),
    .B(1'h0),
    .S(dmi_req_i[28]),
    .Y(\$auto$wreduce.cc:514:run$16968 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10519  (
    .A(\$auto$rtlil.cc:3092:Mux$1093 ),
    .B(\$cmd_valid_d$177 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$206 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10552  (
    .A(\$auto$rtlil.cc:3011:Eq$1120 ),
    .B(\$procmux$10673_Y ),
    .Y(\$procmux$10552_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10562  (
    .A(\$auto$rtlil.cc:3011:Eq$1118 ),
    .B(\$procmux$10673_Y ),
    .Y(\$procmux$10562_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10608  (
    .A(havereset_q),
    .B(\$auto$wreduce.cc:514:run$16968 [0]),
    .S(\$auto$rtlil.cc:3011:Eq$1094 ),
    .Y(\$auto$wreduce.cc:514:run$16969 [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10615  (
    .A(\$procmux$11176_Y [1]),
    .B(\$auto$opt_share.cc:222:merge_operators$18441 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$18535 ),
    .Y(\$procmux$10615_Y [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10673  (
    .A(\$162 ),
    .B(1'h0),
    .S(\$160 ),
    .Y(\$procmux$10673_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$10723  (
    .A(\$cmd_valid_d$177 ),
    .B({ \$cmd_valid_d$206 , \$cmd_valid_d$244 , \$cmd_valid_d$275  }),
    .S({ \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3011:Eq$1102 , \$auto$rtlil.cc:3024:LogicAnd$1106  }),
    .Y(\$cmd_valid_d$322 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd3)
  ) \$procmux$10754  (
    .A(\$cmderr_d$176 ),
    .B({ \$cmderr_d$234 , \$cmderr_d$205  }),
    .S({ \$auto$rtlil.cc:3011:Eq$1100 , \$auto$opt_reduce.cc:137:opt_pmux$16892  }),
    .Y(\$cmderr_d$320 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10781  (
    .A({ 1'hx, dmcontrol_q[30], 29'b0000000000000000000000000000x, dmcontrol_q[0] }),
    .B(dmi_req_i[31:0]),
    .S(\$auto$rtlil.cc:3011:Eq$1094 ),
    .Y(\$dmcontrol_d$319 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10787  (
    .A(\$186 ),
    .B(\$procmux$10552_Y ),
    .Y(sbdata_write_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10791  (
    .A(\$186 ),
    .B(\$procmux$10562_Y ),
    .Y(sbaddress_write_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10803  (
    .A(havereset_q),
    .B(\$auto$wreduce.cc:514:run$16969 [0]),
    .S(\$186 ),
    .Y(\$auto$wreduce.cc:514:run$16970 [0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10807  (
    .A(\$procmux$11176_Y [1]),
    .B(\$procmux$10615_Y [1]),
    .S(\$186 ),
    .Y(resp_queue_inp[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$10823  (
    .A({ 32'h00000000, sbaddress_i }),
    .B({ \$procmux$9908_Y , \$procmux$9918_Y  }),
    .S(\$186 ),
    .Y(sbaddr_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd27)
  ) \$procmux$10827  (
    .A({ 6'hxx, \$procmux$11179_Y , sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .B({ dmi_req_i[28:23], \$procmux$9925_Y , \$procmux$9944_Y [21:14], \$procmux$9944_Y [11:0] }),
    .S(\$186 ),
    .Y({ sbcs_d[28:22], \$auto$wreduce.cc:514:run$16972 [21], sbcs_d[20:15], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [11:0] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10835  (
    .A(\$cmd_valid_d$177 ),
    .B(\$cmd_valid_d$322 ),
    .S(\$186 ),
    .Y(cmd_valid_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10843  (
    .A(\$cmderr_d$176 ),
    .B(\$cmderr_d$320 ),
    .S(\$186 ),
    .Y(\$cmderr_d$336 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10847  (
    .A({ 1'hx, dmcontrol_q[30], 29'b0000000000000000000000000000x, dmcontrol_q[0] }),
    .B(\$dmcontrol_d$319 ),
    .S(\$186 ),
    .Y({ dmcontrol_d[31], \$dmcontrol_d$335 [30:2], dmcontrol_d[1:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd14),
    .WIDTH(32'd32)
  ) \$procmux$10852  (
    .A(32'd0),
    .B({ \$auto$rtlil.cc:3092:Mux$1090 , dmcontrol_q[31:30], 28'h0000000, dmcontrol_q[1:0], 12'h000, havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[11], dmstatus[9], dmstatus[9], 8'h82, hartinfo_i, 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 16'h0200, abstractauto_q[23:16], 14'h0000, abstractauto_q[1:0], next_dm_addr_i, \$auto$rtlil.cc:3092:Mux$1109 , 31'h00000000, halted_i, 2'h0, sbcs_q[29:12], 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29], sbaddr_q[31:0], sbaddr_q[63:32], \$procmux$10994_Y , \$procmux$10932_Y  }),
    .S({ \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3011:Eq$1094 , \$auto$rtlil.cc:3011:Eq$1095 , \$auto$rtlil.cc:3011:Eq$1096 , \$auto$rtlil.cc:3011:Eq$1100 , \$auto$rtlil.cc:3011:Eq$1101 , \$auto$rtlil.cc:3011:Eq$1103 , \$auto$rtlil.cc:3024:LogicAnd$1106 , \$auto$opt_reduce.cc:137:opt_pmux$18541 , \$auto$rtlil.cc:3011:Eq$1117 , \$auto$rtlil.cc:3011:Eq$1118 , \$auto$rtlil.cc:3011:Eq$1119 , \$auto$rtlil.cc:3011:Eq$1120 , \$auto$rtlil.cc:3011:Eq$1121  }),
    .Y(\$procmux$10852_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10885  (
    .A(sbcs_q[22]),
    .B(\$160 ),
    .Y(\$procmux$10885_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10893  (
    .A(1'h0),
    .B({ cmdbusy_i, \$160  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$16896 , \$auto$opt_reduce.cc:137:opt_pmux$16894  }),
    .Y(\$procmux$10893_Y [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10932  (
    .A(sbdata_q[63:32]),
    .B(32'd0),
    .S(\$160 ),
    .Y(\$procmux$10932_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10967  (
    .A(\$auto$rtlil.cc:3092:Mux$1112 ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$149 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$10985  (
    .A(cmderr_q),
    .B(\$cmderr_d$120 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$121 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10994  (
    .A(sbdata_q[31:0]),
    .B(32'd0),
    .S(\$160 ),
    .Y(\$procmux$10994_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:329.15-329.41|rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11010  (
    .A(cmderr_q),
    .B(3'h1),
    .S(\$119 ),
    .Y(\$cmderr_d$120 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11064  (
    .A(\$auto$rtlil.cc:3092:Mux$1093 ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$122 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11132  (
    .A(sbcs_q[22]),
    .B(\$procmux$10885_Y ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16894 ),
    .Y(\$procmux$11132_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11149  (
    .A(1'h0),
    .B({ \$cmd_valid_d$122 , \$cmd_valid_d$149  }),
    .S({ \$auto$rtlil.cc:3024:LogicAnd$1087 , \$auto$rtlil.cc:3024:LogicAnd$1106  }),
    .Y(\$cmd_valid_d$172 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11166  (
    .A(cmderr_q),
    .B(\$cmderr_d$121 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16896 ),
    .Y(\$cmderr_d$171 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11173  (
    .A(\$106 ),
    .B(\$procmux$10552_Y ),
    .Y(sbdata_read_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd33)
  ) \$procmux$11176  (
    .A(33'h000000000),
    .B({ \$procmux$10852_Y , \$procmux$10893_Y [1] }),
    .S(\$106 ),
    .Y({ resp_queue_inp[33:2], \$procmux$11176_Y [1] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11179  (
    .A(sbcs_q[22]),
    .B(\$procmux$11132_Y ),
    .S(\$106 ),
    .Y(\$procmux$11179_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11182  (
    .A(\$106 ),
    .B(\$cmd_valid_d$172 ),
    .Y(\$cmd_valid_d$177 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11185  (
    .A(cmderr_q),
    .B(\$cmderr_d$171 ),
    .S(\$106 ),
    .Y(\$cmderr_d$176 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11188  (
    .A(64'h0000000000000000),
    .B(data_d),
    .S(dmcontrol_q[0]),
    .Y(\$data_q$403 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$11191  (
    .A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .B(progbuf_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11191_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11194  (
    .A(64'h0000000000000000),
    .B(sbdata_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11194_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$11197  (
    .A(64'h0000000000000000),
    .B(sbaddr_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$11197_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$11200  (
    .A(18'h00080),
    .B({ sbcs_d[28:22], sbbusy_i, sbcs_d[20:12], 1'h1 }),
    .S(dmcontrol_q[0]),
    .Y({ \$auto$wreduce.cc:514:run$16973 [28:12], \$auto$wreduce.cc:514:run$16973 [29] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd10)
  ) \$procmux$11203  (
    .A(10'h000),
    .B({ dmi_req_i[23:16], dmi_req_i[1:0] }),
    .S(dmcontrol_q[0]),
    .Y({ \$abstractauto_q$398 [23:16], \$abstractauto_q$398 [1:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11206  (
    .A(dmcontrol_q[0]),
    .B(cmd_valid_d),
    .Y(\$cmd_valid_q$397 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11209  (
    .A(32'd0),
    .B(dmi_req_i[31:0]),
    .S(dmcontrol_q[0]),
    .Y(\$command_q$396 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11212  (
    .A(3'h0),
    .B(cmderr_d),
    .S(dmcontrol_q[0]),
    .Y(\$cmderr_q$395 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11215  (
    .A(3'h0),
    .B({ dmcontrol_d[31:30], dmcontrol_d[1] }),
    .S(dmcontrol_q[0]),
    .Y({ \$dmcontrol_q$394 [31:30], \$dmcontrol_q$394 [1] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:554.7-554.36|rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9750  (
    .A(\$dmcontrol_d$335 [30]),
    .B(1'h0),
    .S(\$362 ),
    .Y(dmcontrol_d[30])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:536.7-536.32|rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9769  (
    .A({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .B({ 32'h00000000, sbdata_i }),
    .S(sbdata_valid_i),
    .Y(sbdata_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:532.7-532.34|rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9777  (
    .A({ \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14] }),
    .B(sberror_i),
    .S(sberror_valid_i),
    .Y(sbcs_d[14:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:525.7-525.45|rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9784  (
    .A(\$auto$wreduce.cc:514:run$16970 [0]),
    .B(ndmreset_ack_i),
    .Y(havereset_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:520.7-520.23|rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9790  (
    .A(\$auto$rtlil.cc:3093:Bwmux$1131 ),
    .B(data_i),
    .S(data_valid_i),
    .Y(data_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:515.7-515.29|rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9795  (
    .A(\$cmderr_d$336 ),
    .B(cmderror_i),
    .S(cmderror_valid_i),
    .Y(cmderr_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9801  (
    .A(\$procmux$11176_Y [1]),
    .B(\$auto$rtlil.cc:3094:Pmux$18443 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$18441 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9819  (
    .A(\$procmux$11179_Y ),
    .B(\$160 ),
    .Y(\$procmux$9819_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9886  (
    .A(dmi_req_i[31:0]),
    .B(32'd0),
    .S(\$160 ),
    .Y(\$procmux$9886_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9908  (
    .A(32'd0),
    .B(\$procmux$9886_Y ),
    .S(\$auto$rtlil.cc:3011:Eq$1119 ),
    .Y(\$procmux$9908_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9918  (
    .A(sbaddress_i),
    .B(\$procmux$9966_Y ),
    .S(\$auto$rtlil.cc:3011:Eq$1118 ),
    .Y(\$procmux$9918_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9925  (
    .A(\$procmux$11179_Y ),
    .B({ \$procmux$10043_Y , \$procmux$9819_Y  }),
    .S({ \$auto$rtlil.cc:3011:Eq$1117 , \$auto$opt_reduce.cc:137:opt_pmux$16888  }),
    .Y(\$procmux$9925_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd20)
  ) \$procmux$9944  (
    .A({ sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .B({ \$procmux$10004_Y [21:14], \$procmux$10004_Y [11:0] }),
    .S(\$auto$rtlil.cc:3011:Eq$1117 ),
    .Y({ \$procmux$9944_Y [21:14], \$procmux$9944_Y [11:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9966  (
    .A(dmi_req_i[31:0]),
    .B(sbaddress_i),
    .S(\$160 ),
    .Y(\$procmux$9966_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:596.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo  i_fifo (
    .clk_i(clk_i),
    .data_i({ resp_queue_inp[33:1], resp_queue_inp[1] }),
    .data_o(dmi_resp_o),
    .empty_o(resp_queue_empty),
    .flush_i(\$386 ),
    .full_o(resp_queue_full),
    .pop_i(resp_queue_pop),
    .push_i(resp_queue_push),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { \$abstractauto_q$398 [31:24], \$abstractauto_q$398 [15:2] } = 22'h000000;
  assign { \$auto$rtlil.cc:3114:Demux$1129 [62:32], \$auto$rtlil.cc:3114:Demux$1129 [30:0] } = { \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [63], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31], \$auto$rtlil.cc:3114:Demux$1129 [31] };
  assign { \$auto$rtlil.cc:3114:Demux$1156 [254:224], \$auto$rtlil.cc:3114:Demux$1156 [222:192], \$auto$rtlil.cc:3114:Demux$1156 [190:160], \$auto$rtlil.cc:3114:Demux$1156 [158:128], \$auto$rtlil.cc:3114:Demux$1156 [126:96], \$auto$rtlil.cc:3114:Demux$1156 [94:64], \$auto$rtlil.cc:3114:Demux$1156 [62:32], \$auto$rtlil.cc:3114:Demux$1156 [30:0] } = { \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [255], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [223], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [191], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [159], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [127], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [95], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [63], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31], \$auto$rtlil.cc:3114:Demux$1156 [31] };
  assign \$auto$wreduce.cc:514:run$16968 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16969 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16970 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$16972 [31:22], \$auto$wreduce.cc:514:run$16972 [20:15], \$auto$wreduce.cc:514:run$16972 [13:12] } = { 3'hx, sbcs_d[28:22], sbcs_d[20:15], \$auto$wreduce.cc:514:run$16972 [14], \$auto$wreduce.cc:514:run$16972 [14] };
  assign { \$auto$wreduce.cc:514:run$16973 [31:30], \$auto$wreduce.cc:514:run$16973 [11:0] } = { 3'h0, \$auto$wreduce.cc:514:run$16973 [29], 7'h00, \$auto$wreduce.cc:514:run$16973 [29], \$auto$wreduce.cc:514:run$16973 [29], \$auto$wreduce.cc:514:run$16973 [29] };
  assign { \$dmcontrol_d$335 [31], \$dmcontrol_d$335 [1:0] } = { dmcontrol_d[31], dmcontrol_d[1:0] };
  assign { \$dmcontrol_q$394 [29:2], \$dmcontrol_q$394 [0] } = { 28'h0000000, dmcontrol_d[0] };
  assign \$procmux$10004_Y [13:12] = { \$procmux$10004_Y [14], \$procmux$10004_Y [14] };
  assign \$procmux$10615_Y [0] = \$procmux$10615_Y [1];
  assign \$procmux$10893_Y [0] = \$procmux$10893_Y [1];
  assign { \$procmux$11176_Y [33:2], \$procmux$11176_Y [0] } = { resp_queue_inp[33:2], \$procmux$11176_Y [1] };
  assign \$procmux$9944_Y [13:12] = { \$procmux$9944_Y [14], \$procmux$9944_Y [14] };
  assign abstractauto_d = { 8'h00, dmi_req_i[23:16], 14'h0000, dmi_req_i[1:0] };
  assign { abstractauto_q[31:24], abstractauto_q[15:2] } = 22'h000000;
  assign abstractcs = { cmdbusy_i, 1'h0, cmderr_q, 8'h02 };
  assign autoexecdata_idx[1:0] = dmi_req_i[35:34];
  assign cmd_o = command_q;
  assign cmd_valid_o = cmd_valid_q;
  assign command_d = dmi_req_i[31:0];
  assign data_o = data_q;
  assign dm_csr_addr = dmi_req_i[40:34];
  assign dmactive_o = dmcontrol_q[0];
  assign dmcontrol_d[29:2] = 28'h0000000;
  assign dmcontrol_q[29:2] = 28'h0000000;
  assign { dmstatus[19:12], dmstatus[10], dmstatus[8:0] } = { havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[9], 8'h82 };
  assign dtm_op = dmi_req_i[33:32];
  assign halted = { 31'h00000000, halted_i };
  assign halted_aligned = { 1'h0, halted_i };
  assign halted_flat1 = { 31'h00000000, halted_i };
  assign halted_flat2 = { 31'h00000000, halted_i };
  assign halted_flat3 = { 31'h00000000, halted_i };
  assign halted_reshaped0 = { 31'h00000000, halted_i };
  assign halted_reshaped1 = { 31'h00000000, halted_i };
  assign halted_reshaped2 = { 31'h00000000, halted_i };
  assign haltreq_o = dmcontrol_q[31];
  assign haltsum0 = 32'b0000000000000000000000000000000x;
  assign haltsum1 = 32'b0000000000000000000000000000000x;
  assign haltsum2 = 32'b0000000000000000000000000000000x;
  assign haltsum3 = { 31'h00000000, halted_i };
  assign hartinfo_aligned = { 32'h00000000, hartinfo_i };
  assign hartsel_idx0 = 15'h0000;
  assign hartsel_idx1 = 10'h000;
  assign hartsel_idx2 = 5'h00;
  assign hartsel_o = 20'h00000;
  assign havereset_d_aligned = { 1'hx, havereset_d };
  assign havereset_q_aligned = { 1'h0, havereset_q };
  assign ndmreset_o = dmcontrol_q[1];
  assign progbuf_o = progbuf_q;
  assign resp_queue_inp[0] = resp_queue_inp[1];
  assign resumeack_aligned = { 1'h0, resumeack_i };
  assign resumereq_o = dmcontrol_q[30];
  assign sbaccess_o = sbcs_q[19:17];
  assign sbaddress_o = sbaddr_q[31:0];
  assign sbautoincrement_o = sbcs_q[16];
  assign { sbcs_d[21], sbcs_d[11:0] } = { sbbusy_i, 12'h407 };
  assign { sbcs_q[31:30], sbcs_q[11:0] } = { 3'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign sbdata_o = sbdata_q[31:0];
  assign sbreadonaddr_o = sbcs_q[20];
  assign sbreadondata_o = sbcs_q[15];
  assign selected_hart = 1'h0;
  assign unavailable_aligned = { 1'h0, unavailable_i };
endmodule

/* src = "rtl/riscv-dbg/dm_mem.sv:19.8" */
module \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem (clk_i, rst_ni, debug_req_o, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, data_i, data_o, ndmreset_i, hartsel_i, haltreq_i, resumereq_i, clear_resumeack_i, halted_o, resuming_o, progbuf_i, data_valid_o, cmd_valid_i
, cmd_i, cmderror_valid_o, cmderror_o, cmdbusy_o);
  wire [31:0] \$109 ;
  wire \$111 ;
  wire \$124 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire [2:0] \$187 ;
  wire [11:0] \$195 ;
  wire \$199 ;
  wire \$22 ;
  wire \$234 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$262 ;
  wire \$264 ;
  wire \$284 ;
  wire \$288 ;
  wire \$29 ;
  wire \$298 ;
  wire \$300 ;
  wire \$31 ;
  wire \$36 ;
  wire \$5 ;
  wire \$54 ;
  wire \$7 ;
  wire \$9 ;
  wire [126:0] \$abstract_cmd[255:128]$252 ;
  wire [126:0] \$abstract_cmd[255:128]$253 ;
  wire [126:0] \$abstract_cmd[255:128]$255 ;
  wire [126:0] \$abstract_cmd[255:128]$278 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$279 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$281 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$292 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$295 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  wire [31:0] \$abstract_cmd[319:288]$301 ;
  wire [30:0] \$abstract_cmd[31:0]$254 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$291 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$294 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17932 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17934 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17936 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17938 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17943 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17945 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17952 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17954 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17956 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17940 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17949 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17958 ;
  wire [3:0] \$auto$opt_expr.cc:205:group_cell_inputs$17140 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18435 ;
  wire \$auto$rtlil.cc:2957:Not$16643 ;
  /* unused_bits = "1" */
  wire [1:0] \$auto$rtlil.cc:2957:Not$16647 ;
  wire \$auto$rtlil.cc:2957:Not$17948 ;
  wire [1:0] \$auto$rtlil.cc:3004:And$16640 ;
  wire \$auto$rtlil.cc:3004:And$16644 ;
  wire \$auto$rtlil.cc:3004:And$16648 ;
  /* unused_bits = "1" */
  wire [1:0] \$auto$rtlil.cc:3005:Or$16650 ;
  /* unused_bits = "1" */
  wire [1:0] \$auto$rtlil.cc:3005:Or$16652 ;
  wire \$auto$rtlil.cc:3010:Le$1254 ;
  wire \$auto$rtlil.cc:3010:Le$1270 ;
  wire \$auto$rtlil.cc:3010:Le$1276 ;
  wire \$auto$rtlil.cc:3010:Le$1282 ;
  wire \$auto$rtlil.cc:3011:Eq$1221 ;
  wire \$auto$rtlil.cc:3011:Eq$1236 ;
  wire \$auto$rtlil.cc:3011:Eq$1237 ;
  wire \$auto$rtlil.cc:3011:Eq$1252 ;
  wire \$auto$rtlil.cc:3011:Eq$1256 ;
  wire \$auto$rtlil.cc:3015:Ge$1253 ;
  wire \$auto$rtlil.cc:3015:Ge$1269 ;
  wire \$auto$rtlil.cc:3015:Ge$1275 ;
  wire \$auto$rtlil.cc:3015:Ge$1281 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1255 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1271 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1277 ;
  wire \$auto$rtlil.cc:3024:LogicAnd$1283 ;
  wire \$auto$rtlil.cc:3092:Mux$1193 ;
  wire \$auto$rtlil.cc:3092:Mux$1196 ;
  wire \$auto$rtlil.cc:3092:Mux$1199 ;
  wire \$auto$rtlil.cc:3092:Mux$1202 ;
  wire \$auto$rtlil.cc:3092:Mux$1211 ;
  wire \$auto$rtlil.cc:3092:Mux$1259 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1274 ;
  wire [63:0] \$auto$rtlil.cc:3092:Mux$1280 ;
  wire [1:0] \$auto$rtlil.cc:3114:Demux$1218 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$auto$wreduce.cc:514:run$16992 ;
  wire [63:0] \$auto$wreduce.cc:514:run$16995 ;
  wire [63:0] \$auto$wreduce.cc:514:run$16996 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16997 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16998 ;
  wire [1:0] \$auto$wreduce.cc:514:run$16999 ;
  wire [1:0] \$auto$wreduce.cc:514:run$17000 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  wire [2:0] \$cmderror_o$14 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire [2:0] \$cmderror_o$51 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire [2:0] \$cmderror_o$56 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire \$cmderror_valid_o$55 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [63:0] \$data_bits$139 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [63:0] \$data_bits$218 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[15:8]$115 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[23:16]$117 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[31:0]$120 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[31:24]$119 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[39:32]$126 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[47:40]$128 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[55:48]$130 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[63:32]$133 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[63:56]$132 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[7:0]$113 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$data_valid_o$220 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$exception$213 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$go$48 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$going$212 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$halted_aligned$137 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [1:0] \$halted_aligned$216 ;
  wire \$procmux$8522_Y ;
  wire \$procmux$8665_Y ;
  wire [63:0] \$procmux$8829_Y ;
  wire [63:0] \$procmux$8867_Y ;
  wire \$procmux$9365_CMP ;
  wire \$procmux$9370_CMP ;
  wire \$procmux$9386_CMP ;
  wire [1:0] \$procmux$9388_Y ;
  wire [1:0] \$procmux$9400_Y ;
  wire [308:0] abstract_cmd;
  /* src = "rtl/riscv-dbg/dm_mem.sv:122.19" */
  /* unused_bits = "13 23" */
  wire [23:0] ac_ar;
  /* src = "rtl/riscv-dbg/dm_mem.sv:56.44" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:58.44" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:34.44" */
  input clear_resumeack_i;
  wire clear_resumeack_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:25.44" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:47.44" */
  input [31:0] cmd_i;
  wire [31:0] cmd_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:46.44" */
  input cmd_valid_i;
  wire cmd_valid_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:50.44" */
  output cmdbusy_o;
  wire cmdbusy_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:49.44" */
  output [2:0] cmderror_o;
  wire [2:0] cmderror_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:48.44" */
  output cmderror_valid_o;
  wire cmderror_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:225.35" */
  wire [63:0] data_bits;
  /* src = "rtl/riscv-dbg/dm_mem.sv:42.44" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:43.44" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:44.44" */
  output data_valid_o;
  wire data_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:28.44" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:91.9" */
  wire exception;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.9" */
  wire fwd_rom_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.20" */
  wire fwd_rom_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.31" */
  wire go;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.35" */
  wire going;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.23" */
  wire halted_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.30" */
  wire [1:0] halted_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:37.44" */
  output halted_o;
  wire halted_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.33" */
  wire halted_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.48" */
  wire [1:0] halted_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.49" */
  wire [1:0] haltreq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:32.44" */
  input haltreq_i;
  wire haltreq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.26" */
  wire hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:30.44" */
  input [19:0] hartsel_i;
  wire [19:0] hartsel_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:29.44" */
  input ndmreset_i;
  wire ndmreset_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:85.41" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_mem.sv:40.44" */
  input [255:0] progbuf_i;
  wire [255:0] progbuf_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:59.44" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:95.25" */
  wire [63:0] rdata_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:54.44" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.23" */
  wire resume;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.30" */
  wire [1:0] resumereq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:33.44" */
  input resumereq_i;
  wire resumereq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.46" */
  wire [1:0] resumereq_wdata_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.23" */
  wire resuming_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.30" */
  wire [1:0] resuming_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:38.44" */
  output resuming_o;
  wire resuming_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.35" */
  wire resuming_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.50" */
  wire [1:0] resuming_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:488.16" */
  wire [63:0] rom_addr;
  /* src = "rtl/riscv-dbg/dm_mem.sv:94.16" */
  wire [63:0] rom_rdata;
  /* src = "rtl/riscv-dbg/dm_mem.sv:26.44" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.11" */
  wire [1:0] state_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.20" */
  wire [1:0] state_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:92.9" */
  wire unsupported_command;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.35" */
  wire wdata_hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:57.44" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:55.44" */
  input we_i;
  wire we_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:96.16" */
  wire word_enable32_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:215.16" */
  wire [63:0] word_mux;
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$101  (
    .A(1'h1),
    .S(wdata_i[0]),
    .Y(\$auto$rtlil.cc:3004:And$16640 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(addr_i[11:0]),
    .B(9'h118),
    .Y(\$auto$rtlil.cc:3011:Eq$1252 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(addr_i[11:0]),
    .B(10'h380),
    .Y(\$auto$rtlil.cc:3015:Ge$1253 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(addr_i[11:0]),
    .B(10'h387),
    .Y(\$auto$rtlil.cc:3010:Le$1254 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(\$auto$rtlil.cc:3015:Ge$1253 ),
    .B(\$auto$rtlil.cc:3010:Le$1254 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1255 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd6)
  ) \$108  (
    .A(addr_i[11:7]),
    .B(3'h7),
    .Y({ \$109 [31], \$109 [9:5] })
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A({ \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [9:5], addr_i[6:2] }),
    .Y(\$111 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A({ \$109 [31], \$109 [9:5], addr_i[6:2] }),
    .B(1'h1),
    .Y(\$124 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(addr_i[11:0]),
    .B(10'h300),
    .Y(\$auto$rtlil.cc:3011:Eq$1256 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$143  (
    .A(resumereq_i),
    .B(1'h0),
    .S(wdata_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1259 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(cmd_i[31:24]),
    .Y(\$147 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(cmd_i[17]),
    .Y(\$149 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(\$147 ),
    .B(\$149 ),
    .Y(\$151 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(\$151 ),
    .B(cmd_i[18]),
    .Y(\$153 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(resumereq_i),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1196 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$175  (
    .A(addr_i[11:0]),
    .B(10'h360),
    .Y(\$auto$rtlil.cc:3015:Ge$1269 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(addr_i[11:0]),
    .B(10'h37f),
    .Y(\$auto$rtlil.cc:3010:Le$1270 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$177  (
    .A(\$auto$rtlil.cc:3015:Ge$1269 ),
    .B(\$auto$rtlil.cc:3010:Le$1270 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1271 )
  );
  \$bmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd64)
  ) \$181  (
    .A(progbuf_i),
    .S(addr_i[4:3]),
    .Y(\$auto$rtlil.cc:3092:Mux$1274 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(addr_i[11:0]),
    .B(10'h338),
    .Y(\$auto$rtlil.cc:3015:Ge$1275 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$184  (
    .A(addr_i[11:0]),
    .B(10'h35f),
    .Y(\$auto$rtlil.cc:3010:Le$1276 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\$auto$rtlil.cc:3015:Ge$1275 ),
    .B(\$auto$rtlil.cc:3010:Le$1276 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1277 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$186  (
    .A(addr_i[5:3]),
    .B(3'h7),
    .Y(\$187 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd49)
  ) \$189  (
    .A({ 158'h0000000000000000000000000000000000000000, abstract_cmd[293], 6'h00, abstract_cmd[293], 31'h57b312ba, abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], 1'h0, abstract_cmd[170], abstract_cmd[170], 2'h0, abstract_cmd[170], 3'h0, abstract_cmd[170], 1'h0, abstract_cmd[170], 1'h0, abstract_cmd[170], 3'h5, abstract_cmd[223:212], abstract_cmd[170], abstract_cmd[165], abstract_cmd[206:204], 5'h00, abstract_cmd[176], abstract_cmd[170], abstract_cmd[196], 2'h1, abstract_cmd[191:180], abstract_cmd[176], abstract_cmd[174:172], abstract_cmd[170], 1'h0, abstract_cmd[165:164], 3'h2, abstract_cmd[134], abstract_cmd[146], abstract_cmd[146], abstract_cmd[146], 1'h0, abstract_cmd[134], abstract_cmd[152:148], abstract_cmd[146], abstract_cmd[144], abstract_cmd[142:132], abstract_cmd[130], 73'h100c9d4033aa280006e, abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], 1'h0, abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], abstract_cmd[0], abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], 5'h00, abstract_cmd[0], abstract_cmd[0], abstract_cmd[0], 1'h0, abstract_cmd[0] }),
    .S(\$187 ),
    .Y({ \$auto$rtlil.cc:3092:Mux$1280 [63:52], \$auto$rtlil.cc:3092:Mux$1280 [50], \$auto$rtlil.cc:3092:Mux$1280 [46:44], \$auto$rtlil.cc:3092:Mux$1280 [42], \$auto$rtlil.cc:3092:Mux$1280 [40], \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [36], \$auto$rtlil.cc:3092:Mux$1280 [34:33], \$auto$rtlil.cc:3092:Mux$1280 [31:20], \$auto$rtlil.cc:3092:Mux$1280 [18], \$auto$rtlil.cc:3092:Mux$1280 [16], \$auto$rtlil.cc:3092:Mux$1280 [14:4], \$auto$rtlil.cc:3092:Mux$1280 [2:1] })
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$19  (
    .A(resuming_q),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1199 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(addr_i[11:0]),
    .B(11'h7ff),
    .Y(\$auto$rtlil.cc:3010:Le$1282 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(\$auto$rtlil.cc:3015:Ge$1281 ),
    .B(\$auto$rtlil.cc:3010:Le$1282 ),
    .Y(\$auto$rtlil.cc:3024:LogicAnd$1283 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) \$194  (
    .A(addr_i[11:10]),
    .B(1'h1),
    .Y(\$195 [11:10])
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$198  (
    .A({ \$195 [11:10], addr_i[9:3] }),
    .Y(\$199 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(halted_q),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1193 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$206  (
    .A(1'h1),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1218 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$auto$rtlil.cc:3092:Mux$1199 ),
    .Y(\$22 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$auto$rtlil.cc:3092:Mux$1196 ),
    .B(\$22 ),
    .Y(\$24 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(cmd_i[22:20]),
    .B(2'h3),
    .Y(\$234 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(\$234 ),
    .B(cmd_i[17]),
    .Y(\$236 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(\$236 ),
    .B(cmd_i[16]),
    .Y(\$238 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(cmd_i[15:14]),
    .Y(\$240 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$243  (
    .A(cmd_i[5]),
    .Y(\$244 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$245  (
    .A(cmd_i[12]),
    .B(\$244 ),
    .Y(\$246 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(cmd_i[4:0]),
    .B(4'ha),
    .Y(\$248 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(\$246 ),
    .B(\$248 ),
    .Y(\$250 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$26  (
    .A(haltreq_i),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1202 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(cmd_i[16]),
    .Y(\$262 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\$236 ),
    .B(\$262 ),
    .Y(\$264 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$auto$rtlil.cc:3092:Mux$1202 ),
    .Y(\$29 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A(cmd_i[22:20]),
    .B(2'h3),
    .Y(\$284 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$287  (
    .A(\$284 ),
    .B(cmd_i[19]),
    .Y(\$288 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\$procmux$8665_Y ),
    .Y(\$298 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(cmd_i[18]),
    .B(\$298 ),
    .Y(\$300 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$24 ),
    .B(\$29 ),
    .Y(\$31 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$31 ),
    .B(\$auto$rtlil.cc:3092:Mux$1193 ),
    .Y(\$36 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(cmd_valid_i),
    .B(\$auto$rtlil.cc:3092:Mux$1193 ),
    .Y(\$5 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$44  (
    .A(halted_aligned[0]),
    .B(halted_aligned[1]),
    .S(hartsel_i[0]),
    .Y(\$auto$rtlil.cc:3092:Mux$1211 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(unsupported_command),
    .B(cmd_valid_i),
    .Y(\$54 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(unsupported_command),
    .Y(\$7 )
  );
  \$mux  #(
    .WIDTH(32'd64)
  ) \$62  (
    .A(rdata_q),
    .B(rom_rdata),
    .S(fwd_rom_q),
    .Y(word_mux)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$63  (
    .A(word_mux[31:0]),
    .B(word_mux[63:32]),
    .S(word_enable32_q),
    .Y(rdata_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(addr_i[11:0]),
    .B(9'h100),
    .Y(\$auto$rtlil.cc:3011:Eq$1221 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$5 ),
    .B(\$7 ),
    .Y(\$9 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(addr_i[11:0]),
    .B(9'h108),
    .Y(\$auto$rtlil.cc:3011:Eq$1236 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(addr_i[11:0]),
    .B(9'h110),
    .Y(\$auto$rtlil.cc:3011:Eq$1237 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17931  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17940 ),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(64'h0000000000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$auto$ff.cc:266:slice$17942  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8867_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17949 ),
    .Q(rdata_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17951  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(halted_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17958 ),
    .Q(halted_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17933  (
    .A({ \$go$48 , \$procmux$9370_CMP , \$procmux$9365_CMP , ndmreset_i, \$36 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17932 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17935  (
    .A({ \$go$48 , going, ndmreset_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17934 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17937  (
    .A({ \$procmux$9370_CMP , \$auto$rtlil.cc:3092:Mux$1199 , ndmreset_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17936 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17939  (
    .A({ \$procmux$9365_CMP , \$auto$rtlil.cc:3092:Mux$1211 , ndmreset_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17938 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17944  (
    .A({ \$auto$rtlil.cc:3024:LogicAnd$1283 , \$auto$rtlil.cc:3024:LogicAnd$1277 , \$auto$rtlil.cc:3024:LogicAnd$1271 , \$auto$rtlil.cc:3011:Eq$1256 , \$auto$rtlil.cc:3024:LogicAnd$1255  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17943 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17946  (
    .A({ cmdbusy_o, \$auto$rtlil.cc:3092:Mux$1259 , \$auto$rtlil.cc:3011:Eq$1256  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17945 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17953  (
    .A({ ndmreset_i, req_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17952 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17955  (
    .A({ ndmreset_i, we_i, req_i }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17954 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17957  (
    .A({ \$auto$rtlil.cc:3011:Eq$1237 , \$auto$rtlil.cc:3011:Eq$1221 , ndmreset_i, we_i, req_i }),
    .B(5'h03),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17956 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17947  (
    .A(we_i),
    .Y(\$auto$rtlil.cc:2957:Not$17948 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17941  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17938 , \$auto$opt_dff.cc:194:make_patterns_logic$17936 , \$auto$opt_dff.cc:194:make_patterns_logic$17934 , \$auto$opt_dff.cc:194:make_patterns_logic$17932  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17940 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17950  (
    .A({ \$auto$rtlil.cc:2957:Not$17948 , \$auto$opt_dff.cc:194:make_patterns_logic$17945 , \$auto$opt_dff.cc:194:make_patterns_logic$17943 , req_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17949 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17959  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17956 , \$auto$opt_dff.cc:194:make_patterns_logic$17954 , \$auto$opt_dff.cc:194:make_patterns_logic$17952  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17958 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17138  (
    .A(addr_i[11:10]),
    .Y(\$auto$rtlil.cc:3015:Ge$1281 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17141  (
    .A({ go, go, resume, resume }),
    .B({ \$auto$rtlil.cc:3114:Demux$1218 , \$auto$rtlil.cc:3114:Demux$1218  }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17140 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16641  (
    .A(halted_q),
    .B(\$auto$rtlil.cc:2957:Not$16643 ),
    .Y(\$auto$rtlil.cc:3004:And$16644 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16642  (
    .A(\$auto$rtlil.cc:3004:And$16640 [0]),
    .Y(\$auto$rtlil.cc:2957:Not$16643 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16645  (
    .A(resuming_q),
    .B(\$auto$rtlil.cc:2957:Not$16647 [0]),
    .Y(\$auto$rtlil.cc:3004:And$16648 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$16646  (
    .A(\$auto$rtlil.cc:3114:Demux$1218 [0]),
    .Y(\$auto$rtlil.cc:2957:Not$16647 [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:783:replace_const_cells$16649  (
    .A(halted_q),
    .B(\$auto$rtlil.cc:3004:And$16640 [0]),
    .Y(\$auto$rtlil.cc:3005:Or$16650 [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:783:replace_const_cells$16651  (
    .A(\$auto$wreduce.cc:514:run$17000 [0]),
    .B(\$auto$rtlil.cc:3004:And$16640 [0]),
    .Y(\$auto$rtlil.cc:3005:Or$16652 [0])
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16857  (
    .A({ \$procmux$9370_CMP , \$procmux$9365_CMP , \$go$48  }),
    .Y(cmdbusy_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18434  (
    .A({ \$procmux$9370_CMP , \$procmux$9365_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18435 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$fwd_rom_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[11]),
    .Q(fwd_rom_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$resuming_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(resuming_d),
    .Q(resuming_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$word_enable32_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[2]),
    .Q(word_enable32_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8483  (
    .A(1'h1),
    .B(\$procmux$8665_Y ),
    .S(\$147 ),
    .Y(unsupported_command)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8488  (
    .A(2'h1),
    .B({ \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [20] }),
    .S(\$147 ),
    .Y({ abstract_cmd[12], abstract_cmd[0] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:475.11-475.46|rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8491  (
    .A(\$300 ),
    .Y(\$abstract_cmd[319:288]$301 [20])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8522  (
    .A(\$288 ),
    .B(\$240 ),
    .S(\$264 ),
    .Y(\$procmux$8522_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8533  (
    .A({ 1'h0, \$288  }),
    .B({ \$abstract_cmd[31:0]$254 [30], 1'h1 }),
    .S(\$264 ),
    .Y({ \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [20] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$8543  (
    .A({ cmd_i[22:20], 1'h0, cmd_i[11:0], 1'h1 }),
    .B(17'h02000),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$278 [78:76], \$abstract_cmd[255:128]$278 [68], \$abstract_cmd[255:128]$278 [63:52], \$abstract_cmd[255:128]$278 [126] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$8583  (
    .A(11'h486),
    .B({ cmd_i[4:0], 1'h1, cmd_i[22:20], 1'h0, cmd_i[5] }),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$278 [24:20], \$abstract_cmd[255:128]$278 [16], \$abstract_cmd[255:128]$278 [14:12], \$abstract_cmd[255:128]$278 [30], \$abstract_cmd[255:128]$278 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd28)
  ) \$procmux$8602  (
    .A({ \$abstract_cmd[255:128]$278 [78:76], \$abstract_cmd[255:128]$278 [68], \$abstract_cmd[255:128]$278 [63:52], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [24:20], \$abstract_cmd[255:128]$278 [16], \$abstract_cmd[255:128]$278 [14:12], \$abstract_cmd[255:128]$278 [30], \$abstract_cmd[255:128]$278 [2] }),
    .B({ cmd_i[22:20], 25'h07b3c86 }),
    .S(\$250 ),
    .Y({ \$abstract_cmd[255:128]$279 [78:76], \$abstract_cmd[255:128]$279 [68], \$abstract_cmd[255:128]$279 [63:52], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [24:20], \$abstract_cmd[255:128]$279 [16], \$abstract_cmd[255:128]$279 [14:12], \$abstract_cmd[255:128]$279 [30], \$abstract_cmd[255:128]$279 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$8630  (
    .A({ \$abstract_cmd[255:128]$279 [78:76], \$abstract_cmd[255:128]$279 [68], \$abstract_cmd[255:128]$279 [63:52], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [24:20], \$abstract_cmd[255:128]$279 [16], \$abstract_cmd[255:128]$279 [14:12], \$abstract_cmd[255:128]$279 [30], 1'h1, \$abstract_cmd[255:128]$279 [30], \$abstract_cmd[255:128]$279 [2] }),
    .B(30'h04000002),
    .S(\$240 ),
    .Y({ \$abstract_cmd[255:128]$281 [78:76], \$abstract_cmd[255:128]$281 [68], \$abstract_cmd[255:128]$281 [63:52], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [24:20], \$abstract_cmd[255:128]$281 [16], \$abstract_cmd[255:128]$281 [14:12], \$abstract_cmd[255:128]$281 [30:29], \$abstract_cmd[255:128]$281 [4], \$abstract_cmd[255:128]$281 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8642  (
    .A(\$240 ),
    .Y(\$abstract_cmd[31:0]$254 [30])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$8654  (
    .A(30'h04000002),
    .B({ \$abstract_cmd[255:128]$281 [78:76], \$abstract_cmd[255:128]$281 [68], \$abstract_cmd[255:128]$281 [63:52], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [24:20], \$abstract_cmd[255:128]$281 [16], \$abstract_cmd[255:128]$281 [14:12], \$abstract_cmd[255:128]$281 [30:29], \$abstract_cmd[255:128]$281 [4], \$abstract_cmd[255:128]$281 [2] }),
    .S(\$264 ),
    .Y({ \$abstract_cmd[255:128]$292 [78:76], \$abstract_cmd[255:128]$292 [68], \$abstract_cmd[255:128]$292 [63:52], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [24:20], \$abstract_cmd[255:128]$292 [16], \$abstract_cmd[255:128]$292 [14:12], \$abstract_cmd[255:128]$292 [30:29], \$abstract_cmd[255:128]$292 [4], \$abstract_cmd[255:128]$292 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8665  (
    .A(\$procmux$8522_Y ),
    .B(\$240 ),
    .S(\$238 ),
    .Y(\$procmux$8665_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd54)
  ) \$procmux$8673  (
    .A({ 2'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [78:76], \$abstract_cmd[255:128]$292 [68], \$abstract_cmd[255:128]$292 [63:52], 2'h0, \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 1'h1, \$abstract_cmd[255:128]$292 [24:20], \$abstract_cmd[255:128]$292 [29], \$abstract_cmd[255:128]$292 [16], \$abstract_cmd[255:128]$292 [14:12], 5'h00, \$abstract_cmd[255:128]$292 [30:29], \$abstract_cmd[255:128]$292 [4], \$abstract_cmd[255:128]$292 [2] }),
    .B({ \$abstract_cmd[255:128]$255 [95:84], 2'h0, \$abstract_cmd[255:128]$255 [126], 3'h4, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 7'h00, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [46:44], \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [36], \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [30], 1'h0, \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [16], \$abstract_cmd[255:128]$255 [14:7], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [4], \$abstract_cmd[255:128]$255 [2] }),
    .S(\$238 ),
    .Y({ \$abstract_cmd[255:128]$295 [95:84], \$abstract_cmd[255:128]$295 [78:76], \$abstract_cmd[255:128]$295 [68], \$abstract_cmd[255:128]$295 [63:52], \$abstract_cmd[255:128]$295 [70], \$abstract_cmd[255:128]$295 [46:44], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [36], \$abstract_cmd[255:128]$295 [24:20], \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [16], \$abstract_cmd[255:128]$295 [14:7], \$abstract_cmd[255:128]$295 [30], \$abstract_cmd[255:128]$295 [5:4], \$abstract_cmd[255:128]$295 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8681  (
    .A({ \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [20] }),
    .B({ \$abstract_cmd[31:0]$254 [30], 1'h1 }),
    .S(\$238 ),
    .Y({ \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [20] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$8688  (
    .A({ cmd_i[11:0], cmd_i[22:20], 2'h2 }),
    .B(17'h00001),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$252 [95:84], \$abstract_cmd[255:128]$252 [46:44], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [36] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$8722  (
    .A(11'h082),
    .B({ 1'h1, cmd_i[22:20], cmd_i[4:0], 1'h0, cmd_i[5] }),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$252 [16], \$abstract_cmd[255:128]$252 [14:7], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd28)
  ) \$procmux$8738  (
    .A({ \$abstract_cmd[255:128]$252 [95:84], \$abstract_cmd[255:128]$252 [46:44], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [36], \$abstract_cmd[255:128]$252 [16], \$abstract_cmd[255:128]$252 [14:7], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [2] }),
    .B({ 12'h7b3, cmd_i[22:20], 13'h1082 }),
    .S(\$250 ),
    .Y({ \$abstract_cmd[255:128]$253 [95:84], \$abstract_cmd[255:128]$253 [46:44], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [36], \$abstract_cmd[255:128]$253 [16], \$abstract_cmd[255:128]$253 [14:7], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$8760  (
    .A({ \$abstract_cmd[255:128]$253 [95:84], \$abstract_cmd[255:128]$253 [46:44], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [36], 1'h1, \$abstract_cmd[255:128]$253 [16], \$abstract_cmd[255:128]$253 [14:7], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [2] }),
    .B(30'h00002002),
    .S(\$240 ),
    .Y({ \$abstract_cmd[255:128]$255 [95:84], \$abstract_cmd[255:128]$255 [46:44], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [36], \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [16], \$abstract_cmd[255:128]$255 [14:7], \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [4], \$abstract_cmd[255:128]$255 [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8778  (
    .A(1'h1),
    .B(\$abstract_cmd[319:288]$301 [20]),
    .S(\$147 ),
    .Y(abstract_cmd[293])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd54)
  ) \$procmux$8783  (
    .A(54'h00004000080002),
    .B({ \$abstract_cmd[255:128]$295 [95:84], \$abstract_cmd[255:128]$295 [78:76], \$abstract_cmd[255:128]$295 [68], \$abstract_cmd[255:128]$295 [63:52], \$abstract_cmd[255:128]$295 [70], \$abstract_cmd[255:128]$295 [46:44], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [36], \$abstract_cmd[255:128]$295 [24:20], \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [16], \$abstract_cmd[255:128]$295 [14:7], \$abstract_cmd[255:128]$295 [30], \$abstract_cmd[255:128]$295 [5:4], \$abstract_cmd[255:128]$295 [2] }),
    .S(\$147 ),
    .Y({ abstract_cmd[223:212], abstract_cmd[206:204], abstract_cmd[196], abstract_cmd[191:180], abstract_cmd[176], abstract_cmd[174:172], abstract_cmd[170], abstract_cmd[165:164], abstract_cmd[152:148], abstract_cmd[146], abstract_cmd[144], abstract_cmd[142:132], abstract_cmd[130] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8785  (
    .A(\$auto$wreduce.cc:514:run$16999 [0]),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(resuming_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8789  (
    .A(\$auto$wreduce.cc:514:run$16992 [0]),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(halted_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.94|rtl/riscv-dbg/dm_mem.sv:332.13-335.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8794  (
    .A(4'h0),
    .B({ \$auto$opt_expr.cc:205:group_cell_inputs$17140 [1], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [3], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [0], \$auto$opt_expr.cc:205:group_cell_inputs$17140 [2] }),
    .S(\$199 ),
    .Y({ \$auto$wreduce.cc:514:run$16995 [9:8], \$auto$wreduce.cc:514:run$16995 [1:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:303.17-303.87|rtl/riscv-dbg/dm_mem.sv:301.15-307.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8810  (
    .A(2'h1),
    .B(2'h2),
    .S(\$153 ),
    .Y({ \$auto$wreduce.cc:514:run$16996 [26], \$auto$wreduce.cc:514:run$16996 [24] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$8829  (
    .A(5'h11),
    .B({ 1'h0, \$auto$wreduce.cc:514:run$16996 [26], 1'h1, \$auto$wreduce.cc:514:run$16996 [24], \$auto$wreduce.cc:514:run$16996 [24] }),
    .S(cmdbusy_o),
    .Y({ \$procmux$8829_Y [30], \$procmux$8829_Y [26:23] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd64)
  ) \$procmux$8867  (
    .A({ 33'h000000000, \$procmux$8829_Y [30], 1'h0, \$procmux$8829_Y [30], 1'h0, \$procmux$8829_Y [26:23], 23'h00006f }),
    .B({ data_i, \$auto$rtlil.cc:3092:Mux$1274 , \$auto$rtlil.cc:3092:Mux$1280 [63:52], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [46:44], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [42], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [40], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [38], \$auto$rtlil.cc:3092:Mux$1280 [36], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [34:33], \$auto$rtlil.cc:3092:Mux$1280 [33], \$auto$rtlil.cc:3092:Mux$1280 [31:20], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [18], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [16], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [14:4], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [2:1], \$auto$rtlil.cc:3092:Mux$1280 [1], 54'h00000000000000, \$auto$wreduce.cc:514:run$16995 [9:8], 6'h00, \$auto$wreduce.cc:514:run$16995 [1:0] }),
    .S({ \$auto$rtlil.cc:3024:LogicAnd$1255 , \$auto$rtlil.cc:3024:LogicAnd$1271 , \$auto$rtlil.cc:3024:LogicAnd$1277 , \$auto$rtlil.cc:3024:LogicAnd$1283  }),
    .Y(\$procmux$8867_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8900  (
    .A(data_i[63:56]),
    .B(wdata_i[31:24]),
    .S(be_i[3]),
    .Y(\$data_bits[63:56]$132 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8933  (
    .A(data_i[55:48]),
    .B(wdata_i[23:16]),
    .S(be_i[2]),
    .Y(\$data_bits[55:48]$130 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8964  (
    .A(data_i[47:40]),
    .B(wdata_i[15:8]),
    .S(be_i[1]),
    .Y(\$data_bits[47:40]$128 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$8993  (
    .A(data_i[39:32]),
    .B(wdata_i[7:0]),
    .S(be_i[0]),
    .Y(\$data_bits[39:32]$126 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9011  (
    .A(data_i[63:32]),
    .B({ \$data_bits[63:56]$132 , \$data_bits[55:48]$130 , \$data_bits[47:40]$128 , \$data_bits[39:32]$126  }),
    .S(\$124 ),
    .Y(\$data_bits[63:32]$133 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9039  (
    .A(data_i[31:24]),
    .B(wdata_i[31:24]),
    .S(be_i[3]),
    .Y(\$data_bits[31:24]$119 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9070  (
    .A(data_i[23:16]),
    .B(wdata_i[23:16]),
    .S(be_i[2]),
    .Y(\$data_bits[23:16]$117 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9099  (
    .A(data_i[15:8]),
    .B(wdata_i[15:8]),
    .S(be_i[1]),
    .Y(\$data_bits[15:8]$115 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$9126  (
    .A(data_i[7:0]),
    .B(wdata_i[7:0]),
    .S(be_i[0]),
    .Y(\$data_bits[7:0]$113 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9143  (
    .A(data_i[31:0]),
    .B({ \$data_bits[31:24]$119 , \$data_bits[23:16]$117 , \$data_bits[15:8]$115 , \$data_bits[7:0]$113  }),
    .S(\$111 ),
    .Y(\$data_bits[31:0]$120 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9167  (
    .A(data_i),
    .B({ \$data_bits[63:32]$133 , \$data_bits[31:0]$120  }),
    .S(\$auto$rtlil.cc:3024:LogicAnd$1255 ),
    .Y(\$data_bits$139 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9178  (
    .A(\$auto$wreduce.cc:514:run$17000 [0]),
    .B(\$auto$rtlil.cc:3005:Or$16652 [0]),
    .S(\$auto$rtlil.cc:3011:Eq$1237 ),
    .Y(\$auto$wreduce.cc:514:run$16997 [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:250.23-253.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9191  (
    .A(2'h0),
    .B(\$auto$rtlil.cc:3004:And$16640 ),
    .S(\$auto$rtlil.cc:3011:Eq$1221 ),
    .Y(\$halted_aligned$137 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9202  (
    .A(\$auto$rtlil.cc:3005:Or$16650 [0]),
    .B(\$auto$rtlil.cc:3004:And$16644 ),
    .S(\$auto$rtlil.cc:3011:Eq$1237 ),
    .Y(\$auto$wreduce.cc:514:run$16992 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9234  (
    .A(we_i),
    .B(\$auto$rtlil.cc:3024:LogicAnd$1255 ),
    .Y(\$data_valid_o$220 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9248  (
    .A(data_i),
    .B(\$data_bits$139 ),
    .S(we_i),
    .Y(\$data_bits$218 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9255  (
    .A(\$auto$wreduce.cc:514:run$17000 [0]),
    .B(\$auto$wreduce.cc:514:run$16997 [0]),
    .S(we_i),
    .Y(\$auto$wreduce.cc:514:run$16998 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9262  (
    .A(2'h0),
    .B(\$halted_aligned$137 ),
    .S(we_i),
    .Y(\$halted_aligned$216 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9283  (
    .A(we_i),
    .B(\$auto$rtlil.cc:3011:Eq$1252 ),
    .Y(\$exception$213 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9290  (
    .A(we_i),
    .B(\$auto$rtlil.cc:3011:Eq$1236 ),
    .Y(\$going$212 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9296  (
    .A(req_i),
    .B(\$data_valid_o$220 ),
    .Y(data_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9304  (
    .A(data_i),
    .B(\$data_bits$218 ),
    .S(req_i),
    .Y(data_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9308  (
    .A(\$auto$wreduce.cc:514:run$17000 [0]),
    .B(\$auto$wreduce.cc:514:run$16998 [0]),
    .S(req_i),
    .Y(\$auto$wreduce.cc:514:run$16999 [0])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9312  (
    .A(2'h0),
    .B(\$halted_aligned$216 ),
    .S(req_i),
    .Y(halted_aligned)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9324  (
    .A(req_i),
    .B(\$exception$213 ),
    .Y(exception)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9328  (
    .A(req_i),
    .B(\$going$212 ),
    .Y(going)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:243.7-243.42|rtl/riscv-dbg/dm_mem.sv:242.5-244.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9331  (
    .A(resuming_q),
    .B(\$auto$rtlil.cc:3004:And$16648 ),
    .S(clear_resumeack_i),
    .Y(\$auto$wreduce.cc:514:run$17000 [0])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9333  (
    .A(\$procmux$9388_Y ),
    .B(2'h0),
    .S(ndmreset_i),
    .Y(state_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9338  (
    .A(\$go$48 ),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(go)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9343  (
    .A(\$procmux$9370_CMP ),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(resume)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9348  (
    .A({ \$cmderror_o$56 [2:1], 1'h0 }),
    .B(3'h3),
    .S(exception),
    .Y(cmderror_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9352  (
    .A(\$cmderror_valid_o$55 ),
    .B(exception),
    .Y(cmderror_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9356  (
    .A({ \$cmderror_o$51 [2], 1'h0 }),
    .B(2'h1),
    .S(\$54 ),
    .Y(\$cmderror_o$56 [2:1])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9359  (
    .A(\$cmderror_o$51 [2]),
    .B(\$54 ),
    .Y(\$cmderror_valid_o$55 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9365_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$9365_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9370_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$9370_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9376_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$go$48 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9386_CMP0  (
    .A(state_q),
    .Y(\$procmux$9386_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$9388  (
    .A(\$procmux$9400_Y ),
    .B(4'hc),
    .S({ \$go$48 , \$auto$opt_reduce.cc:137:opt_pmux$18435  }),
    .Y(\$procmux$9388_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:160.11-160.28|rtl/riscv-dbg/dm_mem.sv:158.9-161.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9400  (
    .A(2'h1),
    .B(2'h2),
    .S(\$36 ),
    .Y(\$procmux$9400_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9430  (
    .A(cmd_valid_i),
    .B(1'h0),
    .S(\$9 ),
    .Y(\$cmderror_o$14 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9456  (
    .A(\$procmux$9386_CMP ),
    .B(\$cmderror_o$14 [2]),
    .Y(\$cmderror_o$51 [2])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:498.15" */
  \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom  \gen_rom_snd_scratch.i_debug_rom  (
    .addr_i({ 32'h00000000, addr_i }),
    .clk_i(clk_i),
    .rdata_o(rom_rdata),
    .req_i(req_i),
    .rst_ni(rst_ni)
  );
  assign { \$109 [30:10], \$109 [4:0] } = { \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], \$109 [31], addr_i[6:2] };
  assign \$195 [9:0] = { addr_i[9:3], 3'h0 };
  assign { \$abstract_cmd[255:128]$252 [125:96], \$abstract_cmd[255:128]$252 [83:47], \$abstract_cmd[255:128]$252 [43:37], \$abstract_cmd[255:128]$252 [35:31], \$abstract_cmd[255:128]$252 [29:17], \$abstract_cmd[255:128]$252 [15], \$abstract_cmd[255:128]$252 [6:3], \$abstract_cmd[255:128]$252 [1:0] } = { \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 1'h0, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 7'h00, \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 3'h0, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 6'h26, \$abstract_cmd[255:128]$252 [126], 5'h00, \$abstract_cmd[255:128]$252 [126], 5'h00, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 7'h4c, \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], \$abstract_cmd[255:128]$252 [126], 8'h00, \$abstract_cmd[255:128]$252 [126], 1'h0, \$abstract_cmd[255:128]$252 [126], 2'h0, \$abstract_cmd[255:128]$252 [126], 14'h006e, \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], 2'h0, \$abstract_cmd[255:128]$252 [30], 5'h04, \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], \$abstract_cmd[255:128]$252 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$253 [125:96], \$abstract_cmd[255:128]$253 [83:47], \$abstract_cmd[255:128]$253 [43:37], \$abstract_cmd[255:128]$253 [35:31], \$abstract_cmd[255:128]$253 [29:17], \$abstract_cmd[255:128]$253 [15], \$abstract_cmd[255:128]$253 [6:3], \$abstract_cmd[255:128]$253 [1:0] } = { \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 1'h0, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 7'h00, \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 3'h0, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 6'h26, \$abstract_cmd[255:128]$253 [126], 5'h00, \$abstract_cmd[255:128]$253 [126], 5'h00, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 7'h4c, \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], \$abstract_cmd[255:128]$253 [126], 8'h00, \$abstract_cmd[255:128]$253 [126], 1'h0, \$abstract_cmd[255:128]$253 [126], 2'h0, \$abstract_cmd[255:128]$253 [126], 14'h006e, \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], 2'h0, \$abstract_cmd[255:128]$253 [30], 5'h04, \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], \$abstract_cmd[255:128]$253 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$255 [125:96], \$abstract_cmd[255:128]$255 [83:47], \$abstract_cmd[255:128]$255 [43:37], \$abstract_cmd[255:128]$255 [35:31], \$abstract_cmd[255:128]$255 [28:17], \$abstract_cmd[255:128]$255 [15], \$abstract_cmd[255:128]$255 [6:5], \$abstract_cmd[255:128]$255 [3], \$abstract_cmd[255:128]$255 [1:0] } = { \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 7'h00, \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 3'h0, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 6'h26, \$abstract_cmd[255:128]$255 [126], 5'h00, \$abstract_cmd[255:128]$255 [126], 5'h00, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 7'h4c, \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], \$abstract_cmd[255:128]$255 [126], 8'h00, \$abstract_cmd[255:128]$255 [126], 1'h0, \$abstract_cmd[255:128]$255 [126], 2'h0, \$abstract_cmd[255:128]$255 [126], 10'h006, \$abstract_cmd[255:128]$255 [29], \$abstract_cmd[255:128]$255 [29], 1'h0, \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [30], 2'h0, \$abstract_cmd[255:128]$255 [29], 2'h0, \$abstract_cmd[255:128]$255 [30], \$abstract_cmd[255:128]$255 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$278 [125:79], \$abstract_cmd[255:128]$278 [75:69], \$abstract_cmd[255:128]$278 [67:64], \$abstract_cmd[255:128]$278 [51:31], \$abstract_cmd[255:128]$278 [29:25], \$abstract_cmd[255:128]$278 [19:17], \$abstract_cmd[255:128]$278 [15], \$abstract_cmd[255:128]$278 [11:3], \$abstract_cmd[255:128]$278 [1:0] } = { \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 1'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 7'h00, \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 7'h4c, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], 4'h0, \$abstract_cmd[255:128]$278 [126], 1'h0, \$abstract_cmd[255:128]$278 [126], 7'h00, \$abstract_cmd[255:128]$278 [126], 10'h0c0, \$abstract_cmd[255:128]$278 [126], 2'h0, \$abstract_cmd[255:128]$278 [126], 3'h0, \$abstract_cmd[255:128]$278 [126], \$abstract_cmd[255:128]$278 [126], 10'h26e, \$abstract_cmd[255:128]$278 [30], 9'h080, \$abstract_cmd[255:128]$278 [30], 1'h1, \$abstract_cmd[255:128]$278 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$279 [127], \$abstract_cmd[255:128]$279 [125:79], \$abstract_cmd[255:128]$279 [75:69], \$abstract_cmd[255:128]$279 [67:64], \$abstract_cmd[255:128]$279 [51:31], \$abstract_cmd[255:128]$279 [29:25], \$abstract_cmd[255:128]$279 [19:17], \$abstract_cmd[255:128]$279 [15], \$abstract_cmd[255:128]$279 [11:3], \$abstract_cmd[255:128]$279 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 1'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 7'h00, \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 7'h4c, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], 4'h0, \$abstract_cmd[255:128]$279 [126], 1'h0, \$abstract_cmd[255:128]$279 [126], 7'h00, \$abstract_cmd[255:128]$279 [126], 10'h0c0, \$abstract_cmd[255:128]$279 [126], 2'h0, \$abstract_cmd[255:128]$279 [126], 3'h0, \$abstract_cmd[255:128]$279 [126], \$abstract_cmd[255:128]$279 [126], 10'h26e, \$abstract_cmd[255:128]$279 [30], 9'h080, \$abstract_cmd[255:128]$279 [30], 1'h1, \$abstract_cmd[255:128]$279 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$281 [127], \$abstract_cmd[255:128]$281 [125:79], \$abstract_cmd[255:128]$281 [75:69], \$abstract_cmd[255:128]$281 [67:64], \$abstract_cmd[255:128]$281 [51:31], \$abstract_cmd[255:128]$281 [28:25], \$abstract_cmd[255:128]$281 [19:17], \$abstract_cmd[255:128]$281 [15], \$abstract_cmd[255:128]$281 [11:5], \$abstract_cmd[255:128]$281 [3], \$abstract_cmd[255:128]$281 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 1'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 7'h00, \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 7'h4c, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], 4'h0, \$abstract_cmd[255:128]$281 [126], 1'h0, \$abstract_cmd[255:128]$281 [126], 7'h00, \$abstract_cmd[255:128]$281 [126], 10'h0c0, \$abstract_cmd[255:128]$281 [126], 2'h0, \$abstract_cmd[255:128]$281 [126], 3'h0, \$abstract_cmd[255:128]$281 [126], \$abstract_cmd[255:128]$281 [126], 6'h26, \$abstract_cmd[255:128]$281 [29], \$abstract_cmd[255:128]$281 [29], 1'h0, \$abstract_cmd[255:128]$281 [30], 1'h0, \$abstract_cmd[255:128]$281 [29], 7'h00, \$abstract_cmd[255:128]$281 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$292 [127], \$abstract_cmd[255:128]$292 [125:79], \$abstract_cmd[255:128]$292 [75:69], \$abstract_cmd[255:128]$292 [67:64], \$abstract_cmd[255:128]$292 [51:31], \$abstract_cmd[255:128]$292 [28:25], \$abstract_cmd[255:128]$292 [19:17], \$abstract_cmd[255:128]$292 [15], \$abstract_cmd[255:128]$292 [11:5], \$abstract_cmd[255:128]$292 [3], \$abstract_cmd[255:128]$292 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 7'h00, \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 7'h4c, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], 4'h0, \$abstract_cmd[255:128]$292 [126], 1'h0, \$abstract_cmd[255:128]$292 [126], 7'h00, \$abstract_cmd[255:128]$292 [126], 10'h0c0, \$abstract_cmd[255:128]$292 [126], 2'h0, \$abstract_cmd[255:128]$292 [126], 3'h0, \$abstract_cmd[255:128]$292 [126], \$abstract_cmd[255:128]$292 [126], 6'h26, \$abstract_cmd[255:128]$292 [29], \$abstract_cmd[255:128]$292 [29], 1'h0, \$abstract_cmd[255:128]$292 [30], 1'h0, \$abstract_cmd[255:128]$292 [29], 7'h00, \$abstract_cmd[255:128]$292 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$295 [127], \$abstract_cmd[255:128]$295 [125:96], \$abstract_cmd[255:128]$295 [83:81], \$abstract_cmd[255:128]$295 [79], \$abstract_cmd[255:128]$295 [75:71], \$abstract_cmd[255:128]$295 [69], \$abstract_cmd[255:128]$295 [67:64], \$abstract_cmd[255:128]$295 [51:47], \$abstract_cmd[255:128]$295 [43:37], \$abstract_cmd[255:128]$295 [35:31], \$abstract_cmd[255:128]$295 [28:25], \$abstract_cmd[255:128]$295 [19:17], \$abstract_cmd[255:128]$295 [15], \$abstract_cmd[255:128]$295 [6], \$abstract_cmd[255:128]$295 [3], \$abstract_cmd[255:128]$295 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 1'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 2'h0, \$abstract_cmd[255:128]$295 [126], 7'h00, \$abstract_cmd[255:128]$295 [126], 2'h0, \$abstract_cmd[255:128]$295 [126], 3'h0, \$abstract_cmd[255:128]$295 [126], \$abstract_cmd[255:128]$295 [126], 6'h26, \$abstract_cmd[255:128]$295 [126], 7'h00, \$abstract_cmd[255:128]$295 [126], 5'h06, \$abstract_cmd[255:128]$295 [70], 1'h0, \$abstract_cmd[255:128]$295 [70], 2'h0, \$abstract_cmd[255:128]$295 [126], 3'h0, \$abstract_cmd[255:128]$295 [80], \$abstract_cmd[255:128]$295 [80], 5'h06, \$abstract_cmd[255:128]$295 [29], \$abstract_cmd[255:128]$295 [29], 1'h0, \$abstract_cmd[255:128]$295 [30], 1'h0, \$abstract_cmd[255:128]$295 [29], 2'h0, \$abstract_cmd[255:128]$295 [30], 3'h3 };
  assign { \$abstract_cmd[319:288]$301 [31:21], \$abstract_cmd[319:288]$301 [19:0] } = { 24'h000000, \$abstract_cmd[319:288]$301 [20], \$abstract_cmd[319:288]$301 [20], 5'h13 };
  assign \$abstract_cmd[31:0]$254 [29:0] = { \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], 1'h0, \$abstract_cmd[31:0]$254 [30], \$abstract_cmd[31:0]$254 [30], 2'h0, \$abstract_cmd[31:0]$254 [30], 2'h2, \$abstract_cmd[31:0]$254 [30], 1'h0, \$abstract_cmd[31:0]$254 [30], 3'h0, \$abstract_cmd[31:0]$254 [30], 12'h073 };
  assign { \$abstract_cmd[31:0]$291 [31], \$abstract_cmd[31:0]$291 [29:21], \$abstract_cmd[31:0]$291 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], \$abstract_cmd[31:0]$291 [30], 2'h0, \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], 1'h0, \$abstract_cmd[31:0]$291 [30], 3'h0, \$abstract_cmd[31:0]$291 [30], 5'h00, \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20], 2'h0, \$abstract_cmd[31:0]$291 [20], \$abstract_cmd[31:0]$291 [20] };
  assign { \$abstract_cmd[31:0]$294 [31], \$abstract_cmd[31:0]$294 [29:21], \$abstract_cmd[31:0]$294 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], \$abstract_cmd[31:0]$294 [30], 2'h0, \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], 1'h0, \$abstract_cmd[31:0]$294 [30], 3'h0, \$abstract_cmd[31:0]$294 [30], 5'h00, \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20], 2'h0, \$abstract_cmd[31:0]$294 [20], \$abstract_cmd[31:0]$294 [20] };
  assign { \$auto$rtlil.cc:3092:Mux$1280 [51], \$auto$rtlil.cc:3092:Mux$1280 [49:47], \$auto$rtlil.cc:3092:Mux$1280 [43], \$auto$rtlil.cc:3092:Mux$1280 [41], \$auto$rtlil.cc:3092:Mux$1280 [39], \$auto$rtlil.cc:3092:Mux$1280 [37], \$auto$rtlil.cc:3092:Mux$1280 [35], \$auto$rtlil.cc:3092:Mux$1280 [32], \$auto$rtlil.cc:3092:Mux$1280 [19], \$auto$rtlil.cc:3092:Mux$1280 [17], \$auto$rtlil.cc:3092:Mux$1280 [15], \$auto$rtlil.cc:3092:Mux$1280 [3], \$auto$rtlil.cc:3092:Mux$1280 [0] } = { 2'h0, \$auto$rtlil.cc:3092:Mux$1280 [50], 4'h0, \$auto$rtlil.cc:3092:Mux$1280 [38], 1'h0, \$auto$rtlil.cc:3092:Mux$1280 [33], 4'h0, \$auto$rtlil.cc:3092:Mux$1280 [1] };
  assign \$auto$wreduce.cc:514:run$16992 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$16995 [63:10], \$auto$wreduce.cc:514:run$16995 [7:2] } = 60'h000000000000000;
  assign { \$auto$wreduce.cc:514:run$16996 [63:27], \$auto$wreduce.cc:514:run$16996 [25], \$auto$wreduce.cc:514:run$16996 [23:0] } = { 38'h0000000001, \$auto$wreduce.cc:514:run$16996 [24], 23'h00006f };
  assign \$auto$wreduce.cc:514:run$16997 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16998 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$16999 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$17000 [1] = 1'hx;
  assign \$cmderror_o$14 [1:0] = 2'h0;
  assign \$cmderror_o$51 [1:0] = 2'h0;
  assign \$cmderror_o$56 [0] = 1'h0;
  assign { \$procmux$8829_Y [63:31], \$procmux$8829_Y [29:27], \$procmux$8829_Y [22:0] } = { 34'h000000000, \$procmux$8829_Y [30], 24'h00006f };
  assign { abstract_cmd[308:294], abstract_cmd[292:224], abstract_cmd[211:207], abstract_cmd[203:197], abstract_cmd[195:192], abstract_cmd[179:177], abstract_cmd[175], abstract_cmd[171], abstract_cmd[169:166], abstract_cmd[163:153], abstract_cmd[147], abstract_cmd[145], abstract_cmd[143], abstract_cmd[131], abstract_cmd[129:13], abstract_cmd[11:1] } = { abstract_cmd[293], 13'h0000, abstract_cmd[293], 38'h26f6604ae6, abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], 1'h0, abstract_cmd[170], abstract_cmd[170], 2'h0, abstract_cmd[170], 7'h00, abstract_cmd[170], 2'h0, abstract_cmd[170], 3'h0, abstract_cmd[170], abstract_cmd[170], 6'h26, abstract_cmd[170], 1'h0, abstract_cmd[165], 6'h00, abstract_cmd[176], abstract_cmd[170], 5'h06, abstract_cmd[176], 6'h00, abstract_cmd[165], 5'h06, abstract_cmd[134], abstract_cmd[146], abstract_cmd[146], abstract_cmd[146], 1'h0, abstract_cmd[134], 103'h06018a2a26018aaa2600000a2e, abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], 1'h0, abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], abstract_cmd[0], 1'h0, abstract_cmd[12], 1'h0, abstract_cmd[12], 8'h00, abstract_cmd[0], abstract_cmd[0], abstract_cmd[0], 2'h0, abstract_cmd[0] };
  assign ac_ar = cmd_i[23:0];
  assign data_bits = data_o;
  assign debug_req_o = haltreq_i;
  assign fwd_rom_d = addr_i[11];
  assign halted_d_aligned = { 1'hx, halted_d };
  assign halted_o = halted_q;
  assign halted_q_aligned = { 1'h0, halted_q };
  assign haltreq_aligned = { 1'h0, haltreq_i };
  assign hartsel = hartsel_i[0];
  assign progbuf = progbuf_i;
  assign resumereq_aligned = { 1'h0, resumereq_i };
  assign resumereq_wdata_aligned = { 1'h0, resumereq_i };
  assign resuming_d_aligned = { 1'hx, resuming_d };
  assign resuming_o = resuming_q;
  assign resuming_q_aligned = { 1'h0, resuming_q };
  assign rom_addr = { 32'h00000000, addr_i };
  assign wdata_hartsel = wdata_i[0];
endmodule

/* src = "rtl/riscv-dbg/dm_obi_top.sv:63.8" */
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_gnt_o, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_req_o, master_addr_o, master_we_o, master_wdata_o, master_be_o
, master_gnt_i, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o);
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:72.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:78.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:77.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:113.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:112.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:111.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:117.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:116.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:115.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:110.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:81.40" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:99.33" */
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:102.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:105.33" */
  input master_err_i;
  wire master_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:103.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:106.33" */
  input master_other_err_i;
  wire master_other_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:107.33" */
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:98.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:104.33" */
  input master_rvalid_i;
  wire master_rvalid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:101.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:100.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:76.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:74.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:87.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:91.33" */
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:88.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:85.33" */
  output slave_gnt_o;
  wire slave_gnt_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:94.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:83.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:96.33" */
  output [2:0] slave_rid_o;
  wire [2:0] slave_rid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:122.23" */
  wire [2:0] slave_rid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:93.33" */
  output slave_rvalid_o;
  wire slave_rvalid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:121.23" */
  wire slave_rvalid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:89.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:86.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:75.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:80.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17960  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_aid_i),
    .EN(slave_req_i),
    .Q(slave_rid_q)
  );
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$slave_rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_req_i),
    .Q(slave_rvalid_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:130.5" */
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
  assign slave_rid_o = slave_rid_q;
  assign slave_rvalid_o = slave_rvalid_q;
endmodule

/* src = "rtl/riscv-dbg/dm_sba.sv:18.8" */
module \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba (clk_i, rst_ni, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i, sbaddress_o, sbaddress_i, sbdata_o, sbdata_i, dmactive_i, sbaddress_write_valid_i, sbreadonaddr_i, sbautoincrement_i, sbaccess_i
, sbreadondata_i, sbdata_read_valid_i, sbdata_write_valid_i, sbdata_valid_o, sbbusy_o, sberror_valid_o, sberror_o);
  wire [32:0] \$10 ;
  wire [3:0] \$12 ;
  wire [3:0] \$16 ;
  wire [31:0] \$24 ;
  wire \$30 ;
  wire \$34 ;
  wire \$63 ;
  wire \$67 ;
  wire [31:0] \$73 ;
  wire [31:0] \$75 ;
  wire \$77 ;
  wire \$81 ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire \$addr_incr_en$44 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17962 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17964 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17966 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17968 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17970 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16860 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16864 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16904 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16656 ;
  wire [3:0] \$auto$rtlil.cc:3004:And$16658 ;
  wire [2:0] \$procmux$9491_Y ;
  wire \$procmux$9494_Y ;
  wire \$procmux$9497_Y ;
  wire [2:0] \$procmux$9500_Y ;
  wire \$procmux$9512_CMP ;
  wire [2:0] \$procmux$9526_Y ;
  wire \$procmux$9535_Y ;
  wire [2:0] \$procmux$9543_Y ;
  wire \$procmux$9549_Y ;
  wire \$procmux$9575_CMP ;
  wire \$procmux$9649_CMP ;
  wire [2:0] \$procmux$9658_Y ;
  wire \$procmux$9669_CMP ;
  wire [2:0] \$procmux$9675_Y ;
  wire [2:0] \$procmux$9686_Y ;
  wire [2:0] \$procmux$9702_Y ;
  wire \$procmux$9708_Y ;
  wire \$procmux$9743_CMP ;
  wire \$procmux$9746_CMP ;
  wire \$procmux$9748_CMP ;
  wire \$procmux$9749_CMP ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:95.24" */
  wire [31:0] addr_incr;
  /* src = "rtl/riscv-dbg/dm_sba.sv:94.9" */
  wire addr_incr_en;
  /* src = "rtl/riscv-dbg/dm_sba.sv:61.34" */
  wire [31:0] address;
  /* src = "rtl/riscv-dbg/dm_sba.sv:65.34" */
  wire [3:0] be;
  /* src = "rtl/riscv-dbg/dm_sba.sv:67.26" */
  wire [1:0] be_idx;
  /* src = "rtl/riscv-dbg/dm_sba.sv:200.26" */
  wire [1:0] be_idx_masked;
  /* src = "rtl/riscv-dbg/dm_sba.sv:66.34" */
  wire [3:0] be_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:22.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:24.34" */
  input dmactive_i;
  wire dmactive_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:63.34" */
  wire gnt;
  /* src = "rtl/riscv-dbg/dm_sba.sv:27.34" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:30.34" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:31.34" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:33.34" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:34.34" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:35.34" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:32.34" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:26.34" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:29.34" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:28.34" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:62.34" */
  wire req;
  /* src = "rtl/riscv-dbg/dm_sba.sv:23.34" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_sba.sv:43.34" */
  input [2:0] sbaccess_i;
  wire [2:0] sbaccess_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:91.24" */
  wire [31:0] sbaccess_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:37.34" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:41.34" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:38.34" */
  input sbaddress_write_valid_i;
  wire sbaddress_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:42.34" */
  input sbautoincrement_i;
  wire sbautoincrement_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:53.34" */
  output sbbusy_o;
  wire sbbusy_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:46.34" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:50.34" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:47.34" */
  input sbdata_read_valid_i;
  wire sbdata_read_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:51.34" */
  output sbdata_valid_o;
  wire sbdata_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:48.34" */
  input sbdata_write_valid_i;
  wire sbdata_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:55.34" */
  output [2:0] sberror_o;
  wire [2:0] sberror_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:54.34" */
  output sberror_valid_o;
  wire sberror_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:40.34" */
  input sbreadonaddr_i;
  wire sbreadonaddr_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:45.34" */
  input sbreadondata_i;
  wire sbreadondata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.19" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.28" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dm_sba.sv:64.34" */
  wire we;
  \$shift  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$13  (
    .A(2'h3),
    .B(\$10 ),
    .Y(\$12 )
  );
  \$neg  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd33)
  ) \$15  (
    .A({ sbaddress_i[1], 1'h0 }),
    .Y(\$10 )
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$17  (
    .A(2'h3),
    .B(\$10 ),
    .Y(\$16 )
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$21  (
    .A(32'd4294967295),
    .B(sbaccess_i),
    .Y(sbaccess_mask)
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$23  (
    .A(1'h1),
    .B(sbaccess_i),
    .Y(\$24 )
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A(32'd0),
    .B(\$24 ),
    .S(addr_incr_en),
    .Y(addr_incr)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$26  (
    .A(sbaddress_i),
    .B(addr_incr),
    .Y(sbaddress_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(sbaddress_write_valid_i),
    .B(sbreadonaddr_i),
    .Y(\$30 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(sbdata_read_valid_i),
    .B(sbreadondata_i),
    .Y(\$34 )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(sbaccess_i),
    .B(2'h2),
    .Y(\$63 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(state_q),
    .Y(sbbusy_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$63 ),
    .B(sbbusy_o),
    .Y(\$67 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$7  (
    .A(1'h1),
    .S(sbaddress_i[1:0]),
    .Y(\$auto$rtlil.cc:3004:And$16656 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$72  (
    .A(sbaccess_mask),
    .Y(\$73 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$74  (
    .A(sbaddress_i),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .Y(\$77 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(sbbusy_o),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$89  (
    .A(sbaddress_i[1:0]),
    .B(sbaccess_mask[1:0]),
    .Y(be_idx_masked)
  );
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$93  (
    .A(sbdata_i),
    .B({ be_idx_masked, 3'h0 }),
    .Y(master_wdata_o)
  );
  \$shr  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$97  (
    .A(master_r_rdata_i),
    .B({ be_idx_masked, 3'h0 }),
    .Y(sbdata_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:192.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17961  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17970 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17963  (
    .A({ master_we_o, \$81 , \$67 , master_gnt_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17962 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17965  (
    .A({ \$procmux$9649_CMP , \$81 , \$67 , master_gnt_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17964 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17967  (
    .A({ \$auto$opt_reduce.cc:137:opt_pmux$16904 , \$81 , master_r_valid_i, \$67  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17966 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17969  (
    .A({ \$procmux$9669_CMP , sbdata_write_valid_i, \$81 , \$34 , \$30 , \$67  }),
    .B(6'h20),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17968 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17971  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17968 , \$auto$opt_dff.cc:194:make_patterns_logic$17966 , \$auto$opt_dff.cc:194:make_patterns_logic$17964 , \$auto$opt_dff.cc:194:make_patterns_logic$17962  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17970 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16657  (
    .A(\$16 ),
    .B(\$12 ),
    .Y(\$auto$rtlil.cc:3004:And$16658 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16861  (
    .A({ \$procmux$9649_CMP , master_we_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16860 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16863  (
    .A({ \$procmux$9746_CMP , \$procmux$9743_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16864 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16909  (
    .A({ \$procmux$9575_CMP , \$procmux$9512_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16904 )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9475  (
    .A(\$procmux$9491_Y ),
    .B(3'h3),
    .S(\$81 ),
    .Y(sberror_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9479  (
    .A(\$procmux$9494_Y ),
    .B(\$81 ),
    .Y(sberror_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9483  (
    .A(\$procmux$9497_Y ),
    .B(1'h0),
    .S(\$81 ),
    .Y(master_req_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9487  (
    .A(\$procmux$9500_Y ),
    .B(3'h0),
    .S(\$81 ),
    .Y(state_d)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9491  (
    .A({ \$procmux$9702_Y [2:1], \$procmux$9702_Y [2] }),
    .B(3'h4),
    .S(\$67 ),
    .Y(\$procmux$9491_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9494  (
    .A(\$procmux$9708_Y ),
    .B(\$67 ),
    .Y(\$procmux$9494_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9497  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16860 ),
    .B(1'h0),
    .S(\$67 ),
    .Y(\$procmux$9497_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9500  (
    .A(\$procmux$9658_Y ),
    .B(3'h0),
    .S(\$67 ),
    .Y(\$procmux$9500_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9512_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$9512_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9549  (
    .A(master_r_valid_i),
    .B(\$procmux$9535_Y ),
    .Y(\$procmux$9549_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9555  (
    .A(master_r_valid_i),
    .B(sbautoincrement_i),
    .Y(\$addr_incr_en$44 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9575_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$9575_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9591  (
    .A({ master_r_err_i, 1'h0 }),
    .B(2'h3),
    .S(master_r_other_err_i),
    .Y({ \$procmux$9526_Y [1], \$procmux$9526_Y [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9601  (
    .A(master_r_err_i),
    .B(master_r_other_err_i),
    .Y(\$procmux$9535_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9610  (
    .A(2'h0),
    .B({ \$procmux$9526_Y [1], \$procmux$9526_Y [2] }),
    .S(master_r_valid_i),
    .Y({ \$procmux$9543_Y [1], \$procmux$9543_Y [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9641_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(master_we_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9649_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$9649_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$9658  (
    .A(3'h0),
    .B({ 1'h0, \$procmux$9675_Y [1:0], 6'h1c }),
    .S({ \$procmux$9669_CMP , \$procmux$9649_CMP , master_we_o }),
    .Y(\$procmux$9658_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9669_CMP0  (
    .A(state_q),
    .Y(\$procmux$9669_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:121.52-121.71|rtl/riscv-dbg/dm_sba.sv:121.9-121.71" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9675  (
    .A(\$procmux$9686_Y [1:0]),
    .B(2'h1),
    .S(\$34 ),
    .Y(\$procmux$9675_Y [1:0])
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:119.35-119.55|rtl/riscv-dbg/dm_sba.sv:119.9-119.55" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9686  (
    .A(2'h1),
    .B(2'h2),
    .S(sbdata_write_valid_i),
    .Y(\$procmux$9686_Y [1:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9702  (
    .A(2'h0),
    .B({ \$procmux$9543_Y [1], \$procmux$9543_Y [2] }),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16904 ),
    .Y({ \$procmux$9702_Y [1], \$procmux$9702_Y [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9708  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16904 ),
    .B(\$procmux$9549_Y ),
    .Y(\$procmux$9708_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9714  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16904 ),
    .B(\$addr_incr_en$44 ),
    .Y(addr_incr_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$9722  (
    .A(4'h0),
    .B(be_mask),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16860 ),
    .Y(master_be_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9743_CMP0  (
    .A(sbaccess_i),
    .B(2'h2),
    .Y(\$procmux$9743_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$9745  (
    .A(4'h0),
    .B({ \$auto$rtlil.cc:3004:And$16656 , \$auto$rtlil.cc:3004:And$16658 , 4'hf }),
    .S({ \$procmux$9749_CMP , \$procmux$9748_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16864  }),
    .Y(be_mask)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9746_CMP0  (
    .A(sbaccess_i),
    .B(2'h3),
    .Y(\$procmux$9746_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.66|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9748_CMP0  (
    .A(sbaccess_i),
    .B(1'h1),
    .Y(\$procmux$9748_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.30|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$9749_CMP0  (
    .A(sbaccess_i),
    .Y(\$procmux$9749_CMP )
  );
  assign \$procmux$9526_Y [0] = \$procmux$9526_Y [2];
  assign \$procmux$9543_Y [0] = \$procmux$9543_Y [2];
  assign \$procmux$9675_Y [2] = 1'h0;
  assign \$procmux$9686_Y [2] = 1'h0;
  assign \$procmux$9702_Y [0] = \$procmux$9702_Y [2];
  assign address = sbaddress_i;
  assign be = master_be_o;
  assign be_idx = sbaddress_i[1:0];
  assign gnt = master_gnt_i;
  assign master_add_o = sbaddress_i;
  assign req = master_req_o;
  assign sbdata_valid_o = master_r_valid_i;
  assign we = master_we_o;
endmodule

/* src = "rtl/riscv-dbg/dm_top.sv:20.8" */
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i
, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i);
  /* src = "rtl/riscv-dbg/dm_top.sv:85.37" */
  wire clear_resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:30.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:87.37" */
  wire [31:0] cmd;
  /* src = "rtl/riscv-dbg/dm_top.sv:86.37" */
  wire cmd_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:91.37" */
  wire cmdbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:90.37" */
  wire [2:0] cmderror;
  /* src = "rtl/riscv-dbg/dm_top.sv:89.37" */
  wire cmderror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:93.37" */
  wire [63:0] data_csrs_mem;
  /* src = "rtl/riscv-dbg/dm_top.sv:94.37" */
  wire [63:0] data_mem_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:95.37" */
  wire data_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:43.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:42.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:72.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:71.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:70.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:76.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:75.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:74.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:67.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:80.37" */
  wire halted;
  /* src = "rtl/riscv-dbg/dm_top.sv:83.37" */
  wire haltreq;
  /* src = "rtl/riscv-dbg/dm_top.sv:46.39" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:97.37" */
  wire [19:0] hartsel;
  /* src = "rtl/riscv-dbg/dm_top.sv:56.33" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:59.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:60.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:62.33" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:63.33" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:64.33" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:61.33" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:55.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:58.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:57.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:96.37" */
  wire ndmreset;
  /* src = "rtl/riscv-dbg/dm_top.sv:41.33" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:40.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:38.33" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:92.37" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_top.sv:82.37" */
  wire resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:84.37" */
  wire resumereq;
  /* src = "rtl/riscv-dbg/dm_top.sv:32.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:104.37" */
  wire [2:0] sbaccess;
  /* src = "rtl/riscv-dbg/dm_top.sv:99.37" */
  wire [31:0] sbaddress_csrs_sba;
  /* src = "rtl/riscv-dbg/dm_top.sv:100.37" */
  wire [31:0] sbaddress_sba_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:101.37" */
  wire sbaddress_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:103.37" */
  wire sbautoincrement;
  /* src = "rtl/riscv-dbg/dm_top.sv:111.37" */
  wire sbbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:109.37" */
  wire [31:0] sbdata_read;
  /* src = "rtl/riscv-dbg/dm_top.sv:107.37" */
  wire sbdata_read_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:110.37" */
  wire sbdata_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:106.37" */
  wire [31:0] sbdata_write;
  /* src = "rtl/riscv-dbg/dm_top.sv:108.37" */
  wire sbdata_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:113.37" */
  wire [2:0] sberror;
  /* src = "rtl/riscv-dbg/dm_top.sv:112.37" */
  wire sberror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:102.37" */
  wire sbreadonaddr;
  /* src = "rtl/riscv-dbg/dm_top.sv:105.37" */
  wire sbreadondata;
  /* src = "rtl/riscv-dbg/dm_top.sv:50.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:51.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:53.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:48.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:52.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:49.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:39.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:45.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:121.5" */
  \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs  i_dm_csrs (
    .clear_resumeack_o(clear_resumeack),
    .clk_i(clk_i),
    .cmd_o(cmd),
    .cmd_valid_o(cmd_valid),
    .cmdbusy_i(cmdbusy),
    .cmderror_i(cmderror),
    .cmderror_valid_i(cmderror_valid),
    .data_i(data_mem_csrs),
    .data_o(data_csrs_mem),
    .data_valid_i(data_valid),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .halted_i(halted),
    .haltreq_o(haltreq),
    .hartinfo_i(hartinfo_i),
    .hartsel_o(hartsel),
    .ndmreset_ack_i(ndmreset_ack_i),
    .ndmreset_o(ndmreset),
    .next_dm_addr_i(next_dm_addr_i),
    .progbuf_o(progbuf),
    .resumeack_i(resumeack),
    .resumereq_o(resumereq),
    .rst_ni(rst_ni),
    .sbaccess_o(sbaccess),
    .sbaddress_i(sbaddress_sba_csrs),
    .sbaddress_o(sbaddress_csrs_sba),
    .sbaddress_write_valid_o(sbaddress_write_valid),
    .sbautoincrement_o(sbautoincrement),
    .sbbusy_i(sbbusy),
    .sbdata_i(sbdata_read),
    .sbdata_o(sbdata_write),
    .sbdata_read_valid_o(sbdata_read_valid),
    .sbdata_valid_i(sbdata_valid),
    .sbdata_write_valid_o(sbdata_write_valid),
    .sberror_i(sberror),
    .sberror_valid_i(sberror_valid),
    .sbreadonaddr_o(sbreadonaddr),
    .sbreadondata_o(sbreadondata),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:211.5" */
  \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem  i_dm_mem (
    .addr_i(slave_addr_i),
    .be_i(slave_be_i),
    .clear_resumeack_i(clear_resumeack),
    .clk_i(clk_i),
    .cmd_i(cmd),
    .cmd_valid_i(cmd_valid),
    .cmdbusy_o(cmdbusy),
    .cmderror_o(cmderror),
    .cmderror_valid_o(cmderror_valid),
    .data_i(data_csrs_mem),
    .data_o(data_mem_csrs),
    .data_valid_o(data_valid),
    .debug_req_o(debug_req_o),
    .halted_o(halted),
    .haltreq_i(haltreq),
    .hartsel_i(hartsel),
    .ndmreset_i(ndmreset),
    .progbuf_i(progbuf),
    .rdata_o(slave_rdata_o),
    .req_i(slave_req_i),
    .resumereq_i(resumereq),
    .resuming_o(resumeack),
    .rst_ni(rst_ni),
    .wdata_i(slave_wdata_i),
    .we_i(slave_we_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:173.5" */
  \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba  i_dm_sba (
    .clk_i(clk_i),
    .dmactive_i(dmactive_o),
    .master_add_o(master_add_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_r_err_i),
    .master_r_other_err_i(master_r_other_err_i),
    .master_r_rdata_i(master_r_rdata_i),
    .master_r_valid_i(master_r_valid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .rst_ni(rst_ni),
    .sbaccess_i(sbaccess),
    .sbaddress_i(sbaddress_csrs_sba),
    .sbaddress_o(sbaddress_sba_csrs),
    .sbaddress_write_valid_i(sbaddress_write_valid),
    .sbautoincrement_i(sbautoincrement),
    .sbbusy_o(sbbusy),
    .sbdata_i(sbdata_write),
    .sbdata_o(sbdata_read),
    .sbdata_read_valid_i(sbdata_read_valid),
    .sbdata_valid_o(sbdata_valid),
    .sbdata_write_valid_i(sbdata_write_valid),
    .sberror_o(sberror),
    .sberror_valid_o(sberror_valid),
    .sbreadonaddr_i(sbreadonaddr),
    .sbreadondata_i(sbreadondata)
  );
  assign ndmreset_o = ndmreset;
endmodule

/* src = "rtl/riscv-dbg/dmi_cdc.sv:19.8" */
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$1 ;
  wire \$8 ;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:98.28" */
  wire clear_pending_rise_edge_detect;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:35.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:48.28" */
  wire core_clear_pending;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:96.28" */
  wire core_clear_pending_q;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:41.28" */
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:44.28" */
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:39.28" */
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:43.28" */
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:38.28" */
  output core_dmi_rst_no;
  wire core_dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:97.28" */
  wire core_dmi_rst_nq;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:45.28" */
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:40.28" */
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:26.28" */
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:32.28" */
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:24.28" */
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:23.28" */
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:30.28" */
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:25.28" */
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:31.28" */
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:36.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:21.28" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:22.28" */
  input trst_ni;
  wire trst_ni;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(core_clear_pending_q),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(core_clear_pending),
    .Y(clear_pending_rise_edge_detect)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(clear_pending_rise_edge_detect),
    .Y(\$8 )
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_clear_pending_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(core_clear_pending),
    .Q(core_clear_pending_q)
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_dmi_rst_nq  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$8 ),
    .Q(core_dmi_rst_nq)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:50.45" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:72.46" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
  assign core_dmi_rst_no = core_dmi_rst_nq;
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag.sv:19.8" */
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$1 ;
  wire \$17 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$57 ;
  wire \$59 ;
  wire \$65 ;
  wire \$70 ;
  wire \$75 ;
  wire \$78 ;
  wire \$80 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17973 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17975 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17977 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17979 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17981 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17986 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17989 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17993 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18000 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17983 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17995 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18002 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16866 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16912 ;
  wire \$auto$rtlil.cc:2964:ReduceBool$10 ;
  wire \$auto$rtlil.cc:3011:Eq$8 ;
  wire \$auto$rtlil.cc:3011:Eq$9 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire [31:0] \$data_d$36 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire [31:0] \$data_d$53 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  wire [40:0] \$dr_d$100 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  wire [40:0] \$dr_d$101 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  wire [40:0] \$dr_d$102 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  wire [40:0] \$dr_d$103 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  wire [40:0] \$dr_d$104 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  wire [40:0] \$dr_d$105 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  wire [31:0] \$dtmcs_d$11 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  wire [31:0] \$dtmcs_d$7 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  wire [31:0] \$dtmcs_d$8 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  wire [1:0] \$error_d$76 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  wire [1:0] \$error_d$81 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_busy$37 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_busy$41 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_busy$54 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  wire \$error_dmi_busy$60 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  wire \$error_dmi_busy$66 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_op_failed$38 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_op_failed$42 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_op_failed$55 ;
  wire \$procmux$16199_CMP ;
  wire \$procmux$16203_CMP ;
  wire \$procmux$16273_CMP ;
  wire [2:0] \$procmux$16366_Y ;
  wire [2:0] \$procmux$16403_Y ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.15" */
  wire [6:0] address_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.26" */
  wire [6:0] address_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:56.9" */
  wire capture;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:22.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.16" */
  wire [31:0] data_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.24" */
  wire [31:0] data_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:129.10" */
  wire [40:0] dmi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:54.9" */
  wire dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:108.18" */
  wire [40:0] dmi_req;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:29.24" */
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:109.18" */
  wire dmi_req_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:31.24" */
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:110.18" */
  wire dmi_req_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:30.24" */
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:112.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:33.24" */
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:114.18" */
  wire dmi_resp_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:34.24" */
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:113.18" */
  wire dmi_resp_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:35.24" */
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:28.24" */
  output dmi_rst_no;
  wire dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:105.16" */
  wire dmi_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:106.16" */
  wire dmi_tdo;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.28" */
  wire [40:0] dr_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.34" */
  wire [40:0] dr_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.15" */
  wire [31:0] dtmcs_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.24" */
  wire [31:0] dtmcs_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:60.9" */
  wire dtmcs_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.15" */
  wire [1:0] error_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:137.9" */
  wire error_dmi_busy;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.24" */
  wire [1:0] error_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:52.9" */
  wire jtag_dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:23.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:57.9" */
  wire shift;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.11" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.20" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:51.9" */
  wire tck;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:37.24" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:40.24" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:41.24" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:58.9" */
  wire tdi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:42.24" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:24.24" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:38.24" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:39.24" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:55.9" */
  wire update;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(dtmcs_select),
    .B(update),
    .Y(\$1 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(state_q),
    .B(2'h3),
    .Y(\$17 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$18  (
    .A(2'h1),
    .B(2'h2),
    .S(\$17 ),
    .Y(dmi_req[33:32])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(dtmcs_q[17]),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(dmi_select),
    .B(update),
    .Y(\$21 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(error_q),
    .Y(\$23 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$21 ),
    .B(\$23 ),
    .Y(\$25 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(dr_q[1:0]),
    .B(1'h1),
    .Y(\$27 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(dr_q[1:0]),
    .B(2'h2),
    .Y(\$29 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(jtag_dmi_clear),
    .B(\$3 ),
    .Y(dmi_clear)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(state_q),
    .Y(\$57 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(update),
    .B(\$57 ),
    .Y(\$59 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(state_q),
    .B(1'h1),
    .Y(\$auto$rtlil.cc:3011:Eq$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(state_q),
    .B(2'h2),
    .Y(\$auto$rtlil.cc:3011:Eq$9 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A({ \$auto$rtlil.cc:3011:Eq$9 , \$auto$rtlil.cc:3011:Eq$8  }),
    .Y(\$auto$rtlil.cc:2964:ReduceBool$10 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(capture),
    .B(\$auto$rtlil.cc:2964:ReduceBool$10 ),
    .Y(\$65 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$error_dmi_busy$66 ),
    .B(\$23 ),
    .Y(\$70 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$error_dmi_op_failed$55 ),
    .B(\$23 ),
    .Y(\$75 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(update),
    .B(dtmcs_q[16]),
    .Y(\$78 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(\$78 ),
    .B(dtmcs_select),
    .Y(\$80 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(error_dmi_busy),
    .Y(\$93 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$23 ),
    .B(\$93 ),
    .Y(\$95 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(error_q),
    .B(2'h3),
    .Y(\$97 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(\$97 ),
    .B(error_dmi_busy),
    .Y(\$99 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17972  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17983 ),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17985  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(error_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17986 ),
    .Q(error_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17988  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(data_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17995 ),
    .Q(data_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17997  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(address_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18002 ),
    .Q(address_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17974  (
    .A({ \$17 , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17973 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17976  (
    .A({ \$auto$rtlil.cc:3011:Eq$8 , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17975 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17978  (
    .A({ \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$8 , \$17 , dmi_clear, dmi_resp_valid }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17977 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17980  (
    .A({ \$procmux$16203_CMP , \$25 , dmi_clear }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17979 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17982  (
    .A({ \$procmux$16203_CMP , \$29 , \$27 , \$25 , dmi_clear }),
    .B(5'h12),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17981 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17987  (
    .A({ \$80 , \$75 , \$70 , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17986 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17990  (
    .A({ \$auto$rtlil.cc:3011:Eq$9 , dmi_clear, dmi_resp_valid }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17989 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17994  (
    .A({ \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$9 , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17993 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18001  (
    .A({ \$procmux$16203_CMP , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18000 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17984  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17981 , \$auto$opt_dff.cc:194:make_patterns_logic$17979 , \$auto$opt_dff.cc:194:make_patterns_logic$17977 , \$auto$opt_dff.cc:194:make_patterns_logic$17975 , \$auto$opt_dff.cc:194:make_patterns_logic$17973  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17983 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17996  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17993 , \$auto$opt_dff.cc:194:make_patterns_logic$17989 , \$auto$opt_dff.cc:194:make_patterns_logic$17979  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17995 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18003  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18000 , \$auto$opt_dff.cc:194:make_patterns_logic$17979  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18002 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16865  (
    .A({ \$auto$rtlil.cc:3011:Eq$8 , \$17  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16866 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16913  (
    .A({ \$procmux$16199_CMP , \$auto$rtlil.cc:3011:Eq$9  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16912 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(41'h00000000000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd41)
  ) \$driver$dr_q  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dr_d),
    .Q(dr_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$dtmcs_q.abits  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[9:4]),
    .Q(dtmcs_q[9:4])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmihardreset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[17]),
    .Q(dtmcs_q[17])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmireset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[16]),
    .Q(dtmcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$dtmcs_q.dmistat  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[11:10]),
    .Q(dtmcs_q[11:10])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$dtmcs_q.idle  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[14:12]),
    .Q(dtmcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$dtmcs_q.version  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[3:0]),
    .Q(dtmcs_q[3:0])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.zero0  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[15]),
    .Q(dtmcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(14'h0000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd14)
  ) \$driver$dtmcs_q.zero1  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[31:18]),
    .Q(dtmcs_q[31:18])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:254.9-254.30|rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16155  (
    .A({ 1'h1, \$error_d$76 [0] }),
    .B(2'h0),
    .S(\$80 ),
    .Y(\$error_d$81 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:249.9-249.31|rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16165  (
    .A(\$75 ),
    .Y(\$error_d$76 [0])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:241.9-241.31|rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16182  (
    .A(\$error_dmi_busy$60 ),
    .B(\$65 ),
    .Y(\$error_dmi_busy$66 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:234.9-234.31|rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16189  (
    .A(\$error_dmi_busy$54 ),
    .B(\$59 ),
    .Y(\$error_dmi_busy$60 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16199_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16199_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16203_CMP0  (
    .A(state_q),
    .Y(\$procmux$16203_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16211_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$error_dmi_op_failed$38 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16222_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$error_dmi_busy$37 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16241  (
    .A(dmi_resp_valid),
    .B(\$error_dmi_busy$37 ),
    .Y(\$error_dmi_busy$41 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$16270  (
    .A(32'd3131949278),
    .B({ dmi_resp[33:2], 64'hdeadbeefb051b051 }),
    .S({ \$procmux$16273_CMP , \$error_dmi_op_failed$38 , \$error_dmi_busy$37  }),
    .Y(\$data_d$36 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:185.17-185.40|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16273_CMP0  (
    .A(dmi_resp[1:0]),
    .Y(\$procmux$16273_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16312  (
    .A(dmi_resp_valid),
    .B(\$error_dmi_op_failed$38 ),
    .Y(\$error_dmi_op_failed$42 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$16366  (
    .A(3'h0),
    .B({ 1'h0, \$procmux$16403_Y [1], 7'h54 }),
    .S({ \$procmux$16203_CMP , \$auto$rtlil.cc:3011:Eq$8 , \$17  }),
    .Y(\$procmux$16366_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16403  (
    .A(\$27 ),
    .Y(\$procmux$16403_Y [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16453  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16912 ),
    .B(\$error_dmi_op_failed$42 ),
    .Y(\$error_dmi_op_failed$55 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16462  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16912 ),
    .B(\$error_dmi_busy$41 ),
    .Y(\$error_dmi_busy$54 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16473  (
    .A(dr_q[33:2]),
    .B(\$data_d$36 ),
    .S(\$auto$rtlil.cc:3011:Eq$9 ),
    .Y(\$data_d$53 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16508  (
    .A(\$data_d$53 ),
    .B(32'd0),
    .S(dmi_clear),
    .Y(data_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16517  (
    .A(dr_q[40:34]),
    .B(7'h00),
    .S(dmi_clear),
    .Y(address_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16526  (
    .A(\$procmux$16366_Y ),
    .B(3'h0),
    .S(dmi_clear),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16535  (
    .A(\$error_d$81 ),
    .B(2'h0),
    .S(dmi_clear),
    .Y(error_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16553  (
    .A(\$error_dmi_busy$66 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(error_dmi_busy)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16562  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16866 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(dmi_req_valid)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:280.11-280.47|rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16564  (
    .A(\$dr_d$103 ),
    .B({ tdi, dr_q[40:1] }),
    .S(dmi_select),
    .Y(\$dr_d$104 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16573  (
    .A(\$dr_d$103 ),
    .B(\$dr_d$104 ),
    .S(shift),
    .Y(\$dr_d$105 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:273.13-273.49|rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16579  (
    .A(dr_q),
    .B({ address_q, data_q, 2'h3 }),
    .S(\$99 ),
    .Y(\$dr_d$100 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16593  (
    .A(\$dr_d$100 ),
    .B({ address_q, data_q, 2'h0 }),
    .S(\$95 ),
    .Y(\$dr_d$101 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16603  (
    .A(dr_q),
    .B(\$dr_d$101 ),
    .S(dmi_select),
    .Y(\$dr_d$102 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16611  (
    .A(dr_q),
    .B(\$dr_d$102 ),
    .S(capture),
    .Y(\$dr_d$103 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$16619  (
    .A(\$dr_d$105 ),
    .B(41'h00000000000),
    .S(dmi_clear),
    .Y(dr_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.25-89.61|rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16621  (
    .A(\$dtmcs_d$8 ),
    .B({ tdi, dtmcs_q[31:1] }),
    .S(dtmcs_select),
    .Y(\$dtmcs_d$11 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16627  (
    .A(\$dtmcs_d$8 ),
    .B(\$dtmcs_d$11 ),
    .S(shift),
    .Y(dtmcs_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:75.9-84.23|rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16630  (
    .A(dtmcs_q),
    .B({ 20'h00001, error_q, 10'h071 }),
    .S(dtmcs_select),
    .Y(\$dtmcs_d$7 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16635  (
    .A(dtmcs_q),
    .B(\$dtmcs_d$7 ),
    .S(capture),
    .Y(\$dtmcs_d$8 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:331.11" */
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:308.5" */
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dr_q[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$error_d$76 [1] = 1'h1;
  assign { \$procmux$16403_Y [2], \$procmux$16403_Y [0] } = 2'h1;
  assign dmi = dr_q;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
  assign dmi_resp_ready = 1'h1;
  assign dmi_tdo = dr_q[0];
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" */
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$34 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18005 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18008 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16868 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16916 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16918 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16920 ;
  wire \$auto$rtlil.cc:3092:Mux$216 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$217 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  wire \$bypass_d$11 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire \$bypass_d$13 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  wire \$bypass_d$17 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire \$bypass_d$19 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  wire [31:0] \$idcode_d$10 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire [31:0] \$idcode_d$12 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  wire [31:0] \$idcode_d$16 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire [31:0] \$idcode_d$18 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  wire [4:0] \$jtag_ir_shift_d$2 ;
  wire \$procmux$14106_Y ;
  wire \$procmux$14186_CMP ;
  wire \$procmux$14187_CMP ;
  wire \$procmux$14188_CMP ;
  wire \$procmux$14191_CMP ;
  wire \$procmux$14193_CMP ;
  wire \$procmux$14194_CMP ;
  wire \$procmux$14195_CMP ;
  wire \$procmux$14198_CMP ;
  wire \$procmux$14199_CMP ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" */
  wire bypass_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" */
  wire bypass_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.30" */
  wire capture_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" */
  wire capture_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" */
  output capture_o;
  wire capture_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" */
  output dmi_clear_o;
  wire dmi_clear_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" */
  output dmi_select_o;
  wire dmi_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" */
  input dmi_tdo_i;
  wire dmi_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" */
  output dtmcs_select_o;
  wire dtmcs_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" */
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" */
  wire [31:0] idcode_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" */
  wire [31:0] idcode_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" */
  wire idcode_select;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" */
  wire [4:0] jtag_ir_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" */
  wire [4:0] jtag_ir_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" */
  wire [4:0] jtag_ir_shift_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" */
  wire [4:0] jtag_ir_shift_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.20" */
  wire shift_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" */
  wire shift_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" */
  output shift_o;
  wire shift_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" */
  wire [3:0] tap_state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" */
  wire [3:0] tap_state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" */
  wire tck_n;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" */
  wire tck_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" */
  output tck_o;
  wire tck_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" */
  output tdi_o;
  wire tdi_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" */
  wire tdo_mux;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.42" */
  wire test_logic_reset;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.9" */
  wire update_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" */
  wire update_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" */
  output update_o;
  wire update_o;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(shift_ir),
    .B(shift_dr),
    .Y(\$34 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$37  (
    .A(2'h1),
    .B(2'h2),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$217 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(tms_i),
    .Y(\$auto$rtlil.cc:3092:Mux$216 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$18004  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_shift_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18005 ),
    .Q(jtag_ir_shift_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$18007  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18008 ),
    .Q(jtag_ir_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18006  (
    .A({ dmi_clear_o, capture_ir, shift_ir }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18005 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18009  (
    .A({ dmi_clear_o, update_ir }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18008 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16867  (
    .A({ idcode_select, dmi_select_o, dtmcs_select_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16868 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16915  (
    .A({ \$procmux$14199_CMP , update_ir, update_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16916 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16917  (
    .A({ shift_ir, capture_ir }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16918 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16919  (
    .A({ shift_dr, capture_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16920 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$bypass_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(bypass_d),
    .Q(bypass_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd202137011),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$idcode_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(idcode_d),
    .Q(idcode_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$tap_state_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(tap_state_d),
    .Q(tap_state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$td_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(tdo_mux),
    .Q(td_o)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$tdo_oe_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(\$34 ),
    .Q(tdo_oe_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$14106  (
    .A(bypass_q),
    .B({ idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }),
    .S({ idcode_select, dtmcs_select_o, dmi_select_o }),
    .Y(\$procmux$14106_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14107_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(dmi_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14108_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(dtmcs_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14109_CMP0  (
    .A(jtag_ir_q),
    .B(1'h1),
    .Y(idcode_select)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14115  (
    .A(\$procmux$14106_Y ),
    .B(jtag_ir_shift_q[0]),
    .S(shift_ir),
    .Y(tdo_mux)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14138  (
    .A(\$bypass_d$19 ),
    .B(1'h0),
    .S(dmi_clear_o),
    .Y(bypass_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14142  (
    .A(\$idcode_d$18 ),
    .B(32'd202137011),
    .S(dmi_clear_o),
    .Y(idcode_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14146  (
    .A(td_i),
    .B(\$bypass_d$13 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$16868 ),
    .Y(\$bypass_d$17 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14152  (
    .A(\$idcode_d$12 ),
    .B({ td_i, idcode_q[31:1] }),
    .S(idcode_select),
    .Y(\$idcode_d$16 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14159  (
    .A(\$bypass_d$13 ),
    .B(\$bypass_d$17 ),
    .S(shift_dr),
    .Y(\$bypass_d$19 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14164  (
    .A(\$idcode_d$12 ),
    .B(\$idcode_d$16 ),
    .S(shift_dr),
    .Y(\$idcode_d$18 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14167  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16868 ),
    .B(bypass_q),
    .Y(\$bypass_d$11 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14172  (
    .A(idcode_q),
    .B(32'd202137011),
    .S(idcode_select),
    .Y(\$idcode_d$10 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14178  (
    .A(bypass_q),
    .B(\$bypass_d$11 ),
    .S(capture_o),
    .Y(\$bypass_d$13 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14182  (
    .A(idcode_q),
    .B(\$idcode_d$10 ),
    .S(capture_o),
    .Y(\$idcode_d$12 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$pmux  #(
    .S_WIDTH(32'd11),
    .WIDTH(32'd4)
  ) \$procmux$14184  (
    .A({ 3'h0, \$auto$rtlil.cc:3092:Mux$216  }),
    .B({ \$auto$rtlil.cc:3092:Mux$217 [1], 1'h0, \$auto$rtlil.cc:3092:Mux$217 [0], 4'ha, tms_i, \$auto$rtlil.cc:3092:Mux$217 , \$auto$rtlil.cc:3092:Mux$217 [0], 4'h3, tms_i, \$auto$rtlil.cc:3092:Mux$217 , 2'h0, \$auto$rtlil.cc:3092:Mux$216 , 1'h0, \$auto$rtlil.cc:3092:Mux$216 , 2'h1, \$auto$rtlil.cc:3092:Mux$217 , \$auto$rtlil.cc:3092:Mux$217 [0], 2'h3, tms_i, 3'h7, \$auto$rtlil.cc:3092:Mux$217 , 1'h1, tms_i, 4'hc, \$auto$rtlil.cc:3092:Mux$217  }),
    .S({ \$procmux$14198_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16920 , \$procmux$14195_CMP , \$procmux$14194_CMP , \$procmux$14193_CMP , \$procmux$14191_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16918 , \$procmux$14188_CMP , \$procmux$14187_CMP , \$procmux$14186_CMP , \$auto$opt_reduce.cc:137:opt_pmux$16916  }),
    .Y(tap_state_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14185_CMP0  (
    .A(tap_state_q),
    .B(4'hf),
    .Y(update_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14186_CMP0  (
    .A(tap_state_q),
    .B(4'he),
    .Y(\$procmux$14186_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14187_CMP0  (
    .A(tap_state_q),
    .B(4'hd),
    .Y(\$procmux$14187_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14188_CMP0  (
    .A(tap_state_q),
    .B(4'hc),
    .Y(\$procmux$14188_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14189_CMP0  (
    .A(tap_state_q),
    .B(4'hb),
    .Y(shift_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14190_CMP0  (
    .A(tap_state_q),
    .B(4'ha),
    .Y(capture_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14191_CMP0  (
    .A(tap_state_q),
    .B(4'h9),
    .Y(\$procmux$14191_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14192_CMP0  (
    .A(tap_state_q),
    .B(4'h8),
    .Y(update_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14193_CMP0  (
    .A(tap_state_q),
    .B(3'h7),
    .Y(\$procmux$14193_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14194_CMP0  (
    .A(tap_state_q),
    .B(3'h6),
    .Y(\$procmux$14194_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14195_CMP0  (
    .A(tap_state_q),
    .B(3'h5),
    .Y(\$procmux$14195_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14196_CMP0  (
    .A(tap_state_q),
    .B(3'h4),
    .Y(shift_dr)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14197_CMP0  (
    .A(tap_state_q),
    .B(2'h3),
    .Y(capture_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14198_CMP0  (
    .A(tap_state_q),
    .B(2'h2),
    .Y(\$procmux$14198_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14199_CMP0  (
    .A(tap_state_q),
    .B(1'h1),
    .Y(\$procmux$14199_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14200_CMP0  (
    .A(tap_state_q),
    .Y(dmi_clear_o)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14269  (
    .A(jtag_ir_shift_q),
    .B(5'h01),
    .S(dmi_clear_o),
    .Y(jtag_ir_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14274  (
    .A(\$jtag_ir_shift_d$2 ),
    .B(5'h00),
    .S(dmi_clear_o),
    .Y(jtag_ir_shift_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$14283  (
    .A({ td_i, jtag_ir_shift_q[4:1] }),
    .B(5'h05),
    .S(capture_ir),
    .Y(\$jtag_ir_shift_d$2 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" */
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign capture_dr = capture_o;
  assign shift_o = shift_dr;
  assign tck_o = tck_i;
  assign tdi_o = td_i;
  assign test_logic_reset = dmi_clear_o;
  assign update_dr = update_o;
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18011 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18014 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18016 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18021 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18018 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18451 ;
  wire [67:0] \$auto$rtlil.cc:3114:Demux$1672 ;
  wire [1:0] \$procmux$3715_Y ;
  wire \$procmux$3718_Y ;
  wire \$procmux$3721_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [67:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [67:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd34)
  ) \$12  (
    .A(mem_q[33:0]),
    .B(mem_q[67:34]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [33] })
  );
  \$bwmux  #(
    .WIDTH(32'd68)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18451 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18010  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$3718_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18011 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18013  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$3715_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18018 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18020  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$3721_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18021 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$18023  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[67:34]),
    .EN(\$17 ),
    .Q(mem_q[67:34])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$18024  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[33:0]),
    .EN(\$17 ),
    .Q(mem_q[33:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18012  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18011 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18015  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18014 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18017  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18016 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18022  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18021 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18019  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18016 , \$auto$opt_dff.cc:194:make_patterns_logic$18014  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18018 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18450  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18451 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3715  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$3715_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3718  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$3718_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3721  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$3721_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18451 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1672 [66:34], \$auto$rtlil.cc:3114:Demux$1672 [32:0] } = { \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [67], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33], \$auto$rtlil.cc:3114:Demux$1672 [33] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18026 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18029 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18031 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18036 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18033 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18456 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1353 ;
  wire [1:0] \$procmux$8080_Y ;
  wire \$procmux$8083_Y ;
  wire \$procmux$8086_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [1] })
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [1], \$auto$rtlil.cc:3114:Demux$1353 [1] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18456 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18025  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8083_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18026 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18028  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8080_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18033 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18035  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8086_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18036 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18038  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$17 ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18039  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$17 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18027  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18026 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18030  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18029 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18032  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18031 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18037  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18036 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18034  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18031 , \$auto$opt_dff.cc:194:make_patterns_logic$18029  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18033 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18455  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18456 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8080  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$8080_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8083  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$8083_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8086  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$8086_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18456 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1353 [2], \$auto$rtlil.cc:3114:Demux$1353 [0] } = { \$auto$rtlil.cc:3114:Demux$1353 [3], \$auto$rtlil.cc:3114:Demux$1353 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18041 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18044 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18046 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18051 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18048 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18461 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1386 ;
  wire [1:0] \$procmux$8025_Y ;
  wire \$procmux$8028_Y ;
  wire \$procmux$8031_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [1] })
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [1], \$auto$rtlil.cc:3114:Demux$1386 [1] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18461 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18040  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8028_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18041 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18043  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8025_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18048 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18050  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8031_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18051 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18053  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$17 ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18054  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$17 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18042  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18041 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18045  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18044 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18047  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18046 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18052  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18051 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18049  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18046 , \$auto$opt_dff.cc:194:make_patterns_logic$18044  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18048 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18460  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18461 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8025  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$8025_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8028  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$8028_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8031  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$8031_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18461 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1386 [2], \$auto$rtlil.cc:3114:Demux$1386 [0] } = { \$auto$rtlil.cc:3114:Demux$1386 [3], \$auto$rtlil.cc:3114:Demux$1386 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18056 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18059 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18066 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18063 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18466 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1419 ;
  wire [1:0] \$procmux$7970_Y ;
  wire \$procmux$7973_Y ;
  wire \$procmux$7976_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [1] })
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [1], \$auto$rtlil.cc:3114:Demux$1419 [1] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18466 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18055  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7973_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18056 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18058  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7970_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18063 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18065  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7976_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18066 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18068  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$17 ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18069  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$17 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18057  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18056 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18060  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18059 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18062  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18061 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18067  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18066 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18064  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18061 , \$auto$opt_dff.cc:194:make_patterns_logic$18059  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18063 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18465  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18466 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7970  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$7970_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7973  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7973_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7976  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7976_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18466 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1419 [2], \$auto$rtlil.cc:3114:Demux$1419 [0] } = { \$auto$rtlil.cc:3114:Demux$1419 [3], \$auto$rtlil.cc:3114:Demux$1419 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18071 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18074 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18076 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18081 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18078 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18471 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1452 ;
  wire [1:0] \$procmux$7915_Y ;
  wire \$procmux$7918_Y ;
  wire \$procmux$7921_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [1] })
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [1], \$auto$rtlil.cc:3114:Demux$1452 [1] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18471 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18070  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7918_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18071 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18073  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7915_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18078 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18080  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7921_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18081 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18083  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$17 ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18084  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$17 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18072  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18071 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18075  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18074 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18077  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18076 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18082  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18081 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18079  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18076 , \$auto$opt_dff.cc:194:make_patterns_logic$18074  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18078 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18470  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18471 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7915  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$7915_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7918  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7918_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7921  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7921_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18471 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1452 [2], \$auto$rtlil.cc:3114:Demux$1452 [0] } = { \$auto$rtlil.cc:3114:Demux$1452 [3], \$auto$rtlil.cc:3114:Demux$1452 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$15 ;
  wire \$17 ;
  wire \$37 ;
  wire \$39 ;
  wire \$50 ;
  wire \$54 ;
  wire \$58 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18086 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18089 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18091 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18096 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18093 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18476 ;
  wire [3:0] \$auto$rtlil.cc:3114:Demux$1485 ;
  wire [1:0] \$procmux$7860_Y ;
  wire \$procmux$7863_Y ;
  wire \$procmux$7866_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$12  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(full_o),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(push_i),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$22  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [1] })
  );
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$24  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [1], \$auto$rtlil.cc:3114:Demux$1485 [1] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(empty_o),
    .Y(\$37 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(pop_i),
    .B(\$37 ),
    .Y(\$39 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$45  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18476 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(push_i),
    .B(pop_i),
    .Y(\$50 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$50 ),
    .B(\$15 ),
    .Y(\$54 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$54 ),
    .B(\$37 ),
    .Y(\$58 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18085  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7863_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18086 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18088  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7860_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18093 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18095  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$7866_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18096 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18098  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$17 ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18099  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$17 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18087  (
    .A({ flush_i, \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18086 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18090  (
    .A({ flush_i, \$39 , \$58 , \$17  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18089 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18092  (
    .A({ flush_i, \$58  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18091 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18097  (
    .A({ flush_i, \$39  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18096 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18094  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18091 , \$auto$opt_dff.cc:194:make_patterns_logic$18089  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18093 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18475  (
    .A(\$39 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18476 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7860  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$7860_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7863  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7863_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7866  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$7866_Y )
  );
  assign \$auto$rtlil.cc:3092:Mux$18476 [0] = 1'h1;
  assign { \$auto$rtlil.cc:3114:Demux$1485 [2], \$auto$rtlil.cc:3114:Demux$1485 [0] } = { \$auto$rtlil.cc:3114:Demux$1485 [3], \$auto$rtlil.cc:3114:Demux$1485 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$25 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18101 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18104 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18106 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18108 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18481 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$572 ;
  wire [1:0] \$procmux$13825_Y ;
  wire \$procmux$13828_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:3092:Mux$572 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:3092:Mux$572 [2], \$auto$rtlil.cc:3092:Mux$572 [2], \$auto$rtlil.cc:3092:Mux$572 [2] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$42  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18481 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$14 ),
    .Y(\$51 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$34 ),
    .Y(\$55 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18100  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13828_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18101 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18103  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13825_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18108 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18113  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$16 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18102  (
    .A({ flush_i, \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18101 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18105  (
    .A({ \$36 , flush_i, \$55 , \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18104 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18107  (
    .A({ flush_i, \$55  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18106 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18109  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18106 , \$auto$opt_dff.cc:194:make_patterns_logic$18104  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18108 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18480  (
    .A(\$36 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18481 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13825  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$13825_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13828  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$13828_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13852  (
    .A(write_pointer_q),
    .B(\$25 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:3092:Mux$18481 [0] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$572 [1:0] = { \$auto$rtlil.cc:3092:Mux$572 [2], \$auto$rtlil.cc:3092:Mux$572 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$25 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18115 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18118 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18120 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18122 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18486 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$552 ;
  wire [1:0] \$procmux$13982_Y ;
  wire \$procmux$13985_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:3092:Mux$552 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:3092:Mux$552 [2], \$auto$rtlil.cc:3092:Mux$552 [2], \$auto$rtlil.cc:3092:Mux$552 [2] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$42  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18486 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$14 ),
    .Y(\$51 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$34 ),
    .Y(\$55 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18114  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13985_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18115 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18117  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13982_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18122 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18127  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$16 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18116  (
    .A({ flush_i, \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18115 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18119  (
    .A({ \$36 , flush_i, \$55 , \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18118 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18121  (
    .A({ flush_i, \$55  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18120 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18123  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18120 , \$auto$opt_dff.cc:194:make_patterns_logic$18118  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18122 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18485  (
    .A(\$36 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18486 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13982  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$13982_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13985  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$13985_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14009  (
    .A(write_pointer_q),
    .B(\$25 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:3092:Mux$18486 [0] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$552 [1:0] = { \$auto$rtlil.cc:3092:Mux$552 [2], \$auto$rtlil.cc:3092:Mux$552 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$14 ;
  wire \$16 ;
  wire \$25 ;
  wire \$34 ;
  wire \$36 ;
  wire \$47 ;
  wire \$51 ;
  wire \$55 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18129 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18132 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18134 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18136 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18491 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$821 ;
  wire [1:0] \$procmux$13080_Y ;
  wire \$procmux$13083_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(full_o),
    .Y(\$14 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(push_i),
    .B(\$14 ),
    .Y(\$16 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:3092:Mux$821 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$21  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:3092:Mux$821 [2], \$auto$rtlil.cc:3092:Mux$821 [2], \$auto$rtlil.cc:3092:Mux$821 [2] }),
    .Y(mem_n)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$25 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(empty_o),
    .Y(\$34 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(pop_i),
    .B(\$34 ),
    .Y(\$36 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$42  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$18491 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(push_i),
    .B(pop_i),
    .Y(\$47 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$14 ),
    .Y(\$51 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$51 ),
    .B(\$34 ),
    .Y(\$55 )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18128  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13083_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18129 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18131  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$13080_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18136 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18141  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$16 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18130  (
    .A({ flush_i, \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18129 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18133  (
    .A({ \$36 , flush_i, \$55 , \$16  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18132 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18135  (
    .A({ flush_i, \$55  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18134 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18137  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18134 , \$auto$opt_dff.cc:194:make_patterns_logic$18132  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18136 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18490  (
    .A(\$36 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18491 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13080  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$13080_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13083  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$13083_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13107  (
    .A(write_pointer_q),
    .B(\$25 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:3092:Mux$18491 [0] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$821 [1:0] = { \$auto$rtlil.cc:3092:Mux$821 [2], \$auto$rtlil.cc:3092:Mux$821 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/gpio/gpio.sv:12.8" */
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$100 ;
  wire \$1000 ;
  wire \$1005 ;
  wire \$1016 ;
  wire \$1018 ;
  wire \$1021 ;
  wire \$1028 ;
  wire \$1030 ;
  wire \$1032 ;
  wire \$1034 ;
  wire \$1036 ;
  wire \$1038 ;
  wire \$104 ;
  wire \$1040 ;
  wire \$1042 ;
  wire \$1044 ;
  wire \$1046 ;
  wire \$1048 ;
  wire \$1050 ;
  wire \$1052 ;
  wire \$1054 ;
  wire \$1056 ;
  wire \$1058 ;
  wire \$1060 ;
  wire \$1062 ;
  wire \$1064 ;
  wire \$1066 ;
  wire \$1068 ;
  wire \$1070 ;
  wire \$1072 ;
  wire \$1074 ;
  wire \$1076 ;
  wire \$1078 ;
  wire \$1080 ;
  wire \$1082 ;
  wire \$1084 ;
  wire \$1086 ;
  wire \$109 ;
  wire \$120 ;
  wire \$122 ;
  wire \$125 ;
  wire \$13 ;
  wire \$132 ;
  wire \$136 ;
  wire \$141 ;
  wire \$152 ;
  wire \$154 ;
  wire \$157 ;
  wire \$164 ;
  wire \$168 ;
  wire \$173 ;
  wire \$184 ;
  wire \$186 ;
  wire \$189 ;
  wire \$196 ;
  wire \$200 ;
  wire \$205 ;
  wire \$216 ;
  wire \$218 ;
  wire \$221 ;
  wire \$228 ;
  wire \$232 ;
  wire \$237 ;
  wire \$24 ;
  wire \$248 ;
  wire \$250 ;
  wire \$253 ;
  wire \$26 ;
  wire \$260 ;
  wire \$264 ;
  wire \$269 ;
  wire \$280 ;
  wire \$282 ;
  wire \$285 ;
  wire \$29 ;
  wire \$292 ;
  wire \$296 ;
  wire \$301 ;
  wire \$312 ;
  wire \$314 ;
  wire \$317 ;
  wire \$324 ;
  wire \$328 ;
  wire \$333 ;
  wire \$344 ;
  wire \$346 ;
  wire \$349 ;
  wire \$356 ;
  wire \$36 ;
  wire \$360 ;
  wire \$365 ;
  wire \$376 ;
  wire \$378 ;
  wire \$381 ;
  wire \$388 ;
  wire \$392 ;
  wire \$397 ;
  wire \$4 ;
  wire \$40 ;
  wire \$408 ;
  wire \$410 ;
  wire \$413 ;
  wire \$420 ;
  wire \$424 ;
  wire \$429 ;
  wire \$440 ;
  wire \$442 ;
  wire \$445 ;
  wire \$45 ;
  wire \$452 ;
  wire \$456 ;
  wire \$461 ;
  wire \$472 ;
  wire \$474 ;
  wire \$477 ;
  wire \$484 ;
  wire \$488 ;
  wire \$493 ;
  wire \$504 ;
  wire \$506 ;
  wire \$509 ;
  wire \$516 ;
  wire \$520 ;
  wire \$525 ;
  wire \$536 ;
  wire \$538 ;
  wire \$541 ;
  wire \$548 ;
  wire \$552 ;
  wire \$557 ;
  wire \$56 ;
  wire \$568 ;
  wire \$570 ;
  wire \$573 ;
  wire \$58 ;
  wire \$580 ;
  wire \$584 ;
  wire \$589 ;
  wire \$600 ;
  wire \$602 ;
  wire \$605 ;
  wire \$61 ;
  wire \$612 ;
  wire \$616 ;
  wire \$621 ;
  wire \$632 ;
  wire \$634 ;
  wire \$637 ;
  wire \$644 ;
  wire \$648 ;
  wire \$653 ;
  wire \$664 ;
  wire \$666 ;
  wire \$669 ;
  wire \$676 ;
  wire \$68 ;
  wire \$680 ;
  wire \$685 ;
  wire \$696 ;
  wire \$698 ;
  wire \$701 ;
  wire \$708 ;
  wire \$712 ;
  wire \$717 ;
  wire \$72 ;
  wire \$728 ;
  wire \$730 ;
  wire \$733 ;
  wire \$740 ;
  wire \$744 ;
  wire \$749 ;
  wire \$760 ;
  wire \$762 ;
  wire \$765 ;
  wire \$77 ;
  wire \$772 ;
  wire \$776 ;
  wire \$781 ;
  wire \$792 ;
  wire \$794 ;
  wire \$797 ;
  wire \$8 ;
  wire \$804 ;
  wire \$808 ;
  wire \$813 ;
  wire \$824 ;
  wire \$826 ;
  wire \$829 ;
  wire \$836 ;
  wire \$840 ;
  wire \$845 ;
  wire \$856 ;
  wire \$858 ;
  wire \$861 ;
  wire \$868 ;
  wire \$872 ;
  wire \$877 ;
  wire \$88 ;
  wire \$888 ;
  wire \$890 ;
  wire \$893 ;
  wire \$90 ;
  wire \$900 ;
  wire \$904 ;
  wire \$909 ;
  wire \$920 ;
  wire \$922 ;
  wire \$925 ;
  wire \$93 ;
  wire \$932 ;
  wire \$936 ;
  wire \$941 ;
  wire \$952 ;
  wire \$954 ;
  wire \$957 ;
  wire \$964 ;
  wire \$968 ;
  wire \$973 ;
  wire \$984 ;
  wire \$986 ;
  wire \$989 ;
  wire \$996 ;
  /* src = "rtl/gpio/gpio.sv:25.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[0].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[0].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[0].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[0].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[0].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[0].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[10].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[10].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[10].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[10].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[10].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[10].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[11].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[11].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[11].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[11].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[11].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[11].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[12].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[12].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[12].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[12].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[12].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[12].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[13].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[13].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[13].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[13].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[13].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[13].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[14].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[14].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[14].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[14].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[14].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[14].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[15].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[15].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[15].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[15].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[15].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[15].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[16].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[16].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[16].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[16].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[16].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[16].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[17].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[17].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[17].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[17].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[17].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[17].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[18].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[18].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[18].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[18].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[18].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[18].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[19].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[19].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[19].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[19].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[19].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[19].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[1].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[1].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[1].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[1].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[1].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[1].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[20].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[20].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[20].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[20].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[20].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[20].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[21].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[21].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[21].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[21].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[21].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[21].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[22].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[22].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[22].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[22].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[22].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[22].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[23].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[23].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[23].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[23].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[23].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[23].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[24].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[24].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[24].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[24].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[24].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[24].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[25].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[25].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[25].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[25].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[25].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[25].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[26].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[26].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[26].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[26].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[26].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[26].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[27].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[27].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[27].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[27].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[27].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[27].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[28].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[28].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[28].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[28].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[28].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[28].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[29].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[29].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[29].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[29].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[29].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[29].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[2].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[2].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[2].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[2].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[2].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[2].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[30].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[30].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[30].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[30].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[30].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[30].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[31].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[31].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[31].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[31].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[31].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[31].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[3].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[3].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[3].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[3].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[3].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[3].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[4].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[4].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[4].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[4].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[4].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[4].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[5].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[5].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[5].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[5].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[5].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[5].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[6].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[6].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[6].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[6].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[6].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[6].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[7].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[7].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[7].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[7].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[7].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[7].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[8].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[8].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[8].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[8].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[8].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[8].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[9].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[9].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[9].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[9].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[9].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[9].serial_q ;
  /* src = "rtl/gpio/gpio.sv:64.25" */
  wire [31:0] gpio_edge;
  /* src = "rtl/gpio/gpio.sv:30.34" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/gpio/gpio.sv:61.25" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/gpio/gpio.sv:39.34" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/gpio/gpio.sv:65.25" */
  wire [31:0] gpio_intrpt;
  /* src = "rtl/gpio/gpio.sv:67.9" */
  wire gpio_intrpt_pending;
  /* src = "rtl/gpio/gpio.sv:32.34" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/gpio/gpio.sv:36.34" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/gpio/gpio.sv:58.33" */
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio.sv:42.34" */
  output interrupt_o;
  wire interrupt_o;
  /* src = "rtl/gpio/gpio.sv:45.34" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio.sv:47.34" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio.sv:57.33" */
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio.sv:27.34" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1001  (
    .A(\gen_gpios[31].serial_d ),
    .B(\$1000 ),
    .Y(\gen_gpios[31].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1003  (
    .A(\gen_gpios[31].f_edge ),
    .B(\gen_gpios[31].r_edge ),
    .S(reg2hw[217]),
    .Y(gpio_edge[31])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1004  (
    .A(reg2hw[223]),
    .Y(\$1005 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1006  (
    .A(reg2hw[222]),
    .B(\$1005 ),
    .Y(\gen_gpios[31].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1008  (
    .A(reg2hw[222]),
    .B(reg2hw[223]),
    .Y(\gen_gpios[31].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(\$100 ),
    .B(\gen_gpios[3].serial_q ),
    .Y(\gen_gpios[3].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1010  (
    .A(\gen_gpios[31].serial_q ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[159])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1012  (
    .A(reg2hw[221]),
    .B(\gen_gpios[31].is_output ),
    .Y(gpio_o[31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1015  (
    .A(\gen_gpios[31].is_output ),
    .B(reg2hw[220]),
    .Y(\$1016 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1017  (
    .A(reg2hw[221]),
    .Y(\$1018 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1020  (
    .A(gpio_edge[31]),
    .B(reg2hw[219]),
    .Y(\$1021 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1022  (
    .A(\$1021 ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[156])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1027  (
    .A(reg2hw[1]),
    .B(reg2hw[8]),
    .Y(\$1028 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1029  (
    .A(\$1028 ),
    .B(reg2hw[15]),
    .Y(\$1030 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(\gen_gpios[3].serial_q ),
    .Y(\$104 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1031  (
    .A(\$1030 ),
    .B(reg2hw[22]),
    .Y(\$1032 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1033  (
    .A(\$1032 ),
    .B(reg2hw[29]),
    .Y(\$1034 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1035  (
    .A(\$1034 ),
    .B(reg2hw[36]),
    .Y(\$1036 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1037  (
    .A(\$1036 ),
    .B(reg2hw[43]),
    .Y(\$1038 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1039  (
    .A(\$1038 ),
    .B(reg2hw[50]),
    .Y(\$1040 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1041  (
    .A(\$1040 ),
    .B(reg2hw[57]),
    .Y(\$1042 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1043  (
    .A(\$1042 ),
    .B(reg2hw[64]),
    .Y(\$1044 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1045  (
    .A(\$1044 ),
    .B(reg2hw[71]),
    .Y(\$1046 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1047  (
    .A(\$1046 ),
    .B(reg2hw[78]),
    .Y(\$1048 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1049  (
    .A(\$1048 ),
    .B(reg2hw[85]),
    .Y(\$1050 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(\gen_gpios[3].serial_d ),
    .B(\$104 ),
    .Y(\gen_gpios[3].r_edge )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1051  (
    .A(\$1050 ),
    .B(reg2hw[92]),
    .Y(\$1052 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1053  (
    .A(\$1052 ),
    .B(reg2hw[99]),
    .Y(\$1054 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1055  (
    .A(\$1054 ),
    .B(reg2hw[106]),
    .Y(\$1056 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1057  (
    .A(\$1056 ),
    .B(reg2hw[113]),
    .Y(\$1058 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1059  (
    .A(\$1058 ),
    .B(reg2hw[120]),
    .Y(\$1060 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1061  (
    .A(\$1060 ),
    .B(reg2hw[127]),
    .Y(\$1062 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1063  (
    .A(\$1062 ),
    .B(reg2hw[134]),
    .Y(\$1064 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1065  (
    .A(\$1064 ),
    .B(reg2hw[141]),
    .Y(\$1066 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1067  (
    .A(\$1066 ),
    .B(reg2hw[148]),
    .Y(\$1068 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1069  (
    .A(\$1068 ),
    .B(reg2hw[155]),
    .Y(\$1070 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(\gen_gpios[3].f_edge ),
    .B(\gen_gpios[3].r_edge ),
    .S(reg2hw[21]),
    .Y(gpio_edge[3])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1071  (
    .A(\$1070 ),
    .B(reg2hw[162]),
    .Y(\$1072 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1073  (
    .A(\$1072 ),
    .B(reg2hw[169]),
    .Y(\$1074 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1075  (
    .A(\$1074 ),
    .B(reg2hw[176]),
    .Y(\$1076 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1077  (
    .A(\$1076 ),
    .B(reg2hw[183]),
    .Y(\$1078 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1079  (
    .A(\$1078 ),
    .B(reg2hw[190]),
    .Y(\$1080 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(reg2hw[27]),
    .Y(\$109 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1081  (
    .A(\$1080 ),
    .B(reg2hw[197]),
    .Y(\$1082 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1083  (
    .A(\$1082 ),
    .B(reg2hw[204]),
    .Y(\$1084 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1085  (
    .A(\$1084 ),
    .B(reg2hw[211]),
    .Y(\$1086 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1087  (
    .A(\$1086 ),
    .B(reg2hw[218]),
    .Y(interrupt_o)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$11  (
    .A(\gen_gpios[0].f_edge ),
    .B(\gen_gpios[0].r_edge ),
    .S(reg2hw[0]),
    .Y(gpio_edge[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(reg2hw[26]),
    .B(\$109 ),
    .Y(\gen_gpios[3].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(reg2hw[26]),
    .B(reg2hw[27]),
    .Y(\gen_gpios[3].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(\gen_gpios[3].serial_q ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(reg2hw[25]),
    .B(\gen_gpios[3].is_output ),
    .Y(gpio_o[3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\gen_gpios[3].is_output ),
    .B(reg2hw[24]),
    .Y(\$120 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(reg2hw[6]),
    .Y(\$13 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$121  (
    .A(reg2hw[25]),
    .Y(\$122 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(gpio_edge[3]),
    .B(reg2hw[23]),
    .Y(\$125 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(\$125 ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[16])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(\gen_gpios[4].serial_d ),
    .Y(\$132 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(\$132 ),
    .B(\gen_gpios[4].serial_q ),
    .Y(\gen_gpios[4].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(\gen_gpios[4].serial_q ),
    .Y(\$136 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(\gen_gpios[4].serial_d ),
    .B(\$136 ),
    .Y(\gen_gpios[4].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$139  (
    .A(\gen_gpios[4].f_edge ),
    .B(\gen_gpios[4].r_edge ),
    .S(reg2hw[28]),
    .Y(gpio_edge[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(reg2hw[5]),
    .B(\$13 ),
    .Y(\gen_gpios[0].is_input )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(reg2hw[34]),
    .Y(\$141 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(reg2hw[33]),
    .B(\$141 ),
    .Y(\gen_gpios[4].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(reg2hw[33]),
    .B(reg2hw[34]),
    .Y(\gen_gpios[4].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(\gen_gpios[4].serial_q ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(reg2hw[32]),
    .B(\gen_gpios[4].is_output ),
    .Y(gpio_o[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\gen_gpios[4].is_output ),
    .B(reg2hw[31]),
    .Y(\$152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(reg2hw[32]),
    .Y(\$154 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(gpio_edge[4]),
    .B(reg2hw[30]),
    .Y(\$157 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$157 ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[21])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(reg2hw[5]),
    .B(reg2hw[6]),
    .Y(\gen_gpios[0].is_output )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(\gen_gpios[5].serial_d ),
    .Y(\$164 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(\$164 ),
    .B(\gen_gpios[5].serial_q ),
    .Y(\gen_gpios[5].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(\gen_gpios[5].serial_q ),
    .Y(\$168 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(\gen_gpios[5].serial_d ),
    .B(\$168 ),
    .Y(\gen_gpios[5].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$171  (
    .A(\gen_gpios[5].f_edge ),
    .B(\gen_gpios[5].r_edge ),
    .S(reg2hw[35]),
    .Y(gpio_edge[5])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(reg2hw[41]),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(reg2hw[40]),
    .B(\$173 ),
    .Y(\gen_gpios[5].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(reg2hw[40]),
    .B(reg2hw[41]),
    .Y(\gen_gpios[5].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(\gen_gpios[5].serial_q ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_gpios[0].serial_q ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(reg2hw[39]),
    .B(\gen_gpios[5].is_output ),
    .Y(gpio_o[5])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(\gen_gpios[5].is_output ),
    .B(reg2hw[38]),
    .Y(\$184 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(reg2hw[39]),
    .Y(\$186 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(gpio_edge[5]),
    .B(reg2hw[37]),
    .Y(\$189 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(\$189 ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[26])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\gen_gpios[6].serial_d ),
    .Y(\$196 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(\$196 ),
    .B(\gen_gpios[6].serial_q ),
    .Y(\gen_gpios[6].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(\gen_gpios[6].serial_q ),
    .Y(\$200 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(reg2hw[4]),
    .B(\gen_gpios[0].is_output ),
    .Y(gpio_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\gen_gpios[6].serial_d ),
    .B(\$200 ),
    .Y(\gen_gpios[6].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$203  (
    .A(\gen_gpios[6].f_edge ),
    .B(\gen_gpios[6].r_edge ),
    .S(reg2hw[42]),
    .Y(gpio_edge[6])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(reg2hw[48]),
    .Y(\$205 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(reg2hw[47]),
    .B(\$205 ),
    .Y(\gen_gpios[6].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(reg2hw[47]),
    .B(reg2hw[48]),
    .Y(\gen_gpios[6].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(\gen_gpios[6].serial_q ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[34])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(reg2hw[46]),
    .B(\gen_gpios[6].is_output ),
    .Y(gpio_o[6])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$215  (
    .A(\gen_gpios[6].is_output ),
    .B(reg2hw[45]),
    .Y(\$216 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(reg2hw[46]),
    .Y(\$218 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(gpio_edge[6]),
    .B(reg2hw[44]),
    .Y(\$221 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(\$221 ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[31])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$227  (
    .A(\gen_gpios[7].serial_d ),
    .Y(\$228 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$229  (
    .A(\$228 ),
    .B(\gen_gpios[7].serial_q ),
    .Y(\gen_gpios[7].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\gen_gpios[0].is_output ),
    .B(reg2hw[3]),
    .Y(\$24 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$231  (
    .A(\gen_gpios[7].serial_q ),
    .Y(\$232 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(\gen_gpios[7].serial_d ),
    .B(\$232 ),
    .Y(\gen_gpios[7].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$235  (
    .A(\gen_gpios[7].f_edge ),
    .B(\gen_gpios[7].r_edge ),
    .S(reg2hw[49]),
    .Y(gpio_edge[7])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(reg2hw[55]),
    .Y(\$237 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(reg2hw[54]),
    .B(\$237 ),
    .Y(\gen_gpios[7].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(reg2hw[54]),
    .B(reg2hw[55]),
    .Y(\gen_gpios[7].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\gen_gpios[7].serial_q ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[39])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(reg2hw[53]),
    .B(\gen_gpios[7].is_output ),
    .Y(gpio_o[7])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(\gen_gpios[7].is_output ),
    .B(reg2hw[52]),
    .Y(\$248 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(reg2hw[53]),
    .Y(\$250 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(reg2hw[4]),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$252  (
    .A(gpio_edge[7]),
    .B(reg2hw[51]),
    .Y(\$253 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$254  (
    .A(\$253 ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[36])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(\gen_gpios[8].serial_d ),
    .Y(\$260 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(\$260 ),
    .B(\gen_gpios[8].serial_q ),
    .Y(\gen_gpios[8].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$263  (
    .A(\gen_gpios[8].serial_q ),
    .Y(\$264 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(\gen_gpios[8].serial_d ),
    .B(\$264 ),
    .Y(\gen_gpios[8].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$267  (
    .A(\gen_gpios[8].f_edge ),
    .B(\gen_gpios[8].r_edge ),
    .S(reg2hw[56]),
    .Y(gpio_edge[8])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$268  (
    .A(reg2hw[62]),
    .Y(\$269 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$270  (
    .A(reg2hw[61]),
    .B(\$269 ),
    .Y(\gen_gpios[8].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$272  (
    .A(reg2hw[61]),
    .B(reg2hw[62]),
    .Y(\gen_gpios[8].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$274  (
    .A(\gen_gpios[8].serial_q ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[44])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$276  (
    .A(reg2hw[60]),
    .B(\gen_gpios[8].is_output ),
    .Y(gpio_o[8])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$279  (
    .A(\gen_gpios[8].is_output ),
    .B(reg2hw[59]),
    .Y(\$280 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(gpio_edge[0]),
    .B(reg2hw[2]),
    .Y(\$29 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(reg2hw[60]),
    .Y(\$282 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$284  (
    .A(gpio_edge[8]),
    .B(reg2hw[58]),
    .Y(\$285 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$286  (
    .A(\$285 ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[41])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$291  (
    .A(\gen_gpios[9].serial_d ),
    .Y(\$292 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$293  (
    .A(\$292 ),
    .B(\gen_gpios[9].serial_q ),
    .Y(\gen_gpios[9].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$295  (
    .A(\gen_gpios[9].serial_q ),
    .Y(\$296 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(\gen_gpios[9].serial_d ),
    .B(\$296 ),
    .Y(\gen_gpios[9].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$299  (
    .A(\gen_gpios[9].f_edge ),
    .B(\gen_gpios[9].r_edge ),
    .S(reg2hw[63]),
    .Y(gpio_edge[9])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\gen_gpios[0].serial_d ),
    .Y(\$4 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$300  (
    .A(reg2hw[69]),
    .Y(\$301 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(reg2hw[68]),
    .B(\$301 ),
    .Y(\gen_gpios[9].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(reg2hw[68]),
    .B(reg2hw[69]),
    .Y(\gen_gpios[9].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(\gen_gpios[9].serial_q ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[49])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$308  (
    .A(reg2hw[67]),
    .B(\gen_gpios[9].is_output ),
    .Y(gpio_o[9])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$311  (
    .A(\gen_gpios[9].is_output ),
    .B(reg2hw[66]),
    .Y(\$312 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$313  (
    .A(reg2hw[67]),
    .Y(\$314 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$316  (
    .A(gpio_edge[9]),
    .B(reg2hw[65]),
    .Y(\$317 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$318  (
    .A(\$317 ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[46])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$323  (
    .A(\gen_gpios[10].serial_d ),
    .Y(\$324 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$325  (
    .A(\$324 ),
    .B(\gen_gpios[10].serial_q ),
    .Y(\gen_gpios[10].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$327  (
    .A(\gen_gpios[10].serial_q ),
    .Y(\$328 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$329  (
    .A(\gen_gpios[10].serial_d ),
    .B(\$328 ),
    .Y(\gen_gpios[10].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$331  (
    .A(\gen_gpios[10].f_edge ),
    .B(\gen_gpios[10].r_edge ),
    .S(reg2hw[70]),
    .Y(gpio_edge[10])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(reg2hw[76]),
    .Y(\$333 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$334  (
    .A(reg2hw[75]),
    .B(\$333 ),
    .Y(\gen_gpios[10].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$336  (
    .A(reg2hw[75]),
    .B(reg2hw[76]),
    .Y(\gen_gpios[10].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(\gen_gpios[10].serial_q ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[54])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$340  (
    .A(reg2hw[74]),
    .B(\gen_gpios[10].is_output ),
    .Y(gpio_o[10])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$343  (
    .A(\gen_gpios[10].is_output ),
    .B(reg2hw[73]),
    .Y(\$344 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$345  (
    .A(reg2hw[74]),
    .Y(\$346 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$348  (
    .A(gpio_edge[10]),
    .B(reg2hw[72]),
    .Y(\$349 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\gen_gpios[1].serial_d ),
    .Y(\$36 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$350  (
    .A(\$349 ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[51])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$355  (
    .A(\gen_gpios[11].serial_d ),
    .Y(\$356 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$357  (
    .A(\$356 ),
    .B(\gen_gpios[11].serial_q ),
    .Y(\gen_gpios[11].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$359  (
    .A(\gen_gpios[11].serial_q ),
    .Y(\$360 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$361  (
    .A(\gen_gpios[11].serial_d ),
    .B(\$360 ),
    .Y(\gen_gpios[11].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$363  (
    .A(\gen_gpios[11].f_edge ),
    .B(\gen_gpios[11].r_edge ),
    .S(reg2hw[77]),
    .Y(gpio_edge[11])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$364  (
    .A(reg2hw[83]),
    .Y(\$365 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$366  (
    .A(reg2hw[82]),
    .B(\$365 ),
    .Y(\gen_gpios[11].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$368  (
    .A(reg2hw[82]),
    .B(reg2hw[83]),
    .Y(\gen_gpios[11].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(\$36 ),
    .B(\gen_gpios[1].serial_q ),
    .Y(\gen_gpios[1].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$370  (
    .A(\gen_gpios[11].serial_q ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[59])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$372  (
    .A(reg2hw[81]),
    .B(\gen_gpios[11].is_output ),
    .Y(gpio_o[11])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$375  (
    .A(\gen_gpios[11].is_output ),
    .B(reg2hw[80]),
    .Y(\$376 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$377  (
    .A(reg2hw[81]),
    .Y(\$378 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$380  (
    .A(gpio_edge[11]),
    .B(reg2hw[79]),
    .Y(\$381 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$382  (
    .A(\$381 ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[56])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$387  (
    .A(\gen_gpios[12].serial_d ),
    .Y(\$388 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$389  (
    .A(\$388 ),
    .B(\gen_gpios[12].serial_q ),
    .Y(\gen_gpios[12].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_gpios[1].serial_q ),
    .Y(\$40 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$391  (
    .A(\gen_gpios[12].serial_q ),
    .Y(\$392 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$393  (
    .A(\gen_gpios[12].serial_d ),
    .B(\$392 ),
    .Y(\gen_gpios[12].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$395  (
    .A(\gen_gpios[12].f_edge ),
    .B(\gen_gpios[12].r_edge ),
    .S(reg2hw[84]),
    .Y(gpio_edge[12])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$396  (
    .A(reg2hw[90]),
    .Y(\$397 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$398  (
    .A(reg2hw[89]),
    .B(\$397 ),
    .Y(\gen_gpios[12].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$400  (
    .A(reg2hw[89]),
    .B(reg2hw[90]),
    .Y(\gen_gpios[12].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$402  (
    .A(\gen_gpios[12].serial_q ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[64])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$404  (
    .A(reg2hw[88]),
    .B(\gen_gpios[12].is_output ),
    .Y(gpio_o[12])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$407  (
    .A(\gen_gpios[12].is_output ),
    .B(reg2hw[87]),
    .Y(\$408 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$409  (
    .A(reg2hw[88]),
    .Y(\$410 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_gpios[1].serial_d ),
    .B(\$40 ),
    .Y(\gen_gpios[1].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$412  (
    .A(gpio_edge[12]),
    .B(reg2hw[86]),
    .Y(\$413 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$414  (
    .A(\$413 ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[61])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$419  (
    .A(\gen_gpios[13].serial_d ),
    .Y(\$420 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$421  (
    .A(\$420 ),
    .B(\gen_gpios[13].serial_q ),
    .Y(\gen_gpios[13].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$423  (
    .A(\gen_gpios[13].serial_q ),
    .Y(\$424 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$425  (
    .A(\gen_gpios[13].serial_d ),
    .B(\$424 ),
    .Y(\gen_gpios[13].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$427  (
    .A(\gen_gpios[13].f_edge ),
    .B(\gen_gpios[13].r_edge ),
    .S(reg2hw[91]),
    .Y(gpio_edge[13])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$428  (
    .A(reg2hw[97]),
    .Y(\$429 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(\gen_gpios[1].f_edge ),
    .B(\gen_gpios[1].r_edge ),
    .S(reg2hw[7]),
    .Y(gpio_edge[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$430  (
    .A(reg2hw[96]),
    .B(\$429 ),
    .Y(\gen_gpios[13].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$432  (
    .A(reg2hw[96]),
    .B(reg2hw[97]),
    .Y(\gen_gpios[13].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$434  (
    .A(\gen_gpios[13].serial_q ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[69])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$436  (
    .A(reg2hw[95]),
    .B(\gen_gpios[13].is_output ),
    .Y(gpio_o[13])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$439  (
    .A(\gen_gpios[13].is_output ),
    .B(reg2hw[94]),
    .Y(\$440 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(reg2hw[13]),
    .Y(\$45 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$441  (
    .A(reg2hw[95]),
    .Y(\$442 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$444  (
    .A(gpio_edge[13]),
    .B(reg2hw[93]),
    .Y(\$445 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$446  (
    .A(\$445 ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[66])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$451  (
    .A(\gen_gpios[14].serial_d ),
    .Y(\$452 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$453  (
    .A(\$452 ),
    .B(\gen_gpios[14].serial_q ),
    .Y(\gen_gpios[14].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$455  (
    .A(\gen_gpios[14].serial_q ),
    .Y(\$456 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$457  (
    .A(\gen_gpios[14].serial_d ),
    .B(\$456 ),
    .Y(\gen_gpios[14].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$459  (
    .A(\gen_gpios[14].f_edge ),
    .B(\gen_gpios[14].r_edge ),
    .S(reg2hw[98]),
    .Y(gpio_edge[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(reg2hw[12]),
    .B(\$45 ),
    .Y(\gen_gpios[1].is_input )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$460  (
    .A(reg2hw[104]),
    .Y(\$461 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$462  (
    .A(reg2hw[103]),
    .B(\$461 ),
    .Y(\gen_gpios[14].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$464  (
    .A(reg2hw[103]),
    .B(reg2hw[104]),
    .Y(\gen_gpios[14].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$466  (
    .A(\gen_gpios[14].serial_q ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[74])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$468  (
    .A(reg2hw[102]),
    .B(\gen_gpios[14].is_output ),
    .Y(gpio_o[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$471  (
    .A(\gen_gpios[14].is_output ),
    .B(reg2hw[101]),
    .Y(\$472 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$473  (
    .A(reg2hw[102]),
    .Y(\$474 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$476  (
    .A(gpio_edge[14]),
    .B(reg2hw[100]),
    .Y(\$477 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$478  (
    .A(\$477 ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[71])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(reg2hw[12]),
    .B(reg2hw[13]),
    .Y(\gen_gpios[1].is_output )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$483  (
    .A(\gen_gpios[15].serial_d ),
    .Y(\$484 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$485  (
    .A(\$484 ),
    .B(\gen_gpios[15].serial_q ),
    .Y(\gen_gpios[15].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$487  (
    .A(\gen_gpios[15].serial_q ),
    .Y(\$488 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$489  (
    .A(\gen_gpios[15].serial_d ),
    .B(\$488 ),
    .Y(\gen_gpios[15].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$491  (
    .A(\gen_gpios[15].f_edge ),
    .B(\gen_gpios[15].r_edge ),
    .S(reg2hw[105]),
    .Y(gpio_edge[15])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$492  (
    .A(reg2hw[111]),
    .Y(\$493 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$494  (
    .A(reg2hw[110]),
    .B(\$493 ),
    .Y(\gen_gpios[15].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$496  (
    .A(reg2hw[110]),
    .B(reg2hw[111]),
    .Y(\gen_gpios[15].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$498  (
    .A(\gen_gpios[15].serial_q ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[79])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$4 ),
    .B(\gen_gpios[0].serial_q ),
    .Y(\gen_gpios[0].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_gpios[1].serial_q ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[9])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$500  (
    .A(reg2hw[109]),
    .B(\gen_gpios[15].is_output ),
    .Y(gpio_o[15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$503  (
    .A(\gen_gpios[15].is_output ),
    .B(reg2hw[108]),
    .Y(\$504 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$505  (
    .A(reg2hw[109]),
    .Y(\$506 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$508  (
    .A(gpio_edge[15]),
    .B(reg2hw[107]),
    .Y(\$509 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$510  (
    .A(\$509 ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[76])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$515  (
    .A(\gen_gpios[16].serial_d ),
    .Y(\$516 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$517  (
    .A(\$516 ),
    .B(\gen_gpios[16].serial_q ),
    .Y(\gen_gpios[16].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$519  (
    .A(\gen_gpios[16].serial_q ),
    .Y(\$520 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(reg2hw[11]),
    .B(\gen_gpios[1].is_output ),
    .Y(gpio_o[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$521  (
    .A(\gen_gpios[16].serial_d ),
    .B(\$520 ),
    .Y(\gen_gpios[16].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$523  (
    .A(\gen_gpios[16].f_edge ),
    .B(\gen_gpios[16].r_edge ),
    .S(reg2hw[112]),
    .Y(gpio_edge[16])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$524  (
    .A(reg2hw[118]),
    .Y(\$525 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$526  (
    .A(reg2hw[117]),
    .B(\$525 ),
    .Y(\gen_gpios[16].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$528  (
    .A(reg2hw[117]),
    .B(reg2hw[118]),
    .Y(\gen_gpios[16].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$530  (
    .A(\gen_gpios[16].serial_q ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[84])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$532  (
    .A(reg2hw[116]),
    .B(\gen_gpios[16].is_output ),
    .Y(gpio_o[16])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$535  (
    .A(\gen_gpios[16].is_output ),
    .B(reg2hw[115]),
    .Y(\$536 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$537  (
    .A(reg2hw[116]),
    .Y(\$538 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$540  (
    .A(gpio_edge[16]),
    .B(reg2hw[114]),
    .Y(\$541 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$542  (
    .A(\$541 ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[81])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$547  (
    .A(\gen_gpios[17].serial_d ),
    .Y(\$548 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$549  (
    .A(\$548 ),
    .B(\gen_gpios[17].serial_q ),
    .Y(\gen_gpios[17].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_gpios[1].is_output ),
    .B(reg2hw[10]),
    .Y(\$56 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$551  (
    .A(\gen_gpios[17].serial_q ),
    .Y(\$552 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$553  (
    .A(\gen_gpios[17].serial_d ),
    .B(\$552 ),
    .Y(\gen_gpios[17].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$555  (
    .A(\gen_gpios[17].f_edge ),
    .B(\gen_gpios[17].r_edge ),
    .S(reg2hw[119]),
    .Y(gpio_edge[17])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$556  (
    .A(reg2hw[125]),
    .Y(\$557 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$558  (
    .A(reg2hw[124]),
    .B(\$557 ),
    .Y(\gen_gpios[17].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$560  (
    .A(reg2hw[124]),
    .B(reg2hw[125]),
    .Y(\gen_gpios[17].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$562  (
    .A(\gen_gpios[17].serial_q ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[89])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$564  (
    .A(reg2hw[123]),
    .B(\gen_gpios[17].is_output ),
    .Y(gpio_o[17])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$567  (
    .A(\gen_gpios[17].is_output ),
    .B(reg2hw[122]),
    .Y(\$568 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$569  (
    .A(reg2hw[123]),
    .Y(\$570 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(reg2hw[11]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$572  (
    .A(gpio_edge[17]),
    .B(reg2hw[121]),
    .Y(\$573 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$574  (
    .A(\$573 ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[86])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$579  (
    .A(\gen_gpios[18].serial_d ),
    .Y(\$580 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$581  (
    .A(\$580 ),
    .B(\gen_gpios[18].serial_q ),
    .Y(\gen_gpios[18].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$583  (
    .A(\gen_gpios[18].serial_q ),
    .Y(\$584 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$585  (
    .A(\gen_gpios[18].serial_d ),
    .B(\$584 ),
    .Y(\gen_gpios[18].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$587  (
    .A(\gen_gpios[18].f_edge ),
    .B(\gen_gpios[18].r_edge ),
    .S(reg2hw[126]),
    .Y(gpio_edge[18])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$588  (
    .A(reg2hw[132]),
    .Y(\$589 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$590  (
    .A(reg2hw[131]),
    .B(\$589 ),
    .Y(\gen_gpios[18].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$592  (
    .A(reg2hw[131]),
    .B(reg2hw[132]),
    .Y(\gen_gpios[18].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$594  (
    .A(\gen_gpios[18].serial_q ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[94])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$596  (
    .A(reg2hw[130]),
    .B(\gen_gpios[18].is_output ),
    .Y(gpio_o[18])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$599  (
    .A(\gen_gpios[18].is_output ),
    .B(reg2hw[129]),
    .Y(\$600 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(gpio_edge[1]),
    .B(reg2hw[9]),
    .Y(\$61 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$601  (
    .A(reg2hw[130]),
    .Y(\$602 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$604  (
    .A(gpio_edge[18]),
    .B(reg2hw[128]),
    .Y(\$605 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$606  (
    .A(\$605 ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[91])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$611  (
    .A(\gen_gpios[19].serial_d ),
    .Y(\$612 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$613  (
    .A(\$612 ),
    .B(\gen_gpios[19].serial_q ),
    .Y(\gen_gpios[19].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$615  (
    .A(\gen_gpios[19].serial_q ),
    .Y(\$616 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$617  (
    .A(\gen_gpios[19].serial_d ),
    .B(\$616 ),
    .Y(\gen_gpios[19].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$619  (
    .A(\gen_gpios[19].f_edge ),
    .B(\gen_gpios[19].r_edge ),
    .S(reg2hw[133]),
    .Y(gpio_edge[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\$61 ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[6])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$620  (
    .A(reg2hw[139]),
    .Y(\$621 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$622  (
    .A(reg2hw[138]),
    .B(\$621 ),
    .Y(\gen_gpios[19].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$624  (
    .A(reg2hw[138]),
    .B(reg2hw[139]),
    .Y(\gen_gpios[19].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$626  (
    .A(\gen_gpios[19].serial_q ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[99])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$628  (
    .A(reg2hw[137]),
    .B(\gen_gpios[19].is_output ),
    .Y(gpio_o[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$631  (
    .A(\gen_gpios[19].is_output ),
    .B(reg2hw[136]),
    .Y(\$632 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$633  (
    .A(reg2hw[137]),
    .Y(\$634 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$636  (
    .A(gpio_edge[19]),
    .B(reg2hw[135]),
    .Y(\$637 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$638  (
    .A(\$637 ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[96])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$643  (
    .A(\gen_gpios[20].serial_d ),
    .Y(\$644 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$645  (
    .A(\$644 ),
    .B(\gen_gpios[20].serial_q ),
    .Y(\gen_gpios[20].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$647  (
    .A(\gen_gpios[20].serial_q ),
    .Y(\$648 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$649  (
    .A(\gen_gpios[20].serial_d ),
    .B(\$648 ),
    .Y(\gen_gpios[20].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$651  (
    .A(\gen_gpios[20].f_edge ),
    .B(\gen_gpios[20].r_edge ),
    .S(reg2hw[140]),
    .Y(gpio_edge[20])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$652  (
    .A(reg2hw[146]),
    .Y(\$653 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$654  (
    .A(reg2hw[145]),
    .B(\$653 ),
    .Y(\gen_gpios[20].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$656  (
    .A(reg2hw[145]),
    .B(reg2hw[146]),
    .Y(\gen_gpios[20].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$658  (
    .A(\gen_gpios[20].serial_q ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[104])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$660  (
    .A(reg2hw[144]),
    .B(\gen_gpios[20].is_output ),
    .Y(gpio_o[20])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$663  (
    .A(\gen_gpios[20].is_output ),
    .B(reg2hw[143]),
    .Y(\$664 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$665  (
    .A(reg2hw[144]),
    .Y(\$666 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$668  (
    .A(gpio_edge[20]),
    .B(reg2hw[142]),
    .Y(\$669 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\gen_gpios[2].serial_d ),
    .Y(\$68 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$670  (
    .A(\$669 ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[101])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$675  (
    .A(\gen_gpios[21].serial_d ),
    .Y(\$676 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$677  (
    .A(\$676 ),
    .B(\gen_gpios[21].serial_q ),
    .Y(\gen_gpios[21].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$679  (
    .A(\gen_gpios[21].serial_q ),
    .Y(\$680 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$681  (
    .A(\gen_gpios[21].serial_d ),
    .B(\$680 ),
    .Y(\gen_gpios[21].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$683  (
    .A(\gen_gpios[21].f_edge ),
    .B(\gen_gpios[21].r_edge ),
    .S(reg2hw[147]),
    .Y(gpio_edge[21])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$684  (
    .A(reg2hw[153]),
    .Y(\$685 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$686  (
    .A(reg2hw[152]),
    .B(\$685 ),
    .Y(\gen_gpios[21].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$688  (
    .A(reg2hw[152]),
    .B(reg2hw[153]),
    .Y(\gen_gpios[21].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$68 ),
    .B(\gen_gpios[2].serial_q ),
    .Y(\gen_gpios[2].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$690  (
    .A(\gen_gpios[21].serial_q ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[109])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$692  (
    .A(reg2hw[151]),
    .B(\gen_gpios[21].is_output ),
    .Y(gpio_o[21])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$695  (
    .A(\gen_gpios[21].is_output ),
    .B(reg2hw[150]),
    .Y(\$696 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$697  (
    .A(reg2hw[151]),
    .Y(\$698 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\gen_gpios[0].serial_q ),
    .Y(\$8 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$700  (
    .A(gpio_edge[21]),
    .B(reg2hw[149]),
    .Y(\$701 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$702  (
    .A(\$701 ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[106])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$707  (
    .A(\gen_gpios[22].serial_d ),
    .Y(\$708 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$709  (
    .A(\$708 ),
    .B(\gen_gpios[22].serial_q ),
    .Y(\gen_gpios[22].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(\gen_gpios[2].serial_q ),
    .Y(\$72 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$711  (
    .A(\gen_gpios[22].serial_q ),
    .Y(\$712 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$713  (
    .A(\gen_gpios[22].serial_d ),
    .B(\$712 ),
    .Y(\gen_gpios[22].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$715  (
    .A(\gen_gpios[22].f_edge ),
    .B(\gen_gpios[22].r_edge ),
    .S(reg2hw[154]),
    .Y(gpio_edge[22])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$716  (
    .A(reg2hw[160]),
    .Y(\$717 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$718  (
    .A(reg2hw[159]),
    .B(\$717 ),
    .Y(\gen_gpios[22].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$720  (
    .A(reg2hw[159]),
    .B(reg2hw[160]),
    .Y(\gen_gpios[22].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$722  (
    .A(\gen_gpios[22].serial_q ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[114])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$724  (
    .A(reg2hw[158]),
    .B(\gen_gpios[22].is_output ),
    .Y(gpio_o[22])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$727  (
    .A(\gen_gpios[22].is_output ),
    .B(reg2hw[157]),
    .Y(\$728 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$729  (
    .A(reg2hw[158]),
    .Y(\$730 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\gen_gpios[2].serial_d ),
    .B(\$72 ),
    .Y(\gen_gpios[2].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$732  (
    .A(gpio_edge[22]),
    .B(reg2hw[156]),
    .Y(\$733 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$734  (
    .A(\$733 ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[111])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$739  (
    .A(\gen_gpios[23].serial_d ),
    .Y(\$740 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$741  (
    .A(\$740 ),
    .B(\gen_gpios[23].serial_q ),
    .Y(\gen_gpios[23].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$743  (
    .A(\gen_gpios[23].serial_q ),
    .Y(\$744 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$745  (
    .A(\gen_gpios[23].serial_d ),
    .B(\$744 ),
    .Y(\gen_gpios[23].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$747  (
    .A(\gen_gpios[23].f_edge ),
    .B(\gen_gpios[23].r_edge ),
    .S(reg2hw[161]),
    .Y(gpio_edge[23])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$748  (
    .A(reg2hw[167]),
    .Y(\$749 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(\gen_gpios[2].f_edge ),
    .B(\gen_gpios[2].r_edge ),
    .S(reg2hw[14]),
    .Y(gpio_edge[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$750  (
    .A(reg2hw[166]),
    .B(\$749 ),
    .Y(\gen_gpios[23].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$752  (
    .A(reg2hw[166]),
    .B(reg2hw[167]),
    .Y(\gen_gpios[23].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$754  (
    .A(\gen_gpios[23].serial_q ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[119])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$756  (
    .A(reg2hw[165]),
    .B(\gen_gpios[23].is_output ),
    .Y(gpio_o[23])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$759  (
    .A(\gen_gpios[23].is_output ),
    .B(reg2hw[164]),
    .Y(\$760 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(reg2hw[20]),
    .Y(\$77 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$761  (
    .A(reg2hw[165]),
    .Y(\$762 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$764  (
    .A(gpio_edge[23]),
    .B(reg2hw[163]),
    .Y(\$765 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$766  (
    .A(\$765 ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[116])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$771  (
    .A(\gen_gpios[24].serial_d ),
    .Y(\$772 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$773  (
    .A(\$772 ),
    .B(\gen_gpios[24].serial_q ),
    .Y(\gen_gpios[24].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$775  (
    .A(\gen_gpios[24].serial_q ),
    .Y(\$776 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$777  (
    .A(\gen_gpios[24].serial_d ),
    .B(\$776 ),
    .Y(\gen_gpios[24].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$779  (
    .A(\gen_gpios[24].f_edge ),
    .B(\gen_gpios[24].r_edge ),
    .S(reg2hw[168]),
    .Y(gpio_edge[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(reg2hw[19]),
    .B(\$77 ),
    .Y(\gen_gpios[2].is_input )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$780  (
    .A(reg2hw[174]),
    .Y(\$781 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$782  (
    .A(reg2hw[173]),
    .B(\$781 ),
    .Y(\gen_gpios[24].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$784  (
    .A(reg2hw[173]),
    .B(reg2hw[174]),
    .Y(\gen_gpios[24].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$786  (
    .A(\gen_gpios[24].serial_q ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[124])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$788  (
    .A(reg2hw[172]),
    .B(\gen_gpios[24].is_output ),
    .Y(gpio_o[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$791  (
    .A(\gen_gpios[24].is_output ),
    .B(reg2hw[171]),
    .Y(\$792 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$793  (
    .A(reg2hw[172]),
    .Y(\$794 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$796  (
    .A(gpio_edge[24]),
    .B(reg2hw[170]),
    .Y(\$797 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$798  (
    .A(\$797 ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[121])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(reg2hw[19]),
    .B(reg2hw[20]),
    .Y(\gen_gpios[2].is_output )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$803  (
    .A(\gen_gpios[25].serial_d ),
    .Y(\$804 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$805  (
    .A(\$804 ),
    .B(\gen_gpios[25].serial_q ),
    .Y(\gen_gpios[25].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$807  (
    .A(\gen_gpios[25].serial_q ),
    .Y(\$808 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$809  (
    .A(\gen_gpios[25].serial_d ),
    .B(\$808 ),
    .Y(\gen_gpios[25].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$811  (
    .A(\gen_gpios[25].f_edge ),
    .B(\gen_gpios[25].r_edge ),
    .S(reg2hw[175]),
    .Y(gpio_edge[25])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$812  (
    .A(reg2hw[181]),
    .Y(\$813 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$814  (
    .A(reg2hw[180]),
    .B(\$813 ),
    .Y(\gen_gpios[25].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$816  (
    .A(reg2hw[180]),
    .B(reg2hw[181]),
    .Y(\gen_gpios[25].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$818  (
    .A(\gen_gpios[25].serial_q ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[129])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_gpios[2].serial_q ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$820  (
    .A(reg2hw[179]),
    .B(\gen_gpios[25].is_output ),
    .Y(gpio_o[25])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$823  (
    .A(\gen_gpios[25].is_output ),
    .B(reg2hw[178]),
    .Y(\$824 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$825  (
    .A(reg2hw[179]),
    .Y(\$826 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$828  (
    .A(gpio_edge[25]),
    .B(reg2hw[177]),
    .Y(\$829 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$830  (
    .A(\$829 ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[126])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$835  (
    .A(\gen_gpios[26].serial_d ),
    .Y(\$836 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$837  (
    .A(\$836 ),
    .B(\gen_gpios[26].serial_q ),
    .Y(\gen_gpios[26].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$839  (
    .A(\gen_gpios[26].serial_q ),
    .Y(\$840 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(reg2hw[18]),
    .B(\gen_gpios[2].is_output ),
    .Y(gpio_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$841  (
    .A(\gen_gpios[26].serial_d ),
    .B(\$840 ),
    .Y(\gen_gpios[26].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$843  (
    .A(\gen_gpios[26].f_edge ),
    .B(\gen_gpios[26].r_edge ),
    .S(reg2hw[182]),
    .Y(gpio_edge[26])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$844  (
    .A(reg2hw[188]),
    .Y(\$845 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$846  (
    .A(reg2hw[187]),
    .B(\$845 ),
    .Y(\gen_gpios[26].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$848  (
    .A(reg2hw[187]),
    .B(reg2hw[188]),
    .Y(\gen_gpios[26].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$850  (
    .A(\gen_gpios[26].serial_q ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[134])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$852  (
    .A(reg2hw[186]),
    .B(\gen_gpios[26].is_output ),
    .Y(gpio_o[26])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$855  (
    .A(\gen_gpios[26].is_output ),
    .B(reg2hw[185]),
    .Y(\$856 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$857  (
    .A(reg2hw[186]),
    .Y(\$858 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$860  (
    .A(gpio_edge[26]),
    .B(reg2hw[184]),
    .Y(\$861 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$862  (
    .A(\$861 ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[131])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$867  (
    .A(\gen_gpios[27].serial_d ),
    .Y(\$868 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$869  (
    .A(\$868 ),
    .B(\gen_gpios[27].serial_q ),
    .Y(\gen_gpios[27].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\gen_gpios[2].is_output ),
    .B(reg2hw[17]),
    .Y(\$88 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$871  (
    .A(\gen_gpios[27].serial_q ),
    .Y(\$872 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$873  (
    .A(\gen_gpios[27].serial_d ),
    .B(\$872 ),
    .Y(\gen_gpios[27].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$875  (
    .A(\gen_gpios[27].f_edge ),
    .B(\gen_gpios[27].r_edge ),
    .S(reg2hw[189]),
    .Y(gpio_edge[27])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$876  (
    .A(reg2hw[195]),
    .Y(\$877 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$878  (
    .A(reg2hw[194]),
    .B(\$877 ),
    .Y(\gen_gpios[27].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$880  (
    .A(reg2hw[194]),
    .B(reg2hw[195]),
    .Y(\gen_gpios[27].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$882  (
    .A(\gen_gpios[27].serial_q ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[139])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$884  (
    .A(reg2hw[193]),
    .B(\gen_gpios[27].is_output ),
    .Y(gpio_o[27])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$887  (
    .A(\gen_gpios[27].is_output ),
    .B(reg2hw[192]),
    .Y(\$888 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$889  (
    .A(reg2hw[193]),
    .Y(\$890 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(reg2hw[18]),
    .Y(\$90 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$892  (
    .A(gpio_edge[27]),
    .B(reg2hw[191]),
    .Y(\$893 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$894  (
    .A(\$893 ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[136])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$899  (
    .A(\gen_gpios[28].serial_d ),
    .Y(\$900 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\gen_gpios[0].serial_d ),
    .B(\$8 ),
    .Y(\gen_gpios[0].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$901  (
    .A(\$900 ),
    .B(\gen_gpios[28].serial_q ),
    .Y(\gen_gpios[28].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$903  (
    .A(\gen_gpios[28].serial_q ),
    .Y(\$904 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$905  (
    .A(\gen_gpios[28].serial_d ),
    .B(\$904 ),
    .Y(\gen_gpios[28].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$907  (
    .A(\gen_gpios[28].f_edge ),
    .B(\gen_gpios[28].r_edge ),
    .S(reg2hw[196]),
    .Y(gpio_edge[28])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$908  (
    .A(reg2hw[202]),
    .Y(\$909 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$910  (
    .A(reg2hw[201]),
    .B(\$909 ),
    .Y(\gen_gpios[28].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$912  (
    .A(reg2hw[201]),
    .B(reg2hw[202]),
    .Y(\gen_gpios[28].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$914  (
    .A(\gen_gpios[28].serial_q ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[144])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$916  (
    .A(reg2hw[200]),
    .B(\gen_gpios[28].is_output ),
    .Y(gpio_o[28])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$919  (
    .A(\gen_gpios[28].is_output ),
    .B(reg2hw[199]),
    .Y(\$920 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(gpio_edge[2]),
    .B(reg2hw[16]),
    .Y(\$93 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$921  (
    .A(reg2hw[200]),
    .Y(\$922 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$924  (
    .A(gpio_edge[28]),
    .B(reg2hw[198]),
    .Y(\$925 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$926  (
    .A(\$925 ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[141])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$931  (
    .A(\gen_gpios[29].serial_d ),
    .Y(\$932 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$933  (
    .A(\$932 ),
    .B(\gen_gpios[29].serial_q ),
    .Y(\gen_gpios[29].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$935  (
    .A(\gen_gpios[29].serial_q ),
    .Y(\$936 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$937  (
    .A(\gen_gpios[29].serial_d ),
    .B(\$936 ),
    .Y(\gen_gpios[29].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$939  (
    .A(\gen_gpios[29].f_edge ),
    .B(\gen_gpios[29].r_edge ),
    .S(reg2hw[203]),
    .Y(gpio_edge[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$93 ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[11])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$940  (
    .A(reg2hw[209]),
    .Y(\$941 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$942  (
    .A(reg2hw[208]),
    .B(\$941 ),
    .Y(\gen_gpios[29].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$944  (
    .A(reg2hw[208]),
    .B(reg2hw[209]),
    .Y(\gen_gpios[29].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$946  (
    .A(\gen_gpios[29].serial_q ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[149])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$948  (
    .A(reg2hw[207]),
    .B(\gen_gpios[29].is_output ),
    .Y(gpio_o[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$951  (
    .A(\gen_gpios[29].is_output ),
    .B(reg2hw[206]),
    .Y(\$952 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$953  (
    .A(reg2hw[207]),
    .Y(\$954 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$956  (
    .A(gpio_edge[29]),
    .B(reg2hw[205]),
    .Y(\$957 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$958  (
    .A(\$957 ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[146])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$963  (
    .A(\gen_gpios[30].serial_d ),
    .Y(\$964 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$965  (
    .A(\$964 ),
    .B(\gen_gpios[30].serial_q ),
    .Y(\gen_gpios[30].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$967  (
    .A(\gen_gpios[30].serial_q ),
    .Y(\$968 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$969  (
    .A(\gen_gpios[30].serial_d ),
    .B(\$968 ),
    .Y(\gen_gpios[30].r_edge )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$971  (
    .A(\gen_gpios[30].f_edge ),
    .B(\gen_gpios[30].r_edge ),
    .S(reg2hw[210]),
    .Y(gpio_edge[30])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$972  (
    .A(reg2hw[216]),
    .Y(\$973 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$974  (
    .A(reg2hw[215]),
    .B(\$973 ),
    .Y(\gen_gpios[30].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$976  (
    .A(reg2hw[215]),
    .B(reg2hw[216]),
    .Y(\gen_gpios[30].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$978  (
    .A(\gen_gpios[30].serial_q ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[154])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$980  (
    .A(reg2hw[214]),
    .B(\gen_gpios[30].is_output ),
    .Y(gpio_o[30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$983  (
    .A(\gen_gpios[30].is_output ),
    .B(reg2hw[213]),
    .Y(\$984 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$985  (
    .A(reg2hw[214]),
    .Y(\$986 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$988  (
    .A(gpio_edge[30]),
    .B(reg2hw[212]),
    .Y(\$989 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_gpios[3].serial_d ),
    .Y(\$100 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$990  (
    .A(\$989 ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[151])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$995  (
    .A(\gen_gpios[31].serial_d ),
    .Y(\$996 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$997  (
    .A(\$996 ),
    .B(\gen_gpios[31].serial_q ),
    .Y(\gen_gpios[31].f_edge )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$999  (
    .A(\gen_gpios[31].serial_q ),
    .Y(\$1000 )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[0].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[0].serial_d ),
    .Q(\gen_gpios[0].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[10].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[10].serial_d ),
    .Q(\gen_gpios[10].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[11].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[11].serial_d ),
    .Q(\gen_gpios[11].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[12].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[12].serial_d ),
    .Q(\gen_gpios[12].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[13].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[13].serial_d ),
    .Q(\gen_gpios[13].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[14].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[14].serial_d ),
    .Q(\gen_gpios[14].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[15].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[15].serial_d ),
    .Q(\gen_gpios[15].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[16].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[16].serial_d ),
    .Q(\gen_gpios[16].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[17].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[17].serial_d ),
    .Q(\gen_gpios[17].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[18].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[18].serial_d ),
    .Q(\gen_gpios[18].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[19].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[19].serial_d ),
    .Q(\gen_gpios[19].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[1].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[1].serial_d ),
    .Q(\gen_gpios[1].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[20].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[20].serial_d ),
    .Q(\gen_gpios[20].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[21].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[21].serial_d ),
    .Q(\gen_gpios[21].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[22].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[22].serial_d ),
    .Q(\gen_gpios[22].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[23].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[23].serial_d ),
    .Q(\gen_gpios[23].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[24].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[24].serial_d ),
    .Q(\gen_gpios[24].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[25].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[25].serial_d ),
    .Q(\gen_gpios[25].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[26].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[26].serial_d ),
    .Q(\gen_gpios[26].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[27].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[27].serial_d ),
    .Q(\gen_gpios[27].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[28].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[28].serial_d ),
    .Q(\gen_gpios[28].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[29].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[29].serial_d ),
    .Q(\gen_gpios[29].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[2].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[2].serial_d ),
    .Q(\gen_gpios[2].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[30].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[30].serial_d ),
    .Q(\gen_gpios[30].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[31].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[31].serial_d ),
    .Q(\gen_gpios[31].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[3].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[3].serial_d ),
    .Q(\gen_gpios[3].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[4].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[4].serial_d ),
    .Q(\gen_gpios[4].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[5].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[5].serial_d ),
    .Q(\gen_gpios[5].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[6].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[6].serial_d ),
    .Q(\gen_gpios[6].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[7].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[7].serial_d ),
    .Q(\gen_gpios[7].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[8].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[8].serial_d ),
    .Q(\gen_gpios[8].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[9].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[9].serial_d ),
    .Q(\gen_gpios[9].serial_q )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14863  (
    .A(2'h0),
    .B({ \$506 , 1'h1 }),
    .S(\$504 ),
    .Y(hw2reg[78:77])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14865  (
    .A(2'h0),
    .B({ \$762 , 1'h1 }),
    .S(\$760 ),
    .Y(hw2reg[118:117])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14867  (
    .A(2'h0),
    .B({ \$474 , 1'h1 }),
    .S(\$472 ),
    .Y(hw2reg[73:72])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14869  (
    .A(2'h0),
    .B({ \$890 , 1'h1 }),
    .S(\$888 ),
    .Y(hw2reg[138:137])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14871  (
    .A(2'h0),
    .B({ \$442 , 1'h1 }),
    .S(\$440 ),
    .Y(hw2reg[68:67])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14873  (
    .A(2'h0),
    .B({ \$730 , 1'h1 }),
    .S(\$728 ),
    .Y(hw2reg[113:112])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14875  (
    .A(2'h0),
    .B({ \$410 , 1'h1 }),
    .S(\$408 ),
    .Y(hw2reg[63:62])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14877  (
    .A(2'h0),
    .B({ \$954 , 1'h1 }),
    .S(\$952 ),
    .Y(hw2reg[148:147])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14879  (
    .A(2'h0),
    .B({ \$378 , 1'h1 }),
    .S(\$376 ),
    .Y(hw2reg[58:57])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14881  (
    .A(2'h0),
    .B({ \$698 , 1'h1 }),
    .S(\$696 ),
    .Y(hw2reg[108:107])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14883  (
    .A(2'h0),
    .B({ \$346 , 1'h1 }),
    .S(\$344 ),
    .Y(hw2reg[53:52])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14885  (
    .A(2'h0),
    .B({ \$858 , 1'h1 }),
    .S(\$856 ),
    .Y(hw2reg[133:132])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14887  (
    .A(2'h0),
    .B({ \$314 , 1'h1 }),
    .S(\$312 ),
    .Y(hw2reg[48:47])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14889  (
    .A(2'h0),
    .B({ \$666 , 1'h1 }),
    .S(\$664 ),
    .Y(hw2reg[103:102])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14891  (
    .A(2'h0),
    .B({ \$282 , 1'h1 }),
    .S(\$280 ),
    .Y(hw2reg[43:42])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14893  (
    .A(2'h0),
    .B({ \$986 , 1'h1 }),
    .S(\$984 ),
    .Y(hw2reg[153:152])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14895  (
    .A(2'h0),
    .B({ \$250 , 1'h1 }),
    .S(\$248 ),
    .Y(hw2reg[38:37])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14897  (
    .A(2'h0),
    .B({ \$634 , 1'h1 }),
    .S(\$632 ),
    .Y(hw2reg[98:97])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14899  (
    .A(2'h0),
    .B({ \$218 , 1'h1 }),
    .S(\$216 ),
    .Y(hw2reg[33:32])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14901  (
    .A(2'h0),
    .B({ \$826 , 1'h1 }),
    .S(\$824 ),
    .Y(hw2reg[128:127])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14903  (
    .A(2'h0),
    .B({ \$186 , 1'h1 }),
    .S(\$184 ),
    .Y(hw2reg[28:27])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14905  (
    .A(2'h0),
    .B({ \$602 , 1'h1 }),
    .S(\$600 ),
    .Y(hw2reg[93:92])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14907  (
    .A(2'h0),
    .B({ \$154 , 1'h1 }),
    .S(\$152 ),
    .Y(hw2reg[23:22])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14909  (
    .A(2'h0),
    .B({ \$922 , 1'h1 }),
    .S(\$920 ),
    .Y(hw2reg[143:142])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14911  (
    .A(2'h0),
    .B({ \$122 , 1'h1 }),
    .S(\$120 ),
    .Y(hw2reg[18:17])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14913  (
    .A(2'h0),
    .B({ \$570 , 1'h1 }),
    .S(\$568 ),
    .Y(hw2reg[88:87])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14915  (
    .A(2'h0),
    .B({ \$90 , 1'h1 }),
    .S(\$88 ),
    .Y(hw2reg[13:12])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14917  (
    .A(2'h0),
    .B({ \$794 , 1'h1 }),
    .S(\$792 ),
    .Y(hw2reg[123:122])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14919  (
    .A(2'h0),
    .B({ \$58 , 1'h1 }),
    .S(\$56 ),
    .Y(hw2reg[8:7])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14921  (
    .A(2'h0),
    .B({ \$538 , 1'h1 }),
    .S(\$536 ),
    .Y(hw2reg[83:82])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14923  (
    .A(2'h0),
    .B({ \$26 , 1'h1 }),
    .S(\$24 ),
    .Y(hw2reg[3:2])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14925  (
    .A(2'h0),
    .B({ \$1018 , 1'h1 }),
    .S(\$1016 ),
    .Y(hw2reg[158:157])
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  /* src = "rtl/gpio/gpio.sv:74.5" */
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:156], hw2reg[156], hw2reg[154:151], hw2reg[151], hw2reg[149:146], hw2reg[146], hw2reg[144:141], hw2reg[141], hw2reg[139:136], hw2reg[136], hw2reg[134:131], hw2reg[131], hw2reg[129:126], hw2reg[126], hw2reg[124:121], hw2reg[121], hw2reg[119:116], hw2reg[116], hw2reg[114:111], hw2reg[111], hw2reg[109:106], hw2reg[106], hw2reg[104:101], hw2reg[101], hw2reg[99:96], hw2reg[96], hw2reg[94:91], hw2reg[91], hw2reg[89:86], hw2reg[86], hw2reg[84:81], hw2reg[81], hw2reg[79:76], hw2reg[76], hw2reg[74:71], hw2reg[71], hw2reg[69:66], hw2reg[66], hw2reg[64:61], hw2reg[61], hw2reg[59:56], hw2reg[56], hw2reg[54:51], hw2reg[51], hw2reg[49:46], hw2reg[46], hw2reg[44:41], hw2reg[41], hw2reg[39:36], hw2reg[36], hw2reg[34:31], hw2reg[31], hw2reg[29:26], hw2reg[26], hw2reg[24:21], hw2reg[21], hw2reg[19:16], hw2reg[16], hw2reg[14:11], hw2reg[11], hw2reg[9:6], hw2reg[6], hw2reg[4:1], hw2reg[1] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_intrpt = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
  assign gpio_intrpt_pending = interrupt_o;
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[155], hw2reg[150], hw2reg[145], hw2reg[140], hw2reg[135], hw2reg[130], hw2reg[125], hw2reg[120], hw2reg[115], hw2reg[110], hw2reg[105], hw2reg[100], hw2reg[95], hw2reg[90], hw2reg[85], hw2reg[80], hw2reg[75], hw2reg[70], hw2reg[65], hw2reg[60], hw2reg[55], hw2reg[50], hw2reg[45], hw2reg[40], hw2reg[35], hw2reg[30], hw2reg[25], hw2reg[20], hw2reg[15], hw2reg[10], hw2reg[5], hw2reg[0] } = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
endmodule

/* src = "rtl/gpio/gpio_reg_top.sv:12.8" */
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$159 ;
  wire [31:0] \$161 ;
  wire [31:0] \$163 ;
  wire [31:0] \$165 ;
  wire [31:0] \$169 ;
  wire [31:0] \$173 ;
  wire [31:0] \$177 ;
  wire [31:0] \$181 ;
  wire [31:0] \$187 ;
  wire [31:0] \$191 ;
  wire [31:0] \$195 ;
  wire [31:0] \$199 ;
  wire \$2 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18143 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18146 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18149 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18152 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16870 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16872 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire \$obi_err$206 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire \$obi_err$213 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$obi_rdata$214 ;
  wire \$procmux$13252_CMP ;
  wire \$procmux$13253_CMP ;
  wire \$procmux$13254_CMP ;
  wire \$procmux$13255_CMP ;
  wire \$procmux$13256_CMP ;
  wire \$procmux$13257_CMP ;
  wire \$procmux$13258_CMP ;
  wire \$procmux$13259_CMP ;
  wire [31:0] \$procmux$13265_Y ;
  wire \$procmux$13302_CMP ;
  wire \$procmux$13311_CMP ;
  wire [31:0] \$procmux$13317_Y ;
  wire \$procmux$13318_CMP ;
  wire [31:0] \$procmux$13325_Y ;
  wire \$procmux$13326_CMP ;
  wire \$procmux$13332_CMP ;
  wire \$procmux$13337_CMP ;
  wire \$procmux$13341_Y ;
  /* src = "rtl/gpio/gpio_reg_top.sv:117.32" */
  wire [31:0] bit_mask;
  /* src = "rtl/gpio/gpio_reg_top.sv:23.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:37.43" */
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.35" */
  wire id_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.41" */
  wire id_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:113.25" */
  wire [31:0] new_intrpt;
  /* src = "rtl/gpio/gpio_reg_top.sv:108.21" */
  wire [255:0] new_reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:51.35" */
  wire obi_err;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.35" */
  wire [31:0] obi_rdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.35" */
  wire obi_read_request;
  /* src = "rtl/gpio/gpio_reg_top.sv:29.23" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:31.22" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.46" */
  wire [31:0] obi_wdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.53" */
  wire obi_write_request;
  wire [9:0] read_addr_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:49.48" */
  wire [11:0] read_addr_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:35.42" */
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.21" */
  wire [255:0] reg_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.28" */
  wire [255:0] reg_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.35" */
  wire req_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.42" */
  wire req_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:25.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/gpio/gpio_reg_top.sv:114.25" */
  wire [31:0] toggle_out;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.35" */
  wire valid_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.44" */
  wire valid_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.35" */
  wire w_err_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.44" */
  wire w_err_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.35" */
  wire we_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.41" */
  wire we_q;
  wire [9:0] write_addr;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(we_q),
    .Y(\$2 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(hw2reg[85]),
    .B(hw2reg[86]),
    .Y(new_intrpt[17])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$102  (
    .A(reg_q[146]),
    .B(hw2reg[93]),
    .S(hw2reg[92]),
    .Y(new_reg[146])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$103  (
    .A(reg_q[50]),
    .B(hw2reg[91]),
    .S(hw2reg[90]),
    .Y(new_reg[50])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(hw2reg[90]),
    .B(hw2reg[91]),
    .Y(new_intrpt[18])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$106  (
    .A(reg_q[147]),
    .B(hw2reg[98]),
    .S(hw2reg[97]),
    .Y(new_reg[147])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$107  (
    .A(reg_q[51]),
    .B(hw2reg[96]),
    .S(hw2reg[95]),
    .Y(new_reg[51])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(hw2reg[95]),
    .B(hw2reg[96]),
    .Y(new_intrpt[19])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$110  (
    .A(reg_q[148]),
    .B(hw2reg[103]),
    .S(hw2reg[102]),
    .Y(new_reg[148])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$111  (
    .A(reg_q[52]),
    .B(hw2reg[101]),
    .S(hw2reg[100]),
    .Y(new_reg[52])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(hw2reg[100]),
    .B(hw2reg[101]),
    .Y(new_intrpt[20])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$114  (
    .A(reg_q[149]),
    .B(hw2reg[108]),
    .S(hw2reg[107]),
    .Y(new_reg[149])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$115  (
    .A(reg_q[53]),
    .B(hw2reg[106]),
    .S(hw2reg[105]),
    .Y(new_reg[53])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(hw2reg[105]),
    .B(hw2reg[106]),
    .Y(new_intrpt[21])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$118  (
    .A(reg_q[150]),
    .B(hw2reg[113]),
    .S(hw2reg[112]),
    .Y(new_reg[150])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$119  (
    .A(reg_q[54]),
    .B(hw2reg[111]),
    .S(hw2reg[110]),
    .Y(new_reg[54])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(hw2reg[110]),
    .B(hw2reg[111]),
    .Y(new_intrpt[22])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$122  (
    .A(reg_q[151]),
    .B(hw2reg[118]),
    .S(hw2reg[117]),
    .Y(new_reg[151])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$123  (
    .A(reg_q[55]),
    .B(hw2reg[116]),
    .S(hw2reg[115]),
    .Y(new_reg[55])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(hw2reg[115]),
    .B(hw2reg[116]),
    .Y(new_intrpt[23])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$126  (
    .A(reg_q[152]),
    .B(hw2reg[123]),
    .S(hw2reg[122]),
    .Y(new_reg[152])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$127  (
    .A(reg_q[56]),
    .B(hw2reg[121]),
    .S(hw2reg[120]),
    .Y(new_reg[56])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(hw2reg[120]),
    .B(hw2reg[121]),
    .Y(new_intrpt[24])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$130  (
    .A(reg_q[153]),
    .B(hw2reg[128]),
    .S(hw2reg[127]),
    .Y(new_reg[153])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$131  (
    .A(reg_q[57]),
    .B(hw2reg[126]),
    .S(hw2reg[125]),
    .Y(new_reg[57])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(hw2reg[125]),
    .B(hw2reg[126]),
    .Y(new_intrpt[25])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$134  (
    .A(reg_q[154]),
    .B(hw2reg[133]),
    .S(hw2reg[132]),
    .Y(new_reg[154])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$135  (
    .A(reg_q[58]),
    .B(hw2reg[131]),
    .S(hw2reg[130]),
    .Y(new_reg[58])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(hw2reg[130]),
    .B(hw2reg[131]),
    .Y(new_intrpt[26])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$138  (
    .A(reg_q[155]),
    .B(hw2reg[138]),
    .S(hw2reg[137]),
    .Y(new_reg[155])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$139  (
    .A(reg_q[59]),
    .B(hw2reg[136]),
    .S(hw2reg[135]),
    .Y(new_reg[59])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(hw2reg[135]),
    .B(hw2reg[136]),
    .Y(new_intrpt[27])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$142  (
    .A(reg_q[156]),
    .B(hw2reg[143]),
    .S(hw2reg[142]),
    .Y(new_reg[156])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$143  (
    .A(reg_q[60]),
    .B(hw2reg[141]),
    .S(hw2reg[140]),
    .Y(new_reg[60])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(hw2reg[140]),
    .B(hw2reg[141]),
    .Y(new_intrpt[28])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$146  (
    .A(reg_q[157]),
    .B(hw2reg[148]),
    .S(hw2reg[147]),
    .Y(new_reg[157])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$147  (
    .A(reg_q[61]),
    .B(hw2reg[146]),
    .S(hw2reg[145]),
    .Y(new_reg[61])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(hw2reg[145]),
    .B(hw2reg[146]),
    .Y(new_intrpt[29])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$150  (
    .A(reg_q[158]),
    .B(hw2reg[153]),
    .S(hw2reg[152]),
    .Y(new_reg[158])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$151  (
    .A(reg_q[62]),
    .B(hw2reg[151]),
    .S(hw2reg[150]),
    .Y(new_reg[62])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(hw2reg[150]),
    .B(hw2reg[151]),
    .Y(new_intrpt[30])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$154  (
    .A(reg_q[159]),
    .B(hw2reg[158]),
    .S(hw2reg[157]),
    .Y(new_reg[159])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$155  (
    .A(reg_q[63]),
    .B(hw2reg[156]),
    .S(hw2reg[155]),
    .Y(new_reg[63])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(hw2reg[155]),
    .B(hw2reg[156]),
    .Y(new_intrpt[31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$160  (
    .A({ \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] }),
    .B(reg_q[255:224]),
    .Y(\$161 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$162  (
    .A({ obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] }),
    .B(obi_req_i[36:5]),
    .Y(\$163 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$164  (
    .A(\$161 ),
    .B(\$163 ),
    .Y(\$165 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$168  (
    .A({ \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] }),
    .B(reg_q[223:192]),
    .Y(\$169 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$172  (
    .A(\$169 ),
    .B(\$163 ),
    .Y(\$173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$176  (
    .A({ \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] }),
    .B(new_reg[159:128]),
    .Y(\$177 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$180  (
    .A(\$177 ),
    .B(\$163 ),
    .Y(\$181 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$186  (
    .A({ \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] }),
    .B(reg_q[95:64]),
    .Y(\$187 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$190  (
    .A(\$187 ),
    .B(\$163 ),
    .Y(\$191 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$194  (
    .A({ \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] }),
    .B(reg_q[31:0]),
    .Y(\$195 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$198  (
    .A(\$195 ),
    .B(\$163 ),
    .Y(\$199 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(req_q),
    .B(\$2 ),
    .Y(obi_read_request)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(reg_q[128]),
    .B(hw2reg[3]),
    .S(hw2reg[2]),
    .Y(new_reg[128])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$31  (
    .A(reg_q[32]),
    .B(hw2reg[1]),
    .S(hw2reg[0]),
    .Y(new_reg[32])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(hw2reg[0]),
    .B(hw2reg[1]),
    .Y(new_intrpt[0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$34  (
    .A(reg_q[129]),
    .B(hw2reg[8]),
    .S(hw2reg[7]),
    .Y(new_reg[129])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$35  (
    .A(reg_q[33]),
    .B(hw2reg[6]),
    .S(hw2reg[5]),
    .Y(new_reg[33])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(hw2reg[5]),
    .B(hw2reg[6]),
    .Y(new_intrpt[1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$38  (
    .A(reg_q[130]),
    .B(hw2reg[13]),
    .S(hw2reg[12]),
    .Y(new_reg[130])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$39  (
    .A(reg_q[34]),
    .B(hw2reg[11]),
    .S(hw2reg[10]),
    .Y(new_reg[34])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(hw2reg[10]),
    .B(hw2reg[11]),
    .Y(new_intrpt[2])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$42  (
    .A(reg_q[131]),
    .B(hw2reg[18]),
    .S(hw2reg[17]),
    .Y(new_reg[131])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(reg_q[35]),
    .B(hw2reg[16]),
    .S(hw2reg[15]),
    .Y(new_reg[35])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(hw2reg[15]),
    .B(hw2reg[16]),
    .Y(new_intrpt[3])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$46  (
    .A(reg_q[132]),
    .B(hw2reg[23]),
    .S(hw2reg[22]),
    .Y(new_reg[132])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$47  (
    .A(reg_q[36]),
    .B(hw2reg[21]),
    .S(hw2reg[20]),
    .Y(new_reg[36])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(hw2reg[20]),
    .B(hw2reg[21]),
    .Y(new_intrpt[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_req_i[41]),
    .Y(obi_write_request)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$50  (
    .A(reg_q[133]),
    .B(hw2reg[28]),
    .S(hw2reg[27]),
    .Y(new_reg[133])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$51  (
    .A(reg_q[37]),
    .B(hw2reg[26]),
    .S(hw2reg[25]),
    .Y(new_reg[37])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(hw2reg[25]),
    .B(hw2reg[26]),
    .Y(new_intrpt[5])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$54  (
    .A(reg_q[134]),
    .B(hw2reg[33]),
    .S(hw2reg[32]),
    .Y(new_reg[134])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$55  (
    .A(reg_q[38]),
    .B(hw2reg[31]),
    .S(hw2reg[30]),
    .Y(new_reg[38])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(hw2reg[30]),
    .B(hw2reg[31]),
    .Y(new_intrpt[6])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$58  (
    .A(reg_q[135]),
    .B(hw2reg[38]),
    .S(hw2reg[37]),
    .Y(new_reg[135])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$59  (
    .A(reg_q[39]),
    .B(hw2reg[36]),
    .S(hw2reg[35]),
    .Y(new_reg[39])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(hw2reg[35]),
    .B(hw2reg[36]),
    .Y(new_intrpt[7])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$62  (
    .A(reg_q[136]),
    .B(hw2reg[43]),
    .S(hw2reg[42]),
    .Y(new_reg[136])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$63  (
    .A(reg_q[40]),
    .B(hw2reg[41]),
    .S(hw2reg[40]),
    .Y(new_reg[40])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(hw2reg[40]),
    .B(hw2reg[41]),
    .Y(new_intrpt[8])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$66  (
    .A(reg_q[137]),
    .B(hw2reg[48]),
    .S(hw2reg[47]),
    .Y(new_reg[137])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$67  (
    .A(reg_q[41]),
    .B(hw2reg[46]),
    .S(hw2reg[45]),
    .Y(new_reg[41])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(hw2reg[45]),
    .B(hw2reg[46]),
    .Y(new_intrpt[9])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$70  (
    .A(reg_q[138]),
    .B(hw2reg[53]),
    .S(hw2reg[52]),
    .Y(new_reg[138])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$71  (
    .A(reg_q[42]),
    .B(hw2reg[51]),
    .S(hw2reg[50]),
    .Y(new_reg[42])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(hw2reg[50]),
    .B(hw2reg[51]),
    .Y(new_intrpt[10])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$74  (
    .A(reg_q[139]),
    .B(hw2reg[58]),
    .S(hw2reg[57]),
    .Y(new_reg[139])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(reg_q[43]),
    .B(hw2reg[56]),
    .S(hw2reg[55]),
    .Y(new_reg[43])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(hw2reg[55]),
    .B(hw2reg[56]),
    .Y(new_intrpt[11])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$78  (
    .A(reg_q[140]),
    .B(hw2reg[63]),
    .S(hw2reg[62]),
    .Y(new_reg[140])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(reg_q[44]),
    .B(hw2reg[61]),
    .S(hw2reg[60]),
    .Y(new_reg[44])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(hw2reg[60]),
    .B(hw2reg[61]),
    .Y(new_intrpt[12])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(reg_q[141]),
    .B(hw2reg[68]),
    .S(hw2reg[67]),
    .Y(new_reg[141])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$83  (
    .A(reg_q[45]),
    .B(hw2reg[66]),
    .S(hw2reg[65]),
    .Y(new_reg[45])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(hw2reg[65]),
    .B(hw2reg[66]),
    .Y(new_intrpt[13])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$86  (
    .A(reg_q[142]),
    .B(hw2reg[73]),
    .S(hw2reg[72]),
    .Y(new_reg[142])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$87  (
    .A(reg_q[46]),
    .B(hw2reg[71]),
    .S(hw2reg[70]),
    .Y(new_reg[46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(hw2reg[70]),
    .B(hw2reg[71]),
    .Y(new_intrpt[14])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$90  (
    .A(reg_q[143]),
    .B(hw2reg[78]),
    .S(hw2reg[77]),
    .Y(new_reg[143])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$91  (
    .A(reg_q[47]),
    .B(hw2reg[76]),
    .S(hw2reg[75]),
    .Y(new_reg[47])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(hw2reg[75]),
    .B(hw2reg[76]),
    .Y(new_intrpt[15])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$94  (
    .A(reg_q[144]),
    .B(hw2reg[83]),
    .S(hw2reg[82]),
    .Y(new_reg[144])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$95  (
    .A(reg_q[48]),
    .B(hw2reg[81]),
    .S(hw2reg[80]),
    .Y(new_reg[48])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(hw2reg[80]),
    .B(hw2reg[81]),
    .Y(new_intrpt[16])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$98  (
    .A(reg_q[145]),
    .B(hw2reg[88]),
    .S(hw2reg[87]),
    .Y(new_reg[145])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$99  (
    .A(reg_q[49]),
    .B(hw2reg[86]),
    .S(hw2reg[85]),
    .Y(new_reg[49])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18142  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$191 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18143 ),
    .Q(reg_q[95:64])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18145  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$199 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18146 ),
    .Q(reg_q[31:0])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18148  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$173 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18149 ),
    .Q(reg_q[223:192])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18151  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$165 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18152 ),
    .Q(reg_q[255:224])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(10'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd10)
  ) \$auto$ff.cc:266:slice$18154  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[53:44]),
    .Q(read_addr_q[9:0])
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18144  (
    .A({ \$procmux$13332_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18143 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18147  (
    .A({ \$procmux$13337_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18146 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18150  (
    .A({ \$procmux$13311_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18149 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18153  (
    .A({ \$procmux$13302_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18152 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17151  (
    .A(obi_req_i[40:37]),
    .Y({ \$159 [31], \$159 [23], \$159 [15], \$159 [7] })
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16869  (
    .A({ \$procmux$13259_CMP , \$procmux$13258_CMP , \$procmux$13257_CMP , \$procmux$13256_CMP , \$procmux$13255_CMP , \$procmux$13254_CMP , \$procmux$13253_CMP , \$procmux$13252_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16870 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16871  (
    .A({ \$procmux$13337_CMP , \$procmux$13332_CMP , \$procmux$13326_CMP , \$procmux$13318_CMP , \$procmux$13311_CMP , \$procmux$13302_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16872 )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[2]),
    .Q(id_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.in  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] }),
    .Q(reg_q[191:160])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[63:32]),
    .Q(reg_q[63:32])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.out  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[159:128]),
    .Q(reg_q[159:128])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[0]),
    .Q(req_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$w_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(w_err_d),
    .Q(w_err_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[41]),
    .Q(we_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd32)
  ) \$procmux$13251  (
    .A(32'd3135023902),
    .B({ reg_q[255:128], 32'h00000000, reg_q[95:0] }),
    .S({ \$procmux$13259_CMP , \$procmux$13258_CMP , \$procmux$13257_CMP , \$procmux$13256_CMP , \$procmux$13255_CMP , \$procmux$13254_CMP , \$procmux$13253_CMP , \$procmux$13252_CMP  }),
    .Y(\$obi_rdata$214 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13252_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0e0),
    .Y(\$procmux$13252_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13253_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0c0),
    .Y(\$procmux$13253_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13254_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0a0),
    .Y(\$procmux$13254_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13255_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h080),
    .Y(\$procmux$13255_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13256_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h060),
    .Y(\$procmux$13256_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13257_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h040),
    .Y(\$procmux$13257_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13258_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h020),
    .Y(\$procmux$13258_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13259_CMP0  (
    .A(read_addr_q[9:0]),
    .Y(\$procmux$13259_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13265  (
    .A(new_reg[63:32]),
    .B(new_intrpt),
    .S(\$procmux$13253_CMP ),
    .Y(\$procmux$13265_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13271  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16870 ),
    .Y(\$obi_err$213 )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13284  (
    .A(new_reg[63:32]),
    .B(\$procmux$13265_Y ),
    .S(obi_read_request),
    .Y(reg_d[63:32])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13288  (
    .A(32'd0),
    .B(\$obi_rdata$214 ),
    .S(obi_read_request),
    .Y(obi_rdata)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13292  (
    .A(\$obi_err$206 ),
    .B(\$obi_err$213 ),
    .S(obi_read_request),
    .Y(obi_err)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$13302_CMP0  (
    .A(obi_req_i[53:44]),
    .Y(\$procmux$13302_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$13311_CMP0  (
    .A(obi_req_i[53:44]),
    .B(6'h20),
    .Y(\$procmux$13311_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13317  (
    .A(32'd0),
    .B(\$163 ),
    .S(\$procmux$13318_CMP ),
    .Y(\$procmux$13317_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$13318_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'h80),
    .Y(\$procmux$13318_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13325  (
    .A(new_reg[159:128]),
    .B(\$181 ),
    .S(\$procmux$13326_CMP ),
    .Y(\$procmux$13325_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$13326_CMP0  (
    .A(obi_req_i[53:44]),
    .B(7'h60),
    .Y(\$procmux$13326_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$13332_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'ha0),
    .Y(\$procmux$13332_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$13337_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'he0),
    .Y(\$procmux$13337_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13341  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$16872 ),
    .Y(\$procmux$13341_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13351  (
    .A(32'd0),
    .B(\$procmux$13317_Y ),
    .S(obi_write_request),
    .Y(toggle_out)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13357  (
    .A(new_reg[159:128]),
    .B(\$procmux$13325_Y ),
    .S(obi_write_request),
    .Y(reg_d[159:128])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13366  (
    .A(obi_write_request),
    .B(\$procmux$13341_Y ),
    .Y(w_err_d)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13369  (
    .A(w_err_q),
    .B(1'h0),
    .S(obi_write_request),
    .Y(\$obi_err$206 )
  );
  assign { \$159 [30:24], \$159 [22:16], \$159 [14:8], \$159 [6:0] } = { \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [31], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [23], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [15], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7], \$159 [7] };
  assign bit_mask = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] };
  assign id_d = obi_req_i[2];
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg_q[255:192], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg_q[95:64], reg_q[31:0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign obi_wdata = obi_req_i[36:5];
  assign read_addr_d = obi_req_i[53:44];
  assign read_addr_q[11:10] = 2'h0;
  assign reg2hw = { reg_q[255], reg_q[223], reg_q[159], toggle_out[31], reg_q[95], reg_q[63], reg_q[31], reg_q[254], reg_q[222], reg_q[158], toggle_out[30], reg_q[94], reg_q[62], reg_q[30], reg_q[253], reg_q[221], reg_q[157], toggle_out[29], reg_q[93], reg_q[61], reg_q[29], reg_q[252], reg_q[220], reg_q[156], toggle_out[28], reg_q[92], reg_q[60], reg_q[28], reg_q[251], reg_q[219], reg_q[155], toggle_out[27], reg_q[91], reg_q[59], reg_q[27], reg_q[250], reg_q[218], reg_q[154], toggle_out[26], reg_q[90], reg_q[58], reg_q[26], reg_q[249], reg_q[217], reg_q[153], toggle_out[25], reg_q[89], reg_q[57], reg_q[25], reg_q[248], reg_q[216], reg_q[152], toggle_out[24], reg_q[88], reg_q[56], reg_q[24], reg_q[247], reg_q[215], reg_q[151], toggle_out[23], reg_q[87], reg_q[55], reg_q[23], reg_q[246], reg_q[214], reg_q[150], toggle_out[22], reg_q[86], reg_q[54], reg_q[22], reg_q[245], reg_q[213], reg_q[149], toggle_out[21], reg_q[85], reg_q[53], reg_q[21], reg_q[244], reg_q[212], reg_q[148], toggle_out[20], reg_q[84], reg_q[52], reg_q[20], reg_q[243], reg_q[211], reg_q[147], toggle_out[19], reg_q[83], reg_q[51], reg_q[19], reg_q[242], reg_q[210], reg_q[146], toggle_out[18], reg_q[82], reg_q[50], reg_q[18], reg_q[241], reg_q[209], reg_q[145], toggle_out[17], reg_q[81], reg_q[49], reg_q[17], reg_q[240], reg_q[208], reg_q[144], toggle_out[16], reg_q[80], reg_q[48], reg_q[16], reg_q[239], reg_q[207], reg_q[143], toggle_out[15], reg_q[79], reg_q[47], reg_q[15], reg_q[238], reg_q[206], reg_q[142], toggle_out[14], reg_q[78], reg_q[46], reg_q[14], reg_q[237], reg_q[205], reg_q[141], toggle_out[13], reg_q[77], reg_q[45], reg_q[13], reg_q[236], reg_q[204], reg_q[140], toggle_out[12], reg_q[76], reg_q[44], reg_q[12], reg_q[235], reg_q[203], reg_q[139], toggle_out[11], reg_q[75], reg_q[43], reg_q[11], reg_q[234], reg_q[202], reg_q[138], toggle_out[10], reg_q[74], reg_q[42], reg_q[10], reg_q[233], reg_q[201], reg_q[137], toggle_out[9], reg_q[73], reg_q[41], reg_q[9], reg_q[232], reg_q[200], reg_q[136], toggle_out[8], reg_q[72], reg_q[40], reg_q[8], reg_q[231], reg_q[199], reg_q[135], toggle_out[7], reg_q[71], reg_q[39], reg_q[7], reg_q[230], reg_q[198], reg_q[134], toggle_out[6], reg_q[70], reg_q[38], reg_q[6], reg_q[229], reg_q[197], reg_q[133], toggle_out[5], reg_q[69], reg_q[37], reg_q[5], reg_q[228], reg_q[196], reg_q[132], toggle_out[4], reg_q[68], reg_q[36], reg_q[4], reg_q[227], reg_q[195], reg_q[131], toggle_out[3], reg_q[67], reg_q[35], reg_q[3], reg_q[226], reg_q[194], reg_q[130], toggle_out[2], reg_q[66], reg_q[34], reg_q[2], reg_q[225], reg_q[193], reg_q[129], toggle_out[1], reg_q[65], reg_q[33], reg_q[1], reg_q[224], reg_q[192], reg_q[128], toggle_out[0], reg_q[64], reg_q[32], reg_q[0] };
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign reg_q[127:96] = 32'hxxxxxxxx;
  assign req_d = obi_req_i[0];
  assign valid_d = obi_req_i[0];
  assign valid_q = req_q;
  assign we_d = obi_req_i[41];
  assign write_addr = obi_req_i[53:44];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$5  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17152 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$252 ;
  wire \$auto$rtlil.cc:3092:Mux$255 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:3092:Mux$261 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$249 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$251 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$254 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:3114:Demux$240 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14095_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$240 [504], \$auto$rtlil.cc:3114:Demux$240 [432], \$auto$rtlil.cc:3114:Demux$240 [360], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17152 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], \$auto$rtlil.cc:3114:Demux$240 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$249 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$251 [36:2], \$auto$rtlil.cc:3092:Mux$252  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$254 [71:1], \$auto$rtlil.cc:3092:Mux$255  })
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$255 ),
    .B(\$auto$rtlil.cc:3092:Mux$252 [1]),
    .Y(cnt_up)
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$261 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18155  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17153  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$240 [288], \$auto$rtlil.cc:3114:Demux$240 [216], \$auto$rtlil.cc:3114:Demux$240 [144], \$auto$rtlil.cc:3114:Demux$240 [72], \$auto$rtlil.cc:3114:Demux$240 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17152 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14091  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$249 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14095  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$252 [1]),
    .Y(\$procmux$14095_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14100  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14103  (
    .A(\$procmux$14095_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$261 [36:2], \$auto$rtlil.cc:3092:Mux$261 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:3113:Bmux$251 [1:0] = \$auto$rtlil.cc:3092:Mux$252 ;
  assign \$auto$rtlil.cc:3113:Bmux$254 [0] = \$auto$rtlil.cc:3092:Mux$255 ;
  assign { \$auto$rtlil.cc:3114:Demux$240 [575:505], \$auto$rtlil.cc:3114:Demux$240 [503:433], \$auto$rtlil.cc:3114:Demux$240 [431:361], \$auto$rtlil.cc:3114:Demux$240 [359:289], \$auto$rtlil.cc:3114:Demux$240 [287:217], \$auto$rtlil.cc:3114:Demux$240 [215:145], \$auto$rtlil.cc:3114:Demux$240 [143:73], \$auto$rtlil.cc:3114:Demux$240 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17155 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$286 ;
  wire \$auto$rtlil.cc:3092:Mux$289 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:3092:Mux$295 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$283 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$285 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$288 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:3114:Demux$274 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14075_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$274 [504], \$auto$rtlil.cc:3114:Demux$274 [432], \$auto$rtlil.cc:3114:Demux$274 [360], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17155 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], \$auto$rtlil.cc:3114:Demux$274 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$283 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$285 [36:2], \$auto$rtlil.cc:3092:Mux$286  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$288 [71:1], \$auto$rtlil.cc:3092:Mux$289  })
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$289 ),
    .B(\$auto$rtlil.cc:3092:Mux$286 [1]),
    .Y(cnt_up)
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$295 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18156  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17156  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$274 [288], \$auto$rtlil.cc:3114:Demux$274 [216], \$auto$rtlil.cc:3114:Demux$274 [144], \$auto$rtlil.cc:3114:Demux$274 [72], \$auto$rtlil.cc:3114:Demux$274 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17155 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14071  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$283 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14075  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$286 [1]),
    .Y(\$procmux$14075_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14080  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14083  (
    .A(\$procmux$14075_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$295 [36:2], \$auto$rtlil.cc:3092:Mux$295 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:3113:Bmux$285 [1:0] = \$auto$rtlil.cc:3092:Mux$286 ;
  assign \$auto$rtlil.cc:3113:Bmux$288 [0] = \$auto$rtlil.cc:3092:Mux$289 ;
  assign { \$auto$rtlil.cc:3114:Demux$274 [575:505], \$auto$rtlil.cc:3114:Demux$274 [503:433], \$auto$rtlil.cc:3114:Demux$274 [431:361], \$auto$rtlil.cc:3114:Demux$274 [359:289], \$auto$rtlil.cc:3114:Demux$274 [287:217], \$auto$rtlil.cc:3114:Demux$274 [215:145], \$auto$rtlil.cc:3114:Demux$274 [143:73], \$auto$rtlil.cc:3114:Demux$274 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17158 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$320 ;
  wire \$auto$rtlil.cc:3092:Mux$323 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:3092:Mux$329 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$317 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$319 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$322 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:3114:Demux$308 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14055_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$308 [504], \$auto$rtlil.cc:3114:Demux$308 [432], \$auto$rtlil.cc:3114:Demux$308 [360], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17158 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], \$auto$rtlil.cc:3114:Demux$308 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$317 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$319 [36:2], \$auto$rtlil.cc:3092:Mux$320  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$322 [71:1], \$auto$rtlil.cc:3092:Mux$323  })
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$323 ),
    .B(\$auto$rtlil.cc:3092:Mux$320 [1]),
    .Y(cnt_up)
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$329 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18157  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17159  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$308 [288], \$auto$rtlil.cc:3114:Demux$308 [216], \$auto$rtlil.cc:3114:Demux$308 [144], \$auto$rtlil.cc:3114:Demux$308 [72], \$auto$rtlil.cc:3114:Demux$308 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17158 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14051  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$317 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14055  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$320 [1]),
    .Y(\$procmux$14055_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14060  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14063  (
    .A(\$procmux$14055_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$329 [36:2], \$auto$rtlil.cc:3092:Mux$329 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:3113:Bmux$319 [1:0] = \$auto$rtlil.cc:3092:Mux$320 ;
  assign \$auto$rtlil.cc:3113:Bmux$322 [0] = \$auto$rtlil.cc:3092:Mux$323 ;
  assign { \$auto$rtlil.cc:3114:Demux$308 [575:505], \$auto$rtlil.cc:3114:Demux$308 [503:433], \$auto$rtlil.cc:3114:Demux$308 [431:361], \$auto$rtlil.cc:3114:Demux$308 [359:289], \$auto$rtlil.cc:3114:Demux$308 [287:217], \$auto$rtlil.cc:3114:Demux$308 [215:145], \$auto$rtlil.cc:3114:Demux$308 [143:73], \$auto$rtlil.cc:3114:Demux$308 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17161 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$354 ;
  wire \$auto$rtlil.cc:3092:Mux$357 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:3092:Mux$363 ;
  wire [359:0] \$auto$rtlil.cc:3093:Bwmux$351 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:3113:Bmux$353 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:3113:Bmux$356 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:3114:Demux$342 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14035_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$342 [504], \$auto$rtlil.cc:3114:Demux$342 [432], \$auto$rtlil.cc:3114:Demux$342 [360], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$28  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17161 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [288], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [216], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [144], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [72], 1'h0, \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], \$auto$rtlil.cc:3114:Demux$342 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$351 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$30  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$353 [36:2], \$auto$rtlil.cc:3092:Mux$354  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$37  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$356 [71:1], \$auto$rtlil.cc:3092:Mux$357  })
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$357 ),
    .B(\$auto$rtlil.cc:3092:Mux$354 [1]),
    .Y(cnt_up)
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$47  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:3092:Mux$363 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18158  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17162  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$342 [288], \$auto$rtlil.cc:3114:Demux$342 [216], \$auto$rtlil.cc:3114:Demux$342 [144], \$auto$rtlil.cc:3114:Demux$342 [72], \$auto$rtlil.cc:3114:Demux$342 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17161 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14031  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$351 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14035  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$354 [1]),
    .Y(\$procmux$14035_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$14040  (
    .A(\$mgr_ports_req_o$33 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14043  (
    .A(\$procmux$14035_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$363 [36:2], \$auto$rtlil.cc:3092:Mux$363 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:3113:Bmux$353 [1:0] = \$auto$rtlil.cc:3092:Mux$354 ;
  assign \$auto$rtlil.cc:3113:Bmux$356 [0] = \$auto$rtlil.cc:3092:Mux$357 ;
  assign { \$auto$rtlil.cc:3114:Demux$342 [575:505], \$auto$rtlil.cc:3114:Demux$342 [503:433], \$auto$rtlil.cc:3114:Demux$342 [431:361], \$auto$rtlil.cc:3114:Demux$342 [359:289], \$auto$rtlil.cc:3114:Demux$342 [287:217], \$auto$rtlil.cc:3114:Demux$342 [215:145], \$auto$rtlil.cc:3114:Demux$342 [143:73], \$auto$rtlil.cc:3114:Demux$342 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17164 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$39 ;
  wire \$auto$rtlil.cc:3092:Mux$42 ;
  /* unused_bits = "1" */
  wire [38:0] \$auto$rtlil.cc:3092:Mux$48 ;
  wire [443:0] \$auto$rtlil.cc:3093:Bwmux$36 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" */
  wire [38:0] \$auto$rtlil.cc:3113:Bmux$38 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] \$auto$rtlil.cc:3113:Bmux$41 ;
  /* unused_bits = "444 518" */
  wire [591:0] \$auto$rtlil.cc:3114:Demux$27 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [443:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14951_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$27 [518], \$auto$rtlil.cc:3114:Demux$27 [444], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$28  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [5], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [4], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [3], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [2], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17164 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [370], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [296], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [222], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [148], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [74], 1'h0, \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], \$auto$rtlil.cc:3114:Demux$27 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$36 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$30  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$38 [38:2], \$auto$rtlil.cc:3092:Mux$39  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$37  (
    .A({ 148'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3113:Bmux$41 [73:1], \$auto$rtlil.cc:3092:Mux$42  })
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$42 ),
    .B(\$auto$rtlil.cc:3092:Mux$39 [1]),
    .Y(cnt_up)
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$47  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[38:2], \$auto$rtlil.cc:3092:Mux$48 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18159  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17165  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$27 [370], \$auto$rtlil.cc:3114:Demux$27 [296], \$auto$rtlil.cc:3114:Demux$27 [222], \$auto$rtlil.cc:3114:Demux$27 [148], \$auto$rtlil.cc:3114:Demux$27 [74], \$auto$rtlil.cc:3114:Demux$27 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17164 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$14947  (
    .A(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$36 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14951  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$39 [1]),
    .Y(\$procmux$14951_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$14956  (
    .A(\$mgr_ports_req_o$33 ),
    .B(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14959  (
    .A(\$procmux$14951_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3092:Mux$48 [38:2], \$auto$rtlil.cc:3092:Mux$48 [0] } = { sbr_port_rsp_o[38:2], cnt_down };
  assign \$auto$rtlil.cc:3113:Bmux$38 [1:0] = \$auto$rtlil.cc:3092:Mux$39 ;
  assign \$auto$rtlil.cc:3113:Bmux$41 [0] = \$auto$rtlil.cc:3092:Mux$42 ;
  assign { \$auto$rtlil.cc:3114:Demux$27 [591:519], \$auto$rtlil.cc:3114:Demux$27 [517:445], \$auto$rtlil.cc:3114:Demux$27 [443:371], \$auto$rtlil.cc:3114:Demux$27 [369:297], \$auto$rtlil.cc:3114:Demux$27 [295:223], \$auto$rtlil.cc:3114:Demux$27 [221:149], \$auto$rtlil.cc:3114:Demux$27 [147:75], \$auto$rtlil.cc:3114:Demux$27 [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$12 ;
  wire \$14 ;
  wire \$4 ;
  wire \$58 ;
  wire \$6 ;
  wire \$8 ;
  wire [1:0] \$auto$opt_expr.cc:205:group_cell_inputs$17167 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:3092:Mux$185 ;
  wire [73:0] \$auto$rtlil.cc:3092:Mux$188 ;
  /* unused_bits = "1" */
  wire [38:0] \$auto$rtlil.cc:3092:Mux$194 ;
  wire [147:0] \$auto$rtlil.cc:3093:Bwmux$182 ;
  wire [147:0] \$auto$rtlil.cc:3114:Demux$173 ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [147:0] \$mgr_ports_req_o$33 ;
  wire \$procmux$14321_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [147:0] mgr_ports_req_o;
  wire [147:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [77:0] mgr_ports_rsp_i;
  wire [77:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input sbr_port_select_i;
  wire sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire select_q;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$12 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$8 ),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$26  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [0] })
  );
  \$bwmux  #(
    .WIDTH(32'd148)
  ) \$28  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17167 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17167 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [74], 1'h0, \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], \$auto$rtlil.cc:3114:Demux$173 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$182 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$4 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$30  (
    .A(mgr_ports_rsp_i[1:0]),
    .B(mgr_ports_rsp_i[40:39]),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3092:Mux$185 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$37  (
    .A(mgr_ports_req_o[0]),
    .B(mgr_ports_req_o[74]),
    .S(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:3092:Mux$188 [0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$auto$rtlil.cc:3092:Mux$188 [0]),
    .B(\$auto$rtlil.cc:3092:Mux$185 [1]),
    .Y(cnt_up)
  );
  \$mux  #(
    .WIDTH(32'd39)
  ) \$47  (
    .A(mgr_ports_rsp_i[38:0]),
    .B(mgr_ports_rsp_i[77:39]),
    .S(select_q),
    .Y({ sbr_port_rsp_o[38:2], \$auto$rtlil.cc:3092:Mux$194 [1], cnt_down })
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(in_flight),
    .Y(\$6 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$58 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4 ),
    .B(\$6 ),
    .Y(\$8 )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18160  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17168  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$173 [74], \$auto$rtlil.cc:3114:Demux$173 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17167 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$14317  (
    .A(148'h0000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:3093:Bwmux$182 ),
    .S(\$14 ),
    .Y(\$mgr_ports_req_o$33 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14321  (
    .A(\$14 ),
    .B(\$auto$rtlil.cc:3092:Mux$185 [1]),
    .Y(\$procmux$14321_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$14326  (
    .A(\$mgr_ports_req_o$33 ),
    .B(148'h0000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14329  (
    .A(\$procmux$14321_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$58 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:3092:Mux$188 [73:1] = 73'hxxxxxxxxxxxxxxxxxxx;
  assign { \$auto$rtlil.cc:3092:Mux$194 [38:2], \$auto$rtlil.cc:3092:Mux$194 [0] } = { sbr_port_rsp_o[38:2], cnt_down };
  assign { \$auto$rtlil.cc:3114:Demux$173 [147:75], \$auto$rtlil.cc:3114:Demux$173 [73:1] } = 146'h0000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$6 ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$6 )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$6 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17170 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$385 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$392 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$376 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$23  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17170 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17170 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17170 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$385 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$385 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$392 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$392 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$376 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$1 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17171  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17170 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16689  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$376 [138:105], \$auto$rtlil.cc:3114:Demux$376 [103:70], \$auto$rtlil.cc:3114:Demux$376 [68:35], \$auto$rtlil.cc:3114:Demux$376 [33:0] } = { \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], \$auto$rtlil.cc:3114:Demux$376 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], \$auto$rtlil.cc:3114:Demux$376 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], \$auto$rtlil.cc:3114:Demux$376 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], \$auto$rtlil.cc:3114:Demux$376 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17173 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$420 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$427 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$411 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$23  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17173 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17173 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17173 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$420 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$420 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$427 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$427 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$411 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$1 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17174  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17173 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16685  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$411 [138:105], \$auto$rtlil.cc:3114:Demux$411 [103:70], \$auto$rtlil.cc:3114:Demux$411 [68:35], \$auto$rtlil.cc:3114:Demux$411 [33:0] } = { \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], \$auto$rtlil.cc:3114:Demux$411 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], \$auto$rtlil.cc:3114:Demux$411 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], \$auto$rtlil.cc:3114:Demux$411 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], \$auto$rtlil.cc:3114:Demux$411 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17176 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$455 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$462 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$446 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$23  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17176 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17176 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17176 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$455 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$455 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$462 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$462 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$446 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$1 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17177  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17176 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16681  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$446 [138:105], \$auto$rtlil.cc:3114:Demux$446 [103:70], \$auto$rtlil.cc:3114:Demux$446 [68:35], \$auto$rtlil.cc:3114:Demux$446 [33:0] } = { \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], \$auto$rtlil.cc:3114:Demux$446 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], \$auto$rtlil.cc:3114:Demux$446 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], \$auto$rtlil.cc:3114:Demux$446 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], \$auto$rtlil.cc:3114:Demux$446 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17179 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$490 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$497 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$481 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$23  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17179 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17179 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17179 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$490 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$490 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$497 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$497 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$481 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$1 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17180  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17179 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16677  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$481 [138:105], \$auto$rtlil.cc:3114:Demux$481 [103:70], \$auto$rtlil.cc:3114:Demux$481 [68:35], \$auto$rtlil.cc:3114:Demux$481 [33:0] } = { \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], \$auto$rtlil.cc:3114:Demux$481 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], \$auto$rtlil.cc:3114:Demux$481 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], \$auto$rtlil.cc:3114:Demux$481 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], \$auto$rtlil.cc:3114:Demux$481 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$1 ;
  wire \$10 ;
  wire \$3 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17182 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$525 ;
  wire [139:0] \$auto$rtlil.cc:3093:Bwmux$532 ;
  wire [139:0] \$auto$rtlil.cc:3114:Demux$516 ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(mgr_port_rsp_i[1]),
    .B(\$1 ),
    .Y(\$3 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$23  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$25  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17182 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17182 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17182 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$525 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$32  (
    .A(\$auto$rtlil.cc:3093:Bwmux$525 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$532 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$39  (
    .A(\$auto$rtlil.cc:3093:Bwmux$532 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [139], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [104], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [69], 34'h000000000, \$auto$rtlil.cc:3114:Demux$516 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(mgr_port_req),
    .B(\$1 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$10 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17183  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17182 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$16673  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$10 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$3 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:3114:Demux$516 [138:105], \$auto$rtlil.cc:3114:Demux$516 [103:70], \$auto$rtlil.cc:3114:Demux$516 [68:35], \$auto$rtlil.cc:3114:Demux$516 [33:0] } = { \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], \$auto$rtlil.cc:3114:Demux$516 [139], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], \$auto$rtlil.cc:3114:Demux$516 [104], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], \$auto$rtlil.cc:3114:Demux$516 [69], 3'h0, \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], \$auto$rtlil.cc:3114:Demux$516 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "rtl/obi/obi_xbar.sv:8.8" */
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  /* src = "rtl/obi/obi_xbar.sv:50.47" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/obi/obi_xbar.sv:40.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_xbar.sv:52.75" */
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:51.47" */
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:47.47" */
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_xbar.sv:48.47" */
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_xbar.sv:62.57" */
  wire [1439:0] mgr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:63.57" */
  wire [739:0] mgr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:41.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_xbar.sv:55.68" */
  wire [11:0] sbr_port_select;
  /* src = "rtl/obi/obi_xbar.sv:44.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_xbar.sv:45.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_xbar.sv:58.57" */
  wire [1439:0] sbr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:59.57" */
  wire [739:0] sbr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:42.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
  assign sbr_reqs = { mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216], mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144], mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72], mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] };
  assign sbr_rsps = { mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111], mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74], mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37], mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] };
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd268435456),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18161  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18162  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18163  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18164  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18165  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$4  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/reg_to_apb.sv:7.8" */
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  wire \$procmux$13792_Y ;
  /* src = "rtl/register_interface/reg_to_apb.sv:26.20" */
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:27.20" */
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:18.20" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:22.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:23.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:19.20" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.11" */
  wire state_d;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.20" */
  wire state_q;
  /* src = "rtl/register_interface/reg_to_apb.sv:66.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$state_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/register_interface/reg_to_apb.sv:59.31-59.47|rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13792  (
    .A(apb_rsp_i[33]),
    .Y(\$procmux$13792_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13797  (
    .A(reg_req_i[0]),
    .B(\$procmux$13792_Y ),
    .S(state_q),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13810  (
    .A(state_q),
    .B(apb_rsp_i[33]),
    .Y(reg_rsp_o[0])
  );
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

/* src = "rtl/apb_uart/reg_uart_wrap.sv:31.8" */
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:36.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:49.16" */
  input cts_ni;
  wire cts_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:51.16" */
  input dcd_ni;
  wire dcd_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:50.16" */
  input dsr_ni;
  wire dsr_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:48.16" */
  output dtr_no;
  wire dtr_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:44.16" */
  output intr_o;
  wire intr_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:45.16" */
  output out1_no;
  wire out1_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:46.16" */
  output out2_no;
  wire out2_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:40.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:41.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:52.16" */
  input rin_ni;
  wire rin_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:37.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:47.16" */
  output rts_no;
  wire rts_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:53.16" */
  input sin_i;
  wire sin_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:54.16" */
  output sout_o;
  wire sout_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:59.22" */
  /* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] uart_apb_req;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:60.22" */
  wire [33:0] uart_apb_rsp;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:76.12" */
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:67.5" */
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18167 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(gnt_i),
    .B(\$50 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$69 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$92 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18166  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18167 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18168  (
    .A({ flush_i, \$33  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18167 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17185  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$14 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17186  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$17 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8124  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8127  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8130  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18170 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(gnt_i),
    .B(\$50 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$69 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$92 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18169  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18170 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18171  (
    .A({ flush_i, \$33  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18170 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17189  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$14 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17190  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$17 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8069  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8072  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8075  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18173 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(gnt_i),
    .B(\$50 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$69 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$92 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18172  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18173 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18174  (
    .A({ flush_i, \$33  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18173 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17193  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$14 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17194  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$17 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$8014  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$8017  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8020  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18176 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(gnt_i),
    .B(\$50 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$69 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$92 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18175  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18176 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18177  (
    .A({ flush_i, \$33  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18176 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17197  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$14 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17198  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$17 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7959  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7962  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7965  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$1 ;
  wire \$14 ;
  wire \$17 ;
  wire \$26 ;
  wire \$29 ;
  wire \$33 ;
  wire \$42 ;
  wire \$44 ;
  wire \$50 ;
  wire \$58 ;
  wire \$60 ;
  wire \$69 ;
  wire \$81 ;
  wire \$83 ;
  wire \$92 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18179 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$38 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$1 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_o),
    .B(\$1 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$26 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$26 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$29 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$31  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$33 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$4  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$42 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$44 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$42 ),
    .B(\$44 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$47  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$48  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$50 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(gnt_i),
    .B(\$50 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$58 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$60 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$58 ),
    .B(\$60 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$63  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$69 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$69 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$81 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$83 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$81 ),
    .B(\$83 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$86  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$92 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$92 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18178  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$38 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18179 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18180  (
    .A({ flush_i, \$33  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18179 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17201  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$14 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$17202  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$17 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7904  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7907  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$12 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7910  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$8 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rstgen.sv:13.8" */
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  /* src = "rtl/common_cells/rstgen.sv:14.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen.sv:18.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen.sv:15.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen.sv:17.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen.sv:16.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "rtl/common_cells/rstgen.sv:21.19" */
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

/* src = "rtl/common_cells/rstgen_bypass.sv:15.8" */
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  /* src = "rtl/common_cells/rstgen_bypass.sv:18.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen_bypass.sv:23.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:27.11" */
  wire rst_n;
  /* src = "rtl/common_cells/rstgen_bypass.sv:19.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:22.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:20.18" */
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:29.25" */
  wire [3:0] synch_regs_q;
  /* src = "rtl/common_cells/rstgen_bypass.sv:21.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "rtl/common_cells/rstgen_bypass.sv:53.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$synch_regs_q  (
    .ARST(rst_n),
    .CLK(clk_i),
    .D({ synch_regs_q[2:0], 1'h1 }),
    .Q(synch_regs_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:46.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:32.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:39.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

/* src = "rtl/apb_uart/slib_clock_div.sv:35.8" */
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$5 ;
  wire [2:0] \$7 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  wire [2:0] \$iCounter$9 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  wire \$iQ$10 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_clock_div.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_clock_div.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_clock_div.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_clock_div.sv:44.27" */
  wire [2:0] iCounter;
  /* src = "rtl/apb_uart/slib_clock_div.sv:43.5" */
  wire iQ;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCounter),
    .B(3'h7),
    .Y(\$5 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd3)
  ) \$6  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$7 )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18181  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$9 ),
    .EN(CE),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iQ$10 ),
    .Q(iQ)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7670  (
    .A(\$7 ),
    .B(3'h0),
    .S(\$5 ),
    .Y(\$iCounter$9 )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7683  (
    .A(CE),
    .B(\$5 ),
    .Y(\$iQ$10 )
  );
  assign Q = iQ;
endmodule

/* src = "rtl/apb_uart/slib_counter.sv:35.8" */
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18183 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18186 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$17260 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$17262 ;
  /* src = "rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  wire [4:0] \$iCounter$16 ;
  /* src = "rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  wire [4:0] \$iCounter$17 ;
  /* src = "rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  wire \$iCounter[4]$20 ;
  /* src = "rtl/apb_uart/slib_counter.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_counter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_counter.sv:42.28" */
  input [3:0] D;
  wire [3:0] D;
  /* src = "rtl/apb_uart/slib_counter.sv:41.14" */
  input DOWN;
  wire DOWN;
  /* src = "rtl/apb_uart/slib_counter.sv:40.14" */
  input ENABLE;
  wire ENABLE;
  /* src = "rtl/apb_uart/slib_counter.sv:39.14" */
  input LOAD;
  wire LOAD;
  /* src = "rtl/apb_uart/slib_counter.sv:44.16" */
  output OVERFLOW;
  wire OVERFLOW;
  /* src = "rtl/apb_uart/slib_counter.sv:43.30" */
  output [3:0] Q;
  wire [3:0] Q;
  /* src = "rtl/apb_uart/slib_counter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_counter.sv:48.15" */
  wire [4:0] iCounter;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$12  (
    .A(iCounter),
    .B({ \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$17260 )
  );
  /* src = "rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18182  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter[4]$20 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18183 ),
    .Q(iCounter[4])
  );
  /* src = "rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$18185  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$17 [3:0]),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18186 ),
    .Q(iCounter[3:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18184  (
    .A({ ENABLE, LOAD, iCounter[4], CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18183 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18187  (
    .A({ ENABLE, LOAD, CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$17261  (
    .A(DOWN),
    .Y(\$auto$rtlil.cc:3092:Mux$17262 [4])
  );
  /* src = "rtl/apb_uart/slib_counter.sv:82.11-82.32|rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3676  (
    .A(\$iCounter$17 [4]),
    .B(1'h0),
    .S(iCounter[4]),
    .Y(\$iCounter[4]$20 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3701  (
    .A(\$auto$opt_share.cc:222:merge_operators$17260 ),
    .B({ 1'h0, D }),
    .S(LOAD),
    .Y(\$iCounter$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3708  (
    .A(\$iCounter$16 ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$iCounter$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$17262 [3:0] = { \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], \$auto$rtlil.cc:3092:Mux$17262 [4], 1'h1 };
  assign OVERFLOW = iCounter[4];
  assign Q = iCounter[3:0];
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$12 ;
  wire \$3 ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(D),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(iDd),
    .B(\$12 ),
    .Y(FE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$3 ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$12 ;
  wire \$14 ;
  wire [6:0] \$16 ;
  wire \$21 ;
  wire \$23 ;
  wire [6:0] \$25 ;
  wire \$3 ;
  wire \$32 ;
  wire \$60 ;
  wire \$64 ;
  wire \$68 ;
  wire \$73 ;
  wire \$77 ;
  wire \$81 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18189 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18192 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18195 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17205 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17209 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18494 ;
  wire \$auto$rtlil.cc:3015:Ge$1556 ;
  wire [10:0] \$auto$rtlil.cc:3092:Mux$1565 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$18496 ;
  wire [703:0] \$auto$rtlil.cc:3093:Bwmux$1561 ;
  wire [703:0] \$auto$rtlil.cc:3114:Demux$1560 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$30 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$85 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$29 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [10:0] D;
  wire [10:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [10:0] Q;
  wire [10:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [703:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$1 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(iFULL),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(WRITE),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$15  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(iEMPTY),
    .Y(\$21 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(READ),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$24  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$25 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$32 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$1 ),
    .B(\$3 ),
    .Y(iFULL)
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17205  }),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1556 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$47  (
    .A(\$auto$rtlil.cc:3015:Ge$1556 ),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17205 ),
    .Y({ \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [10] })
  );
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1561 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd11)
  ) \$52  (
    .A(iFIFOMem),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17209 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1565 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(READ),
    .Y(\$60 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$60 ),
    .B(WRITE),
    .Y(\$64 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$64 ),
    .B(\$12 ),
    .Y(\$68 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(WRITE),
    .Y(\$73 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(READ),
    .Y(\$77 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$21 ),
    .Y(\$81 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$82  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18494 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$18188  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iWRAddr$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18189 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$18191  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iUSAGE$85 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18192 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$18194  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iRDAddr$30 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18195 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18197  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [604:594]),
    .EN(\$14 ),
    .Q(iFIFOMem[604:594])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18198  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [615:605]),
    .EN(\$14 ),
    .Q(iFIFOMem[615:605])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18199  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [626:616]),
    .EN(\$14 ),
    .Q(iFIFOMem[626:616])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18200  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [637:627]),
    .EN(\$14 ),
    .Q(iFIFOMem[637:627])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18201  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [10:0]),
    .EN(\$14 ),
    .Q(iFIFOMem[10:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18202  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [21:11]),
    .EN(\$14 ),
    .Q(iFIFOMem[21:11])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18203  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [32:22]),
    .EN(\$14 ),
    .Q(iFIFOMem[32:22])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18204  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [43:33]),
    .EN(\$14 ),
    .Q(iFIFOMem[43:33])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18205  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [648:638]),
    .EN(\$14 ),
    .Q(iFIFOMem[648:638])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18206  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [54:44]),
    .EN(\$14 ),
    .Q(iFIFOMem[54:44])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18207  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [65:55]),
    .EN(\$14 ),
    .Q(iFIFOMem[65:55])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18208  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [76:66]),
    .EN(\$14 ),
    .Q(iFIFOMem[76:66])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18209  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [87:77]),
    .EN(\$14 ),
    .Q(iFIFOMem[87:77])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18210  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [98:88]),
    .EN(\$14 ),
    .Q(iFIFOMem[98:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18211  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [109:99]),
    .EN(\$14 ),
    .Q(iFIFOMem[109:99])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18212  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [120:110]),
    .EN(\$14 ),
    .Q(iFIFOMem[120:110])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18213  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [131:121]),
    .EN(\$14 ),
    .Q(iFIFOMem[131:121])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18214  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [142:132]),
    .EN(\$14 ),
    .Q(iFIFOMem[142:132])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18215  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [153:143]),
    .EN(\$14 ),
    .Q(iFIFOMem[153:143])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18216  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [659:649]),
    .EN(\$14 ),
    .Q(iFIFOMem[659:649])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18217  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [164:154]),
    .EN(\$14 ),
    .Q(iFIFOMem[164:154])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18218  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [175:165]),
    .EN(\$14 ),
    .Q(iFIFOMem[175:165])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18219  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [186:176]),
    .EN(\$14 ),
    .Q(iFIFOMem[186:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18220  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [197:187]),
    .EN(\$14 ),
    .Q(iFIFOMem[197:187])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18221  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [208:198]),
    .EN(\$14 ),
    .Q(iFIFOMem[208:198])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18222  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [219:209]),
    .EN(\$14 ),
    .Q(iFIFOMem[219:209])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18223  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [230:220]),
    .EN(\$14 ),
    .Q(iFIFOMem[230:220])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18224  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [241:231]),
    .EN(\$14 ),
    .Q(iFIFOMem[241:231])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18225  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [252:242]),
    .EN(\$14 ),
    .Q(iFIFOMem[252:242])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18226  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [263:253]),
    .EN(\$14 ),
    .Q(iFIFOMem[263:253])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18227  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [670:660]),
    .EN(\$14 ),
    .Q(iFIFOMem[670:660])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18228  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [274:264]),
    .EN(\$14 ),
    .Q(iFIFOMem[274:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18229  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [285:275]),
    .EN(\$14 ),
    .Q(iFIFOMem[285:275])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18230  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [296:286]),
    .EN(\$14 ),
    .Q(iFIFOMem[296:286])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18231  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [307:297]),
    .EN(\$14 ),
    .Q(iFIFOMem[307:297])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18232  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [318:308]),
    .EN(\$14 ),
    .Q(iFIFOMem[318:308])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18233  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [329:319]),
    .EN(\$14 ),
    .Q(iFIFOMem[329:319])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18234  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [340:330]),
    .EN(\$14 ),
    .Q(iFIFOMem[340:330])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18235  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [351:341]),
    .EN(\$14 ),
    .Q(iFIFOMem[351:341])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18236  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [362:352]),
    .EN(\$14 ),
    .Q(iFIFOMem[362:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18237  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [373:363]),
    .EN(\$14 ),
    .Q(iFIFOMem[373:363])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18238  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [681:671]),
    .EN(\$14 ),
    .Q(iFIFOMem[681:671])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18239  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [384:374]),
    .EN(\$14 ),
    .Q(iFIFOMem[384:374])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18240  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [395:385]),
    .EN(\$14 ),
    .Q(iFIFOMem[395:385])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18241  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [406:396]),
    .EN(\$14 ),
    .Q(iFIFOMem[406:396])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18242  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [417:407]),
    .EN(\$14 ),
    .Q(iFIFOMem[417:407])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18243  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [428:418]),
    .EN(\$14 ),
    .Q(iFIFOMem[428:418])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18244  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [439:429]),
    .EN(\$14 ),
    .Q(iFIFOMem[439:429])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18245  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [450:440]),
    .EN(\$14 ),
    .Q(iFIFOMem[450:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18246  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [461:451]),
    .EN(\$14 ),
    .Q(iFIFOMem[461:451])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18247  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [472:462]),
    .EN(\$14 ),
    .Q(iFIFOMem[472:462])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18248  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [483:473]),
    .EN(\$14 ),
    .Q(iFIFOMem[483:473])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18249  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [692:682]),
    .EN(\$14 ),
    .Q(iFIFOMem[692:682])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18250  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [494:484]),
    .EN(\$14 ),
    .Q(iFIFOMem[494:484])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18251  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [505:495]),
    .EN(\$14 ),
    .Q(iFIFOMem[505:495])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18252  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [516:506]),
    .EN(\$14 ),
    .Q(iFIFOMem[516:506])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18253  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [527:517]),
    .EN(\$14 ),
    .Q(iFIFOMem[527:517])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18254  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [538:528]),
    .EN(\$14 ),
    .Q(iFIFOMem[538:528])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18255  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [549:539]),
    .EN(\$14 ),
    .Q(iFIFOMem[549:539])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18256  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [560:550]),
    .EN(\$14 ),
    .Q(iFIFOMem[560:550])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18257  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [571:561]),
    .EN(\$14 ),
    .Q(iFIFOMem[571:561])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18258  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [582:572]),
    .EN(\$14 ),
    .Q(iFIFOMem[582:572])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18259  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [593:583]),
    .EN(\$14 ),
    .Q(iFIFOMem[593:583])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$18260  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1561 [703:693]),
    .EN(\$14 ),
    .Q(iFIFOMem[703:693])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18190  (
    .A({ CLEAR, \$14  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18189 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18193  (
    .A({ CLEAR, \$81 , \$68  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18192 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18196  (
    .A({ CLEAR, \$23  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18195 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17206  (
    .A(iWRAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17205 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17210  (
    .A(iRDAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17209 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18495  (
    .A(\$81 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18496 [5])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3092:Mux$1565 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32 ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7609  (
    .A(\$auto$opt_share.cc:222:merge_operators$18494 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$iUSAGE$85 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7619  (
    .A(\$25 ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iRDAddr$30 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7623  (
    .A(\$16 ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iWRAddr$29 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18496 [4:0] = { \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], \$auto$rtlil.cc:3092:Mux$18496 [5], 1'h1 };
  assign { \$auto$rtlil.cc:3114:Demux$1560 [702:693], \$auto$rtlil.cc:3114:Demux$1560 [691:682], \$auto$rtlil.cc:3114:Demux$1560 [680:671], \$auto$rtlil.cc:3114:Demux$1560 [669:660], \$auto$rtlil.cc:3114:Demux$1560 [658:649], \$auto$rtlil.cc:3114:Demux$1560 [647:638], \$auto$rtlil.cc:3114:Demux$1560 [636:627], \$auto$rtlil.cc:3114:Demux$1560 [625:616], \$auto$rtlil.cc:3114:Demux$1560 [614:605], \$auto$rtlil.cc:3114:Demux$1560 [603:594], \$auto$rtlil.cc:3114:Demux$1560 [592:583], \$auto$rtlil.cc:3114:Demux$1560 [581:572], \$auto$rtlil.cc:3114:Demux$1560 [570:561], \$auto$rtlil.cc:3114:Demux$1560 [559:550], \$auto$rtlil.cc:3114:Demux$1560 [548:539], \$auto$rtlil.cc:3114:Demux$1560 [537:528], \$auto$rtlil.cc:3114:Demux$1560 [526:517], \$auto$rtlil.cc:3114:Demux$1560 [515:506], \$auto$rtlil.cc:3114:Demux$1560 [504:495], \$auto$rtlil.cc:3114:Demux$1560 [493:484], \$auto$rtlil.cc:3114:Demux$1560 [482:473], \$auto$rtlil.cc:3114:Demux$1560 [471:462], \$auto$rtlil.cc:3114:Demux$1560 [460:451], \$auto$rtlil.cc:3114:Demux$1560 [449:440], \$auto$rtlil.cc:3114:Demux$1560 [438:429], \$auto$rtlil.cc:3114:Demux$1560 [427:418], \$auto$rtlil.cc:3114:Demux$1560 [416:407], \$auto$rtlil.cc:3114:Demux$1560 [405:396], \$auto$rtlil.cc:3114:Demux$1560 [394:385], \$auto$rtlil.cc:3114:Demux$1560 [383:374], \$auto$rtlil.cc:3114:Demux$1560 [372:363], \$auto$rtlil.cc:3114:Demux$1560 [361:352], \$auto$rtlil.cc:3114:Demux$1560 [350:341], \$auto$rtlil.cc:3114:Demux$1560 [339:330], \$auto$rtlil.cc:3114:Demux$1560 [328:319], \$auto$rtlil.cc:3114:Demux$1560 [317:308], \$auto$rtlil.cc:3114:Demux$1560 [306:297], \$auto$rtlil.cc:3114:Demux$1560 [295:286], \$auto$rtlil.cc:3114:Demux$1560 [284:275], \$auto$rtlil.cc:3114:Demux$1560 [273:264], \$auto$rtlil.cc:3114:Demux$1560 [262:253], \$auto$rtlil.cc:3114:Demux$1560 [251:242], \$auto$rtlil.cc:3114:Demux$1560 [240:231], \$auto$rtlil.cc:3114:Demux$1560 [229:220], \$auto$rtlil.cc:3114:Demux$1560 [218:209], \$auto$rtlil.cc:3114:Demux$1560 [207:198], \$auto$rtlil.cc:3114:Demux$1560 [196:187], \$auto$rtlil.cc:3114:Demux$1560 [185:176], \$auto$rtlil.cc:3114:Demux$1560 [174:165], \$auto$rtlil.cc:3114:Demux$1560 [163:154], \$auto$rtlil.cc:3114:Demux$1560 [152:143], \$auto$rtlil.cc:3114:Demux$1560 [141:132], \$auto$rtlil.cc:3114:Demux$1560 [130:121], \$auto$rtlil.cc:3114:Demux$1560 [119:110], \$auto$rtlil.cc:3114:Demux$1560 [108:99], \$auto$rtlil.cc:3114:Demux$1560 [97:88], \$auto$rtlil.cc:3114:Demux$1560 [86:77], \$auto$rtlil.cc:3114:Demux$1560 [75:66], \$auto$rtlil.cc:3114:Demux$1560 [64:55], \$auto$rtlil.cc:3114:Demux$1560 [53:44], \$auto$rtlil.cc:3114:Demux$1560 [42:33], \$auto$rtlil.cc:3114:Demux$1560 [31:22], \$auto$rtlil.cc:3114:Demux$1560 [20:11], \$auto$rtlil.cc:3114:Demux$1560 [9:0] } = { \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [703], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [692], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [681], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [670], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [659], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [648], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [637], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [626], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [615], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [604], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [593], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [582], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [571], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [560], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [549], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [538], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [527], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [516], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [505], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [494], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [483], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [472], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [461], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [450], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [439], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [428], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [417], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [406], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [395], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [384], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [373], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [362], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [351], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [340], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [329], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [318], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [307], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [296], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [285], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [274], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [263], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [252], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [241], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [230], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [219], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [208], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [197], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [186], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [175], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [164], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [153], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [142], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [131], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [120], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [109], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [98], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [87], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [76], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [65], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [54], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [43], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [32], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [21], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10], \$auto$rtlil.cc:3114:Demux$1560 [10] };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$1 ;
  wire \$12 ;
  wire \$14 ;
  wire [6:0] \$16 ;
  wire \$21 ;
  wire \$23 ;
  /* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$25 ;
  wire \$3 ;
  wire \$32 ;
  wire \$60 ;
  wire \$64 ;
  wire \$68 ;
  wire \$73 ;
  wire \$77 ;
  wire \$81 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18262 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18265 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18268 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17213 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17217 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18499 ;
  wire \$auto$rtlil.cc:3015:Ge$1540 ;
  wire [7:0] \$auto$rtlil.cc:3092:Mux$1549 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$18501 ;
  wire [511:0] \$auto$rtlil.cc:3093:Bwmux$1545 ;
  wire [511:0] \$auto$rtlil.cc:3114:Demux$1544 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$30 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$85 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$29 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [7:0] D;
  wire [7:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [7:0] Q;
  wire [7:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [511:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$1 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(iFULL),
    .Y(\$12 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(WRITE),
    .B(\$12 ),
    .Y(\$14 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$15  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$16 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$3 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(iEMPTY),
    .Y(\$21 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(READ),
    .B(\$21 ),
    .Y(\$23 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$24  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$25 [6:0])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$32 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$1 ),
    .B(\$3 ),
    .Y(iFULL)
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17213  }),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:3015:Ge$1540 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$47  (
    .A(\$auto$rtlil.cc:3015:Ge$1540 ),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17213 ),
    .Y({ \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [7] })
  );
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$48  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7] }),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1545 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd8)
  ) \$52  (
    .A(iFIFOMem),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17217 ),
    .Y(\$auto$rtlil.cc:3092:Mux$1549 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(READ),
    .Y(\$60 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$60 ),
    .B(WRITE),
    .Y(\$64 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$64 ),
    .B(\$12 ),
    .Y(\$68 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(WRITE),
    .Y(\$73 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$73 ),
    .B(READ),
    .Y(\$77 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(\$21 ),
    .Y(\$81 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$82  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18499 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$18261  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iWRAddr$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18262 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$18264  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iUSAGE$85 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18265 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$18267  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iRDAddr$30 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18268 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18270  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [439:432]),
    .EN(\$14 ),
    .Q(iFIFOMem[439:432])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18271  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [447:440]),
    .EN(\$14 ),
    .Q(iFIFOMem[447:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18272  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [455:448]),
    .EN(\$14 ),
    .Q(iFIFOMem[455:448])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18273  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [463:456]),
    .EN(\$14 ),
    .Q(iFIFOMem[463:456])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18274  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [7:0]),
    .EN(\$14 ),
    .Q(iFIFOMem[7:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18275  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [15:8]),
    .EN(\$14 ),
    .Q(iFIFOMem[15:8])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18276  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [23:16]),
    .EN(\$14 ),
    .Q(iFIFOMem[23:16])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18277  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [31:24]),
    .EN(\$14 ),
    .Q(iFIFOMem[31:24])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18278  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [471:464]),
    .EN(\$14 ),
    .Q(iFIFOMem[471:464])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18279  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [39:32]),
    .EN(\$14 ),
    .Q(iFIFOMem[39:32])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18280  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [47:40]),
    .EN(\$14 ),
    .Q(iFIFOMem[47:40])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18281  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [55:48]),
    .EN(\$14 ),
    .Q(iFIFOMem[55:48])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18282  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [63:56]),
    .EN(\$14 ),
    .Q(iFIFOMem[63:56])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18283  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [71:64]),
    .EN(\$14 ),
    .Q(iFIFOMem[71:64])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18284  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [79:72]),
    .EN(\$14 ),
    .Q(iFIFOMem[79:72])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18285  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [87:80]),
    .EN(\$14 ),
    .Q(iFIFOMem[87:80])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18286  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [95:88]),
    .EN(\$14 ),
    .Q(iFIFOMem[95:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18287  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [103:96]),
    .EN(\$14 ),
    .Q(iFIFOMem[103:96])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18288  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [111:104]),
    .EN(\$14 ),
    .Q(iFIFOMem[111:104])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18289  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [479:472]),
    .EN(\$14 ),
    .Q(iFIFOMem[479:472])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18290  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [119:112]),
    .EN(\$14 ),
    .Q(iFIFOMem[119:112])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18291  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [127:120]),
    .EN(\$14 ),
    .Q(iFIFOMem[127:120])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18292  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [135:128]),
    .EN(\$14 ),
    .Q(iFIFOMem[135:128])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18293  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [143:136]),
    .EN(\$14 ),
    .Q(iFIFOMem[143:136])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18294  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [151:144]),
    .EN(\$14 ),
    .Q(iFIFOMem[151:144])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18295  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [159:152]),
    .EN(\$14 ),
    .Q(iFIFOMem[159:152])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18296  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [167:160]),
    .EN(\$14 ),
    .Q(iFIFOMem[167:160])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18297  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [175:168]),
    .EN(\$14 ),
    .Q(iFIFOMem[175:168])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18298  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [183:176]),
    .EN(\$14 ),
    .Q(iFIFOMem[183:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18299  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [191:184]),
    .EN(\$14 ),
    .Q(iFIFOMem[191:184])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18300  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [487:480]),
    .EN(\$14 ),
    .Q(iFIFOMem[487:480])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18301  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [199:192]),
    .EN(\$14 ),
    .Q(iFIFOMem[199:192])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18302  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [207:200]),
    .EN(\$14 ),
    .Q(iFIFOMem[207:200])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18303  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [215:208]),
    .EN(\$14 ),
    .Q(iFIFOMem[215:208])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18304  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [223:216]),
    .EN(\$14 ),
    .Q(iFIFOMem[223:216])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18305  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [231:224]),
    .EN(\$14 ),
    .Q(iFIFOMem[231:224])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18306  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [239:232]),
    .EN(\$14 ),
    .Q(iFIFOMem[239:232])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18307  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [247:240]),
    .EN(\$14 ),
    .Q(iFIFOMem[247:240])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18308  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [255:248]),
    .EN(\$14 ),
    .Q(iFIFOMem[255:248])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18309  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [263:256]),
    .EN(\$14 ),
    .Q(iFIFOMem[263:256])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18310  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [271:264]),
    .EN(\$14 ),
    .Q(iFIFOMem[271:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18311  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [495:488]),
    .EN(\$14 ),
    .Q(iFIFOMem[495:488])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18312  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [279:272]),
    .EN(\$14 ),
    .Q(iFIFOMem[279:272])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18313  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [287:280]),
    .EN(\$14 ),
    .Q(iFIFOMem[287:280])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18314  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [295:288]),
    .EN(\$14 ),
    .Q(iFIFOMem[295:288])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18315  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [303:296]),
    .EN(\$14 ),
    .Q(iFIFOMem[303:296])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18316  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [311:304]),
    .EN(\$14 ),
    .Q(iFIFOMem[311:304])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18317  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [319:312]),
    .EN(\$14 ),
    .Q(iFIFOMem[319:312])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18318  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [327:320]),
    .EN(\$14 ),
    .Q(iFIFOMem[327:320])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18319  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [335:328]),
    .EN(\$14 ),
    .Q(iFIFOMem[335:328])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18320  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [343:336]),
    .EN(\$14 ),
    .Q(iFIFOMem[343:336])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18321  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [351:344]),
    .EN(\$14 ),
    .Q(iFIFOMem[351:344])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18322  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [503:496]),
    .EN(\$14 ),
    .Q(iFIFOMem[503:496])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18323  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [359:352]),
    .EN(\$14 ),
    .Q(iFIFOMem[359:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18324  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [367:360]),
    .EN(\$14 ),
    .Q(iFIFOMem[367:360])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18325  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [375:368]),
    .EN(\$14 ),
    .Q(iFIFOMem[375:368])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18326  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [383:376]),
    .EN(\$14 ),
    .Q(iFIFOMem[383:376])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18327  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [391:384]),
    .EN(\$14 ),
    .Q(iFIFOMem[391:384])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18328  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [399:392]),
    .EN(\$14 ),
    .Q(iFIFOMem[399:392])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18329  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [407:400]),
    .EN(\$14 ),
    .Q(iFIFOMem[407:400])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18330  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [415:408]),
    .EN(\$14 ),
    .Q(iFIFOMem[415:408])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18331  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [423:416]),
    .EN(\$14 ),
    .Q(iFIFOMem[423:416])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18332  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [431:424]),
    .EN(\$14 ),
    .Q(iFIFOMem[431:424])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18333  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3093:Bwmux$1545 [511:504]),
    .EN(\$14 ),
    .Q(iFIFOMem[511:504])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18263  (
    .A({ CLEAR, \$14  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18262 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18266  (
    .A({ CLEAR, \$81 , \$68  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18265 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18269  (
    .A({ CLEAR, \$23  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18268 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17214  (
    .A(iWRAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17213 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17218  (
    .A(iRDAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17217 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18500  (
    .A(\$81 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18501 [5])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:3092:Mux$1549 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32 ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$7646  (
    .A(\$auto$opt_share.cc:222:merge_operators$18499 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$iUSAGE$85 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7656  (
    .A(\$25 [6:0]),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iRDAddr$30 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$7660  (
    .A(\$16 ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iWRAddr$29 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18501 [4:0] = { \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], \$auto$rtlil.cc:3092:Mux$18501 [5], 1'h1 };
  assign { \$auto$rtlil.cc:3114:Demux$1544 [510:504], \$auto$rtlil.cc:3114:Demux$1544 [502:496], \$auto$rtlil.cc:3114:Demux$1544 [494:488], \$auto$rtlil.cc:3114:Demux$1544 [486:480], \$auto$rtlil.cc:3114:Demux$1544 [478:472], \$auto$rtlil.cc:3114:Demux$1544 [470:464], \$auto$rtlil.cc:3114:Demux$1544 [462:456], \$auto$rtlil.cc:3114:Demux$1544 [454:448], \$auto$rtlil.cc:3114:Demux$1544 [446:440], \$auto$rtlil.cc:3114:Demux$1544 [438:432], \$auto$rtlil.cc:3114:Demux$1544 [430:424], \$auto$rtlil.cc:3114:Demux$1544 [422:416], \$auto$rtlil.cc:3114:Demux$1544 [414:408], \$auto$rtlil.cc:3114:Demux$1544 [406:400], \$auto$rtlil.cc:3114:Demux$1544 [398:392], \$auto$rtlil.cc:3114:Demux$1544 [390:384], \$auto$rtlil.cc:3114:Demux$1544 [382:376], \$auto$rtlil.cc:3114:Demux$1544 [374:368], \$auto$rtlil.cc:3114:Demux$1544 [366:360], \$auto$rtlil.cc:3114:Demux$1544 [358:352], \$auto$rtlil.cc:3114:Demux$1544 [350:344], \$auto$rtlil.cc:3114:Demux$1544 [342:336], \$auto$rtlil.cc:3114:Demux$1544 [334:328], \$auto$rtlil.cc:3114:Demux$1544 [326:320], \$auto$rtlil.cc:3114:Demux$1544 [318:312], \$auto$rtlil.cc:3114:Demux$1544 [310:304], \$auto$rtlil.cc:3114:Demux$1544 [302:296], \$auto$rtlil.cc:3114:Demux$1544 [294:288], \$auto$rtlil.cc:3114:Demux$1544 [286:280], \$auto$rtlil.cc:3114:Demux$1544 [278:272], \$auto$rtlil.cc:3114:Demux$1544 [270:264], \$auto$rtlil.cc:3114:Demux$1544 [262:256], \$auto$rtlil.cc:3114:Demux$1544 [254:248], \$auto$rtlil.cc:3114:Demux$1544 [246:240], \$auto$rtlil.cc:3114:Demux$1544 [238:232], \$auto$rtlil.cc:3114:Demux$1544 [230:224], \$auto$rtlil.cc:3114:Demux$1544 [222:216], \$auto$rtlil.cc:3114:Demux$1544 [214:208], \$auto$rtlil.cc:3114:Demux$1544 [206:200], \$auto$rtlil.cc:3114:Demux$1544 [198:192], \$auto$rtlil.cc:3114:Demux$1544 [190:184], \$auto$rtlil.cc:3114:Demux$1544 [182:176], \$auto$rtlil.cc:3114:Demux$1544 [174:168], \$auto$rtlil.cc:3114:Demux$1544 [166:160], \$auto$rtlil.cc:3114:Demux$1544 [158:152], \$auto$rtlil.cc:3114:Demux$1544 [150:144], \$auto$rtlil.cc:3114:Demux$1544 [142:136], \$auto$rtlil.cc:3114:Demux$1544 [134:128], \$auto$rtlil.cc:3114:Demux$1544 [126:120], \$auto$rtlil.cc:3114:Demux$1544 [118:112], \$auto$rtlil.cc:3114:Demux$1544 [110:104], \$auto$rtlil.cc:3114:Demux$1544 [102:96], \$auto$rtlil.cc:3114:Demux$1544 [94:88], \$auto$rtlil.cc:3114:Demux$1544 [86:80], \$auto$rtlil.cc:3114:Demux$1544 [78:72], \$auto$rtlil.cc:3114:Demux$1544 [70:64], \$auto$rtlil.cc:3114:Demux$1544 [62:56], \$auto$rtlil.cc:3114:Demux$1544 [54:48], \$auto$rtlil.cc:3114:Demux$1544 [46:40], \$auto$rtlil.cc:3114:Demux$1544 [38:32], \$auto$rtlil.cc:3114:Demux$1544 [30:24], \$auto$rtlil.cc:3114:Demux$1544 [22:16], \$auto$rtlil.cc:3114:Demux$1544 [14:8], \$auto$rtlil.cc:3114:Demux$1544 [6:0] } = { \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [511], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [503], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [495], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [487], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [479], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [471], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [463], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [455], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [447], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [439], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [431], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [423], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [415], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [407], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [399], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [391], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [383], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [375], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [367], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [359], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [351], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [343], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [335], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [327], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [319], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [311], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [303], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [295], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [287], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [279], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [271], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [263], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [255], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [247], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [239], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [231], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [223], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [215], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [207], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [199], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [191], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [183], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [175], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [167], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [159], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [151], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [143], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [135], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [127], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [119], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [111], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [103], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [95], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [87], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [79], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [71], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [63], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [55], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [47], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [39], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [31], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [23], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [15], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7], \$auto$rtlil.cc:3114:Demux$1544 [7] };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18335 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18337 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18504 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18506 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$10  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$18506 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18504 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(D),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18334  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18504 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18337 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18336  (
    .A({ \$17 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18335 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18338  (
    .A({ CE, \$auto$opt_dff.cc:194:make_patterns_logic$18335  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18337 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18505  (
    .A(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18506 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7830  (
    .A(Q),
    .B(1'h0),
    .S(\$26 ),
    .Y(\$Q$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7838  (
    .A(\$Q$27 ),
    .B(\$24 ),
    .Y(\$Q$28 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18506 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18340 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18342 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18509 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18511 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$10  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$18511 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18509 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(D),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18339  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18509 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18342 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18341  (
    .A({ \$17 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18340 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18343  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18340 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18342 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18510  (
    .A(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18511 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7776  (
    .A(Q),
    .B(1'h0),
    .S(\$26 ),
    .Y(\$Q$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7784  (
    .A(\$Q$27 ),
    .B(\$24 ),
    .Y(\$Q$28 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18511 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18345 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18347 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18514 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18516 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$10  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$18516 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18514 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(D),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18344  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18514 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18347 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18346  (
    .A({ \$17 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18345 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18348  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18345 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18347 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18515  (
    .A(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18516 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7803  (
    .A(Q),
    .B(1'h0),
    .S(\$26 ),
    .Y(\$Q$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7811  (
    .A(\$Q$27 ),
    .B(\$24 ),
    .Y(\$Q$28 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18516 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18350 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18352 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18519 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$18521 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$10  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$18521 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18519 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(2'h2),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(2'h2),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(D),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18349  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18519 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18352 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18351  (
    .A({ \$17 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18350 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18353  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18350 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18352 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18520  (
    .A(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18521 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7749  (
    .A(Q),
    .B(1'h0),
    .S(\$26 ),
    .Y(\$Q$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7757  (
    .A(\$Q$27 ),
    .B(\$24 ),
    .Y(\$Q$28 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18521 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$24 ;
  wire \$26 ;
  wire \$7 ;
  wire \$9 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$27 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$28 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18355 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18357 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$18524 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$18526 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [2:0] iCount;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$10  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$18526 [2], \$auto$rtlil.cc:3092:Mux$18526 [2], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18524 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(D),
    .Y(\$13 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$13 ),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(iCount),
    .B(3'h4),
    .Y(\$24 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iCount),
    .Y(\$26 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(iCount),
    .B(3'h4),
    .Y(\$7 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(D),
    .B(\$7 ),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18354  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18524 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18357 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18356  (
    .A({ \$17 , \$9  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18355 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18358  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18355 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18357 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18525  (
    .A(\$9 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18526 [2])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$28 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3631  (
    .A(Q),
    .B(1'h0),
    .S(\$26 ),
    .Y(\$Q$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3639  (
    .A(\$Q$27 ),
    .B(\$24 ),
    .Y(\$Q$28 )
  );
  assign \$auto$rtlil.cc:3092:Mux$18526 [1:0] = { \$auto$rtlil.cc:3092:Mux$18526 [2], 1'h1 };
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_mv_filter.sv:35.8" */
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire [4:0] \$11 ;
  wire \$3 ;
  wire \$9 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18360 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18362 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18364 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire [4:0] \$iCounter$17 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  wire \$iQ$14 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire \$iQ$18 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:40.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:41.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:38.14" */
  input SAMPLE;
  wire SAMPLE;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:45.15" */
  wire [4:0] iCounter;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:46.5" */
  wire iQ;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd5)
  ) \$10  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$11 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iCounter),
    .B(4'ha),
    .Y(\$3 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(SAMPLE),
    .B(D),
    .Y(\$9 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$18359  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$17 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18364 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18361  (
    .A({ CLEAR, \$9 , \$3  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18360 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18363  (
    .A({ CLEAR, \$3  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18362 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18365  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18362 , \$auto$opt_dff.cc:194:make_patterns_logic$18360  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18364 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iQ$18 ),
    .Q(iQ)
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3658  (
    .A(\$iQ$14 ),
    .B(1'h0),
    .S(CLEAR),
    .Y(\$iQ$18 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$3661  (
    .A(\$11 ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$iCounter$17 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3670  (
    .A(iQ),
    .B(\$3 ),
    .Y(\$iQ$14 )
  );
  assign Q = iQ;
endmodule

/* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" */
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$103 ;
  wire \$105 ;
  wire \$22 ;
  wire \$25 ;
  wire [3:0] \$29 ;
  wire \$3 ;
  wire \$33 ;
  wire \$35 ;
  wire \$43 ;
  wire \$45 ;
  wire \$53 ;
  wire \$55 ;
  wire \$63 ;
  wire \$65 ;
  wire \$7 ;
  wire \$73 ;
  wire \$75 ;
  wire \$79 ;
  wire \$85 ;
  wire \$91 ;
  wire \$97 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16874 ;
  wire \$auto$rtlil.cc:2965:LogicNot$59 ;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" */
  wire [4:0] addr_hit;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" */
  wire addrmiss;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" */
  wire [31:0] bootaddr_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:73.16" */
  wire [31:0] bootaddr_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" */
  wire bootaddr_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" */
  wire bootmode_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:82.9" */
  wire bootmode_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" */
  wire bootmode_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" */
  wire [31:0] corestatus_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:79.16" */
  wire [31:0] corestatus_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" */
  wire corestatus_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" */
  input devmode_i;
  wire devmode_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" */
  wire fetchen_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:76.9" */
  wire fetchen_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" */
  wire fetchen_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" */
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" */
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:37.24" */
  wire [4:0] reg_addr;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:39.19" */
  wire [3:0] reg_be;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" */
  wire reg_error;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:48.14" */
  /* unused_bits = "43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69" */
  wire [69:0] reg_intf_req;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:49.14" */
  wire [33:0] reg_intf_rsp;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:40.19" */
  wire [31:0] reg_rdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:45.18" */
  wire [31:0] reg_rdata_next;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" */
  wire reg_re;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:38.19" */
  wire [31:0] reg_wdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" */
  wire reg_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" */
  wire sram_dly_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:85.9" */
  wire sram_dly_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" */
  wire sram_dly_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" */
  wire wr_err;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(reg_req_i[0]),
    .B(reg_req_i[37]),
    .Y(reg_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(\$97 ),
    .B(\$105 ),
    .Y(bootmode_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(addr_hit[4]),
    .B(reg_we),
    .Y(\$103 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(reg_error),
    .Y(\$105 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\$103 ),
    .B(\$105 ),
    .Y(sram_dly_we)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(reg_req_i[42:38]),
    .Y(addr_hit[0])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(reg_req_i[42:38]),
    .B(3'h4),
    .Y(addr_hit[1])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(reg_req_i[42:38]),
    .B(4'h8),
    .Y(addr_hit[2])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(reg_req_i[42:38]),
    .B(4'hc),
    .Y(addr_hit[3])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(reg_req_i[42:38]),
    .B(5'h10),
    .Y(addr_hit[4])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(reg_req_i[37]),
    .Y(\$3 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(addr_hit),
    .Y(\$22 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$22 ),
    .Y(\$auto$rtlil.cc:2965:LogicNot$59 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(reg_re),
    .B(reg_we),
    .Y(\$25 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(\$25 ),
    .B(\$auto$rtlil.cc:2965:LogicNot$59 ),
    .Y(addrmiss)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$28  (
    .A(reg_req_i[4:1]),
    .Y(\$29 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$29 ),
    .Y(\$33 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_hit[0]),
    .B(\$33 ),
    .Y(\$35 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(reg_req_i[0]),
    .B(\$3 ),
    .Y(reg_re)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(addr_hit[1]),
    .B(\$29 [0]),
    .Y(\$43 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$35 ),
    .B(\$43 ),
    .Y(\$45 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(addr_hit[2]),
    .B(\$33 ),
    .Y(\$53 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$45 ),
    .B(\$53 ),
    .Y(\$55 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(devmode_i),
    .B(addrmiss),
    .Y(\$7 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(addr_hit[3]),
    .B(\$29 [0]),
    .Y(\$63 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$55 ),
    .B(\$63 ),
    .Y(\$65 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(addr_hit[4]),
    .B(\$29 [0]),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$65 ),
    .B(\$73 ),
    .Y(\$75 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(reg_we),
    .B(\$75 ),
    .Y(wr_err)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(addr_hit[0]),
    .B(reg_we),
    .Y(\$79 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7 ),
    .B(wr_err),
    .Y(reg_error)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$79 ),
    .B(\$105 ),
    .Y(bootaddr_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(addr_hit[1]),
    .B(reg_we),
    .Y(\$85 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(\$85 ),
    .B(\$105 ),
    .Y(fetchen_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(addr_hit[2]),
    .B(reg_we),
    .Y(\$91 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$91 ),
    .B(\$105 ),
    .Y(corestatus_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(addr_hit[3]),
    .B(reg_we),
    .Y(\$97 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16873  (
    .A({ addr_hit[4:3], addr_hit[1] }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16874 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd31)
  ) \$procmux$14928  (
    .A(31'h7fffffff),
    .B({ bootaddr_qs[31:1], corestatus_qs[31:1], 31'h00000000 }),
    .S({ addr_hit[0], addr_hit[2], \$auto$opt_reduce.cc:137:opt_pmux$16874  }),
    .Y(reg_rsp_o[33:3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$14935  (
    .A(1'h1),
    .B({ bootaddr_qs[0], fetchen_qs, corestatus_qs[0], bootmode_qs, sram_dly_qs }),
    .S({ addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] }),
    .Y(reg_rsp_o[2])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign bootaddr_wd = reg_req_i[36:5];
  assign bootmode_wd = reg_req_i[5];
  assign corestatus_wd = reg_req_i[36:5];
  assign fetchen_wd = reg_req_i[5];
  assign reg_addr = reg_req_i[42:38];
  assign reg_be = reg_req_i[4:1];
  assign reg_intf_req = reg_req_i;
  assign reg_intf_rsp = { reg_rsp_o[33:2], reg_error, 1'h1 };
  assign reg_rdata = reg_rsp_o[33:2];
  assign reg_rdata_next = reg_rsp_o[33:2];
  assign reg_rsp_o[1:0] = { reg_error, 1'h1 };
  assign reg_wdata = reg_req_i[36:5];
  assign sram_dly_wd = reg_req_i[5];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "ihp13/tc_clk.sv:9.8" */
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  /* src = "ihp13/tc_clk.sv:10.18" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_clk.sv:11.18" */
  output clk_o;
  wire clk_o;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:14.16" */
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$293 ;
  wire \$295 ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$101 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(be_i[1]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(be_i[0]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(be_i[2]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(be_i[3]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(we_i),
    .Y(\$293 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(req_i),
    .B(\$293 ),
    .Y(\$295 )
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18366  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$295 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15558  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15592  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15625  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15657  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15688  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15718  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15747  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15775  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15802  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15828  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15853  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15877  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15900  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15922  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15943  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15963  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15982  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16000  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16017  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16033  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16048  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16062  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16075  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16087  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16098  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16108  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16117  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16125  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16132  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16138  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16143  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16147  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$293 ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101 ;
  wire \$293 ;
  wire \$295 ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$101 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(be_i[1]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(be_i[0]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(be_i[2]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(be_i[3]),
    .B(\$101 ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$292  (
    .A(we_i),
    .Y(\$293 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(req_i),
    .B(\$293 ),
    .Y(\$295 )
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18367  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$295 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14964  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14998  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15031  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15063  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15094  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15124  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15153  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15181  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15208  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15234  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15259  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15283  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15306  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15328  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15349  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15369  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15388  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15406  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15423  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15439  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15454  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15468  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15481  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15493  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15504  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15514  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15523  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15531  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15538  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15544  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15549  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15553  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$293 ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "rtl/timer_unit/timer_unit.sv:37.8" */
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, addr_i, wdata_i, be_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o);
  wire \$101 ;
  wire \$116 ;
  wire \$125 ;
  wire \$133 ;
  wire \$144 ;
  wire \$154 ;
  wire \$162 ;
  wire \$17 ;
  wire \$181 ;
  wire \$186 ;
  wire \$19 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$202 ;
  wire \$208 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$230 ;
  wire \$236 ;
  wire \$250 ;
  wire \$258 ;
  wire \$276 ;
  wire \$303 ;
  wire \$305 ;
  wire \$316 ;
  wire \$323 ;
  wire \$45 ;
  wire \$49 ;
  wire \$57 ;
  wire \$77 ;
  wire \$81 ;
  wire \$83 ;
  wire \$87 ;
  wire \$91 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18378 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18380 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18389 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18391 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18369 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18372 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18375 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18382 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18386 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18393 ;
  wire \$auto$opt_share.cc:222:merge_operators$18527 ;
  wire \$auto$rtlil.cc:3092:Mux$17265 ;
  wire \$auto$rtlil.cc:3092:Mux$17268 ;
  wire \$auto$rtlil.cc:3092:Mux$18529 ;
  wire [31:0] \$procmux$14331_Y ;
  wire \$procmux$14332_CMP ;
  wire \$procmux$14333_CMP ;
  wire \$procmux$14334_CMP ;
  wire \$procmux$14335_CMP ;
  wire \$procmux$14336_CMP ;
  wire \$procmux$14337_CMP ;
  wire \$procmux$14360_Y ;
  wire \$procmux$14372_Y ;
  wire \$procmux$14385_Y ;
  wire \$procmux$14397_Y ;
  wire \$procmux$14404_Y ;
  wire \$procmux$14422_CMP ;
  wire \$procmux$14431_CMP ;
  wire [31:0] \$procmux$14442_Y ;
  wire \$procmux$14443_CMP ;
  wire [31:0] \$procmux$14455_Y ;
  wire \$procmux$14456_CMP ;
  wire \$procmux$14459_Y ;
  wire \$procmux$14464_Y ;
  wire \$procmux$14470_Y ;
  wire \$procmux$14477_Y ;
  wire \$procmux$14487_Y ;
  wire \$procmux$14498_Y ;
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$procmux$14509_Y ;
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$procmux$14512_Y ;
  wire \$procmux$14533_Y ;
  wire \$procmux$14583_Y ;
  wire \$procmux$14594_Y ;
  wire \$procmux$14605_Y ;
  wire \$procmux$14613_Y ;
  wire \$procmux$14621_Y ;
  wire \$procmux$14643_Y ;
  wire \$procmux$14667_Y ;
  wire \$procmux$14677_Y ;
  wire \$procmux$14687_Y ;
  wire \$procmux$14694_Y ;
  wire \$procmux$14704_Y ;
  wire \$procmux$14739_Y ;
  wire \$procmux$14754_Y ;
  wire \$procmux$14759_Y ;
  wire \$procmux$14762_Y ;
  wire \$procmux$14808_Y ;
  wire \$procmux$14843_Y ;
  /* src = "rtl/timer_unit/timer_unit.sv:91.56" */
  wire [1:0] CS;
  wire NS;
  /* src = "rtl/timer_unit/timer_unit.sv:48.39" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/timer_unit/timer_unit.sv:51.39" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/timer_unit/timer_unit.sv:66.39" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/timer_unit/timer_unit.sv:42.39" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:61.39" */
  input event_hi_i;
  wire event_hi_i;
  /* src = "rtl/timer_unit/timer_unit.sv:60.39" */
  input event_lo_i;
  wire event_lo_i;
  /* src = "rtl/timer_unit/timer_unit.sv:53.39" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/timer_unit/timer_unit.sv:52.39" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/timer_unit/timer_unit.sv:64.39" */
  output irq_hi_o;
  wire irq_hi_o;
  /* src = "rtl/timer_unit/timer_unit.sv:63.39" */
  output irq_lo_o;
  wire irq_lo_o;
  /* src = "rtl/timer_unit/timer_unit.sv:57.39" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/timer_unit/timer_unit.sv:56.39" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/timer_unit/timer_unit.sv:58.39" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/timer_unit/timer_unit.sv:55.39" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/timer_unit/timer_unit.sv:45.39" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:47.39" */
  input req_i;
  wire req_i;
  /* src = "rtl/timer_unit/timer_unit.sv:43.39" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit.sv:70.25" */
  /* unused_bits = "6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_addr;
  /* src = "rtl/timer_unit/timer_unit.sv:80.25" */
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_cfg_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:80.35" */
  wire [31:0] s_cfg_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:79.25" */
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_cfg_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:79.35" */
  wire [31:0] s_cfg_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:86.37" */
  wire s_enable_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.19" */
  wire s_enable_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:86.83" */
  wire s_enable_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.55" */
  wire s_enable_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:75.19" */
  wire s_ref_clk0;
  /* src = "rtl/timer_unit/timer_unit.sv:75.31" */
  wire s_ref_clk1;
  /* src = "rtl/timer_unit/timer_unit.sv:75.43" */
  wire s_ref_clk2;
  /* src = "rtl/timer_unit/timer_unit.sv:75.55" */
  wire s_ref_clk3;
  /* src = "rtl/timer_unit/timer_unit.sv:75.67" */
  wire s_ref_clk_edge;
  /* src = "rtl/timer_unit/timer_unit.sv:75.83" */
  wire s_ref_clk_edge_del;
  /* src = "rtl/timer_unit/timer_unit.sv:69.19" */
  wire s_req;
  /* src = "rtl/timer_unit/timer_unit.sv:87.36" */
  wire s_reset_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.19" */
  wire s_reset_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:87.80" */
  wire s_reset_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.53" */
  wire s_reset_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.70" */
  wire s_reset_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.53" */
  wire s_reset_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.36" */
  wire s_start_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.19" */
  wire s_start_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.39" */
  wire s_target_reached_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.19" */
  wire s_target_reached_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.90" */
  wire s_target_reached_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.59" */
  wire s_target_reached_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:84.41" */
  wire [31:0] s_timer_cmp_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:83.41" */
  wire [31:0] s_timer_cmp_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:82.25" */
  wire [31:0] s_timer_val_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:81.25" */
  wire [31:0] s_timer_val_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:69.25" */
  wire s_wen;
  /* src = "rtl/timer_unit/timer_unit.sv:72.39" */
  wire s_write_counter_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:72.19" */
  wire s_write_counter_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:50.39" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/timer_unit/timer_unit.sv:49.39" */
  input wen_i;
  wire wen_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(CS[0]),
    .B(s_wen),
    .Y(\$116 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(s_cfg_lo_reg[1]),
    .B(s_reset_timer_lo),
    .Y(\$125 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(s_cfg_lo_reg[4]),
    .B(s_target_reached_lo),
    .Y(\$133 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(\$133 ),
    .B(s_target_reached_hi),
    .Y(\$144 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(s_cfg_hi_reg[1]),
    .B(s_reset_timer_hi),
    .Y(\$154 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(wen_i),
    .Y(\$17 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(s_cfg_hi_reg[4]),
    .B(s_target_reached_hi),
    .Y(\$162 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(req_i),
    .B(\$17 ),
    .Y(\$19 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(s_cfg_lo_reg[6]),
    .B(s_target_reached_prescaler_lo),
    .Y(\$181 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(s_cfg_hi_reg[6]),
    .B(s_target_reached_prescaler_hi),
    .Y(\$186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$192 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(s_cfg_lo_reg[7]),
    .Y(\$194 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\$192 ),
    .B(\$194 ),
    .Y(\$196 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\$192 ),
    .B(s_cfg_lo_reg[7]),
    .Y(\$202 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(s_cfg_lo_reg[6]),
    .B(s_cfg_lo_reg[7]),
    .Y(\$208 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(s_cfg_hi_reg[6]),
    .Y(\$220 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(s_cfg_hi_reg[7]),
    .Y(\$222 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\$220 ),
    .B(\$222 ),
    .Y(\$224 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$229  (
    .A(\$220 ),
    .B(s_cfg_hi_reg[7]),
    .Y(\$230 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$235  (
    .A(s_cfg_hi_reg[6]),
    .B(s_cfg_hi_reg[7]),
    .Y(\$236 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$249  (
    .A(s_cfg_lo_reg[0]),
    .B(s_cfg_lo_reg[31]),
    .Y(\$250 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$258 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$267  (
    .A(\$auto$rtlil.cc:3092:Mux$18529 ),
    .B(\$258 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$18527 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(s_target_reached_prescaler_lo),
    .B(s_ref_clk_edge_del),
    .Y(\$276 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(s_target_reached_hi),
    .B(s_cfg_hi_reg[2]),
    .Y(\$303 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(s_target_reached_lo),
    .B(s_target_reached_hi),
    .Y(\$305 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$306  (
    .A(\$auto$rtlil.cc:3092:Mux$17265 ),
    .B(s_cfg_lo_reg[2]),
    .Y(irq_lo_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$315  (
    .A(s_ref_clk2),
    .Y(\$316 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$317  (
    .A(s_ref_clk1),
    .B(\$316 ),
    .Y(s_ref_clk_edge)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$322  (
    .A(s_ref_clk3),
    .Y(\$323 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$324  (
    .A(s_ref_clk2),
    .B(\$323 ),
    .Y(s_ref_clk_edge_del)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$327  (
    .A(s_cfg_hi_reg[0]),
    .B(s_cfg_lo_reg[0]),
    .Y(busy_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(event_lo_i),
    .B(s_cfg_lo[3]),
    .Y(\$45 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$45 ),
    .B(s_start_timer_lo),
    .Y(\$49 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(s_cfg_lo[5]),
    .B(s_target_reached_lo),
    .Y(\$57 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(\$57 ),
    .B(s_target_reached_hi),
    .Y(\$101 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(event_hi_i),
    .B(s_cfg_hi[3]),
    .Y(\$77 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$77 ),
    .B(s_start_timer_hi),
    .Y(\$81 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(s_cfg_hi_reg[31]),
    .Y(\$83 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$83 ),
    .B(s_cfg_hi[5]),
    .Y(\$87 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$87 ),
    .B(s_target_reached_hi),
    .Y(\$91 )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18368  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18369 ),
    .Q(s_timer_cmp_lo_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$18371  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18372 ),
    .Q(s_timer_cmp_hi_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(28'h0000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd28)
  ) \$auto$ff.cc:266:slice$18374  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ wdata_i[31:6], wdata_i[4], wdata_i[2] }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18375 ),
    .Q({ s_cfg_lo_reg[31:6], s_cfg_lo_reg[4], s_cfg_lo_reg[2] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18377  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_lo[1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18382 ),
    .Q(s_cfg_lo_reg[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18384  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ s_cfg_lo[5], s_cfg_lo[3], s_cfg_lo[0] }),
    .Q({ s_cfg_lo_reg[5], s_cfg_lo_reg[3], s_cfg_lo_reg[0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(28'h0000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd28)
  ) \$auto$ff.cc:266:slice$18385  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ wdata_i[31:6], wdata_i[4], wdata_i[2] }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18386 ),
    .Q({ s_cfg_hi_reg[31:6], s_cfg_hi_reg[4], s_cfg_hi_reg[2] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18388  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_hi[1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18393 ),
    .Q(s_cfg_hi_reg[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18395  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ s_cfg_hi[5], s_cfg_hi[3], s_cfg_hi[0] }),
    .Q({ s_cfg_hi_reg[5], s_cfg_hi_reg[3], s_cfg_hi_reg[0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:98.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18396  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_i),
    .Q(CS[0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18379  (
    .A({ s_reset_count_lo, \$19  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18378 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18381  (
    .A({ \$procmux$14456_CMP , s_reset_count_lo, \$19  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18380 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18390  (
    .A({ s_reset_count_hi, \$19  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18389 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18392  (
    .A({ \$procmux$14443_CMP , s_reset_count_hi, \$19  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18391 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18370  (
    .A({ \$procmux$14431_CMP , \$19  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18369 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18373  (
    .A({ \$procmux$14422_CMP , \$19  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18372 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18376  (
    .A({ \$procmux$14456_CMP , \$19  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18375 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18383  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18380 , \$auto$opt_dff.cc:194:make_patterns_logic$18378  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18382 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18387  (
    .A({ \$procmux$14443_CMP , \$19  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18386 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18394  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18391 , \$auto$opt_dff.cc:194:make_patterns_logic$18389  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18393 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$17264  (
    .A(s_target_reached_lo),
    .B(\$305 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$auto$rtlil.cc:3092:Mux$17265 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$17267  (
    .A(s_target_reached_prescaler_lo),
    .B(\$276 ),
    .S(\$208 ),
    .Y(\$auto$rtlil.cc:3092:Mux$17268 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18528  (
    .A(\$auto$rtlil.cc:3092:Mux$17268 ),
    .B(s_ref_clk_edge_del),
    .S(\$202 ),
    .Y(\$auto$rtlil.cc:3092:Mux$18529 )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_addr  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i),
    .Q(s_addr)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk0  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ref_clk_i),
    .Q(s_ref_clk0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk0),
    .Q(s_ref_clk1)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk2  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk1),
    .Q(s_ref_clk2)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk3  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk2),
    .Q(s_ref_clk3)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_wen  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wen_i),
    .Q(s_wen)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$14331  (
    .A(32'd0),
    .B({ s_cfg_lo_reg, s_cfg_hi_reg, s_timer_val_lo, s_timer_val_hi, s_timer_cmp_lo_reg, s_timer_cmp_hi_reg }),
    .S({ \$procmux$14337_CMP , \$procmux$14336_CMP , \$procmux$14335_CMP , \$procmux$14334_CMP , \$procmux$14333_CMP , \$procmux$14332_CMP  }),
    .Y(\$procmux$14331_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14332_CMP0  (
    .A(s_addr[5:0]),
    .B(5'h14),
    .Y(\$procmux$14332_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:300.18-300.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14333_CMP0  (
    .A(s_addr[5:0]),
    .B(5'h10),
    .Y(\$procmux$14333_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:297.18-297.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14334_CMP0  (
    .A(s_addr[5:0]),
    .B(4'hc),
    .Y(\$procmux$14334_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:294.18-294.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14335_CMP0  (
    .A(s_addr[5:0]),
    .B(4'h8),
    .Y(\$procmux$14335_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:291.18-291.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14336_CMP0  (
    .A(s_addr[5:0]),
    .B(3'h4),
    .Y(\$procmux$14336_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:288.18-288.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14337_CMP0  (
    .A(s_addr[5:0]),
    .Y(\$procmux$14337_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14341  (
    .A(32'd0),
    .B(\$procmux$14331_Y ),
    .S(\$116 ),
    .Y(r_rdata_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14347  (
    .A(\$303 ),
    .B(1'h0),
    .S(s_cfg_lo_reg[31]),
    .Y(irq_hi_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:254.4-254.32|rtl/timer_unit/timer_unit.sv:253.2-254.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14349  (
    .A(\$procmux$14509_Y [1]),
    .B(1'h0),
    .S(s_reset_count_hi),
    .Y(s_cfg_hi[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:250.4-250.32|rtl/timer_unit/timer_unit.sv:249.2-250.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14355  (
    .A(\$procmux$14512_Y [1]),
    .B(1'h0),
    .S(s_reset_count_lo),
    .Y(s_cfg_lo[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:244.11-244.37|rtl/timer_unit/timer_unit.sv:243.7-244.37" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14360  (
    .A(\$procmux$14509_Y [0]),
    .B(1'h0),
    .S(\$101 ),
    .Y(\$procmux$14360_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14372  (
    .A(\$procmux$14360_Y ),
    .B(1'h0),
    .S(\$91 ),
    .Y(\$procmux$14372_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14381  (
    .A(\$procmux$14372_Y ),
    .B(\$81 ),
    .Y(s_cfg_hi[0])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:231.7-231.33|rtl/timer_unit/timer_unit.sv:230.6-231.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14385  (
    .A(\$procmux$14512_Y [0]),
    .B(1'h0),
    .S(\$101 ),
    .Y(\$procmux$14385_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14397  (
    .A(\$procmux$14404_Y ),
    .B(\$procmux$14385_Y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14397_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:226.7-226.33|rtl/timer_unit/timer_unit.sv:225.5-226.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14404  (
    .A(\$procmux$14512_Y [0]),
    .B(1'h0),
    .S(\$57 ),
    .Y(\$procmux$14404_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14414  (
    .A(\$procmux$14397_Y ),
    .B(\$49 ),
    .Y(s_cfg_lo[0])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14422_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h14),
    .Y(\$procmux$14422_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14431_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h10),
    .Y(\$procmux$14431_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14442  (
    .A({ s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] }),
    .B(wdata_i),
    .S(\$procmux$14443_CMP ),
    .Y(\$procmux$14442_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$14443_CMP0  (
    .A(addr_i[5:0]),
    .B(3'h4),
    .Y(\$procmux$14443_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14455  (
    .A({ s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] }),
    .B(wdata_i),
    .S(\$procmux$14456_CMP ),
    .Y(\$procmux$14455_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14456_CMP0  (
    .A(addr_i[5:0]),
    .Y(\$procmux$14456_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14460_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h24),
    .Y(\$procmux$14459_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14465_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h20),
    .Y(\$procmux$14464_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14471_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h1c),
    .Y(\$procmux$14470_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$14478_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h18),
    .Y(\$procmux$14477_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14488_CMP0  (
    .A(addr_i[5:0]),
    .B(4'hc),
    .Y(\$procmux$14487_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$14499_CMP0  (
    .A(addr_i[5:0]),
    .B(4'h8),
    .Y(\$procmux$14498_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14509  (
    .A({ s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] }),
    .B(\$procmux$14442_Y ),
    .S(\$19 ),
    .Y({ s_cfg_hi[31:2], \$procmux$14509_Y [1:0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14512  (
    .A({ s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] }),
    .B(\$procmux$14455_Y ),
    .S(\$19 ),
    .Y({ s_cfg_lo[31:2], \$procmux$14512_Y [1:0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14515  (
    .A(\$19 ),
    .B(\$procmux$14459_Y ),
    .Y(s_reset_timer_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14518  (
    .A(\$19 ),
    .B(\$procmux$14464_Y ),
    .Y(s_reset_timer_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14521  (
    .A(\$19 ),
    .B(\$procmux$14470_Y ),
    .Y(s_start_timer_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14524  (
    .A(\$19 ),
    .B(\$procmux$14477_Y ),
    .Y(s_start_timer_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14527  (
    .A(\$19 ),
    .B(\$procmux$14487_Y ),
    .Y(s_write_counter_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14530  (
    .A(\$19 ),
    .B(\$procmux$14498_Y ),
    .Y(s_write_counter_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14533  (
    .A(1'h1),
    .B(s_ref_clk_edge),
    .S(\$208 ),
    .Y(\$procmux$14533_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14583  (
    .A(s_target_reached_prescaler_lo),
    .B(s_ref_clk_edge),
    .S(\$202 ),
    .Y(\$procmux$14583_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14594  (
    .A(\$procmux$14533_Y ),
    .B(\$procmux$14759_Y ),
    .S(\$202 ),
    .Y(\$procmux$14594_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14605  (
    .A(\$auto$opt_share.cc:222:merge_operators$18527 ),
    .B(\$258 ),
    .S(\$196 ),
    .Y(\$procmux$14605_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14613  (
    .A(\$procmux$14583_Y ),
    .B(\$196 ),
    .Y(\$procmux$14613_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14621  (
    .A(\$procmux$14594_Y ),
    .B(\$procmux$14759_Y ),
    .S(\$196 ),
    .Y(\$procmux$14621_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14628  (
    .A(\$procmux$14759_Y ),
    .B(\$procmux$14621_Y ),
    .S(\$250 ),
    .Y(s_enable_count_prescaler_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14633  (
    .A(\$procmux$14704_Y ),
    .B(\$procmux$14605_Y ),
    .S(\$250 ),
    .Y(s_enable_count_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14638  (
    .A(\$procmux$14762_Y ),
    .B(\$procmux$14613_Y ),
    .S(\$250 ),
    .Y(s_enable_count_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:428.6-431.9|rtl/timer_unit/timer_unit.sv:427.4-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14643  (
    .A(1'h1),
    .B(s_ref_clk_edge),
    .S(\$236 ),
    .Y(\$procmux$14643_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14667  (
    .A(s_target_reached_prescaler_hi),
    .B(s_ref_clk_edge),
    .S(\$230 ),
    .Y(\$procmux$14667_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14677  (
    .A(\$procmux$14643_Y ),
    .B(1'h0),
    .S(\$230 ),
    .Y(\$procmux$14677_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14687  (
    .A(\$procmux$14667_Y ),
    .B(\$224 ),
    .Y(\$procmux$14687_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14694  (
    .A(\$procmux$14677_Y ),
    .B(1'h0),
    .S(\$224 ),
    .Y(\$procmux$14694_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14700  (
    .A(s_cfg_hi_reg[0]),
    .B(\$procmux$14694_Y ),
    .Y(s_enable_count_prescaler_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14704  (
    .A(s_cfg_hi_reg[0]),
    .B(\$procmux$14687_Y ),
    .Y(\$procmux$14704_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14739  (
    .A(\$procmux$14533_Y ),
    .B(1'h0),
    .S(\$202 ),
    .Y(\$procmux$14739_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14754  (
    .A(\$procmux$14739_Y ),
    .B(1'h0),
    .S(\$196 ),
    .Y(\$procmux$14754_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14759  (
    .A(s_cfg_lo_reg[0]),
    .B(\$procmux$14754_Y ),
    .Y(\$procmux$14759_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14762  (
    .A(s_cfg_lo_reg[0]),
    .B(\$procmux$14613_Y ),
    .Y(\$procmux$14762_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:376.7-376.41|rtl/timer_unit/timer_unit.sv:374.2-377.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14787  (
    .A(\$154 ),
    .B(\$186 ),
    .Y(s_reset_count_prescaler_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:371.7-371.41|rtl/timer_unit/timer_unit.sv:369.2-372.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14792  (
    .A(\$125 ),
    .B(\$181 ),
    .Y(s_reset_count_prescaler_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14808  (
    .A(\$162 ),
    .B(\$144 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14808_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14825  (
    .A(\$procmux$14808_Y ),
    .B(\$154 ),
    .Y(s_reset_count_hi)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14843  (
    .A(\$133 ),
    .B(\$144 ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$14843_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14858  (
    .A(\$procmux$14843_Y ),
    .B(\$125 ),
    .Y(s_reset_count_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:561.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i  counter_hi_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_hi_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_hi),
    .enable_count_i(s_enable_count_hi),
    .reset_count_i(s_reset_count_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_hi),
    .write_counter_i(s_write_counter_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:545.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i  counter_lo_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_lo_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_lo),
    .enable_count_i(s_enable_count_lo),
    .reset_count_i(s_reset_count_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_lo),
    .write_counter_i(s_write_counter_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:529.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i  prescaler_hi_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_hi_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_hi),
    .reset_count_i(s_reset_count_prescaler_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_hi),
    .write_counter_i(1'h0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:513.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i  prescaler_lo_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_lo_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_lo),
    .reset_count_i(s_reset_count_prescaler_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_lo),
    .write_counter_i(1'h0)
  );
  assign \$procmux$14509_Y [31:2] = s_cfg_hi[31:2];
  assign \$procmux$14512_Y [31:2] = s_cfg_lo[31:2];
  assign CS[1] = 1'h0;
  assign NS = req_i;
  assign gnt_o = 1'h1;
  assign r_opc_o = 1'h0;
  assign r_valid_o = CS[0];
  assign s_req = CS[0];
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire [31:0] \$8 ;
  wire [31:0] \$procmux$13165_Y ;
  wire [31:0] \$procmux$13175_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$19 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$7  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$8 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$19 ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13165  (
    .A(s_count_reg),
    .B(\$8 ),
    .S(enable_count_i),
    .Y(\$procmux$13165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13175  (
    .A(\$procmux$13165_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$13175_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13182  (
    .A(\$procmux$13175_Y ),
    .B(32'd0),
    .S(reset_count_i),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$19 ;
  wire [31:0] \$8 ;
  wire [31:0] \$procmux$13187_Y ;
  wire [31:0] \$procmux$13197_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$19 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$7  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$8 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$19 ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13187  (
    .A(s_count_reg),
    .B(\$8 ),
    .S(enable_count_i),
    .Y(\$procmux$13187_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13197  (
    .A(\$procmux$13187_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$13197_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13204  (
    .A(\$procmux$13197_Y ),
    .B(32'd0),
    .S(reset_count_i),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire [31:0] \$12 ;
  wire \$23 ;
  wire \$6 ;
  wire [31:0] \$procmux$13209_Y ;
  wire [31:0] \$procmux$13219_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$11  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$12 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$23 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(reset_count_i),
    .B(target_reached_o),
    .Y(\$6 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$23 ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13209  (
    .A(s_count_reg),
    .B(\$12 ),
    .S(enable_count_i),
    .Y(\$procmux$13209_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13219  (
    .A(\$procmux$13209_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$13219_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13226  (
    .A(\$procmux$13219_Y ),
    .B(32'd0),
    .S(\$6 ),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire [31:0] \$12 ;
  wire \$23 ;
  wire \$6 ;
  wire [31:0] \$procmux$13231_Y ;
  wire [31:0] \$procmux$13241_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$11  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$12 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$23 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(reset_count_i),
    .B(target_reached_o),
    .Y(\$6 )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$23 ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13231  (
    .A(s_count_reg),
    .B(\$12 ),
    .S(enable_count_i),
    .Y(\$procmux$13231_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13241  (
    .A(\$procmux$13231_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$13241_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13248  (
    .A(\$procmux$13241_Y ),
    .B(32'd0),
    .S(\$6 ),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/apb_uart/uart_baudgen.sv:35.8" */
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire \$11 ;
  wire [15:0] \$13 ;
  wire [15:0] \$7 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18398 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  wire [15:0] \$iCounter$14 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  wire [15:0] \$iCounter$9 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:41.16" */
  output BAUDTICK;
  wire BAUDTICK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/uart_baudgen.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_baudgen.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:40.21" */
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  /* src = "rtl/apb_uart/uart_baudgen.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_baudgen.sv:45.12" */
  wire [15:0] iCounter;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(iCounter),
    .Y(\$11 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$12  (
    .A(DIVIDER),
    .B(1'h1),
    .Y(\$13 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$6  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$7 )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(16'h0000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$auto$ff.cc:266:slice$18397  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$14 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18398 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18399  (
    .A({ CLEAR, CE, \$11  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18398 )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$BAUDTICK  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$11 ),
    .Q(BAUDTICK)
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7688  (
    .A(\$iCounter$9 ),
    .B(\$13 ),
    .S(\$11 ),
    .Y(\$iCounter$14 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$7698  (
    .A(\$7 ),
    .B(16'h0000),
    .S(CLEAR),
    .Y(\$iCounter$9 )
  );
endmodule

/* src = "rtl/apb_uart/uart_interrupt.sv:35.8" */
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$1 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$3 ;
  wire \$5 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  wire [3:0] \$auto$wreduce.cc:514:run$17112 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  wire [3:0] \$auto$wreduce.cc:514:run$17113 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  wire [3:0] \$iIIR$40 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  wire [3:0] \$iIIR$41 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  wire [3:0] \$iIIR$42 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:43.14" */
  input AFE;
  wire AFE;
  /* src = "rtl/apb_uart/uart_interrupt.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_interrupt.sv:42.14" */
  input CTI;
  wire CTI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:38.20" */
  input [3:0] IER;
  wire [3:0] IER;
  /* src = "rtl/apb_uart/uart_interrupt.sv:45.22" */
  output [3:0] IIR;
  wire [3:0] IIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/uart_interrupt.sv:39.20" */
  input [4:0] LSR;
  wire [4:0] LSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:44.20" */
  input [3:0] MSR;
  wire [3:0] MSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:41.14" */
  input RDA;
  wire RDA;
  /* src = "rtl/apb_uart/uart_interrupt.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_interrupt.sv:40.14" */
  input THI;
  wire THI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:52.5" */
  wire iCTIInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:55.11" */
  wire [3:0] iIIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:54.5" */
  wire iMSRInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:51.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:50.5" */
  wire iRLSInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:53.5" */
  wire iTHRInterrupt;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(LSR[1]),
    .B(LSR[2]),
    .Y(\$1 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(IER[0]),
    .B(CTI),
    .Y(iCTIInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(IER[1]),
    .B(THI),
    .Y(iTHRInterrupt)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(AFE),
    .Y(\$15 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(MSR[0]),
    .B(\$15 ),
    .Y(\$17 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17 ),
    .B(MSR[1]),
    .Y(\$19 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1 ),
    .B(LSR[3]),
    .Y(\$3 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19 ),
    .B(MSR[2]),
    .Y(\$21 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21 ),
    .B(MSR[3]),
    .Y(\$23 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(IER[3]),
    .B(\$23 ),
    .Y(iMSRInterrupt)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3 ),
    .B(LSR[4]),
    .Y(\$5 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(iIIR[0]),
    .Y(INT)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(IER[2]),
    .B(\$5 ),
    .Y(iRLSInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(IER[0]),
    .B(RDA),
    .Y(iRDAInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:62.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$iIIR  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iIIR$42 ),
    .Q(iIIR)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:87.13-87.29|rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7701  (
    .A(iMSRInterrupt),
    .Y(\$auto$wreduce.cc:514:run$17112 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7717  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$17112 [0] }),
    .B(2'h2),
    .S(iTHRInterrupt),
    .Y(\$auto$wreduce.cc:514:run$17113 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7730  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$17113 [1:0] }),
    .B(3'h4),
    .S(iRDAInterrupt),
    .Y(\$iIIR$40 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7740  (
    .A({ 1'h0, \$iIIR$40 [2:0] }),
    .B(4'hc),
    .S(iCTIInterrupt),
    .Y(\$iIIR$41 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7747  (
    .A(\$iIIR$41 ),
    .B(4'h6),
    .S(iRLSInterrupt),
    .Y(\$iIIR$42 )
  );
  assign \$auto$wreduce.cc:514:run$17112 [3:1] = 3'h0;
  assign \$auto$wreduce.cc:514:run$17113 [3:2] = 2'h0;
  assign \$iIIR$40 [3] = 1'h0;
  assign IIR = iIIR;
endmodule

/* src = "rtl/apb_uart/uart_receiver.sv:35.8" */
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$10 ;
  wire \$101 ;
  wire \$116 ;
  wire \$12 ;
  wire \$120 ;
  wire \$127 ;
  wire \$132 ;
  wire \$14 ;
  wire \$140 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$30 ;
  wire \$32 ;
  wire [3:0] \$41 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$8 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  wire [2:0] \$NState$104 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  wire [2:0] \$NState$108 ;
  wire [1:0] \$NState$87 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  wire [2:0] \$NState$88 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  wire [2:0] \$NState$93 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  wire [2:0] \$NState$94 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  wire [2:0] \$NState$97 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  wire \$PE$130 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  wire \$PE$134 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$PE$136 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18401 ;
  wire \$auto$rtlil.cc:3009:Lt$1574 ;
  wire [7:0] \$auto$rtlil.cc:3093:Bwmux$1579 ;
  wire [7:0] \$auto$rtlil.cc:3114:Demux$1577 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [7:0] \$iDOUT$45 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [3:0] \$iDataCount$44 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  wire \$iParityReceived$121 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$iParityReceived$135 ;
  wire \$procmux$7205_CMP ;
  wire \$procmux$7252_CMP ;
  wire \$procmux$7273_CMP ;
  /* src = "rtl/apb_uart/uart_receiver.sv:48.16" */
  output BI;
  wire BI;
  /* src = "rtl/apb_uart/uart_receiver.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.12" */
  wire [2:0] CState;
  /* src = "rtl/apb_uart/uart_receiver.sv:49.22" */
  output [7:0] DOUT;
  wire [7:0] DOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:43.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_receiver.sv:47.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.20" */
  wire [2:0] NState;
  /* src = "rtl/apb_uart/uart_receiver.sv:46.16" */
  output PE;
  wire PE;
  /* src = "rtl/apb_uart/uart_receiver.sv:42.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_receiver.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_receiver.sv:39.14" */
  input RXCLEAR;
  wire RXCLEAR;
  /* src = "rtl/apb_uart/uart_receiver.sv:38.14" */
  input RXCLK;
  wire RXCLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:50.16" */
  output RXFINISHED;
  wire RXFINISHED;
  /* src = "rtl/apb_uart/uart_receiver.sv:45.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:44.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_receiver.sv:41.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_receiver.sv:40.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_receiver.sv:75.5" */
  wire iBI;
  /* src = "rtl/apb_uart/uart_receiver.sv:61.11" */
  /* unused_bits = "0 1 2" */
  wire [3:0] iBaudCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:62.5" */
  wire iBaudCountClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:63.5" */
  wire iBaudStep;
  /* src = "rtl/apb_uart/uart_receiver.sv:64.5" */
  wire iBaudStepD;
  /* src = "rtl/apb_uart/uart_receiver.sv:77.11" */
  wire [7:0] iDOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:70.11" */
  wire [3:0] iDataCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:72.5" */
  wire iDataCountFinish;
  /* src = "rtl/apb_uart/uart_receiver.sv:71.5" */
  wire iDataCountInit;
  /* src = "rtl/apb_uart/uart_receiver.sv:74.5" */
  wire iFE;
  /* src = "rtl/apb_uart/uart_receiver.sv:66.5" */
  wire iFSIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:67.5" */
  wire iFStopBit;
  /* src = "rtl/apb_uart/uart_receiver.sv:65.5" */
  wire iFilterClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:76.5" */
  wire iNoStopReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:68.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_receiver.sv:69.5" */
  wire iParityReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:73.5" */
  wire iRXFinished;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(iFStopBit),
    .Y(\$101 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10 ),
    .B(iDOUT[3]),
    .Y(\$12 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(CState),
    .B(2'h3),
    .Y(\$116 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\$116 ),
    .B(iBaudStep),
    .Y(\$120 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(EPS),
    .B(iParityReceived),
    .Y(\$127 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$12 ),
    .B(iDOUT[2]),
    .Y(\$14 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(iParity),
    .B(iParityReceived),
    .Y(\$132 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(CState),
    .B(3'h4),
    .Y(\$140 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(\$101 ),
    .B(\$140 ),
    .Y(iNoStopReceived)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(iDOUT),
    .Y(\$145 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(iParityReceived),
    .Y(\$147 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(\$145 ),
    .B(\$147 ),
    .Y(\$149 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(\$14 ),
    .B(iDOUT[1]),
    .Y(\$16 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(\$149 ),
    .B(iNoStopReceived),
    .Y(BI)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$16 ),
    .B(iDOUT[0]),
    .Y(\$18 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(EPS),
    .Y(\$20 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iBaudStepD),
    .B(iBaudCountClear),
    .Y(iFilterClear)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$18 ),
    .B(\$20 ),
    .Y(iParity)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(iDataCountFinish),
    .Y(\$30 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(iBaudStep),
    .B(\$30 ),
    .Y(\$32 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$37  (
    .A(\$auto$rtlil.cc:3009:Lt$1574 ),
    .S(iDataCount[2:0]),
    .Y(\$auto$rtlil.cc:3114:Demux$1577 )
  );
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$39  (
    .A(iDOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$auto$rtlil.cc:3114:Demux$1577 ),
    .Y(\$auto$rtlil.cc:3093:Bwmux$1579 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) \$40  (
    .A(iDataCount),
    .B(1'h1),
    .Y(\$41 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(WLS),
    .Y(\$47 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(iDataCount),
    .B(3'h5),
    .Y(\$49 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(iDOUT[7]),
    .B(iDOUT[6]),
    .Y(\$6 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$47 ),
    .B(\$49 ),
    .Y(\$51 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(WLS),
    .B(1'h1),
    .Y(\$53 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(iDataCount),
    .B(3'h6),
    .Y(\$55 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$53 ),
    .B(\$55 ),
    .Y(\$57 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$51 ),
    .B(\$57 ),
    .Y(\$59 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(WLS),
    .B(2'h2),
    .Y(\$61 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(iDataCount),
    .B(3'h7),
    .Y(\$63 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$61 ),
    .B(\$63 ),
    .Y(\$65 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(\$59 ),
    .B(\$65 ),
    .Y(\$67 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(WLS),
    .B(2'h3),
    .Y(\$69 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$6 ),
    .B(iDOUT[5]),
    .Y(\$8 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(iDataCount),
    .B(4'h8),
    .Y(\$71 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$69 ),
    .B(\$71 ),
    .Y(\$73 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$67 ),
    .B(\$73 ),
    .Y(iDataCountFinish)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8 ),
    .B(iDOUT[4]),
    .Y(\$10 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$18400  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iDataCount$44 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18401 ),
    .Q(iDataCount)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18403  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iDOUT$45 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18401 ),
    .Q(iDOUT)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18402  (
    .A({ iDataCountInit, \$32  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18401 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$17221  (
    .A(iDataCount[3]),
    .Y(\$auto$rtlil.cc:3009:Lt$1574 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16875  (
    .A({ \$procmux$7273_CMP , iBaudCountClear }),
    .Y(iDataCountInit)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:150.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$CState  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .Q(CState)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$PE  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$PE$136 ),
    .Q(PE)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBaudStepD  (
    .ARST(RST),
    .CLK(CLK),
    .D(iBaudStep),
    .Q(iBaudStepD)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iParityReceived  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iParityReceived$135 ),
    .Q(iParityReceived)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7196  (
    .A(\$auto$rtlil.cc:3093:Bwmux$1579 ),
    .B(8'h00),
    .S(iDataCountInit),
    .Y(\$iDOUT$45 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7200  (
    .A(\$41 ),
    .B(4'h0),
    .S(iDataCountInit),
    .Y(\$iDataCount$44 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:251.7-251.23|rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7202  (
    .A(SIN),
    .Y(\$NState$108 [2])
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7205_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$7205_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7209  (
    .A(2'h2),
    .B({ \$101 , \$101  }),
    .S(iBaudCount[3]),
    .Y({ \$NState$104 [2], \$NState$104 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:218.7-218.22|rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7240  (
    .A(2'h1),
    .B(2'h2),
    .S(iBaudStep),
    .Y(\$NState$97 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7249  (
    .A(3'h2),
    .B({ \$NState$93 [2:1], \$NState$93 [1] }),
    .S(iDataCountFinish),
    .Y(\$NState$94 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7252_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$7252_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:201.11-201.25|rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7258  (
    .A(2'h2),
    .B(2'h1),
    .S(PEN),
    .Y(\$NState$93 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7270  (
    .A(2'h1),
    .B({ \$NState$87 [1], 1'h0 }),
    .S(iBaudStep),
    .Y(\$NState$88 [1:0])
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7273_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$7273_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:185.11-185.26|rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7279  (
    .A(iFSIN),
    .Y(\$NState$87 [1])
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7293_CMP0  (
    .A(CState),
    .Y(iBaudCountClear)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7296  (
    .A(\$140 ),
    .B(iBaudCount[3]),
    .Y(RXFINISHED)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$7316  (
    .A(3'h0),
    .B({ 2'h0, \$NState$108 [2], 1'h0, \$NState$88 [1:0], \$NState$94 , \$NState$97 [2:1], \$NState$97 [1], \$NState$104 [2], 1'h0, \$NState$104 [0], \$NState$108 [2], 1'h0, \$NState$108 [2] }),
    .S({ iBaudCountClear, \$procmux$7273_CMP , \$procmux$7252_CMP , \$116 , \$140 , \$procmux$7205_CMP  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7330  (
    .A(PEN),
    .B(\$PE$134 ),
    .Y(\$PE$136 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7346  (
    .A(\$132 ),
    .B(\$PE$130 ),
    .S(SP),
    .Y(\$PE$134 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:286.15-286.27|rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7353  (
    .A(\$127 ),
    .Y(\$PE$130 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7361  (
    .A(PEN),
    .B(\$iParityReceived$121 ),
    .Y(\$iParityReceived$135 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:276.7-276.32|rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7364  (
    .A(iParityReceived),
    .B(iFSIN),
    .S(\$120 ),
    .Y(\$iParityReceived$121 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:78.27" */
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:95.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:88.44" */
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$NState$104 [1] = 1'h0;
  assign \$NState$108 [1:0] = { 1'h0, \$NState$108 [2] };
  assign \$NState$87 [0] = 1'h0;
  assign \$NState$88 [2] = 1'h0;
  assign \$NState$93 [0] = \$NState$93 [1];
  assign \$NState$97 [0] = \$NState$97 [1];
  assign DOUT = iDOUT;
  assign FE = iNoStopReceived;
  assign iBI = BI;
  assign iFE = iNoStopReceived;
  assign iRXFinished = RXFINISHED;
endmodule

/* src = "rtl/apb_uart/uart_transmitter.sv:35.8" */
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$27 ;
  wire \$33 ;
  wire \$39 ;
  wire \$55 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23" */
  wire [3:0] \$NState$30 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  wire [3:0] \$NState$31 ;
  wire [1:0] \$NState$37 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  wire [3:0] \$NState$43 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  wire [3:0] \$NState$63 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18408 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18410 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$16924 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  wire \$iSout$51 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  wire \$iSout$56 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  wire \$iSout$57 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  wire \$iTx2$19 ;
  wire \$procmux$7405_CMP ;
  wire \$procmux$7432_CMP ;
  wire \$procmux$7442_CMP ;
  wire \$procmux$7465_CMP ;
  wire \$procmux$7490_CMP ;
  wire \$procmux$7520_CMP ;
  wire \$procmux$7534_CMP ;
  wire \$procmux$7535_CMP ;
  wire \$procmux$7536_CMP ;
  wire \$procmux$7537_CMP ;
  wire \$procmux$7538_CMP ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:46.14" */
  input BC;
  wire BC;
  /* src = "rtl/apb_uart/uart_transmitter.sv:40.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_transmitter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.12" */
  wire [3:0] CState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:47.20" */
  input [7:0] DIN;
  wire [7:0] DIN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:44.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.20" */
  wire [3:0] NState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:43.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_transmitter.sv:49.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/uart_transmitter.sv:45.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_transmitter.sv:42.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_transmitter.sv:38.14" */
  input TXCLK;
  wire TXCLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:48.16" */
  output TXFINISHED;
  wire TXFINISHED;
  /* src = "rtl/apb_uart/uart_transmitter.sv:39.14" */
  input TXSTART;
  wire TXSTART;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.15" */
  wire \TX_PAR.iP40 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.21" */
  wire \TX_PAR.iP50 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.27" */
  wire \TX_PAR.iP60 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.33" */
  wire \TX_PAR.iP70 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:41.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:70.5" */
  wire iFinished;
  /* src = "rtl/apb_uart/uart_transmitter.sv:297.9" */
  wire iLast;
  /* src = "rtl/apb_uart/uart_transmitter.sv:69.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_transmitter.sv:68.5" */
  wire iSout;
  /* src = "rtl/apb_uart/uart_transmitter.sv:67.5" */
  wire iTx2;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$27 ),
    .B(STB),
    .Y(\$11 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(CState),
    .B(4'hc),
    .Y(\$13 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$11 ),
    .B(\$13 ),
    .Y(\$15 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(WLS),
    .Y(\$27 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(WLS),
    .B(1'h1),
    .Y(\$33 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(WLS),
    .B(2'h2),
    .Y(\$39 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(iParity),
    .Y(\$55 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(DIN[4]),
    .B(DIN[3]),
    .Y(\$71 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$71 ),
    .B(DIN[2]),
    .Y(\$73 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(\$73 ),
    .B(DIN[1]),
    .Y(\$75 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75 ),
    .B(DIN[0]),
    .Y(\TX_PAR.iP40 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(DIN[5]),
    .B(\TX_PAR.iP40 ),
    .Y(\TX_PAR.iP50 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(DIN[6]),
    .B(\TX_PAR.iP50 ),
    .Y(\TX_PAR.iP60 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(DIN[7]),
    .B(\TX_PAR.iP60 ),
    .Y(\TX_PAR.iP70 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(iLast),
    .Y(\$88 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(CState),
    .B(4'hb),
    .Y(\$90 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\$88 ),
    .B(\$90 ),
    .Y(\$92 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$99  (
    .A(iSout),
    .B(1'h0),
    .S(BC),
    .Y(SOUT)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18406  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iTx2$19 ),
    .EN(TXCLK),
    .Q(iTx2)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$18407  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18410 ),
    .Q(CState)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18409  (
    .A({ iTx2, \$15  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18408 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18411  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18408 , TXCLK }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18410 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$16923  (
    .A({ \$procmux$7520_CMP , \$13  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$16924 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFinished  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$92 ),
    .Q(iFinished)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLast  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$90 ),
    .Q(iLast)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$7373  (
    .A(\TX_PAR.iP70 ),
    .B({ \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }),
    .S({ \$27 , \$33 , \$39  }),
    .Y(iParity)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7392  (
    .A({ 1'h0, TXSTART }),
    .B(2'h2),
    .S(STB),
    .Y({ \$NState$63 [3], \$NState$63 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:237.23-237.40|rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7399  (
    .A(\$55 ),
    .B(iParity),
    .S(EPS),
    .Y(\$iSout$56 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7405_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$7405_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7411  (
    .A(\$iSout$56 ),
    .B(\$iSout$51 ),
    .S(SP),
    .Y(\$iSout$57 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:226.23-226.38|rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7419  (
    .A(EPS),
    .Y(\$iSout$51 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7432_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$7432_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7439  (
    .A(2'h1),
    .B({ 1'h1, \$NState$30 [0] }),
    .S(\$39 ),
    .Y(\$NState$43 [1:0])
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7442_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$7442_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:194.23-194.37|rtl/apb_uart/uart_transmitter.sv:192.18-199.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7449  (
    .A(PEN),
    .Y(\$NState$30 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7462  (
    .A(2'h0),
    .B({ 1'h1, \$NState$30 [0] }),
    .S(\$33 ),
    .Y(\$NState$37 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7465_CMP0  (
    .A(CState),
    .B(3'h7),
    .Y(\$procmux$7465_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7487  (
    .A(3'h3),
    .B({ 2'h2, \$NState$30 [0] }),
    .S(\$27 ),
    .Y({ \$NState$31 [3:2], \$NState$31 [0] })
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7490_CMP0  (
    .A(CState),
    .B(3'h6),
    .Y(\$procmux$7490_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$7520_CMP0  (
    .A(CState),
    .Y(\$procmux$7520_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd1)
  ) \$procmux$7524  (
    .A(1'h1),
    .B({ 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$iSout$57  }),
    .S({ \$procmux$7538_CMP , \$procmux$7537_CMP , \$procmux$7536_CMP , \$procmux$7535_CMP , \$procmux$7534_CMP , \$procmux$7490_CMP , \$procmux$7465_CMP , \$procmux$7442_CMP , \$procmux$7432_CMP , \$procmux$7405_CMP  }),
    .Y(iSout)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7534_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$7534_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7535_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$7535_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7536_CMP0  (
    .A(CState),
    .B(2'h3),
    .Y(\$procmux$7536_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7537_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$7537_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7538_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$7538_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd12),
    .WIDTH(32'd4)
  ) \$procmux$7540  (
    .A(4'h0),
    .B({ 20'h23456, \$NState$31 [3:2], 1'h1, \$NState$31 [0], 2'h2, \$NState$37 , 2'h2, \$NState$43 [1:0], 3'h5, \$NState$30 [0], 4'hb, \$NState$63 [3], \$NState$63 [3], 1'h0, \$NState$63 [0], 3'h0, TXSTART }),
    .S({ \$procmux$7538_CMP , \$procmux$7537_CMP , \$procmux$7536_CMP , \$procmux$7535_CMP , \$procmux$7534_CMP , \$procmux$7490_CMP , \$procmux$7465_CMP , \$procmux$7442_CMP , \$procmux$7432_CMP , \$procmux$7405_CMP , \$90 , \$auto$opt_reduce.cc:137:opt_pmux$16924  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7579  (
    .A(1'h1),
    .B(\$15 ),
    .S(iTx2),
    .Y(\$iTx2$19 )
  );
  assign \$NState$30 [3:1] = 3'h5;
  assign \$NState$31 [1] = 1'h1;
  assign \$NState$43 [3:2] = 2'h2;
  assign \$NState$63 [2:1] = { \$NState$63 [3], 1'h0 };
  assign TXFINISHED = iFinished;
endmodule

/* src = "rtl/user_domain.sv:8.8" */
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, ref_clk_i, testmode_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  /* src = "rtl/user_domain.sv:46.35" */
  wire [147:0] all_user_sbr_obi_req;
  /* src = "rtl/user_domain.sv:47.35" */
  wire [77:0] all_user_sbr_obi_rsp;
  /* src = "rtl/user_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain.sv:22.38" */
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  /* src = "rtl/user_domain.sv:23.38" */
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  /* src = "rtl/user_domain.sv:12.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/user_domain.sv:13.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/user_domain.sv:54.17" */
  wire [73:0] user_error_obi_req;
  /* src = "rtl/user_domain.sv:55.17" */
  wire [38:0] user_error_obi_rsp;
  /* src = "rtl/user_domain.sv:68.51" */
  wire user_idx;
  /* src = "rtl/user_domain.sv:19.24" */
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  /* src = "rtl/user_domain.sv:20.24" */
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  /* src = "rtl/user_domain.sv:50.17" */
  wire [73:0] user_rom_obi_req;
  /* src = "rtl/user_domain.sv:51.17" */
  wire [38:0] user_rom_obi_rsp;
  /* src = "rtl/user_domain.sv:16.24" */
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  /* src = "rtl/user_domain.sv:17.24" */
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  /* src = "rtl/user_domain.sv:76.5" */
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(96'h000000012000000020001000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  /* src = "rtl/user_domain.sv:92.5" */
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i({ user_rom_obi_rsp, user_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  /* src = "rtl/user_domain.sv:128.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[73:0]),
    .obi_rsp_o(user_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/user_domain.sv:114.5" */
  \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom  i_user_rom (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[147:74]),
    .obi_rsp_o(user_rom_obi_rsp),
    .rst_ni(rst_ni)
  );
  assign all_user_sbr_obi_rsp = { user_rom_obi_rsp, user_error_obi_rsp };
  assign interrupts_o = 4'h0;
  assign user_error_obi_req = all_user_sbr_obi_req[73:0];
  assign user_mgr_obi_req_o = 72'h000000000000000000;
  assign user_rom_obi_req = all_user_sbr_obi_req[147:74];
endmodule

/* src = "rtl/user_domain/user_rom.sv:9.8" */
module \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom (clk_i, rst_ni, obi_req_i, obi_rsp_o);
  wire [31:0] \$auto$proc_rom.cc:154:do_switch$1819 ;
  wire [31:0] \$procmux$14301_Y ;
  /* src = "rtl/user_domain/user_rom.sv:18.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain/user_rom.sv:33.30" */
  wire [2:0] id_d;
  /* src = "rtl/user_domain/user_rom.sv:33.36" */
  wire [2:0] id_q;
  /* src = "rtl/user_domain/user_rom.sv:29.9" */
  wire obi_err;
  /* src = "rtl/user_domain/user_rom.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/user_domain/user_rom.sv:25.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/user_domain/user_rom.sv:31.9" */
  wire req_d;
  /* src = "rtl/user_domain/user_rom.sv:31.16" */
  wire req_q;
  /* src = "rtl/user_domain/user_rom.sv:28.32" */
  wire [31:0] rsp_data;
  /* src = "rtl/user_domain/user_rom.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain/user_rom.sv:30.9" */
  wire we_d;
  /* src = "rtl/user_domain/user_rom.sv:30.15" */
  wire we_q;
  /* src = "rtl/user_domain/user_rom.sv:32.15" */
  wire [2:0] word_addr_d;
  /* src = "rtl/user_domain/user_rom.sv:32.28" */
  wire [2:0] word_addr_q;
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16" */
  reg [25:0] \$auto$proc_rom.cc:155:do_switch$1820  [7:0];
  initial begin
    \$auto$proc_rom.cc:155:do_switch$1820 [0] = 26'h24e1754;
    \$auto$proc_rom.cc:155:do_switch$1820 [1] = 26'h1356747;
    \$auto$proc_rom.cc:155:do_switch$1820 [2] = 26'h2ac9743;
    \$auto$proc_rom.cc:155:do_switch$1820 [3] = 26'h13c6948;
    \$auto$proc_rom.cc:155:do_switch$1820 [4] = 26'h29c5073;
    \$auto$proc_rom.cc:155:do_switch$1820 [5] = 26'h00021c9;
    \$auto$proc_rom.cc:155:do_switch$1820 [6] = 26'h0000000;
    \$auto$proc_rom.cc:155:do_switch$1820 [7] = 26'h0000000;
  end
  assign { \$auto$proc_rom.cc:154:do_switch$1819 [30:24], \$auto$proc_rom.cc:154:do_switch$1819 [22], \$auto$proc_rom.cc:154:do_switch$1819 [20:18], \$auto$proc_rom.cc:154:do_switch$1819 [16], \$auto$proc_rom.cc:154:do_switch$1819 [14:8], \$auto$proc_rom.cc:154:do_switch$1819 [6:0] } = \$auto$proc_rom.cc:155:do_switch$1820 [word_addr_q];
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[0]),
    .Q(req_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[41]),
    .Q(we_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$word_addr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[46:44]),
    .Q(word_addr_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14301  (
    .A({ 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [30:24], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [22], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [20:18], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [16], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [14:8], 1'h0, \$auto$proc_rom.cc:154:do_switch$1819 [6:0] }),
    .B(32'd0),
    .S(we_q),
    .Y(\$procmux$14301_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14306  (
    .A(req_q),
    .B(we_q),
    .Y(obi_err)
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14309  (
    .A(32'd0),
    .B(\$procmux$14301_Y ),
    .S(req_q),
    .Y(rsp_data)
  );
  assign { \$auto$proc_rom.cc:154:do_switch$1819 [31], \$auto$proc_rom.cc:154:do_switch$1819 [23], \$auto$proc_rom.cc:154:do_switch$1819 [21], \$auto$proc_rom.cc:154:do_switch$1819 [17], \$auto$proc_rom.cc:154:do_switch$1819 [15], \$auto$proc_rom.cc:154:do_switch$1819 [7] } = 6'h00;
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rsp_data, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign req_d = obi_req_i[0];
  assign we_d = obi_req_i[41];
  assign word_addr_d = obi_req_i[46:44];
endmodule
