/* Generated by Yosys 0.55+3 (git sha1 e60cf3e2f, aarch64-linux-gnu-g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode.sv:74.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode.sv:90.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode.sv:76.31" */
  output idx_o;
  wire idx_o;
  /* src = "rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$59y ;
  wire \$5y ;
  wire \$61y ;
  wire \$62y ;
  wire \$63y ;
  wire \$64y ;
  wire [2:0] \$68y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$16 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$30 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$44 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$58 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$15 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$29 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$43 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$57 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$14 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$28 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$42 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$56 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$17y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(addr_map_i[127:96]),
    .Y(\$20y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$17y ),
    .B(\$21y ),
    .Y(\$22y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$26  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_map_i[223:192]),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$34y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$31y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$40  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$45y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$47y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(addr_map_i[319:288]),
    .Y(\$48y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$45y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$54  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$54y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(addr_i),
    .B(addr_map_i[447:416]),
    .Y(\$59y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(addr_i),
    .B(addr_map_i[415:384]),
    .Y(\$61y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(addr_map_i[415:384]),
    .Y(\$62y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$61y ),
    .B(\$62y ),
    .Y(\$63y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$59y ),
    .B(\$63y ),
    .Y(\$64y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$68  (
    .A(addr_map_i[450:448]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$68y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11555  (
    .A(\$dec_error_o$58 ),
    .B(1'h0),
    .S(\$64y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11558  (
    .A(\$dec_valid_o$57 ),
    .B(\$10y ),
    .S(\$64y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11561  (
    .A(\$idx_o$56 ),
    .B(\$68y ),
    .S(\$64y ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11567  (
    .A(\$dec_error_o$44 ),
    .B(1'h0),
    .S(\$50y ),
    .Y(\$dec_error_o$58 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11570  (
    .A(\$dec_valid_o$43 ),
    .B(\$10y ),
    .S(\$50y ),
    .Y(\$dec_valid_o$57 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11573  (
    .A(\$idx_o$42 ),
    .B(\$54y ),
    .S(\$50y ),
    .Y(\$idx_o$56 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11579  (
    .A(\$dec_error_o$30 ),
    .B(1'h0),
    .S(\$36y ),
    .Y(\$dec_error_o$44 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11582  (
    .A(\$dec_valid_o$29 ),
    .B(\$10y ),
    .S(\$36y ),
    .Y(\$dec_valid_o$43 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11585  (
    .A(\$idx_o$28 ),
    .B(\$40y ),
    .S(\$36y ),
    .Y(\$idx_o$42 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11591  (
    .A(\$dec_error_o$16 ),
    .B(1'h0),
    .S(\$22y ),
    .Y(\$dec_error_o$30 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11594  (
    .A(\$dec_valid_o$15 ),
    .B(\$10y ),
    .S(\$22y ),
    .Y(\$dec_valid_o$29 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11597  (
    .A(\$idx_o$14 ),
    .B(\$26y ),
    .S(\$22y ),
    .Y(\$idx_o$28 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11602  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(\$dec_error_o$16 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11604  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(\$dec_valid_o$15 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11606  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(\$idx_o$14 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$16 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$30 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$44 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$15 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$29 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$43 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$14 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$28 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$42 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$17y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(addr_map_i[127:96]),
    .Y(\$20y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$17y ),
    .B(\$21y ),
    .Y(\$22y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$26  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_map_i[223:192]),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$34y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$31y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$40  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$45y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$47y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(addr_map_i[319:288]),
    .Y(\$48y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$45y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$54  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$54y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6436  (
    .A(\$dec_error_o$44 ),
    .B(1'h0),
    .S(\$50y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6439  (
    .A(\$dec_valid_o$43 ),
    .B(\$10y ),
    .S(\$50y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6442  (
    .A(\$idx_o$42 ),
    .B(\$54y ),
    .S(\$50y ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6448  (
    .A(\$dec_error_o$30 ),
    .B(1'h0),
    .S(\$36y ),
    .Y(\$dec_error_o$44 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6451  (
    .A(\$dec_valid_o$29 ),
    .B(\$10y ),
    .S(\$36y ),
    .Y(\$dec_valid_o$43 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6454  (
    .A(\$idx_o$28 ),
    .B(\$40y ),
    .S(\$36y ),
    .Y(\$idx_o$42 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6460  (
    .A(\$dec_error_o$16 ),
    .B(1'h0),
    .S(\$22y ),
    .Y(\$dec_error_o$30 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6463  (
    .A(\$dec_valid_o$15 ),
    .B(\$10y ),
    .S(\$22y ),
    .Y(\$dec_valid_o$29 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6466  (
    .A(\$idx_o$14 ),
    .B(\$26y ),
    .S(\$22y ),
    .Y(\$idx_o$28 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6471  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(\$dec_error_o$16 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6473  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(\$dec_valid_o$15 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6475  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(\$idx_o$14 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$16 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$30 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$44 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$15 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$29 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$43 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$14 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$28 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$42 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$17y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(addr_map_i[127:96]),
    .Y(\$20y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$17y ),
    .B(\$21y ),
    .Y(\$22y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$26  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_map_i[223:192]),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$34y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$31y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$40  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$45y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$47y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(addr_map_i[319:288]),
    .Y(\$48y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$45y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$54  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$54y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6361  (
    .A(\$dec_error_o$44 ),
    .B(1'h0),
    .S(\$50y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6364  (
    .A(\$dec_valid_o$43 ),
    .B(\$10y ),
    .S(\$50y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6367  (
    .A(\$idx_o$42 ),
    .B(\$54y ),
    .S(\$50y ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6373  (
    .A(\$dec_error_o$30 ),
    .B(1'h0),
    .S(\$36y ),
    .Y(\$dec_error_o$44 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6376  (
    .A(\$dec_valid_o$29 ),
    .B(\$10y ),
    .S(\$36y ),
    .Y(\$dec_valid_o$43 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6379  (
    .A(\$idx_o$28 ),
    .B(\$40y ),
    .S(\$36y ),
    .Y(\$idx_o$42 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6385  (
    .A(\$dec_error_o$16 ),
    .B(1'h0),
    .S(\$22y ),
    .Y(\$dec_error_o$30 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6388  (
    .A(\$dec_valid_o$15 ),
    .B(\$10y ),
    .S(\$22y ),
    .Y(\$dec_valid_o$29 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6391  (
    .A(\$idx_o$14 ),
    .B(\$26y ),
    .S(\$22y ),
    .Y(\$idx_o$28 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6396  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(\$dec_error_o$16 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6398  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(\$dec_valid_o$15 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6400  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(\$idx_o$14 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$16 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$30 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$44 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$15 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$29 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$43 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$14 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$28 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$42 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$17y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(addr_map_i[127:96]),
    .Y(\$20y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$17y ),
    .B(\$21y ),
    .Y(\$22y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$26  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_map_i[223:192]),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$34y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$31y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$40  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$45y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$47y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(addr_map_i[319:288]),
    .Y(\$48y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$45y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$54  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$54y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6286  (
    .A(\$dec_error_o$44 ),
    .B(1'h0),
    .S(\$50y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6289  (
    .A(\$dec_valid_o$43 ),
    .B(\$10y ),
    .S(\$50y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6292  (
    .A(\$idx_o$42 ),
    .B(\$54y ),
    .S(\$50y ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6298  (
    .A(\$dec_error_o$30 ),
    .B(1'h0),
    .S(\$36y ),
    .Y(\$dec_error_o$44 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6301  (
    .A(\$dec_valid_o$29 ),
    .B(\$10y ),
    .S(\$36y ),
    .Y(\$dec_valid_o$43 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6304  (
    .A(\$idx_o$28 ),
    .B(\$40y ),
    .S(\$36y ),
    .Y(\$idx_o$42 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6310  (
    .A(\$dec_error_o$16 ),
    .B(1'h0),
    .S(\$22y ),
    .Y(\$dec_error_o$30 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6313  (
    .A(\$dec_valid_o$15 ),
    .B(\$10y ),
    .S(\$22y ),
    .Y(\$dec_valid_o$29 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6316  (
    .A(\$idx_o$14 ),
    .B(\$26y ),
    .S(\$22y ),
    .Y(\$idx_o$28 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6321  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(\$dec_error_o$16 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6323  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(\$dec_valid_o$15 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6325  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(\$idx_o$14 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire [2:0] \$12y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire [2:0] \$26y ;
  wire [2:0] \$2y ;
  wire \$31y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$3y ;
  wire [2:0] \$40y ;
  wire \$45y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire [2:0] \$54y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$16 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$30 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_error_o$44 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$15 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$29 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$dec_valid_o$43 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$14 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$28 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$idx_o$42 ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$17y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$2  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(addr_map_i[127:96]),
    .Y(\$20y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$17y ),
    .B(\$21y ),
    .Y(\$22y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$26  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(addr_map_i[223:192]),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$34y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$31y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$40  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$45y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$47y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(addr_map_i[319:288]),
    .Y(\$48y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$45y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$54  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$54y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6211  (
    .A(\$dec_error_o$44 ),
    .B(1'h0),
    .S(\$50y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6214  (
    .A(\$dec_valid_o$43 ),
    .B(\$10y ),
    .S(\$50y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6217  (
    .A(\$idx_o$42 ),
    .B(\$54y ),
    .S(\$50y ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6223  (
    .A(\$dec_error_o$30 ),
    .B(1'h0),
    .S(\$36y ),
    .Y(\$dec_error_o$44 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6226  (
    .A(\$dec_valid_o$29 ),
    .B(\$10y ),
    .S(\$36y ),
    .Y(\$dec_valid_o$43 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6229  (
    .A(\$idx_o$28 ),
    .B(\$40y ),
    .S(\$36y ),
    .Y(\$idx_o$42 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6235  (
    .A(\$dec_error_o$16 ),
    .B(1'h0),
    .S(\$22y ),
    .Y(\$dec_error_o$30 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6238  (
    .A(\$dec_valid_o$15 ),
    .B(\$10y ),
    .S(\$22y ),
    .Y(\$dec_valid_o$29 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6241  (
    .A(\$idx_o$14 ),
    .B(\$26y ),
    .S(\$22y ),
    .Y(\$idx_o$28 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6246  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(\$dec_error_o$16 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6248  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(\$dec_valid_o$15 )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$6250  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(\$idx_o$14 )
  );
endmodule

/* src = "rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$10y ;
  wire \$12y ;
  wire \$1y ;
  wire \$2y ;
  wire \$3y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [95:0] addr_map_i;
  wire [95:0] addr_map_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:95.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "rtl/common_cells/addr_decode_dync.sv:81.31" */
  output idx_o;
  wire idx_o;
  /* src = "rtl/common_cells/addr_decode_dync.sv:107.21-107.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(en_default_idx_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:118.28-118.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(config_ongoing_i),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:121.28-121.88" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$12  (
    .A(addr_map_i[64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$12y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:108.21-108.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(en_default_idx_i),
    .B(default_idx_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.20-113.54" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$3y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.11-114.42" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.48-114.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(addr_map_i[31:0]),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:114.10-114.77" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:113.9-114.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$3y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10887  (
    .A(\$1y ),
    .B(1'h0),
    .S(\$8y ),
    .Y(dec_error_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10889  (
    .A(\$8y ),
    .B(\$10y ),
    .Y(dec_valid_o)
  );
  /* src = "rtl/common_cells/addr_decode_dync.sv:117.9-122.10|rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10891  (
    .A(\$2y ),
    .B(\$12y ),
    .S(\$8y ),
    .Y(idx_o)
  );
endmodule

/* src = "rtl/apb_uart/apb_uart.sv:35.8" */
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$100y ;
  wire \$102y ;
  wire \$105y ;
  wire \$113y ;
  wire \$115y ;
  wire \$116y ;
  wire \$118y ;
  wire \$119y ;
  wire \$120y ;
  wire [5:0] \$121y ;
  wire \$138y ;
  wire \$139y ;
  wire \$141y ;
  wire \$142y ;
  wire \$143y ;
  wire \$149y ;
  wire \$153y ;
  wire \$15y ;
  wire \$16y ;
  wire \$175y ;
  wire \$178y ;
  wire \$17y ;
  wire \$180y ;
  wire \$181y ;
  wire \$197y ;
  wire \$199y ;
  wire \$200y ;
  wire \$205y ;
  wire \$206y ;
  wire \$208y ;
  wire \$210y ;
  wire \$228y ;
  wire \$22y ;
  wire \$233y ;
  wire \$236y ;
  wire \$238y ;
  wire \$248y ;
  wire \$254y ;
  wire \$255y ;
  wire \$256y ;
  wire \$257y ;
  wire \$262y ;
  wire \$264y ;
  wire \$265y ;
  wire \$270y ;
  wire \$272y ;
  wire \$273y ;
  wire \$278y ;
  wire \$280y ;
  wire \$281y ;
  wire \$288y ;
  wire \$294y ;
  wire \$2y ;
  wire \$304y ;
  wire \$316y ;
  wire \$318y ;
  wire \$319y ;
  wire \$320y ;
  wire \$330y ;
  wire \$332y ;
  wire \$333y ;
  wire \$336y ;
  wire \$337y ;
  wire \$338y ;
  wire \$339y ;
  wire \$33y ;
  wire \$341y ;
  wire \$342y ;
  wire \$343y ;
  wire \$345y ;
  wire \$347y ;
  wire \$349y ;
  wire \$34y ;
  wire \$350y ;
  wire \$360y ;
  wire \$361y ;
  wire \$362y ;
  wire \$365y ;
  wire \$366y ;
  wire \$369y ;
  wire \$371y ;
  wire \$373y ;
  wire \$374y ;
  wire \$382y ;
  wire \$383y ;
  wire \$386y ;
  wire \$387y ;
  wire \$420y ;
  wire \$423y ;
  wire \$424y ;
  wire \$429y ;
  wire \$430y ;
  wire \$431y ;
  wire \$439y ;
  wire \$440y ;
  wire \$443y ;
  wire \$444y ;
  wire \$447y ;
  wire \$448y ;
  wire \$451y ;
  wire \$452y ;
  wire \$456y ;
  wire \$45y ;
  wire \$53y ;
  wire \$57y ;
  wire \$61y ;
  wire \$65y ;
  wire \$69y ;
  wire \$86y ;
  wire \$89y ;
  wire \$91y ;
  wire \$92y ;
  wire \$94y ;
  wire \$95y ;
  wire \$97y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  wire [7:0] \$PRDATA[7:0]$460 ;
  /* src = "rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  wire [7:0] \$PRDATA[7:0]$462 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13798 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13813 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13805 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13818 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13231 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$14972 ;
  wire \$auto$rtlil.cc:2957:Not$13804 ;
  wire [6:0] \$auto$rtlil.cc:3092:Mux$14974 ;
  /* src = "rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  wire \$iBAUDOUTN$437 ;
  /* src = "rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  wire \$iCharTimeout$127 ;
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  wire \$iCharTimeout$128 ;
  /* src = "rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  wire \$iCharTimeout$129 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_RXFIFOReset$156 ;
  /* src = "rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$iFCR_TXFIFOReset$157 ;
  /* src = "rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  wire [6:0] \$iFECounter$214 ;
  /* src = "rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  wire \$iLSR_BI$195 ;
  /* src = "rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  wire \$iLSR_BI$196 ;
  /* src = "rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  wire \$iLSR_FE$191 ;
  /* src = "rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  wire \$iLSR_FE$192 ;
  /* src = "rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  wire \$iLSR_FIFOERR$201 ;
  /* src = "rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  wire \$iLSR_FIFOERR$202 ;
  /* src = "rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  wire \$iLSR_OE$183 ;
  /* src = "rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  wire \$iLSR_OE$184 ;
  /* src = "rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  wire \$iLSR_PE$187 ;
  /* src = "rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  wire \$iLSR_PE$188 ;
  /* src = "rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  wire \$iMSR_TERI$300 ;
  /* src = "rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  wire \$iMSR_TERI$301 ;
  /* src = "rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  wire \$iMSR_dCTS$290 ;
  /* src = "rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  wire \$iMSR_dCTS$291 ;
  /* src = "rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  wire \$iMSR_dDCD$306 ;
  /* src = "rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  wire \$iMSR_dDCD$307 ;
  /* src = "rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  wire \$iMSR_dDSR$296 ;
  /* src = "rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  wire \$iMSR_dDSR$297 ;
  /* src = "rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  wire \$iRTS$432 ;
  /* src = "rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  wire \$iRTS$433 ;
  /* src = "rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  wire \$iRXFIFOClear$406 ;
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire \$iRXFIFOClear$407 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOClear$414 ;
  /* src = "rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  wire \$iRXFIFOWrite$412 ;
  /* src = "rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  wire \$iRXFIFOWrite$413 ;
  /* src = "rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$iRXFIFOWrite$415 ;
  /* src = "rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  wire \$iTHRInterrupt$98 ;
  /* src = "rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  wire \$iTHRInterrupt$99 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXFIFORead$398 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXRunning$400 ;
  /* src = "rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$iTXStart$399 ;
  /* src = "rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  wire [5:0] \$iTimeoutCount$123 ;
  wire \$procmux$11175_Y ;
  wire [1:0] \$procmux$11225_Y ;
  wire \$procmux$11226_CMP ;
  wire \$procmux$11231_CMP ;
  /* src = "rtl/apb_uart/apb_uart.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/apb_uart.sv:51.14" */
  input CTSN;
  wire CTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:53.14" */
  input DCDN;
  wire DCDN;
  /* src = "rtl/apb_uart/apb_uart.sv:52.14" */
  input DSRN;
  wire DSRN;
  /* src = "rtl/apb_uart/apb_uart.sv:50.16" */
  output DTRN;
  wire DTRN;
  /* src = "rtl/apb_uart/apb_uart.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/apb_uart.sv:47.16" */
  output OUT1N;
  wire OUT1N;
  /* src = "rtl/apb_uart/apb_uart.sv:48.16" */
  output OUT2N;
  wire OUT2N;
  /* src = "rtl/apb_uart/apb_uart.sv:41.20" */
  input [2:0] PADDR;
  wire [2:0] PADDR;
  /* src = "rtl/apb_uart/apb_uart.sv:39.14" */
  input PENABLE;
  wire PENABLE;
  /* src = "rtl/apb_uart/apb_uart.sv:43.23" */
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:44.16" */
  output PREADY;
  wire PREADY;
  /* src = "rtl/apb_uart/apb_uart.sv:38.14" */
  input PSEL;
  wire PSEL;
  /* src = "rtl/apb_uart/apb_uart.sv:45.16" */
  output PSLVERR;
  wire PSLVERR;
  /* src = "rtl/apb_uart/apb_uart.sv:42.21" */
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  /* src = "rtl/apb_uart/apb_uart.sv:40.14" */
  input PWRITE;
  wire PWRITE;
  /* src = "rtl/apb_uart/apb_uart.sv:54.14" */
  input RIN;
  wire RIN;
  /* src = "rtl/apb_uart/apb_uart.sv:37.14" */
  input RSTN;
  wire RSTN;
  /* src = "rtl/apb_uart/apb_uart.sv:49.16" */
  output RTSN;
  wire RTSN;
  /* src = "rtl/apb_uart/apb_uart.sv:55.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/apb_uart.sv:56.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:157.5" */
  wire iBAUDOUTN;
  /* src = "rtl/apb_uart/apb_uart.sv:198.5" */
  wire iBIRE;
  /* src = "rtl/apb_uart/apb_uart.sv:153.12" */
  wire [15:0] iBaudgenDiv;
  /* src = "rtl/apb_uart/apb_uart.sv:154.5" */
  wire iBaudtick16x;
  /* src = "rtl/apb_uart/apb_uart.sv:155.5" */
  wire iBaudtick2x;
  /* src = "rtl/apb_uart/apb_uart.sv:137.5" */
  wire iCTSNs;
  /* src = "rtl/apb_uart/apb_uart.sv:141.5" */
  wire iCTSn;
  /* src = "rtl/apb_uart/apb_uart.sv:146.5" */
  wire iCTSnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:145.5" */
  wire iCTSnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:204.5" */
  wire iCharTimeout;
  /* src = "rtl/apb_uart/apb_uart.sv:139.5" */
  wire iDCDNs;
  /* src = "rtl/apb_uart/apb_uart.sv:143.5" */
  wire iDCDn;
  /* src = "rtl/apb_uart/apb_uart.sv:150.5" */
  wire iDCDnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:149.5" */
  wire iDCDnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:83.11" */
  wire [7:0] iDLL;
  /* src = "rtl/apb_uart/apb_uart.sv:71.5" */
  wire iDLLWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:84.11" */
  wire [7:0] iDLM;
  /* src = "rtl/apb_uart/apb_uart.sv:72.5" */
  wire iDLMWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:138.5" */
  wire iDSRNs;
  /* src = "rtl/apb_uart/apb_uart.sv:142.5" */
  wire iDSRn;
  /* src = "rtl/apb_uart/apb_uart.sv:148.5" */
  wire iDSRnFE;
  /* src = "rtl/apb_uart/apb_uart.sv:147.5" */
  wire iDSRnRE;
  /* src = "rtl/apb_uart/apb_uart.sv:87.11" */
  wire [7:0] iFCR;
  /* src = "rtl/apb_uart/apb_uart.sv:75.5" */
  wire iFCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:105.5" */
  wire iFCR_DMAMode;
  /* src = "rtl/apb_uart/apb_uart.sv:106.5" */
  wire iFCR_FIFO64E;
  /* src = "rtl/apb_uart/apb_uart.sv:102.5" */
  wire iFCR_FIFOEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:103.5" */
  wire iFCR_RXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:107.11" */
  wire [1:0] iFCR_RXTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:104.5" */
  wire iFCR_TXFIFOReset;
  /* src = "rtl/apb_uart/apb_uart.sv:199.11" */
  wire [6:0] iFECounter;
  /* src = "rtl/apb_uart/apb_uart.sv:201.5" */
  wire iFEDecrement;
  /* src = "rtl/apb_uart/apb_uart.sv:200.5" */
  wire iFEIncrement;
  /* src = "rtl/apb_uart/apb_uart.sv:196.5" */
  wire iFERE;
  /* src = "rtl/apb_uart/apb_uart.sv:85.11" */
  wire [7:0] iIER;
  /* src = "rtl/apb_uart/apb_uart.sv:73.5" */
  wire iIERWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:96.5" */
  wire iIER_EDSSI;
  /* src = "rtl/apb_uart/apb_uart.sv:95.5" */
  wire iIER_ELSI;
  /* src = "rtl/apb_uart/apb_uart.sv:93.5" */
  wire iIER_ERBI;
  /* src = "rtl/apb_uart/apb_uart.sv:94.5" */
  wire iIER_ETBEI;
  /* src = "rtl/apb_uart/apb_uart.sv:86.11" */
  wire [7:0] iIIR;
  /* src = "rtl/apb_uart/apb_uart.sv:74.5" */
  wire iIIRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:101.5" */
  wire iIIR_FIFO64;
  /* src = "rtl/apb_uart/apb_uart.sv:98.5" */
  wire iIIR_ID0;
  /* src = "rtl/apb_uart/apb_uart.sv:99.5" */
  wire iIIR_ID1;
  /* src = "rtl/apb_uart/apb_uart.sv:100.5" */
  wire iIIR_ID2;
  /* src = "rtl/apb_uart/apb_uart.sv:97.5" */
  wire iIIR_PI;
  /* src = "rtl/apb_uart/apb_uart.sv:88.11" */
  wire [7:0] iLCR;
  /* src = "rtl/apb_uart/apb_uart.sv:76.5" */
  wire iLCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:113.5" */
  wire iLCR_BC;
  /* src = "rtl/apb_uart/apb_uart.sv:114.5" */
  wire iLCR_DLAB;
  /* src = "rtl/apb_uart/apb_uart.sv:111.5" */
  wire iLCR_EPS;
  /* src = "rtl/apb_uart/apb_uart.sv:110.5" */
  wire iLCR_PEN;
  /* src = "rtl/apb_uart/apb_uart.sv:112.5" */
  wire iLCR_SP;
  /* src = "rtl/apb_uart/apb_uart.sv:109.5" */
  wire iLCR_STB;
  /* src = "rtl/apb_uart/apb_uart.sv:108.11" */
  wire [1:0] iLCR_WLS;
  /* src = "rtl/apb_uart/apb_uart.sv:90.11" */
  wire [7:0] iLSR;
  /* src = "rtl/apb_uart/apb_uart.sv:78.5" */
  wire iLSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:125.5" */
  wire iLSR_BI;
  /* src = "rtl/apb_uart/apb_uart.sv:121.5" */
  wire iLSR_DR;
  /* src = "rtl/apb_uart/apb_uart.sv:124.5" */
  wire iLSR_FE;
  /* src = "rtl/apb_uart/apb_uart.sv:128.5" */
  wire iLSR_FIFOERR;
  /* src = "rtl/apb_uart/apb_uart.sv:122.5" */
  wire iLSR_OE;
  /* src = "rtl/apb_uart/apb_uart.sv:123.5" */
  wire iLSR_PE;
  /* src = "rtl/apb_uart/apb_uart.sv:127.5" */
  wire iLSR_TEMT;
  /* src = "rtl/apb_uart/apb_uart.sv:126.5" */
  wire iLSR_THRE;
  /* src = "rtl/apb_uart/apb_uart.sv:205.5" */
  wire iLSR_THRERE;
  /* src = "rtl/apb_uart/apb_uart.sv:89.11" */
  wire [7:0] iMCR;
  /* src = "rtl/apb_uart/apb_uart.sv:77.5" */
  wire iMCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:120.5" */
  wire iMCR_AFE;
  /* src = "rtl/apb_uart/apb_uart.sv:115.5" */
  wire iMCR_DTR;
  /* src = "rtl/apb_uart/apb_uart.sv:119.5" */
  wire iMCR_LOOP;
  /* src = "rtl/apb_uart/apb_uart.sv:117.5" */
  wire iMCR_OUT1;
  /* src = "rtl/apb_uart/apb_uart.sv:118.5" */
  wire iMCR_OUT2;
  /* src = "rtl/apb_uart/apb_uart.sv:116.5" */
  wire iMCR_RTS;
  /* src = "rtl/apb_uart/apb_uart.sv:91.11" */
  wire [7:0] iMSR;
  /* src = "rtl/apb_uart/apb_uart.sv:79.5" */
  wire iMSRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:133.5" */
  wire iMSR_CTS;
  /* src = "rtl/apb_uart/apb_uart.sv:136.5" */
  wire iMSR_DCD;
  /* src = "rtl/apb_uart/apb_uart.sv:134.5" */
  wire iMSR_DSR;
  /* src = "rtl/apb_uart/apb_uart.sv:135.5" */
  wire iMSR_RI;
  /* src = "rtl/apb_uart/apb_uart.sv:131.5" */
  wire iMSR_TERI;
  /* src = "rtl/apb_uart/apb_uart.sv:129.5" */
  wire iMSR_dCTS;
  /* src = "rtl/apb_uart/apb_uart.sv:132.5" */
  wire iMSR_dDCD;
  /* src = "rtl/apb_uart/apb_uart.sv:130.5" */
  wire iMSR_dDSR;
  /* src = "rtl/apb_uart/apb_uart.sv:197.5" */
  wire iPERE;
  /* src = "rtl/apb_uart/apb_uart.sv:82.11" */
  wire [7:0] iRBR;
  /* src = "rtl/apb_uart/apb_uart.sv:69.5" */
  wire iRBRRead;
  /* src = "rtl/apb_uart/apb_uart.sv:156.5" */
  wire iRCLK;
  /* src = "rtl/apb_uart/apb_uart.sv:202.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:140.5" */
  wire iRINs;
  /* src = "rtl/apb_uart/apb_uart.sv:144.5" */
  wire iRIn;
  /* src = "rtl/apb_uart/apb_uart.sv:152.5" */
  wire iRInFE;
  /* src = "rtl/apb_uart/apb_uart.sv:151.5" */
  /* unused_bits = "0" */
  wire iRInRE;
  /* src = "rtl/apb_uart/apb_uart.sv:68.5" */
  wire iRST;
  /* src = "rtl/apb_uart/apb_uart.sv:208.5" */
  wire iRTS;
  /* src = "rtl/apb_uart/apb_uart.sv:195.5" */
  wire iRXBI;
  /* src = "rtl/apb_uart/apb_uart.sv:191.5" */
  wire iRXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:192.11" */
  wire [7:0] iRXData;
  /* src = "rtl/apb_uart/apb_uart.sv:194.5" */
  wire iRXFE;
  /* src = "rtl/apb_uart/apb_uart.sv:172.5" */
  wire iRXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:178.5" */
  wire iRXFIFO16Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:173.5" */
  wire iRXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:179.5" */
  wire iRXFIFO64Trigger;
  /* src = "rtl/apb_uart/apb_uart.sv:182.5" */
  wire iRXFIFOBI;
  /* src = "rtl/apb_uart/apb_uart.sv:167.5" */
  wire iRXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:174.12" */
  wire [10:0] iRXFIFOD;
  /* src = "rtl/apb_uart/apb_uart.sv:170.5" */
  wire iRXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:181.5" */
  wire iRXFIFOFE;
  /* src = "rtl/apb_uart/apb_uart.sv:171.5" */
  wire iRXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:180.5" */
  wire iRXFIFOPE;
  /* src = "rtl/apb_uart/apb_uart.sv:175.12" */
  wire [10:0] iRXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:169.5" */
  wire iRXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:177.5" */
  wire iRXFIFOTrigger;
  /* src = "rtl/apb_uart/apb_uart.sv:176.11" */
  /* unused_bits = "0" */
  wire [5:0] iRXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:168.5" */
  wire iRXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:190.5" */
  wire iRXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:193.5" */
  wire iRXPE;
  /* src = "rtl/apb_uart/apb_uart.sv:67.5" */
  wire iRead;
  /* src = "rtl/apb_uart/apb_uart.sv:92.11" */
  wire [7:0] iSCR;
  /* src = "rtl/apb_uart/apb_uart.sv:80.5" */
  wire iSCRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:189.5" */
  wire iSIN;
  /* src = "rtl/apb_uart/apb_uart.sv:188.5" */
  wire iSINr;
  /* src = "rtl/apb_uart/apb_uart.sv:183.5" */
  wire iSOUT;
  /* src = "rtl/apb_uart/apb_uart.sv:206.5" */
  wire iTHRInterrupt;
  /* src = "rtl/apb_uart/apb_uart.sv:70.5" */
  wire iTHRWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:81.11" */
  wire [7:0] iTSR;
  /* src = "rtl/apb_uart/apb_uart.sv:185.5" */
  wire iTXClear;
  /* src = "rtl/apb_uart/apb_uart.sv:207.5" */
  wire iTXEnable;
  /* src = "rtl/apb_uart/apb_uart.sv:163.5" */
  wire iTXFIFO16Full;
  /* src = "rtl/apb_uart/apb_uart.sv:164.5" */
  wire iTXFIFO64Full;
  /* src = "rtl/apb_uart/apb_uart.sv:158.5" */
  wire iTXFIFOClear;
  /* src = "rtl/apb_uart/apb_uart.sv:161.5" */
  wire iTXFIFOEmpty;
  /* src = "rtl/apb_uart/apb_uart.sv:162.5" */
  wire iTXFIFOFull;
  /* src = "rtl/apb_uart/apb_uart.sv:166.11" */
  wire [7:0] iTXFIFOQ;
  /* src = "rtl/apb_uart/apb_uart.sv:160.5" */
  wire iTXFIFORead;
  /* src = "rtl/apb_uart/apb_uart.sv:165.11" */
  /* unused_bits = "0 1 2 3 5" */
  wire [5:0] iTXFIFOUsage;
  /* src = "rtl/apb_uart/apb_uart.sv:159.5" */
  wire iTXFIFOWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:186.5" */
  wire iTXFinished;
  /* src = "rtl/apb_uart/apb_uart.sv:187.5" */
  wire iTXRunning;
  /* src = "rtl/apb_uart/apb_uart.sv:184.5" */
  wire iTXStart;
  /* src = "rtl/apb_uart/apb_uart.sv:203.11" */
  wire [5:0] iTimeoutCount;
  /* src = "rtl/apb_uart/apb_uart.sv:66.5" */
  wire iWrite;
  /* src = "rtl/apb_uart/apb_uart.sv:720.18" */
  wire rx_State;
  /* src = "rtl/apb_uart/apb_uart.sv:721.18" */
  wire [1:0] tx_State;
  /* src = "rtl/apb_uart/apb_uart.sv:210.24-210.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$2y ),
    .B(\$9y ),
    .Y(iRead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:309.33-309.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(iFCR_FIFOEnable),
    .Y(\$100y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:309.33-309.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(\$100y ),
    .B(iLSR_DR),
    .Y(\$102y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:309.82-309.133" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOTrigger),
    .Y(\$105y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:309.32-309.134" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\$102y ),
    .B(\$105y ),
    .Y(iRDAInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:316.18-316.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(iFCR_FIFOEnable),
    .B(iFCR_FIFO64E),
    .Y(iIIR_FIFO64)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:329.14-329.55" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(iRXFIFOEmpty),
    .B(iRBRRead),
    .Y(\$113y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:329.13-329.80" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$115  (
    .A(\$113y ),
    .B(iRXFIFOWrite),
    .Y(\$115y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:334.23-334.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(iRXFIFOEmpty),
    .Y(\$116y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:334.23-334.68" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(\$116y ),
    .B(iBaudtick2x),
    .Y(\$118y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:334.73-334.98" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(iTimeoutCount[5]),
    .Y(\$119y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:334.22-334.98" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(\$118y ),
    .B(\$119y ),
    .Y(\$120y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:336.30-336.47" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd6)
  ) \$121  (
    .A(iTimeoutCount),
    .B(1'h1),
    .Y(\$121y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:211.23-211.53" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(RSTN),
    .Y(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:380.41-380.87" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(\$100y ),
    .B(PWDATA[0]),
    .Y(\$138y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:380.19-380.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(PWDATA[1]),
    .B(\$138y ),
    .Y(\$139y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:380.121-380.139" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(PWDATA[0]),
    .Y(\$141y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:380.93-380.139" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(iFCR_FIFOEnable),
    .B(\$141y ),
    .Y(\$142y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:380.18-380.140" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(\$139y ),
    .B(\$142y ),
    .Y(\$143y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:385.19-385.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(PWDATA[2]),
    .B(\$138y ),
    .Y(\$149y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:212.46-212.61" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(PADDR),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:385.18-385.140" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(\$149y ),
    .B(\$142y ),
    .Y(\$153y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:212.28-212.61" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(iRead),
    .B(\$15y ),
    .Y(\$16y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:212.66-212.84" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(iLCR[7]),
    .Y(\$17y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:455.14-455.84" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$175  (
    .A(\$102y ),
    .B(iRXFinished),
    .Y(\$175y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:455.90-455.138" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$178  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOFull),
    .Y(\$178y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:212.27-212.84" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$16y ),
    .B(\$17y ),
    .Y(iRBRRead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:455.89-455.163" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(\$178y ),
    .B(iRXFinished),
    .Y(\$180y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:455.13-455.164" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(\$175y ),
    .B(\$180y ),
    .Y(\$181y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:487.13-487.28" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(iFECounter),
    .Y(\$197y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:491.46-491.71" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(iRXFIFOQ[10:8]),
    .Y(\$199y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:209.26-209.59" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(PSEL),
    .B(PENABLE),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:491.22-491.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$200  (
    .A(iRXFIFOEmpty),
    .B(\$199y ),
    .Y(\$200y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:501.43-501.64" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(iFEDecrement),
    .Y(\$205y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:501.18-501.64" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(iFEIncrement),
    .B(\$205y ),
    .Y(\$206y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:503.32-503.46" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$207  (
    .A(iFECounter),
    .B({ \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$14972 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:505.31-505.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(iFEIncrement),
    .Y(\$208y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:505.31-505.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(\$208y ),
    .B(iFEDecrement),
    .Y(\$210y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:512.28-512.73" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(\$116y ),
    .B(iRXFIFOQ[8]),
    .Y(iRXFIFOPE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:213.29-213.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(iWrite),
    .B(\$15y ),
    .Y(\$22y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:513.28-513.73" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(\$116y ),
    .B(iRXFIFOQ[9]),
    .Y(iRXFIFOFE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:514.28-514.74" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$225  (
    .A(\$116y ),
    .B(iRXFIFOQ[10]),
    .Y(iRXFIFOBI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:518.56-518.81" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$228  (
    .A(iRXFIFOD[10:8]),
    .Y(\$228y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:518.31-518.81" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$229  (
    .A(iRXFIFOWrite),
    .B(\$228y ),
    .Y(iFEIncrement)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:519.32-519.72" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(\$197y ),
    .B(\$116y ),
    .Y(\$233y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:519.79-519.110" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(iPERE),
    .B(iFERE),
    .Y(\$236y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:519.78-519.128" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$236y ),
    .B(iBIRE),
    .Y(\$238y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:519.31-519.129" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(\$233y ),
    .B(\$238y ),
    .Y(iFEDecrement)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:213.28-213.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$22y ),
    .B(\$17y ),
    .Y(iTHRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:527.30-527.61" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$241  (
    .A(iFCR_FIFOEnable),
    .B(iLSR_FIFOERR),
    .Y(iLSR[7])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:529.26-529.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$244  (
    .A(\$116y ),
    .B(iRXFIFOWrite),
    .Y(iLSR_DR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:531.28-531.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(iTXRunning),
    .Y(\$248y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:531.28-531.69" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$250  (
    .A(\$248y ),
    .B(iLSR_THRE),
    .Y(iLSR_TEMT)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:532.28-532.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$254  (
    .A(iMCR[4]),
    .B(iRTS),
    .Y(\$254y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:532.68-532.86" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$255  (
    .A(iMCR[4]),
    .Y(\$255y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:532.90-532.104" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$256  (
    .A(iCTSn),
    .Y(\$256y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:532.68-532.104" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(\$255y ),
    .B(\$256y ),
    .Y(\$257y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:532.27-532.105" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$258  (
    .A(\$254y ),
    .B(\$257y ),
    .Y(iMSR_CTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:533.28-533.67" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$262  (
    .A(iMCR[4]),
    .B(iMCR[0]),
    .Y(\$262y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:533.94-533.108" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$264  (
    .A(iDSRn),
    .Y(\$264y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:533.72-533.108" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(\$255y ),
    .B(\$264y ),
    .Y(\$265y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:533.27-533.109" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$266  (
    .A(\$262y ),
    .B(\$265y ),
    .Y(iMSR_DSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:534.27-534.67" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$270  (
    .A(iMCR[4]),
    .B(iMCR[2]),
    .Y(\$270y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:534.94-534.107" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$272  (
    .A(iRIn),
    .Y(\$272y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:534.72-534.107" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$273  (
    .A(\$255y ),
    .B(\$272y ),
    .Y(\$273y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:534.26-534.108" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$274  (
    .A(\$270y ),
    .B(\$273y ),
    .Y(iMSR_RI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:535.28-535.68" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$278  (
    .A(iMCR[4]),
    .B(iMCR[3]),
    .Y(\$278y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:535.95-535.109" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$280  (
    .A(iDCDn),
    .Y(\$280y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:535.73-535.109" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(\$255y ),
    .B(\$280y ),
    .Y(\$281y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:535.27-535.110" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$282  (
    .A(\$278y ),
    .B(\$281y ),
    .Y(iMSR_DCD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:571.13-571.48" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$288  (
    .A(iCTSnRE),
    .B(iCTSnFE),
    .Y(\$288y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:579.13-579.48" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(iDSRnRE),
    .B(iDSRnFE),
    .Y(\$294y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:214.28-214.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$22y ),
    .B(iLCR[7]),
    .Y(iDLLWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:595.13-595.48" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$304  (
    .A(iDCDnRE),
    .B(iDCDnFE),
    .Y(\$304y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:660.30-660.84" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$313  (
    .A(iTXFIFOUsage[4]),
    .B(iTXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iTXFIFOFull)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:661.33-661.82" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$316  (
    .A(\$100y ),
    .B(iLSR_THRE),
    .Y(\$316y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:661.115-661.135" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$318  (
    .A(iTXFIFOFull),
    .Y(\$318y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:661.87-661.135" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$319  (
    .A(iFCR_FIFOEnable),
    .B(\$318y ),
    .Y(\$319y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:661.32-661.136" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$320  (
    .A(\$316y ),
    .B(\$319y ),
    .Y(\$320y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:661.31-661.159" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$322  (
    .A(\$320y ),
    .B(iTHRWrite),
    .Y(iTXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:676.30-676.84" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$329  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOFull)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:215.48-215.63" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(PADDR),
    .B(1'h1),
    .Y(\$33y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.39-678.62" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$330  (
    .A(iFCR_RXTrigger),
    .Y(\$330y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.39-678.87" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(\$330y ),
    .B(\$116y ),
    .Y(\$332y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.92-678.115" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$333  (
    .A(iFCR_RXTrigger),
    .B(1'h1),
    .Y(\$333y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.120-678.171" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$336  (
    .A(iRXFIFOUsage[2]),
    .B(iRXFIFOUsage[3]),
    .Y(\$336y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.92-678.172" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$337  (
    .A(\$333y ),
    .B(\$336y ),
    .Y(\$337y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.38-678.173" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(\$332y ),
    .B(\$337y ),
    .Y(\$338y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.178-678.201" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$339  (
    .A(iFCR_RXTrigger),
    .B(2'h2),
    .Y(\$339y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:215.29-215.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(iWrite),
    .B(\$33y ),
    .Y(\$34y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.178-678.229" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$341  (
    .A(\$339y ),
    .B(iRXFIFOUsage[3]),
    .Y(\$341y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.37-678.230" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$342  (
    .A(\$338y ),
    .B(\$341y ),
    .Y(\$342y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.237-678.260" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$343  (
    .A(iFCR_RXTrigger),
    .B(2'h3),
    .Y(\$343y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.237-678.288" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$345  (
    .A(\$343y ),
    .B(iRXFIFOUsage[3]),
    .Y(\$345y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.236-678.317" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$347  (
    .A(\$345y ),
    .B(iRXFIFOUsage[2]),
    .Y(\$347y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.235-678.346" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$349  (
    .A(\$347y ),
    .B(iRXFIFOUsage[1]),
    .Y(\$349y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.36-678.347" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$350  (
    .A(\$342y ),
    .B(\$349y ),
    .Y(\$350y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:678.35-678.373" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$352  (
    .A(\$350y ),
    .B(iRXFIFOUsage[4]),
    .Y(iRXFIFO16Trigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:215.28-215.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(iLCR[7]),
    .Y(iDLMWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.120-679.171" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$360  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFOUsage[5]),
    .Y(\$360y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.92-679.172" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$361  (
    .A(\$333y ),
    .B(\$360y ),
    .Y(\$361y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.38-679.173" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$362  (
    .A(\$332y ),
    .B(\$361y ),
    .Y(\$362y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.178-679.229" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$365  (
    .A(\$339y ),
    .B(iRXFIFOUsage[5]),
    .Y(\$365y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.37-679.230" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$366  (
    .A(\$362y ),
    .B(\$365y ),
    .Y(\$366y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.237-679.288" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$369  (
    .A(\$343y ),
    .B(iRXFIFOUsage[5]),
    .Y(\$369y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.236-679.317" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$371  (
    .A(\$369y ),
    .B(iRXFIFOUsage[4]),
    .Y(\$371y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.235-679.346" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$373  (
    .A(\$371y ),
    .B(iRXFIFOUsage[3]),
    .Y(\$373y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.36-679.347" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$374  (
    .A(\$366y ),
    .B(\$373y ),
    .Y(\$374y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:679.35-679.373" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$376  (
    .A(\$374y ),
    .B(iRXFIFO64Full),
    .Y(iRXFIFO64Trigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:680.33-680.93" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$379  (
    .A(iRXFIFO16Trigger),
    .B(iRXFIFO64Trigger),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOTrigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:714.23-714.58" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$381  (
    .A(iSINr),
    .B(iSOUT),
    .S(iMCR[4]),
    .Y(iSIN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:715.28-715.49" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$382  (
    .A(iLSR_THRE),
    .Y(\$382y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:715.54-715.71" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$383  (
    .A(iMCR[5]),
    .Y(\$383y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:715.75-715.113" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$386  (
    .A(iMCR[5]),
    .B(iMSR_CTS),
    .Y(\$386y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:715.54-715.114" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$387  (
    .A(\$383y ),
    .B(\$386y ),
    .Y(\$387y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:715.28-715.115" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$388  (
    .A(\$382y ),
    .B(\$387y ),
    .Y(iTXEnable)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:209.25-209.79" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(PWRITE),
    .Y(iWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:216.28-216.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$34y ),
    .B(\$17y ),
    .Y(iIERWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:819.13-819.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$420  (
    .A(iMCR[1]),
    .Y(\$420y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:819.34-819.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$423  (
    .A(iMCR[5]),
    .B(iRXFIFOTrigger),
    .Y(\$423y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:819.13-819.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$424  (
    .A(\$420y ),
    .B(\$423y ),
    .Y(\$424y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:823.65-823.107" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$429  (
    .A(iMCR[5]),
    .B(iRXFIFOEmpty),
    .Y(\$429y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:823.44-823.108" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$430  (
    .A(\$383y ),
    .B(\$429y ),
    .Y(\$430y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:823.22-823.109" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$431  (
    .A(iMCR[1]),
    .B(\$430y ),
    .Y(\$431y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:852.34-852.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$439  (
    .A(iMCR[2]),
    .Y(\$439y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:852.13-852.52" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$440  (
    .A(iMCR[4]),
    .B(\$439y ),
    .Y(\$440y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:857.34-857.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$443  (
    .A(iMCR[3]),
    .Y(\$443y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:857.13-857.52" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$444  (
    .A(iMCR[4]),
    .B(\$443y ),
    .Y(\$444y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:862.34-862.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$447  (
    .A(iRTS),
    .Y(\$447y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:862.13-862.47" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$448  (
    .A(iMCR[4]),
    .B(\$447y ),
    .Y(\$448y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:217.45-217.60" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(PADDR),
    .B(2'h2),
    .Y(\$45y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:867.34-867.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$451  (
    .A(iMCR[0]),
    .Y(\$451y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:867.13-867.51" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$452  (
    .A(iMCR[4]),
    .B(\$451y ),
    .Y(\$452y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:872.13-872.48" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$456  (
    .A(iMCR[4]),
    .B(iSOUT),
    .Y(\$456y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:217.27-217.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(iRead),
    .B(\$45y ),
    .Y(iIIRRead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:218.28-218.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(iWrite),
    .B(\$45y ),
    .Y(iFCRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:219.47-219.62" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(PADDR),
    .B(2'h3),
    .Y(\$53y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:219.28-219.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(iWrite),
    .B(\$53y ),
    .Y(iLCRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:220.47-220.62" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(PADDR),
    .B(3'h4),
    .Y(\$57y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:220.28-220.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(iWrite),
    .B(\$57y ),
    .Y(iMCRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:221.45-221.60" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(PADDR),
    .B(3'h5),
    .Y(\$61y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:221.27-221.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(iRead),
    .B(\$61y ),
    .Y(iLSRRead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:222.45-222.60" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(PADDR),
    .B(3'h6),
    .Y(\$65y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:222.27-222.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(iRead),
    .B(\$65y ),
    .Y(iMSRRead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:223.47-223.62" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(PADDR),
    .B(3'h7),
    .Y(\$69y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:223.28-223.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(iWrite),
    .B(\$69y ),
    .Y(iSCRWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:299.14-299.62" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(iLSR_THRERE),
    .B(iFCR_TXFIFOReset),
    .Y(\$86y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:299.68-299.108" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(iIERWrite),
    .B(PWDATA[1]),
    .Y(\$89y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:210.63-210.78" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(PWRITE),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:299.67-299.131" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\$89y ),
    .B(iLSR_THRE),
    .Y(\$91y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:299.13-299.132" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(\$86y ),
    .B(\$91y ),
    .Y(\$92y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:303.44-303.64" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(iIIR[3:1]),
    .B(1'h1),
    .Y(\$94y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:303.23-303.64" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(iIIRRead),
    .B(\$94y ),
    .Y(\$95y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:303.22-303.86" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$97  (
    .A(\$95y ),
    .B(iTHRWrite),
    .Y(\$97y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$13797  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTimeoutCount$123 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13798 ),
    .Q(iTimeoutCount)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$13800  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(iTXFIFOQ),
    .EN(\$iTXFIFORead$398 ),
    .Q(iTSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:614.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$13801  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iSCRWrite),
    .Q(iSCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$13802  (
    .ARST(RSTN),
    .CLK(CLK),
    .D({ iRXBI, iRXFE, iRXPE, iRXData }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13805 ),
    .Q(iRXFIFOD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:422.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$13807  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5:0]),
    .EN(iMCRWrite),
    .Q(iMCR[5:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:400.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$13809  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iLCRWrite),
    .Q(iLCR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:254.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$13810  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[3:0]),
    .EN(iIERWrite),
    .Q(iIER[3:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$13812  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFECounter$214 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13813 ),
    .Q(iFECounter)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13815  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:6]),
    .EN(iFCRWrite),
    .Q(iFCR_RXTrigger)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13816  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[0]),
    .EN(iFCRWrite),
    .Q(iFCR_FIFOEnable)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13817  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13818 ),
    .Q(iFCR_FIFO64E)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$13820  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLMWrite),
    .Q(iDLM)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$13821  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLLWrite),
    .Q(iDLL)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13799  (
    .A({ \$120y , \$115y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13798 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13814  (
    .A({ iRXFIFOClear, \$206y , \$210y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13813 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$13803  (
    .A(rx_State),
    .Y(\$auto$rtlil.cc:2957:Not$13804 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13806  (
    .A({ \$auto$rtlil.cc:2957:Not$13804 , iRXFinished }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13805 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13819  (
    .A({ iLCR[7], iFCRWrite }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13818 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13230  (
    .A({ \$iTXRunning$400 , \$iTXFIFORead$398  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13231 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$14973  (
    .A(\$206y ),
    .Y(\$auto$rtlil.cc:3092:Mux$14974 [6])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$DTRN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$452y ),
    .Q(DTRN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT1N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$440y ),
    .Q(OUT1N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT2N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$444y ),
    .Q(OUT2N)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$RTSN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$448y ),
    .Q(RTSN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$SOUT  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$456y ),
    .Q(SOUT)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBAUDOUTN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iBAUDOUTN$437 ),
    .Q(iBAUDOUTN)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:320.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iCharTimeout  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iCharTimeout$129 ),
    .Q(iCharTimeout)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_RXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFCR_RXFIFOReset$156 ),
    .Q(iFCR_RXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_TXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iFCR_TXFIFOReset$157 ),
    .Q(iFCR_TXFIFOReset)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_BI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_BI$196 ),
    .Q(iLSR_BI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FE$192 ),
    .Q(iLSR_FE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FIFOERR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_FIFOERR$202 ),
    .Q(iLSR_FIFOERR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_OE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_OE$184 ),
    .Q(iLSR_OE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_PE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iLSR_PE$188 ),
    .Q(iLSR_PE)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_TERI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_TERI$301 ),
    .Q(iMSR_TERI)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dCTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dCTS$291 ),
    .Q(iMSR_dCTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDCD  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDCD$307 ),
    .Q(iMSR_dDCD)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDSR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iMSR_dDSR$297 ),
    .Q(iMSR_dDSR)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:812.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRTS$433 ),
    .Q(iRTS)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOClear  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOClear$414 ),
    .Q(iRXFIFOClear)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOWrite  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iRXFIFOWrite$415 ),
    .Q(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:292.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTHRInterrupt  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTHRInterrupt$99 ),
    .Q(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXFIFORead  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXFIFORead$398 ),
    .Q(iTXFIFORead)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXRunning  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXRunning$400 ),
    .Q(iTXRunning)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXStart  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$iTXStart$399 ),
    .Q(iTXStart)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$procmux$11175_Y ),
    .Q(rx_State)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$tx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$procmux$11225_Y ),
    .Q(tx_State)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:897.18-897.38|rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$11108  (
    .A({ 4'h0, iIER[3:0] }),
    .B(iDLM),
    .S(iLCR[7]),
    .Y(\$PRDATA[7:0]$462 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:932.13-932.33|rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd8)
  ) \$procmux$11112  (
    .A(\$PRDATA[7:0]$460 ),
    .B({ \$PRDATA[7:0]$462 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }),
    .S({ \$33y , \$45y , \$53y , \$57y , \$61y , \$65y , \$69y  }),
    .Y(PRDATA[7:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:885.18-885.38|rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$11131  (
    .A(iRXFIFOQ[7:0]),
    .B(iDLL),
    .S(iLCR[7]),
    .Y(\$PRDATA[7:0]$460 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:849.13-849.32|rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11150  (
    .A(iBaudtick16x),
    .Y(\$iBAUDOUTN$437 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:825.13-825.27|rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11152  (
    .A(iRTS),
    .B(\$431y ),
    .Y(\$iRTS$432 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:821.13-821.27|rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11159  (
    .A(\$iRTS$432 ),
    .B(1'h0),
    .S(\$424y ),
    .Y(\$iRTS$433 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:805.24-805.45|rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11161  (
    .A(iRXFIFOFull),
    .Y(\$iRXFIFOWrite$412 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:803.24-803.45|rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11170  (
    .A(1'h1),
    .B(\$iRXFIFOWrite$412 ),
    .S(iFCR_FIFOEnable),
    .Y(\$iRXFIFOWrite$413 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11175  (
    .A(iRXFinished),
    .B(1'h0),
    .S(rx_State),
    .Y(\$procmux$11175_Y )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:794.29-794.50|rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11188  (
    .A(1'h1),
    .B(iFCR_RXFIFOReset),
    .S(iFCR_FIFOEnable),
    .Y(\$iRXFIFOClear$406 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:791.24-796.27|rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11204  (
    .A(iFCR_RXFIFOReset),
    .B(\$iRXFIFOClear$406 ),
    .S(iRXFinished),
    .Y(\$iRXFIFOClear$407 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:801.19-807.22|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11213  (
    .A(rx_State),
    .B(\$iRXFIFOWrite$413 ),
    .Y(\$iRXFIFOWrite$415 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:790.22-798.43|rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11217  (
    .A(\$iRXFIFOClear$407 ),
    .B(iFCR_RXFIFOReset),
    .S(rx_State),
    .Y(\$iRXFIFOClear$414 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11224_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$iTXRunning$400 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$11225  (
    .A({ 1'h0, iTXEnable }),
    .B({ 3'h5, iTXFinished, 2'h0 }),
    .S({ \$iTXFIFORead$398 , \$iTXRunning$400 , \$procmux$11226_CMP  }),
    .Y(\$procmux$11225_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:767.31-767.50|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11226_CMP0  (
    .A(tx_State),
    .B(2'h3),
    .Y(\$procmux$11226_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:752.19-757.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11229_CMP0  (
    .A(tx_State),
    .B(1'h1),
    .Y(\$iTXFIFORead$398 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:743.22-749.43|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11231_CMP0  (
    .A(tx_State),
    .Y(\$procmux$11231_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:759.19-766.22|rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11254  (
    .A(1'h0),
    .B({ iTXEnable, 1'h1 }),
    .S({ \$procmux$11231_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13231  }),
    .Y(\$iTXStart$399 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:601.13-601.32|rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11269  (
    .A(iMSR_dDCD),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dDCD$306 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:597.13-597.32|rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11276  (
    .A(\$iMSR_dDCD$306 ),
    .B(\$304y ),
    .Y(\$iMSR_dDCD$307 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:593.13-593.32|rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11278  (
    .A(iMSR_TERI),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_TERI$300 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:589.13-589.32|rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11285  (
    .A(\$iMSR_TERI$300 ),
    .B(iRInFE),
    .Y(\$iMSR_TERI$301 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:585.13-585.32|rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11287  (
    .A(iMSR_dDSR),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dDSR$296 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:581.13-581.32|rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11294  (
    .A(\$iMSR_dDSR$296 ),
    .B(\$294y ),
    .Y(\$iMSR_dDSR$297 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:577.13-577.32|rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11296  (
    .A(iMSR_dCTS),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$iMSR_dCTS$290 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:573.13-573.32|rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11303  (
    .A(\$iMSR_dCTS$290 ),
    .B(\$288y ),
    .Y(\$iMSR_dCTS$291 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:497.13-497.29|rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$11322  (
    .A(\$auto$opt_share.cc:222:merge_operators$14972 ),
    .B(7'h00),
    .S(iRXFIFOClear),
    .Y(\$iFECounter$214 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:493.13-493.35|rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11324  (
    .A(iLSR_FIFOERR),
    .B(1'h0),
    .S(\$200y ),
    .Y(\$iLSR_FIFOERR$201 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:489.13-489.35|rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11331  (
    .A(\$iLSR_FIFOERR$201 ),
    .B(\$197y ),
    .Y(\$iLSR_FIFOERR$202 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:485.13-485.30|rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11333  (
    .A(iLSR_BI),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_BI$195 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:481.13-481.30|rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11340  (
    .A(\$iLSR_BI$195 ),
    .B(iBIRE),
    .Y(\$iLSR_BI$196 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:477.13-477.30|rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11342  (
    .A(iLSR_FE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_FE$191 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:473.13-473.30|rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11349  (
    .A(\$iLSR_FE$191 ),
    .B(iFERE),
    .Y(\$iLSR_FE$192 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:469.13-469.30|rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11351  (
    .A(iLSR_PE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_PE$187 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:465.13-465.30|rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11358  (
    .A(\$iLSR_PE$187 ),
    .B(iPERE),
    .Y(\$iLSR_PE$188 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:461.13-461.30|rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11360  (
    .A(iLSR_OE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$iLSR_OE$183 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:457.13-457.30|rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11367  (
    .A(\$iLSR_OE$183 ),
    .B(\$181y ),
    .Y(\$iLSR_OE$184 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11397  (
    .A(iFCRWrite),
    .B(\$153y ),
    .Y(\$iFCR_TXFIFOReset$157 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:371.10-389.13|rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11400  (
    .A(iFCRWrite),
    .B(\$143y ),
    .Y(\$iFCR_RXFIFOReset$156 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:340.13-347.18|rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11407  (
    .A(iFCR_FIFOEnable),
    .B(\$iCharTimeout$128 ),
    .Y(\$iCharTimeout$129 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:346.18-346.40|rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11410  (
    .A(iCharTimeout),
    .B(iTimeoutCount[5]),
    .Y(\$iCharTimeout$127 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:342.18-342.40|rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11420  (
    .A(\$iCharTimeout$127 ),
    .B(1'h0),
    .S(iRBRRead),
    .Y(\$iCharTimeout$128 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:332.13-332.72|rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$11431  (
    .A(\$121y ),
    .B(6'h00),
    .S(\$115y ),
    .Y(\$iTimeoutCount$123 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:305.13-305.36|rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11433  (
    .A(iTHRInterrupt),
    .B(1'h0),
    .S(\$97y ),
    .Y(\$iTHRInterrupt$98 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/apb_uart.sv:301.13-301.36|rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11440  (
    .A(\$iTHRInterrupt$98 ),
    .B(\$92y ),
    .Y(\$iTHRInterrupt$99 )
  );
  /* src = "rtl/apb_uart/apb_uart.sv:630.14" */
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:637.29" */
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:517.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:536.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:554.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:542.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:548.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:516.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:229.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:231.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:230.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:232.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:273.16" */
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:285.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:225.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:227.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:226.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:228.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:224.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:515.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:642.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:697.15" */
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:663.37" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  /* src = "rtl/apb_uart/apb_uart.sv:681.18" */
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  /* src = "rtl/apb_uart/apb_uart.sv:648.36" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:3092:Mux$14974 [5:0] = { \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], \$auto$rtlil.cc:3092:Mux$14974 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iBaudgenDiv = { iDLM, iDLL };
  assign iFCR = { iFCR_RXTrigger, iFCR_FIFO64E, 2'b0x, iFCR_TXFIFOReset, iFCR_RXFIFOReset, iFCR_FIFOEnable };
  assign iFCR_DMAMode = 1'hx;
  assign iIER[7:4] = 4'h0;
  assign iIER_EDSSI = iIER[3];
  assign iIER_ELSI = iIER[2];
  assign iIER_ERBI = iIER[0];
  assign iIER_ETBEI = iIER[1];
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iIIR_ID0 = iIIR[1];
  assign iIIR_ID1 = iIIR[2];
  assign iIIR_ID2 = iIIR[3];
  assign iIIR_PI = iIIR[0];
  assign iLCR_BC = iLCR[6];
  assign iLCR_DLAB = iLCR[7];
  assign iLCR_EPS = iLCR[4];
  assign iLCR_PEN = iLCR[3];
  assign iLCR_SP = iLCR[5];
  assign iLCR_STB = iLCR[2];
  assign iLCR_WLS = iLCR[1:0];
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
  assign iMCR_AFE = iMCR[5];
  assign iMCR_DTR = iMCR[0];
  assign iMCR_LOOP = iMCR[4];
  assign iMCR_OUT1 = iMCR[2];
  assign iMCR_OUT2 = iMCR[3];
  assign iMCR_RTS = iMCR[1];
  assign iMSR = { iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS };
  assign iRBR = iRXFIFOQ[7:0];
  assign iRXClear = 1'h0;
  assign iRXFIFO16Full = iRXFIFOUsage[4];
  assign iRXFIFORead = iRBRRead;
  assign iTXClear = 1'h0;
  assign iTXFIFO16Full = iTXFIFOUsage[4];
  assign iTXFIFOClear = iFCR_TXFIFOReset;
  assign iTXFIFOEmpty = iLSR_THRE;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$0y ;
  wire \$1y ;
  wire \$4y ;
  wire \$5y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [40:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.35-111.53" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.21-111.53" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(src_valid_i),
    .B(\$0y ),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:118.24-118.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(s_src_ready),
    .B(\$0y ),
    .Y(src_ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.35-131.53" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(s_dst_isolate_req),
    .Y(\$4y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.21-131.53" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(dst_ready_i),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:137.24-137.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(s_dst_valid),
    .B(\$4y ),
    .Y(dst_valid_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$5y ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$1y )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$0y ;
  wire \$1y ;
  wire \$4y ;
  wire \$5y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [33:0] async_data;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.35-111.53" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(s_src_isolate_req),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:111.21-111.53" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(src_valid_i),
    .B(\$0y ),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:118.24-118.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(s_src_ready),
    .B(\$0y ),
    .Y(src_ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.35-131.53" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(s_dst_isolate_req),
    .Y(\$4y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:131.21-131.53" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(dst_ready_i),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:137.24-137.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(s_dst_valid),
    .B(\$4y ),
    .Y(dst_valid_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$5y ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$1y )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$1y ;
  wire \$2y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13826 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [40:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [40:0] data_o;
  wire [40:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.18-306.36" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:335.21-335.47" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.19-307.29" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(ack_dst_q),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.36" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.40-315.48" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(valid_o),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$6y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13822  (
    .CLK(clk_i),
    .D(async_data_i[33:32]),
    .EN(\$8y ),
    .Q(data_dst_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$13823  (
    .CLK(clk_i),
    .D(async_data_i[31:0]),
    .EN(\$8y ),
    .Q(data_dst_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$13824  (
    .CLK(clk_i),
    .D(async_data_i[40:34]),
    .EN(\$8y ),
    .Q(data_dst_q[40:34])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13825  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13826 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13827  (
    .A({ clear_i, \$1y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13826 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$1969  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$8y ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1978  (
    .A(\$2y ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$1y ;
  wire \$2y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13831 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [33:0] data_dst_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:306.18-306.36" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:335.21-335.47" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:307.19-307.29" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(ack_dst_q),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.36" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$6y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.40-315.48" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(valid_o),
    .Y(\$7y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:315.9-315.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$6y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13828  (
    .CLK(clk_i),
    .D(async_data_i[1:0]),
    .EN(\$8y ),
    .Q(data_dst_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$13829  (
    .CLK(clk_i),
    .D(async_data_i[33:2]),
    .EN(\$8y ),
    .Q(data_dst_q[33:2])
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13830  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13831 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13832  (
    .A({ clear_i, \$1y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13831 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$1940  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$8y ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1949  (
    .A(\$2y ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13834 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13839 ;
  wire \$auto$rtlil.cc:2957:Not$13838 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [40:0] \$data_src_d$4 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [40:0] async_data_o;
  wire [40:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [40:0] data_i;
  wire [40:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [40:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.18-237.36" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:254.21-254.44" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:238.20-238.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_src_q),
    .Y(\$2y )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13833  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13834 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13836  (
    .CLK(clk_i),
    .D(data_i[33:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13839 ),
    .Q(data_src_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$13841  (
    .CLK(clk_i),
    .D(data_i[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13839 ),
    .Q(data_src_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$13846  (
    .CLK(clk_i),
    .D(data_i[40:34]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13839 ),
    .Q(data_src_q[40:34])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13835  (
    .A({ clear_i, \$1y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13834 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$13837  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2957:Not$13838 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13840  (
    .A({ \$auto$rtlil.cc:2957:Not$13838 , \$1y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13839 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$1980  (
    .A(data_src_q),
    .B(data_i),
    .S(\$1y ),
    .Y(\$data_src_d$4 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1992  (
    .A(\$2y ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$1996  (
    .A(\$data_src_d$4 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13852 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13857 ;
  wire \$auto$rtlil.cc:2957:Not$13856 ;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [33:0] \$data_src_d$4 ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [33:0] async_data_o;
  wire [33:0] async_data_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [33:0] data_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.18-237.36" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$1y )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:254.21-254.44" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:238.20-238.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_src_q),
    .Y(\$2y )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$13851  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$13852 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13854  (
    .CLK(clk_i),
    .D(data_i[1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13857 ),
    .Q(data_src_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$13859  (
    .CLK(clk_i),
    .D(data_i[33:2]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13857 ),
    .Q(data_src_q[33:2])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13853  (
    .A({ clear_i, \$1y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13852 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$13855  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2957:Not$13856 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13858  (
    .A({ \$auto$rtlil.cc:2957:Not$13856 , \$1y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13857 )
  );
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$1951  (
    .A(data_src_q),
    .B(data_i),
    .S(\$1y ),
    .Y(\$data_src_d$4 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1963  (
    .A(\$2y ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$1967  (
    .A(\$data_src_d$4 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13865 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13867 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13869 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13871 ;
  wire \$procmux$460_CMP ;
  wire \$procmux$471_CMP ;
  wire \$procmux$485_CMP ;
  wire [1:0] \$procmux$490_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13864  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13871 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13866  (
    .A({ \$procmux$471_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13865 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13868  (
    .A({ \$procmux$485_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13867 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13870  (
    .A({ \$procmux$460_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13869 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13872  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13865 , \$auto$opt_dff.cc:194:make_patterns_logic$13867 , \$auto$opt_dff.cc:194:make_patterns_logic$13869  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13871 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$460_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$460_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$471_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$471_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$480  (
    .A(2'h0),
    .B({ \$procmux$490_Y , 2'h2 }),
    .S({ \$procmux$485_CMP , \$procmux$471_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$485_CMP0  (
    .A(state_q),
    .Y(\$procmux$485_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$490  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$490_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$515  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$485_CMP , \$procmux$471_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$521  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$471_CMP , \$procmux$460_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13874 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13876 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13878 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13880 ;
  wire \$procmux$311_CMP ;
  wire \$procmux$322_CMP ;
  wire \$procmux$336_CMP ;
  wire [1:0] \$procmux$341_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13873  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13880 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13875  (
    .A({ \$procmux$322_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13874 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13877  (
    .A({ \$procmux$336_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13876 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13879  (
    .A({ \$procmux$311_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13878 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13881  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13878 , \$auto$opt_dff.cc:194:make_patterns_logic$13876 , \$auto$opt_dff.cc:194:make_patterns_logic$13874  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13880 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$311_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$311_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$322_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$322_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$331  (
    .A(2'h0),
    .B({ \$procmux$341_Y , 2'h2 }),
    .S({ \$procmux$336_CMP , \$procmux$322_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$336_CMP0  (
    .A(state_q),
    .Y(\$procmux$336_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$341  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$341_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$366  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$336_CMP , \$procmux$322_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$372  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$322_CMP , \$procmux$311_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13883 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13885 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13887 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13889 ;
  wire \$procmux$162_CMP ;
  wire \$procmux$173_CMP ;
  wire \$procmux$187_CMP ;
  wire [1:0] \$procmux$192_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13882  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13889 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13884  (
    .A({ \$procmux$173_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13883 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13886  (
    .A({ \$procmux$187_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13885 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13888  (
    .A({ \$procmux$162_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13887 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13890  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13883 , \$auto$opt_dff.cc:194:make_patterns_logic$13885 , \$auto$opt_dff.cc:194:make_patterns_logic$13887  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13889 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$162_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$162_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$173_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$173_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$182  (
    .A(2'h0),
    .B({ \$procmux$192_Y , 2'h2 }),
    .S({ \$procmux$187_CMP , \$procmux$173_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$187_CMP0  (
    .A(state_q),
    .Y(\$procmux$187_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$192  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$192_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$217  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$187_CMP , \$procmux$173_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$223  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$173_CMP , \$procmux$162_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, ready_i, valid_o, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13892 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13894 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13896 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13898 ;
  wire \$procmux$13_CMP ;
  wire \$procmux$24_CMP ;
  wire \$procmux$38_CMP ;
  wire [1:0] \$procmux$43_Y ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13891  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13898 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13893  (
    .A({ \$procmux$24_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13892 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13895  (
    .A({ \$procmux$38_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13894 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13897  (
    .A({ \$procmux$13_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13896 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13899  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13892 , \$auto$opt_dff.cc:194:make_patterns_logic$13894 , \$auto$opt_dff.cc:194:make_patterns_logic$13896  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13898 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$13_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$24_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$24_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$33  (
    .A(2'h0),
    .B({ \$procmux$43_Y , 2'h2 }),
    .S({ \$procmux$38_CMP , \$procmux$24_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:252.9-259.12|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$38_CMP0  (
    .A(state_q),
    .Y(\$procmux$38_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:255.13-255.41|rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$43  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$procmux$43_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:262.28-268.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$68  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$38_CMP , \$procmux$24_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:270.26-276.10|rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$74  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$24_CMP , \$procmux$13_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13904 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13906 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13908 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13901 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13910 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$529_CMP ;
  wire \$procmux$531_Y ;
  wire \$procmux$545_CMP ;
  wire \$procmux$559_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13900  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13901 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13903  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13910 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13905  (
    .A({ \$procmux$559_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13904 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13907  (
    .A({ \$procmux$545_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13906 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13909  (
    .A({ \$procmux$529_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13908 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13902  (
    .A({ \$procmux$559_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13901 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13911  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13906 , \$auto$opt_dff.cc:194:make_patterns_logic$13908 , \$auto$opt_dff.cc:194:make_patterns_logic$13904  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13910 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$529_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$529_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$545_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$545_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$548  (
    .A(ack_synced),
    .Y(\$procmux$531_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$554  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$559_CMP , \$procmux$545_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$559_CMP0  (
    .A(state_q),
    .Y(\$procmux$559_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$570  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$588  (
    .A(\$procmux$529_CMP ),
    .B(\$procmux$531_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$596  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$559_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$601  (
    .A(1'h0),
    .B({ valid_i, \$procmux$531_Y  }),
    .S({ \$procmux$559_CMP , \$procmux$545_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13916 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13918 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13920 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13913 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13922 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$380_CMP ;
  wire \$procmux$382_Y ;
  wire \$procmux$396_CMP ;
  wire \$procmux$410_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13912  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13913 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13915  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13922 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13917  (
    .A({ \$procmux$410_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13916 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13919  (
    .A({ \$procmux$396_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13918 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13921  (
    .A({ \$procmux$380_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13920 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13914  (
    .A({ \$procmux$410_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13913 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13923  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13916 , \$auto$opt_dff.cc:194:make_patterns_logic$13918 , \$auto$opt_dff.cc:194:make_patterns_logic$13920  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13922 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$380_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$380_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$396_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$396_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$399  (
    .A(ack_synced),
    .Y(\$procmux$382_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$405  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$410_CMP , \$procmux$396_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$410_CMP0  (
    .A(state_q),
    .Y(\$procmux$410_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$421  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$439  (
    .A(\$procmux$380_CMP ),
    .B(\$procmux$382_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$447  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$410_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$452  (
    .A(1'h0),
    .B({ valid_i, \$procmux$382_Y  }),
    .S({ \$procmux$410_CMP , \$procmux$396_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13928 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13930 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13932 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13925 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13934 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$231_CMP ;
  wire \$procmux$233_Y ;
  wire \$procmux$247_CMP ;
  wire \$procmux$261_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13924  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13925 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13927  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13934 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13929  (
    .A({ \$procmux$261_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13928 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13931  (
    .A({ \$procmux$247_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13930 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13933  (
    .A({ \$procmux$231_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13932 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13926  (
    .A({ \$procmux$261_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13925 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13935  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13928 , \$auto$opt_dff.cc:194:make_patterns_logic$13930 , \$auto$opt_dff.cc:194:make_patterns_logic$13932  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13934 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$231_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$231_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$247_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$247_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$250  (
    .A(ack_synced),
    .Y(\$procmux$233_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$256  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$261_CMP , \$procmux$247_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$261_CMP0  (
    .A(state_q),
    .Y(\$procmux$261_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$272  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$290  (
    .A(\$procmux$231_CMP ),
    .B(\$procmux$233_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$298  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$261_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$303  (
    .A(1'h0),
    .B({ valid_i, \$procmux$233_Y  }),
    .S({ \$procmux$261_CMP , \$procmux$247_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13940 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13942 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13944 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13937 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13946 ;
  /* src = "rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$data_src_d$3 ;
  wire \$procmux$101_Y ;
  wire \$procmux$104_CMP ;
  wire \$procmux$108_CMP ;
  wire \$procmux$112_CMP ;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13936  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13937 ),
    .Q(data_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13939  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13946 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13941  (
    .A({ \$procmux$112_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13940 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13943  (
    .A({ \$procmux$104_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13942 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13945  (
    .A({ \$procmux$108_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13944 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13938  (
    .A({ \$procmux$112_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13937 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13947  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13940 , \$auto$opt_dff.cc:194:make_patterns_logic$13942 , \$auto$opt_dff.cc:194:make_patterns_logic$13944  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13946 )
  );
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:153.33-156.12|rtl/common_cells/cdc_4phase.sv:153.9-156.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$101  (
    .A(ack_synced),
    .Y(\$procmux$101_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$104_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$104_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$107  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$112_CMP , \$procmux$104_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$108_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$108_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$112_CMP0  (
    .A(state_q),
    .Y(\$procmux$112_CMP )
  );
  /* src = "rtl/common_cells/cdc_4phase.sv:145.22-149.12|rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$123  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$data_src_d$3 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:159.9-164.12|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$141  (
    .A(\$procmux$108_CMP ),
    .B(\$procmux$101_Y ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:136.13-150.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$149  (
    .A(data_src_q),
    .B(\$data_src_d$3 ),
    .S(\$procmux$112_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_4phase.sv:151.24-157.10|rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$154  (
    .A(1'h0),
    .B({ valid_i, \$procmux$101_Y  }),
    .S({ \$procmux$112_CMP , \$procmux$104_CMP  }),
    .Y(req_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13950 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13952 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13954 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13956 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13958 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13960 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13962 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13964 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13966 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13968 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13233 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13235 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13241 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13245 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13247 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13251 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14947 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14949 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$10 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1487_Y ;
  wire \$procmux$1488_CMP ;
  wire \$procmux$1489_CMP ;
  wire \$procmux$1490_CMP ;
  wire \$procmux$1491_CMP ;
  wire \$procmux$1522_Y ;
  wire \$procmux$1523_CMP ;
  wire \$procmux$1524_CMP ;
  wire \$procmux$1525_CMP ;
  wire \$procmux$1526_CMP ;
  wire \$procmux$1538_Y ;
  wire \$procmux$1551_CMP ;
  wire \$procmux$1557_CMP ;
  wire \$procmux$1564_CMP ;
  wire \$procmux$1572_CMP ;
  wire \$procmux$1587_CMP ;
  wire \$procmux$1622_CMP ;
  wire \$procmux$1633_CMP ;
  wire \$procmux$1651_CMP ;
  wire \$procmux$1702_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$28y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13948  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$28y ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$13949  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13968 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13951  (
    .A({ \$procmux$1651_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13950 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13953  (
    .A({ \$procmux$1587_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13952 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13955  (
    .A({ \$procmux$1702_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13954 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13957  (
    .A({ \$procmux$1633_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13956 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13959  (
    .A({ \$procmux$1572_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13958 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13961  (
    .A({ \$procmux$1551_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13960 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13963  (
    .A({ \$procmux$1557_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13962 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13965  (
    .A({ \$procmux$1564_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13964 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13967  (
    .A({ \$procmux$1622_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13966 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13969  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13950 , \$auto$opt_dff.cc:194:make_patterns_logic$13952 , \$auto$opt_dff.cc:194:make_patterns_logic$13954 , \$auto$opt_dff.cc:194:make_patterns_logic$13956 , \$auto$opt_dff.cc:194:make_patterns_logic$13958 , \$auto$opt_dff.cc:194:make_patterns_logic$13960 , \$auto$opt_dff.cc:194:make_patterns_logic$13962 , \$auto$opt_dff.cc:194:make_patterns_logic$13964 , \$auto$opt_dff.cc:194:make_patterns_logic$13966  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13968 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13232  (
    .A({ \$procmux$1490_CMP , \$procmux$1489_CMP , \$procmux$1488_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13233 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13234  (
    .A({ \$procmux$1526_CMP , \$procmux$1525_CMP , \$procmux$1523_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13235 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13238  (
    .A({ \$procmux$1651_CMP , \$procmux$1633_CMP , \$procmux$1622_CMP , \$procmux$1587_CMP , \$procmux$1572_CMP , \$procmux$1564_CMP , \$procmux$1557_CMP , \$procmux$1551_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13240  (
    .A({ \$procmux$1525_CMP , \$procmux$1524_CMP , \$procmux$1523_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13241 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13242  (
    .A({ \$procmux$1651_CMP , \$procmux$1622_CMP , \$procmux$1587_CMP , \$procmux$1564_CMP , \$procmux$1557_CMP , \$procmux$1551_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13244  (
    .A({ \$procmux$1526_CMP , \$procmux$1523_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13245 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13246  (
    .A({ \$procmux$1491_CMP , \$procmux$1490_CMP , \$procmux$1488_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13247 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13248  (
    .A({ \$procmux$1587_CMP , \$procmux$1572_CMP , \$procmux$1564_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13250  (
    .A({ \$procmux$1651_CMP , \$procmux$1633_CMP , \$procmux$1622_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13251 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14946  (
    .A({ \$procmux$1572_CMP , \$procmux$1564_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14947 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14948  (
    .A({ \$procmux$1633_CMP , \$procmux$1622_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14949 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1487  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13247 ),
    .Y(\$procmux$1487_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1488_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$1488_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1489_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$1489_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1490_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$1490_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1491_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$1491_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1509  (
    .A(\$procmux$1487_Y ),
    .B(\$procmux$1522_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1514  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13233 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$13241 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1519  (
    .A(receiver_phase_req),
    .B(\$procmux$1538_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1522  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13235 ),
    .Y(\$procmux$1522_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1523_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$1523_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1524_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$1524_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1525_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$1525_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1526_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$1526_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1538  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$1524_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13245  }),
    .Y(\$procmux$1538_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1551_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$1551_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1557_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$1557_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1564_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$1564_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1572_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$1572_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1587_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$1587_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1595  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$10 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1609  (
    .A(\$initiator_state_d$10 [1:0]),
    .B(2'h3),
    .S(\$8y ),
    .Y(\$initiator_state_d$11 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1622_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$1622_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1633_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$1633_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1651_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$1651_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$1679  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$2y ),
    .Y(\$initiator_state_d$5 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$1685  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }),
    .S({ \$procmux$1651_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14949 , \$procmux$1587_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14947 , \$procmux$1557_CMP , \$procmux$1551_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1702_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$1702_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1767  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13251 , initiator_clear_out, \$procmux$1557_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13972 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13974 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13976 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13978 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13980 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13982 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13984 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13986 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13988 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$13990 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13253 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13255 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13261 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13265 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13267 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13271 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14951 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14953 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$10 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1193_Y ;
  wire \$procmux$1194_CMP ;
  wire \$procmux$1195_CMP ;
  wire \$procmux$1196_CMP ;
  wire \$procmux$1197_CMP ;
  wire \$procmux$1228_Y ;
  wire \$procmux$1229_CMP ;
  wire \$procmux$1230_CMP ;
  wire \$procmux$1231_CMP ;
  wire \$procmux$1232_CMP ;
  wire \$procmux$1244_Y ;
  wire \$procmux$1257_CMP ;
  wire \$procmux$1263_CMP ;
  wire \$procmux$1270_CMP ;
  wire \$procmux$1278_CMP ;
  wire \$procmux$1293_CMP ;
  wire \$procmux$1328_CMP ;
  wire \$procmux$1339_CMP ;
  wire \$procmux$1357_CMP ;
  wire \$procmux$1408_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$28y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13970  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$28y ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$13971  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$13990 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13973  (
    .A({ \$procmux$1357_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13972 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13975  (
    .A({ \$procmux$1293_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13974 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13977  (
    .A({ \$procmux$1408_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13976 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13979  (
    .A({ \$procmux$1339_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13978 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13981  (
    .A({ \$procmux$1278_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13980 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13983  (
    .A({ \$procmux$1257_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13982 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13985  (
    .A({ \$procmux$1263_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13984 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13987  (
    .A({ \$procmux$1270_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13986 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13989  (
    .A({ \$procmux$1328_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13988 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$13991  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13978 , \$auto$opt_dff.cc:194:make_patterns_logic$13980 , \$auto$opt_dff.cc:194:make_patterns_logic$13982 , \$auto$opt_dff.cc:194:make_patterns_logic$13984 , \$auto$opt_dff.cc:194:make_patterns_logic$13986 , \$auto$opt_dff.cc:194:make_patterns_logic$13988 , \$auto$opt_dff.cc:194:make_patterns_logic$13972 , \$auto$opt_dff.cc:194:make_patterns_logic$13974 , \$auto$opt_dff.cc:194:make_patterns_logic$13976  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$13990 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13252  (
    .A({ \$procmux$1196_CMP , \$procmux$1195_CMP , \$procmux$1194_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13253 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13254  (
    .A({ \$procmux$1232_CMP , \$procmux$1231_CMP , \$procmux$1229_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13255 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13258  (
    .A({ \$procmux$1357_CMP , \$procmux$1339_CMP , \$procmux$1328_CMP , \$procmux$1293_CMP , \$procmux$1278_CMP , \$procmux$1270_CMP , \$procmux$1263_CMP , \$procmux$1257_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13260  (
    .A({ \$procmux$1231_CMP , \$procmux$1230_CMP , \$procmux$1229_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13261 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13262  (
    .A({ \$procmux$1357_CMP , \$procmux$1328_CMP , \$procmux$1293_CMP , \$procmux$1270_CMP , \$procmux$1263_CMP , \$procmux$1257_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13264  (
    .A({ \$procmux$1232_CMP , \$procmux$1229_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13265 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13266  (
    .A({ \$procmux$1197_CMP , \$procmux$1196_CMP , \$procmux$1194_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13267 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13268  (
    .A({ \$procmux$1293_CMP , \$procmux$1278_CMP , \$procmux$1270_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13270  (
    .A({ \$procmux$1357_CMP , \$procmux$1339_CMP , \$procmux$1328_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13271 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14950  (
    .A({ \$procmux$1278_CMP , \$procmux$1270_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14951 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14952  (
    .A({ \$procmux$1339_CMP , \$procmux$1328_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14953 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1193  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13267 ),
    .Y(\$procmux$1193_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1194_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$1194_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1195_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$1195_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1196_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$1196_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1197_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$1197_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1215  (
    .A(\$procmux$1193_Y ),
    .B(\$procmux$1228_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1220  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13253 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$13261 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1225  (
    .A(receiver_phase_req),
    .B(\$procmux$1244_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1228  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13255 ),
    .Y(\$procmux$1228_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1229_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$1229_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1230_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$1230_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1231_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$1231_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1232_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$1232_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$1244  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$1230_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13265  }),
    .Y(\$procmux$1244_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1257_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$1257_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1263_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$1263_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1270_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$1270_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1278_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$1278_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1293_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$1293_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1301  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$10 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1315  (
    .A(\$initiator_state_d$10 [1:0]),
    .B(2'h3),
    .S(\$8y ),
    .Y(\$initiator_state_d$11 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1328_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$1328_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1339_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$1339_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1357_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$1357_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$1385  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$2y ),
    .Y(\$initiator_state_d$5 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$1391  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }),
    .S({ \$procmux$1357_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14953 , \$procmux$1293_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14951 , \$procmux$1263_CMP , \$procmux$1257_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1408_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$1408_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1473  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13271 , initiator_clear_out, \$procmux$1263_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13994 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13996 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$13998 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14000 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14002 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14004 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14006 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14008 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14010 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14012 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13273 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13277 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13279 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13281 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13285 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13289 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14955 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14957 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$10 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$1013_CMP ;
  wire \$procmux$1034_CMP ;
  wire \$procmux$1045_CMP ;
  wire \$procmux$1063_CMP ;
  wire \$procmux$1098_CMP ;
  wire \$procmux$1100_CMP ;
  wire \$procmux$1102_CMP ;
  wire \$procmux$1104_CMP ;
  wire \$procmux$1114_CMP ;
  wire \$procmux$899_Y ;
  wire \$procmux$900_CMP ;
  wire \$procmux$901_CMP ;
  wire \$procmux$902_CMP ;
  wire \$procmux$903_CMP ;
  wire \$procmux$934_Y ;
  wire \$procmux$935_CMP ;
  wire \$procmux$936_CMP ;
  wire \$procmux$937_CMP ;
  wire \$procmux$938_CMP ;
  wire \$procmux$950_Y ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$28y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$13992  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$28y ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$13993  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14012 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13995  (
    .A({ \$procmux$1063_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13994 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13997  (
    .A({ \$procmux$1013_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13996 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$13999  (
    .A({ \$procmux$1114_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$13998 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14001  (
    .A({ \$procmux$1045_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14000 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14003  (
    .A({ \$procmux$1104_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14002 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14005  (
    .A({ \$procmux$1034_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14004 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14007  (
    .A({ \$procmux$1098_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14006 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14009  (
    .A({ \$procmux$1100_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14008 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14011  (
    .A({ \$procmux$1102_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14010 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14013  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$13994 , \$auto$opt_dff.cc:194:make_patterns_logic$13996 , \$auto$opt_dff.cc:194:make_patterns_logic$13998 , \$auto$opt_dff.cc:194:make_patterns_logic$14000 , \$auto$opt_dff.cc:194:make_patterns_logic$14002 , \$auto$opt_dff.cc:194:make_patterns_logic$14004 , \$auto$opt_dff.cc:194:make_patterns_logic$14006 , \$auto$opt_dff.cc:194:make_patterns_logic$14008 , \$auto$opt_dff.cc:194:make_patterns_logic$14010  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14012 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13272  (
    .A({ \$procmux$903_CMP , \$procmux$902_CMP , \$procmux$900_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13273 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13274  (
    .A({ \$procmux$1102_CMP , \$procmux$1100_CMP , \$procmux$1098_CMP , \$procmux$1063_CMP , \$procmux$1034_CMP , \$procmux$1013_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13276  (
    .A({ \$procmux$902_CMP , \$procmux$901_CMP , \$procmux$900_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13277 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13278  (
    .A({ \$procmux$938_CMP , \$procmux$937_CMP , \$procmux$935_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13279 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13280  (
    .A({ \$procmux$937_CMP , \$procmux$936_CMP , \$procmux$935_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13281 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13282  (
    .A({ \$procmux$1104_CMP , \$procmux$1102_CMP , \$procmux$1100_CMP , \$procmux$1098_CMP , \$procmux$1063_CMP , \$procmux$1045_CMP , \$procmux$1034_CMP , \$procmux$1013_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13284  (
    .A({ \$procmux$938_CMP , \$procmux$935_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13285 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13288  (
    .A({ \$procmux$1063_CMP , \$procmux$1045_CMP , \$procmux$1034_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13289 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13290  (
    .A({ \$procmux$1104_CMP , \$procmux$1102_CMP , \$procmux$1013_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14954  (
    .A({ \$procmux$1104_CMP , \$procmux$1102_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14955 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14956  (
    .A({ \$procmux$1045_CMP , \$procmux$1034_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14957 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1007  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$10 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1013_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$1013_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1021  (
    .A(\$initiator_state_d$10 [1:0]),
    .B(2'h3),
    .S(\$8y ),
    .Y(\$initiator_state_d$11 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1034_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$1034_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$1045_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$1045_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1063_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$1063_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$1091  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$2y ),
    .Y(\$initiator_state_d$5 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$1097  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }),
    .S({ \$procmux$1063_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14957 , \$procmux$1013_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14955 , \$procmux$1100_CMP , \$procmux$1098_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1098_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$1098_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1100_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$1100_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1102_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$1102_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$1104_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$1104_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$1114_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$1114_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$1179  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13289 , initiator_clear_out, \$procmux$1100_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$899  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13273 ),
    .Y(\$procmux$899_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$900_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$900_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$901_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$901_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$902_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$902_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$903_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$903_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$921  (
    .A(\$procmux$899_Y ),
    .B(\$procmux$934_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$926  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13277 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$13281 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$931  (
    .A(receiver_phase_req),
    .B(\$procmux$950_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$934  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13279 ),
    .Y(\$procmux$934_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$935_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$935_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$936_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$936_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$937_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$937_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$938_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$938_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$950  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$936_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13285  }),
    .Y(\$procmux$950_Y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

/* src = "rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$28y ;
  wire \$2y ;
  wire \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14016 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14018 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14020 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14022 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14024 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14026 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14028 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14030 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14032 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14034 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13293 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13295 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13301 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13305 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13307 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13311 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14959 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14961 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$initiator_state_d$10 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$initiator_state_d$11 ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$initiator_state_d$5 ;
  wire \$procmux$605_Y ;
  wire \$procmux$606_CMP ;
  wire \$procmux$607_CMP ;
  wire \$procmux$608_CMP ;
  wire \$procmux$609_CMP ;
  wire \$procmux$640_Y ;
  wire \$procmux$641_CMP ;
  wire \$procmux$642_CMP ;
  wire \$procmux$643_CMP ;
  wire \$procmux$644_CMP ;
  wire \$procmux$656_Y ;
  wire \$procmux$669_CMP ;
  wire \$procmux$675_CMP ;
  wire \$procmux$682_CMP ;
  wire \$procmux$690_CMP ;
  wire \$procmux$705_CMP ;
  wire \$procmux$740_CMP ;
  wire \$procmux$751_CMP ;
  wire \$procmux$769_CMP ;
  wire \$procmux$820_CMP ;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:284.13-284.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$2y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:441.18-441.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$28y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:526.20-526.61" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:527.22-527.67" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:317.13-317.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$8y )
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14014  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$28y ),
    .Q(receiver_phase_q)
  );
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$14015  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14034 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14017  (
    .A({ \$procmux$769_CMP , initiator_phase_transition_ack, isolate_ack_i, \$2y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14016 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14019  (
    .A({ \$procmux$705_CMP , initiator_phase_transition_ack, clear_ack_i, \$8y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14018 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14021  (
    .A({ \$procmux$820_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14020 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14023  (
    .A({ \$procmux$751_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14022 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14025  (
    .A({ \$procmux$690_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14024 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14027  (
    .A({ \$procmux$669_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14026 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14029  (
    .A({ \$procmux$675_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14028 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14031  (
    .A({ \$procmux$682_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14030 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14033  (
    .A({ \$procmux$740_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14032 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14035  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14032 , \$auto$opt_dff.cc:194:make_patterns_logic$14016 , \$auto$opt_dff.cc:194:make_patterns_logic$14018 , \$auto$opt_dff.cc:194:make_patterns_logic$14020 , \$auto$opt_dff.cc:194:make_patterns_logic$14022 , \$auto$opt_dff.cc:194:make_patterns_logic$14024 , \$auto$opt_dff.cc:194:make_patterns_logic$14026 , \$auto$opt_dff.cc:194:make_patterns_logic$14030 , \$auto$opt_dff.cc:194:make_patterns_logic$14028  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14034 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13292  (
    .A({ \$procmux$608_CMP , \$procmux$607_CMP , \$procmux$606_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13293 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13294  (
    .A({ \$procmux$644_CMP , \$procmux$643_CMP , \$procmux$641_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13295 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13298  (
    .A({ \$procmux$769_CMP , \$procmux$751_CMP , \$procmux$740_CMP , \$procmux$705_CMP , \$procmux$690_CMP , \$procmux$682_CMP , \$procmux$675_CMP , \$procmux$669_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13300  (
    .A({ \$procmux$643_CMP , \$procmux$642_CMP , \$procmux$641_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13301 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13302  (
    .A({ \$procmux$769_CMP , \$procmux$740_CMP , \$procmux$705_CMP , \$procmux$682_CMP , \$procmux$675_CMP , \$procmux$669_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13304  (
    .A({ \$procmux$644_CMP , \$procmux$641_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13305 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13306  (
    .A({ \$procmux$609_CMP , \$procmux$608_CMP , \$procmux$606_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13307 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13308  (
    .A({ \$procmux$705_CMP , \$procmux$690_CMP , \$procmux$682_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13310  (
    .A({ \$procmux$769_CMP , \$procmux$751_CMP , \$procmux$740_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13311 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14958  (
    .A({ \$procmux$690_CMP , \$procmux$682_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14959 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14960  (
    .A({ \$procmux$751_CMP , \$procmux$740_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14961 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$605  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13307 ),
    .Y(\$procmux$605_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$606_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$606_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$607_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$607_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$608_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$608_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$609_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$609_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$627  (
    .A(\$procmux$605_Y ),
    .B(\$procmux$640_Y ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$632  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13293 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$13301 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$637  (
    .A(receiver_phase_req),
    .B(\$procmux$656_Y ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$640  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13295 ),
    .Y(\$procmux$640_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$641_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$641_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$642_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$642_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$643_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$643_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$644_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$644_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$656  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$642_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13305  }),
    .Y(\$procmux$656_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$669_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$669_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$675_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$675_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$682_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$682_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$690_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$690_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$705_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$705_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$713  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$initiator_state_d$10 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$727  (
    .A(\$initiator_state_d$10 [1:0]),
    .B(2'h3),
    .S(\$8y ),
    .Y(\$initiator_state_d$11 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$740_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$740_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$751_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$751_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$769_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$769_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$797  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$2y ),
    .Y(\$initiator_state_d$5 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$803  (
    .A(4'h1),
    .B({ 1'h0, \$initiator_state_d$5 [2:0], 6'h11, \$initiator_state_d$11 [1:0], 12'h780 }),
    .S({ \$procmux$769_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14961 , \$procmux$705_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14959 , \$procmux$675_CMP , \$procmux$669_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$820_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$820_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$885  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13311 , initiator_clear_out, \$procmux$675_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$initiator_state_d$10 [3:2] = 2'h1;
  assign \$initiator_state_d$11 [3:2] = 2'h1;
  assign \$initiator_state_d$5 [3] = 1'h0;
endmodule

/* src = "rtl/core_wrap.sv:8.8" */
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o
, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i);
  /* src = "rtl/core_wrap.sv:17.23" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/core_wrap.sv:9.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/core_wrap.sv:44.23" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/core_wrap.sv:33.23" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/core_wrap.sv:32.23" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/core_wrap.sv:36.23" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/core_wrap.sv:29.23" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/core_wrap.sv:35.23" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/core_wrap.sv:28.23" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/core_wrap.sv:30.23" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/core_wrap.sv:34.23" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/core_wrap.sv:31.23" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/core_wrap.sv:39.23" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/core_wrap.sv:42.23" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/core_wrap.sv:48.15" */
  wire [31:0] ibex_boot_addr;
  /* src = "rtl/core_wrap.sv:23.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/core_wrap.sv:25.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/core_wrap.sv:21.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/core_wrap.sv:24.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/core_wrap.sv:20.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/core_wrap.sv:22.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/core_wrap.sv:14.22" */
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  /* src = "rtl/core_wrap.sv:11.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/core_wrap.sv:10.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/core_wrap.sv:12.16" */
  input test_enable_i;
  wire test_enable_i;
  /* src = "rtl/core_wrap.sv:15.15" */
  input timer0_irq_i;
  wire timer0_irq_i;
  /* src = "rtl/core_wrap.sv:68.5" */
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
  assign ibex_boot_addr = { boot_addr_i[31:8], 8'h00 };
endmodule

/* top =  1  */
/* src = "rtl/croc_chip.sv:8.8" */
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  /* src = "rtl/croc_chip.sv:9.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_chip.sv:22.15" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_chip.sv:25.15" */
  inout gpio0_io;
  wire gpio0_io;
  /* src = "rtl/croc_chip.sv:35.15" */
  inout gpio10_io;
  wire gpio10_io;
  /* src = "rtl/croc_chip.sv:36.15" */
  inout gpio11_io;
  wire gpio11_io;
  /* src = "rtl/croc_chip.sv:37.15" */
  inout gpio12_io;
  wire gpio12_io;
  /* src = "rtl/croc_chip.sv:38.15" */
  inout gpio13_io;
  wire gpio13_io;
  /* src = "rtl/croc_chip.sv:39.15" */
  inout gpio14_io;
  wire gpio14_io;
  /* src = "rtl/croc_chip.sv:40.15" */
  inout gpio15_io;
  wire gpio15_io;
  /* src = "rtl/croc_chip.sv:41.15" */
  inout gpio16_io;
  wire gpio16_io;
  /* src = "rtl/croc_chip.sv:42.15" */
  inout gpio17_io;
  wire gpio17_io;
  /* src = "rtl/croc_chip.sv:43.15" */
  inout gpio18_io;
  wire gpio18_io;
  /* src = "rtl/croc_chip.sv:44.15" */
  inout gpio19_io;
  wire gpio19_io;
  /* src = "rtl/croc_chip.sv:26.15" */
  inout gpio1_io;
  wire gpio1_io;
  /* src = "rtl/croc_chip.sv:45.15" */
  inout gpio20_io;
  wire gpio20_io;
  /* src = "rtl/croc_chip.sv:46.15" */
  inout gpio21_io;
  wire gpio21_io;
  /* src = "rtl/croc_chip.sv:47.15" */
  inout gpio22_io;
  wire gpio22_io;
  /* src = "rtl/croc_chip.sv:48.15" */
  inout gpio23_io;
  wire gpio23_io;
  /* src = "rtl/croc_chip.sv:49.15" */
  inout gpio24_io;
  wire gpio24_io;
  /* src = "rtl/croc_chip.sv:50.15" */
  inout gpio25_io;
  wire gpio25_io;
  /* src = "rtl/croc_chip.sv:51.15" */
  inout gpio26_io;
  wire gpio26_io;
  /* src = "rtl/croc_chip.sv:52.15" */
  inout gpio27_io;
  wire gpio27_io;
  /* src = "rtl/croc_chip.sv:53.15" */
  inout gpio28_io;
  wire gpio28_io;
  /* src = "rtl/croc_chip.sv:54.15" */
  inout gpio29_io;
  wire gpio29_io;
  /* src = "rtl/croc_chip.sv:27.15" */
  inout gpio2_io;
  wire gpio2_io;
  /* src = "rtl/croc_chip.sv:55.15" */
  inout gpio30_io;
  wire gpio30_io;
  /* src = "rtl/croc_chip.sv:56.15" */
  inout gpio31_io;
  wire gpio31_io;
  /* src = "rtl/croc_chip.sv:28.15" */
  inout gpio3_io;
  wire gpio3_io;
  /* src = "rtl/croc_chip.sv:29.15" */
  inout gpio4_io;
  wire gpio4_io;
  /* src = "rtl/croc_chip.sv:30.15" */
  inout gpio5_io;
  wire gpio5_io;
  /* src = "rtl/croc_chip.sv:31.15" */
  inout gpio6_io;
  wire gpio6_io;
  /* src = "rtl/croc_chip.sv:32.15" */
  inout gpio7_io;
  wire gpio7_io;
  /* src = "rtl/croc_chip.sv:33.15" */
  inout gpio8_io;
  wire gpio8_io;
  /* src = "rtl/croc_chip.sv:34.15" */
  inout gpio9_io;
  wire gpio9_io;
  /* src = "rtl/croc_chip.sv:13.15" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_chip.sv:16.15" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:17.15" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:15.15" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_chip.sv:14.15" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:11.15" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_chip.sv:10.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_chip.sv:62.11" */
  wire soc_clk_i;
  /* src = "rtl/croc_chip.sv:73.11" */
  wire soc_fetch_en_i;
  /* src = "rtl/croc_chip.sv:78.27" */
  wire [31:0] soc_gpio_i;
  /* src = "rtl/croc_chip.sv:79.27" */
  wire [31:0] soc_gpio_o;
  /* src = "rtl/croc_chip.sv:80.27" */
  wire [31:0] soc_gpio_out_en_o;
  /* src = "rtl/croc_chip.sv:67.11" */
  wire soc_jtag_tck_i;
  /* src = "rtl/croc_chip.sv:70.11" */
  wire soc_jtag_tdi_i;
  /* src = "rtl/croc_chip.sv:71.11" */
  wire soc_jtag_tdo_o;
  /* src = "rtl/croc_chip.sv:69.11" */
  wire soc_jtag_tms_i;
  /* src = "rtl/croc_chip.sv:68.11" */
  wire soc_jtag_trst_ni;
  /* src = "rtl/croc_chip.sv:64.11" */
  wire soc_ref_clk_i;
  /* src = "rtl/croc_chip.sv:63.11" */
  wire soc_rst_ni;
  /* src = "rtl/croc_chip.sv:74.11" */
  wire soc_status_o;
  /* src = "rtl/croc_chip.sv:85.12" */
  wire soc_testmode_i;
  /* src = "rtl/croc_chip.sv:93.70" */
  wire soc_uart_rx_i;
  /* src = "rtl/croc_chip.sv:94.70" */
  wire soc_uart_tx_o;
  /* src = "rtl/croc_chip.sv:23.15" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_chip.sv:19.15" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_chip.sv:20.15" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_chip.sv:57.15" */
  output unused0_o;
  wire unused0_o;
  /* src = "rtl/croc_chip.sv:58.15" */
  output unused1_o;
  wire unused1_o;
  /* src = "rtl/croc_chip.sv:59.15" */
  output unused2_o;
  wire unused2_o;
  /* src = "rtl/croc_chip.sv:60.15" */
  output unused3_o;
  wire unused3_o;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_chip.sv:159.3" */
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:82.27" */
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  /* src = "rtl/croc_chip.sv:96.27" */
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  /* src = "rtl/croc_chip.sv:99.27" */
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  /* src = "rtl/croc_chip.sv:109.27" */
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  /* src = "rtl/croc_chip.sv:110.27" */
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  /* src = "rtl/croc_chip.sv:111.27" */
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  /* src = "rtl/croc_chip.sv:112.27" */
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  /* src = "rtl/croc_chip.sv:113.27" */
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  /* src = "rtl/croc_chip.sv:114.27" */
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  /* src = "rtl/croc_chip.sv:115.27" */
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  /* src = "rtl/croc_chip.sv:116.27" */
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  /* src = "rtl/croc_chip.sv:117.27" */
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  /* src = "rtl/croc_chip.sv:118.27" */
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  /* src = "rtl/croc_chip.sv:100.27" */
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  /* src = "rtl/croc_chip.sv:119.27" */
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  /* src = "rtl/croc_chip.sv:120.27" */
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  /* src = "rtl/croc_chip.sv:121.27" */
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  /* src = "rtl/croc_chip.sv:122.27" */
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  /* src = "rtl/croc_chip.sv:123.27" */
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  /* src = "rtl/croc_chip.sv:124.27" */
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  /* src = "rtl/croc_chip.sv:125.27" */
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  /* src = "rtl/croc_chip.sv:126.27" */
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  /* src = "rtl/croc_chip.sv:127.27" */
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  /* src = "rtl/croc_chip.sv:128.27" */
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  /* src = "rtl/croc_chip.sv:101.27" */
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  /* src = "rtl/croc_chip.sv:129.27" */
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  /* src = "rtl/croc_chip.sv:130.27" */
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  /* src = "rtl/croc_chip.sv:102.27" */
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  /* src = "rtl/croc_chip.sv:103.27" */
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  /* src = "rtl/croc_chip.sv:104.27" */
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  /* src = "rtl/croc_chip.sv:105.27" */
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  /* src = "rtl/croc_chip.sv:106.27" */
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  /* src = "rtl/croc_chip.sv:107.27" */
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  /* src = "rtl/croc_chip.sv:108.27" */
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  /* src = "rtl/croc_chip.sv:87.27" */
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  /* src = "rtl/croc_chip.sv:90.27" */
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  /* src = "rtl/croc_chip.sv:91.27" */
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  /* src = "rtl/croc_chip.sv:89.27" */
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  /* src = "rtl/croc_chip.sv:88.27" */
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  /* src = "rtl/croc_chip.sv:84.27" */
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  /* src = "rtl/croc_chip.sv:83.27" */
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  /* src = "rtl/croc_chip.sv:97.27" */
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  /* src = "rtl/croc_chip.sv:93.27" */
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  /* src = "rtl/croc_chip.sv:94.27" */
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  /* src = "rtl/croc_chip.sv:131.25" */
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  /* src = "rtl/croc_chip.sv:132.25" */
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  /* src = "rtl/croc_chip.sv:133.25" */
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  /* src = "rtl/croc_chip.sv:134.25" */
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:136.46" */
  sg13g2_IOPadVdd pad_vdd0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:137.46" */
  sg13g2_IOPadVdd pad_vdd1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:138.46" */
  sg13g2_IOPadVdd pad_vdd2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:139.46" */
  sg13g2_IOPadVdd pad_vdd3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:146.48" */
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:147.48" */
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:148.48" */
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:149.48" */
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:141.46" */
  sg13g2_IOPadVss pad_vss0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:142.46" */
  sg13g2_IOPadVss pad_vss1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:143.46" */
  sg13g2_IOPadVss pad_vss2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:144.46" */
  sg13g2_IOPadVss pad_vss3 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:151.48" */
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:152.48" */
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:153.48" */
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  /* keep = "true" */
  /* src = "rtl/croc_chip.sv:154.48" */
  sg13g2_IOPadIOVss pad_vssio3 (
  );
  assign soc_testmode_i = 1'h0;
endmodule

/* src = "rtl/croc_domain.sv:8.8" */
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, testmode_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o, interrupts_i
, core_busy_o);
  wire \$1y ;
  wire \$3y ;
  wire \$4y ;
  /* src = "rtl/croc_domain.sv:133.34" */
  /* unused_bits = "75 149 223 371" */
  wire [443:0] all_periph_obi_req;
  /* src = "rtl/croc_domain.sv:134.34" */
  wire [233:0] all_periph_obi_rsp;
  /* src = "rtl/croc_domain.sv:97.34" */
  wire [369:0] all_sbr_obi_req;
  /* src = "rtl/croc_domain.sv:98.34" */
  wire [194:0] all_sbr_obi_rsp;
  /* src = "rtl/croc_domain.sv:52.16" */
  wire [31:0] boot_addr;
  /* src = "rtl/croc_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_domain.sv:43.16" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/croc_domain.sv:82.17" */
  wire [71:0] core_data_obi_req;
  /* src = "rtl/croc_domain.sv:83.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_data_obi_rsp;
  /* src = "rtl/croc_domain.sv:73.17" */
  wire [71:0] core_instr_obi_req;
  /* src = "rtl/croc_domain.sv:74.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_instr_obi_rsp;
  /* src = "rtl/croc_domain.sv:141.17" */
  /* unused_bits = "1" */
  wire [73:0] dbg_mem_obi_req;
  /* src = "rtl/croc_domain.sv:142.17" */
  wire [38:0] dbg_mem_obi_rsp;
  /* src = "rtl/croc_domain.sv:88.17" */
  wire [71:0] dbg_req_obi_req;
  /* src = "rtl/croc_domain.sv:89.17" */
  /* unused_bits = "2 4" */
  wire [36:0] dbg_req_obi_rsp;
  /* src = "rtl/croc_domain.sv:50.9" */
  wire debug_req;
  /* src = "rtl/croc_domain.sv:228.17" */
  wire [40:0] dmi_req;
  /* src = "rtl/croc_domain.sv:227.35" */
  wire dmi_req_ready;
  /* src = "rtl/croc_domain.sv:227.20" */
  wire dmi_req_valid;
  /* src = "rtl/croc_domain.sv:229.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/croc_domain.sv:227.66" */
  wire dmi_resp_ready;
  /* src = "rtl/croc_domain.sv:227.50" */
  wire dmi_resp_valid;
  /* src = "rtl/croc_domain.sv:227.9" */
  wire dmi_rst_n;
  /* src = "rtl/croc_domain.sv:137.17" */
  wire [73:0] error_obi_req;
  /* src = "rtl/croc_domain.sv:138.17" */
  wire [38:0] error_obi_rsp;
  /* src = "rtl/croc_domain.sv:15.21" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_domain.sv:51.9" */
  wire fetch_enable;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[0].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[0].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[0].bank_req ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[0].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[0].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[1].bank_be ;
  /* src = "rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  /* src = "rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[1].bank_gnt ;
  /* src = "rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  /* src = "rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[1].bank_req ;
  /* src = "rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  /* src = "rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[1].bank_we ;
  /* src = "rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[1].bank_word_addr ;
  /* src = "rtl/croc_domain.sv:26.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_domain.sv:30.32" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/croc_domain.sv:56.9" */
  wire gpio_irq;
  /* src = "rtl/croc_domain.sv:27.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_domain.sv:153.17" */
  wire [73:0] gpio_obi_req;
  /* src = "rtl/croc_domain.sv:154.17" */
  wire [38:0] gpio_obi_rsp;
  /* src = "rtl/croc_domain.sv:28.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/croc_domain.sv:225.18" */
  wire [31:0] hartinfo;
  wire [6:0] interrupts;
  /* src = "rtl/croc_domain.sv:42.38" */
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  /* src = "rtl/croc_domain.sv:17.21" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_domain.sv:18.21" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_domain.sv:19.21" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_domain.sv:20.21" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_domain.sv:21.21" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_domain.sv:418.50" */
  wire [2:0] periph_idx;
  /* src = "rtl/croc_domain.sv:13.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_domain.sv:12.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_domain.sv:503.39" */
  wire [3:0] soc_ctrl_hw2reg;
  /* src = "rtl/croc_domain.sv:145.17" */
  /* unused_bits = "1" */
  wire [73:0] soc_ctrl_obi_req;
  /* src = "rtl/croc_domain.sv:146.17" */
  wire [38:0] soc_ctrl_obi_rsp;
  /* src = "rtl/croc_domain.sv:502.39" */
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [66:0] soc_ctrl_reg2hw;
  /* src = "rtl/croc_domain.sv:470.13" */
  wire [69:0] soc_ctrl_reg_req;
  /* src = "rtl/croc_domain.sv:471.13" */
  wire [33:0] soc_ctrl_reg_rsp;
  /* src = "rtl/croc_domain.sv:49.9" */
  wire sram_impl;
  /* src = "rtl/croc_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_domain.sv:57.9" */
  wire timer0_irq0;
  /* src = "rtl/croc_domain.sv:58.9" */
  wire timer0_irq1;
  /* src = "rtl/croc_domain.sv:157.17" */
  /* unused_bits = "1" */
  wire [73:0] timer_obi_req;
  /* src = "rtl/croc_domain.sv:158.17" */
  wire [38:0] timer_obi_rsp;
  /* src = "rtl/croc_domain.sv:55.9" */
  wire uart_irq;
  /* src = "rtl/croc_domain.sv:149.17" */
  /* unused_bits = "1" */
  wire [73:0] uart_obi_req;
  /* src = "rtl/croc_domain.sv:150.17" */
  wire [38:0] uart_obi_rsp;
  /* src = "rtl/croc_domain.sv:524.13" */
  wire [69:0] uart_reg_req;
  /* src = "rtl/croc_domain.sv:525.13" */
  wire [33:0] uart_reg_rsp;
  /* src = "rtl/croc_domain.sv:23.21" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_domain.sv:24.21" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_domain.sv:39.24" */
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  /* src = "rtl/croc_domain.sv:40.24" */
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  /* src = "rtl/croc_domain.sv:35.24" */
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  /* src = "rtl/croc_domain.sv:36.24" */
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  /* src = "rtl/croc_domain.sv:111.17" */
  wire [73:0] xbar_error_obi_req;
  /* src = "rtl/croc_domain.sv:112.17" */
  wire [38:0] xbar_error_obi_rsp;
  /* src = "rtl/croc_domain.sv:103.36" */
  wire [147:0] xbar_mem_bank_obi_req;
  /* src = "rtl/croc_domain.sv:104.36" */
  wire [77:0] xbar_mem_bank_obi_rsp;
  /* src = "rtl/croc_domain.sv:107.17" */
  wire [73:0] xbar_periph_obi_req;
  /* src = "rtl/croc_domain.sv:108.17" */
  wire [38:0] xbar_periph_obi_rsp;
  /* src = "rtl/croc_domain.sv:486.18-486.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(all_periph_obi_req[189]),
    .Y(\$1y )
  );
  /* src = "rtl/croc_domain.sv:504.28-504.66" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(soc_ctrl_reg2hw[34]),
    .B(fetch_en_i),
    .Y(fetch_enable)
  );
  /* src = "rtl/croc_domain.sv:540.18-540.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(all_periph_obi_req[263]),
    .Y(\$3y )
  );
  /* src = "rtl/croc_domain.sv:606.19-606.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(all_periph_obi_req[411]),
    .Y(\$4y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  /* src = "rtl/croc_domain.sv:426.5" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:179.5" */
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  /* src = "rtl/croc_domain.sv:258.5" */
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:233.5" */
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:584.5" */
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:323.5" */
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/croc_domain.sv:442.5" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  /* src = "rtl/croc_domain.sv:461.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:513.5" */
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/croc_domain.sv:480.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$1y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:599.5" */
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$4y )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_domain.sv:559.5" */
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  /* src = "rtl/croc_domain.sv:534.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$3y )
  );
  /* src = "rtl/croc_domain.sv:404.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign boot_addr = soc_ctrl_reg2hw[66:35];
  assign core_data_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign dbg_mem_obi_req = all_periph_obi_req[147:74];
  assign dbg_mem_obi_rsp = { all_periph_obi_rsp[77:43], 2'h0, all_periph_obi_rsp[40:39] };
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign error_obi_req = all_periph_obi_req[73:0];
  assign \gen_sram_bank[0].bank_gnt  = 1'h1;
  assign \gen_sram_bank[0].bank_word_addr  = \gen_sram_bank[0].bank_byte_addr [10:2];
  assign \gen_sram_bank[1].bank_gnt  = 1'h1;
  assign \gen_sram_bank[1].bank_word_addr  = \gen_sram_bank[1].bank_byte_addr [10:2];
  assign gpio_obi_req = all_periph_obi_req[369:296];
  assign hartinfo = 32'd2171776;
  assign interrupts = { interrupts_i, gpio_irq, uart_irq, timer0_irq1 };
  assign soc_ctrl_hw2reg = 4'h0;
  assign soc_ctrl_obi_req = all_periph_obi_req[221:148];
  assign soc_ctrl_obi_rsp = { all_periph_obi_rsp[116:81], 1'h0, all_periph_obi_rsp[79:78] };
  assign sram_impl = soc_ctrl_reg2hw[0];
  assign timer_obi_req = all_periph_obi_req[443:370];
  assign timer_obi_rsp = { all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195] };
  assign uart_obi_req = all_periph_obi_req[295:222];
  assign uart_obi_rsp = { all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:117] };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
  assign xbar_error_obi_req = all_sbr_obi_req[73:0];
  assign xbar_mem_bank_obi_req = all_sbr_obi_req[295:148];
  assign xbar_mem_bank_obi_rsp = all_sbr_obi_rsp[155:78];
  assign xbar_periph_obi_req = all_sbr_obi_req[147:74];
endmodule

/* src = "rtl/croc_soc.sv:8.8" */
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, testmode_i, gpio_i, gpio_o, gpio_out_en_o);
  /* src = "rtl/croc_soc.sv:11.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/croc_soc.sv:15.16" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "rtl/croc_soc.sv:27.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/croc_soc.sv:61.23" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/croc_soc.sv:28.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/croc_soc.sv:29.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/croc_soc.sv:60.29" */
  wire [3:0] interrupts;
  /* src = "rtl/croc_soc.sv:18.16" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "rtl/croc_soc.sv:19.16" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "rtl/croc_soc.sv:20.16" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "rtl/croc_soc.sv:21.16" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "rtl/croc_soc.sv:22.16" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "rtl/croc_soc.sv:13.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/croc_soc.sv:12.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/croc_soc.sv:16.16" */
  output status_o;
  wire status_o;
  /* src = "rtl/croc_soc.sv:32.23" */
  wire synced_fetch_en;
  /* src = "rtl/croc_soc.sv:32.9" */
  wire synced_rst_n;
  /* src = "rtl/croc_soc.sv:14.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/croc_soc.sv:24.16" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "rtl/croc_soc.sv:25.16" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "rtl/croc_soc.sv:57.15" */
  wire [71:0] user_mgr_obi_req;
  /* src = "rtl/croc_soc.sv:58.15" */
  wire [36:0] user_mgr_obi_rsp;
  /* src = "rtl/croc_soc.sv:53.15" */
  wire [73:0] user_sbr_obi_req;
  /* src = "rtl/croc_soc.sv:54.15" */
  wire [38:0] user_sbr_obi_rsp;
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:65.3" */
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:45.7" */
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  /* src = "rtl/croc_soc.sv:34.10" */
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/croc_soc.sv:99.3" */
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

/* src = "rtl/cve2/cve2_alu.sv:9.8" */
module \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire \$18y ;
  wire \$19y ;
  wire \$41y ;
  wire \$51y ;
  wire \$52y ;
  wire \$54y ;
  wire \$55y ;
  wire [7:0] \$procmux$2067_CMP ;
  wire \$procmux$2067_CTRL ;
  wire [4:0] \$procmux$2068_CMP ;
  wire \$procmux$2068_CTRL ;
  wire [4:0] \$procmux$2069_CMP ;
  wire \$procmux$2069_CTRL ;
  wire [5:0] \$procmux$2070_CMP ;
  wire \$procmux$2070_CTRL ;
  wire [5:0] \$procmux$2095_CMP ;
  wire \$procmux$2095_CTRL ;
  wire [3:0] \$procmux$2096_CMP ;
  wire \$procmux$2096_CTRL ;
  /* src = "rtl/cve2/cve2_alu.sv:52.16" */
  wire [32:0] adder_in_a;
  /* src = "rtl/cve2/cve2_alu.sv:52.28" */
  wire [32:0] adder_in_b;
  /* src = "rtl/cve2/cve2_alu.sv:48.16" */
  wire adder_op_a_shift1;
  /* src = "rtl/cve2/cve2_alu.sv:49.16" */
  wire adder_op_a_shift2;
  /* src = "rtl/cve2/cve2_alu.sv:50.16" */
  wire adder_op_a_shift3;
  /* src = "rtl/cve2/cve2_alu.sv:51.16" */
  wire adder_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:53.16" */
  wire [31:0] adder_result;
  /* src = "rtl/cve2/cve2_alu.sv:28.29" */
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  /* src = "rtl/cve2/cve2_alu.sv:27.29" */
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  wire [3:0] bfp_len;
  /* src = "rtl/cve2/cve2_alu.sv:261.16" */
  wire [31:0] bfp_mask;
  /* src = "rtl/cve2/cve2_alu.sv:262.16" */
  wire [31:0] bfp_mask_rev;
  /* src = "rtl/cve2/cve2_alu.sv:260.16" */
  wire [4:0] bfp_off;
  /* src = "rtl/cve2/cve2_alu.sv:258.9" */
  wire bfp_op;
  /* src = "rtl/cve2/cve2_alu.sv:263.16" */
  wire [31:0] bfp_result;
  /* src = "rtl/cve2/cve2_alu.sv:399.16" */
  wire [5:0] bitcnt_result;
  /* src = "rtl/cve2/cve2_alu.sv:407.16" */
  wire [31:0] butterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:362.9" */
  wire bwlogic_and;
  /* src = "rtl/cve2/cve2_alu.sv:365.16" */
  wire [31:0] bwlogic_and_result;
  /* src = "rtl/cve2/cve2_alu.sv:369.9" */
  wire bwlogic_op_b_negate;
  /* src = "rtl/cve2/cve2_alu.sv:363.16" */
  wire [31:0] bwlogic_operand_b;
  /* src = "rtl/cve2/cve2_alu.sv:361.9" */
  wire bwlogic_or;
  /* src = "rtl/cve2/cve2_alu.sv:364.16" */
  wire [31:0] bwlogic_or_result;
  /* src = "rtl/cve2/cve2_alu.sv:367.16" */
  wire [31:0] bwlogic_result;
  /* src = "rtl/cve2/cve2_alu.sv:366.16" */
  wire [31:0] bwlogic_xor_result;
  /* src = "rtl/cve2/cve2_alu.sv:409.16" */
  wire [31:0] clmul_result;
  /* src = "rtl/cve2/cve2_alu.sv:157.9" */
  wire cmp_result;
  /* src = "rtl/cve2/cve2_alu.sv:117.9" */
  wire cmp_signed;
  /* src = "rtl/cve2/cve2_alu.sv:31.29" */
  output comparison_result_o;
  wire comparison_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:1293.18" */
  wire [31:0] \g_no_alu_rvb.unused_butterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:1291.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63" */
  wire [63:0] \g_no_alu_rvb.unused_imd_val_q ;
  /* src = "rtl/cve2/cve2_alu.sv:1295.18" */
  wire [31:0] \g_no_alu_rvb.unused_invbutterfly_result ;
  /* src = "rtl/cve2/cve2_alu.sv:24.29" */
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_alu.sv:23.29" */
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_alu.sv:25.29" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_alu.sv:16.29" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_alu.sv:408.16" */
  wire [31:0] invbutterfly_result;
  /* src = "rtl/cve2/cve2_alu.sv:115.9" */
  wire is_equal;
  /* src = "rtl/cve2/cve2_alu.sv:32.29" */
  output is_equal_result_o;
  wire is_equal_result_o;
  /* src = "rtl/cve2/cve2_alu.sv:116.9" */
  wire is_greater_equal;
  /* src = "rtl/cve2/cve2_alu.sv:400.16" */
  wire [31:0] minmax_result;
  /* src = "rtl/cve2/cve2_alu.sv:18.29" */
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:19.29" */
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:21.29" */
  input multdiv_sel_i;
  wire multdiv_sel_i;
  /* src = "rtl/cve2/cve2_alu.sv:410.16" */
  wire [31:0] multicycle_result;
  /* src = "rtl/cve2/cve2_alu.sv:13.29" */
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  /* src = "rtl/cve2/cve2_alu.sv:36.16" */
  wire [31:0] operand_a_rev;
  /* src = "rtl/cve2/cve2_alu.sv:14.29" */
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  /* src = "rtl/cve2/cve2_alu.sv:37.16" */
  wire [32:0] operand_b_neg;
  /* src = "rtl/cve2/cve2_alu.sv:12.29" */
  input [6:0] operator_i;
  wire [6:0] operator_i;
  /* src = "rtl/cve2/cve2_alu.sv:401.16" */
  wire [31:0] pack_result;
  /* src = "rtl/cve2/cve2_alu.sv:30.29" */
  output [31:0] result_o;
  wire [31:0] result_o;
  /* src = "rtl/cve2/cve2_alu.sv:404.16" */
  wire [31:0] rev_result;
  /* src = "rtl/cve2/cve2_alu.sv:402.16" */
  wire [31:0] sext_result;
  wire [4:0] shift_amt;
  wire [4:0] shift_amt_compl;
  /* src = "rtl/cve2/cve2_alu.sv:244.15" */
  wire shift_arith;
  /* src = "rtl/cve2/cve2_alu.sv:245.15" */
  wire shift_funnel;
  /* src = "rtl/cve2/cve2_alu.sv:242.15" */
  wire shift_left;
  /* src = "rtl/cve2/cve2_alu.sv:243.15" */
  wire shift_ones;
  /* src = "rtl/cve2/cve2_alu.sv:250.23" */
  wire [31:0] shift_operand;
  /* src = "rtl/cve2/cve2_alu.sv:254.23" */
  wire [31:0] shift_result;
  wire [31:0] shift_result_ext;
  wire [31:0] shift_result_ext_signed;
  /* src = "rtl/cve2/cve2_alu.sv:255.23" */
  wire [31:0] shift_result_rev;
  /* src = "rtl/cve2/cve2_alu.sv:246.15" */
  wire shift_sbmode;
  /* src = "rtl/cve2/cve2_alu.sv:405.16" */
  wire [31:0] shuffle_result;
  /* src = "rtl/cve2/cve2_alu.sv:403.16" */
  wire [31:0] singlebit_result;
  /* src = "rtl/cve2/cve2_alu.sv:406.16" */
  wire [31:0] xperm_result;
  /* src = "rtl/cve2/cve2_alu.sv:132.22-132.43" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(adder_result_ext_o[32:1]),
    .Y(is_equal)
  );
  /* src = "rtl/cve2/cve2_alu.sv:137.10-137.43" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(operand_a_i[31]),
    .B(operand_b_i[31]),
    .Y(\$12y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:138.27-138.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(adder_result_ext_o[32]),
    .Y(\$14y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:140.26-140.56" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(operand_a_i[31]),
    .B(cmp_signed),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:162.40-162.49" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(is_equal),
    .Y(\$18y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:167.40-167.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(is_greater_equal),
    .Y(\$19y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:280.28-280.49" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$24  (
    .A(1'h0),
    .B(operand_b_i[4:0]),
    .Y(shift_amt_compl)
  );
  /* src = "rtl/cve2/cve2_alu.sv:286.24-288.85" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$30  (
    .A(shift_amt_compl),
    .B(operand_b_i[4:0]),
    .S(instr_first_cycle_i),
    .Y(shift_amt)
  );
  /* src = "rtl/cve2/cve2_alu.sv:322.26-322.47" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(operator_i),
    .B(4'h8),
    .Y(shift_arith)
  );
  /* src = "rtl/cve2/cve2_alu.sv:333.23-333.63" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$37  (
    .A(operand_a_i),
    .B({ operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] }),
    .S(shift_left),
    .Y(shift_operand)
  );
  /* src = "rtl/cve2/cve2_alu.sv:343.32-343.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(shift_arith),
    .B(shift_operand[31]),
    .Y(\$41y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:343.9-343.100" */
  \$sshr  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd33),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$43  (
    .A({ \$41y , shift_operand }),
    .B(shift_amt),
    .Y(shift_result_ext)
  );
  /* src = "rtl/cve2/cve2_alu.sv:353.20-353.64" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$44  (
    .A(shift_result_ext),
    .B({ shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] }),
    .S(shift_left),
    .Y(shift_result)
  );
  /* src = "rtl/cve2/cve2_alu.sv:384.31-384.62" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$48  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_or_result)
  );
  /* src = "rtl/cve2/cve2_alu.sv:385.31-385.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$49  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_and_result)
  );
  /* src = "rtl/cve2/cve2_alu.sv:386.31-386.62" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$50  (
    .A(operand_a_i),
    .B(operand_b_i),
    .Y(bwlogic_xor_result)
  );
  /* src = "rtl/cve2/cve2_alu.sv:388.25-388.45" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(operator_i),
    .B(2'h3),
    .Y(\$51y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:388.51-388.72" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(operator_i),
    .B(3'h6),
    .Y(\$52y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:388.24-388.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$51y ),
    .B(\$52y ),
    .Y(bwlogic_or)
  );
  /* src = "rtl/cve2/cve2_alu.sv:389.25-389.46" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(operator_i),
    .B(3'h4),
    .Y(\$54y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:389.51-389.73" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(operator_i),
    .B(3'h7),
    .Y(\$55y )
  );
  /* src = "rtl/cve2/cve2_alu.sv:389.24-389.74" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$54y ),
    .B(\$55y ),
    .Y(bwlogic_and)
  );
  /* src = "rtl/cve2/cve2_alu.sv:105.31-105.76" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd33),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd34)
  ) \$7  (
    .A(adder_in_a),
    .B(adder_in_b),
    .Y(adder_result_ext_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13648  (
    .A(operand_b_i),
    .Y(operand_b_neg[32:1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$2066  (
    .A(32'd0),
    .B({ bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, comparison_result_o }),
    .S({ \$procmux$2070_CTRL , \$procmux$2069_CTRL , \$procmux$2068_CTRL , \$procmux$2067_CTRL  }),
    .Y(result_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_ANY  (
    .A(\$procmux$2067_CMP ),
    .Y(\$procmux$2067_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP0  (
    .A(operator_i),
    .B(5'h1d),
    .Y(\$procmux$2067_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP1  (
    .A(operator_i),
    .B(5'h1e),
    .Y(\$procmux$2067_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP2  (
    .A(operator_i),
    .B(5'h1b),
    .Y(\$procmux$2067_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP3  (
    .A(operator_i),
    .B(5'h1c),
    .Y(\$procmux$2067_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP4  (
    .A(operator_i),
    .B(5'h19),
    .Y(\$procmux$2067_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP5  (
    .A(operator_i),
    .B(5'h1a),
    .Y(\$procmux$2067_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP6  (
    .A(operator_i),
    .B(6'h2b),
    .Y(\$procmux$2067_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1350.27-1350.57|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2067_CMP7  (
    .A(operator_i),
    .B(6'h2c),
    .Y(\$procmux$2067_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2068_ANY  (
    .A({ \$procmux$2068_CMP [4:3], \$procmux$2068_CMP [1], shift_arith, shift_left }),
    .Y(\$procmux$2068_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2068_CMP0  (
    .A(operator_i),
    .B(4'ha),
    .Y(shift_left)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2068_CMP1  (
    .A(operator_i),
    .B(4'h9),
    .Y(\$procmux$2068_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2068_CMP3  (
    .A(operator_i),
    .B(4'hc),
    .Y(\$procmux$2068_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1338.26-1338.50|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2068_CMP4  (
    .A(operator_i),
    .B(4'hb),
    .Y(\$procmux$2068_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_ANY  (
    .A(\$procmux$2069_CMP ),
    .Y(\$procmux$2069_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_CMP0  (
    .A(operator_i),
    .Y(\$procmux$2069_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_CMP1  (
    .A(operator_i),
    .B(1'h1),
    .Y(\$procmux$2069_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_CMP2  (
    .A(operator_i),
    .B(5'h16),
    .Y(\$procmux$2069_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_CMP3  (
    .A(operator_i),
    .B(5'h17),
    .Y(\$procmux$2069_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1332.19-1332.43|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2069_CMP4  (
    .A(operator_i),
    .B(5'h18),
    .Y(\$procmux$2069_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2070_ANY  (
    .A({ \$procmux$2070_CMP [1:0], \$55y , \$54y , \$52y , \$51y  }),
    .Y(\$procmux$2070_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2070_CMP0  (
    .A(operator_i),
    .B(2'h2),
    .Y(\$procmux$2070_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:1326.27-1326.53|rtl/cve2/cve2_alu.sv:1322.5-1394.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2070_CMP1  (
    .A(operator_i),
    .B(3'h5),
    .Y(\$procmux$2070_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:394.20-394.56|rtl/cve2/cve2_alu.sv:392.5-396.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$2072  (
    .A(bwlogic_xor_result),
    .B({ bwlogic_or_result, bwlogic_and_result }),
    .S({ bwlogic_or, bwlogic_and }),
    .Y(bwlogic_result)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$2094  (
    .A(is_equal),
    .B({ \$18y , is_greater_equal, \$19y  }),
    .S({ \$procmux$2067_CMP [1], \$procmux$2096_CTRL , \$procmux$2095_CTRL  }),
    .Y(comparison_result_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2095_ANY  (
    .A({ \$procmux$2095_CMP [3:2], \$procmux$2067_CMP [7:4] }),
    .Y(\$procmux$2095_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2095_CMP2  (
    .A(operator_i),
    .B(5'h1f),
    .Y(\$procmux$2095_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:167.27-167.58|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2095_CMP3  (
    .A(operator_i),
    .B(6'h20),
    .Y(\$procmux$2095_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2096_ANY  (
    .A({ \$procmux$2096_CMP [3:2], \$procmux$2067_CMP [3:2] }),
    .Y(\$procmux$2096_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2096_CMP2  (
    .A(operator_i),
    .B(6'h21),
    .Y(\$procmux$2096_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:164.27-164.57|rtl/cve2/cve2_alu.sv:160.5-170.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$2096_CMP3  (
    .A(operator_i),
    .B(6'h22),
    .Y(\$procmux$2096_CMP [3])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:138.7-138.53|rtl/cve2/cve2_alu.sv:137.5-141.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2099  (
    .A(\$14y ),
    .B(\$15y ),
    .S(\$12y ),
    .Y(is_greater_equal)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:126.16-126.34|rtl/cve2/cve2_alu.sv:120.5-129.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$2103_ANY  (
    .A({ \$procmux$2096_CMP [2], \$procmux$2095_CMP [2], \$procmux$2067_CMP [6], \$procmux$2067_CMP [4], \$procmux$2067_CMP [2] }),
    .Y(cmp_signed)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:99.26-99.53|rtl/cve2/cve2_alu.sv:97.5-101.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd33)
  ) \$procmux$2105  (
    .A({ operand_b_i, 1'h0 }),
    .B({ multdiv_operand_b_i, operand_b_neg[32:1], 1'h1 }),
    .S({ multdiv_sel_i, adder_op_b_negate }),
    .Y(adder_in_b)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:89.26-89.67|rtl/cve2/cve2_alu.sv:85.5-91.12" */
  \$mux  #(
    .WIDTH(32'd33)
  ) \$procmux$2109  (
    .A({ operand_a_i, 1'h1 }),
    .B(multdiv_operand_a_i),
    .S(multdiv_sel_i),
    .Y(adder_in_a)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_alu.sv:72.27-72.52|rtl/cve2/cve2_alu.sv:60.5-80.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd13),
    .Y_WIDTH(32'd1)
  ) \$procmux$2119_ANY  (
    .A({ \$procmux$2096_CMP [3:2], \$procmux$2095_CMP [3:2], \$procmux$2069_CMP [1], \$procmux$2067_CMP  }),
    .Y(adder_op_b_negate)
  );
  assign { \$procmux$2068_CMP [2], \$procmux$2068_CMP [0] } = { shift_arith, shift_left };
  assign \$procmux$2070_CMP [5:2] = { \$55y , \$54y , \$52y , \$51y  };
  assign { \$procmux$2095_CMP [5:4], \$procmux$2095_CMP [1:0] } = \$procmux$2067_CMP [7:4];
  assign \$procmux$2096_CMP [1:0] = \$procmux$2067_CMP [3:2];
  assign adder_op_a_shift1 = 1'h0;
  assign adder_op_a_shift2 = 1'h0;
  assign adder_op_a_shift3 = 1'h0;
  assign adder_result = adder_result_ext_o[32:1];
  assign adder_result_o = adder_result_ext_o[32:1];
  assign bfp_len = operand_b_i[27:24];
  assign bfp_mask = 32'd0;
  assign bfp_mask_rev = 32'd0;
  assign bfp_off = operand_b_i[20:16];
  assign bfp_op = 1'h0;
  assign bfp_result = 32'd0;
  assign bitcnt_result = 6'h00;
  assign butterfly_result = 32'd0;
  assign bwlogic_op_b_negate = 1'h0;
  assign bwlogic_operand_b = operand_b_i;
  assign clmul_result = 32'd0;
  assign cmp_result = comparison_result_o;
  assign \g_no_alu_rvb.unused_butterfly_result  = 32'd0;
  assign \g_no_alu_rvb.unused_imd_val_q  = imd_val_q_i;
  assign \g_no_alu_rvb.unused_invbutterfly_result  = 32'd0;
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign invbutterfly_result = 32'd0;
  assign is_equal_result_o = is_equal;
  assign minmax_result = 32'd0;
  assign multicycle_result = 32'd0;
  assign operand_a_rev = { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] };
  assign operand_b_neg[0] = 1'h1;
  assign pack_result = 32'd0;
  assign rev_result = 32'd0;
  assign sext_result = 32'd0;
  assign shift_funnel = 1'h0;
  assign shift_ones = 1'h0;
  assign shift_result_ext_signed = shift_result_ext;
  assign shift_result_rev = { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] };
  assign shift_sbmode = 1'h0;
  assign shuffle_result = 32'd0;
  assign singlebit_result = 32'd0;
  assign xperm_result = 32'd0;
endmodule

/* src = "rtl/cve2/cve2_compressed_decoder.sv:16.8" */
module \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$1y ;
  wire \$20y ;
  wire \$23y ;
  wire \$5y ;
  wire \$6y ;
  wire \$8y ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire [31:0] \$auto$wreduce.cc:514:run$13466 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  wire [31:0] \$auto$wreduce.cc:514:run$13467 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  wire [31:0] \$auto$wreduce.cc:514:run$13468 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire [31:0] \$auto$wreduce.cc:514:run$13469 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire \$illegal_instr_o$13 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire \$illegal_instr_o$15 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire \$illegal_instr_o$17 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  wire \$illegal_instr_o$27 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  wire \$illegal_instr_o$33 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire \$illegal_instr_o$35 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire \$illegal_instr_o$4 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  wire [31:0] \$instr_o$12 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  wire [31:0] \$instr_o$14 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  wire [31:0] \$instr_o$16 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  wire [31:0] \$instr_o$3 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  wire [31:0] \$instr_o$34 ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  wire [31:0] \$instr_o$7 ;
  wire \$procmux$4979_CMP ;
  wire \$procmux$4981_CMP ;
  wire \$procmux$5069_CMP ;
  wire \$procmux$5080_CMP ;
  wire [3:0] \$procmux$5085_CMP ;
  wire \$procmux$5085_CTRL ;
  wire \$procmux$5097_CMP ;
  wire [3:0] \$procmux$5110_CMP ;
  wire \$procmux$5112_CMP ;
  wire \$procmux$5116_CMP ;
  wire \$procmux$5122_CMP ;
  wire \$procmux$5123_CMP ;
  wire \$procmux$5124_CMP ;
  wire \$procmux$5125_CMP ;
  wire \$procmux$5138_CMP ;
  wire [1:0] \$procmux$5140_CMP ;
  wire \$procmux$5140_CTRL ;
  wire \$procmux$5194_CTRL ;
  wire \$procmux$5200_CTRL ;
  wire \$procmux$5225_CMP ;
  wire \$procmux$5230_CTRL ;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:17.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:23.23" */
  output illegal_instr_o;
  wire illegal_instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:20.23" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:21.23" */
  output [31:0] instr_o;
  wire [31:0] instr_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:22.23" */
  output is_compressed_o;
  wire is_compressed_o;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:18.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:29.9" */
  /* unused_bits = "0" */
  wire unused_valid;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:19.23" */
  input valid_i;
  wire valid_i;
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:50.17-50.38" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(instr_i[12:5]),
    .Y(\$1y )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:220.17-220.38" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(instr_i[11:7]),
    .Y(\$20y )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.19-225.39" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(instr_i[6:2]),
    .Y(\$23y )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:279.29-279.50" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(instr_i[1:0]),
    .B(2'h3),
    .Y(is_compressed_o)
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:99.49-99.61" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(instr_i[15]),
    .Y(\$5y )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:114.17-114.39" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(instr_i[11:7]),
    .B(2'h2),
    .Y(\$6y )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:120.17-120.52" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A({ instr_i[12], instr_i[6:2] }),
    .Y(\$8y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4970  (
    .A({ instr_i[11:7], 2'h1 }),
    .B(7'h02),
    .S(\$20y ),
    .Y({ \$auto$wreduce.cc:514:run$13467 [19:15], \$auto$wreduce.cc:514:run$13467 [20], \$auto$wreduce.cc:514:run$13467 [7] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4979_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h4),
    .Y(\$procmux$4979_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4981_CMP0  (
    .A(instr_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$4981_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$4987  (
    .A({ 4'h0, \$auto$wreduce.cc:514:run$13467 [20:15], 4'h0, \$auto$wreduce.cc:514:run$13467 [7], 1'h1, \$auto$wreduce.cc:514:run$13467 [20], \$auto$wreduce.cc:514:run$13467 [7] }),
    .B({ instr_i[6:2], instr_i[11:7], instr_i[11:7], 3'h2 }),
    .S(\$23y ),
    .Y({ \$auto$wreduce.cc:514:run$13468 [24:15], \$auto$wreduce.cc:514:run$13468 [11:6], \$auto$wreduce.cc:514:run$13468 [4], \$auto$wreduce.cc:514:run$13468 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$5002  (
    .A({ \$auto$wreduce.cc:514:run$13466 [24:15], \$auto$wreduce.cc:514:run$13466 [11:6], \$auto$wreduce.cc:514:run$13466 [4], \$auto$wreduce.cc:514:run$13466 [6] }),
    .B({ \$auto$wreduce.cc:514:run$13468 [24:15], \$auto$wreduce.cc:514:run$13468 [11:6], \$auto$wreduce.cc:514:run$13468 [4], \$auto$wreduce.cc:514:run$13468 [2] }),
    .S(instr_i[12]),
    .Y({ \$auto$wreduce.cc:514:run$13469 [24:15], \$auto$wreduce.cc:514:run$13469 [11:6], \$auto$wreduce.cc:514:run$13469 [4], \$auto$wreduce.cc:514:run$13469 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$5029  (
    .A({ 5'h00, instr_i[11:7], 7'h01 }),
    .B({ instr_i[6:2], 5'h00, instr_i[11:7], 2'h2 }),
    .S(\$23y ),
    .Y({ \$auto$wreduce.cc:514:run$13466 [24:15], \$auto$wreduce.cc:514:run$13466 [11:7], \$auto$wreduce.cc:514:run$13466 [4], \$auto$wreduce.cc:514:run$13466 [6] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5043  (
    .A(\$20y ),
    .B(1'h0),
    .S(\$23y ),
    .Y(\$illegal_instr_o$27 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5056  (
    .A(\$illegal_instr_o$27 ),
    .B(1'h0),
    .S(instr_i[12]),
    .Y(\$illegal_instr_o$33 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5069_CMP0  (
    .A(instr_i[15:13]),
    .B(2'h2),
    .Y(\$procmux$5069_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:209.19-214.14|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5080_CMP0  (
    .A(instr_i[15:13]),
    .Y(\$procmux$5080_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$5084  (
    .A(1'h0),
    .B({ instr_i[12], \$20y , \$illegal_instr_o$33 , 1'h1 }),
    .S({ \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$4979_CMP , \$procmux$5085_CTRL  }),
    .Y(\$illegal_instr_o$35 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5085_ANY  (
    .A(\$procmux$5085_CMP ),
    .Y(\$procmux$5085_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5085_CMP0  (
    .A(instr_i[15:13]),
    .B(1'h1),
    .Y(\$procmux$5085_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5085_CMP1  (
    .A(instr_i[15:13]),
    .B(2'h3),
    .Y(\$procmux$5085_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5085_CMP2  (
    .A(instr_i[15:13]),
    .B(3'h5),
    .Y(\$procmux$5085_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5085_CMP3  (
    .A(instr_i[15:13]),
    .B(3'h7),
    .Y(\$procmux$5085_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$5096  (
    .A(instr_i),
    .B({ 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 14'h0180, \$auto$wreduce.cc:514:run$13469 [24:15], 3'h0, \$auto$wreduce.cc:514:run$13469 [11:6], 1'h1, \$auto$wreduce.cc:514:run$13469 [4], 1'h0, \$auto$wreduce.cc:514:run$13469 [2], 6'h30, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023 }),
    .S({ \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$4979_CMP , \$procmux$5097_CMP  }),
    .Y(\$instr_o$34 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5097_CMP0  (
    .A(instr_i[15:13]),
    .B(3'h6),
    .Y(\$procmux$5097_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5110_ANY  (
    .A(\$procmux$5110_CMP ),
    .Y(\$illegal_instr_o$13 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5110_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h4),
    .Y(\$procmux$5110_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5110_CMP1  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h5),
    .Y(\$procmux$5110_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5110_CMP2  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h6),
    .Y(\$procmux$5110_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5110_CMP3  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(3'h7),
    .Y(\$procmux$5110_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5112_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h3),
    .Y(\$procmux$5112_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5116_CMP0  (
    .A(instr_i[1:0]),
    .B(1'h1),
    .Y(\$procmux$5116_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd29)
  ) \$procmux$5121  (
    .A({ instr_i[31:10], instr_i[6:0] }),
    .B({ 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 21'h016601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h116601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h196601, instr_i[4:2], 2'h1, instr_i[9:7], 12'heb3 }),
    .S({ \$procmux$5125_CMP , \$procmux$5124_CMP , \$procmux$5123_CMP , \$procmux$5122_CMP  }),
    .Y({ \$instr_o$12 [31:10], \$instr_o$12 [6:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5122_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(2'h3),
    .Y(\$procmux$5122_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5123_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(2'h2),
    .Y(\$procmux$5123_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5124_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .B(1'h1),
    .Y(\$procmux$5124_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:145.21-146.74|rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5125_CMP0  (
    .A({ instr_i[12], instr_i[6:5] }),
    .Y(\$procmux$5125_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd29)
  ) \$procmux$5136  (
    .A({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 12'ha93 }),
    .B({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 12'he93, \$instr_o$12 [31:10], \$instr_o$12 [6:0] }),
    .S({ \$procmux$5138_CMP , \$procmux$5112_CMP  }),
    .Y({ \$instr_o$14 [31:10], \$instr_o$14 [6:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5138_CMP0  (
    .A(instr_i[11:10]),
    .B(2'h2),
    .Y(\$procmux$5138_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5140_ANY  (
    .A(\$procmux$5140_CMP ),
    .Y(\$procmux$5140_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5140_CMP0  (
    .A(instr_i[11:10]),
    .Y(\$procmux$5140_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:126.22-133.18|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5140_CMP1  (
    .A(instr_i[11:10]),
    .B(1'h1),
    .Y(\$procmux$5140_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$5162  (
    .A(1'h0),
    .B({ instr_i[12], \$illegal_instr_o$13  }),
    .S({ \$procmux$5140_CTRL , \$procmux$5112_CMP  }),
    .Y(\$illegal_instr_o$15 )
  );
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$5185  (
    .A({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 1'h1 }),
    .B({ instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 12'h404 }),
    .S(\$6y ),
    .Y({ \$instr_o$7 [28:23], \$instr_o$7 [16:7], \$instr_o$7 [5] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$procmux$5193  (
    .A({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13 }),
    .B({ instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$5y , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], \$instr_o$7 [28:23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [16:7], 1'h0, \$instr_o$7 [5], 2'h2, \$instr_o$7 [5], 2'h3, \$instr_o$14 [31:10], instr_i[9:7], \$instr_o$14 [6:0], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }),
    .S({ \$procmux$5200_CTRL , \$procmux$5069_CMP , \$procmux$5085_CMP [1], \$procmux$4979_CMP , \$procmux$5194_CTRL  }),
    .Y(\$instr_o$16 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5194_ANY  (
    .A({ \$procmux$5097_CMP , \$procmux$5085_CMP [3] }),
    .Y(\$procmux$5194_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5200_ANY  (
    .A({ \$procmux$5085_CMP [2], \$procmux$5085_CMP [0] }),
    .Y(\$procmux$5200_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$5208  (
    .A(1'h0),
    .B({ \$8y , \$illegal_instr_o$15  }),
    .S({ \$procmux$5085_CMP [1], \$procmux$4979_CMP  }),
    .Y(\$illegal_instr_o$17 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5225_CMP0  (
    .A(instr_i[1:0]),
    .Y(\$procmux$5225_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$5229  (
    .A(1'h0),
    .B({ \$1y , 1'h1 }),
    .S({ \$procmux$5080_CMP , \$procmux$5230_CTRL  }),
    .Y(\$illegal_instr_o$4 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$5230_ANY  (
    .A({ \$procmux$5085_CMP , \$procmux$4979_CMP  }),
    .Y(\$procmux$5230_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:61.13-63.47|rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$5239  (
    .A(instr_i),
    .B({ 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023 }),
    .S({ \$procmux$5080_CMP , \$procmux$5069_CMP , \$procmux$5097_CMP  }),
    .Y(\$instr_o$3 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$5248  (
    .A(1'h0),
    .B({ \$illegal_instr_o$4 , \$illegal_instr_o$17 , \$illegal_instr_o$35  }),
    .S({ \$procmux$5225_CMP , \$procmux$5116_CMP , \$procmux$4981_CMP  }),
    .Y(illegal_instr_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$5256  (
    .A(instr_i),
    .B({ \$instr_o$3 , \$instr_o$16 , \$instr_o$34  }),
    .S({ \$procmux$5225_CMP , \$procmux$5116_CMP , \$procmux$4981_CMP  }),
    .Y(instr_o)
  );
  assign { \$auto$wreduce.cc:514:run$13466 [31:25], \$auto$wreduce.cc:514:run$13466 [14:12], \$auto$wreduce.cc:514:run$13466 [5], \$auto$wreduce.cc:514:run$13466 [3:0] } = { 12'h002, \$auto$wreduce.cc:514:run$13466 [6], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$13467 [31:21], \$auto$wreduce.cc:514:run$13467 [14:8], \$auto$wreduce.cc:514:run$13467 [6:0] } = { 20'h00003, \$auto$wreduce.cc:514:run$13467 [20], 1'h0, \$auto$wreduce.cc:514:run$13467 [7], 2'h3 };
  assign { \$auto$wreduce.cc:514:run$13468 [31:25], \$auto$wreduce.cc:514:run$13468 [14:12], \$auto$wreduce.cc:514:run$13468 [5], \$auto$wreduce.cc:514:run$13468 [3], \$auto$wreduce.cc:514:run$13468 [1:0] } = 14'h000b;
  assign { \$auto$wreduce.cc:514:run$13469 [31:25], \$auto$wreduce.cc:514:run$13469 [14:12], \$auto$wreduce.cc:514:run$13469 [5], \$auto$wreduce.cc:514:run$13469 [3], \$auto$wreduce.cc:514:run$13469 [1:0] } = 14'h000b;
  assign \$instr_o$12 [9:7] = instr_i[9:7];
  assign \$instr_o$14 [9:7] = instr_i[9:7];
  assign { \$instr_o$7 [31:29], \$instr_o$7 [22:17], \$instr_o$7 [6], \$instr_o$7 [4:0] } = { instr_i[12], instr_i[12], instr_i[12], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], \$instr_o$7 [23], 3'h2, \$instr_o$7 [5], 2'h3 };
  assign unused_valid = valid_i;
endmodule

/* src = "rtl/cve2/cve2_controller.sv:12.8" */
module \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i (clk_i, rst_ni, irqs_i, instr_req_o, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o
, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$102y ;
  wire \$106y ;
  wire \$107y ;
  wire \$108y ;
  wire \$10y ;
  wire \$110y ;
  wire \$111y ;
  wire \$112y ;
  wire \$113y ;
  wire \$114y ;
  wire \$11y ;
  wire \$121y ;
  wire \$122y ;
  wire \$123y ;
  wire \$136y ;
  wire \$137y ;
  wire \$13y ;
  wire \$142y ;
  wire \$143y ;
  wire [31:0] \$145y ;
  wire [31:0] \$146y ;
  wire [31:0] \$147y ;
  wire \$148y ;
  wire \$14y ;
  wire \$150y ;
  wire \$15y ;
  wire \$17y ;
  wire \$18y ;
  wire \$191y ;
  wire \$192y ;
  wire \$193y ;
  wire \$19y ;
  wire \$218y ;
  wire \$219y ;
  wire \$220y ;
  wire \$221y ;
  wire \$223y ;
  wire \$224y ;
  wire \$24y ;
  wire \$25y ;
  wire \$50y ;
  wire \$51y ;
  wire \$53y ;
  wire \$57y ;
  wire \$59y ;
  wire \$60y ;
  wire \$64y ;
  wire \$65y ;
  wire \$66y ;
  wire \$67y ;
  wire \$89y ;
  wire \$90y ;
  wire \$91y ;
  wire \$92y ;
  wire \$9y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14037 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14039 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14041 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14043 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14048 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14050 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14054 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14059 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14063 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14045 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14056 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14065 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13313 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13315 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13319 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13323 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13325 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13327 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14963 ;
  /* src = "rtl/cve2/cve2_controller.sv:670.20-672.14" */
  wire [3:0] \$auto$wreduce.cc:514:run$13471 ;
  /* src = "rtl/cve2/cve2_controller.sv:665.20-672.14" */
  wire [3:0] \$auto$wreduce.cc:514:run$13472 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [3:0] \$auto$wreduce.cc:514:run$13473 ;
  /* src = "rtl/cve2/cve2_controller.sv:509.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$13474 ;
  /* src = "rtl/cve2/cve2_controller.sv:507.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$13475 ;
  /* src = "rtl/cve2/cve2_controller.sv:500.20-513.14" */
  wire [6:0] \$auto$wreduce.cc:514:run$13476 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [6:0] \$auto$wreduce.cc:514:run$13477 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [6:0] \$auto$wreduce.cc:514:run$13478 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [6:0] \$auto$wreduce.cc:514:run$13479 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [31:0] \$csr_mtval_o$163 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [31:0] \$csr_mtval_o$190 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire \$csr_restore_dret_id_o$177 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_dret_id_o$188 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_restore_mret_id_o$187 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire \$csr_save_cause_o$162 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$csr_save_cause_o$189 ;
  /* src = "rtl/cve2/cve2_controller.sv:441.9-450.12" */
  wire [3:0] \$ctrl_fsm_ns$100 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire [3:0] \$ctrl_fsm_ns$115 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire [3:0] \$ctrl_fsm_ns$117 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire [3:0] \$ctrl_fsm_ns$119 ;
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18" */
  wire [3:0] \$ctrl_fsm_ns$151 ;
  /* src = "rtl/cve2/cve2_controller.sv:600.11-655.18" */
  wire [3:0] \$ctrl_fsm_ns$157 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [3:0] \$ctrl_fsm_ns$178 ;
  /* src = "rtl/cve2/cve2_controller.sv:689.9-691.12" */
  wire [3:0] \$ctrl_fsm_ns$194 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire [3:0] \$ctrl_fsm_ns$98 ;
  /* src = "rtl/cve2/cve2_controller.sv:534.18-538.12" */
  wire [2:0] \$debug_cause_o$134 ;
  /* src = "rtl/cve2/cve2_controller.sv:532.9-538.12" */
  wire [2:0] \$debug_cause_o$135 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$ebrk_insn_prio$36 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ebrk_insn_prio$41 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$ecall_insn_prio$40 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire [6:0] \$exc_cause_o$128 ;
  /* src = "rtl/cve2/cve2_controller.sv:490.9-514.12" */
  wire [6:0] \$exc_cause_o$131 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [1:0] \$exc_pc_mux_o$184 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$flush_id$181 ;
  /* src = "rtl/cve2/cve2_controller.sv:472.20-481.14" */
  wire \$halt_if$116 ;
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14" */
  wire \$halt_if$118 ;
  /* src = "rtl/cve2/cve2_controller.sv:465.9-482.12" */
  wire \$halt_if$120 ;
  /* src = "rtl/cve2/cve2_controller.sv:417.9-422.12" */
  wire \$halt_if$99 ;
  /* src = "rtl/cve2/cve2_controller.sv:241.16-245.10" */
  wire \$load_err_prio$31 ;
  /* src = "rtl/cve2/cve2_controller.sv:239.16-245.10" */
  wire \$load_err_prio$34 ;
  /* src = "rtl/cve2/cve2_controller.sv:237.16-245.10" */
  wire \$load_err_prio$38 ;
  /* src = "rtl/cve2/cve2_controller.sv:235.16-245.10" */
  wire \$load_err_prio$43 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$71 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$72 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$73 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$74 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$75 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$76 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$77 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$78 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$79 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$80 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$81 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$82 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$83 ;
  /* src = "rtl/cve2/cve2_controller.sv:305.7-307.10" */
  wire [3:0] \$mfip_id$84 ;
  /* src = "rtl/cve2/cve2_controller.sv:497.11-513.14" */
  wire \$nmi_mode_d$127 ;
  /* src = "rtl/cve2/cve2_controller.sv:658.11-672.14" */
  wire [2:0] \$pc_mux_o$175 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire [2:0] \$pc_mux_o$183 ;
  /* src = "rtl/cve2/cve2_controller.sv:588.9-673.12" */
  wire \$pc_set_o$182 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_jump_o$104 ;
  /* src = "rtl/cve2/cve2_controller.sv:452.9-457.12" */
  wire \$perf_tbranch_o$105 ;
  wire \$procmux$2125_CMP ;
  wire \$procmux$2553_CMP ;
  wire \$procmux$2581_CMP ;
  wire \$procmux$2610_CMP ;
  wire \$procmux$2856_CMP ;
  wire \$procmux$2911_CMP ;
  wire \$procmux$2940_CMP ;
  wire \$procmux$2941_CMP ;
  wire \$procmux$2943_CMP ;
  wire \$procmux$3251_Y ;
  wire \$procmux$3286_Y ;
  wire \$procmux$3322_Y ;
  /* src = "rtl/cve2/cve2_controller.sv:58.33" */
  input branch_set_i;
  wire branch_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:14.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_controller.sv:41.33" */
  output controller_run_o;
  wire controller_run_o;
  /* src = "rtl/cve2/cve2_controller.sv:63.33" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_controller.sv:87.33" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_controller.sv:85.33" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_controller.sv:150.9" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_controller.sv:27.33" */
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  /* src = "rtl/cve2/cve2_controller.sv:83.33" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:82.33" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:84.33" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:81.33" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:80.33" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_controller.sv:18.33" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_controller.sv:107.14" */
  wire [3:0] ctrl_fsm_cs;
  /* src = "rtl/cve2/cve2_controller.sv:107.27" */
  wire [3:0] ctrl_fsm_ns;
  /* src = "rtl/cve2/cve2_controller.sv:72.33" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:73.33" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_controller.sv:76.33" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_controller.sv:77.33" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_controller.sv:110.23" */
  wire debug_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:74.33" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:110.9" */
  wire debug_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:71.33" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_controller.sv:75.33" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_controller.sv:135.9" */
  wire do_single_step_d;
  /* src = "rtl/cve2/cve2_controller.sv:136.9" */
  wire do_single_step_q;
  /* src = "rtl/cve2/cve2_controller.sv:147.9" */
  wire dret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:24.33" */
  input dret_insn_i;
  wire dret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:140.9" */
  wire ebreak_into_debug;
  /* src = "rtl/cve2/cve2_controller.sv:149.9" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_controller.sv:26.33" */
  input ebrk_insn_i;
  wire ebrk_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:121.9" */
  wire ebrk_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:145.9" */
  wire ecall_insn;
  /* src = "rtl/cve2/cve2_controller.sv:22.33" */
  input ecall_insn_i;
  wire ecall_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:120.9" */
  wire ecall_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:139.9" */
  wire enter_debug_mode;
  /* src = "rtl/cve2/cve2_controller.sv:137.9" */
  wire enter_debug_mode_prio_d;
  /* src = "rtl/cve2/cve2_controller.sv:138.9" */
  wire enter_debug_mode_prio_q;
  /* src = "rtl/cve2/cve2_controller.sv:50.33" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_controller.sv:49.33" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:113.20" */
  wire exc_req_d;
  /* src = "rtl/cve2/cve2_controller.sv:131.9" */
  wire exc_req_lsu;
  /* src = "rtl/cve2/cve2_controller.sv:113.9" */
  wire exc_req_q;
  /* src = "rtl/cve2/cve2_controller.sv:17.33" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_controller.sv:128.9" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_controller.sv:91.33" */
  output flush_id_o;
  wire flush_id_o;
  /* src = "rtl/cve2/cve2_controller.sv:126.9" */
  wire halt_if;
  /* src = "rtl/cve2/cve2_controller.sv:141.9" */
  wire handle_irq;
  /* src = "rtl/cve2/cve2_controller.sv:40.33" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_controller.sv:129.9" */
  wire illegal_dret;
  /* src = "rtl/cve2/cve2_controller.sv:114.25" */
  wire illegal_insn_d;
  /* src = "rtl/cve2/cve2_controller.sv:21.33" */
  input illegal_insn_i;
  wire illegal_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:119.9" */
  wire illegal_insn_prio;
  /* src = "rtl/cve2/cve2_controller.sv:114.9" */
  wire illegal_insn_q;
  /* src = "rtl/cve2/cve2_controller.sv:130.9" */
  wire illegal_umode;
  /* src = "rtl/cve2/cve2_controller.sv:32.33" */
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:151.9" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_controller.sv:34.33" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:35.33" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_controller.sv:118.9" */
  wire instr_fetch_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:31.33" */
  input [31:0] instr_i;
  wire [31:0] instr_i;
  /* src = "rtl/cve2/cve2_controller.sv:33.33" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_controller.sv:45.33" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_controller.sv:39.33" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_controller.sv:30.33" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_controller.sv:67.33" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_controller.sv:64.33" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_controller.sv:65.33" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_controller.sv:60.33" */
  input jump_set_i;
  wire jump_set_i;
  /* src = "rtl/cve2/cve2_controller.sv:111.21" */
  wire load_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:54.33" */
  input load_err_i;
  wire load_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:123.9" */
  wire load_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:111.9" */
  wire load_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:53.33" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_controller.sv:142.15" */
  wire [3:0] mfip_id;
  /* src = "rtl/cve2/cve2_controller.sv:146.9" */
  wire mret_insn;
  /* src = "rtl/cve2/cve2_controller.sv:23.33" */
  input mret_insn_i;
  wire mret_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:109.21" */
  wire nmi_mode_d;
  /* src = "rtl/cve2/cve2_controller.sv:68.33" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_controller.sv:109.9" */
  wire nmi_mode_q;
  /* src = "rtl/cve2/cve2_controller.sv:36.33" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:47.33" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_controller.sv:46.33" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_controller.sv:94.33" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_controller.sv:96.33" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_controller.sv:86.33" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_controller.sv:127.9" */
  wire retain_id;
  /* src = "rtl/cve2/cve2_controller.sv:15.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_controller.sv:132.9" */
  wire special_req;
  /* src = "rtl/cve2/cve2_controller.sv:134.9" */
  wire special_req_flush_only;
  /* src = "rtl/cve2/cve2_controller.sv:133.9" */
  wire special_req_pc_change;
  /* src = "rtl/cve2/cve2_controller.sv:125.9" */
  wire stall;
  /* src = "rtl/cve2/cve2_controller.sv:90.33" */
  input stall_id_i;
  wire stall_id_i;
  /* src = "rtl/cve2/cve2_controller.sv:112.22" */
  wire store_err_d;
  /* src = "rtl/cve2/cve2_controller.sv:55.33" */
  input store_err_i;
  wire store_err_i;
  /* src = "rtl/cve2/cve2_controller.sv:122.9" */
  wire store_err_prio;
  /* src = "rtl/cve2/cve2_controller.sv:112.9" */
  wire store_err_q;
  /* src = "rtl/cve2/cve2_controller.sv:78.33" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_controller.sv:143.15" */
  /* unused_bits = "0" */
  wire unused_irq_timer;
  /* src = "rtl/cve2/cve2_controller.sv:148.9" */
  wire wfi_insn;
  /* src = "rtl/cve2/cve2_controller.sv:25.33" */
  input wfi_insn_i;
  wire wfi_insn_i;
  /* src = "rtl/cve2/cve2_controller.sv:175.28-175.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ecall_insn_i),
    .B(instr_valid_i),
    .Y(ecall_insn)
  );
  /* src = "rtl/cve2/cve2_controller.sv:176.28-176.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mret_insn_i),
    .B(instr_valid_i),
    .Y(mret_insn)
  );
  /* src = "rtl/cve2/cve2_controller.sv:190.40-190.67" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(csr_mstatus_tw_i),
    .B(wfi_insn),
    .Y(\$10y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.13-452.39" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(branch_set_i),
    .B(jump_set_i),
    .Y(\$102y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:461.14-461.44" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(enter_debug_mode),
    .B(handle_irq),
    .Y(\$106y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:461.50-461.72" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(stall_id_i),
    .B(instr_valid_i),
    .Y(\$107y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:461.13-461.73" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(\$106y ),
    .B(\$107y ),
    .Y(\$108y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:190.27-190.68" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(mret_insn),
    .B(\$10y ),
    .Y(\$11y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:465.13-465.19" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(stall_id_i),
    .Y(\$110y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:465.23-465.35" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(special_req),
    .Y(\$111y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:465.13-465.35" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(\$110y ),
    .B(\$111y ),
    .Y(\$112y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:465.39-465.53" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(instr_valid_i),
    .Y(\$113y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:465.13-465.53" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$114  (
    .A(\$112y ),
    .B(\$113y ),
    .Y(\$114y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:188.26-190.69" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$9y ),
    .B(\$11y ),
    .Y(illegal_umode)
  );
  /* src = "rtl/cve2/cve2_controller.sv:497.27-497.38" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$121  (
    .A(nmi_mode_q),
    .Y(\$121y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:497.15-497.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(irq_nm_i),
    .B(\$121y ),
    .Y(\$122y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:500.24-500.48" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(irqs_i[15:0]),
    .Y(\$123y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:197.28-197.57" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(illegal_insn_i),
    .B(illegal_dret),
    .Y(\$13y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:560.34-560.47" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(debug_mode_q),
    .Y(\$136y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:560.13-560.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(ebreak_into_debug),
    .B(\$136y ),
    .Y(\$137y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:197.28-197.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(illegal_umode),
    .Y(\$14y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:588.13-588.37" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(exc_req_q),
    .B(store_err_q),
    .Y(\$142y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:588.13-588.51" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(\$142y ),
    .B(load_err_q),
    .Y(\$143y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:603.56-603.71" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd31)
  ) \$145  (
    .A(pc_id_i[31:1]),
    .B(1'h1),
    .Y(\$145y [31:1])
  );
  /* src = "rtl/cve2/cve2_controller.sv:603.29-603.82" */
  \$mux  #(
    .WIDTH(32'd31)
  ) \$146  (
    .A(pc_id_i[31:1]),
    .B(\$145y [31:1]),
    .S(instr_fetch_err_plus2_i),
    .Y(\$146y [31:1])
  );
  /* src = "rtl/cve2/cve2_controller.sv:607.29-607.90" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$147  (
    .A(instr_i),
    .B({ 16'h0000, instr_compressed_i }),
    .S(instr_is_compressed_i),
    .Y(\$147y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:610.30-610.55" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$148y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:197.78-197.98" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(ctrl_fsm_cs),
    .B(3'h6),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:614.19-614.51" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(debug_mode_q),
    .B(ebreak_into_debug),
    .Y(\$150y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:197.27-197.99" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$14y ),
    .B(\$15y ),
    .Y(illegal_insn_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:204.23-204.45" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(ecall_insn),
    .B(ebrk_insn),
    .Y(\$17y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:204.23-204.62" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17y ),
    .B(illegal_insn_d),
    .Y(\$18y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:204.23-204.80" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$18y ),
    .B(instr_fetch_err),
    .Y(\$19y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:689.42-689.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(ebrk_insn_prio),
    .B(ebreak_into_debug),
    .Y(\$191y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:689.40-689.78" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(\$191y ),
    .Y(\$192y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:689.13-689.78" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(enter_debug_mode_prio_q),
    .B(\$192y ),
    .Y(\$193y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:177.28-177.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(dret_insn_i),
    .B(instr_valid_i),
    .Y(dret_insn)
  );
  /* src = "rtl/cve2/cve2_controller.sv:204.22-205.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$19y ),
    .B(\$15y ),
    .Y(exc_req_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:718.26-718.32" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A(stall_id_i),
    .Y(\$218y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:718.35-718.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(halt_if),
    .Y(\$219y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:208.24-208.48" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(store_err_i),
    .B(load_err_i),
    .Y(exc_req_lsu)
  );
  /* src = "rtl/cve2/cve2_controller.sv:718.26-718.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(\$218y ),
    .B(\$219y ),
    .Y(\$220y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:718.46-718.56" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(retain_id),
    .Y(\$221y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:718.26-718.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(\$220y ),
    .B(\$221y ),
    .Y(id_in_ready_o)
  );
  /* src = "rtl/cve2/cve2_controller.sv:725.34-725.51" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(stall_id_i),
    .B(retain_id),
    .Y(\$223y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:725.32-725.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(\$223y ),
    .Y(\$224y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:725.32-725.63" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$225  (
    .A(\$224y ),
    .B(flush_id),
    .Y(instr_valid_clear_o)
  );
  /* src = "rtl/cve2/cve2_controller.sv:216.35-216.60" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(wfi_insn),
    .B(csr_pipe_flush),
    .Y(special_req_flush_only)
  );
  /* src = "rtl/cve2/cve2_controller.sv:219.34-219.55" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(mret_insn),
    .B(dret_insn),
    .Y(\$24y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:219.34-219.67" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(\$24y ),
    .B(exc_req_d),
    .Y(\$25y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:219.34-219.81" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(\$25y ),
    .B(exc_req_lsu),
    .Y(special_req_pc_change)
  );
  /* src = "rtl/cve2/cve2_controller.sv:222.24-222.70" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(special_req_pc_change),
    .B(special_req_flush_only),
    .Y(special_req)
  );
  /* src = "rtl/cve2/cve2_controller.sv:178.28-178.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(wfi_insn_i),
    .B(instr_valid_i),
    .Y(wfi_insn)
  );
  /* src = "rtl/cve2/cve2_controller.sv:179.28-179.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(ebrk_insn_i),
    .B(instr_valid_i),
    .Y(ebrk_insn)
  );
  /* src = "rtl/cve2/cve2_controller.sv:180.28-180.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(csr_pipe_flush_i),
    .B(instr_valid_i),
    .Y(csr_pipe_flush)
  );
  /* src = "rtl/cve2/cve2_controller.sv:272.45-272.58" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(debug_mode_q),
    .Y(\$50y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:272.45-272.80" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$50y ),
    .B(debug_single_step_i),
    .Y(\$51y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:272.29-272.99" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$52  (
    .A(do_single_step_q),
    .B(\$51y ),
    .S(instr_valid_i),
    .Y(do_single_step_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:283.37-283.67" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(debug_req_i),
    .B(do_single_step_d),
    .Y(\$53y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:283.36-283.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\$53y ),
    .B(\$50y ),
    .Y(enter_debug_mode_prio_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:284.56-284.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(trigger_match_i),
    .B(\$50y ),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:284.29-284.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(enter_debug_mode_prio_d),
    .B(\$57y ),
    .Y(enter_debug_mode)
  );
  /* src = "rtl/cve2/cve2_controller.sv:289.30-289.55" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(priv_mode_i),
    .Y(\$59y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:181.28-181.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(instr_fetch_err_i),
    .B(instr_valid_i),
    .Y(instr_fetch_err)
  );
  /* src = "rtl/cve2/cve2_controller.sv:289.30-290.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$59y ),
    .B(debug_ebreaku_i),
    .Y(\$60y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:288.30-290.62" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$62  (
    .A(\$60y ),
    .B(debug_ebreakm_i),
    .S(\$148y ),
    .Y(ebreak_into_debug)
  );
  /* src = "rtl/cve2/cve2_controller.sv:297.39-297.50" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(nmi_mode_q),
    .Y(\$64y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:297.23-297.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(\$50y ),
    .B(\$64y ),
    .Y(\$65y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:298.20-298.53" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(irq_pending_i),
    .B(csr_mstatus_mie_i),
    .Y(\$66y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:298.8-298.54" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(irq_nm_i),
    .B(\$66y ),
    .Y(\$67y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:297.23-298.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\$65y ),
    .B(\$67y ),
    .Y(handle_irq)
  );
  /* src = "rtl/cve2/cve2_controller.sv:185.25-185.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(dret_insn),
    .B(\$50y ),
    .Y(illegal_dret)
  );
  /* src = "rtl/cve2/cve2_controller.sv:392.13-392.38" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(irq_nm_i),
    .B(irq_pending_i),
    .Y(\$89y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:188.27-188.52" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(priv_mode_i),
    .B(2'h3),
    .Y(\$9y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:392.13-392.53" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\$89y ),
    .B(debug_req_i),
    .Y(\$90y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:392.13-392.69" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(\$90y ),
    .B(debug_mode_q),
    .Y(\$91y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:392.13-392.92" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(\$91y ),
    .B(debug_single_step_i),
    .Y(\$92y )
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14036  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(nmi_mode_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14045 ),
    .Q(nmi_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14047  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(debug_mode_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14056 ),
    .Q(debug_mode_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$14058  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ctrl_fsm_ns),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14065 ),
    .Q(ctrl_fsm_cs)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14038  (
    .A({ \$procmux$2125_CMP , mret_insn, \$143y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14037 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14040  (
    .A({ \$procmux$2125_CMP , \$143y  }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14039 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14042  (
    .A({ \$procmux$2610_CMP , handle_irq }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14041 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14044  (
    .A({ \$procmux$2610_CMP , \$procmux$2125_CMP  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14043 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14049  (
    .A({ \$procmux$2125_CMP , dret_insn, mret_insn, \$143y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14048 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14051  (
    .A({ \$procmux$2125_CMP , mret_insn, \$143y  }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14050 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14055  (
    .A({ \$auto$opt_reduce.cc:137:opt_pmux$13315 , \$procmux$2125_CMP  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14054 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14060  (
    .A({ \$procmux$2943_CMP , fetch_enable_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14059 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14062  (
    .A({ \$procmux$2911_CMP , \$92y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14061 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14064  (
    .A({ \$procmux$2856_CMP , handle_irq, enter_debug_mode, id_in_ready_o }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14063 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14046  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14037 , \$auto$opt_dff.cc:194:make_patterns_logic$14039 , \$auto$opt_dff.cc:194:make_patterns_logic$14041 , \$auto$opt_dff.cc:194:make_patterns_logic$14043  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14045 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14057  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14050 , \$auto$opt_dff.cc:194:make_patterns_logic$14048 , \$auto$opt_dff.cc:194:make_patterns_logic$14039 , \$auto$opt_dff.cc:194:make_patterns_logic$14054  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14056 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14066  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14059 , \$auto$opt_dff.cc:194:make_patterns_logic$14063 , \$auto$opt_dff.cc:194:make_patterns_logic$14061  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14065 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13314  (
    .A({ \$procmux$2581_CMP , \$procmux$2553_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13315 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13316  (
    .A({ \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13313 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13318  (
    .A({ \$procmux$2943_CMP , \$procmux$2941_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13319 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13320  (
    .A({ \$procmux$2941_CMP , \$procmux$2856_CMP , \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP , \$procmux$2125_CMP , controller_run_o }),
    .Y(instr_req_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13322  (
    .A({ load_err_prio, store_err_prio }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13323 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13324  (
    .A({ \$procmux$2940_CMP , \$procmux$2911_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13325 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13326  (
    .A({ \$procmux$2940_CMP , \$procmux$2911_CMP , \$procmux$2125_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13327 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14962  (
    .A({ \$procmux$2941_CMP , \$procmux$2911_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14963 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$do_single_step_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(do_single_step_d),
    .Q(do_single_step_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$enter_debug_mode_prio_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(enter_debug_mode_prio_d),
    .Q(enter_debug_mode_prio_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$exc_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(exc_req_d),
    .Q(exc_req_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$illegal_insn_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(illegal_insn_d),
    .Q(illegal_insn_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$load_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(load_err_i),
    .Q(load_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:728.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$store_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(store_err_i),
    .Q(store_err_q)
  );
  /* src = "rtl/cve2/cve2_controller.sv:690.11-690.38|rtl/cve2/cve2_controller.sv:689.9-691.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2122  (
    .A(\$ctrl_fsm_ns$178 ),
    .B(4'h8),
    .S(\$193y ),
    .Y(\$ctrl_fsm_ns$194 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2125_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h6),
    .Y(\$procmux$2125_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:671.13-671.48|rtl/cve2/cve2_controller.sv:670.20-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2127  (
    .A(2'h1),
    .B(2'h2),
    .S(wfi_insn),
    .Y({ \$auto$wreduce.cc:514:run$13471 [1], \$auto$wreduce.cc:514:run$13471 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:665.35-670.14|rtl/cve2/cve2_controller.sv:665.20-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2191  (
    .A({ \$auto$wreduce.cc:514:run$13471 [1], \$auto$wreduce.cc:514:run$13471 [2] }),
    .B(2'h1),
    .S(dret_insn),
    .Y({ \$auto$wreduce.cc:514:run$13472 [1], \$auto$wreduce.cc:514:run$13472 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2205  (
    .A({ dret_insn, 1'h0 }),
    .B(2'h1),
    .S(mret_insn),
    .Y(\$pc_mux_o$175 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2237  (
    .A(dret_insn),
    .B(1'h0),
    .S(mret_insn),
    .Y(\$csr_restore_dret_id_o$177 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:658.26-665.14|rtl/cve2/cve2_controller.sv:658.11-672.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2277  (
    .A({ \$auto$wreduce.cc:514:run$13472 [1], \$auto$wreduce.cc:514:run$13472 [2] }),
    .B(2'h1),
    .S(mret_insn),
    .Y({ \$auto$wreduce.cc:514:run$13473 [1], \$auto$wreduce.cc:514:run$13473 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$2288  (
    .A({ \$pc_mux_o$175 [2:1], \$pc_mux_o$175 [1] }),
    .B(3'h2),
    .S(\$143y ),
    .Y(\$pc_mux_o$183 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2296  (
    .A(\$24y ),
    .B(\$csr_save_cause_o$162 ),
    .S(\$143y ),
    .Y(\$pc_set_o$182 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2304  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13473 [2:1], \$auto$wreduce.cc:514:run$13473 [2] }),
    .B({ \$ctrl_fsm_ns$157 [3:2], 2'h1 }),
    .S(\$143y ),
    .Y(\$ctrl_fsm_ns$178 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2341  (
    .A(\$150y ),
    .Y(\$auto$wreduce.cc:514:run$13477 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.53-633.18|rtl/cve2/cve2_controller.sv:614.15-644.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2383  (
    .A(2'h1),
    .B(2'h2),
    .S(\$150y ),
    .Y(\$ctrl_fsm_ns$151 [3:2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$2394  (
    .A(32'd0),
    .B({ \$146y [31:1], pc_id_i[0], \$147y , lsu_addr_last_i }),
    .S({ instr_fetch_err, illegal_insn_prio, \$auto$opt_reduce.cc:137:opt_pmux$13323  }),
    .Y(\$csr_mtval_o$163 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2409  (
    .A(1'h1),
    .B(\$auto$wreduce.cc:514:run$13477 [1]),
    .S(ebrk_insn_prio),
    .Y(\$csr_save_cause_o$162 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:650.28-653.16|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$2430  (
    .A(4'h0),
    .B({ 10'h04a, \$148y , \$148y , 2'h0, \$auto$wreduce.cc:514:run$13477 [1], \$auto$wreduce.cc:514:run$13477 [1], 8'h75 }),
    .S({ instr_fetch_err, illegal_insn_prio, ecall_insn_prio, ebrk_insn_prio, store_err_prio, load_err_prio }),
    .Y(\$auto$wreduce.cc:514:run$13478 [3:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:614.15-644.18|rtl/cve2/cve2_controller.sv:600.11-655.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2472  (
    .A(2'h1),
    .B(\$ctrl_fsm_ns$151 [3:2]),
    .S(ebrk_insn_prio),
    .Y(\$ctrl_fsm_ns$157 [3:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$2481  (
    .A(32'd0),
    .B(\$csr_mtval_o$163 ),
    .S(\$143y ),
    .Y(\$csr_mtval_o$190 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2488  (
    .A(\$143y ),
    .B(\$csr_save_cause_o$162 ),
    .Y(\$csr_save_cause_o$189 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2495  (
    .A(\$csr_restore_dret_id_o$177 ),
    .B(1'h0),
    .S(\$143y ),
    .Y(\$csr_restore_dret_id_o$188 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2502  (
    .A(mret_insn),
    .B(1'h0),
    .S(\$143y ),
    .Y(\$csr_restore_mret_id_o$187 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2516  (
    .A(4'h0),
    .B(\$auto$wreduce.cc:514:run$13478 [3:0]),
    .S(\$143y ),
    .Y(\$auto$wreduce.cc:514:run$13479 [3:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2523  (
    .A(2'h1),
    .B({ debug_mode_q, debug_mode_q }),
    .S(\$143y ),
    .Y(\$exc_pc_mux_o$184 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:588.53-656.12|rtl/cve2/cve2_controller.sv:588.9-673.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2530  (
    .A(1'h1),
    .B(\$csr_save_cause_o$162 ),
    .S(\$143y ),
    .Y(\$flush_id$181 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2553_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h9),
    .Y(\$procmux$2553_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:535.11-535.45|rtl/cve2/cve2_controller.sv:534.18-538.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2575  (
    .A(2'h2),
    .B(2'h1),
    .S(debug_req_i),
    .Y(\$debug_cause_o$134 [2:1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2581_CMP0  (
    .A(ctrl_fsm_cs),
    .B(4'h8),
    .Y(\$procmux$2581_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:533.11-533.45|rtl/cve2/cve2_controller.sv:532.9-538.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$2587  (
    .A({ \$debug_cause_o$134 [2:1], \$debug_cause_o$134 [1] }),
    .B(3'h2),
    .S(trigger_match_i),
    .Y(\$debug_cause_o$135 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:510.13-510.52|rtl/cve2/cve2_controller.sv:509.20-513.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2596  (
    .A(irqs_i[18]),
    .Y(\$auto$wreduce.cc:514:run$13474 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:486.18-517.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2610_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h7),
    .Y(\$procmux$2610_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:508.13-508.52|rtl/cve2/cve2_controller.sv:507.20-513.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$2617  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13474 [2] }),
    .B(2'h2),
    .S(irqs_i[16]),
    .Y(\$auto$wreduce.cc:514:run$13475 [3:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:506.13-506.59|rtl/cve2/cve2_controller.sv:500.20-513.14" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$2635  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13475 [3:2], 2'h3 }),
    .B({ 1'h1, mfip_id }),
    .S(\$123y ),
    .Y(\$auto$wreduce.cc:514:run$13476 [4:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$2650  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13476 [4:0] }),
    .B(6'h20),
    .S(\$122y ),
    .Y(\$exc_cause_o$128 [5:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:497.40-500.14|rtl/cve2/cve2_controller.sv:497.11-513.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2661  (
    .A(nmi_mode_q),
    .B(\$122y ),
    .Y(\$nmi_mode_d$127 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:490.25-514.12|rtl/cve2/cve2_controller.sv:490.9-514.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$2690  (
    .A(7'h00),
    .B({ 1'h1, \$exc_cause_o$128 [5:0] }),
    .S(handle_irq),
    .Y(\$exc_cause_o$131 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2717  (
    .A(\$108y ),
    .B(handle_irq),
    .Y(\$halt_if$116 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2725_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h5),
    .Y(controller_run_o)
  );
  /* src = "rtl/cve2/cve2_controller.sv:472.36-481.14|rtl/cve2/cve2_controller.sv:472.20-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2731  (
    .A(\$ctrl_fsm_ns$100 ),
    .B(4'h7),
    .S(handle_irq),
    .Y(\$ctrl_fsm_ns$115 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2747  (
    .A(\$halt_if$116 ),
    .B(enter_debug_mode),
    .Y(\$halt_if$118 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:466.33-472.14|rtl/cve2/cve2_controller.sv:466.11-481.14" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2760  (
    .A(\$ctrl_fsm_ns$115 ),
    .B(4'h8),
    .S(enter_debug_mode),
    .Y(\$ctrl_fsm_ns$117 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$2773  (
    .A(\$108y ),
    .B(\$halt_if$118 ),
    .S(\$114y ),
    .Y(\$halt_if$120 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:466.11-481.14|rtl/cve2/cve2_controller.sv:465.9-482.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2784  (
    .A(\$ctrl_fsm_ns$100 ),
    .B(\$ctrl_fsm_ns$117 ),
    .S(\$114y ),
    .Y(\$ctrl_fsm_ns$119 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2804  (
    .A(\$102y ),
    .B(branch_set_i),
    .Y(\$perf_tbranch_o$105 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:452.41-457.12|rtl/cve2/cve2_controller.sv:452.9-457.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2814  (
    .A(\$102y ),
    .B(jump_set_i),
    .Y(\$perf_jump_o$104 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:441.26-450.12|rtl/cve2/cve2_controller.sv:441.9-450.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$2842  (
    .A(ctrl_fsm_cs),
    .B(4'h6),
    .S(special_req),
    .Y(\$ctrl_fsm_ns$100 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2853  (
    .A(handle_irq),
    .B(enter_debug_mode),
    .Y(\$halt_if$99 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:400.20-423.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$2856_CMP0  (
    .A(ctrl_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$2856_CMP )
  );
  /* src = "rtl/cve2/cve2_controller.sv:417.31-422.12|rtl/cve2/cve2_controller.sv:417.9-422.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$2864  (
    .A({ 1'h0, handle_irq, 1'h1 }),
    .B(3'h4),
    .S(enter_debug_mode),
    .Y({ \$ctrl_fsm_ns$98 [3], \$ctrl_fsm_ns$98 [1], \$ctrl_fsm_ns$98 [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2911_CMP0  (
    .A(ctrl_fsm_cs),
    .B(2'h3),
    .Y(\$procmux$2911_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd4)
  ) \$procmux$2926  (
    .A(4'h0),
    .B({ 12'h134, \$ctrl_fsm_ns$98 [3:1], \$ctrl_fsm_ns$98 [2], \$ctrl_fsm_ns$119 , 4'h5, \$ctrl_fsm_ns$194  }),
    .S({ \$procmux$2943_CMP , \$procmux$2940_CMP , \$auto$opt_reduce.cc:137:opt_pmux$14963 , \$procmux$2856_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13313 , \$procmux$2125_CMP  }),
    .Y(ctrl_fsm_ns)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:375.19-381.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$2940_CMP0  (
    .A(ctrl_fsm_cs),
    .B(2'h2),
    .Y(\$procmux$2940_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:366.17-373.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2941_CMP0  (
    .A(ctrl_fsm_cs),
    .B(1'h1),
    .Y(\$procmux$2941_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:357.14-365.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$2943_CMP0  (
    .A(ctrl_fsm_cs),
    .Y(\$procmux$2943_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2964  (
    .A(controller_run_o),
    .B(\$perf_tbranch_o$105 ),
    .Y(perf_tbranch_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2972  (
    .A(controller_run_o),
    .B(\$perf_jump_o$104 ),
    .Y(perf_jump_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$2976  (
    .A(32'd0),
    .B(\$csr_mtval_o$190 ),
    .S(\$procmux$2125_CMP ),
    .Y(csr_mtval_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$2980  (
    .A(1'h0),
    .B({ handle_irq, 1'h1, \$137y , \$csr_save_cause_o$189  }),
    .S({ \$procmux$2610_CMP , \$procmux$2581_CMP , \$procmux$2553_CMP , \$procmux$2125_CMP  }),
    .Y(csr_save_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2990  (
    .A(\$procmux$2125_CMP ),
    .B(\$csr_restore_dret_id_o$188 ),
    .Y(csr_restore_dret_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2994  (
    .A(\$procmux$2125_CMP ),
    .B(\$csr_restore_mret_id_o$187 ),
    .Y(csr_restore_mret_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$2998  (
    .A(\$procmux$2553_CMP ),
    .B(\$137y ),
    .Y(csr_save_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:519.21-544.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3006  (
    .A(1'h0),
    .B({ handle_irq, 1'h1 }),
    .S({ \$procmux$2610_CMP , \$procmux$2581_CMP  }),
    .Y(csr_save_if_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3013  (
    .A(1'h0),
    .B({ 1'h1, \$137y  }),
    .S({ \$procmux$2581_CMP , \$procmux$2553_CMP  }),
    .Y(debug_csr_save_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:546.21-575.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3020  (
    .A(3'h1),
    .B(\$debug_cause_o$135 ),
    .S(\$procmux$2581_CMP ),
    .Y(debug_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$3026  (
    .A(7'h00),
    .B({ \$exc_cause_o$131 , 3'h0, \$auto$wreduce.cc:514:run$13479 [3:0] }),
    .S({ \$procmux$2610_CMP , \$procmux$2125_CMP  }),
    .Y(exc_cause_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$3032  (
    .A(2'h1),
    .B({ 2'h2, \$exc_pc_mux_o$184  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13315 , \$procmux$2125_CMP  }),
    .Y(exc_pc_mux_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$3041  (
    .A(3'h0),
    .B({ 6'h0a, \$pc_mux_o$183  }),
    .S({ controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13313 , \$procmux$2125_CMP  }),
    .Y(pc_mux_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$procmux$3054  (
    .A(1'h0),
    .B({ \$102y , handle_irq, 1'h1, \$pc_set_o$182  }),
    .S({ controller_run_o, \$procmux$2610_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13319 , \$procmux$2125_CMP  }),
    .Y(pc_set_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:383.14-398.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3094  (
    .A(1'h1),
    .B({ 1'h0, \$92y  }),
    .S({ \$procmux$2940_CMP , \$procmux$2911_CMP  }),
    .Y(ctrl_busy_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$3099  (
    .A(1'h0),
    .B({ 1'h1, \$flush_id$181  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13325 , \$procmux$2125_CMP  }),
    .Y(flush_id)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:425.15-484.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3114  (
    .A(controller_run_o),
    .B(special_req),
    .Y(retain_id)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3118  (
    .A(1'h0),
    .B({ \$halt_if$99 , \$halt_if$120 , 1'h1 }),
    .S({ \$procmux$2856_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$13327  }),
    .Y(halt_if)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3129  (
    .A(\$procmux$2125_CMP ),
    .Y(debug_mode_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:577.14-692.10|rtl/cve2/cve2_controller.sv:356.5-698.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3137  (
    .A(\$nmi_mode_d$127 ),
    .B(1'h0),
    .S(\$procmux$2125_CMP ),
    .Y(nmi_mode_d)
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3142  (
    .A(\$mfip_id$84 ),
    .B(4'h0),
    .S(irqs_i[0]),
    .Y(mfip_id)
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3145  (
    .A(\$mfip_id$83 ),
    .B(4'h1),
    .S(irqs_i[1]),
    .Y(\$mfip_id$84 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3148  (
    .A(\$mfip_id$82 ),
    .B(4'h2),
    .S(irqs_i[2]),
    .Y(\$mfip_id$83 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3151  (
    .A(\$mfip_id$81 ),
    .B(4'h3),
    .S(irqs_i[3]),
    .Y(\$mfip_id$82 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3154  (
    .A(\$mfip_id$80 ),
    .B(4'h4),
    .S(irqs_i[4]),
    .Y(\$mfip_id$81 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3157  (
    .A(\$mfip_id$79 ),
    .B(4'h5),
    .S(irqs_i[5]),
    .Y(\$mfip_id$80 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3160  (
    .A(\$mfip_id$78 ),
    .B(4'h6),
    .S(irqs_i[6]),
    .Y(\$mfip_id$79 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3163  (
    .A(\$mfip_id$77 ),
    .B(4'h7),
    .S(irqs_i[7]),
    .Y(\$mfip_id$78 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3166  (
    .A(\$mfip_id$76 ),
    .B(4'h8),
    .S(irqs_i[8]),
    .Y(\$mfip_id$77 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3169  (
    .A(\$mfip_id$75 ),
    .B(4'h9),
    .S(irqs_i[9]),
    .Y(\$mfip_id$76 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3172  (
    .A(\$mfip_id$74 ),
    .B(4'ha),
    .S(irqs_i[10]),
    .Y(\$mfip_id$75 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$3175  (
    .A({ \$mfip_id$73 [3], \$mfip_id$73 [3], \$mfip_id$73 [1:0] }),
    .B(4'hb),
    .S(irqs_i[11]),
    .Y(\$mfip_id$74 )
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3178  (
    .A({ \$mfip_id$72 [3], \$mfip_id$72 [1:0] }),
    .B(3'h4),
    .S(irqs_i[12]),
    .Y({ \$mfip_id$73 [3], \$mfip_id$73 [1:0] })
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$3181  (
    .A({ \$mfip_id$71 [3], \$mfip_id$71 [3], \$mfip_id$71 [0] }),
    .B(3'h5),
    .S(irqs_i[13]),
    .Y({ \$mfip_id$72 [3], \$mfip_id$72 [1:0] })
  );
  /* src = "rtl/cve2/cve2_controller.sv:306.9-306.26|rtl/cve2/cve2_controller.sv:305.7-307.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3184  (
    .A({ irqs_i[15], irqs_i[15] }),
    .B(2'h2),
    .S(irqs_i[14]),
    .Y({ \$mfip_id$71 [3], \$mfip_id$71 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:242.9-242.31|rtl/cve2/cve2_controller.sv:241.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3207  (
    .A(load_err_q),
    .B(1'h0),
    .S(store_err_q),
    .Y(\$load_err_prio$31 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3238  (
    .A(\$load_err_prio$31 ),
    .B(1'h0),
    .S(ebrk_insn),
    .Y(\$load_err_prio$34 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:240.9-240.31|rtl/cve2/cve2_controller.sv:239.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3251  (
    .A(store_err_q),
    .B(1'h0),
    .S(ebrk_insn),
    .Y(\$procmux$3251_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3276  (
    .A(\$load_err_prio$34 ),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$load_err_prio$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3286  (
    .A(\$procmux$3251_Y ),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$procmux$3286_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:238.9-238.32|rtl/cve2/cve2_controller.sv:237.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3296  (
    .A(ebrk_insn),
    .B(1'h0),
    .S(ecall_insn),
    .Y(\$ebrk_insn_prio$36 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3315  (
    .A(\$load_err_prio$38 ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$load_err_prio$43 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3322  (
    .A(\$procmux$3286_Y ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$procmux$3322_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3329  (
    .A(\$ebrk_insn_prio$36 ),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$ebrk_insn_prio$41 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:236.9-236.34|rtl/cve2/cve2_controller.sv:235.16-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3336  (
    .A(ecall_insn),
    .B(1'h0),
    .S(illegal_insn_q),
    .Y(\$ecall_insn_prio$40 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3349  (
    .A(\$load_err_prio$43 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(load_err_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3353  (
    .A(\$procmux$3322_Y ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(store_err_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3357  (
    .A(\$ebrk_insn_prio$41 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(ebrk_insn_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3361  (
    .A(\$ecall_insn_prio$40 ),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(ecall_insn_prio)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_controller.sv:234.9-234.37|rtl/cve2/cve2_controller.sv:233.7-245.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3365  (
    .A(illegal_insn_q),
    .B(1'h0),
    .S(instr_fetch_err),
    .Y(illegal_insn_prio)
  );
  assign \$145y [0] = pc_id_i[0];
  assign \$146y [0] = pc_id_i[0];
  assign { \$auto$wreduce.cc:514:run$13471 [3], \$auto$wreduce.cc:514:run$13471 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13471 [2] };
  assign { \$auto$wreduce.cc:514:run$13472 [3], \$auto$wreduce.cc:514:run$13472 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13472 [2] };
  assign { \$auto$wreduce.cc:514:run$13473 [3], \$auto$wreduce.cc:514:run$13473 [0] } = { 1'h0, \$auto$wreduce.cc:514:run$13473 [2] };
  assign { \$auto$wreduce.cc:514:run$13474 [6:3], \$auto$wreduce.cc:514:run$13474 [1:0] } = 6'h23;
  assign { \$auto$wreduce.cc:514:run$13475 [6:4], \$auto$wreduce.cc:514:run$13475 [1:0] } = 5'h13;
  assign \$auto$wreduce.cc:514:run$13476 [6:5] = 2'h2;
  assign { \$auto$wreduce.cc:514:run$13477 [6:2], \$auto$wreduce.cc:514:run$13477 [0] } = { 5'h00, \$auto$wreduce.cc:514:run$13477 [1] };
  assign \$auto$wreduce.cc:514:run$13478 [6:4] = 3'h0;
  assign \$auto$wreduce.cc:514:run$13479 [6:4] = 3'h0;
  assign \$ctrl_fsm_ns$151 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$157 [1:0] = 2'h1;
  assign \$ctrl_fsm_ns$98 [0] = \$ctrl_fsm_ns$98 [2];
  assign \$debug_cause_o$134 [0] = \$debug_cause_o$134 [1];
  assign \$exc_cause_o$128 [6] = 1'h1;
  assign \$mfip_id$71 [2:1] = { \$mfip_id$71 [3], \$mfip_id$71 [3] };
  assign \$mfip_id$72 [2] = \$mfip_id$72 [3];
  assign \$mfip_id$73 [2] = \$mfip_id$73 [3];
  assign \$pc_mux_o$175 [0] = \$pc_mux_o$175 [1];
  assign debug_mode_o = debug_mode_q;
  assign flush_id_o = flush_id;
  assign instr_fetch_err_prio = instr_fetch_err;
  assign load_err_d = load_err_i;
  assign nmi_mode_o = nmi_mode_q;
  assign stall = stall_id_i;
  assign store_err_d = store_err_i;
  assign unused_irq_timer = irqs_i[17];
endmodule

/* src = "rtl/cve2/cve2_core.sv:15.8" */
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, core_busy_o, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, debug_req_i, fetch_enable_i
, test_en_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, crash_dump_o);
  wire \$0y ;
  wire \$2y ;
  /* src = "rtl/cve2/cve2_core.sv:184.16" */
  wire [31:0] alu_adder_result_ex;
  /* src = "rtl/cve2/cve2_core.sv:179.16" */
  wire [31:0] alu_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:180.16" */
  wire [31:0] alu_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:178.16" */
  wire [6:0] alu_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:36.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_core.sv:146.16" */
  wire branch_decision;
  /* src = "rtl/cve2/cve2_core.sv:145.16" */
  wire [31:0] branch_target_ex;
  /* src = "rtl/cve2/cve2_core.sv:30.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_core.sv:106.40" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "rtl/cve2/cve2_core.sv:67.40" */
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  /* src = "rtl/cve2/cve2_core.sv:198.16" */
  wire csr_access;
  /* src = "rtl/cve2/cve2_core.sv:201.16" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_core.sv:233.26" */
  wire [31:0] csr_depc;
  /* src = "rtl/cve2/cve2_core.sv:233.16" */
  wire [31:0] csr_mepc;
  /* src = "rtl/cve2/cve2_core.sv:232.16" */
  wire csr_mstatus_mie;
  /* src = "rtl/cve2/cve2_core.sv:250.16" */
  wire csr_mstatus_tw;
  /* src = "rtl/cve2/cve2_core.sv:249.16" */
  wire [31:0] csr_mtval;
  /* src = "rtl/cve2/cve2_core.sv:248.16" */
  wire [31:0] csr_mtvec;
  /* src = "rtl/cve2/cve2_core.sv:247.16" */
  wire csr_mtvec_init;
  /* src = "rtl/cve2/cve2_core.sv:199.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_core.sv:200.16" */
  wire csr_op_en;
  /* src = "rtl/cve2/cve2_core.sv:236.17" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" */
  wire [135:0] csr_pmp_addr;
  /* src = "rtl/cve2/cve2_core.sv:237.17" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" */
  wire [23:0] csr_pmp_cfg;
  /* src = "rtl/cve2/cve2_core.sv:238.17" */
  /* unused_bits = "0 1 2" */
  wire [2:0] csr_pmp_mseccfg;
  /* src = "rtl/cve2/cve2_core.sv:202.16" */
  wire [31:0] csr_rdata;
  /* src = "rtl/cve2/cve2_core.sv:245.16" */
  wire csr_restore_dret_id;
  /* src = "rtl/cve2/cve2_core.sv:244.16" */
  wire csr_restore_mret_id;
  /* src = "rtl/cve2/cve2_core.sv:246.16" */
  wire csr_save_cause;
  /* src = "rtl/cve2/cve2_core.sv:243.16" */
  wire csr_save_id;
  /* src = "rtl/cve2/cve2_core.sv:242.16" */
  wire csr_save_if;
  /* src = "rtl/cve2/cve2_core.sv:203.16" */
  wire [31:0] csr_wdata;
  /* src = "rtl/cve2/cve2_core.sv:149.16" */
  wire ctrl_busy;
  /* src = "rtl/cve2/cve2_core.sv:52.40" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:51.40" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_core.sv:55.40" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_core.sv:48.40" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:54.40" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:47.40" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_core.sv:240.17" */
  wire data_req_out;
  /* src = "rtl/cve2/cve2_core.sv:49.40" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:53.40" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_core.sv:50.40" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_core.sv:256.16" */
  wire [2:0] debug_cause;
  /* src = "rtl/cve2/cve2_core.sv:257.16" */
  wire debug_csr_save;
  /* src = "rtl/cve2/cve2_core.sv:259.16" */
  wire debug_ebreakm;
  /* src = "rtl/cve2/cve2_core.sv:260.16" */
  wire debug_ebreaku;
  /* src = "rtl/cve2/cve2_core.sv:255.16" */
  wire debug_mode;
  /* src = "rtl/cve2/cve2_core.sv:66.40" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_core.sv:258.16" */
  wire debug_single_step;
  /* src = "rtl/cve2/cve2_core.sv:189.16" */
  wire div_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:191.16" */
  wire div_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:227.16" */
  wire en_wb;
  /* src = "rtl/cve2/cve2_core.sv:217.16" */
  wire ex_valid;
  /* src = "rtl/cve2/cve2_core.sv:135.16" */
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_core.sv:134.16" */
  wire [1:0] exc_pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:105.40" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_core.sv:807.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" */
  wire [135:0] \g_no_pmp.unused_csr_pmp_addr ;
  /* src = "rtl/cve2/cve2_core.sv:808.18" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" */
  wire [23:0] \g_no_pmp.unused_csr_pmp_cfg ;
  /* src = "rtl/cve2/cve2_core.sv:809.19" */
  /* unused_bits = "0 1 2" */
  wire [2:0] \g_no_pmp.unused_csr_pmp_mseccfg ;
  /* src = "rtl/cve2/cve2_core.sv:806.16" */
  /* unused_bits = "0 1" */
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  /* src = "rtl/cve2/cve2_core.sv:35.40" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_core.sv:216.16" */
  wire id_in_ready;
  /* src = "rtl/cve2/cve2_core.sv:150.16" */
  wire if_busy;
  /* src = "rtl/cve2/cve2_core.sv:123.16" */
  wire illegal_c_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:204.16" */
  wire illegal_csr_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:280.16" */
  /* unused_bits = "0" */
  wire illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:126.16" */
  wire [67:0] imd_val_d_ex;
  /* src = "rtl/cve2/cve2_core.sv:127.16" */
  wire [67:0] imd_val_q_ex;
  /* src = "rtl/cve2/cve2_core.sv:128.16" */
  wire [1:0] imd_val_we_ex;
  /* src = "rtl/cve2/cve2_core.sv:42.40" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_core.sv:44.40" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_core.sv:121.16" */
  wire instr_fetch_err;
  /* src = "rtl/cve2/cve2_core.sv:122.16" */
  wire instr_fetch_err_plus2;
  /* src = "rtl/cve2/cve2_core.sv:130.16" */
  wire instr_first_cycle_id;
  /* src = "rtl/cve2/cve2_core.sv:40.40" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_core.sv:265.16" */
  /* unused_bits = "0" */
  wire instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:119.16" */
  wire instr_is_compressed_id;
  /* src = "rtl/cve2/cve2_core.sv:114.16" */
  /* unused_bits = "0" */
  wire instr_new_id;
  /* src = "rtl/cve2/cve2_core.sv:120.16" */
  wire instr_perf_count_id;
  /* src = "rtl/cve2/cve2_core.sv:116.16" */
  wire [31:0] instr_rdata_alu_id;
  /* src = "rtl/cve2/cve2_core.sv:118.16" */
  wire [15:0] instr_rdata_c_id;
  /* src = "rtl/cve2/cve2_core.sv:43.40" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_core.sv:115.16" */
  wire [31:0] instr_rdata_id;
  /* src = "rtl/cve2/cve2_core.sv:224.16" */
  wire instr_req_gated;
  /* src = "rtl/cve2/cve2_core.sv:223.16" */
  wire instr_req_int;
  /* src = "rtl/cve2/cve2_core.sv:39.40" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_core.sv:41.40" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_core.sv:131.16" */
  wire instr_valid_clear;
  /* src = "rtl/cve2/cve2_core.sv:113.16" */
  wire instr_valid_id;
  /* src = "rtl/cve2/cve2_core.sv:60.40" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_core.sv:61.40" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_core.sv:62.40" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_core.sv:63.40" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_core.sv:58.40" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_core.sv:59.40" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_core.sv:231.16" */
  wire [18:0] irqs;
  /* src = "rtl/cve2/cve2_core.sv:141.16" */
  wire lsu_addr_incr_req;
  /* src = "rtl/cve2/cve2_core.sv:142.16" */
  wire [31:0] lsu_addr_last;
  /* src = "rtl/cve2/cve2_core.sv:151.16" */
  wire lsu_busy;
  /* src = "rtl/cve2/cve2_core.sv:137.16" */
  wire lsu_load_err;
  /* src = "rtl/cve2/cve2_core.sv:212.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_core.sv:220.16" */
  wire lsu_resp_err;
  /* src = "rtl/cve2/cve2_core.sv:219.16" */
  wire lsu_resp_valid;
  /* src = "rtl/cve2/cve2_core.sv:211.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_core.sv:138.16" */
  wire lsu_store_err;
  /* src = "rtl/cve2/cve2_core.sv:210.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_core.sv:213.16" */
  wire [31:0] lsu_wdata;
  /* src = "rtl/cve2/cve2_core.sv:209.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_core.sv:188.16" */
  wire mult_en_ex;
  /* src = "rtl/cve2/cve2_core.sv:190.16" */
  wire mult_sel_ex;
  /* src = "rtl/cve2/cve2_core.sv:194.16" */
  wire [31:0] multdiv_operand_a_ex;
  /* src = "rtl/cve2/cve2_core.sv:195.16" */
  wire [31:0] multdiv_operand_b_ex;
  /* src = "rtl/cve2/cve2_core.sv:192.16" */
  wire [1:0] multdiv_operator_ex;
  /* src = "rtl/cve2/cve2_core.sv:193.16" */
  wire [1:0] multdiv_signed_mode_ex;
  /* src = "rtl/cve2/cve2_core.sv:230.16" */
  wire nmi_mode;
  /* src = "rtl/cve2/cve2_core.sv:125.16" */
  wire [31:0] pc_id;
  /* src = "rtl/cve2/cve2_core.sv:124.16" */
  wire [31:0] pc_if;
  /* src = "rtl/cve2/cve2_core.sv:133.16" */
  wire [2:0] pc_mux_id;
  /* src = "rtl/cve2/cve2_core.sv:132.16" */
  wire pc_set;
  /* src = "rtl/cve2/cve2_core.sv:274.16" */
  wire perf_branch;
  /* src = "rtl/cve2/cve2_core.sv:272.16" */
  wire perf_div_wait;
  /* src = "rtl/cve2/cve2_core.sv:270.16" */
  wire perf_dside_wait;
  /* src = "rtl/cve2/cve2_core.sv:268.16" */
  wire perf_instr_ret_compressed_wb;
  /* src = "rtl/cve2/cve2_core.sv:267.16" */
  wire perf_instr_ret_wb;
  /* src = "rtl/cve2/cve2_core.sv:269.16" */
  wire perf_iside_wait;
  /* src = "rtl/cve2/cve2_core.sv:273.16" */
  wire perf_jump;
  /* src = "rtl/cve2/cve2_core.sv:276.16" */
  wire perf_load;
  /* src = "rtl/cve2/cve2_core.sv:277.16" */
  wire perf_store;
  /* src = "rtl/cve2/cve2_core.sv:275.16" */
  wire perf_tbranch;
  /* src = "rtl/cve2/cve2_core.sv:271.16" */
  wire perf_wfi_wait;
  /* src = "rtl/cve2/cve2_core.sv:239.17" */
  wire [2:0] pmp_req_err;
  /* src = "rtl/cve2/cve2_core.sv:251.16" */
  wire [1:0] priv_mode_id;
  /* src = "rtl/cve2/cve2_core.sv:252.16" */
  /* unused_bits = "0 1" */
  wire [1:0] priv_mode_lsu;
  /* src = "rtl/cve2/cve2_core.sv:185.16" */
  wire [31:0] result_ex;
  /* src = "rtl/cve2/cve2_core.sv:154.16" */
  wire [4:0] rf_raddr_a;
  /* src = "rtl/cve2/cve2_core.sv:156.16" */
  wire [4:0] rf_raddr_b;
  /* src = "rtl/cve2/cve2_core.sv:155.16" */
  wire [31:0] rf_rdata_a;
  /* src = "rtl/cve2/cve2_core.sv:157.16" */
  wire [31:0] rf_rdata_b;
  /* src = "rtl/cve2/cve2_core.sv:163.16" */
  /* unused_bits = "0" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_core.sv:164.16" */
  /* unused_bits = "0" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_core.sv:173.16" */
  wire [4:0] rf_waddr_id;
  /* src = "rtl/cve2/cve2_core.sv:165.16" */
  wire [4:0] rf_waddr_wb;
  /* src = "rtl/cve2/cve2_core.sv:174.16" */
  wire [31:0] rf_wdata_id;
  /* src = "rtl/cve2/cve2_core.sv:169.16" */
  wire [31:0] rf_wdata_lsu;
  /* src = "rtl/cve2/cve2_core.sv:166.16" */
  wire [31:0] rf_wdata_wb;
  /* src = "rtl/cve2/cve2_core.sv:175.16" */
  wire rf_we_id;
  /* src = "rtl/cve2/cve2_core.sv:171.16" */
  wire rf_we_lsu;
  /* src = "rtl/cve2/cve2_core.sv:170.16" */
  wire rf_we_wb;
  /* src = "rtl/cve2/cve2_core.sv:31.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_core.sv:33.40" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_core.sv:261.16" */
  wire trigger_match;
  /* src = "rtl/cve2/cve2_core.sv:280.33" */
  /* unused_bits = "0" */
  wire unused_illegal_insn_id;
  /* src = "rtl/cve2/cve2_core.sv:1350.30" */
  /* unused_bits = "0" */
  wire unused_instr_id_done;
  /* src = "rtl/cve2/cve2_core.sv:1350.9" */
  /* unused_bits = "0" */
  wire unused_instr_new_id;
  /* src = "rtl/cve2/cve2_core.sv:288.24-288.43" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(ctrl_busy),
    .B(if_busy),
    .Y(\$0y )
  );
  /* src = "rtl/cve2/cve2_core.sv:288.24-288.54" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\$0y ),
    .B(lsu_busy),
    .Y(core_busy_o)
  );
  /* src = "rtl/cve2/cve2_core.sv:351.42-351.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(instr_valid_id),
    .Y(\$2y )
  );
  /* src = "rtl/cve2/cve2_core.sv:351.28-351.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(id_in_ready),
    .B(\$2y ),
    .Y(perf_iside_wait)
  );
  /* src = "rtl/cve2/cve2_core.sv:538.25-538.53" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(lsu_load_err),
    .B(lsu_store_err),
    .Y(lsu_resp_err)
  );
  /* src = "rtl/cve2/cve2_core.sv:675.34-675.77" */
  \$mux  #(
    .WIDTH(32'd12)
  ) \$7  (
    .A(12'h000),
    .B(alu_operand_b_ex[11:0]),
    .S(csr_access),
    .Y(csr_addr)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:688.5" */
  \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(alu_operand_a_ex),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(priv_mode_lsu),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  /* src = "rtl/cve2/cve2_core.sv:498.5" */
  \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:364.5" */
  \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_gated),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  /* src = "rtl/cve2/cve2_core.sv:297.5" */
  \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_core.sv:540.24" */
  \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_out),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/cve2/cve2_core.sv:654.5" */
  \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  /* src = "rtl/cve2/cve2_core.sv:586.5" */
  \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc };
  assign csr_wdata = alu_operand_a_ex;
  assign data_req_o = data_req_out;
  assign \g_no_pmp.unused_csr_pmp_addr  = csr_pmp_addr;
  assign \g_no_pmp.unused_csr_pmp_cfg  = csr_pmp_cfg;
  assign \g_no_pmp.unused_csr_pmp_mseccfg  = csr_pmp_mseccfg;
  assign \g_no_pmp.unused_priv_lvl_ls  = priv_mode_lsu;
  assign instr_req_int = instr_req_gated;
  assign pmp_req_err = 3'h0;
  assign unused_illegal_insn_id = illegal_insn_id;
  assign unused_instr_id_done = instr_id_done;
  assign unused_instr_new_id = instr_new_id;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14068 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14070 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14077 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14072 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14079 ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  /* src = "rtl/cve2/cve2_counter.sv:26.24-26.84" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter_q),
    .B(1'h1),
    .Y(counter_upd)
  );
  /* src = "rtl/cve2/cve2_counter.sv:31.10-31.38" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(we)
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14067  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14072 ),
    .Q(counter_q[63:32])
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14074  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14079 ),
    .Q(counter_q[31:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14069  (
    .A({ counter_inc_i, we }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14068 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14071  (
    .A({ counterh_we_i, we }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14070 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14078  (
    .A({ counterh_we_i, we }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14077 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14073  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14068 , \$auto$opt_dff.cc:194:make_patterns_logic$14070  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14072 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14080  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14068 , \$auto$opt_dff.cc:194:make_patterns_logic$14077  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14079 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$2024  (
    .A(counter_upd),
    .B(counter_load),
    .S(we),
    .Y(counter_d)
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$2026  (
    .A({ 32'hxxxxxxxx, counter_val_i }),
    .B({ counter_val_i, 32'hxxxxxxxx }),
    .S(counterh_we_i),
    .Y(counter_load)
  );
  assign counter = counter_q;
  assign counter_val_o = counter_q;
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

/* src = "rtl/cve2/cve2_counter.sv:1.8" */
module \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14082 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14084 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14091 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14086 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14093 ;
  /* src = "rtl/cve2/cve2_counter.sv:8.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_counter.sv:19.28" */
  wire [63:0] counter;
  /* src = "rtl/cve2/cve2_counter.sv:23.28" */
  wire [63:0] counter_d;
  /* src = "rtl/cve2/cve2_counter.sv:11.23" */
  input counter_inc_i;
  wire counter_inc_i;
  /* src = "rtl/cve2/cve2_counter.sv:21.28" */
  wire [63:0] counter_load;
  /* src = "rtl/cve2/cve2_counter.sv:57.28" */
  wire [63:0] counter_q;
  /* src = "rtl/cve2/cve2_counter.sv:20.28" */
  wire [63:0] counter_upd;
  /* src = "rtl/cve2/cve2_counter.sv:14.23" */
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  /* src = "rtl/cve2/cve2_counter.sv:15.23" */
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  /* src = "rtl/cve2/cve2_counter.sv:16.23" */
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  /* src = "rtl/cve2/cve2_counter.sv:13.23" */
  input counter_we_i;
  wire counter_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:12.23" */
  input counterh_we_i;
  wire counterh_we_i;
  /* src = "rtl/cve2/cve2_counter.sv:9.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_counter.sv:22.28" */
  wire we;
  /* src = "rtl/cve2/cve2_counter.sv:26.24-26.84" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd64),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd64)
  ) \$0  (
    .A(counter_q),
    .B(1'h1),
    .Y(counter_val_upd_o)
  );
  /* src = "rtl/cve2/cve2_counter.sv:31.10-31.38" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(counter_we_i),
    .B(counterh_we_i),
    .Y(we)
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14081  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14086 ),
    .Q(counter_q[63:32])
  );
  /* src = "rtl/cve2/cve2_counter.sv:63.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14088  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14093 ),
    .Q(counter_q[31:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14083  (
    .A({ counter_inc_i, we }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14082 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14085  (
    .A({ counterh_we_i, we }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14084 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14092  (
    .A({ counterh_we_i, we }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14091 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14087  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14084 , \$auto$opt_dff.cc:194:make_patterns_logic$14082  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14086 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14094  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14091 , \$auto$opt_dff.cc:194:make_patterns_logic$14082  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14093 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_counter.sv:41.7-41.50|rtl/cve2/cve2_counter.sv:40.5-46.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$2012  (
    .A(counter_val_upd_o),
    .B(counter_load),
    .S(we),
    .Y(counter_d)
  );
  /* src = "rtl/cve2/cve2_counter.sv:34.24-37.8|rtl/cve2/cve2_counter.sv:34.5-37.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$2014  (
    .A({ 32'hxxxxxxxx, counter_val_i }),
    .B({ counter_val_i, 32'hxxxxxxxx }),
    .S(counterh_we_i),
    .Y(counter_load)
  );
  assign counter = counter_q;
  assign counter_upd = counter_val_upd_o;
  assign counter_val_o = counter_q;
endmodule

/* src = "rtl/cve2/cve2_cs_registers.sv:15.8" */
module \cve2_cs_registers$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i (clk_i, rst_ni, boot_addr_i, hart_id_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire \$10y ;
  wire \$134y ;
  wire [5:0] \$13y ;
  wire [31:0] \$15y ;
  wire [31:0] \$162y ;
  wire [31:0] \$163y ;
  wire [31:0] \$164y ;
  wire \$166y ;
  wire \$167y ;
  wire \$168y ;
  wire \$170y ;
  wire \$171y ;
  wire \$180y ;
  wire \$182y ;
  wire \$183y ;
  wire \$187y ;
  wire \$188y ;
  wire \$190y ;
  wire \$191y ;
  wire \$192y ;
  wire \$193y ;
  wire \$198y ;
  wire \$1y ;
  wire \$200y ;
  wire \$202y ;
  wire [63:0] \$20y ;
  wire \$30y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$37y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$40y ;
  wire \$41y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$45y ;
  wire \$46y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$4y ;
  wire \$50y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$59y ;
  wire \$60y ;
  wire \$61y ;
  /* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$67y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14096 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13331 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13333 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13335 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$auto$wreduce.cc:514:run$13480 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$auto$wreduce.cc:514:run$13481 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [31:0] \$dcsr_d$101 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [31:0] \$dcsr_d$85 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [1:0] \$dcsr_d[1:0]$128 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  wire [1:0] \$dcsr_d[1:0]$62 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [2:0] \$dcsr_d[8:6]$129 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$dcsr_en$102 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$dcsr_en$130 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dcsr_en$86 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$depc_d$131 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$depc_en$103 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$depc_en$132 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$depc_en$87 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch0_en$88 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$dscratch1_en$89 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  wire [31:0] \$exception_pc$109 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  wire \$illegal_csr$29 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [6:0] \$mcause_d$115 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [6:0] \$mcause_d$124 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [6:0] \$mcause_d$139 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mcause_en$116 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mcause_en$125 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mcause_en$140 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcause_en$82 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mcause_en$98 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mcountinhibit_we$90 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mepc_d$113 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mepc_d$122 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [31:0] \$mepc_d$137 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mepc_en$114 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mepc_en$123 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire \$mepc_en$138 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mepc_en$81 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mepc_en$97 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mie_en$79 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mscratch_en$80 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstack_en$133 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire [5:0] \$mstatus_d$77 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire [5:0] \$mstatus_d$93 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  wire \$mstatus_d[1]$135 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  wire [1:0] \$mstatus_d[3:2]$58 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  wire [2:0] \$mstatus_d[4:2]$136 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [3:0] \$mstatus_d[5:2]$111 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [3:0] \$mstatus_d[5:2]$120 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mstatus_en$112 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mstatus_en$121 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mstatus_en$78 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mstatus_en$94 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire [31:0] \$mtval_d$117 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire [31:0] \$mtval_d$126 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  wire \$mtval_en$118 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  wire \$mtval_en$127 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtval_en$83 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  wire \$mtval_en$99 ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  wire \$mtvec_en$84 ;
  wire \$procmux$9032_CMP ;
  wire [30:0] \$procmux$9465_CMP ;
  wire \$procmux$9465_CTRL ;
  wire [30:0] \$procmux$9471_CMP ;
  wire \$procmux$9471_CTRL ;
  wire \$procmux$9541_CMP ;
  wire \$procmux$9789_CMP ;
  wire \$procmux$9790_CMP ;
  wire \$procmux$9791_CMP ;
  wire \$procmux$9792_CMP ;
  wire [28:0] \$procmux$9798_CMP ;
  wire \$procmux$9798_CTRL ;
  wire \$procmux$9826_CMP ;
  wire \$procmux$9832_CMP ;
  wire \$procmux$9834_CMP ;
  wire [1:0] \$procmux$9835_CMP ;
  wire \$procmux$9836_CMP ;
  wire \$procmux$9838_CMP ;
  wire \$procmux$9839_CMP ;
  wire \$procmux$9840_CMP ;
  wire \$procmux$9841_CMP ;
  wire \$procmux$9842_CMP ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:43.32" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:98.32" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:99.32" */
  input branch_taken_i;
  wire branch_taken_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:29.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:46.32" */
  input csr_access_i;
  wire csr_access_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:246.32" */
  wire [11:0] csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:47.32" */
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:73.32" */
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:88.32" */
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:62.32" */
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:61.32" */
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:38.32" */
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:89.32" */
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:42.32" */
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:41.32" */
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:50.32" */
  input csr_op_en_i;
  wire csr_op_en_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:49.32" */
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:66.34" */
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:65.34" */
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:67.34" */
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:228.16" */
  wire [31:0] csr_rdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:51.32" */
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:86.32" */
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:85.32" */
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:87.32" */
  input csr_save_cause_i;
  wire csr_save_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:84.32" */
  input csr_save_id_i;
  wire csr_save_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:83.32" */
  input csr_save_if_i;
  wire csr_save_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:48.32" */
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:227.16" */
  wire [31:0] csr_wdata_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:229.16" */
  wire csr_we_int;
  /* src = "rtl/cve2/cve2_cs_registers.sv:230.16" */
  wire csr_wr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.24" */
  wire [31:0] dcsr_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:181.16" */
  wire dcsr_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:180.16" */
  wire [31:0] dcsr_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:71.32" */
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:72.32" */
  input debug_csr_save_i;
  wire debug_csr_save_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:75.32" */
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:76.32" */
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:70.32" */
  input debug_mode_i;
  wire debug_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:74.32" */
  output debug_single_step_o;
  wire debug_single_step_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.24" */
  wire [31:0] depc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:183.16" */
  wire depc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:182.16" */
  wire [31:0] depc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:104.32" */
  input div_wait_i;
  wire div_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.16" */
  wire dscratch0_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:184.16" */
  wire [31:0] dscratch0_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:186.30" */
  wire dscratch1_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:185.16" */
  wire [31:0] dscratch1_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:102.32" */
  input dside_wait_i;
  wire dside_wait_i;
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9" */
  wire [9:0] \g_mcountinhibit_reduced.unused_mhphcounter_incr ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1290.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1291.35" */
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounterh_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1325.31" */
  wire \gen_trigger_regs.selected_tmatch_control ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1326.31" */
  wire [31:0] \gen_trigger_regs.selected_tmatch_value ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1321.31" */
  wire \gen_trigger_regs.tmatch_control_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1322.31" */
  wire \gen_trigger_regs.tmatch_control_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1330.31" */
  wire \gen_trigger_regs.tmatch_control_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1323.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1324.31" */
  wire [31:0] \gen_trigger_regs.tmatch_value_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1331.31" */
  wire \gen_trigger_regs.tmatch_value_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1333.31" */
  wire \gen_trigger_regs.trigger_match ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.31" */
  wire \gen_trigger_regs.tselect_d ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1320.42" */
  wire \gen_trigger_regs.tselect_q ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:1329.31" */
  wire \gen_trigger_regs.tselect_we ;
  /* src = "rtl/cve2/cve2_cs_registers.sv:33.32" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:233.16" */
  wire illegal_csr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:90.32" */
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:234.16" */
  wire illegal_csr_priv;
  /* src = "rtl/cve2/cve2_cs_registers.sv:235.16" */
  wire illegal_csr_write;
  /* src = "rtl/cve2/cve2_cs_registers.sv:95.32" */
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:94.32" */
  input instr_ret_i;
  wire instr_ret_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:56.32" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:57.32" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:59.32" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:54.32" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:55.32" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:60.32" */
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:96.32" */
  input iside_wait_i;
  wire iside_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:97.32" */
  input jump_i;
  wire jump_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.26" */
  wire [6:0] mcause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:174.16" */
  wire mcause_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:173.16" */
  wire [6:0] mcause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:201.32" */
  wire [31:0] mcountinhibit;
  /* src = "rtl/cve2/cve2_cs_registers.sv:203.49" */
  wire [2:0] mcountinhibit_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:204.32" */
  wire mcountinhibit_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:100.32" */
  input mem_load_i;
  wire mem_load_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:101.32" */
  input mem_store_i;
  wire mem_store_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.24" */
  wire [31:0] mepc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:172.16" */
  wire mepc_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:171.16" */
  wire [31:0] mepc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:209.16" */
  wire [2047:0] mhpmcounter;
  /* src = "rtl/cve2/cve2_cs_registers.sv:214.16" */
  wire [4:0] mhpmcounter_idx;
  /* unused_bits = "3 4 5 6 7 8 9 10 11 12" */
  wire [12:0] mhpmcounter_incr;
  /* unused_bits = "1" */
  wire [2:0] mhpmcounter_we;
  /* unused_bits = "1" */
  wire [2:0] mhpmcounterh_we;
  /* src = "rtl/cve2/cve2_cs_registers.sv:213.16" */
  wire [1023:0] mhpmevent;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.23" */
  wire [18:0] mie_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:168.16" */
  wire mie_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:167.16" */
  wire [18:0] mie_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:219.16" */
  wire [63:0] minstret_raw;
  /* src = "rtl/cve2/cve2_cs_registers.sv:179.16" */
  wire [18:0] mip;
  /* src = "rtl/cve2/cve2_cs_registers.sv:170.16" */
  wire mscratch_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:169.16" */
  wire [31:0] mscratch_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.32" */
  wire [6:0] mstack_cause_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:193.16" */
  wire [6:0] mstack_cause_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.26" */
  wire [2:0] mstack_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:191.16" */
  wire mstack_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.30" */
  wire [31:0] mstack_epc_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:192.16" */
  wire [31:0] mstack_epc_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:190.16" */
  wire [2:0] mstack_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.27" */
  wire [5:0] mstatus_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:166.16" */
  wire mstatus_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:165.16" */
  wire [5:0] mstatus_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.25" */
  wire [31:0] mtval_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:176.16" */
  wire mtval_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:175.16" */
  wire [31:0] mtval_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.25" */
  wire [31:0] mtvec_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:178.16" */
  wire mtvec_en;
  /* src = "rtl/cve2/cve2_cs_registers.sv:177.16" */
  wire [31:0] mtvec_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:58.32" */
  input nmi_mode_i;
  wire nmi_mode_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:80.32" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:79.32" */
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:196.32" */
  wire [511:0] pmp_addr_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:197.32" */
  wire [127:0] pmp_cfg_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:198.32" */
  wire [2:0] pmp_mseccfg;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.28" */
  wire [1:0] priv_lvl_d;
  /* src = "rtl/cve2/cve2_cs_registers.sv:164.16" */
  wire [1:0] priv_lvl_q;
  /* src = "rtl/cve2/cve2_cs_registers.sv:36.32" */
  output [1:0] priv_mode_id_o;
  wire [1:0] priv_mode_id_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:37.32" */
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:30.32" */
  input rst_ni;
  wire rst_ni;
  wire [2:0] tmatch_control_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:224.16" */
  wire [31:0] tmatch_value_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:77.32" */
  output trigger_match_o;
  wire trigger_match_o;
  /* src = "rtl/cve2/cve2_cs_registers.sv:222.16" */
  wire [31:0] tselect_rdata;
  /* src = "rtl/cve2/cve2_cs_registers.sv:237.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:238.16" */
  wire [2:0] unused_csr_addr;
  /* src = "rtl/cve2/cve2_cs_registers.sv:217.16" */
  wire unused_mhpmcounter_incr_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:215.16" */
  /* unused_bits = "0" */
  wire unused_mhpmcounter_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:216.16" */
  /* unused_bits = "0" */
  wire unused_mhpmcounterh_we_1;
  /* src = "rtl/cve2/cve2_cs_registers.sv:103.32" */
  input wfi_wait_i;
  wire wfi_wait_i;
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.25-408.51" */
  reg [1:0] \$auto$memory_bmux2rom.cc:63:execute$15077  [31:0];
  initial begin
    \$auto$memory_bmux2rom.cc:63:execute$15077 [0] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [1] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [2] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [3] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [4] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [5] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [6] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [7] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [8] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [9] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [10] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [11] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [12] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [13] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [14] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [15] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [16] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [17] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [18] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [19] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [20] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [21] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [22] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [23] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [24] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [25] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [26] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [27] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [28] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [29] = 2'h2;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [30] = 2'h0;
    \$auto$memory_bmux2rom.cc:63:execute$15077 [31] = 2'h1;
  end
  assign { \$15y [2], \$15y [0] } = \$auto$memory_bmux2rom.cc:63:execute$15077 [\$13y [4:0]];
  /* src = "rtl/cve2/cve2_cs_registers.sv:252.32-252.60" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(csr_addr_i[9:8]),
    .B(priv_lvl_q),
    .Y(illegal_csr_priv)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:253.32-253.56" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(csr_addr_i[11:10]),
    .B(2'h3),
    .Y(\$1y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:387.23-387.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(debug_mode_i),
    .Y(\$10y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:676.13-676.40" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(mstatus_q[3:2]),
    .B(2'h3),
    .Y(\$134y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:715.28-715.71" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$160  (
    .A(priv_lvl_q),
    .B(mstatus_q[3:2]),
    .S(mstatus_q[1]),
    .Y(priv_mode_lsu_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:721.38-721.63" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$162  (
    .A(csr_wdata_i),
    .B(csr_rdata_o),
    .Y(\$162y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:722.37-722.49" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$163  (
    .A(csr_wdata_i),
    .Y(\$163y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:722.37-722.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$164  (
    .A(\$163y ),
    .B(csr_rdata_o),
    .Y(\$164y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(csr_op_i),
    .B(1'h1),
    .Y(\$166y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(csr_op_i),
    .B(2'h2),
    .Y(\$167y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(csr_op_i),
    .B(2'h3),
    .Y(\$168y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:728.20-728.76" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A({ \$168y , \$167y , \$166y  }),
    .Y(csr_wr)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:731.24-731.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(csr_wr),
    .B(csr_op_en_i),
    .Y(\$170y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:731.47-731.66" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$171  (
    .A(illegal_csr_insn_o),
    .Y(\$171y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:731.24-731.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(\$170y ),
    .B(\$171y ),
    .Y(csr_we_int)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:748.26-748.37" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd19),
    .Y_WIDTH(32'd19)
  ) \$173  (
    .A({ irq_software_i, irq_timer_i, irq_external_i, irq_fast_i }),
    .B(mie_q),
    .Y(irqs_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:749.26-749.33" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd19),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(irqs_o),
    .Y(irq_pending_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1213.42-1213.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(mcountinhibit_q[0]),
    .Y(\$180y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1229.42-1229.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$182  (
    .A(mcountinhibit_q[2]),
    .Y(\$182y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1229.20-1229.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(instr_ret_i),
    .B(\$182y ),
    .Y(\$183y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1336.25-1336.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$187  (
    .A(csr_we_int),
    .B(debug_mode_i),
    .Y(\$187y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1336.54-1336.79" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(csr_addr_i),
    .B(11'h7a0),
    .Y(\$188y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1336.25-1336.80" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(\$187y ),
    .B(\$188y ),
    .Y(\gen_trigger_regs.tselect_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1338.38-1338.69" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$190  (
    .A(\gen_trigger_regs.tselect_q ),
    .Y(\$190y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1338.83" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$191  (
    .A(\$190y ),
    .B(csr_we_int),
    .Y(\$191y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1338.98" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$192  (
    .A(\$191y ),
    .B(debug_mode_i),
    .Y(\$192y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1339.38-1339.62" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(csr_addr_i),
    .B(11'h7a1),
    .Y(\$193y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1338.37-1339.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$194  (
    .A(\$192y ),
    .B(\$193y ),
    .Y(\gen_trigger_regs.tmatch_control_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1341.38-1341.62" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$198  (
    .A(csr_addr_i),
    .B(11'h7a2),
    .Y(\$198y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1340.37-1341.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(\$192y ),
    .B(\$198y ),
    .Y(\gen_trigger_regs.tmatch_value_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:253.31-253.67" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1y ),
    .B(csr_wr),
    .Y(illegal_csr_write)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:421.25-421.53" */
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd64)
  ) \$20  (
    .A({ mhpmcounter[2047:1984], 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 }),
    .S(\$13y [4:0]),
    .Y(\$20y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1346.24-1347.85" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\$200y ),
    .B(csr_wdata_int[0]),
    .Y(\gen_trigger_regs.tselect_d )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1433.56-1433.90" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(pc_if_i),
    .B(\gen_trigger_regs.tmatch_value_q ),
    .Y(\$202y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1433.33-1433.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$203  (
    .A(\gen_trigger_regs.tmatch_control_q ),
    .B(\$202y ),
    .Y(trigger_match_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:254.47-254.78" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(illegal_csr),
    .B(illegal_csr_write),
    .Y(\$3y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(csr_addr_i),
    .B(10'h3a0),
    .Y(\$30y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(csr_addr_i),
    .B(10'h3a1),
    .Y(\$31y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(csr_addr_i),
    .B(10'h3a2),
    .Y(\$32y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(csr_addr_i),
    .B(10'h3a3),
    .Y(\$33y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(csr_addr_i),
    .B(10'h3b0),
    .Y(\$34y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(csr_addr_i),
    .B(10'h3b1),
    .Y(\$35y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(csr_addr_i),
    .B(10'h3b2),
    .Y(\$36y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(csr_addr_i),
    .B(10'h3b3),
    .Y(\$37y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(csr_addr_i),
    .B(10'h3b4),
    .Y(\$38y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(csr_addr_i),
    .B(10'h3b5),
    .Y(\$39y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:254.47-254.97" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .B(illegal_csr_priv),
    .Y(\$4y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(csr_addr_i),
    .B(10'h3b6),
    .Y(\$40y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(csr_addr_i),
    .B(10'h3b7),
    .Y(\$41y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(csr_addr_i),
    .B(10'h3b8),
    .Y(\$42y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(csr_addr_i),
    .B(10'h3b9),
    .Y(\$43y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(csr_addr_i),
    .B(10'h3ba),
    .Y(\$44y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(csr_addr_i),
    .B(10'h3bb),
    .Y(\$45y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(csr_addr_i),
    .B(10'h3bc),
    .Y(\$46y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(csr_addr_i),
    .B(10'h3bd),
    .Y(\$47y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(csr_addr_i),
    .B(10'h3be),
    .Y(\$48y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(csr_addr_i),
    .B(10'h3bf),
    .Y(\$49y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:254.31-254.98" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(csr_access_i),
    .B(\$4y ),
    .Y(illegal_csr_insn_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:474.11-478.87" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd20),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A({ \$49y , \$48y , \$47y , \$46y , \$45y , \$44y , \$43y , \$42y , \$41y , \$40y , \$39y , \$38y , \$37y , \$36y , \$35y , \$34y , \$33y , \$32y , \$31y , \$30y  }),
    .Y(\$50y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:502.20-503.73" */
  \$mux  #(
    .WIDTH(32'd24)
  ) \$54  (
    .A(csr_wdata_int[31:8]),
    .B(boot_addr_i[31:8]),
    .S(csr_mtvec_init_i),
    .Y(mtvec_d[31:8])
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.16-534.43" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_wdata_int[12:11]),
    .B(2'h3),
    .Y(\$55y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.49-534.76" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(csr_wdata_int[12:11]),
    .Y(\$56y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:534.15-534.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$55y ),
    .B(\$56y ),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.16-560.40" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(csr_wdata_int[1:0]),
    .B(2'h3),
    .Y(\$59y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.46-560.70" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(csr_wdata_int[1:0]),
    .Y(\$60y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:560.15-560.71" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$59y ),
    .B(\$60y ),
    .Y(\$61y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.49" */
  \$demux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$67  (
    .A(1'h1),
    .S(csr_addr_i[4:0]),
    .Y(\$67y )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:704.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h3),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14095  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(priv_lvl_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14096 ),
    .Q(priv_lvl_q)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1303.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14099  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ csr_wdata_int[2], csr_wdata_int[0] }),
    .EN(mcountinhibit_we),
    .Q({ mcountinhibit_q[2], mcountinhibit_q[0] })
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14097  (
    .A({ csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14096 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13655  (
    .A(csr_wdata_int),
    .Y(\$200y )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13652  (
    .A(csr_addr_i[4:0]),
    .Y(\$13y [4:0])
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd137),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13330  (
    .A({ \$procmux$9842_CMP , \$procmux$9841_CMP , \$procmux$9840_CMP , \$procmux$9839_CMP , \$procmux$9838_CMP , \$procmux$9836_CMP , \$procmux$9835_CMP , \$procmux$9834_CMP , \$procmux$9832_CMP , \$procmux$9826_CMP , \$procmux$9798_CMP , \$procmux$9792_CMP , \$procmux$9791_CMP , \$procmux$9790_CMP , \$procmux$9789_CMP , \$procmux$9541_CMP , \$procmux$9471_CMP , \$procmux$9465_CMP , \$mcountinhibit_we$90 , \$mtval_en$83 , \$mcause_en$82 , \$mepc_en$81 , \$mscratch_en$80 , \$mie_en$79 , \$mstatus_en$78 , \$198y , \$193y , \$188y , \$45y , \$40y , \$35y , \$30y , \$48y , \$44y , \$43y , \$42y , \$41y , \$39y , \$38y , \$37y , \$36y , \$34y , \$33y , \$32y , \$31y , \$49y , \$47y , \$46y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13331 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13332  (
    .A({ \$dscratch1_en$89 , \$dscratch0_en$88 , \$depc_en$87 , \$dcsr_en$86  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13333 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13334  (
    .A({ \$procmux$9032_CMP , \$166y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13335 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$9031  (
    .A(\$162y ),
    .B({ \$164y , csr_wdata_i }),
    .S({ \$168y , \$auto$opt_reduce.cc:137:opt_pmux$13335  }),
    .Y(csr_wdata_int)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:723.21-723.49|rtl/cve2/cve2_cs_registers.sv:719.5-725.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$9032_CMP0  (
    .A(csr_op_i),
    .Y(\$procmux$9032_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$9042  (
    .A(\$mstatus_d$93 [5:2]),
    .B({ \$mstatus_d[5:2]$120 , mstatus_q[4], \$mstatus_d[4:2]$136  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mstatus_d[5:2])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9049  (
    .A(\$mcause_en$98 ),
    .B(nmi_mode_i),
    .Y(\$mcause_en$140 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$9056  (
    .A({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .B(mstack_cause_q),
    .S(nmi_mode_i),
    .Y(\$mcause_d$139 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9063  (
    .A(\$mepc_en$97 ),
    .B(nmi_mode_i),
    .Y(\$mepc_en$138 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9070  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(mstack_epc_q),
    .S(nmi_mode_i),
    .Y(\$mepc_d$137 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:677.11-677.33|rtl/cve2/cve2_cs_registers.sv:676.9-678.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9075  (
    .A(\$mstatus_d$93 [1]),
    .B(1'h0),
    .S(\$134y ),
    .Y(\$mstatus_d[1]$135 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9082  (
    .A(\$mstatus_d$93 [1]),
    .B(\$mstatus_d[1]$135 ),
    .S(csr_restore_mret_i),
    .Y(mstatus_d[1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:683.25-691.12|rtl/cve2/cve2_cs_registers.sv:683.9-696.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9086  (
    .A(3'h4),
    .B(mstack_q),
    .S(nmi_mode_i),
    .Y(\$mstatus_d[4:2]$136 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9093  (
    .A(1'h1),
    .B(\$mtval_en$99 ),
    .S(debug_mode_i),
    .Y(\$mtval_en$118 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9103  (
    .A(csr_mtval_i),
    .B(csr_wdata_int),
    .S(debug_mode_i),
    .Y(\$mtval_d$117 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9113  (
    .A(1'h1),
    .B(\$mcause_en$98 ),
    .S(debug_mode_i),
    .Y(\$mcause_en$116 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$9123  (
    .A(csr_mcause_i),
    .B({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .S(debug_mode_i),
    .Y(\$mcause_d$115 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9133  (
    .A(1'h1),
    .B(\$mepc_en$97 ),
    .S(debug_mode_i),
    .Y(\$mepc_en$114 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9143  (
    .A(\$exception_pc$109 ),
    .B({ csr_wdata_int[31:1], 1'h0 }),
    .S(debug_mode_i),
    .Y(\$mepc_d$113 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9153  (
    .A(1'h1),
    .B(\$mstatus_en$94 ),
    .S(debug_mode_i),
    .Y(\$mstatus_en$112 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:647.37-664.12|rtl/cve2/cve2_cs_registers.sv:647.18-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$9163  (
    .A({ 1'h0, mstatus_q[5], priv_lvl_q }),
    .B(\$mstatus_d$93 [5:2]),
    .S(debug_mode_i),
    .Y(\$mstatus_d[5:2]$111 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9176  (
    .A(\$10y ),
    .B(1'h0),
    .S(debug_csr_save_i),
    .Y(\$mstack_en$133 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9185  (
    .A(\$depc_en$103 ),
    .B(debug_csr_save_i),
    .Y(\$depc_en$132 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9194  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(\$exception_pc$109 ),
    .S(debug_csr_save_i),
    .Y(\$depc_d$131 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9203  (
    .A(\$dcsr_en$102 ),
    .B(debug_csr_save_i),
    .Y(\$dcsr_en$130 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9212  (
    .A(dcsr_q[8:6]),
    .B(debug_cause_i),
    .S(debug_csr_save_i),
    .Y(\$dcsr_d[8:6]$129 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9221  (
    .A(\$dcsr_d$101 [1:0]),
    .B(priv_lvl_q),
    .S(debug_csr_save_i),
    .Y(\$dcsr_d[1:0]$128 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9231  (
    .A(\$mtval_en$118 ),
    .B(\$mtval_en$99 ),
    .S(debug_csr_save_i),
    .Y(\$mtval_en$127 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9241  (
    .A(\$mtval_d$117 ),
    .B(csr_wdata_int),
    .S(debug_csr_save_i),
    .Y(\$mtval_d$126 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9251  (
    .A(\$mcause_en$116 ),
    .B(\$mcause_en$98 ),
    .S(debug_csr_save_i),
    .Y(\$mcause_en$125 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$9261  (
    .A(\$mcause_d$115 ),
    .B({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .S(debug_csr_save_i),
    .Y(\$mcause_d$124 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9271  (
    .A(\$mepc_en$114 ),
    .B(\$mepc_en$97 ),
    .S(debug_csr_save_i),
    .Y(\$mepc_en$123 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9281  (
    .A(\$mepc_d$113 ),
    .B({ csr_wdata_int[31:1], 1'h0 }),
    .S(debug_csr_save_i),
    .Y(\$mepc_d$122 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9291  (
    .A(\$mstatus_en$112 ),
    .B(\$mstatus_en$94 ),
    .S(debug_csr_save_i),
    .Y(\$mstatus_en$121 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:639.31-647.12|rtl/cve2/cve2_cs_registers.sv:639.9-664.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$9301  (
    .A(\$mstatus_d[5:2]$111 ),
    .B(\$mstatus_d$93 [5:2]),
    .S(debug_csr_save_i),
    .Y(\$mstatus_d[5:2]$120 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:628.13-628.36|rtl/cve2/cve2_cs_registers.sv:626.9-634.16" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9310  (
    .A(pc_id_i),
    .B(pc_if_i),
    .S(csr_save_if_i),
    .Y(\$exception_pc$109 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9319  (
    .A(csr_save_cause_i),
    .B(\$mstack_en$133 ),
    .Y(mstack_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9326  (
    .A(\$depc_en$103 ),
    .B(\$depc_en$132 ),
    .S(csr_save_cause_i),
    .Y(depc_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9333  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B(\$depc_d$131 ),
    .S(csr_save_cause_i),
    .Y(depc_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9340  (
    .A(\$dcsr_en$102 ),
    .B(\$dcsr_en$130 ),
    .S(csr_save_cause_i),
    .Y(dcsr_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9347  (
    .A(dcsr_q[8:6]),
    .B(\$dcsr_d[8:6]$129 ),
    .S(csr_save_cause_i),
    .Y(dcsr_d[8:6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9354  (
    .A(\$dcsr_d$101 [1:0]),
    .B(\$dcsr_d[1:0]$128 ),
    .S(csr_save_cause_i),
    .Y(dcsr_d[1:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9361  (
    .A(\$mtval_en$99 ),
    .B(\$mtval_en$127 ),
    .S(csr_save_cause_i),
    .Y(mtval_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:625.25-665.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9368  (
    .A(csr_wdata_int),
    .B(\$mtval_d$126 ),
    .S(csr_save_cause_i),
    .Y(mtval_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9373  (
    .A(\$mcause_en$98 ),
    .B({ \$mcause_en$125 , \$mcause_en$140  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mcause_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd7)
  ) \$procmux$9380  (
    .A({ csr_wdata_int[31], csr_wdata_int[5:0] }),
    .B({ \$mcause_d$124 , \$mcause_d$139  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mcause_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9387  (
    .A(\$mepc_en$97 ),
    .B({ \$mepc_en$123 , \$mepc_en$138  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mepc_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$9394  (
    .A({ csr_wdata_int[31:1], 1'h0 }),
    .B({ \$mepc_d$122 , \$mepc_d$137  }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mepc_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9401  (
    .A(\$mstatus_en$94 ),
    .B({ \$mstatus_en$121 , 1'h1 }),
    .S({ csr_save_cause_i, csr_restore_mret_i }),
    .Y(mstatus_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:671.27-697.10|rtl/cve2/cve2_cs_registers.sv:623.5-700.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$9418  (
    .A(2'h3),
    .B({ dcsr_q[1:0], mstatus_q[3:2] }),
    .S({ csr_restore_dret_i, csr_restore_mret_i }),
    .Y(priv_lvl_d)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:561.13-561.37|rtl/cve2/cve2_cs_registers.sv:560.11-562.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9437  (
    .A(csr_wdata_int[1:0]),
    .B(2'h3),
    .S(\$61y ),
    .Y(\$dcsr_d[1:0]$62 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9440_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b0),
    .Y(\$dcsr_en$86 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:535.13-535.40|rtl/cve2/cve2_cs_registers.sv:534.11-536.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$9457  (
    .A(csr_wdata_int[12:11]),
    .B(2'h3),
    .S(\$57y ),
    .Y(\$mstatus_d[3:2]$58 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9460_CMP0  (
    .A(csr_addr_i),
    .B(10'h300),
    .Y(\$mstatus_en$78 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9464  (
    .A(3'h0),
    .B(\$67y [2:0]),
    .S(\$procmux$9465_CTRL ),
    .Y(\$auto$wreduce.cc:514:run$13481 [2:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP0  (
    .A(csr_addr_i),
    .B(12'hb80),
    .Y(\$procmux$9465_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP1  (
    .A(csr_addr_i),
    .B(12'hb82),
    .Y(\$procmux$9465_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP10  (
    .A(csr_addr_i),
    .B(12'hb8b),
    .Y(\$procmux$9465_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP11  (
    .A(csr_addr_i),
    .B(12'hb8c),
    .Y(\$procmux$9465_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP12  (
    .A(csr_addr_i),
    .B(12'hb8d),
    .Y(\$procmux$9465_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP13  (
    .A(csr_addr_i),
    .B(12'hb8e),
    .Y(\$procmux$9465_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP14  (
    .A(csr_addr_i),
    .B(12'hb8f),
    .Y(\$procmux$9465_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP15  (
    .A(csr_addr_i),
    .B(12'hb90),
    .Y(\$procmux$9465_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP16  (
    .A(csr_addr_i),
    .B(12'hb91),
    .Y(\$procmux$9465_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP17  (
    .A(csr_addr_i),
    .B(12'hb92),
    .Y(\$procmux$9465_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP18  (
    .A(csr_addr_i),
    .B(12'hb93),
    .Y(\$procmux$9465_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP19  (
    .A(csr_addr_i),
    .B(12'hb94),
    .Y(\$procmux$9465_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP2  (
    .A(csr_addr_i),
    .B(12'hb83),
    .Y(\$procmux$9465_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP20  (
    .A(csr_addr_i),
    .B(12'hb95),
    .Y(\$procmux$9465_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP21  (
    .A(csr_addr_i),
    .B(12'hb96),
    .Y(\$procmux$9465_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP22  (
    .A(csr_addr_i),
    .B(12'hb97),
    .Y(\$procmux$9465_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP23  (
    .A(csr_addr_i),
    .B(12'hb98),
    .Y(\$procmux$9465_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP24  (
    .A(csr_addr_i),
    .B(12'hb99),
    .Y(\$procmux$9465_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP25  (
    .A(csr_addr_i),
    .B(12'hb9a),
    .Y(\$procmux$9465_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP26  (
    .A(csr_addr_i),
    .B(12'hb9b),
    .Y(\$procmux$9465_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP27  (
    .A(csr_addr_i),
    .B(12'hb9c),
    .Y(\$procmux$9465_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP28  (
    .A(csr_addr_i),
    .B(12'hb9d),
    .Y(\$procmux$9465_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP29  (
    .A(csr_addr_i),
    .B(12'hb9e),
    .Y(\$procmux$9465_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP3  (
    .A(csr_addr_i),
    .B(12'hb84),
    .Y(\$procmux$9465_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP30  (
    .A(csr_addr_i),
    .B(12'hb9f),
    .Y(\$procmux$9465_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP4  (
    .A(csr_addr_i),
    .B(12'hb85),
    .Y(\$procmux$9465_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP5  (
    .A(csr_addr_i),
    .B(12'hb86),
    .Y(\$procmux$9465_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP6  (
    .A(csr_addr_i),
    .B(12'hb87),
    .Y(\$procmux$9465_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP7  (
    .A(csr_addr_i),
    .B(12'hb88),
    .Y(\$procmux$9465_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP8  (
    .A(csr_addr_i),
    .B(12'hb89),
    .Y(\$procmux$9465_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:615.11-615.51|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9465_CMP9  (
    .A(csr_addr_i),
    .B(12'hb8a),
    .Y(\$procmux$9465_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9470  (
    .A(3'h0),
    .B(\$67y [2:0]),
    .S(\$procmux$9471_CTRL ),
    .Y(\$auto$wreduce.cc:514:run$13480 [2:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_ANY  (
    .A(\$procmux$9471_CMP ),
    .Y(\$procmux$9471_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP0  (
    .A(csr_addr_i),
    .B(12'hb00),
    .Y(\$procmux$9471_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP1  (
    .A(csr_addr_i),
    .B(12'hb02),
    .Y(\$procmux$9471_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP10  (
    .A(csr_addr_i),
    .B(12'hb0b),
    .Y(\$procmux$9471_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP11  (
    .A(csr_addr_i),
    .B(12'hb0c),
    .Y(\$procmux$9471_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP12  (
    .A(csr_addr_i),
    .B(12'hb0d),
    .Y(\$procmux$9471_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP13  (
    .A(csr_addr_i),
    .B(12'hb0e),
    .Y(\$procmux$9471_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP14  (
    .A(csr_addr_i),
    .B(12'hb0f),
    .Y(\$procmux$9471_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP15  (
    .A(csr_addr_i),
    .B(12'hb10),
    .Y(\$procmux$9471_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP16  (
    .A(csr_addr_i),
    .B(12'hb11),
    .Y(\$procmux$9471_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP17  (
    .A(csr_addr_i),
    .B(12'hb12),
    .Y(\$procmux$9471_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP18  (
    .A(csr_addr_i),
    .B(12'hb13),
    .Y(\$procmux$9471_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP19  (
    .A(csr_addr_i),
    .B(12'hb14),
    .Y(\$procmux$9471_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP2  (
    .A(csr_addr_i),
    .B(12'hb03),
    .Y(\$procmux$9471_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP20  (
    .A(csr_addr_i),
    .B(12'hb15),
    .Y(\$procmux$9471_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP21  (
    .A(csr_addr_i),
    .B(12'hb16),
    .Y(\$procmux$9471_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP22  (
    .A(csr_addr_i),
    .B(12'hb17),
    .Y(\$procmux$9471_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP23  (
    .A(csr_addr_i),
    .B(12'hb18),
    .Y(\$procmux$9471_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP24  (
    .A(csr_addr_i),
    .B(12'hb19),
    .Y(\$procmux$9471_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP25  (
    .A(csr_addr_i),
    .B(12'hb1a),
    .Y(\$procmux$9471_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP26  (
    .A(csr_addr_i),
    .B(12'hb1b),
    .Y(\$procmux$9471_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP27  (
    .A(csr_addr_i),
    .B(12'hb1c),
    .Y(\$procmux$9471_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP28  (
    .A(csr_addr_i),
    .B(12'hb1d),
    .Y(\$procmux$9471_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP29  (
    .A(csr_addr_i),
    .B(12'hb1e),
    .Y(\$procmux$9471_CMP [29])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP3  (
    .A(csr_addr_i),
    .B(12'hb04),
    .Y(\$procmux$9471_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP30  (
    .A(csr_addr_i),
    .B(12'hb1f),
    .Y(\$procmux$9471_CMP [30])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP4  (
    .A(csr_addr_i),
    .B(12'hb05),
    .Y(\$procmux$9471_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP5  (
    .A(csr_addr_i),
    .B(12'hb06),
    .Y(\$procmux$9471_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP6  (
    .A(csr_addr_i),
    .B(12'hb07),
    .Y(\$procmux$9471_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP7  (
    .A(csr_addr_i),
    .B(12'hb08),
    .Y(\$procmux$9471_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP8  (
    .A(csr_addr_i),
    .B(12'hb09),
    .Y(\$procmux$9471_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:602.11-602.50|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9471_CMP9  (
    .A(csr_addr_i),
    .B(12'hb0a),
    .Y(\$procmux$9471_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:590.28-590.52|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9478_CMP0  (
    .A(csr_addr_i),
    .B(10'h320),
    .Y(\$mcountinhibit_we$90 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:587.24-587.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9486_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b3),
    .Y(\$dscratch1_en$89 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:586.24-586.44|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9495_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b2),
    .Y(\$dscratch0_en$88 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:584.18-584.33|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9505_CMP0  (
    .A(csr_addr_i),
    .B(11'h7b1),
    .Y(\$depc_en$87 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:556.19-581.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd29)
  ) \$procmux$9528  (
    .A({ dcsr_q[31:9], dcsr_q[5:0] }),
    .B({ 16'h4000, csr_wdata_int[15], 1'h0, csr_wdata_int[13:12], 6'h00, csr_wdata_int[2], \$dcsr_d[1:0]$62  }),
    .S(\$dcsr_en$86 ),
    .Y({ \$dcsr_d$85 [31:9], \$dcsr_d$85 [5:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9540  (
    .A(csr_mtvec_init_i),
    .B(\$procmux$9541_CMP ),
    .Y(\$mtvec_en$84 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:554.20-554.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9541_CMP0  (
    .A(csr_addr_i),
    .B(10'h305),
    .Y(\$procmux$9541_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:551.20-551.36|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9554_CMP0  (
    .A(csr_addr_i),
    .B(10'h343),
    .Y(\$mtval_en$83 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:548.21-548.38|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9568_CMP0  (
    .A(csr_addr_i),
    .B(10'h342),
    .Y(\$mcause_en$82 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:545.19-545.34|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9583_CMP0  (
    .A(csr_addr_i),
    .B(10'h341),
    .Y(\$mepc_en$81 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:542.23-542.42|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9599_CMP0  (
    .A(csr_addr_i),
    .B(10'h340),
    .Y(\$mscratch_en$80 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:540.18-540.32|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9616_CMP0  (
    .A(csr_addr_i),
    .B(10'h304),
    .Y(\$mie_en$79 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:524.22-537.12|rtl/cve2/cve2_cs_registers.sv:522.7-619.14" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$9653  (
    .A(mstatus_q),
    .B({ csr_wdata_int[3], csr_wdata_int[7], \$mstatus_d[3:2]$58 , csr_wdata_int[17], csr_wdata_int[21] }),
    .S(\$mstatus_en$78 ),
    .Y(\$mstatus_d$77 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9658  (
    .A(3'h0),
    .B(\$auto$wreduce.cc:514:run$13481 [2:0]),
    .S(csr_we_int),
    .Y(mhpmcounterh_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9661  (
    .A(3'h0),
    .B(\$auto$wreduce.cc:514:run$13480 [2:0]),
    .S(csr_we_int),
    .Y(mhpmcounter_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9664  (
    .A(csr_we_int),
    .B(\$mcountinhibit_we$90 ),
    .Y(mcountinhibit_we)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9667  (
    .A(csr_we_int),
    .B(\$dscratch1_en$89 ),
    .Y(dscratch1_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9670  (
    .A(csr_we_int),
    .B(\$dscratch0_en$88 ),
    .Y(dscratch0_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9673  (
    .A(csr_we_int),
    .B(\$depc_en$87 ),
    .Y(\$depc_en$103 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9676  (
    .A(csr_we_int),
    .B(\$dcsr_en$86 ),
    .Y(\$dcsr_en$102 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd29)
  ) \$procmux$9679  (
    .A({ dcsr_q[31:9], dcsr_q[5:0] }),
    .B({ \$dcsr_d$85 [31:9], \$dcsr_d$85 [5:0] }),
    .S(csr_we_int),
    .Y({ dcsr_d[31:9], dcsr_d[5:2], \$dcsr_d$101 [1:0] })
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$9682  (
    .A(csr_mtvec_init_i),
    .B(\$mtvec_en$84 ),
    .S(csr_we_int),
    .Y(mtvec_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9685  (
    .A(csr_we_int),
    .B(\$mtval_en$83 ),
    .Y(\$mtval_en$99 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9688  (
    .A(csr_we_int),
    .B(\$mcause_en$82 ),
    .Y(\$mcause_en$98 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9691  (
    .A(csr_we_int),
    .B(\$mepc_en$81 ),
    .Y(\$mepc_en$97 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9694  (
    .A(csr_we_int),
    .B(\$mscratch_en$80 ),
    .Y(mscratch_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9697  (
    .A(csr_we_int),
    .B(\$mie_en$79 ),
    .Y(mie_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9700  (
    .A(csr_we_int),
    .B(\$mstatus_en$78 ),
    .Y(\$mstatus_en$94 )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:522.7-619.14|rtl/cve2/cve2_cs_registers.sv:521.5-620.8" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$9703  (
    .A(mstatus_q),
    .B(\$mstatus_d$77 ),
    .S(csr_we_int),
    .Y({ \$mstatus_d$93 [5:1], mstatus_d[0] })
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:479.9-479.28|rtl/cve2/cve2_cs_registers.sv:474.7-480.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9707  (
    .A(\$illegal_csr$29 ),
    .B(\$50y ),
    .Y(illegal_csr)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$9788  (
    .A(1'h1),
    .B({ \$10y , 1'h0 }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13333 , \$auto$opt_reduce.cc:137:opt_pmux$13331  }),
    .Y(\$illegal_csr$29 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:465.9-465.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9789_CMP0  (
    .A(csr_addr_i),
    .B(11'h7c1),
    .Y(\$procmux$9789_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:458.21-461.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9790_CMP0  (
    .A(csr_addr_i),
    .B(11'h7aa),
    .Y(\$procmux$9790_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:454.21-457.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9791_CMP0  (
    .A(csr_addr_i),
    .B(11'h7a8),
    .Y(\$procmux$9791_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:450.19-453.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$9792_CMP0  (
    .A(csr_addr_i),
    .B(11'h7a3),
    .Y(\$procmux$9792_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:434.9-434.61|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .Y_WIDTH(32'd1)
  ) \$procmux$9796_ANY  (
    .A(\$procmux$9465_CMP ),
    .Y(\$procmux$9465_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd29),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_ANY  (
    .A(\$procmux$9798_CMP ),
    .Y(\$procmux$9798_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP0  (
    .A(csr_addr_i),
    .B(10'h323),
    .Y(\$procmux$9798_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP1  (
    .A(csr_addr_i),
    .B(10'h324),
    .Y(\$procmux$9798_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP10  (
    .A(csr_addr_i),
    .B(10'h32d),
    .Y(\$procmux$9798_CMP [10])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP11  (
    .A(csr_addr_i),
    .B(10'h32e),
    .Y(\$procmux$9798_CMP [11])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP12  (
    .A(csr_addr_i),
    .B(10'h32f),
    .Y(\$procmux$9798_CMP [12])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP13  (
    .A(csr_addr_i),
    .B(10'h330),
    .Y(\$procmux$9798_CMP [13])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP14  (
    .A(csr_addr_i),
    .B(10'h331),
    .Y(\$procmux$9798_CMP [14])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP15  (
    .A(csr_addr_i),
    .B(10'h332),
    .Y(\$procmux$9798_CMP [15])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP16  (
    .A(csr_addr_i),
    .B(10'h333),
    .Y(\$procmux$9798_CMP [16])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP17  (
    .A(csr_addr_i),
    .B(10'h334),
    .Y(\$procmux$9798_CMP [17])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP18  (
    .A(csr_addr_i),
    .B(10'h335),
    .Y(\$procmux$9798_CMP [18])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP19  (
    .A(csr_addr_i),
    .B(10'h336),
    .Y(\$procmux$9798_CMP [19])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP2  (
    .A(csr_addr_i),
    .B(10'h325),
    .Y(\$procmux$9798_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP20  (
    .A(csr_addr_i),
    .B(10'h337),
    .Y(\$procmux$9798_CMP [20])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP21  (
    .A(csr_addr_i),
    .B(10'h338),
    .Y(\$procmux$9798_CMP [21])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP22  (
    .A(csr_addr_i),
    .B(10'h339),
    .Y(\$procmux$9798_CMP [22])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP23  (
    .A(csr_addr_i),
    .B(10'h33a),
    .Y(\$procmux$9798_CMP [23])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP24  (
    .A(csr_addr_i),
    .B(10'h33b),
    .Y(\$procmux$9798_CMP [24])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP25  (
    .A(csr_addr_i),
    .B(10'h33c),
    .Y(\$procmux$9798_CMP [25])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP26  (
    .A(csr_addr_i),
    .B(10'h33d),
    .Y(\$procmux$9798_CMP [26])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP27  (
    .A(csr_addr_i),
    .B(10'h33e),
    .Y(\$procmux$9798_CMP [27])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP28  (
    .A(csr_addr_i),
    .B(10'h33f),
    .Y(\$procmux$9798_CMP [28])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP3  (
    .A(csr_addr_i),
    .B(10'h326),
    .Y(\$procmux$9798_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP4  (
    .A(csr_addr_i),
    .B(10'h327),
    .Y(\$procmux$9798_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP5  (
    .A(csr_addr_i),
    .B(10'h328),
    .Y(\$procmux$9798_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP6  (
    .A(csr_addr_i),
    .B(10'h329),
    .Y(\$procmux$9798_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP7  (
    .A(csr_addr_i),
    .B(10'h32a),
    .Y(\$procmux$9798_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP8  (
    .A(csr_addr_i),
    .B(10'h32b),
    .Y(\$procmux$9798_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:408.9-408.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9798_CMP9  (
    .A(csr_addr_i),
    .B(10'h32c),
    .Y(\$procmux$9798_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:328.16-334.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9826_CMP0  (
    .A(csr_addr_i),
    .B(10'h344),
    .Y(\$procmux$9826_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:310.9-310.28|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9832_CMP0  (
    .A(csr_addr_i),
    .B(10'h306),
    .Y(\$procmux$9832_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:297.17-297.44|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9834_CMP0  (
    .A(csr_addr_i),
    .B(10'h301),
    .Y(\$procmux$9834_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9835_CMP0  (
    .A(csr_addr_i),
    .B(10'h30a),
    .Y(\$procmux$9835_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:294.34-294.53|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9835_CMP1  (
    .A(csr_addr_i),
    .B(10'h31a),
    .Y(\$procmux$9835_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:290.21-290.40|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$9836_CMP0  (
    .A(csr_addr_i),
    .B(10'h310),
    .Y(\$procmux$9836_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:277.23-277.60|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9838_CMP0  (
    .A(csr_addr_i),
    .B(12'hf15),
    .Y(\$procmux$9838_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:275.20-275.46|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9839_CMP0  (
    .A(csr_addr_i),
    .B(12'hf14),
    .Y(\$procmux$9839_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:273.19-273.52|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9840_CMP0  (
    .A(csr_addr_i),
    .B(12'hf13),
    .Y(\$procmux$9840_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:271.20-271.54|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9841_CMP0  (
    .A(csr_addr_i),
    .B(12'hf12),
    .Y(\$procmux$9841_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:269.22-269.58|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$9842_CMP0  (
    .A(csr_addr_i),
    .B(12'hf11),
    .Y(\$procmux$9842_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_cs_registers.sv:446.19-449.10|rtl/cve2/cve2_cs_registers.sv:267.5-471.12" */
  \$pmux  #(
    .S_WIDTH(32'd23),
    .WIDTH(32'd32)
  ) \$procmux$9848  (
    .A(32'd0),
    .B({ 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040100104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, mtvec_q, mepc_q, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, depc_q, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit_q[2], 1'h0, mcountinhibit_q[0], 29'h00000000, \$15y [2], 1'h0, \$15y [0], \$20y [31:0], \$20y [63:32], 31'h00000000, \gen_trigger_regs.tselect_q , 29'h05000209, \gen_trigger_regs.tmatch_control_q , 2'h0, \gen_trigger_regs.tmatch_value_q  }),
    .S({ \$procmux$9842_CMP , \$procmux$9841_CMP , \$procmux$9839_CMP , \$mstatus_en$78 , \$procmux$9834_CMP , \$mie_en$79 , \$mscratch_en$80 , \$procmux$9541_CMP , \$mepc_en$81 , \$mcause_en$82 , \$mtval_en$83 , \$procmux$9826_CMP , \$dcsr_en$86 , \$depc_en$87 , \$dscratch0_en$88 , \$dscratch1_en$89 , \$mcountinhibit_we$90 , \$procmux$9798_CTRL , \$procmux$9471_CTRL , \$procmux$9465_CTRL , \$188y , \$193y , \$198y  }),
    .Y(csr_rdata_o)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1372.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_control_q ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int[2]),
    .wr_en_i(\gen_trigger_regs.tmatch_control_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1385.9" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  \gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tmatch_value_q ),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(\gen_trigger_regs.tmatch_value_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1358.7" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr  \gen_trigger_regs.u_tselect_csr  (
    .clk_i(clk_i),
    .rd_data_o(\gen_trigger_regs.tselect_q ),
    .rst_ni(rst_ni),
    .wr_data_i(\gen_trigger_regs.tselect_d ),
    .wr_en_i(\gen_trigger_regs.tselect_we )
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1210.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$180y ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:1226.5" */
  \cve2_counter$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$183y ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:871.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:885.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(depc_q),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:899.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:913.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:824.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:778.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(mepc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:796.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] }),
    .wr_en_i(mie_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:810.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:956.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:928.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:942.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_q),
    .wr_en_i(mstack_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:764.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:838.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  /* src = "rtl/cve2/cve2_cs_registers.sv:851.5" */
  \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(mtvec_q),
    .rst_ni(rst_ni),
    .wr_data_i({ mtvec_d[31:8], 8'h01 }),
    .wr_en_i(mtvec_en)
  );
  assign \$13y [5] = 1'h1;
  assign { \$15y [31:3], \$15y [1] } = 30'h00000000;
  assign \$auto$wreduce.cc:514:run$13480 [31:3] = 29'hxxxxxxxx;
  assign \$auto$wreduce.cc:514:run$13481 [31:3] = 29'hxxxxxxxx;
  assign \$dcsr_d$101 [31:2] = { dcsr_d[31:9], dcsr_q[8:6], dcsr_d[5:2] };
  assign \$dcsr_d$85 [8:6] = dcsr_q[8:6];
  assign \$mstatus_d$93 [0] = mstatus_d[0];
  assign csr_addr = csr_addr_i;
  assign csr_depc_o = depc_q;
  assign csr_mepc_o = mepc_q;
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_mtvec_o = mtvec_q;
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign csr_rdata_int = csr_rdata_o;
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign \g_mcountinhibit_reduced.unused_mhphcounter_incr  = { div_wait_i, wfi_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i };
  assign \g_mcountinhibit_reduced.unused_mhphcounter_we  = 29'hxxxxxxxx;
  assign \g_mcountinhibit_reduced.unused_mhphcounterh_we  = 29'hxxxxxxxx;
  assign \gen_trigger_regs.selected_tmatch_control  = \gen_trigger_regs.tmatch_control_q ;
  assign \gen_trigger_regs.selected_tmatch_value  = \gen_trigger_regs.tmatch_value_q ;
  assign \gen_trigger_regs.tmatch_control_d  = csr_wdata_int[2];
  assign \gen_trigger_regs.tmatch_value_d  = csr_wdata_int;
  assign \gen_trigger_regs.trigger_match  = trigger_match_o;
  assign mcountinhibit = { 29'h1fffffff, mcountinhibit_q[2], 1'h0, mcountinhibit_q[0] };
  assign mcountinhibit_q[1] = 1'h0;
  assign mhpmcounter[1983:0] = { 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 };
  assign mhpmcounter_idx = csr_addr_i[4:0];
  assign mhpmcounter_incr = { div_wait_i, wfi_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i, instr_ret_i, 2'h1 };
  assign mhpmevent = 1024'h0000000100000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign mie_d = { csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] };
  assign mip = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i };
  assign mstack_cause_d = mcause_q;
  assign mstack_d = mstatus_q[4:2];
  assign mstack_epc_d = mepc_q;
  assign mtvec_d[7:0] = 8'h01;
  assign pmp_addr_rdata = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign pmp_cfg_rdata = 128'h00000000000000000000000000000000;
  assign pmp_mseccfg = 3'h0;
  assign priv_mode_id_o = priv_lvl_q;
  assign tmatch_control_rdata = { \gen_trigger_regs.tmatch_control_q , 2'h0 };
  assign tmatch_value_rdata = \gen_trigger_regs.tmatch_value_q ;
  assign tselect_rdata = { 31'h00000000, \gen_trigger_regs.tselect_q  };
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_addr = csr_addr_i[7:5];
  assign unused_mhpmcounter_incr_1 = 1'h0;
  assign unused_mhpmcounter_we_1 = mhpmcounter_we[1];
  assign unused_mhpmcounterh_we_1 = mhpmcounterh_we[1];
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_control_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14100  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.g_dbg_tmatch_reg[0].u_tmatch_value_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14101  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.gen_trigger_regs.u_tselect_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output rd_data_o;
  wire rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input wr_data_i;
  wire wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14102  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd1073741827),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14103  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14104  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14105  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14106  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14107  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14108  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [18:0] rd_data_o;
  wire [18:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [18:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(19'h00000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd19)
  ) \$auto$ff.cc:266:slice$14109  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14110  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [6:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14111  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [2:0] rd_data_o;
  wire [2:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [2:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h4),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14112  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14113  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [5:0] rd_data_o;
  wire [5:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [5:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h0c),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$14114  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14115  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_csr.sv:11.8" */
module \cve2_csr$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  /* src = "rtl/cve2/cve2_csr.sv:16.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_csr.sv:21.28" */
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  /* src = "rtl/cve2/cve2_csr.sv:23.28" */
  output rd_error_o;
  wire rd_error_o;
  /* src = "rtl/cve2/cve2_csr.sv:26.21" */
  wire [31:0] rdata_q;
  /* src = "rtl/cve2/cve2_csr.sv:17.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_csr.sv:19.28" */
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  /* src = "rtl/cve2/cve2_csr.sv:20.28" */
  input wr_en_i;
  wire wr_en_i;
  /* src = "rtl/cve2/cve2_csr.sv:28.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14116  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data_i),
    .EN(wr_en_i),
    .Q(rdata_q)
  );
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

/* src = "rtl/cve2/cve2_decoder.sv:16.8" */
module \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, mac_en_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o
, multdiv_signed_mode_o, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$136y ;
  wire \$137y ;
  wire \$152y ;
  wire \$15y ;
  wire \$21y ;
  wire \$25y ;
  wire \$26y ;
  wire \$43y ;
  wire \$4y ;
  wire \$59y ;
  wire \$5y ;
  wire \$66y ;
  wire \$67y ;
  wire \$68y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/cve2/cve2_decoder.sv:721.9-733.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$125 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  wire [1:0] \$alu_op_a_mux_sel_o$150 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12" */
  wire [1:0] \$alu_op_a_mux_sel_o$156 ;
  /* src = "rtl/cve2/cve2_decoder.sv:773.9-777.12" */
  wire \$alu_op_b_mux_sel_o$134 ;
  wire [5:0] \$alu_operator_o$127 ;
  /* src = "rtl/cve2/cve2_decoder.sv:750.9-761.12" */
  wire [6:0] \$alu_operator_o$129 ;
  wire [5:0] \$alu_operator_o$138 ;
  wire [5:0] \$alu_operator_o$139 ;
  /* src = "rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  wire [6:0] \$alu_operator_o$141 ;
  /* src = "rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  wire [6:0] \$alu_operator_o$142 ;
  /* src = "rtl/cve2/cve2_decoder.sv:940.9-1127.12" */
  wire [6:0] \$alu_operator_o$145 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  wire [6:0] \$alu_operator_o$149 ;
  /* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  wire [6:0] \$alu_operator_o$46 ;
  /* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  wire [6:0] \$alu_operator_o$51 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13337 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13339 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13341 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13343 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13345 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13347 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13349 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13351 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13353 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13355 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13357 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13359 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13361 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13363 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13365 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13369 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13371 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13373 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13375 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13377 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13407 ;
  /* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  wire \$branch_in_dec_o$109 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$csr_access_o$85 ;
  /* src = "rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  wire \$csr_illegal$72 ;
  /* src = "rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  wire [1:0] \$csr_op$73 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire [1:0] \$csr_op$77 ;
  /* src = "rtl/cve2/cve2_decoder.sv:305.9-310.16" */
  wire [1:0] \$data_type_o$20 ;
  /* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  wire \$data_we_o$105 ;
  /* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  wire \$dret_insn_o$63 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$dret_insn_o$80 ;
  /* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  wire \$ebrk_insn_o$61 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$ebrk_insn_o$78 ;
  /* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  wire \$ecall_insn_o$64 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$ecall_insn_o$81 ;
  /* src = "rtl/cve2/cve2_decoder.sv:276.9-284.16" */
  wire \$illegal_insn$17 ;
  /* src = "rtl/cve2/cve2_decoder.sv:305.9-310.16" */
  wire \$illegal_insn$19 ;
  /* src = "rtl/cve2/cve2_decoder.sv:322.9-334.16" */
  wire \$illegal_insn$23 ;
  /* src = "rtl/cve2/cve2_decoder.sv:378.17-393.24" */
  wire \$illegal_insn$29 ;
  /* src = "rtl/cve2/cve2_decoder.sv:362.13-396.20" */
  wire \$illegal_insn$30 ;
  /* src = "rtl/cve2/cve2_decoder.sv:403.15-440.22" */
  wire \$illegal_insn$40 ;
  /* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16" */
  wire \$illegal_insn$41 ;
  /* src = "rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  wire \$illegal_insn$42 ;
  /* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  wire \$illegal_insn$44 ;
  /* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  wire \$illegal_insn$49 ;
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  wire \$illegal_insn$55 ;
  /* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  wire \$illegal_insn$60 ;
  /* src = "rtl/cve2/cve2_decoder.sv:627.11-629.14" */
  wire \$illegal_insn$69 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$illegal_insn$74 ;
  /* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  wire \$illegal_insn$86 ;
  /* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  wire [2:0] \$imm_b_mux_sel_o$148 ;
  /* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  wire \$jump_in_dec_o$108 ;
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  wire \$jump_in_dec_o$58 ;
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  wire \$jump_set_o$57 ;
  /* src = "rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  wire \$jump_set_o$95 ;
  /* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  wire \$mac_en_o$45 ;
  /* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  wire \$mac_en_o$50 ;
  /* src = "rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  wire \$mret_insn_o$62 ;
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  wire \$mret_insn_o$79 ;
  /* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  wire [1:0] \$multdiv_operator_o$47 ;
  /* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  wire [1:0] \$multdiv_operator_o$52 ;
  /* src = "rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  wire [1:0] \$multdiv_signed_mode_o$48 ;
  /* src = "rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  wire [1:0] \$multdiv_signed_mode_o$53 ;
  wire \$procmux$3409_CMP ;
  wire \$procmux$3442_CMP ;
  wire \$procmux$3527_CMP ;
  wire \$procmux$3595_CMP ;
  wire \$procmux$3596_CMP ;
  wire \$procmux$3597_CMP ;
  wire \$procmux$3598_CMP ;
  wire \$procmux$3599_CMP ;
  wire \$procmux$3600_CMP ;
  wire \$procmux$3601_CMP ;
  wire \$procmux$3602_CMP ;
  wire \$procmux$3603_CMP ;
  wire \$procmux$3604_CMP ;
  wire \$procmux$3605_CMP ;
  wire \$procmux$3606_CMP ;
  wire \$procmux$3607_CMP ;
  wire \$procmux$3608_CMP ;
  wire \$procmux$3609_CMP ;
  wire \$procmux$3610_CMP ;
  wire \$procmux$3611_CMP ;
  wire \$procmux$3612_CMP ;
  wire \$procmux$3651_CMP ;
  wire \$procmux$3653_CMP ;
  wire \$procmux$3696_CMP ;
  wire \$procmux$3697_CMP ;
  wire \$procmux$3698_CMP ;
  wire \$procmux$3699_CMP ;
  wire \$procmux$3700_CMP ;
  wire \$procmux$3715_CMP ;
  wire \$procmux$3741_CMP ;
  wire \$procmux$3818_CMP ;
  wire \$procmux$3877_CMP ;
  wire \$procmux$3963_CMP ;
  wire \$procmux$3964_CMP ;
  wire \$procmux$3983_CMP ;
  wire \$procmux$4042_CMP ;
  wire \$procmux$4043_CMP ;
  wire \$procmux$4044_CMP ;
  wire \$procmux$4049_CMP ;
  wire \$procmux$4090_Y ;
  wire \$procmux$4165_Y ;
  wire \$procmux$4179_Y ;
  wire \$procmux$4240_CMP ;
  wire [9:0] \$procmux$4290_CMP ;
  wire \$procmux$4290_CTRL ;
  wire \$procmux$4295_CMP ;
  wire \$procmux$4302_CMP ;
  wire \$procmux$4303_CMP ;
  wire \$procmux$4304_CMP ;
  wire \$procmux$4305_CMP ;
  wire \$procmux$4316_CMP ;
  wire \$procmux$4318_CMP ;
  wire \$procmux$4320_CMP ;
  wire \$procmux$4430_CMP ;
  wire \$procmux$4432_CMP ;
  wire [1:0] \$procmux$4509_CMP ;
  wire \$procmux$4509_CTRL ;
  wire \$procmux$4539_CMP ;
  /* unused_bits = "1 2" */
  wire [5:0] \$procmux$4584_CMP ;
  wire \$procmux$4600_CMP ;
  wire \$procmux$4613_CMP ;
  wire \$procmux$4686_CTRL ;
  wire \$procmux$4703_CMP ;
  wire \$procmux$4749_CMP ;
  wire \$procmux$4925_Y ;
  wire \$procmux$4933_CMP ;
  wire \$procmux$4934_CMP ;
  /* src = "rtl/cve2/cve2_decoder.sv:70.32" */
  output alu_multicycle_o;
  wire alu_multicycle_o;
  /* src = "rtl/cve2/cve2_decoder.sv:66.32" */
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:68.32" */
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:65.32" */
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:95.32" */
  output branch_in_dec_o;
  wire branch_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:21.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_decoder.sv:82.32" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_decoder.sv:117.16" */
  wire [1:0] csr_op;
  /* src = "rtl/cve2/cve2_decoder.sv:83.32" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_decoder.sv:86.32" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_decoder.sv:90.32" */
  output data_sign_extension_o;
  wire data_sign_extension_o;
  /* src = "rtl/cve2/cve2_decoder.sv:88.32" */
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:87.32" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:74.32" */
  output div_en_o;
  wire div_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:76.32" */
  output div_sel_o;
  wire div_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:29.32" */
  output dret_insn_o;
  wire dret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:26.32" */
  output ebrk_insn_o;
  wire ebrk_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:30.32" */
  output ecall_insn_o;
  wire ecall_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:152.11" */
  /* unused_bits = "0" */
  wire \gen_no_rs3_flop.unused_clk ;
  /* src = "rtl/cve2/cve2_decoder.sv:153.11" */
  /* unused_bits = "0" */
  wire \gen_no_rs3_flop.unused_rst_n ;
  /* src = "rtl/cve2/cve2_decoder.sv:40.32" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_decoder.sv:100.16" */
  wire illegal_insn;
  /* src = "rtl/cve2/cve2_decoder.sv:25.32" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:101.16" */
  wire illegal_reg_rv32e;
  /* src = "rtl/cve2/cve2_decoder.sv:43.33" */
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:44.33" */
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:47.33" */
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:45.33" */
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:49.33" */
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:46.33" */
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:48.33" */
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:105.16" */
  wire [31:0] instr;
  /* src = "rtl/cve2/cve2_decoder.sv:106.16" */
  /* unused_bits = "7 8 9 10 11 15 16 17 18 19 20 21 22 23 24" */
  wire [31:0] instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:35.32" */
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_decoder.sv:112.15" */
  wire [4:0] instr_rd;
  /* src = "rtl/cve2/cve2_decoder.sv:37.32" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_decoder.sv:36.32" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_decoder.sv:109.15" */
  wire [4:0] instr_rs1;
  /* src = "rtl/cve2/cve2_decoder.sv:110.15" */
  wire [4:0] instr_rs2;
  /* src = "rtl/cve2/cve2_decoder.sv:111.15" */
  wire [4:0] instr_rs3;
  /* src = "rtl/cve2/cve2_decoder.sv:94.32" */
  output jump_in_dec_o;
  wire jump_in_dec_o;
  /* src = "rtl/cve2/cve2_decoder.sv:32.32" */
  output jump_set_o;
  wire jump_set_o;
  /* src = "rtl/cve2/cve2_decoder.sv:61.32" */
  output mac_en_o;
  wire mac_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:27.32" */
  output mret_insn_o;
  wire mret_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:73.32" */
  output mult_en_o;
  wire mult_en_o;
  /* src = "rtl/cve2/cve2_decoder.sv:75.32" */
  output mult_sel_o;
  wire mult_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:78.32" */
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  /* src = "rtl/cve2/cve2_decoder.sv:79.32" */
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  /* src = "rtl/cve2/cve2_decoder.sv:119.16" */
  wire [6:0] opcode;
  /* src = "rtl/cve2/cve2_decoder.sv:120.16" */
  wire [6:0] opcode_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:55.32" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:56.32" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:58.32" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_decoder.sv:59.32" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_decoder.sv:57.32" */
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  /* src = "rtl/cve2/cve2_decoder.sv:53.32" */
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  /* src = "rtl/cve2/cve2_decoder.sv:103.16" */
  wire rf_we;
  /* src = "rtl/cve2/cve2_decoder.sv:54.32" */
  output rf_we_o;
  wire rf_we_o;
  /* src = "rtl/cve2/cve2_decoder.sv:22.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_decoder.sv:107.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9" */
  wire [9:0] unused_instr_alu;
  /* src = "rtl/cve2/cve2_decoder.sv:114.16" */
  wire use_rs3_d;
  /* src = "rtl/cve2/cve2_decoder.sv:115.16" */
  wire use_rs3_q;
  /* src = "rtl/cve2/cve2_decoder.sv:31.32" */
  output wfi_insn_o;
  wire wfi_insn_o;
  /* src = "rtl/cve2/cve2_decoder.sv:50.33" */
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  /* src = "rtl/cve2/cve2_decoder.sv:924.19-924.48" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(instr_rdata_alu_i[31:27]),
    .Y(\$136y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:926.28-926.57" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(instr_rdata_alu_i[31:27]),
    .B(4'h8),
    .Y(\$137y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:266.13-266.33" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(instr_rdata_i[14:12]),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:1154.13-1154.39" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(instr_rdata_alu_i[14:12]),
    .Y(\$152y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:363.42-363.63" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(instr_rdata_i[26:25]),
    .Y(\$25y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:363.41-363.78" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(\$25y ),
    .Y(\$26y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:193.10-193.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(csr_op),
    .B(2'h2),
    .Y(\$4y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:452.13-452.55" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A({ instr_rdata_i[26], instr_rdata_i[13:12] }),
    .B(3'h5),
    .Y(\$43y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:193.34-193.56" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(csr_op),
    .B(2'h3),
    .Y(\$5y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:602.13-602.35" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(instr_rdata_i[14:12]),
    .Y(\$59y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:193.10-193.56" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$4y ),
    .B(\$5y ),
    .Y(\$6y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:627.15-627.32" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(instr_rdata_i[19:15]),
    .Y(\$66y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:627.36-627.52" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(instr_rdata_i[11:7]),
    .Y(\$67y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:627.15-627.52" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\$66y ),
    .B(\$67y ),
    .Y(\$68y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:194.9-194.24" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(instr_rdata_i[19:15]),
    .Y(\$7y )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:193.9-194.24" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$6y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13336  (
    .A({ \$procmux$4090_Y , \$ecall_insn_o$64 , \$dret_insn_o$63 , \$mret_insn_o$62 , \$ebrk_insn_o$61  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13337 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13338  (
    .A({ \$jump_in_dec_o$58 , \$59y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13339 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13340  (
    .A({ \$procmux$4305_CMP , \$procmux$4303_CMP , \$procmux$4302_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13341 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13342  (
    .A({ \$procmux$4316_CMP , \$procmux$4302_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13343 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13344  (
    .A({ \$procmux$4318_CMP , \$procmux$4303_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13345 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13346  (
    .A({ \$procmux$4320_CMP , \$procmux$4305_CMP , \$procmux$4304_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13347 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13348  (
    .A({ \$procmux$4613_CMP , \$procmux$4044_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13349 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13350  (
    .A({ \$procmux$4613_CMP , \$procmux$4044_CMP , \$procmux$4043_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13351 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13352  (
    .A({ \$imm_b_mux_sel_o$148 [2], \$152y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13353 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13354  (
    .A({ \$procmux$3964_CMP , \$procmux$3715_CMP , \$procmux$3653_CMP , \$procmux$3527_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13355 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13356  (
    .A({ \$procmux$3963_CMP , \$procmux$3877_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13357 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13362  (
    .A({ \$procmux$3983_CMP , \$procmux$3964_CMP , \$procmux$3963_CMP , \$procmux$3877_CMP , \$procmux$3818_CMP , \$procmux$3715_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13363 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13364  (
    .A({ \$procmux$3612_CMP , \$procmux$3602_CMP , \$procmux$3601_CMP , \$procmux$3600_CMP , \$procmux$3599_CMP , \$procmux$3598_CMP , \$procmux$3597_CMP , \$procmux$3596_CMP , \$procmux$3595_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13365 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13366  (
    .A({ \$procmux$4295_CMP , \$branch_in_dec_o$109 , \$data_we_o$105  }),
    .Y(rf_ren_b_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13368  (
    .A({ \$procmux$4703_CMP , \$procmux$4600_CMP , \$procmux$4432_CMP , \$procmux$4295_CMP , \$branch_in_dec_o$109 , \$data_we_o$105  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13369 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13370  (
    .A({ \$procmux$3983_CMP , \$procmux$3963_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13371 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13372  (
    .A({ \$procmux$4934_CMP , \$procmux$4933_CMP , \$procmux$4432_CMP , \$procmux$4295_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13373 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13374  (
    .A({ \$procmux$4934_CMP , \$procmux$4933_CMP , \$procmux$4749_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13375 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13376  (
    .A({ \$procmux$4044_CMP , \$procmux$4043_CMP , \$procmux$4042_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13377 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13406  (
    .A({ \$procmux$3818_CMP , \$procmux$3741_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13407 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13408  (
    .A({ \$procmux$4600_CMP , \$data_we_o$105  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13361 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13412  (
    .A({ \$procmux$4749_CMP , \$procmux$4703_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13359 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3409_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h73),
    .Y(\$procmux$3409_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.41-1158.12|rtl/cve2/cve2_decoder.sv:1154.9-1170.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$3419  (
    .A(instr_rdata_alu_i[14]),
    .B(1'h0),
    .S(\$152y ),
    .Y(\$alu_op_a_mux_sel_o$156 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3442_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(4'hf),
    .Y(\$procmux$3442_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$3446  (
    .A(2'h3),
    .B(4'h2),
    .S({ \$152y , \$imm_b_mux_sel_o$148 [2] }),
    .Y(\$alu_op_a_mux_sel_o$150 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3447_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(1'h1),
    .Y(\$imm_b_mux_sel_o$148 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1142.19-1148.14|rtl/cve2/cve2_decoder.sv:1135.9-1150.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3454  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13353 ),
    .Y(\$alu_operator_o$149 [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:936.18-1128.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3527_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h33),
    .Y(\$procmux$3527_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.36-1123.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd6)
  ) \$procmux$3594  (
    .A(6'h1c),
    .B(60'h05b08310a248840),
    .S({ \$procmux$3611_CMP , \$procmux$3610_CMP , \$procmux$3609_CMP , \$procmux$3608_CMP , \$procmux$3607_CMP , \$procmux$3606_CMP , \$procmux$3605_CMP , \$procmux$3604_CMP , \$procmux$3603_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13365  }),
    .Y({ \$alu_operator_o$142 [6:5], \$alu_operator_o$142 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1120.36-1123.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3595_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hf),
    .Y(\$procmux$3595_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1116.36-1119.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3596_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'he),
    .Y(\$procmux$3596_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1112.36-1115.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3597_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hd),
    .Y(\$procmux$3597_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1108.36-1111.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3598_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hc),
    .Y(\$procmux$3598_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1104.36-1107.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3599_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'hb),
    .Y(\$procmux$3599_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1100.36-1103.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3600_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'ha),
    .Y(\$procmux$3600_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1096.36-1099.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3601_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'h9),
    .Y(\$procmux$3601_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1092.36-1095.16|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$3602_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(4'h8),
    .Y(\$procmux$3602_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:997.36-997.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$3603_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(10'h200),
    .Y(\$procmux$3603_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:994.36-994.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$3604_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(9'h105),
    .Y(\$procmux$3604_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:993.36-993.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3605_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h5),
    .Y(\$procmux$3605_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:992.36-992.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3606_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(1'h1),
    .Y(\$procmux$3606_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:991.36-991.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3607_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h7),
    .Y(\$procmux$3607_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:990.36-990.60|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3608_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h6),
    .Y(\$procmux$3608_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:989.36-989.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3609_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(3'h4),
    .Y(\$procmux$3609_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:987.36-987.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3610_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(2'h2),
    .Y(\$procmux$3610_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:986.36-986.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$3611_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .B(9'h100),
    .Y(\$procmux$3611_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:985.36-985.61|rtl/cve2/cve2_decoder.sv:983.11-1126.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$3612_CMP0  (
    .A({ instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] }),
    .Y(\$procmux$3612_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:941.11-981.14|rtl/cve2/cve2_decoder.sv:940.9-1127.12" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$3641  (
    .A({ \$alu_operator_o$142 [6:5], \$alu_operator_o$142 [3:0] }),
    .B(6'h1c),
    .S(instr_rdata_alu_i[26]),
    .Y({ \$alu_operator_o$145 [6:5], \$alu_operator_o$145 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:889.13-929.16|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3651_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h5),
    .Y(\$procmux$3651_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:808.22-934.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3653_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(5'h13),
    .Y(\$procmux$3653_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:927.17-927.42|rtl/cve2/cve2_decoder.sv:926.24-928.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3658  (
    .A(\$137y ),
    .Y(\$alu_operator_o$138 [5])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:925.17-925.42|rtl/cve2/cve2_decoder.sv:924.15-928.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$3673  (
    .A({ \$alu_operator_o$138 [5], 1'h0 }),
    .B(2'h1),
    .S(\$136y ),
    .Y({ \$alu_operator_o$139 [5], \$alu_operator_o$139 [0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:889.13-929.16|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd5)
  ) \$procmux$3693  (
    .A(5'h00),
    .B({ 30'h37c10c8a, \$alu_operator_o$139 [5], 1'h1, \$alu_operator_o$139 [5], 1'h0, \$alu_operator_o$139 [0] }),
    .S({ \$procmux$3700_CMP , \$procmux$3699_CMP , \$procmux$3698_CMP , \$procmux$3697_CMP , \$procmux$3696_CMP , \$imm_b_mux_sel_o$148 [2], \$procmux$3651_CMP  }),
    .Y({ \$alu_operator_o$141 [5], \$alu_operator_o$141 [3:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:819.19-819.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3696_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h7),
    .Y(\$procmux$3696_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:818.19-818.43|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3697_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h6),
    .Y(\$procmux$3697_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:817.19-817.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$3698_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(3'h4),
    .Y(\$procmux$3698_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:816.19-816.45|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3699_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(2'h3),
    .Y(\$procmux$3699_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:815.19-815.44|rtl/cve2/cve2_decoder.sv:813.9-933.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3700_CMP0  (
    .A(instr_rdata_alu_i[14:12]),
    .B(2'h2),
    .Y(\$procmux$3700_CMP )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:773.29-777.12|rtl/cve2/cve2_decoder.sv:773.9-777.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3712  (
    .A(instr_rdata_alu_i[14]),
    .Y(\$alu_op_b_mux_sel_o$134 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:768.21-778.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3715_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h23),
    .Y(\$procmux$3715_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.34-754.12|rtl/cve2/cve2_decoder.sv:750.9-761.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3738  (
    .A(instr_first_cycle_i),
    .Y(\$alu_op_a_mux_sel_o$125 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:736.22-762.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3741_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h63),
    .Y(\$procmux$3741_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:750.34-754.12|rtl/cve2/cve2_decoder.sv:750.9-761.12" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$3767  (
    .A(6'h00),
    .B({ \$alu_operator_o$127 [5:4], 1'h1, \$alu_operator_o$127 [2:0] }),
    .S(instr_first_cycle_i),
    .Y(\$alu_operator_o$129 [5:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:744.20-744.45|rtl/cve2/cve2_decoder.sv:738.9-746.16" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd5)
  ) \$procmux$3796  (
    .A(5'h14),
    .B(30'h1ae4ad4c),
    .S({ \$152y , \$imm_b_mux_sel_o$148 [2], \$procmux$3698_CMP , \$procmux$3651_CMP , \$procmux$3697_CMP , \$procmux$3696_CMP  }),
    .Y({ \$alu_operator_o$127 [5:4], \$alu_operator_o$127 [2:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:721.9-733.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3818_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h67),
    .Y(\$procmux$3818_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:704.9-716.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$3877_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(7'h6f),
    .Y(\$procmux$3877_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$3938  (
    .A(1'h1),
    .B({ \$alu_op_a_mux_sel_o$125 [1], \$alu_op_b_mux_sel_o$134 , 1'h0 }),
    .S({ \$procmux$3741_CMP , \$procmux$3715_CMP , \$procmux$3527_CMP  }),
    .Y(alu_op_b_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd2)
  ) \$procmux$3955  (
    .A(2'h3),
    .B({ \$alu_op_a_mux_sel_o$125 [1], 5'h08, \$alu_op_a_mux_sel_o$150 , \$alu_op_a_mux_sel_o$156 [1], \$alu_op_a_mux_sel_o$156 [1] }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13407 , \$auto$opt_reduce.cc:137:opt_pmux$13357 , \$auto$opt_reduce.cc:137:opt_pmux$13355 , \$procmux$3442_CMP , \$procmux$3409_CMP  }),
    .Y(alu_op_a_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:801.21-806.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$3963_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(5'h17),
    .Y(\$procmux$3963_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:780.20-787.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3964_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(2'h3),
    .Y(\$procmux$3964_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1135.9-1150.16|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd7)
  ) \$procmux$3976  (
    .A(7'h2c),
    .B({ 1'h0, \$alu_operator_o$129 [5:0], 8'h00, \$alu_operator_o$141 [5], 1'h0, \$alu_operator_o$141 [3:0], \$alu_operator_o$145 [6:5], 1'h0, \$alu_operator_o$145 [3:0], 1'h0, \$alu_operator_o$149 [5], 1'h0, \$alu_operator_o$149 [5], \$alu_operator_o$149 [5], 2'h0 }),
    .S({ \$procmux$3741_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13363 , \$procmux$3653_CMP , \$procmux$3527_CMP , \$procmux$3442_CMP  }),
    .Y(alu_operator_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:793.19-799.10|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$3983_CMP0  (
    .A(instr_rdata_alu_i[6:0]),
    .B(6'h37),
    .Y(\$procmux$3983_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$3995  (
    .A(3'h0),
    .B({ 2'h2, \$alu_op_a_mux_sel_o$125 [1], \$alu_op_a_mux_sel_o$125 [1], 1'h0, \$alu_op_a_mux_sel_o$125 [1], 1'h0, \$alu_op_a_mux_sel_o$125 [1], 3'h0, \$alu_op_b_mux_sel_o$134 , 3'h3, \$imm_b_mux_sel_o$148 [2], 1'h0, \$imm_b_mux_sel_o$148 [2] }),
    .S({ \$procmux$3877_CMP , \$procmux$3818_CMP , \$procmux$3741_CMP , \$procmux$3715_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13371 , \$procmux$3442_CMP  }),
    .Y(imm_b_mux_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:1154.9-1170.12|rtl/cve2/cve2_decoder.sv:696.5-1174.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4012  (
    .A(1'h1),
    .B(\$152y ),
    .S(\$procmux$3409_CMP ),
    .Y(imm_a_mux_sel_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4015  (
    .A(\$branch_in_dec_o$109 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(branch_in_dec_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4018  (
    .A(\$jump_in_dec_o$108 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(jump_in_dec_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4021  (
    .A(\$data_we_o$105 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(data_we_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4024  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13361 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(data_req_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4027  (
    .A(rf_wdata_sel_o),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(csr_access_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4030  (
    .A(\$jump_set_o$95 ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(jump_set_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:666.23-674.8|rtl/cve2/cve2_decoder.sv:666.5-674.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4033  (
    .A(\$procmux$4925_Y ),
    .B(1'h0),
    .S(illegal_insn_o),
    .Y(rf_we_o)
  );
  /* src = "rtl/cve2/cve2_decoder.sv:658.7-658.27|rtl/cve2/cve2_decoder.sv:657.5-659.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4036  (
    .A(\$illegal_insn$86 ),
    .B(illegal_c_insn_i),
    .Y(illegal_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$4041  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$procmux$4044_CMP , \$procmux$4043_CMP , \$procmux$4042_CMP  }),
    .Y(\$csr_op$73 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4042_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(2'h3),
    .Y(\$procmux$4042_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:642.22-642.42|rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4043_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(2'h2),
    .Y(\$procmux$4043_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:641.22-641.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4044_CMP0  (
    .A(instr_rdata_i[13:12]),
    .B(1'h1),
    .Y(\$procmux$4044_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$4049_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h73),
    .Y(\$procmux$4049_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:643.22-643.44|rtl/cve2/cve2_decoder.sv:640.11-645.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4053  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13377 ),
    .Y(\$csr_illegal$72 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:637.13-637.39|rtl/cve2/cve2_decoder.sv:636.11-638.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4063  (
    .A(instr_rdata_i[14]),
    .Y(\$21y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4074  (
    .A(\$csr_illegal$72 ),
    .B(\$illegal_insn$69 ),
    .S(\$59y ),
    .Y(\$illegal_insn$74 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:628.13-628.33|rtl/cve2/cve2_decoder.sv:627.11-629.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4081  (
    .A(\$illegal_insn$60 ),
    .B(\$68y ),
    .Y(\$illegal_insn$69 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:620.15-620.33|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$4091_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(9'h105),
    .Y(\$procmux$4090_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:607.15-607.35|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) \$procmux$4104_CMP0  (
    .A(instr_rdata_i[31:20]),
    .Y(\$ecall_insn_o$64 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:617.15-617.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$procmux$4114_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b2),
    .Y(\$dret_insn_o$63 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:614.15-614.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$4125_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(10'h302),
    .Y(\$mret_insn_o$62 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:611.15-611.34|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4137_CMP0  (
    .A(instr_rdata_i[31:20]),
    .B(1'h1),
    .Y(\$ebrk_insn_o$61 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:620.15-620.33|rtl/cve2/cve2_decoder.sv:604.11-624.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4145  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13337 ),
    .Y(\$illegal_insn$60 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4165  (
    .A(\$21y ),
    .B(1'h0),
    .S(\$59y ),
    .Y(\$procmux$4165_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4179  (
    .A(\$59y ),
    .B(\$procmux$4090_Y ),
    .Y(\$procmux$4179_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4186  (
    .A(\$59y ),
    .B(\$ecall_insn_o$64 ),
    .Y(\$ecall_insn_o$81 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4193  (
    .A(\$59y ),
    .B(\$dret_insn_o$63 ),
    .Y(\$dret_insn_o$80 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4200  (
    .A(\$59y ),
    .B(\$mret_insn_o$62 ),
    .Y(\$mret_insn_o$79 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4207  (
    .A(\$59y ),
    .B(\$ebrk_insn_o$61 ),
    .Y(\$ebrk_insn_o$78 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4214  (
    .A(\$csr_op$73 ),
    .B(2'h0),
    .S(\$59y ),
    .Y(\$csr_op$77 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.37-630.12|rtl/cve2/cve2_decoder.sv:602.9-648.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4221  (
    .A(\$59y ),
    .Y(\$csr_access_o$85 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4238_CMP0  (
    .A(instr_rdata_i[14:12]),
    .B(1'h1),
    .Y(\$jump_in_dec_o$58 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4240_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(4'hf),
    .Y(\$procmux$4240_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4253  (
    .A(\$jump_in_dec_o$58 ),
    .B(instr_first_cycle_i),
    .Y(\$jump_set_o$57 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:583.19-594.14|rtl/cve2/cve2_decoder.sv:578.9-598.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4268  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13339 ),
    .Y(\$illegal_insn$55 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4289  (
    .A(\$procmux$4290_CTRL ),
    .Y(\$illegal_insn$44 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_ANY  (
    .A(\$procmux$4290_CMP ),
    .Y(\$procmux$4290_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .Y(\$procmux$4290_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP1  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(9'h100),
    .Y(\$procmux$4290_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP2  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(2'h2),
    .Y(\$procmux$4290_CMP [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP3  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(2'h3),
    .Y(\$procmux$4290_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP4  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h4),
    .Y(\$procmux$4290_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP5  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h6),
    .Y(\$procmux$4290_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP6  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h7),
    .Y(\$procmux$4290_CMP [6])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP7  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(1'h1),
    .Y(\$procmux$4290_CMP [7])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP8  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(3'h5),
    .Y(\$procmux$4290_CMP [8])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:466.36-466.56|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$procmux$4290_CMP9  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(9'h105),
    .Y(\$procmux$4290_CMP [9])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$4295_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h33),
    .Y(\$procmux$4295_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:556.36-560.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$4301  (
    .A(2'h0),
    .B(4'h7),
    .S({ \$procmux$4304_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13341  }),
    .Y(\$multdiv_signed_mode_o$48 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:556.36-560.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4302_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'he),
    .Y(\$procmux$4302_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:546.36-550.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4303_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hc),
    .Y(\$procmux$4303_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:536.36-540.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4304_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'ha),
    .Y(\$procmux$4304_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:531.36-535.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4305_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'h9),
    .Y(\$procmux$4305_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:561.36-565.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$4315  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13347 , \$auto$opt_reduce.cc:137:opt_pmux$13345 , \$auto$opt_reduce.cc:137:opt_pmux$13343  }),
    .Y(\$multdiv_operator_o$47 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:561.36-565.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4316_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hf),
    .Y(\$procmux$4316_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:551.36-555.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4318_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hd),
    .Y(\$procmux$4318_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:541.36-545.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4320_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(4'hb),
    .Y(\$procmux$4320_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:469.36-478.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4343  (
    .A(alu_operator_o),
    .B(7'h41),
    .S(\$mac_en_o$45 ),
    .Y(\$alu_operator_o$46 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:469.36-478.16|rtl/cve2/cve2_decoder.sv:455.11-569.18" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$4344_CMP0  (
    .A({ instr_rdata_i[31:25], instr_rdata_i[14:12] }),
    .B(10'h200),
    .Y(\$mac_en_o$45 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4377  (
    .A(\$illegal_insn$44 ),
    .B(\$43y ),
    .Y(\$illegal_insn$49 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4386  (
    .A(\$multdiv_signed_mode_o$48 ),
    .B(2'h0),
    .S(\$43y ),
    .Y(\$multdiv_signed_mode_o$53 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4395  (
    .A(\$multdiv_operator_o$47 ),
    .B(2'h0),
    .S(\$43y ),
    .Y(\$multdiv_operator_o$52 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4404  (
    .A(\$alu_operator_o$46 ),
    .B(alu_operator_o),
    .S(\$43y ),
    .Y(\$alu_operator_o$51 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:453.11-453.61|rtl/cve2/cve2_decoder.sv:452.9-570.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4413  (
    .A(\$mac_en_o$45 ),
    .B(1'h0),
    .S(\$43y ),
    .Y(\$mac_en_o$50 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16|rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4430_CMP0  (
    .A(instr_rdata_i[14:12]),
    .B(3'h5),
    .Y(\$procmux$4430_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:349.22-446.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$4432_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(5'h13),
    .Y(\$procmux$4432_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:432.19-436.22|rtl/cve2/cve2_decoder.sv:403.15-440.22" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4504  (
    .A(1'h1),
    .B(\$26y ),
    .S(\$procmux$4509_CTRL ),
    .Y(\$illegal_insn$40 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4509_ANY  (
    .A(\$procmux$4509_CMP ),
    .Y(\$procmux$4509_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$4509_CMP0  (
    .A(instr_rdata_i[31:27]),
    .Y(\$procmux$4509_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:405.28-405.81|rtl/cve2/cve2_decoder.sv:403.15-440.22" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4509_CMP1  (
    .A(instr_rdata_i[31:27]),
    .B(4'h8),
    .Y(\$procmux$4509_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:401.15-401.65|rtl/cve2/cve2_decoder.sv:400.13-441.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4523  (
    .A(\$illegal_insn$40 ),
    .B(instr_rdata_i[26]),
    .Y(\$illegal_insn$41 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:378.17-393.24" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4536  (
    .A(1'h1),
    .B(1'h1),
    .S(\$25y ),
    .Y(\$illegal_insn$29 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:378.17-393.24|rtl/cve2/cve2_decoder.sv:362.13-396.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$4539_CMP0  (
    .A(instr_rdata_i[31:27]),
    .B(4'hc),
    .Y(\$procmux$4539_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:378.17-393.24|rtl/cve2/cve2_decoder.sv:362.13-396.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4566  (
    .A(1'h1),
    .B({ \$26y , \$illegal_insn$29  }),
    .S({ \$procmux$4509_CMP [0], \$procmux$4539_CMP  }),
    .Y(\$illegal_insn$30 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:400.13-441.16|rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4580  (
    .A(1'h0),
    .B({ \$illegal_insn$30 , \$illegal_insn$41  }),
    .S({ \$jump_in_dec_o$58 , \$procmux$4430_CMP  }),
    .Y(\$illegal_insn$42 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4584_CMP3  (
    .A(instr_rdata_i[14:12]),
    .B(3'h4),
    .Y(\$procmux$4584_CMP [3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4584_CMP4  (
    .A(instr_rdata_i[14:12]),
    .B(3'h6),
    .Y(\$procmux$4584_CMP [4])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:359.19-359.39|rtl/cve2/cve2_decoder.sv:353.9-445.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$4584_CMP5  (
    .A(instr_rdata_i[14:12]),
    .B(3'h7),
    .Y(\$procmux$4584_CMP [5])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4600_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(2'h3),
    .Y(\$procmux$4600_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:324.18-324.38|rtl/cve2/cve2_decoder.sv:322.9-334.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$4611  (
    .A(2'h0),
    .B(4'h9),
    .S({ \$procmux$4613_CMP , \$procmux$4044_CMP  }),
    .Y(\$data_type_o$20 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:323.18-323.38|rtl/cve2/cve2_decoder.sv:322.9-334.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$4613_CMP0  (
    .A(instr_rdata_i[13:12]),
    .Y(\$procmux$4613_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:325.18-330.14|rtl/cve2/cve2_decoder.sv:322.9-334.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4625  (
    .A(1'h1),
    .B({ 1'h0, instr_rdata_i[14] }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13349 , \$procmux$4043_CMP  }),
    .Y(\$illegal_insn$23 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:294.21-311.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$4646_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h23),
    .Y(\$data_we_o$105 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:308.20-308.41|rtl/cve2/cve2_decoder.sv:305.9-310.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$4657  (
    .A(1'h1),
    .B(instr_rdata_i[14]),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13351 ),
    .Y(\$illegal_insn$19 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:282.20-282.40|rtl/cve2/cve2_decoder.sv:276.9-284.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4685  (
    .A(\$procmux$4686_CTRL ),
    .Y(\$illegal_insn$17 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:282.20-282.40|rtl/cve2/cve2_decoder.sv:276.9-284.16" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$4686_ANY  (
    .A({ \$procmux$4584_CMP [5:3], \$procmux$4430_CMP , \$jump_in_dec_o$58 , \$59y  }),
    .Y(\$procmux$4686_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:273.22-288.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$4688_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h63),
    .Y(\$branch_in_dec_o$109 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:255.20-271.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$4703_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h67),
    .Y(\$procmux$4703_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:242.19-253.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$4749_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(7'h6f),
    .Y(\$procmux$4749_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4781  (
    .A(1'h0),
    .B({ 1'h1, \$jump_in_dec_o$58  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$procmux$4240_CMP  }),
    .Y(\$jump_in_dec_o$108 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4795  (
    .A(\$procmux$4600_CMP ),
    .B(\$21y ),
    .Y(data_sign_extension_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:313.20-335.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4805  (
    .A(2'h0),
    .B(\$data_type_o$20 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13361 ),
    .Y(data_type_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4834  (
    .A(\$procmux$4049_CMP ),
    .B(\$csr_access_o$85 ),
    .Y(rf_wdata_sel_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4840  (
    .A(2'h0),
    .B(\$multdiv_signed_mode_o$53 ),
    .S(\$procmux$4295_CMP ),
    .Y(multdiv_signed_mode_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4846  (
    .A(2'h0),
    .B(\$multdiv_operator_o$52 ),
    .S(\$procmux$4295_CMP ),
    .Y(multdiv_operator_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$4852  (
    .A(alu_operator_o),
    .B(\$alu_operator_o$51 ),
    .S(\$procmux$4295_CMP ),
    .Y(alu_operator_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:448.18-571.10|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4858  (
    .A(\$procmux$4295_CMP ),
    .B(\$mac_en_o$50 ),
    .Y(mac_en_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4872  (
    .A(1'h0),
    .B({ 1'h1, \$procmux$4165_Y  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13369 , \$procmux$4049_CMP  }),
    .Y(rf_ren_a_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:578.9-598.16|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$4893  (
    .A(1'h0),
    .B({ instr_first_cycle_i, \$jump_set_o$57  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$procmux$4240_CMP  }),
    .Y(\$jump_set_o$95 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4901  (
    .A(\$procmux$4049_CMP ),
    .B(\$procmux$4179_Y ),
    .Y(wfi_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4905  (
    .A(\$procmux$4049_CMP ),
    .B(\$ecall_insn_o$81 ),
    .Y(ecall_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4909  (
    .A(\$procmux$4049_CMP ),
    .B(\$dret_insn_o$80 ),
    .Y(dret_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4913  (
    .A(\$procmux$4049_CMP ),
    .B(\$mret_insn_o$79 ),
    .Y(mret_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$4917  (
    .A(\$procmux$4049_CMP ),
    .B(\$ebrk_insn_o$78 ),
    .Y(ebrk_insn_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4921  (
    .A(2'h0),
    .B(\$csr_op$77 ),
    .S(\$procmux$4049_CMP ),
    .Y(csr_op)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$4925  (
    .A(1'h0),
    .B({ \$alu_op_a_mux_sel_o$125 [1], 1'h1, \$csr_access_o$85  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13359 , \$auto$opt_reduce.cc:137:opt_pmux$13373 , \$procmux$4049_CMP  }),
    .Y(\$procmux$4925_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:346.9-346.33|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$4933_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(5'h17),
    .Y(\$procmux$4933_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:342.9-342.33|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$4934_CMP0  (
    .A(instr_rdata_i[6:0]),
    .B(6'h37),
    .Y(\$procmux$4934_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_decoder.sv:602.9-648.12|rtl/cve2/cve2_decoder.sv:236.5-654.12" */
  \$pmux  #(
    .S_WIDTH(32'd9),
    .WIDTH(32'd1)
  ) \$procmux$4945  (
    .A(1'h1),
    .B({ \$15y , \$illegal_insn$17 , \$illegal_insn$19 , \$illegal_insn$23 , 1'h0, \$illegal_insn$42 , \$illegal_insn$49 , \$illegal_insn$55 , \$illegal_insn$74  }),
    .S({ \$procmux$4703_CMP , \$branch_in_dec_o$109 , \$data_we_o$105 , \$procmux$4600_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13375 , \$procmux$4432_CMP , \$procmux$4295_CMP , \$procmux$4240_CMP , \$procmux$4049_CMP  }),
    .Y(\$illegal_insn$86 )
  );
  /* src = "rtl/cve2/cve2_decoder.sv:195.7-195.30|rtl/cve2/cve2_decoder.sv:193.5-196.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$4964  (
    .A(csr_op),
    .B(2'h0),
    .S(\$8y ),
    .Y(csr_op_o)
  );
  assign \$alu_op_a_mux_sel_o$125 [0] = 1'h0;
  assign \$alu_op_a_mux_sel_o$156 [0] = \$alu_op_a_mux_sel_o$156 [1];
  assign \$alu_operator_o$127 [3] = 1'h1;
  assign \$alu_operator_o$129 [6] = 1'h0;
  assign \$alu_operator_o$138 [4:0] = { 2'h1, \$alu_operator_o$138 [5], 2'h0 };
  assign \$alu_operator_o$139 [4:1] = { 2'h1, \$alu_operator_o$139 [5], 1'h0 };
  assign { \$alu_operator_o$141 [6], \$alu_operator_o$141 [4] } = 2'h0;
  assign \$alu_operator_o$142 [4] = 1'h0;
  assign \$alu_operator_o$145 [4] = 1'h0;
  assign { \$alu_operator_o$149 [6], \$alu_operator_o$149 [4:0] } = { 2'h0, \$alu_operator_o$149 [5], \$alu_operator_o$149 [5], 2'h0 };
  assign \$imm_b_mux_sel_o$148 [1:0] = { 1'h0, \$imm_b_mux_sel_o$148 [2] };
  assign \$procmux$4584_CMP [0] = \$59y ;
  assign alu_multicycle_o = 1'h0;
  assign div_en_o = 1'h0;
  assign div_sel_o = 1'h0;
  assign \gen_no_rs3_flop.unused_clk  = clk_i;
  assign \gen_no_rs3_flop.unused_rst_n  = rst_ni;
  assign illegal_insn = illegal_insn_o;
  assign illegal_reg_rv32e = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign instr = instr_rdata_i;
  assign instr_alu = instr_rdata_alu_i;
  assign instr_rd = instr_rdata_i[11:7];
  assign instr_rs1 = instr_rdata_i[19:15];
  assign instr_rs2 = instr_rdata_i[24:20];
  assign instr_rs3 = instr_rdata_i[31:27];
  assign mult_en_o = 1'h0;
  assign mult_sel_o = 1'h0;
  assign opcode = instr_rdata_i[6:0];
  assign opcode_alu = instr_rdata_alu_i[6:0];
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign rf_we = rf_we_o;
  assign unused_instr_alu = { instr_rdata_alu_i[19:15], instr_rdata_alu_i[11:7] };
  assign use_rs3_d = 1'h0;
  assign use_rs3_q = 1'h0;
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

/* src = "rtl/cve2/cve2_ex_block.sv:11.8" */
module \cve2_ex_block$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire \$8y ;
  /* src = "rtl/cve2/cve2_ex_block.sv:40.33" */
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:53.16" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] alu_adder_result_ext;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.16" */
  wire alu_cmp_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:58.16" */
  wire [63:0] alu_imd_val_d;
  /* src = "rtl/cve2/cve2_ex_block.sv:57.16" */
  wire [63:0] alu_imd_val_q;
  /* src = "rtl/cve2/cve2_ex_block.sv:59.16" */
  wire [1:0] alu_imd_val_we;
  /* src = "rtl/cve2/cve2_ex_block.sv:22.33" */
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:54.32" */
  /* unused_bits = "0" */
  wire alu_is_equal_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:20.33" */
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:21.33" */
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:19.33" */
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.16" */
  wire [31:0] alu_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:43.33" */
  output branch_decision_o;
  wire branch_decision_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:42.33" */
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:15.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:27.33" */
  input div_en_i;
  wire div_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:29.33" */
  input div_sel_i;
  wire div_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:45.33" */
  output ex_valid_o;
  wire ex_valid_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:36.33" */
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:37.33" */
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:35.33" */
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:26.33" */
  input mult_en_i;
  wire mult_en_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:28.33" */
  input mult_sel_i;
  wire mult_sel_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.39" */
  wire [32:0] multdiv_alu_operand_a;
  /* src = "rtl/cve2/cve2_ex_block.sv:52.16" */
  wire [32:0] multdiv_alu_operand_b;
  /* src = "rtl/cve2/cve2_ex_block.sv:31.33" */
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:32.33" */
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:25.33" */
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:50.28" */
  wire [31:0] multdiv_result;
  /* src = "rtl/cve2/cve2_ex_block.sv:56.16" */
  wire multdiv_sel;
  /* src = "rtl/cve2/cve2_ex_block.sv:30.33" */
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  /* src = "rtl/cve2/cve2_ex_block.sv:55.16" */
  wire multdiv_valid;
  /* src = "rtl/cve2/cve2_ex_block.sv:41.33" */
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  /* src = "rtl/cve2/cve2_ex_block.sv:16.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_ex_block.sv:178.55-178.70" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(alu_imd_val_we),
    .Y(\$8y )
  );
  /* src = "rtl/cve2/cve2_ex_block.sv:178.53-178.71" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8y ),
    .Y(ex_valid_o)
  );
  /* src = "rtl/cve2/cve2_ex_block.sv:97.5" */
  \cve2_alu$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(alu_cmp_result),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[65:34], imd_val_q_i[31:0] }),
    .imd_val_we_o(alu_imd_val_we),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(33'h000000000),
    .multdiv_operand_b_i(33'h000000000),
    .multdiv_sel_i(1'h0),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(alu_result)
  );
  assign alu_imd_val_q = { imd_val_q_i[65:34], imd_val_q_i[31:0] };
  assign branch_decision_o = alu_cmp_result;
  assign branch_target_o = alu_adder_result_ex_o;
  assign imd_val_d_o = { 2'h0, alu_imd_val_d[63:32], 2'h0, alu_imd_val_d[31:0] };
  assign imd_val_we_o = alu_imd_val_we;
  assign multdiv_alu_operand_a = 33'h000000000;
  assign multdiv_alu_operand_b = 33'h000000000;
  assign multdiv_result = 32'd0;
  assign multdiv_sel = 1'h0;
  assign multdiv_valid = 1'h0;
  assign result_ex_o = alu_result;
endmodule

/* src = "rtl/cve2/cve2_fetch_fifo.sv:15.8" */
module \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$10y ;
  wire \$11y ;
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire \$20y ;
  wire \$22y ;
  wire \$23y ;
  wire \$25y ;
  wire \$34y ;
  wire \$37y ;
  wire \$45y ;
  wire \$46y ;
  wire \$49y ;
  wire \$4y ;
  wire \$52y ;
  wire \$54y ;
  wire \$56y ;
  wire \$57y ;
  wire \$61y ;
  wire \$63y ;
  wire \$68y ;
  wire \$71y ;
  wire \$75y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  wire \$auto$rtlil.cc:3092:Mux$13752 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  wire \$out_valid_o$29 ;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:57.29" */
  wire addr_incr_two;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.29" */
  wire aligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:23.31" */
  output [1:0] busy_o;
  wire [1:0] busy_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:22.31" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:18.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:48.29" */
  wire [2:0] entry_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.29" */
  wire err;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.29" */
  wire [2:0] err_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.51" */
  wire err_plus2;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:44.40" */
  wire [2:0] err_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:52.36" */
  wire err_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:27.31" */
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:29.31" */
  input in_err_i;
  wire in_err_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:28.31" */
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:26.31" */
  input in_valid_i;
  wire in_valid_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.29" */
  wire [30:0] instr_addr_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:60.29" */
  wire instr_addr_en;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:58.29" */
  wire [30:0] instr_addr_next;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:59.43" */
  wire [30:0] instr_addr_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:46.29" */
  wire [2:0] lowest_free_entry;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:34.31" */
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:36.31" */
  output out_err_o;
  wire out_err_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:37.31" */
  output out_err_plus2_o;
  wire out_err_plus2_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:35.31" */
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:33.31" */
  input out_ready_i;
  wire out_ready_i;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:32.31" */
  output out_valid_o;
  wire out_valid_o;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:50.29" */
  wire pop_fifo;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.29" */
  wire [31:0] rdata;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.29" */
  wire [95:0] rdata_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:43.40" */
  wire [95:0] rdata_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:51.36" */
  wire [31:0] rdata_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:19.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:55.52" */
  wire unaligned_is_compressed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:61.29" */
  /* unused_bits = "0" */
  wire unused_addr_in;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.29" */
  wire valid;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.29" */
  wire [2:0] valid_d;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.43" */
  wire [2:0] valid_popped;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:47.29" */
  wire [2:0] valid_pushed;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:45.40" */
  wire [2:0] valid_q;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:53.36" */
  wire valid_unaligned;
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:67.18-67.54" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$0  (
    .A(in_rdata_i),
    .B(rdata_q[31:0]),
    .S(valid_q[0]),
    .Y(rdata)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:68.18-68.52" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$1  (
    .A(in_err_i),
    .B(err_q[0]),
    .S(valid_q[0]),
    .Y(err)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:91.54-91.78" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(unaligned_is_compressed),
    .Y(\$10y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:91.43-91.78" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(err_q[1]),
    .B(\$10y ),
    .Y(\$11y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:91.42-91.90" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(err_q[0]),
    .Y(\$12y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:91.28-93.96" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$13  (
    .A(\$9y ),
    .B(\$12y ),
    .S(valid_q[1]),
    .Y(err_unaligned)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:98.42-98.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(in_err_i),
    .B(valid_q[0]),
    .Y(\$14y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:98.66-98.75" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(err_q[0]),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:97.42-97.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$auto$rtlil.cc:3092:Mux$13752 ),
    .B(\$15y ),
    .Y(err_plus2)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:69.18-69.41" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(valid)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:102.42-102.65" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(valid_q[0]),
    .B(in_valid_i),
    .Y(\$20y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:101.28-102.66" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(\$20y ),
    .B(valid_q[1]),
    .Y(valid_unaligned)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:105.37-105.58" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(rdata[17:16]),
    .B(2'h3),
    .Y(\$22y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:105.62-105.66" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(err),
    .Y(\$23y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:105.36-105.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$22y ),
    .B(\$23y ),
    .Y(unaligned_is_compressed)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:106.37-106.58" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(rdata[1:0]),
    .B(2'h3),
    .Y(\$25y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:106.36-106.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(\$25y ),
    .B(\$23y ),
    .Y(aligned_is_compressed)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:83.28-84.73" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$3  (
    .A(in_rdata_i[15:0]),
    .B(rdata_q[47:32]),
    .S(valid_q[1]),
    .Y(rdata_unaligned[31:16])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:138.37-138.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(out_ready_i),
    .B(out_valid_o),
    .Y(\$34y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:138.26-138.63" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(clear_i),
    .B(\$34y ),
    .Y(instr_addr_en)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:141.26-142.65" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(aligned_is_compressed),
    .B(unaligned_is_compressed),
    .S(instr_addr_q[0]),
    .Y(addr_incr_two)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:146.36-146.50" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(addr_incr_two),
    .Y(\$37y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:144.29-146.65" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd31),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd31)
  ) \$38  (
    .A(instr_addr_q),
    .B({ \$37y , addr_incr_two }),
    .Y(instr_addr_next)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:148.25-149.50" */
  \$mux  #(
    .WIDTH(32'd31)
  ) \$39  (
    .A(instr_addr_next),
    .B(in_addr_i[31:1]),
    .S(clear_i),
    .Y(instr_addr_d)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:92.43-92.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(valid_q[0]),
    .B(err_q[0]),
    .Y(\$4y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:179.50-179.72" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(aligned_is_compressed),
    .Y(\$45y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:179.50-179.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$45y ),
    .B(instr_addr_q[0]),
    .Y(\$46y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:179.21-179.89" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\$34y ),
    .B(\$46y ),
    .Y(pop_fifo)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:184.37-184.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(valid_q[0]),
    .Y(lowest_free_entry[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:190.31-190.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(in_valid_i),
    .B(lowest_free_entry[0]),
    .Y(\$49y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:190.30-191.40" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49y ),
    .B(valid_q[0]),
    .Y(valid_pushed[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:193.30-193.76" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$51  (
    .A(valid_pushed[0]),
    .B(valid_pushed[1]),
    .S(pop_fifo),
    .Y(valid_popped[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:195.43-195.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(clear_i),
    .Y(\$52y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:195.25-195.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(valid_popped[0]),
    .B(\$52y ),
    .Y(valid_d[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:198.27-198.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(valid_pushed[1]),
    .B(pop_fifo),
    .Y(\$54y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:200.63-200.72" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(pop_fifo),
    .Y(\$56y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:200.27-200.72" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$49y ),
    .B(\$56y ),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:198.26-200.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$54y ),
    .B(\$57y ),
    .Y(entry_en[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:203.26-203.66" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$59  (
    .A(in_rdata_i),
    .B(rdata_q[63:32]),
    .S(valid_q[1]),
    .Y(rdata_d[31:0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:204.26-204.64" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$60  (
    .A(in_err_i),
    .B(err_q[1]),
    .S(valid_q[1]),
    .Y(err_d[0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:186.37-186.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(valid_q[1]),
    .Y(\$61y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:186.37-186.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\$61y ),
    .B(valid_q[0]),
    .Y(lowest_free_entry[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:190.31-190.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(in_valid_i),
    .B(lowest_free_entry[1]),
    .Y(\$63y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:190.30-191.40" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(\$63y ),
    .B(valid_q[1]),
    .Y(valid_pushed[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:193.30-193.76" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$65  (
    .A(valid_pushed[1]),
    .B(valid_pushed[2]),
    .S(pop_fifo),
    .Y(valid_popped[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:195.25-195.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(valid_popped[1]),
    .B(\$52y ),
    .Y(valid_d[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:198.27-198.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(valid_pushed[2]),
    .B(pop_fifo),
    .Y(\$68y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:93.55-93.93" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(lowest_free_entry[0]),
    .B(\$10y ),
    .Y(\$7y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:200.27-200.72" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(\$63y ),
    .B(\$56y ),
    .Y(\$71y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:198.26-200.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(\$68y ),
    .B(\$71y ),
    .Y(entry_en[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:203.26-203.66" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$73  (
    .A(in_rdata_i),
    .B(rdata_q[95:64]),
    .S(valid_q[2]),
    .Y(rdata_d[63:32])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:204.26-204.64" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$74  (
    .A(in_err_i),
    .B(err_q[2]),
    .S(valid_q[2]),
    .Y(err_d[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:207.39-207.56" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(valid_q[2]),
    .Y(\$75y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:207.39-207.75" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(\$75y ),
    .B(valid_q[1]),
    .Y(lowest_free_entry[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:208.59-208.98" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(in_valid_i),
    .B(lowest_free_entry[2]),
    .Y(entry_en[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:208.39-208.99" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(valid_q[2]),
    .B(entry_en[2]),
    .Y(valid_pushed[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:209.39-209.78" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(valid_pushed[2]),
    .B(1'h0),
    .S(pop_fifo),
    .Y(valid_popped[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:93.43-93.94" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(in_err_i),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:210.39-210.71" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(valid_popped[2]),
    .B(\$52y ),
    .Y(valid_d[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:92.42-93.95" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$4y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14117  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(in_rdata_i),
    .EN(entry_en[2]),
    .Q(rdata_q[95:64])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14118  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_d[63:32]),
    .EN(entry_en[1]),
    .Q(rdata_q[63:32])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14119  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_d[31:0]),
    .EN(entry_en[0]),
    .Q(rdata_q[31:0])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(31'h00000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd31)
  ) \$auto$ff.cc:266:slice$14120  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_addr_d),
    .EN(instr_addr_en),
    .Q(instr_addr_q)
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14121  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(in_err_i),
    .EN(entry_en[2]),
    .Q(err_q[2])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14122  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(err_d[1]),
    .EN(entry_en[1]),
    .Q(err_q[1])
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:228.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14123  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(err_d[0]),
    .EN(entry_en[0]),
    .Q(err_q[0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$13751  (
    .A(\$14y ),
    .B(err_q[1]),
    .S(valid_q[1]),
    .Y(\$auto$rtlil.cc:3092:Mux$13752 )
  );
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:219.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(valid_d),
    .Q(valid_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1797  (
    .A(instr_addr_q[0]),
    .B(err_plus2),
    .Y(out_err_plus2_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1801  (
    .A(err),
    .B(err_unaligned),
    .S(instr_addr_q[0]),
    .Y(out_err_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$1805  (
    .A(rdata),
    .B({ rdata_unaligned[31:16], rdata[31:16] }),
    .S(instr_addr_q[0]),
    .Y(out_rdata_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1809  (
    .A(valid),
    .B(\$out_valid_o$29 ),
    .S(instr_addr_q[0]),
    .Y(out_valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1813  (
    .A(valid_unaligned),
    .B(valid),
    .S(unaligned_is_compressed),
    .Y(\$out_valid_o$29 )
  );
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign rdata_unaligned[15:0] = rdata[31:16];
  assign unused_addr_in = in_addr_i[0];
endmodule

/* src = "rtl/cve2/cve2_id_stage.sv:19.8" */
module \cve2_id_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i (clk_i, rst_ni, irqs_i, instr_req_o, instr_rdata_i, debug_req_i, fetch_enable_i, irq_nm_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o
, exc_cause_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o
, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$0y ;
  wire \$111y ;
  wire \$135y ;
  wire \$136y ;
  wire \$137y ;
  wire \$139y ;
  wire \$140y ;
  wire \$141y ;
  wire \$143y ;
  wire \$146y ;
  wire \$147y ;
  wire \$148y ;
  wire \$151y ;
  wire \$153y ;
  wire \$156y ;
  wire \$157y ;
  wire \$158y ;
  wire \$159y ;
  wire \$160y ;
  wire \$161y ;
  wire \$162y ;
  wire \$163y ;
  wire \$164y ;
  wire \$165y ;
  wire \$166y ;
  wire [2:0] \$18y ;
  wire \$2y ;
  wire \$30y ;
  /* unused_bits = "1 2 3 4" */
  wire [4:0] \$35 ;
  /* unused_bits = "1 2 3 4" */
  wire [4:0] \$36 ;
  wire \$3y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$45y ;
  wire \$46y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire \$51y ;
  wire \$52y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$58y ;
  wire \$59y ;
  wire \$60y ;
  wire \$61y ;
  wire \$62y ;
  wire \$63y ;
  wire \$67y ;
  wire \$70y ;
  wire \$74y ;
  wire \$81y ;
  wire \$82y ;
  wire \$83y ;
  wire \$88y ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13379 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  wire \$branch_set_raw_d$102 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  wire \$branch_set_raw_d$117 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:471.14-478.8" */
  wire \$csr_pipe_flush$65 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:693.15-699.18" */
  wire \$id_fsm_d$100 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  wire \$id_fsm_d$109 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:735.11-741.14" */
  wire \$id_fsm_d$116 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  wire \$jump_set_raw$103 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  wire \$jump_set_raw$118 ;
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  wire \$perf_branch_o$125 ;
  wire \$procmux$10520_Y ;
  wire \$procmux$10528_Y ;
  wire \$procmux$10536_Y ;
  wire \$procmux$10542_Y ;
  wire \$procmux$10556_Y ;
  wire \$procmux$10563_Y ;
  wire \$procmux$10570_Y ;
  wire \$procmux$10577_Y ;
  wire \$procmux$10655_Y ;
  wire \$procmux$10688_Y ;
  wire \$procmux$10721_Y ;
  wire \$procmux$10774_CMP ;
  wire \$procmux$10775_CMP ;
  wire \$procmux$10776_CMP ;
  wire \$procmux$10777_CMP ;
  wire \$procmux$10778_CMP ;
  wire \$procmux$10779_CMP ;
  wire \$procmux$10781_CMP ;
  wire \$procmux$10782_CMP ;
  wire \$procmux$10783_CMP ;
  /* src = "rtl/cve2/cve2_id_stage.sv:229.16" */
  wire alu_multicycle_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.16" */
  wire [1:0] alu_op_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:227.34" */
  wire [1:0] alu_op_a_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:228.16" */
  wire alu_op_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:228.34" */
  wire alu_op_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:254.16" */
  wire [31:0] alu_operand_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:62.37" */
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:255.16" */
  wire [31:0] alu_operand_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:63.37" */
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:226.16" */
  wire [6:0] alu_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:162.22" */
  wire [6:0] alu_operator_MAC;
  /* src = "rtl/cve2/cve2_id_stage.sv:61.37" */
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:43.37" */
  input branch_decision_i;
  wire branch_decision_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:177.16" */
  wire branch_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:179.40" */
  wire branch_jump_set_done_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:179.16" */
  wire branch_jump_set_done_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:178.16" */
  wire branch_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:178.28" */
  wire branch_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:178.44" */
  wire branch_set_raw_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:612.9" */
  wire branch_set_raw_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:24.37" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:188.16" */
  wire controller_run;
  /* src = "rtl/cve2/cve2_id_stage.sv:81.37" */
  output csr_access_o;
  wire csr_access_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:105.37" */
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:91.37" */
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:89.37" */
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:83.37" */
  output csr_op_en_o;
  wire csr_op_en_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:82.37" */
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:252.16" */
  wire csr_pipe_flush;
  /* src = "rtl/cve2/cve2_id_stage.sv:127.37" */
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:87.37" */
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:86.37" */
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:88.37" */
  output csr_save_cause_o;
  wire csr_save_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:85.37" */
  output csr_save_id_o;
  wire csr_save_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:84.37" */
  output csr_save_if_o;
  wire csr_save_if_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:28.37" */
  output ctrl_busy_o;
  wire ctrl_busy_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:249.16" */
  wire data_req_allowed;
  /* src = "rtl/cve2/cve2_id_stage.sv:116.37" */
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:117.37" */
  output debug_csr_save_o;
  wire debug_csr_save_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:120.37" */
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:121.37" */
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:115.37" */
  output debug_mode_o;
  wire debug_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:118.37" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:119.37" */
  input debug_single_step_i;
  wire debug_single_step_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:239.27" */
  wire div_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:72.37" */
  output div_en_ex_o;
  wire div_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:239.16" */
  wire div_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:74.37" */
  output div_sel_ex_o;
  wire div_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:173.16" */
  wire dret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:171.16" */
  wire ebrk_insn;
  /* src = "rtl/cve2/cve2_id_stage.sv:174.16" */
  wire ecall_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:142.37" */
  output en_wb_o;
  wire en_wb_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:58.37" */
  input ex_valid_i;
  wire ex_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:49.37" */
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:48.37" */
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:27.37" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:194.16" */
  wire flush_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:655.22" */
  wire id_fsm_d;
  /* src = "rtl/cve2/cve2_id_stage.sv:655.12" */
  wire id_fsm_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:40.37" */
  output id_in_ready_o;
  wire id_in_ready_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:51.37" */
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:92.37" */
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:170.16" */
  wire illegal_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:29.37" */
  output illegal_insn_o;
  wire illegal_insn_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:67.37" */
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:232.16" */
  wire [67:0] imd_val_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:68.37" */
  output [67:0] imd_val_q_ex_o;
  wire [67:0] imd_val_q_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:66.37" */
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:205.16" */
  wire [31:0] imm_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:234.16" */
  wire imm_a_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:206.16" */
  wire [31:0] imm_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:235.16" */
  wire [2:0] imm_b_mux_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:235.31" */
  wire [2:0] imm_b_mux_sel_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:200.16" */
  wire [31:0] imm_b_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:198.16" */
  wire [31:0] imm_i_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:202.16" */
  wire [31:0] imm_j_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:199.16" */
  wire [31:0] imm_s_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:201.16" */
  wire [31:0] imm_u_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:187.16" */
  wire instr_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:186.16" */
  wire instr_executing;
  /* src = "rtl/cve2/cve2_id_stage.sv:185.16" */
  wire instr_executing_spec;
  /* src = "rtl/cve2/cve2_id_stage.sv:52.37" */
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:53.37" */
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:184.16" */
  wire instr_first_cycle;
  /* src = "rtl/cve2/cve2_id_stage.sv:38.37" */
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:153.37" */
  output instr_id_done_o;
  wire instr_id_done_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:36.37" */
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:143.37" */
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:34.37" */
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:35.37" */
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:33.37" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:37.37" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:39.37" */
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:32.37" */
  input instr_valid_i;
  wire instr_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:108.37" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:106.37" */
  input irq_pending_i;
  wire irq_pending_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:107.37" */
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:180.16" */
  wire jump_in_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:182.16" */
  wire jump_set;
  /* src = "rtl/cve2/cve2_id_stage.sv:181.16" */
  wire jump_set_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:182.26" */
  wire jump_set_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:101.37" */
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:102.37" */
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:111.37" */
  input lsu_load_err_i;
  wire lsu_load_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:248.16" */
  wire lsu_req;
  /* src = "rtl/cve2/cve2_id_stage.sv:248.25" */
  wire lsu_req_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:95.37" */
  output lsu_req_o;
  wire lsu_req_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:59.37" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:247.16" */
  wire lsu_sign_ext;
  /* src = "rtl/cve2/cve2_id_stage.sv:98.37" */
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:112.37" */
  input lsu_store_err_i;
  wire lsu_store_err_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:246.16" */
  wire [1:0] lsu_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:97.37" */
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:99.37" */
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:245.16" */
  wire lsu_we;
  /* src = "rtl/cve2/cve2_id_stage.sv:96.37" */
  output lsu_we_o;
  wire lsu_we_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:160.9" */
  wire mac_en;
  /* src = "rtl/cve2/cve2_id_stage.sv:161.9" */
  wire mac_en_2_cycles;
  /* src = "rtl/cve2/cve2_id_stage.sv:172.16" */
  wire mret_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:238.28" */
  wire mult_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:71.37" */
  output mult_en_ex_o;
  wire mult_en_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:238.16" */
  wire mult_en_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:73.37" */
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:240.16" */
  wire multdiv_en_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:77.37" */
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:78.37" */
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:241.16" */
  wire [1:0] multdiv_operator;
  /* src = "rtl/cve2/cve2_id_stage.sv:75.37" */
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:242.16" */
  wire [1:0] multdiv_signed_mode;
  /* src = "rtl/cve2/cve2_id_stage.sv:76.37" */
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:195.16" */
  wire multicycle_done;
  /* src = "rtl/cve2/cve2_id_stage.sv:109.37" */
  output nmi_mode_o;
  wire nmi_mode_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:55.37" */
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:47.37" */
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:46.37" */
  output pc_set_o;
  wire pc_set_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:147.37" */
  output perf_branch_o;
  wire perf_branch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:152.37" */
  output perf_div_wait_o;
  wire perf_div_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:149.37" */
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:146.37" */
  output perf_jump_o;
  wire perf_jump_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:148.37" */
  output perf_tbranch_o;
  wire perf_tbranch_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:151.37" */
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:90.37" */
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:126.37" */
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:165.9" */
  wire result_ex_i_q;
  /* src = "rtl/cve2/cve2_id_stage.sv:163.9" */
  wire rf_raddr_a_MUX;
  /* src = "rtl/cve2/cve2_id_stage.sv:130.37" */
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:132.37" */
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:222.16" */
  wire [31:0] rf_rdata_a_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:131.37" */
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:223.16" */
  wire [31:0] rf_rdata_b_fwd;
  /* src = "rtl/cve2/cve2_id_stage.sv:133.37" */
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:212.16" */
  wire rf_ren_a;
  /* src = "rtl/cve2/cve2_id_stage.sv:213.16" */
  wire rf_ren_a_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:134.37" */
  output rf_ren_a_o;
  wire rf_ren_a_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:212.26" */
  wire rf_ren_b;
  /* src = "rtl/cve2/cve2_id_stage.sv:213.30" */
  wire rf_ren_b_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:135.37" */
  output rf_ren_b_o;
  wire rf_ren_b_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:164.9" */
  wire rf_waddr_id_MUX;
  /* src = "rtl/cve2/cve2_id_stage.sv:138.37" */
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:139.37" */
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:210.16" */
  wire rf_wdata_sel;
  /* src = "rtl/cve2/cve2_id_stage.sv:211.16" */
  wire rf_we_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:140.37" */
  output rf_we_id_o;
  wire rf_we_id_o;
  /* src = "rtl/cve2/cve2_id_stage.sv:211.27" */
  wire rf_we_raw;
  /* src = "rtl/cve2/cve2_id_stage.sv:25.37" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_id_stage.sv:230.16" */
  wire stall_alu;
  /* src = "rtl/cve2/cve2_id_stage.sv:191.16" */
  wire stall_branch;
  /* src = "rtl/cve2/cve2_id_stage.sv:193.16" */
  wire stall_id;
  /* src = "rtl/cve2/cve2_id_stage.sv:192.16" */
  wire stall_jump;
  /* src = "rtl/cve2/cve2_id_stage.sv:189.16" */
  wire stall_mem;
  /* src = "rtl/cve2/cve2_id_stage.sv:190.16" */
  wire stall_multdiv;
  /* src = "rtl/cve2/cve2_id_stage.sv:122.37" */
  input trigger_match_i;
  wire trigger_match_i;
  /* src = "rtl/cve2/cve2_id_stage.sv:175.16" */
  wire wfi_insn_dec;
  /* src = "rtl/cve2/cve2_id_stage.sv:203.16" */
  wire [31:0] zimm_rs1_type;
  /* src = "rtl/cve2/cve2_id_stage.sv:216.37-216.55" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_fetch_err_i),
    .Y(\$0y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(instr_valid_i),
    .B(\$0y ),
    .Y(\$151y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:262.29-262.89" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$10  (
    .A(alu_op_a_mux_sel_dec),
    .B(2'h1),
    .S(lsu_addr_incr_req_i),
    .Y(alu_op_a_mux_sel)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:263.29-263.89" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(alu_op_b_mux_sel_dec),
    .B(lsu_addr_incr_req_i),
    .Y(alu_op_b_mux_sel)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:264.29-264.86" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$12  (
    .A(imm_b_mux_sel_dec),
    .B(3'h6),
    .S(lsu_addr_incr_req_i),
    .Y(imm_b_mux_sel)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.46" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(stall_mem),
    .B(stall_multdiv),
    .Y(\$135y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.59" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$135y ),
    .B(stall_jump),
    .Y(\$136y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:756.21-756.74" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(\$136y ),
    .B(stall_branch),
    .Y(\$137y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:756.21-757.32" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(\$137y ),
    .B(stall_alu),
    .Y(stall_id)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.32" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(stall_id),
    .Y(\$139y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:271.18-271.65" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$14  (
    .A(zimm_rs1_type),
    .B(32'd0),
    .S(imm_a_mux_sel),
    .Y(imm_a)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:765.35-765.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(flush_id),
    .Y(\$140y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(\$139y ),
    .B(\$140y ),
    .Y(\$141y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:765.23-765.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(\$141y ),
    .B(instr_executing),
    .Y(instr_id_done_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:769.52-769.75" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(id_fsm_q),
    .Y(\$143y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:769.35-769.76" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(instr_valid_i),
    .B(\$143y ),
    .Y(data_req_allowed)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:774.30-774.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$145  (
    .A(ex_valid_i),
    .B(lsu_resp_valid_i),
    .S(lsu_req_dec),
    .Y(multicycle_done)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:780.56-780.73" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(lsu_resp_valid_i),
    .Y(\$146y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:780.56-780.93" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(\$146y ),
    .B(data_req_allowed),
    .Y(\$147y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:780.41-780.94" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(lsu_req_dec),
    .B(\$147y ),
    .Y(\$148y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:780.24-780.95" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(instr_valid_i),
    .B(\$148y ),
    .Y(stall_mem)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:783.35-783.86" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(\$151y ),
    .B(controller_run),
    .Y(instr_executing)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:799.32-799.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(instr_executing),
    .B(lsu_req_dec),
    .Y(\$153y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:799.32-799.81" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(\$153y ),
    .B(\$146y ),
    .Y(perf_dside_wait_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(ebrk_insn),
    .Y(\$156y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.47-805.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$157  (
    .A(ecall_insn_dec),
    .Y(\$157y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\$156y ),
    .B(\$157y ),
    .Y(\$158y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.65-805.82" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$159  (
    .A(illegal_insn_dec),
    .Y(\$159y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-805.82" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(\$158y ),
    .B(\$159y ),
    .Y(\$160y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:806.25-806.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(debug_mode_o),
    .Y(\$161y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:806.9-806.38" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$162  (
    .A(dret_insn_dec),
    .B(\$161y ),
    .Y(\$162y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:806.7-806.39" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(\$162y ),
    .Y(\$163y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-806.39" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(\$160y ),
    .B(\$163y ),
    .Y(\$164y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:807.7-807.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(illegal_csr_insn_i),
    .Y(\$165y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-807.26" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(\$164y ),
    .B(\$165y ),
    .Y(\$166y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:805.34-807.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(\$166y ),
    .B(\$0y ),
    .Y(instr_perf_count_id_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:813.28-813.54" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(stall_multdiv),
    .B(div_en_dec),
    .Y(perf_div_wait_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:295.32-295.69" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$18  (
    .A(2'h2),
    .B(2'h1),
    .S(instr_is_compressed_i),
    .Y(\$18y [2:1])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:216.58-216.73" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(illegal_insn_o),
    .Y(\$2y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:310.26-310.81" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$21  (
    .A(rf_rdata_b_i),
    .B(imm_b),
    .S(alu_op_b_mux_sel),
    .Y(alu_operand_b)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\$151y ),
    .B(\$2y ),
    .Y(\$3y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:333.23-333.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(rf_we_raw),
    .B(instr_executing),
    .Y(\$30y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:333.23-333.72" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$30y ),
    .B(\$165y ),
    .Y(rf_we_id_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:216.21-216.88" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .B(rf_ren_a_dec),
    .Y(rf_ren_a_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:463.33-463.57" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(csr_op_o),
    .B(1'h1),
    .Y(\$42y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:463.61-463.83" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(csr_op_o),
    .B(2'h2),
    .Y(\$43y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:463.33-463.83" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$42y ),
    .B(\$43y ),
    .Y(\$44y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:463.9-463.84" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(csr_op_en_o),
    .B(\$44y ),
    .Y(\$45y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:464.11-464.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(instr_rdata_i[31:20]),
    .B(10'h300),
    .Y(\$46y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:465.11-465.54" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(instr_rdata_i[31:20]),
    .B(10'h304),
    .Y(\$47y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:464.11-465.54" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$46y ),
    .B(\$47y ),
    .Y(\$48y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:466.11-466.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(instr_rdata_i[31:20]),
    .B(11'h747),
    .Y(\$49y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:464.11-466.58" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$48y ),
    .B(\$49y ),
    .Y(\$50y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:468.11-468.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(instr_rdata_i[31:25]),
    .B(5'h1d),
    .Y(\$51y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:464.11-468.40" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\$50y ),
    .B(\$51y ),
    .Y(\$52y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:471.41-471.64" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(csr_op_o),
    .Y(\$55y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:471.18-471.64" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(csr_op_en_o),
    .B(\$55y ),
    .Y(\$56y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:472.11-472.55" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b0),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:473.11-473.54" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b1),
    .Y(\$58y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:472.11-473.54" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\$57y ),
    .B(\$58y ),
    .Y(\$59y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:474.11-474.60" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b2),
    .Y(\$60y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:472.11-474.60" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$59y ),
    .B(\$60y ),
    .Y(\$61y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:475.11-475.60" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(instr_rdata_i[31:20]),
    .B(11'h7b3),
    .Y(\$62y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:472.11-475.60" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$61y ),
    .B(\$62y ),
    .Y(\$63y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:485.44-485.81" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(illegal_insn_dec),
    .B(illegal_csr_insn_i),
    .Y(\$67y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:485.27-485.82" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(instr_valid_i),
    .B(\$67y ),
    .Y(illegal_insn_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:568.29-568.53" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(mult_en_dec),
    .B(div_en_dec),
    .Y(multdiv_en_dec)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:570.46-570.76" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$70  (
    .A(data_req_allowed),
    .B(lsu_req_dec),
    .Y(\$70y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:570.28-570.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(instr_executing),
    .B(\$70y ),
    .Y(lsu_req_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:571.28-571.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(instr_executing),
    .B(mult_en_dec),
    .Y(mult_en_ex_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:572.28-572.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(instr_executing),
    .B(div_en_dec),
    .Y(div_en_ex_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:583.36-583.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(csr_access_o),
    .B(instr_executing),
    .Y(\$74y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:583.36-583.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(\$74y ),
    .B(instr_id_done_o),
    .Y(csr_op_en_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:587.31-587.78" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$76  (
    .A(alu_operand_b),
    .B({ 31'h00000000, result_ex_i_q }),
    .S(mac_en_2_cycles),
    .Y(alu_operand_b_ex_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:588.25-588.75" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$77  (
    .A(rf_raddr_a_MUX),
    .B(rf_waddr_id_MUX),
    .S(mac_en_2_cycles),
    .Y(rf_raddr_a_o[0])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:629.36-629.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(branch_set_raw_q),
    .B(jump_set_raw),
    .Y(\$81y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:629.36-629.90" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\$81y ),
    .B(branch_jump_set_done_q),
    .Y(\$82y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:630.5-630.25" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(instr_valid_clear_o),
    .Y(\$83y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:629.35-630.25" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(\$82y ),
    .B(\$83y ),
    .Y(branch_jump_set_done_d)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:647.50-647.73" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(branch_jump_set_done_q),
    .Y(\$88y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:647.28-647.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(jump_set_raw),
    .B(\$88y ),
    .Y(jump_set)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:217.21-217.88" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$3y ),
    .B(rf_ren_b_dec),
    .Y(rf_ren_b_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:648.28-648.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(branch_set_raw_q),
    .B(\$88y ),
    .Y(branch_set)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:317.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$14124  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(imd_val_d_ex_i[33:0]),
    .EN(imd_val_we_ex_i[1]),
    .Q(imd_val_q[33:0])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:317.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$14125  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(imd_val_d_ex_i[67:34]),
    .EN(imd_val_we_ex_i[0]),
    .Q(imd_val_q[67:34])
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:657.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14126  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_fsm_d),
    .EN(instr_executing),
    .Q(id_fsm_q)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13378  (
    .A({ lsu_req_dec, alu_multicycle_dec, jump_in_dec }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13379 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:632.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_jump_set_done_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_jump_set_done_d),
    .Q(branch_jump_set_done_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:614.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$branch_set_raw_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_set_raw_d),
    .Q(branch_set_raw_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:440.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$result_ex_i_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(result_ex_i[0]),
    .Q(result_ex_i_q)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:472.7-477.10|rtl/cve2/cve2_id_stage.sv:471.14-478.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10495  (
    .A(\$56y ),
    .B(\$63y ),
    .Y(\$csr_pipe_flush$65 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:464.7-470.10|rtl/cve2/cve2_id_stage.sv:463.5-478.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10503  (
    .A(\$csr_pipe_flush$65 ),
    .B(\$52y ),
    .S(\$45y ),
    .Y(csr_pipe_flush)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10512  (
    .A(multicycle_done),
    .Y(\$id_fsm_d$116 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10520  (
    .A(jump_in_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$10520_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10528  (
    .A(branch_in_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$10528_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:736.13-736.43|rtl/cve2/cve2_id_stage.sv:735.11-741.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10536  (
    .A(multdiv_en_dec),
    .B(1'h0),
    .S(multicycle_done),
    .Y(\$procmux$10536_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:732.13-732.54|rtl/cve2/cve2_id_stage.sv:731.11-733.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10542  (
    .A(rf_we_dec),
    .B(\$111y ),
    .S(multdiv_en_dec),
    .Y(\$procmux$10542_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10549  (
    .A(\$id_fsm_d$109 ),
    .B(\$id_fsm_d$116 ),
    .S(id_fsm_q),
    .Y(id_fsm_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10556  (
    .A(\$procmux$10655_Y ),
    .B(\$procmux$10542_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$10556_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10563  (
    .A(jump_in_dec),
    .B(\$procmux$10520_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$10563_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10570  (
    .A(\$branch_set_raw_d$102 ),
    .B(\$procmux$10528_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$10570_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:730.22-742.12|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10577  (
    .A(\$procmux$10688_Y ),
    .B(\$procmux$10536_Y ),
    .S(id_fsm_q),
    .Y(\$procmux$10577_Y )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:693.32-699.18|rtl/cve2/cve2_id_stage.sv:693.15-699.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10588  (
    .A(ex_valid_i),
    .Y(\$id_fsm_d$100 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:693.32-699.18|rtl/cve2/cve2_id_stage.sv:693.15-699.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10601  (
    .A(ex_valid_i),
    .B(rf_we_dec),
    .Y(\$111y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:719.33-723.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$10624  (
    .A(1'h0),
    .B({ \$id_fsm_d$100 , branch_decision_i, 1'h1 }),
    .S({ multdiv_en_dec, branch_in_dec, \$auto$opt_reduce.cc:137:opt_pmux$13379  }),
    .Y(\$id_fsm_d$109 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:719.33-723.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10655  (
    .A(rf_we_dec),
    .B({ \$111y , 1'h0 }),
    .S({ multdiv_en_dec, alu_multicycle_dec }),
    .Y(\$procmux$10655_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:701.28-712.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10676  (
    .A(branch_in_dec),
    .B(branch_decision_i),
    .Y(\$branch_set_raw_d$102 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:693.15-699.18|rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10688  (
    .A(multdiv_en_dec),
    .B(\$id_fsm_d$100 ),
    .Y(\$procmux$10688_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:713.26-718.16|rtl/cve2/cve2_id_stage.sv:684.11-727.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10697  (
    .A(jump_in_dec),
    .B(jump_set_dec),
    .Y(\$jump_set_raw$103 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10715  (
    .A(branch_in_dec),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$perf_branch_o$125 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10721  (
    .A(alu_multicycle_dec),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$procmux$10721_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10727  (
    .A(\$jump_set_raw$103 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$jump_set_raw$118 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:684.11-727.18|rtl/cve2/cve2_id_stage.sv:682.7-747.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10733  (
    .A(\$branch_set_raw_d$102 ),
    .B(1'h0),
    .S(id_fsm_q),
    .Y(\$branch_set_raw_d$117 )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10738  (
    .A(instr_executing),
    .B(\$perf_branch_o$125 ),
    .Y(perf_branch_o)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10744  (
    .A(instr_executing),
    .B(\$procmux$10721_Y ),
    .Y(stall_alu)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10747  (
    .A(rf_we_dec),
    .B(\$procmux$10556_Y ),
    .S(instr_executing),
    .Y(rf_we_raw)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10750  (
    .A(instr_executing),
    .B(\$procmux$10563_Y ),
    .Y(stall_jump)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10753  (
    .A(instr_executing),
    .B(\$procmux$10570_Y ),
    .Y(stall_branch)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10756  (
    .A(instr_executing),
    .B(\$procmux$10577_Y ),
    .Y(stall_multdiv)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10759  (
    .A(instr_executing),
    .B(\$jump_set_raw$118 ),
    .Y(jump_set_raw)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:682.7-747.14|rtl/cve2/cve2_id_stage.sv:681.5-748.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10762  (
    .A(instr_executing),
    .B(\$branch_set_raw_d$117 ),
    .Y(branch_set_raw_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:339.18-339.46|rtl/cve2/cve2_id_stage.sv:337.5-341.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10764  (
    .A(result_ex_i),
    .B(csr_rdata_i),
    .S(rf_wdata_sel),
    .Y(rf_wdata_id_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:295.24-295.70|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$10773  (
    .A(32'd4),
    .B({ imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, 29'h00000000, \$18y [2:1], 1'h0 }),
    .S({ \$procmux$10779_CMP , \$procmux$10778_CMP , \$procmux$10777_CMP , \$procmux$10776_CMP , \$procmux$10775_CMP , \$procmux$10774_CMP  }),
    .Y(imm_b)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:295.24-295.70|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$10774_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h5),
    .Y(\$procmux$10774_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:294.24-294.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$10775_CMP0  (
    .A(imm_b_mux_sel),
    .B(3'h4),
    .Y(\$procmux$10775_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:293.24-293.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10776_CMP0  (
    .A(imm_b_mux_sel),
    .B(2'h3),
    .Y(\$procmux$10776_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:292.24-292.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10777_CMP0  (
    .A(imm_b_mux_sel),
    .B(2'h2),
    .Y(\$procmux$10777_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:291.24-291.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10778_CMP0  (
    .A(imm_b_mux_sel),
    .B(1'h1),
    .Y(\$procmux$10778_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:290.24-290.43|rtl/cve2/cve2_id_stage.sv:289.5-298.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$10779_CMP0  (
    .A(imm_b_mux_sel),
    .Y(\$procmux$10779_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:279.20-279.42|rtl/cve2/cve2_id_stage.sv:275.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$10780  (
    .A(rf_rdata_a_i),
    .B({ lsu_addr_last_i, pc_id_i, imm_a }),
    .S({ \$procmux$10783_CMP , \$procmux$10782_CMP , \$procmux$10781_CMP  }),
    .Y(alu_operand_a_ex_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:279.20-279.42|rtl/cve2/cve2_id_stage.sv:275.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10781_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h3),
    .Y(\$procmux$10781_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:278.20-278.44|rtl/cve2/cve2_id_stage.sv:275.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10782_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(2'h2),
    .Y(\$procmux$10782_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_id_stage.sv:277.20-277.52|rtl/cve2/cve2_id_stage.sv:275.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10783_CMP0  (
    .A(alu_op_a_mux_sel),
    .B(1'h1),
    .Y(\$procmux$10783_CMP )
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:488.5" */
  \cve2_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(wfi_insn_dec)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:352.5" */
  \cve2_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext),
    .data_type_o(lsu_type),
    .data_we_o(lsu_we),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(data_req_allowed),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mac_en_o(mac_en),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator),
    .multdiv_signed_mode_o(multdiv_signed_mode),
    .rf_raddr_a_o({ \$35 [4:1], rf_raddr_a_MUX }),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o({ \$36 [4:1], rf_waddr_id_MUX }),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(wfi_insn_dec),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  /* src = "rtl/cve2/cve2_id_stage.sv:430.23" */
  \cve2_mac_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.mac__controller_i  mac__controller_i (
    .alu_operator_i(alu_operator),
    .alu_operator_o(alu_operator_MAC),
    .clk_i(clk_i),
    .mac_en_2_cycles_o(mac_en_2_cycles),
    .mac_en_i(mac_en),
    .rst_ni(rst_ni)
  );
  assign \$18y [0] = 1'h0;
  assign \$35 [0] = rf_raddr_a_MUX;
  assign \$36 [0] = rf_waddr_id_MUX;
  assign alu_operand_a = alu_operand_a_ex_o;
  assign alu_operator_ex_o = alu_operator_MAC;
  assign branch_set_raw = branch_set_raw_q;
  assign div_en_id = div_en_ex_o;
  assign en_wb_o = instr_id_done_o;
  assign imd_val_q_ex_o = imd_val_q;
  assign instr_done = instr_id_done_o;
  assign instr_executing_spec = instr_executing;
  assign instr_first_cycle = data_req_allowed;
  assign instr_first_cycle_id_o = data_req_allowed;
  assign lsu_req = lsu_req_o;
  assign lsu_sign_ext_o = lsu_sign_ext;
  assign lsu_type_o = lsu_type;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign lsu_we_o = lsu_we;
  assign mult_en_id = mult_en_ex_o;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
  assign multdiv_operator_ex_o = multdiv_operator;
  assign multdiv_signed_mode_ex_o = multdiv_signed_mode;
  assign perf_wfi_wait_o = wfi_insn_dec;
  assign rf_raddr_a_o[4:1] = 4'h0;
  assign rf_rdata_a_fwd = rf_rdata_a_i;
  assign rf_rdata_b_fwd = rf_rdata_b_i;
  assign rf_ren_a = rf_ren_a_o;
  assign rf_ren_b = rf_ren_b_o;
  assign rf_waddr_id_o = 5'hxx;
endmodule

/* src = "rtl/cve2/cve2_if_stage.sv:15.8" */
module \cve2_if_stage$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, exc_cause, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$11y ;
  wire \$12y ;
  wire \$13y ;
  wire \$14y ;
  wire \$15y ;
  wire \$17y ;
  wire \$18y ;
  wire \$20y ;
  wire \$21y ;
  wire \$22y ;
  wire \$23y ;
  wire \$4y ;
  wire \$procmux$10803_CMP ;
  wire \$procmux$10804_CMP ;
  wire \$procmux$10805_CMP ;
  wire \$procmux$10806_CMP ;
  wire \$procmux$10808_CMP ;
  wire \$procmux$10809_CMP ;
  wire \$procmux$10810_CMP ;
  /* src = "rtl/cve2/cve2_if_stage.sv:22.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:83.22" */
  wire branch_req;
  /* src = "rtl/cve2/cve2_if_stage.sv:61.39" */
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:19.40" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:66.39" */
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:64.39" */
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:68.39" */
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:69.39" */
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:58.39" */
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  /* src = "rtl/cve2/cve2_if_stage.sv:102.22" */
  wire [31:0] exc_pc;
  /* src = "rtl/cve2/cve2_if_stage.sv:57.39" */
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:90.22" */
  wire [31:0] fetch_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:84.22" */
  /* unused_bits = "0" */
  wire [31:0] fetch_addr_n;
  /* src = "rtl/cve2/cve2_if_stage.sv:91.22" */
  wire fetch_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:92.22" */
  wire fetch_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:89.22" */
  wire [31:0] fetch_rdata;
  /* src = "rtl/cve2/cve2_if_stage.sv:88.22" */
  wire fetch_ready;
  /* src = "rtl/cve2/cve2_if_stage.sv:87.22" */
  wire fetch_valid;
  /* src = "rtl/cve2/cve2_if_stage.sv:72.39" */
  input id_in_ready_i;
  wire id_in_ready_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:75.39" */
  output if_busy_o;
  wire if_busy_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:107.22" */
  wire if_id_pipe_reg_we;
  /* src = "rtl/cve2/cve2_if_stage.sv:99.22" */
  wire if_instr_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:100.22" */
  wire if_instr_err_plus2;
  /* src = "rtl/cve2/cve2_if_stage.sv:98.22" */
  wire if_instr_pmp_err;
  /* src = "rtl/cve2/cve2_if_stage.sv:95.22" */
  wire illegal_c_insn;
  /* src = "rtl/cve2/cve2_if_stage.sv:46.39" */
  output illegal_c_insn_id_o;
  wire illegal_c_insn_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:27.39" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:94.22" */
  wire [31:0] instr_decompressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:31.39" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:44.39" */
  output instr_fetch_err_o;
  wire instr_fetch_err_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:45.39" */
  output instr_fetch_err_plus2_o;
  wire instr_fetch_err_plus2_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:28.39" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:96.22" */
  wire instr_is_compressed;
  /* src = "rtl/cve2/cve2_if_stage.sv:42.39" */
  output instr_is_compressed_id_o;
  wire instr_is_compressed_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.22" */
  wire instr_new_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:35.39" */
  output instr_new_id_o;
  wire instr_new_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:79.38" */
  wire instr_new_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:37.39" */
  output [31:0] instr_rdata_alu_id_o;
  wire [31:0] instr_rdata_alu_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:39.39" */
  output [15:0] instr_rdata_c_id_o;
  wire [15:0] instr_rdata_c_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:30.39" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:36.39" */
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:26.39" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:29.39" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:54.39" */
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.22" */
  wire instr_valid_id_d;
  /* src = "rtl/cve2/cve2_if_stage.sv:34.39" */
  output instr_valid_id_o;
  wire instr_valid_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:78.40" */
  wire instr_valid_id_q;
  /* src = "rtl/cve2/cve2_if_stage.sv:104.22" */
  /* unused_bits = "6" */
  wire [6:0] irq_id;
  /* src = "rtl/cve2/cve2_if_stage.sv:49.39" */
  output [31:0] pc_id_o;
  wire [31:0] pc_id_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:48.39" */
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  /* src = "rtl/cve2/cve2_if_stage.sv:56.39" */
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:109.22" */
  wire [2:0] pc_mux_internal;
  /* src = "rtl/cve2/cve2_if_stage.sv:55.39" */
  input pc_set_i;
  wire pc_set_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:50.39" */
  input pmp_err_if_i;
  wire pmp_err_if_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:51.39" */
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:82.22" */
  wire prefetch_busy;
  /* src = "rtl/cve2/cve2_if_stage.sv:23.40" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_if_stage.sv:20.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_if_stage.sv:111.22" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_boot_addr;
  /* src = "rtl/cve2/cve2_if_stage.sv:112.22" */
  /* unused_bits = "0 1 2 3 4 5 6 7" */
  wire [7:0] unused_csr_mtvec;
  /* src = "rtl/cve2/cve2_if_stage.sv:85.22" */
  /* unused_bits = "0" */
  wire unused_fetch_addr_n0;
  /* src = "rtl/cve2/cve2_if_stage.sv:105.22" */
  /* unused_bits = "0" */
  wire unused_irq_bit;
  /* src = "rtl/cve2/cve2_if_stage.sv:192.25-192.53" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(fetch_err),
    .B(if_instr_pmp_err),
    .Y(if_instr_err)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:195.49-195.69" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(instr_is_compressed),
    .Y(\$11y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:195.33-195.69" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(fetch_addr[2]),
    .B(\$11y ),
    .Y(\$12y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:195.33-195.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(\$12y ),
    .B(pmp_err_if_plus2_i),
    .Y(\$13y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:195.32-196.47" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(fetch_err_plus2),
    .Y(\$14y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:196.51-196.64" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(pmp_err_if_i),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:195.31-196.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$14y ),
    .B(\$15y ),
    .Y(if_instr_err_plus2)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:206.36-206.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(fetch_err),
    .Y(\$17y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:206.22-206.46" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(fetch_valid),
    .B(\$17y ),
    .Y(\$18y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:216.30-216.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(fetch_valid),
    .B(id_in_ready_i),
    .Y(instr_new_id_d)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:216.60-216.69" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(pc_set_i),
    .Y(\$20y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:216.30-216.69" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(instr_new_id_d),
    .B(\$20y ),
    .Y(\$21y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:217.49-217.69" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(instr_valid_clear_i),
    .Y(\$22y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:217.30-217.69" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(instr_valid_id_q),
    .B(\$22y ),
    .Y(\$23y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:216.29-217.70" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$21y ),
    .B(\$23y ),
    .Y(instr_valid_id_d)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:148.30-148.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(pc_mux_i),
    .Y(\$4y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:148.29-148.61" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$4y ),
    .B(pc_set_i),
    .Y(csr_mtvec_init_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:188.29-189.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(pmp_err_if_i),
    .B(\$13y ),
    .Y(if_instr_pmp_err)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14127  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_addr),
    .EN(instr_new_id_d),
    .Q(pc_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14128  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_decompressed),
    .EN(instr_new_id_d),
    .Q(instr_rdata_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(16'h0000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$auto$ff.cc:266:slice$14129  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_rdata[15:0]),
    .EN(instr_new_id_d),
    .Q(instr_rdata_c_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14131  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_is_compressed),
    .EN(instr_new_id_d),
    .Q(instr_is_compressed_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14132  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(if_instr_err_plus2),
    .EN(instr_new_id_d),
    .Q(instr_fetch_err_plus2_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14133  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(if_instr_err),
    .EN(instr_new_id_d),
    .Q(instr_fetch_err_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:237.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14134  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(illegal_c_insn),
    .EN(instr_new_id_d),
    .Q(illegal_c_insn_id_o)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_new_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_new_id_d),
    .Q(instr_new_id_q)
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:220.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$instr_valid_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_valid_id_d),
    .Q(instr_valid_id_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd32)
  ) \$procmux$10802  (
    .A({ boot_addr_i[31:8], 8'h00 }),
    .B({ branch_target_ex_i, exc_pc[31:2], 2'h0, csr_mepc_i, csr_depc_i }),
    .S({ \$procmux$10806_CMP , \$procmux$10805_CMP , \$procmux$10804_CMP , \$procmux$10803_CMP  }),
    .Y(fetch_addr_n)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:142.16-142.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$10803_CMP0  (
    .A(pc_mux_i),
    .B(3'h4),
    .Y(\$procmux$10803_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:141.16-141.42|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10804_CMP0  (
    .A(pc_mux_i),
    .B(2'h3),
    .Y(\$procmux$10804_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:140.16-140.38|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10805_CMP0  (
    .A(pc_mux_i),
    .B(2'h2),
    .Y(\$procmux$10805_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:139.16-139.50|rtl/cve2/cve2_if_stage.sv:137.5-144.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10806_CMP0  (
    .A(pc_mux_i),
    .B(1'h1),
    .Y(\$procmux$10806_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd30)
  ) \$procmux$10807  (
    .A({ csr_mtvec_i[31:8], 6'h00 }),
    .B({ csr_mtvec_i[31:8], exc_cause[5:0], 60'h000008000000204 }),
    .S({ \$procmux$10810_CMP , \$procmux$10809_CMP , \$procmux$10808_CMP  }),
    .Y(exc_pc[31:2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:127.23-127.48|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10808_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h3),
    .Y(\$procmux$10808_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:126.23-126.43|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10809_CMP0  (
    .A(exc_pc_mux_i),
    .B(2'h2),
    .Y(\$procmux$10809_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_if_stage.sv:125.23-125.74|rtl/cve2/cve2_if_stage.sv:123.5-129.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10810_CMP0  (
    .A(exc_pc_mux_i),
    .B(1'h1),
    .Y(\$procmux$10810_CMP )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:203.27" */
  \cve2_compressed_decoder$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$18y )
  );
  /* src = "rtl/cve2/cve2_if_stage.sv:152.5" */
  \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(fetch_addr),
    .branch_i(pc_set_i),
    .busy_o(prefetch_busy),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign branch_req = pc_set_i;
  assign exc_pc[1:0] = 2'h0;
  assign fetch_ready = id_in_ready_i;
  assign if_busy_o = prefetch_busy;
  assign if_id_pipe_reg_we = instr_new_id_d;
  assign instr_new_id_o = instr_new_id_q;
  assign instr_rdata_alu_id_o = instr_rdata_id_o;
  assign instr_valid_id_o = instr_valid_id_q;
  assign irq_id = exc_cause;
  assign pc_if_o = fetch_addr;
  assign pc_mux_internal = pc_mux_i;
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_mtvec = csr_mtvec_i[7:0];
  assign unused_fetch_addr_n0 = fetch_addr_n[0];
  assign unused_irq_bit = exc_cause[6];
endmodule

/* src = "rtl/cve2/cve2_load_store_unit.sv:16.8" */
module \cve2_load_store_unit$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, busy_o, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i
, addr_incr_req_o, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, perf_load_o, perf_store_o);
  wire \$103y ;
  wire \$104y ;
  wire \$124y ;
  wire \$126y ;
  wire \$127y ;
  wire \$130y ;
  wire \$131y ;
  wire \$132y ;
  wire \$136y ;
  wire \$138y ;
  wire \$52y ;
  wire \$53y ;
  wire \$54y ;
  wire \$55y ;
  wire \$56y ;
  wire \$57y ;
  wire \$60y ;
  wire [1:0] \$62y ;
  wire \$76y ;
  wire \$81y ;
  wire \$82y ;
  wire [1:0] \$84y ;
  wire \$86y ;
  wire \$87y ;
  wire \$98y ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  wire \$addr_update$105 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$addr_update$67 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$addr_update$91 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  wire \$addr_update$99 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14138 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14140 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14142 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14153 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14158 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14162 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14164 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14173 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14177 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14144 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14155 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14168 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14181 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13381 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13383 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13415 ;
  wire \$auto$opt_share.cc:222:merge_operators$13753 ;
  wire \$auto$rtlil.cc:3094:Pmux$13755 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  wire [2:0] \$auto$wreduce.cc:514:run$13496 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  wire [3:0] \$data_be$2 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  wire [3:0] \$data_be$3 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  wire [3:0] \$data_be$4 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  wire [3:0] \$data_be$6 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  wire [3:0] \$data_be$7 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  wire [3:0] \$data_be$8 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  wire \$handle_misaligned_d$79 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire \$handle_misaligned_d$93 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  wire [2:0] \$ls_fsm_ns$96 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_load_o$74 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$perf_store_o$75 ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  wire \$pmp_err_d$70 ;
  wire \$procmux$10002_CMP ;
  wire \$procmux$10060_CMP ;
  wire \$procmux$10088_CMP ;
  wire \$procmux$10090_CMP ;
  wire [1:0] \$procmux$10325_CMP ;
  wire \$procmux$10325_CTRL ;
  wire \$procmux$10326_CMP ;
  wire [31:0] \$procmux$10329_Y ;
  wire \$procmux$10332_CMP ;
  wire [31:0] \$procmux$10335_Y ;
  wire \$procmux$10338_CMP ;
  wire [31:0] \$procmux$10342_Y ;
  wire \$procmux$10345_CMP ;
  wire [31:0] \$procmux$10359_Y ;
  wire \$procmux$10417_CMP ;
  wire \$procmux$10418_CMP ;
  wire [1:0] \$procmux$10426_CMP ;
  wire \$procmux$10426_CTRL ;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:44.24" */
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:46.24" */
  output addr_incr_req_o;
  wire addr_incr_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.30" */
  wire [31:0] addr_last_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:48.24" */
  output [31:0] addr_last_o;
  wire [31:0] addr_last_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:66.17" */
  wire [31:0] addr_last_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:68.17" */
  wire addr_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:58.24" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:69.17" */
  wire ctrl_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:64.17" */
  wire [31:0] data_addr;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:28.24" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:65.17" */
  wire [31:0] data_addr_w_aligned;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:79.17" */
  wire [3:0] data_be;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:30.24" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:25.24" */
  input data_err_i;
  wire data_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:23.24" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:77.17" */
  wire [1:0] data_offset;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:93.17" */
  wire data_or_pmp_err;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:26.24" */
  input data_pmp_err_i;
  wire data_pmp_err_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:82.17" */
  wire [31:0] data_rdata_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:32.24" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:22.24" */
  output data_req_o;
  wire data_req_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:24.24" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:74.17" */
  wire data_sign_ext_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:73.17" */
  wire [1:0] data_type_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:80.17" */
  wire [31:0] data_wdata;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:31.24" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:29.24" */
  output data_we_o;
  wire data_we_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:75.17" */
  wire data_we_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.38" */
  wire handle_misaligned_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:89.17" */
  wire handle_misaligned_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:55.24" */
  output load_err_o;
  wire load_err_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.12" */
  wire [2:0] ls_fsm_cs;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:100.23" */
  wire [2:0] ls_fsm_ns;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.28" */
  wire lsu_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:92.17" */
  wire lsu_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:40.24" */
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:41.24" */
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:42.24" */
  input lsu_req_i;
  wire lsu_req_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:52.24" */
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:38.24" */
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:36.24" */
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:37.24" */
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:35.24" */
  input lsu_we_i;
  wire lsu_we_i;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:60.24" */
  output perf_load_o;
  wire perf_load_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:61.24" */
  output perf_store_o;
  wire perf_store_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.28" */
  wire pmp_err_d;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:91.17" */
  wire pmp_err_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:86.17" */
  wire [31:0] rdata_b_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:85.17" */
  wire [31:0] rdata_h_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:72.17" */
  wire [1:0] rdata_offset_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:71.17" */
  wire [23:0] rdata_q;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:70.17" */
  wire rdata_update;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:84.17" */
  wire [31:0] rdata_w_ext;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:88.17" */
  wire split_misaligned_access;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:56.24" */
  output store_err_o;
  wire store_err_o;
  /* src = "rtl/cve2/cve2_load_store_unit.sv:437.25-437.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(data_err_i),
    .Y(\$103y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:439.26-439.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(data_we_q),
    .Y(\$104y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:470.31-470.53" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(lsu_err_q),
    .B(data_err_i),
    .Y(\$124y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:470.31-470.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(\$124y ),
    .B(pmp_err_q),
    .Y(data_or_pmp_err)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:471.32-471.57" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$126y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:471.62-471.79" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(ls_fsm_cs),
    .Y(\$127y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:471.31-471.80" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\$126y ),
    .B(\$127y ),
    .Y(lsu_resp_valid_o)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(\$127y ),
    .B(data_rvalid_i),
    .Y(\$130y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:472.69-472.85" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(data_or_pmp_err),
    .Y(\$131y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.85" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(\$130y ),
    .B(\$131y ),
    .Y(\$132y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:472.31-472.98" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(\$132y ),
    .B(\$104y ),
    .Y(lsu_rdata_valid_o)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:490.26-490.54" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(data_or_pmp_err),
    .B(\$104y ),
    .Y(\$136y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:490.26-490.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(\$136y ),
    .B(lsu_resp_valid_o),
    .Y(load_err_o)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:491.26-491.54" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(data_or_pmp_err),
    .B(data_we_q),
    .Y(\$138y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:491.26-491.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(\$138y ),
    .B(lsu_resp_valid_o),
    .Y(store_err_o)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:493.20-493.37" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(ls_fsm_cs),
    .Y(busy_o)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:208.24-208.73" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h0),
    .S(addr_incr_req_o),
    .Y(addr_last_d[1:0])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:327.9-327.28" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(lsu_type_i),
    .Y(\$52y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:327.34-327.54" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(adder_result_ex_i[1:0]),
    .Y(\$53y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:327.8-327.55" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\$54y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:328.9-328.28" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(lsu_type_i),
    .B(1'h1),
    .Y(\$55y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:328.34-328.54" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h3),
    .Y(\$56y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:328.8-328.55" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(\$55y ),
    .B(\$56y ),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:327.7-328.56" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$54y ),
    .B(\$57y ),
    .Y(split_misaligned_access)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:355.26-355.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(lsu_we_i),
    .Y(\$60y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:364.35-364.87" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(split_misaligned_access),
    .Y(\$62y [1])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.13-375.36" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(data_gnt_i),
    .B(pmp_err_q),
    .Y(\$76y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.13-390.39" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(data_rvalid_i),
    .B(pmp_err_q),
    .Y(\$81y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:394.23-394.45" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(data_err_i),
    .B(pmp_err_q),
    .Y(\$82y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:398.23-398.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(data_gnt_i),
    .Y(\$84y [1])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:400.38-400.63" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(\$82y ),
    .Y(\$86y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:400.25-400.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(data_gnt_i),
    .B(\$86y ),
    .Y(\$87y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:420.33-420.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(lsu_err_q),
    .Y(\$98y )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(24'h000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$auto$ff.cc:266:slice$14135  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_rdata_i[31:8]),
    .EN(rdata_update),
    .Q(rdata_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14136  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(adder_result_ex_i[1:0]),
    .EN(ctrl_update),
    .Q(rdata_offset_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14137  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(pmp_err_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14144 ),
    .Q(pmp_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14146  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_err_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14155 ),
    .Q(lsu_err_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14157  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ls_fsm_ns),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14168 ),
    .Q(ls_fsm_cs)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:452.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14170  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(handle_misaligned_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14181 ),
    .Q(handle_misaligned_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14183  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_we_i),
    .EN(ctrl_update),
    .Q(data_we_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14184  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_type_i),
    .EN(ctrl_update),
    .Q(data_type_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:190.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14185  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(lsu_sign_ext_i),
    .EN(ctrl_update),
    .Q(data_sign_ext_q)
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:210.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14186  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ adder_result_ex_i[31:2], addr_last_d[1:0] }),
    .EN(addr_update),
    .Q(addr_last_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14139  (
    .A({ \$procmux$10088_CMP , data_rvalid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14138 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14141  (
    .A({ \$procmux$10002_CMP , \$81y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14140 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14143  (
    .A({ \$procmux$10088_CMP , \$procmux$10002_CMP , \$127y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14142 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14154  (
    .A({ lsu_req_i, \$127y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14153 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14159  (
    .A({ \$procmux$10002_CMP , \$81y , data_gnt_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14158 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14163  (
    .A({ \$procmux$10060_CMP , \$76y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14162 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14165  (
    .A({ \$procmux$10090_CMP , \$76y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14164 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14174  (
    .A({ lsu_req_i, \$127y , data_gnt_i }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14173 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14178  (
    .A({ \$procmux$10090_CMP , \$procmux$10060_CMP , \$procmux$10002_CMP , \$127y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14177 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14145  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14142 , \$auto$opt_dff.cc:194:make_patterns_logic$14140 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14144 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14156  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14142 , \$auto$opt_dff.cc:194:make_patterns_logic$14140 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14155 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14169  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14164 , \$auto$opt_dff.cc:194:make_patterns_logic$14162 , \$auto$opt_dff.cc:194:make_patterns_logic$14158 , \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14138  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14168 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14182  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14173 , \$auto$opt_dff.cc:194:make_patterns_logic$14164 , \$auto$opt_dff.cc:194:make_patterns_logic$14158 , \$auto$opt_dff.cc:194:make_patterns_logic$14153 , \$auto$opt_dff.cc:194:make_patterns_logic$14177  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14181 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13382  (
    .A({ \$procmux$10090_CMP , \$procmux$10060_CMP , \$procmux$10002_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13383 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13414  (
    .A({ \$procmux$10090_CMP , \$procmux$10060_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13415 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14966  (
    .A({ \$procmux$10088_CMP , \$procmux$10002_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13381 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:246:merge_operators$13754  (
    .A(\$81y ),
    .B(data_rvalid_i),
    .S(\$procmux$10088_CMP ),
    .Y(\$auto$rtlil.cc:3094:Pmux$13755 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10002_CMP0  (
    .A(ls_fsm_cs),
    .B(2'h2),
    .Y(\$procmux$10002_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10008  (
    .A(2'h2),
    .B({ 1'h0, \$84y [1] }),
    .S(\$81y ),
    .Y(\$ls_fsm_ns$96 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10017  (
    .A(\$81y ),
    .B(\$84y [1]),
    .Y(\$handle_misaligned_d$93 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10049  (
    .A(\$81y ),
    .B(\$87y ),
    .Y(\$addr_update$91 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10060_CMP0  (
    .A(ls_fsm_cs),
    .B(1'h1),
    .Y(\$procmux$10060_CMP )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10065  (
    .A(handle_misaligned_q),
    .B(\$76y ),
    .Y(\$handle_misaligned_d$79 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$10087  (
    .A(3'h0),
    .B({ 1'h0, \$auto$wreduce.cc:514:run$13496 [1:0], 3'h2, \$ls_fsm_ns$96 [2:1], \$ls_fsm_ns$96 [1] }),
    .S({ \$127y , \$procmux$10060_CMP , \$procmux$10002_CMP  }),
    .Y(ls_fsm_ns)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$10088_CMP0  (
    .A(ls_fsm_cs),
    .B(3'h4),
    .Y(\$procmux$10088_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10090_CMP0  (
    .A(ls_fsm_cs),
    .B(2'h3),
    .Y(\$procmux$10090_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10103  (
    .A({ \$62y [1], 1'h1 }),
    .B({ split_misaligned_access, 1'h0 }),
    .S(data_gnt_i),
    .Y(\$auto$wreduce.cc:514:run$13496 [1:0])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10151  (
    .A(lsu_req_i),
    .B(lsu_we_i),
    .Y(\$perf_store_o$75 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10161  (
    .A(lsu_req_i),
    .B(\$60y ),
    .Y(\$perf_load_o$74 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10201  (
    .A(lsu_req_i),
    .B(data_pmp_err_i),
    .Y(\$pmp_err_d$70 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10221  (
    .A(lsu_req_i),
    .B(data_gnt_i),
    .Y(\$addr_update$67 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10241  (
    .A(\$127y ),
    .B(\$perf_store_o$75 ),
    .Y(perf_store_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10249  (
    .A(\$127y ),
    .B(\$perf_load_o$74 ),
    .Y(perf_load_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10253  (
    .A(1'h0),
    .B({ handle_misaligned_q, 1'h1 }),
    .S({ \$procmux$10090_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13381  }),
    .Y(addr_incr_req_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10262  (
    .A(1'h0),
    .B({ lsu_req_i, 1'h1 }),
    .S({ \$127y , \$auto$opt_reduce.cc:137:opt_pmux$13383  }),
    .Y(data_req_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10272  (
    .A(1'h0),
    .B({ \$82y , data_err_i }),
    .S({ \$procmux$10002_CMP , \$procmux$10088_CMP  }),
    .Y(lsu_err_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10280  (
    .A(\$pmp_err_d$70 ),
    .B(data_pmp_err_i),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13381 ),
    .Y(pmp_err_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$10289  (
    .A(split_misaligned_access),
    .B({ \$handle_misaligned_d$79 , \$handle_misaligned_d$93 , 1'h0 }),
    .S({ \$procmux$10060_CMP , \$procmux$10002_CMP , \$procmux$10090_CMP  }),
    .Y(handle_misaligned_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10299  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13381 ),
    .B(\$auto$opt_share.cc:222:merge_operators$13753 ),
    .Y(rdata_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10306  (
    .A(1'h0),
    .B({ \$addr_update$67 , \$76y  }),
    .S({ \$127y , \$auto$opt_reduce.cc:137:opt_pmux$13415  }),
    .Y(ctrl_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$10314  (
    .A(1'h0),
    .B({ \$addr_update$67 , \$76y , \$addr_update$91 , \$addr_update$99 , \$addr_update$105  }),
    .S({ \$127y , \$procmux$10060_CMP , \$procmux$10002_CMP , \$procmux$10090_CMP , \$procmux$10088_CMP  }),
    .Y(addr_update)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd32)
  ) \$procmux$10324  (
    .A(rdata_w_ext),
    .B({ rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[15:0], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[7:0] }),
    .S({ \$procmux$10326_CMP , \$procmux$10325_CTRL  }),
    .Y(lsu_rdata_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10325_ANY  (
    .A(\$procmux$10325_CMP ),
    .Y(\$procmux$10325_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10325_CMP0  (
    .A(data_type_q),
    .B(2'h2),
    .Y(\$procmux$10325_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10325_CMP1  (
    .A(data_type_q),
    .B(2'h3),
    .Y(\$procmux$10325_CMP [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10326_CMP0  (
    .A(data_type_q),
    .B(1'h1),
    .Y(\$procmux$10326_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10329  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[31]),
    .Y(\$procmux$10329_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10332_CMP0  (
    .A(rdata_offset_q),
    .B(2'h3),
    .Y(\$procmux$10332_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10335  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[23]),
    .Y(\$procmux$10335_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10338_CMP0  (
    .A(rdata_offset_q),
    .B(2'h2),
    .Y(\$procmux$10338_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10342  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[15]),
    .Y(\$procmux$10342_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10345_CMP0  (
    .A(rdata_offset_q),
    .B(1'h1),
    .Y(\$procmux$10345_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd9)
  ) \$procmux$10347  (
    .A({ \$procmux$10359_Y [31], data_rdata_i[7:0] }),
    .B({ \$procmux$10342_Y [31], data_rdata_i[15:8], \$procmux$10335_Y [31], data_rdata_i[23:16], \$procmux$10329_Y [31], data_rdata_i[31:24] }),
    .S({ \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  }),
    .Y({ rdata_b_ext[31], rdata_b_ext[7:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10359  (
    .A(data_sign_ext_q),
    .B(data_rdata_i[7]),
    .Y(\$procmux$10359_Y [31])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd17)
  ) \$procmux$10382  (
    .A({ \$procmux$10342_Y [31], data_rdata_i[15:0] }),
    .B({ \$procmux$10335_Y [31], data_rdata_i[23:8], \$procmux$10329_Y [31], data_rdata_i[31:16], \$procmux$10359_Y [31], data_rdata_i[7:0], rdata_q[23:16] }),
    .S({ \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  }),
    .Y({ rdata_h_ext[31], rdata_h_ext[15:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$10398  (
    .A(data_rdata_i),
    .B({ data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }),
    .S({ \$procmux$10345_CMP , \$procmux$10338_CMP , \$procmux$10332_CMP  }),
    .Y(rdata_w_ext)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$10415  (
    .A(lsu_wdata_i),
    .B({ lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }),
    .S({ \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  }),
    .Y(data_wdata_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10417_CMP0  (
    .A(adder_result_ex_i[1:0]),
    .B(2'h2),
    .Y(\$procmux$10417_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10418_CMP0  (
    .A(adder_result_ex_i[1:0]),
    .B(1'h1),
    .Y(\$procmux$10418_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$10420  (
    .A(4'h1),
    .B(12'h248),
    .S({ \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  }),
    .Y(\$data_be$8 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10426_ANY  (
    .A(\$procmux$10426_CMP ),
    .Y(\$procmux$10426_CTRL )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10426_CMP0  (
    .A(lsu_type_i),
    .B(2'h2),
    .Y(\$procmux$10426_CMP [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10426_CMP1  (
    .A(lsu_type_i),
    .B(2'h3),
    .Y(\$procmux$10426_CMP [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$10430  (
    .A(\$data_be$6 ),
    .B(4'h1),
    .S(handle_misaligned_q),
    .Y(\$data_be$7 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$10436  (
    .A(4'h3),
    .B(12'h6c8),
    .S({ \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  }),
    .Y(\$data_be$6 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd4)
  ) \$procmux$10446  (
    .A(\$data_be$4 ),
    .B({ \$data_be$7 , \$data_be$8  }),
    .S({ \$55y , \$procmux$10426_CTRL  }),
    .Y(data_be_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$10454  (
    .A(3'h0),
    .B(9'h05f),
    .S({ \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  }),
    .Y(\$data_be$3 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$10469  (
    .A({ 1'h1, \$data_be$2 [2:0] }),
    .B({ 1'h0, \$data_be$3 [2:0] }),
    .S(handle_misaligned_q),
    .Y(\$data_be$4 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$10476  (
    .A(3'h7),
    .B(9'h1a0),
    .S({ \$procmux$10418_CMP , \$procmux$10417_CMP , \$56y  }),
    .Y(\$data_be$2 [2:0])
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9950  (
    .A(\$auto$rtlil.cc:3094:Pmux$13755 ),
    .B(\$104y ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13753 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9955  (
    .A(data_rvalid_i),
    .B(\$103y ),
    .Y(\$addr_update$105 )
  );
  /* src = "rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9979  (
    .A(\$76y ),
    .B(\$98y ),
    .Y(\$addr_update$99 )
  );
  assign \$62y [0] = 1'h1;
  assign \$84y [0] = \$84y [1];
  assign \$auto$wreduce.cc:514:run$13496 [2] = 1'h0;
  assign \$data_be$2 [3] = 1'h1;
  assign \$data_be$3 [3] = 1'h0;
  assign \$ls_fsm_ns$96 [0] = \$ls_fsm_ns$96 [1];
  assign \$procmux$10329_Y [30:0] = { \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], \$procmux$10329_Y [31], data_rdata_i[31:24] };
  assign \$procmux$10335_Y [30:0] = { \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], \$procmux$10335_Y [31], data_rdata_i[23:16] };
  assign \$procmux$10342_Y [30:0] = { \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], \$procmux$10342_Y [31], data_rdata_i[15:8] };
  assign \$procmux$10359_Y [30:0] = { \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], \$procmux$10359_Y [31], data_rdata_i[7:0] };
  assign addr_last_d[31:2] = adder_result_ex_i[31:2];
  assign addr_last_o = addr_last_q;
  assign data_addr = adder_result_ex_i;
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_addr_w_aligned = { adder_result_ex_i[31:2], 2'h0 };
  assign data_be = data_be_o;
  assign data_offset = adder_result_ex_i[1:0];
  assign data_rdata_ext = lsu_rdata_o;
  assign data_wdata = data_wdata_o;
  assign data_we_o = lsu_we_i;
  assign rdata_b_ext[30:8] = { rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31] };
  assign rdata_h_ext[30:16] = { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31] };
endmodule

/* src = "rtl/cve2/cve2_mac_controller.sv:29.8" */
module \cve2_mac_controller$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.id_stage_i.mac__controller_i (clk_i, rst_ni, alu_operator_i, alu_operator_o, mac_en_i, mac_en_2_cycles_o);
  wire \$1y ;
  wire \$2y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14188 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14191 ;
  wire \$procmux$3373_CMP ;
  wire \$procmux$3375_CMP ;
  /* src = "rtl/cve2/cve2_mac_controller.sv:35.37" */
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  /* src = "rtl/cve2/cve2_mac_controller.sv:39.37" */
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  /* src = "rtl/cve2/cve2_mac_controller.sv:47.40" */
  wire [6:0] alu_operator_q;
  /* src = "rtl/cve2/cve2_mac_controller.sv:31.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_mac_controller.sv:48.11" */
  wire mac_en_2_cycles_d;
  /* src = "rtl/cve2/cve2_mac_controller.sv:40.37" */
  output mac_en_2_cycles_o;
  wire mac_en_2_cycles_o;
  /* src = "rtl/cve2/cve2_mac_controller.sv:48.30" */
  wire mac_en_2_cycles_q;
  /* src = "rtl/cve2/cve2_mac_controller.sv:36.37" */
  input mac_en_i;
  wire mac_en_i;
  /* src = "rtl/cve2/cve2_mac_controller.sv:32.34" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_mac_controller.sv:44.26" */
  wire [1:0] state_d;
  /* src = "rtl/cve2/cve2_mac_controller.sv:44.17" */
  wire [1:0] state_q;
  /* src = "rtl/cve2/cve2_mac_controller.sv:58.21-58.56" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(alu_operator_i),
    .B(7'h41),
    .Y(\$1y )
  );
  /* src = "rtl/cve2/cve2_mac_controller.sv:58.21-58.68" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1y ),
    .B(mac_en_i),
    .Y(\$2y )
  );
  /* src = "rtl/cve2/cve2_mac_controller.sv:85.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14187  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14188 ),
    .Q(state_q)
  );
  /* src = "rtl/cve2/cve2_mac_controller.sv:85.5" */
  \$aldffe  #(
    .ALOAD_POLARITY(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$15064  (
    .AD(alu_operator_i),
    .ALOAD(rst_ni),
    .CLK(clk_i),
    .D(alu_operator_i),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14191 ),
    .Q(alu_operator_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14189  (
    .A({ \$procmux$3375_CMP , \$2y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14188 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14192  (
    .A({ \$procmux$3375_CMP , \$2y  }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14191 )
  );
  /* src = "rtl/cve2/cve2_mac_controller.sv:85.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$mac_en_2_cycles_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mac_en_2_cycles_d),
    .Q(mac_en_2_cycles_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_mac_controller.sv:70.18-75.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3372_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(mac_en_2_cycles_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_mac_controller.sv:64.18-69.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$3373_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$3373_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_mac_controller.sv:58.17-62.20|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$3375_CMP0  (
    .A(state_q),
    .Y(\$procmux$3375_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/cve2/cve2_mac_controller.sv:64.18-69.16|rtl/cve2/cve2_mac_controller.sv:56.9-81.16" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$3378  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$3375_CMP , \$procmux$3373_CMP  }),
    .Y(state_d)
  );
  assign alu_operator_o = alu_operator_q;
  assign mac_en_2_cycles_o = mac_en_2_cycles_q;
endmodule

/* src = "rtl/cve2/cve2_prefetch_buffer.sv:12.8" */
module \cve2_prefetch_buffer$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, addr_o, req_i, addr_i, rdata_o, busy_o, branch_i, ready_i, valid_o, err_o, err_plus2_o);
  wire \$0y ;
  wire \$10y ;
  wire \$12y ;
  wire \$14y ;
  wire \$15y ;
  wire [31:0] \$25y ;
  wire [1:0] \$2y ;
  wire [31:0] \$33y ;
  wire \$35y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$40y ;
  wire \$43y ;
  wire \$47y ;
  wire \$48y ;
  wire \$49y ;
  wire \$53y ;
  wire \$5y ;
  wire \$6y ;
  wire \$7y ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14196 ;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:20.23" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:26.23" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.24" */
  wire [1:0] branch_discard_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.60" */
  wire [1:0] branch_discard_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:48.42" */
  wire [1:0] branch_discard_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:19.23" */
  input branch_i;
  wire branch_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:39.23" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:14.23" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.24" */
  wire discard_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:46.39" */
  wire discard_req_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:27.23" */
  output err_o;
  wire err_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:28.23" */
  output err_plus2_o;
  wire err_plus2_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.24" */
  wire [31:0] fetch_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:54.24" */
  wire fetch_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:53.38" */
  wire [31:0] fetch_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:58.24" */
  wire [31:0] fifo_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:61.24" */
  wire [1:0] fifo_busy;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:60.24" */
  wire fifo_clear;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:59.24" */
  wire fifo_ready;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:57.24" */
  wire fifo_valid;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.24" */
  /* unused_bits = "0 1" */
  wire [31:0] instr_addr;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:33.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:55.36" */
  wire [31:0] instr_addr_w_aligned;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:35.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:32.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:34.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:31.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:36.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:25.23" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.24" */
  wire [1:0] rdata_outstanding_n;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.66" */
  wire [1:0] rdata_outstanding_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:49.24" */
  wire [1:0] rdata_outstanding_rev;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:47.45" */
  wire [1:0] rdata_outstanding_s;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:23.23" */
  input ready_i;
  wire ready_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:17.23" */
  input req_i;
  wire req_i;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:15.23" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.24" */
  /* unused_bits = "0 1" */
  wire [31:0] stored_addr_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:52.24" */
  wire stored_addr_en;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:51.39" */
  wire [31:0] stored_addr_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.24" */
  wire valid_new_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:24.23" */
  output valid_o;
  wire valid_o;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:63.24" */
  wire valid_raw;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:44.39" */
  wire valid_req;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.24" */
  wire valid_req_d;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:45.37" */
  wire valid_req_q;
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:69.20-69.40" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(rdata_outstanding_q),
    .Y(\$0y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:69.19-69.55" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\$0y ),
    .B(instr_req_o),
    .Y(busy_o)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:123.36-123.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(instr_gnt_i),
    .Y(\$10y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:123.24-123.48" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(instr_req_o),
    .B(\$10y ),
    .Y(valid_req_d)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:126.41-126.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(branch_i),
    .B(discard_req_q),
    .Y(\$12y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:126.26-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(valid_req_q),
    .B(\$12y ),
    .Y(discard_req_d)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.43-145.55" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(valid_req_q),
    .Y(\$14y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.27-145.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(valid_new_req),
    .B(\$14y ),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:145.27-145.70" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$15y ),
    .B(\$10y ),
    .Y(stored_addr_en)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.26-88.59" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$2  (
    .A(fifo_busy),
    .B({ rdata_outstanding_q[0], rdata_outstanding_q[1] }),
    .Y(\$2y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:161.26-161.67" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(branch_i),
    .B(\$15y ),
    .Y(fetch_addr_en)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:163.26-164.75" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$25  (
    .A({ fetch_addr_q[31:2], 2'h0 }),
    .B(addr_i),
    .S(branch_i),
    .Y({ \$25y [31:2], fetch_addr_d[1:0] })
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:163.25-166.74" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd30),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd30)
  ) \$28  (
    .A(\$25y [31:2]),
    .B(\$15y ),
    .Y(fetch_addr_d[31:2])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.23-88.60" */
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\$2y ),
    .Y(\$3y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:178.23-179.57" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$33  (
    .A(fetch_addr_q),
    .B(addr_i),
    .S(branch_i),
    .Y(\$33y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:177.23-179.57" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$34  (
    .A(\$33y ),
    .B(stored_addr_q),
    .S(valid_req_q),
    .Y(instr_addr)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:192.40-192.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(instr_req_o),
    .B(instr_gnt_i),
    .Y(\$35y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:192.39-193.61" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$35y ),
    .B(rdata_outstanding_q[0]),
    .Y(rdata_outstanding_n[0])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.40-196.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$35y ),
    .B(discard_req_d),
    .Y(\$38y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:197.40-197.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(branch_i),
    .B(rdata_outstanding_q[0]),
    .Y(\$39y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:88.23-88.60" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .Y(fifo_ready)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.39-197.74" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$38y ),
    .B(\$39y ),
    .Y(\$40y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:196.39-198.58" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\$40y ),
    .B(branch_discard_q[0]),
    .Y(branch_discard_n[0])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:204.40-205.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\$35y ),
    .B(rdata_outstanding_q[0]),
    .Y(\$43y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:204.39-206.61" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$43y ),
    .B(rdata_outstanding_q[1]),
    .Y(rdata_outstanding_n[1])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.40-208.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\$38y ),
    .B(rdata_outstanding_q[0]),
    .Y(\$47y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:209.40-209.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(branch_i),
    .B(rdata_outstanding_q[1]),
    .Y(\$48y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.39-209.74" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$48y ),
    .Y(\$49y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.35-117.56" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(fifo_ready),
    .B(branch_i),
    .Y(\$5y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:207.39-210.58" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49y ),
    .B(branch_discard_q[1]),
    .Y(branch_discard_n[1])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:215.32-216.68" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$51  (
    .A(rdata_outstanding_n),
    .B({ 1'h0, rdata_outstanding_n[1] }),
    .S(instr_rvalid_i),
    .Y(rdata_outstanding_s)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:217.32-218.65" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$52  (
    .A(branch_discard_n),
    .B({ 1'h0, branch_discard_n[1] }),
    .S(instr_rvalid_i),
    .Y(branch_discard_s)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:221.40-221.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(branch_discard_q[0]),
    .Y(\$53y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:221.23-221.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(instr_rvalid_i),
    .B(\$53y ),
    .Y(fifo_valid)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.26-117.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(req_i),
    .B(\$5y ),
    .Y(\$6y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:118.26-118.58" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(rdata_outstanding_q[1]),
    .Y(\$7y )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:117.26-118.58" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$6y ),
    .B(\$7y ),
    .Y(valid_new_req)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:120.22-120.49" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(valid_req_q),
    .B(valid_new_req),
    .Y(instr_req_o)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14193  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$33y [1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14196 ),
    .Q(stored_addr_q[1:0])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:151.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(30'h00000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd30)
  ) \$auto$ff.cc:266:slice$14198  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(instr_addr[31:2]),
    .EN(stored_addr_en),
    .Q(stored_addr_q[31:2])
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:168.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14199  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(fetch_addr_d),
    .EN(fetch_addr_en),
    .Q(fetch_addr_q)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14197  (
    .A({ stored_addr_en, \$14y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14196 )
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$branch_discard_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(branch_discard_s),
    .Q(branch_discard_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$discard_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(discard_req_d),
    .Q(discard_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$rdata_outstanding_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rdata_outstanding_s),
    .Q(rdata_outstanding_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:229.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$valid_req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(valid_req_d),
    .Q(valid_req_q)
  );
  /* src = "rtl/cve2/cve2_prefetch_buffer.sv:92.5" */
  \cve2_fetch_fifo$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_raw),
    .rst_ni(rst_ni)
  );
  assign \$25y [1:0] = fetch_addr_d[1:0];
  assign fifo_addr = addr_i;
  assign fifo_clear = branch_i;
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
  assign instr_addr_w_aligned = { instr_addr[31:2], 2'h0 };
  assign rdata_outstanding_rev = { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign stored_addr_d = instr_addr;
  assign valid_o = valid_raw;
  assign valid_req = instr_req_o;
endmodule

/* src = "rtl/cve2/cve2_register_file_ff.sv:13.8" */
module \cve2_register_file_ff$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire \$11y ;
  wire \$13y ;
  wire \$15y ;
  wire \$17y ;
  wire \$19y ;
  wire \$1y ;
  wire \$21y ;
  wire \$23y ;
  wire \$25y ;
  wire \$27y ;
  wire \$29y ;
  wire \$31y ;
  wire \$33y ;
  wire \$35y ;
  wire \$37y ;
  wire \$39y ;
  wire \$3y ;
  wire \$41y ;
  wire \$43y ;
  wire \$45y ;
  wire \$47y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  wire \$55y ;
  wire \$57y ;
  wire \$59y ;
  wire \$5y ;
  wire \$61y ;
  wire \$7y ;
  wire \$9y ;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:19.32" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:25.32" */
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:29.32" */
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:26.32" */
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:30.32" */
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:42.40" */
  wire [1023:0] rf_reg;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:43.40" */
  wire [991:0] rf_reg_q;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:20.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:22.32" */
  input test_en_i;
  wire test_en_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:72.9" */
  /* unused_bits = "0" */
  wire unused_test_en;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:33.32" */
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:34.32" */
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:44.40" */
  wire [30:0] we_a_dec;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:35.32" */
  input we_a_i;
  wire we_a_i;
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(waddr_a_i),
    .B(1'h1),
    .Y(\$1y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$9y ),
    .B(we_a_i),
    .Y(we_a_dec[4])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(waddr_a_i),
    .B(3'h6),
    .Y(\$11y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(we_a_i),
    .Y(we_a_dec[5])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(waddr_a_i),
    .B(3'h7),
    .Y(\$13y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(we_a_i),
    .Y(we_a_dec[6])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(waddr_a_i),
    .B(4'h8),
    .Y(\$15y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(\$15y ),
    .B(we_a_i),
    .Y(we_a_dec[7])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(waddr_a_i),
    .B(4'h9),
    .Y(\$17y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17y ),
    .B(we_a_i),
    .Y(we_a_dec[8])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:68.22-68.39" */
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$188  (
    .A({ rf_reg_q, 32'h00000000 }),
    .S(raddr_a_i),
    .Y(rdata_a_o)
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(waddr_a_i),
    .B(4'ha),
    .Y(\$19y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:69.22-69.39" */
  \$bmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$191  (
    .A({ rf_reg_q, 32'h00000000 }),
    .S(raddr_b_i),
    .Y(rdata_b_o)
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1y ),
    .B(we_a_i),
    .Y(we_a_dec[0])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(we_a_i),
    .Y(we_a_dec[9])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(waddr_a_i),
    .B(4'hb),
    .Y(\$21y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(we_a_i),
    .Y(we_a_dec[10])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(waddr_a_i),
    .B(4'hc),
    .Y(\$23y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$23y ),
    .B(we_a_i),
    .Y(we_a_dec[11])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(waddr_a_i),
    .B(4'hd),
    .Y(\$25y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(\$25y ),
    .B(we_a_i),
    .Y(we_a_dec[12])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(waddr_a_i),
    .B(4'he),
    .Y(\$27y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$27y ),
    .B(we_a_i),
    .Y(we_a_dec[13])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(waddr_a_i),
    .B(4'hf),
    .Y(\$29y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(waddr_a_i),
    .B(2'h2),
    .Y(\$3y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\$29y ),
    .B(we_a_i),
    .Y(we_a_dec[14])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(waddr_a_i),
    .B(5'h10),
    .Y(\$31y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\$31y ),
    .B(we_a_i),
    .Y(we_a_dec[15])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(waddr_a_i),
    .B(5'h11),
    .Y(\$33y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$33y ),
    .B(we_a_i),
    .Y(we_a_dec[16])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(waddr_a_i),
    .B(5'h12),
    .Y(\$35y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$35y ),
    .B(we_a_i),
    .Y(we_a_dec[17])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(waddr_a_i),
    .B(5'h13),
    .Y(\$37y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$37y ),
    .B(we_a_i),
    .Y(we_a_dec[18])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(waddr_a_i),
    .B(5'h14),
    .Y(\$39y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .B(we_a_i),
    .Y(we_a_dec[1])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$39y ),
    .B(we_a_i),
    .Y(we_a_dec[19])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(waddr_a_i),
    .B(5'h15),
    .Y(\$41y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$41y ),
    .B(we_a_i),
    .Y(we_a_dec[20])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(waddr_a_i),
    .B(5'h16),
    .Y(\$43y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$43y ),
    .B(we_a_i),
    .Y(we_a_dec[21])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(waddr_a_i),
    .B(5'h17),
    .Y(\$45y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$45y ),
    .B(we_a_i),
    .Y(we_a_dec[22])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(waddr_a_i),
    .B(5'h18),
    .Y(\$47y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(\$47y ),
    .B(we_a_i),
    .Y(we_a_dec[23])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(waddr_a_i),
    .B(5'h19),
    .Y(\$49y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(waddr_a_i),
    .B(2'h3),
    .Y(\$5y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49y ),
    .B(we_a_i),
    .Y(we_a_dec[24])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(waddr_a_i),
    .B(5'h1a),
    .Y(\$51y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\$51y ),
    .B(we_a_i),
    .Y(we_a_dec[25])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(waddr_a_i),
    .B(5'h1b),
    .Y(\$53y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$53y ),
    .B(we_a_i),
    .Y(we_a_dec[26])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(waddr_a_i),
    .B(5'h1c),
    .Y(\$55y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$55y ),
    .B(we_a_i),
    .Y(we_a_dec[27])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$57  (
    .A(waddr_a_i),
    .B(5'h1d),
    .Y(\$57y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$57y ),
    .B(we_a_i),
    .Y(we_a_dec[28])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(waddr_a_i),
    .B(5'h1e),
    .Y(\$59y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5y ),
    .B(we_a_i),
    .Y(we_a_dec[2])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$59y ),
    .B(we_a_i),
    .Y(we_a_dec[29])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(waddr_a_i),
    .B(5'h1f),
    .Y(\$61y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\$61y ),
    .B(we_a_i),
    .Y(we_a_dec[30])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(waddr_a_i),
    .B(3'h4),
    .Y(\$7y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.21-48.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7y ),
    .B(we_a_i),
    .Y(we_a_dec[3])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:48.22-48.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(waddr_a_i),
    .B(3'h5),
    .Y(\$9y )
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14200  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[8]),
    .Q(rf_reg_q[287:256])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14201  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[7]),
    .Q(rf_reg_q[255:224])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14202  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[6]),
    .Q(rf_reg_q[223:192])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14203  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[5]),
    .Q(rf_reg_q[191:160])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14204  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[4]),
    .Q(rf_reg_q[159:128])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14205  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[3]),
    .Q(rf_reg_q[127:96])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14206  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[2]),
    .Q(rf_reg_q[95:64])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14207  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[30]),
    .Q(rf_reg_q[991:960])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14208  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[29]),
    .Q(rf_reg_q[959:928])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14209  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[1]),
    .Q(rf_reg_q[63:32])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14210  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[28]),
    .Q(rf_reg_q[927:896])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14211  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[27]),
    .Q(rf_reg_q[895:864])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14212  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[26]),
    .Q(rf_reg_q[863:832])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14213  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[25]),
    .Q(rf_reg_q[831:800])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14214  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[24]),
    .Q(rf_reg_q[799:768])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14215  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[23]),
    .Q(rf_reg_q[767:736])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14216  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[22]),
    .Q(rf_reg_q[735:704])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14217  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[21]),
    .Q(rf_reg_q[703:672])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14218  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[20]),
    .Q(rf_reg_q[671:640])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14219  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[19]),
    .Q(rf_reg_q[639:608])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14220  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[0]),
    .Q(rf_reg_q[31:0])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14221  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[18]),
    .Q(rf_reg_q[607:576])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14222  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[17]),
    .Q(rf_reg_q[575:544])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14223  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[16]),
    .Q(rf_reg_q[543:512])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14224  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[15]),
    .Q(rf_reg_q[511:480])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14225  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[14]),
    .Q(rf_reg_q[479:448])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14226  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[13]),
    .Q(rf_reg_q[447:416])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14227  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[12]),
    .Q(rf_reg_q[415:384])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14228  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[11]),
    .Q(rf_reg_q[383:352])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14229  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[10]),
    .Q(rf_reg_q[351:320])
  );
  /* src = "rtl/cve2/cve2_register_file_ff.sv:54.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14230  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_a_i),
    .EN(we_a_dec[9]),
    .Q(rf_reg_q[319:288])
  );
  assign rf_reg = { rf_reg_q, 32'h00000000 };
  assign unused_test_en = test_en_i;
endmodule

/* src = "rtl/cve2/cve2_wb.sv:14.8" */
module \cve2_wb$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$0y ;
  wire \$1y ;
  wire \$2y ;
  wire [31:0] \$5y ;
  wire [31:0] \$6y ;
  /* src = "rtl/cve2/cve2_wb.sv:16.36" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/cve2/cve2_wb.sv:18.36" */
  input en_wb_i;
  wire en_wb_i;
  /* src = "rtl/cve2/cve2_wb.sv:20.36" */
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:21.36" */
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:38.36" */
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  /* src = "rtl/cve2/cve2_wb.sv:37.36" */
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  /* src = "rtl/cve2/cve2_wb.sv:24.36" */
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:23.36" */
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:26.36" */
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:33.36" */
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:27.36" */
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:30.36" */
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:45.16" */
  wire [63:0] rf_wdata_wb_mux;
  /* src = "rtl/cve2/cve2_wb.sv:46.16" */
  wire [1:0] rf_wdata_wb_mux_we;
  /* src = "rtl/cve2/cve2_wb.sv:34.36" */
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:28.36" */
  input rf_we_id_i;
  wire rf_we_id_i;
  /* src = "rtl/cve2/cve2_wb.sv:31.36" */
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  /* src = "rtl/cve2/cve2_wb.sv:35.36" */
  output rf_we_wb_o;
  wire rf_we_wb_o;
  /* src = "rtl/cve2/cve2_wb.sv:17.36" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/cve2/cve2_wb.sv:54.50-54.81" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(instr_perf_count_id_i),
    .B(en_wb_i),
    .Y(\$0y )
  );
  /* src = "rtl/cve2/cve2_wb.sv:55.52-55.85" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(lsu_resp_valid_i),
    .B(lsu_resp_err_i),
    .Y(\$1y )
  );
  /* src = "rtl/cve2/cve2_wb.sv:55.50-55.86" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1y ),
    .Y(\$2y )
  );
  /* src = "rtl/cve2/cve2_wb.sv:54.50-55.86" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\$0y ),
    .B(\$2y ),
    .Y(perf_instr_ret_wb_o)
  );
  /* src = "rtl/cve2/cve2_wb.sv:56.50-56.96" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(perf_instr_ret_wb_o),
    .B(instr_is_compressed_id_i),
    .Y(perf_instr_ret_compressed_wb_o)
  );
  /* src = "rtl/cve2/cve2_wb.sv:63.27-63.75" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$5  (
    .A({ rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i }),
    .B(rf_wdata_id_i),
    .Y(\$5y )
  );
  /* src = "rtl/cve2/cve2_wb.sv:64.27-64.75" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$6  (
    .A({ rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i }),
    .B(rf_wdata_lsu_i),
    .Y(\$6y )
  );
  /* src = "rtl/cve2/cve2_wb.sv:63.26-64.76" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$7  (
    .A(\$5y ),
    .B(\$6y ),
    .Y(rf_wdata_wb_o)
  );
  /* src = "rtl/cve2/cve2_wb.sv:65.26-65.45" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A({ rf_we_lsu_i, rf_we_id_i }),
    .Y(rf_we_wb_o)
  );
  assign rf_waddr_wb_o = rf_waddr_id_i;
  assign rf_wdata_wb_mux = { rf_wdata_id_i, rf_wdata_lsu_i };
  assign rf_wdata_wb_mux_we = { rf_we_lsu_i, rf_we_id_i };
endmodule

/* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:17.8" */
module \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom (clk_i, rst_ni, req_i, addr_i, rdata_o);
  wire \$5y ;
  wire [63:0] \$7y ;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:21.24" */
  input [63:0] addr_i;
  wire [63:0] addr_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:51.39" */
  wire [4:0] addr_q;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:18.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:27.29" */
  wire [1279:0] mem;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:22.24" */
  output [63:0] rdata_o;
  wire [63:0] rdata_o;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:20.24" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:19.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.17-68.28" */
  reg [49:0] \$auto$memory_bmux2rom.cc:63:execute$15080  [31:0];
  initial begin
    \$auto$memory_bmux2rom.cc:63:execute$15080 [0] = 50'h0000040300037;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [1] = 50'h0000041080037;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [2] = 50'h0000040a00037;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [3] = 50'h1f311c1fe0007;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [4] = 50'h000066f678839;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [5] = 50'h00d964019aa89;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [6] = 50'h089a09e281239;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [7] = 50'h1014400150219;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [8] = 50'h0211d80033a09;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [9] = 50'h00b04de281239;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [10] = 50'h0037448012201;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [11] = 50'h3d5f1bf410c71;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [12] = 50'h00dd64000028b;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [13] = 50'h081ac80198a89;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [14] = 50'h1f225cf6612b9;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [15] = 50'h081a480020039;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [16] = 50'h1f225cf6612b9;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [17] = 50'h39425d4f3f837;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [18] = 50'h1f227c2119411;
    \$auto$memory_bmux2rom.cc:63:execute$15080 [19] = 50'h1f201cf641239;
  end
  assign { \$7y [63:62], \$7y [60:59], \$7y [57], \$7y [61], \$7y [55:53], \$7y [50], \$7y [48], \$7y [46:42], \$7y [40], \$7y [38:36], \$7y [34], \$7y [31:20], \$7y [18], \$7y [16], \$7y [19], \$7y [14:12], \$7y [52], \$7y [10], \$7y [41], \$7y [8], \$7y [58], \$7y [6:2], \$7y [33] } = \$auto$memory_bmux2rom.cc:63:execute$15080 [addr_q];
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:67.9-67.43" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(addr_q),
    .B(5'h14),
    .Y(\$5y )
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:55.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$14231  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[7:3]),
    .EN(req_i),
    .Q(addr_q)
  );
  /* src = "rtl/riscv-dbg/debug_rom/debug_rom.sv:68.7-68.29|rtl/riscv-dbg/debug_rom/debug_rom.sv:67.5-69.8" */
  \$mux  #(
    .WIDTH(32'd50)
  ) \$procmux$1894  (
    .A(50'h0000000000000),
    .B({ \$7y [63:62], \$7y [60:59], \$7y [57], \$7y [61], \$7y [55:53], \$7y [50], \$7y [48], \$7y [46:42], \$7y [40], \$7y [38:36], \$7y [34], \$7y [31:20], \$7y [18], \$7y [16], \$7y [19], \$7y [14:12], \$7y [52], \$7y [10], \$7y [41], \$7y [8], \$7y [58], \$7y [6:2], \$7y [33] }),
    .S(\$5y ),
    .Y({ rdata_o[63:62], rdata_o[60:59], rdata_o[57:53], rdata_o[50], rdata_o[48], rdata_o[46:42], rdata_o[40], rdata_o[38:36], rdata_o[34], rdata_o[31:20], rdata_o[18], rdata_o[16:2], rdata_o[0] })
  );
  assign { \$7y [56], \$7y [51], \$7y [49], \$7y [47], \$7y [39], \$7y [35], \$7y [32], \$7y [17], \$7y [15], \$7y [11], \$7y [9], \$7y [7], \$7y [1:0] } = { \$7y [61], \$7y [58], \$7y [58], \$7y [58], \$7y [41], \$7y [58], \$7y [33], \$7y [19], \$7y [19], \$7y [52], \$7y [41], \$7y [58], \$7y [33], \$7y [33] };
  assign mem = 1280'h7b2000737b2024737b30257310852823f1402473a79ff06f7b2024737b30257310052423001000737b2024737b30257310052c2300c5151300c5551300000517fd5ff06ffa0418e3002474134004440300a40433f140247302041c63001474134004440300a4043310852023f140247300c5151300c55513000005177b3510737b2410730ff0000f000000130500006f000000130840006f000000130180006f;
  assign { rdata_o[61], rdata_o[58], rdata_o[52:51], rdata_o[49], rdata_o[47], rdata_o[41], rdata_o[39], rdata_o[35], rdata_o[33:32], rdata_o[19], rdata_o[17], rdata_o[1] } = { rdata_o[56], rdata_o[7], rdata_o[11], rdata_o[7], rdata_o[7], rdata_o[7], rdata_o[9], rdata_o[9], rdata_o[7], rdata_o[0], rdata_o[0], rdata_o[15], rdata_o[15], rdata_o[0] };
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14233 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13758 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13757 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13760 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13760 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13758 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14232  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14233 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14234  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14233 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13756  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13757 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13759  (
    .A(\$auto$rtlil.cc:2959:Neg$13757 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13760 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6426  (
    .A(\$auto$opt_share.cc:222:merge_operators$13758 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6433  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14236 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13763 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13762 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13765 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13765 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13763 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14235  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14236 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14237  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14236 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13761  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13762 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13764  (
    .A(\$auto$rtlil.cc:2959:Neg$13762 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13765 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6351  (
    .A(\$auto$opt_share.cc:222:merge_operators$13763 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6358  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14239 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13768 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13767 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13770 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13770 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13768 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14238  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14239 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14240  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14239 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13766  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13767 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13769  (
    .A(\$auto$rtlil.cc:2959:Neg$13767 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13770 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6276  (
    .A(\$auto$opt_share.cc:222:merge_operators$13768 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6283  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14242 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13773 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13772 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13775 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13775 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13773 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14241  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14242 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14243  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14242 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13771  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13772 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13774  (
    .A(\$auto$rtlil.cc:2959:Neg$13772 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13775 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6201  (
    .A(\$auto$opt_share.cc:222:merge_operators$13773 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6208  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14245 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13778 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13777 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13780 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13780 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13778 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14244  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14245 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14246  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14245 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13776  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13777 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13779  (
    .A(\$auto$rtlil.cc:2959:Neg$13777 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13780 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11545  (
    .A(\$auto$opt_share.cc:222:merge_operators$13778 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11552  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14248 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$13783 ;
  wire [1:0] \$auto$rtlil.cc:2959:Neg$13782 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$13785 ;
  /* src = "rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$counter_d$5 ;
  /* src = "rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/delta_counter.sv:69.29-69.48" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$1  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:3092:Mux$13785 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$13783 )
  );
  /* src = "rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14247  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14248 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14249  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14248 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$13781  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2959:Neg$13782 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$13784  (
    .A(\$auto$rtlil.cc:2959:Neg$13782 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:3092:Mux$13785 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:66.13-66.37|rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10878  (
    .A(\$auto$opt_share.cc:222:merge_operators$13783 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$counter_d$5 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/delta_counter.sv:64.13-64.28|rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10885  (
    .A(\$counter_d$5 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "rtl/riscv-dbg/dm_csrs.sv:18.8" */
module \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs (clk_i, rst_ni, testmode_i, unavailable_i, hartinfo_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, data_i, data_o, halted_i, resumeack_i, hartsel_o
, haltreq_o, resumereq_o, clear_resumeack_o, cmd_valid_o, cmd_o, cmderror_valid_i, cmderror_i, cmdbusy_i, progbuf_o, data_valid_i, sbaddress_o, sbaddress_i, sbaddress_write_valid_o, sbreadonaddr_o, sbautoincrement_o, sbaccess_o, sbreadondata_o, sbdata_o, sbdata_read_valid_o, sbdata_write_valid_o, sbdata_i
, sbdata_valid_i, sbbusy_i, sberror_valid_i, sberror_i);
  wire \$103y ;
  wire \$104y ;
  wire \$105y ;
  wire \$106y ;
  wire \$107y ;
  wire \$108y ;
  wire \$109y ;
  wire [31:0] \$111y ;
  wire \$115y ;
  wire \$117y ;
  wire \$122y ;
  wire \$123y ;
  wire \$124y ;
  wire \$125y ;
  wire \$126y ;
  wire \$127y ;
  wire \$128y ;
  wire \$129y ;
  wire \$130y ;
  wire \$131y ;
  wire \$135y ;
  wire \$149y ;
  wire \$150y ;
  wire \$151y ;
  wire \$152y ;
  wire \$153y ;
  wire \$154y ;
  wire [63:0] \$160y ;
  wire [63:0] \$162y ;
  wire \$164y ;
  wire \$176y ;
  wire \$185y ;
  wire \$186y ;
  wire [2:0] \$189y ;
  wire [2:0] \$190y ;
  wire [255:0] \$219y ;
  wire \$232y ;
  wire \$233y ;
  wire \$234y ;
  wire \$300y ;
  wire \$303y ;
  wire \$322y ;
  wire \$51y ;
  wire \$64y ;
  wire \$80y ;
  wire \$81y ;
  wire [31:0] \$86y ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$abstractauto_q$332 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14251 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14253 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14255 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14262 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14264 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14269 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14271 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14273 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14296 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14298 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14300 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14302 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14325 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14327 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14399 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14411 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14413 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14415 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14431 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14433 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14447 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14449 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14257 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14266 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14275 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14304 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14331 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14401 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14417 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14435 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14453 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$15066 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13417 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13423 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13425 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13427 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$15070 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$15076 ;
  wire \$auto$opt_share.cc:222:merge_operators$14975 ;
  wire \$auto$rtlil.cc:3094:Pmux$14977 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  wire [1:0] \$auto$wreduce.cc:514:run$13499 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [1:0] \$auto$wreduce.cc:514:run$13500 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [1:0] \$auto$wreduce.cc:514:run$13501 ;
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 21" */
  wire [31:0] \$auto$wreduce.cc:514:run$13504 ;
  wire [31:0] \$auto$wreduce.cc:514:run$13505 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire \$cmd_valid_d$120 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire \$cmd_valid_d$140 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire \$cmd_valid_d$145 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire \$cmd_valid_d$169 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  wire \$cmd_valid_d$201 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  wire \$cmd_valid_d$228 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire \$cmd_valid_d$266 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  wire \$cmd_valid_d$95 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire \$cmd_valid_q$331 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" */
  wire [2:0] \$cmderr_d$118 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  wire [2:0] \$cmderr_d$119 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  wire [2:0] \$cmderr_d$139 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  wire [2:0] \$cmderr_d$144 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:382.15-384.18" */
  wire [2:0] \$cmderr_d$167 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  wire [2:0] \$cmderr_d$168 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  wire [2:0] \$cmderr_d$193 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [2:0] \$cmderr_d$264 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  wire [2:0] \$cmderr_d$280 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [2:0] \$cmderr_q$329 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [31:0] \$command_q$330 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  wire [63:0] \$data_q$337 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  wire [31:0] \$dmcontrol_d$263 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29" */
  wire [31:0] \$dmcontrol_d$279 ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  /* unused_bits = "0" */
  wire [31:0] \$dmcontrol_q$328 ;
  wire \$procmux$7687_Y ;
  wire [31:0] \$procmux$7747_Y ;
  wire [31:0] \$procmux$7767_Y ;
  wire [31:0] \$procmux$7776_Y ;
  wire \$procmux$7782_Y ;
  wire [21:0] \$procmux$7800_Y ;
  wire [31:0] \$procmux$7820_Y ;
  wire [21:0] \$procmux$7855_Y ;
  wire \$procmux$7891_Y ;
  wire \$procmux$8372_Y ;
  wire \$procmux$8381_Y ;
  wire [1:0] \$procmux$8430_Y ;
  wire \$procmux$8485_Y ;
  wire [31:0] \$procmux$8656_Y ;
  wire \$procmux$8689_Y ;
  wire [1:0] \$procmux$8697_Y ;
  wire [31:0] \$procmux$8736_Y ;
  wire [31:0] \$procmux$8798_Y ;
  wire \$procmux$8936_Y ;
  wire [33:0] \$procmux$8980_Y ;
  wire \$procmux$8983_Y ;
  wire [255:0] \$procmux$8995_Y ;
  wire [63:0] \$procmux$8998_Y ;
  wire [63:0] \$procmux$9001_Y ;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.23" */
  wire [31:0] abstractauto_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:171.39" */
  wire [31:0] abstractauto_q;
  wire [12:0] abstractcs;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:219.15" */
  wire [3:0] autoexecdata_idx;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:50.45" */
  output clear_resumeack_o;
  wire clear_resumeack_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:23.45" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:53.45" */
  output [31:0] cmd_o;
  wire [31:0] cmd_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.23" */
  wire cmd_valid_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:52.45" */
  output cmd_valid_o;
  wire cmd_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:170.36" */
  wire cmd_valid_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:56.45" */
  input cmdbusy_i;
  wire cmdbusy_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.23" */
  wire [2:0] cmderr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:168.33" */
  wire [2:0] cmderr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:55.45" */
  input [2:0] cmderror_i;
  wire [2:0] cmderror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:54.45" */
  input cmderror_valid_i;
  wire cmderror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.23" */
  wire [31:0] command_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:169.34" */
  wire [31:0] command_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.35" */
  wire [63:0] data_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:61.45" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:59.45" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:179.43" */
  wire [63:0] data_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:62.45" */
  input data_valid_i;
  wire data_valid_i;
  wire [6:0] dm_csr_addr;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:39.45" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.23" */
  /* unused_bits = "0" */
  wire [31:0] dmcontrol_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:166.36" */
  wire [31:0] dmcontrol_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:31.45" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:30.45" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:29.45" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:35.45" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:34.45" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:33.45" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:27.45" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  wire [19:0] dmstatus;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:88.16" */
  wire [1:0] dtm_op;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:100.47" */
  wire [31:0] halted;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:201.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:104.40" */
  wire [31:0] halted_flat1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:105.40" */
  wire [31:0] halted_flat2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:106.16" */
  wire [31:0] halted_flat3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:43.45" */
  input halted_i;
  wire halted_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:101.36" */
  wire [31:0] halted_reshaped0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:102.37" */
  wire [31:0] halted_reshaped1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:103.37" */
  wire [31:0] halted_reshaped2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:48.45" */
  output haltreq_o;
  wire haltreq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.16" */
  wire [31:0] haltsum0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.26" */
  wire [31:0] haltsum1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.36" */
  wire [31:0] haltsum2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:99.46" */
  wire [31:0] haltsum3;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:209.39" */
  wire [63:0] hartinfo_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:42.45" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:109.16" */
  wire [14:0] hartsel_idx0;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:122.15" */
  wire [9:0] hartsel_idx1;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:139.15" */
  wire [4:0] hartsel_idx2;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:47.45" */
  output [19:0] hartsel_o;
  wire [19:0] hartsel_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.23" */
  wire havereset_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.30" */
  wire [1:0] havereset_d_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:176.36" */
  wire havereset_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:199.51" */
  wire [1:0] havereset_q_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:38.45" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:37.45" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:25.45" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.37" */
  wire [255:0] progbuf_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:58.45" */
  output [255:0] progbuf_o;
  wire [255:0] progbuf_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:178.48" */
  wire [255:0] progbuf_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:92.16" */
  wire resp_queue_empty;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:91.16" */
  wire resp_queue_full;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:183.18" */
  wire [33:0] resp_queue_inp;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:94.16" */
  wire resp_queue_pop;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:93.16" */
  wire resp_queue_push;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.30" */
  wire [1:0] resumeack_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:45.45" */
  input resumeack_i;
  wire resumeack_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:49.45" */
  output resumereq_o;
  wire resumereq_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:24.45" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:70.45" */
  output [2:0] sbaccess_o;
  wire [2:0] sbaccess_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.23" */
  wire [63:0] sbaddr_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:173.33" */
  wire [63:0] sbaddr_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:65.45" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:64.45" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:66.45" */
  output sbaddress_write_valid_o;
  wire sbaddress_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:69.45" */
  output sbautoincrement_o;
  wire sbautoincrement_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:80.45" */
  input sbbusy_i;
  wire sbbusy_i;
  wire [28:0] sbcs_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:172.31" */
  wire [31:0] sbcs_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.23" */
  wire [63:0] sbdata_d;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:77.45" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:73.45" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:174.33" */
  wire [63:0] sbdata_q;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:74.45" */
  output sbdata_read_valid_o;
  wire sbdata_read_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:78.45" */
  input sbdata_valid_i;
  wire sbdata_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:75.45" */
  output sbdata_write_valid_o;
  wire sbdata_write_valid_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:82.45" */
  input [2:0] sberror_i;
  wire [2:0] sberror_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:81.45" */
  input sberror_valid_i;
  wire sberror_valid_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:68.45" */
  output sbreadonaddr_o;
  wire sbreadonaddr_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:72.45" */
  output sbreadondata_o;
  wire sbreadondata_o;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:181.26" */
  wire selected_hart;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:26.45" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:200.49" */
  wire [1:0] unavailable_aligned;
  /* src = "rtl/riscv-dbg/dm_csrs.sv:44.45" */
  input unavailable_i;
  wire unavailable_i;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(dmi_req_i[40:34]),
    .B(5'h16),
    .Y(\$103y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(dmi_req_i[40:34]),
    .B(5'h18),
    .Y(\$104y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(dmi_req_i[40:34]),
    .B(5'h17),
    .Y(\$105y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(dmi_req_i[40:34]),
    .B(5'h1d),
    .Y(\$106y )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$108  (
    .A(dmi_req_i[40:34]),
    .B(6'h27),
    .Y(\$108y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\$107y ),
    .B(\$108y ),
    .Y(\$109y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:319.33-319.87" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$111  (
    .A(progbuf_q),
    .S(dmi_req_i[36:34]),
    .Y(\$111y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.27-323.86" */
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$115  (
    .A({ 8'h00, abstractauto_q[23:16] }),
    .S(dmi_req_i[37:34]),
    .Y(\$115y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:328.17-328.43" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(cmderr_q),
    .Y(\$117y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(dmi_req_i[40:34]),
    .B(7'h40),
    .Y(\$122y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(dmi_req_i[40:34]),
    .B(5'h13),
    .Y(\$123y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(dmi_req_i[40:34]),
    .B(6'h34),
    .Y(\$124y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(dmi_req_i[40:34]),
    .B(6'h35),
    .Y(\$125y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(dmi_req_i[40:34]),
    .B(6'h38),
    .Y(\$126y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(dmi_req_i[40:34]),
    .B(6'h39),
    .Y(\$127y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(dmi_req_i[40:34]),
    .B(6'h3a),
    .Y(\$128y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$129  (
    .A(dmi_req_i[40:34]),
    .B(6'h3c),
    .Y(\$129y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.15-348.45" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$130  (
    .A(sbbusy_i),
    .B(sbcs_q[22]),
    .Y(\$130y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:352.36-352.56" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(sbcs_q[14:12]),
    .Y(\$131y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(dmi_req_i[40:34]),
    .B(6'h3d),
    .Y(\$135y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.9-370.43" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(dmi_req_ready_o),
    .B(dmi_req_valid_i),
    .Y(\$149y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.47-370.70" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(dmi_req_i[33:32]),
    .B(2'h2),
    .Y(\$150y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:370.9-370.70" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\$149y ),
    .B(\$150y ),
    .Y(\$151y )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(dmi_req_i[40:34]),
    .B(3'h5),
    .Y(\$153y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(\$152y ),
    .B(\$153y ),
    .Y(\$154y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:376.15-376.81" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$160  (
    .A(1'h1),
    .S(dmi_req_i[34]),
    .Y({ \$160y [63], \$160y [31] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:376.15-376.81" */
  \$bwmux  #(
    .WIDTH(32'd64)
  ) \$162  (
    .A(data_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31] }),
    .Y(\$162y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:378.29-378.74" */
  \$bmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) \$164  (
    .A({ 14'bxxxx0000000000, abstractauto_q[1:0] }),
    .S({ autoexecdata_idx[3:2], dmi_req_i[35:34] }),
    .Y(\$164y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(dmi_req_i[40:34]),
    .B(5'h10),
    .Y(\$176y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(dmi_req_i[40:34]),
    .B(5'h11),
    .Y(\$185y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(dmi_req_i[40:34]),
    .B(5'h12),
    .Y(\$186y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.38-406.58" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$189  (
    .A(dmi_req_i[10:8]),
    .Y(\$189y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:185.33-185.50" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(resp_queue_empty),
    .Y(dmi_resp_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.38-406.69" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$190  (
    .A(\$189y ),
    .B(cmderr_q),
    .Y(\$190y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:186.33-186.49" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(resp_queue_full),
    .Y(dmi_req_ready_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:187.33-187.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(dmi_req_valid_i),
    .B(dmi_req_ready_o),
    .Y(resp_queue_push)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$219  (
    .A(1'h1),
    .S(dmi_req_i[36:34]),
    .Y({ \$219y [255], \$219y [223], \$219y [191], \$219y [159], \$219y [127], \$219y [95], \$219y [63], \$219y [31] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:445.13-445.84" */
  \$bwmux  #(
    .WIDTH(32'd256)
  ) \$221  (
    .A(progbuf_q),
    .B({ dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0], dmi_req_i[31:0] }),
    .S({ \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31] }),
    .Y(progbuf_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:225.32-225.59" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) \$23  (
    .A(dmi_req_i[37:36]),
    .B(1'h1),
    .Y(autoexecdata_idx[3:2])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:468.56-468.73" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(dmi_req_i[22]),
    .Y(\$232y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:468.34-468.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(sbcs_q[22]),
    .B(\$232y ),
    .Y(\$233y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:469.35-469.48" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(dmi_req_i[14:12]),
    .Y(\$234y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:550.9-550.31" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$300  (
    .A(dmcontrol_q[30]),
    .Y(\$300y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:550.9-550.56" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$301  (
    .A(\$300y ),
    .B(\$dmcontrol_d$279 [30]),
    .Y(clear_resumeack_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:553.9-553.45" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$303  (
    .A(dmcontrol_q[30]),
    .B(resumeack_i),
    .Y(\$303y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:588.27-588.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$321  (
    .A(dmi_resp_ready_i),
    .B(dmi_resp_valid_o),
    .Y(resp_queue_pop)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:599.25-599.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$322  (
    .A(dmi_rst_ni),
    .Y(\$322y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:255.61-255.96" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(unavailable_i),
    .Y(\$51y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:255.29-255.96" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(halted_i),
    .B(\$51y ),
    .Y(dmstatus[9])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:258.29-258.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(halted_i),
    .Y(\$64y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:258.29-258.97" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(\$64y ),
    .B(\$51y ),
    .Y(dmstatus[11])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.47-296.69" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(dmi_req_i[33:32]),
    .B(1'h1),
    .Y(\$80y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:296.9-296.69" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(\$149y ),
    .B(\$80y ),
    .Y(\$81y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:299.33-299.81" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$86  (
    .A(data_q[31:0]),
    .B(data_q[63:32]),
    .S(dmi_req_i[34]),
    .Y(\$86y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14250  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8998_Y [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14257 ),
    .Q(sbdata_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14259  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8998_Y [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14266 ),
    .Q(sbdata_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$14268  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [28:23]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14275 ),
    .Q(sbcs_q[28:23])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14277  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [15]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14275 ),
    .Q(sbcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14286  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [20]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14275 ),
    .Q(sbcs_q[20])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14295  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [14:12]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14304 ),
    .Q(sbcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14306  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [16]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14275 ),
    .Q(sbcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h2),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14315  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [19:17]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14275 ),
    .Q(sbcs_q[19:17])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14324  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [255:224]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[255:224])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14333  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [223:192]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[223:192])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14342  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [191:160]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[191:160])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14351  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [159:128]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[159:128])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14360  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [127:96]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[127:96])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14369  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [95:64]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[95:64])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14378  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14387  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$8995_Y [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14331 ),
    .Q(progbuf_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14396  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$328 [1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14401 ),
    .Q(dmcontrol_q[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14403  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$328 [31]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14401 ),
    .Q(dmcontrol_q[31])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14410  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$337 [63:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14417 ),
    .Q(data_q[63:32])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14419  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$data_q$337 [31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14417 ),
    .Q(data_q[31:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(24'h000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd24)
  ) \$auto$ff.cc:266:slice$14428  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$330 [23:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14435 ),
    .Q(command_q[23:0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14437  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$command_q$330 [31:24]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14435 ),
    .Q(command_q[31:24])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14464  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [29]),
    .Q(sbcs_q[29])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$15065  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(dmi_req_i[0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$15066 ),
    .Q(dmcontrol_q[0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$15073  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$332 [23:16]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14453 ),
    .Q(abstractauto_q[23:16])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$15074  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$abstractauto_q$332 [1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14453 ),
    .Q(abstractauto_q[1:0])
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14252  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$151y , \$129y  }),
    .B(4'ha),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14251 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14254  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$130y , \$151y , \$129y  }),
    .B(5'h17),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14253 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14256  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$151y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14255 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14263  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$135y , \$151y  }),
    .B(4'h9),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14262 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14265  (
    .A({ dmcontrol_q[0], sbdata_valid_i, \$130y , \$135y , \$151y  }),
    .B(5'h17),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14264 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14270  (
    .A({ dmcontrol_q[0], \$151y , \$126y  }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14269 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14272  (
    .A({ dmcontrol_q[0], sbbusy_i, \$151y , \$126y  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14271 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14274  (
    .A({ dmcontrol_q[0], \$151y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14273 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14297  (
    .A({ dmcontrol_q[0], sberror_valid_i, \$151y , \$126y  }),
    .B(4'ha),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14296 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14299  (
    .A({ dmcontrol_q[0], sberror_valid_i, sbbusy_i, \$234y , \$151y , \$126y  }),
    .B(6'h23),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14298 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14301  (
    .A({ dmcontrol_q[0], sberror_valid_i, sbbusy_i, \$151y , \$126y  }),
    .B(5'h17),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14300 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14303  (
    .A({ dmcontrol_q[0], sberror_valid_i, \$151y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14302 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14326  (
    .A({ dmcontrol_q[0], \$151y , \$109y  }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14325 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14328  (
    .A({ dmcontrol_q[0], cmdbusy_i, \$151y , \$109y  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14327 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14400  (
    .A({ dmcontrol_q[0], \$176y , \$151y  }),
    .B(3'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14399 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14412  (
    .A({ dmcontrol_q[0], data_valid_i, \$151y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14411 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14414  (
    .A({ dmcontrol_q[0], data_valid_i, \$154y , \$151y  }),
    .B(4'h9),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14413 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14416  (
    .A({ dmcontrol_q[0], data_valid_i, cmdbusy_i, \$154y , \$151y  }),
    .B(5'h17),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14415 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14432  (
    .A({ dmcontrol_q[0], \$105y , \$151y  }),
    .B(3'h5),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14431 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14434  (
    .A({ dmcontrol_q[0], cmdbusy_i, \$105y , \$151y  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14433 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14448  (
    .A({ dmcontrol_q[0], \$151y , \$104y  }),
    .B(3'h6),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14447 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14450  (
    .A({ dmcontrol_q[0], cmdbusy_i, \$151y , \$104y  }),
    .B(4'hf),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14449 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14258  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14253 , \$auto$opt_dff.cc:194:make_patterns_logic$14251 , \$auto$opt_dff.cc:194:make_patterns_logic$14255  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14257 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14267  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14264 , \$auto$opt_dff.cc:194:make_patterns_logic$14262 , \$auto$opt_dff.cc:194:make_patterns_logic$14255  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14266 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14276  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14273 , \$auto$opt_dff.cc:194:make_patterns_logic$14271 , \$auto$opt_dff.cc:194:make_patterns_logic$14269  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14275 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14305  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14302 , \$auto$opt_dff.cc:194:make_patterns_logic$14300 , \$auto$opt_dff.cc:194:make_patterns_logic$14298 , \$auto$opt_dff.cc:194:make_patterns_logic$14296  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14304 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14332  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14327 , \$auto$opt_dff.cc:194:make_patterns_logic$14325 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14331 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14402  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14399 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14401 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14418  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14415 , \$auto$opt_dff.cc:194:make_patterns_logic$14413 , \$auto$opt_dff.cc:194:make_patterns_logic$14411  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14417 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14436  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14433 , \$auto$opt_dff.cc:194:make_patterns_logic$14431 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14435 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14454  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14449 , \$auto$opt_dff.cc:194:make_patterns_logic$14447 , \$auto$opt_dff.cc:194:make_patterns_logic$14273  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14453 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$15067  (
    .A({ \$176y , \$151y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$15066 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13662  (
    .A(dmi_req_i[40:39]),
    .Y(\$107y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13663  (
    .A(dmi_req_i[40:36]),
    .Y(\$152y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13418  (
    .A({ \$135y , \$129y , \$128y , \$127y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13417 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13422  (
    .A({ \$105y , \$154y , \$109y , \$104y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13423 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13428  (
    .A({ \$135y , \$129y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13425 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13430  (
    .A({ \$154y , \$109y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13427 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$15069  (
    .A({ \$135y , \$105y , \$154y , \$129y , \$128y , \$127y , \$126y , \$109y , \$104y , \$103y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$15070 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$15075  (
    .A({ \$125y , \$124y , \$123y , \$122y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$15076 )
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:246:merge_operators$14976  (
    .A(cmdbusy_i),
    .B({ sbbusy_i, \$130y  }),
    .S({ \$126y , \$auto$opt_reduce.cc:137:opt_pmux$13417  }),
    .Y(\$auto$rtlil.cc:3094:Pmux$14977 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$cmd_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$cmd_valid_q$331 ),
    .Q(cmd_valid_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$cmderr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$cmderr_q$329 ),
    .Q(cmderr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dmcontrol_q.resumereq  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$dmcontrol_q$328 [30]),
    .Q(dmcontrol_q[30])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$havereset_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(havereset_d),
    .Q(havereset_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(64'h0000000000000000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$driver$sbaddr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$9001_Y ),
    .Q(sbaddr_q)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusy  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [21]),
    .Q(sbcs_q[21])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:611.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$sbcs_q.sbbusyerror  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$wreduce.cc:514:run$13505 [22]),
    .Q(sbcs_q[22])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:554.7-554.36|rtl/riscv-dbg/dm_csrs.sv:553.5-555.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7649  (
    .A(\$dmcontrol_d$279 [30]),
    .B(1'h0),
    .S(\$303y ),
    .Y(dmcontrol_d[30])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:536.7-536.32|rtl/riscv-dbg/dm_csrs.sv:535.5-537.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$7655  (
    .A({ dmi_req_i[31:0], dmi_req_i[31:0] }),
    .B({ 32'h00000000, sbdata_i }),
    .S(sbdata_valid_i),
    .Y(sbdata_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:532.7-532.34|rtl/riscv-dbg/dm_csrs.sv:531.5-533.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7658  (
    .A({ \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14] }),
    .B(sberror_i),
    .S(sberror_valid_i),
    .Y(sbcs_d[14:12])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:525.7-525.45|rtl/riscv-dbg/dm_csrs.sv:524.5-526.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7661  (
    .A(\$auto$wreduce.cc:514:run$13501 [0]),
    .B(ndmreset_ack_i),
    .Y(havereset_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:520.7-520.23|rtl/riscv-dbg/dm_csrs.sv:519.5-521.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$7664  (
    .A(\$162y ),
    .B(data_i),
    .S(data_valid_i),
    .Y(data_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:515.7-515.29|rtl/riscv-dbg/dm_csrs.sv:514.5-516.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7667  (
    .A(\$cmderr_d$280 ),
    .B(cmderror_i),
    .S(cmderror_valid_i),
    .Y(cmderr_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7671  (
    .A(\$procmux$8980_Y [1]),
    .B(\$auto$rtlil.cc:3094:Pmux$14977 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$14975 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.47-506.14|rtl/riscv-dbg/dm_csrs.sv:503.11-508.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7687  (
    .A(\$procmux$8983_Y ),
    .B(\$130y ),
    .Y(\$procmux$7687_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.47-487.14|rtl/riscv-dbg/dm_csrs.sv:484.11-489.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7747  (
    .A(dmi_req_i[31:0]),
    .B(32'd0),
    .S(\$130y ),
    .Y(\$procmux$7747_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:484.11-489.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7767  (
    .A(32'd0),
    .B(\$procmux$7747_Y ),
    .S(\$128y ),
    .Y(\$procmux$7767_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7776  (
    .A(sbaddress_i),
    .B(\$procmux$7820_Y ),
    .S(\$127y ),
    .Y(\$procmux$7776_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$7782  (
    .A(\$procmux$8983_Y ),
    .B({ \$procmux$7891_Y , \$procmux$7687_Y  }),
    .S({ \$126y , \$auto$opt_reduce.cc:137:opt_pmux$13417  }),
    .Y(\$procmux$7782_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.11-470.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd20)
  ) \$procmux$7800  (
    .A({ sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .B({ \$procmux$7855_Y [21:14], \$procmux$7855_Y [11:0] }),
    .S(\$126y ),
    .Y({ \$procmux$7800_Y [21:14], \$procmux$7800_Y [11:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.47-477.14|rtl/riscv-dbg/dm_csrs.sv:474.11-480.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7820  (
    .A(dmi_req_i[31:0]),
    .B(sbaddress_i),
    .S(\$130y ),
    .Y(\$procmux$7820_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$mux  #(
    .WIDTH(32'd20)
  ) \$procmux$7855  (
    .A({ dmi_req_i[21:15], 1'h0, dmi_req_i[11:0] }),
    .B({ sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .S(sbbusy_i),
    .Y({ \$procmux$7855_Y [21:14], \$procmux$7855_Y [11:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:461.25-464.14|rtl/riscv-dbg/dm_csrs.sv:461.11-470.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7891  (
    .A(\$233y ),
    .B(sbbusy_i),
    .Y(\$procmux$7891_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:455.15-455.41|rtl/riscv-dbg/dm_csrs.sv:454.13-456.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7903  (
    .A(\$cmderr_d$144 ),
    .B(3'h1),
    .S(\$117y ),
    .Y(\$cmderr_d$167 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7946  (
    .A(\$115y ),
    .B(\$cmd_valid_d$145 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$228 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.27-452.14|rtl/riscv-dbg/dm_csrs.sv:444.11-457.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7960  (
    .A(\$cmderr_d$144 ),
    .B(\$cmderr_d$167 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$168 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:416.27-421.14|rtl/riscv-dbg/dm_csrs.sv:416.11-426.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8071  (
    .A(1'h1),
    .B(\$cmd_valid_d$145 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$201 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:406.13-406.71|rtl/riscv-dbg/dm_csrs.sv:405.11-412.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8141  (
    .A(\$190y ),
    .B(\$cmderr_d$167 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$193 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:392.13-392.55|rtl/riscv-dbg/dm_csrs.sv:391.11-393.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8178  (
    .A(havereset_q),
    .B(1'h0),
    .S(dmi_req_i[28]),
    .Y(\$auto$wreduce.cc:514:run$13499 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:375.29-380.16|rtl/riscv-dbg/dm_csrs.sv:375.13-385.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8341  (
    .A(\$164y ),
    .B(\$cmd_valid_d$145 ),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$169 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.11-499.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8372  (
    .A(\$129y ),
    .B(\$procmux$8485_Y ),
    .Y(\$procmux$8372_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:474.11-480.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8381  (
    .A(\$127y ),
    .B(\$procmux$8485_Y ),
    .Y(\$procmux$8381_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8424  (
    .A(havereset_q),
    .B(\$auto$wreduce.cc:514:run$13499 [0]),
    .S(\$176y ),
    .Y(\$auto$wreduce.cc:514:run$13500 [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:503.11-508.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8430  (
    .A(\$procmux$8980_Y [1]),
    .B(\$auto$opt_share.cc:222:merge_operators$14975 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$15070 ),
    .Y(\$procmux$8430_Y [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:493.47-496.14|rtl/riscv-dbg/dm_csrs.sv:493.11-499.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8485  (
    .A(\$131y ),
    .B(1'h0),
    .S(\$130y ),
    .Y(\$procmux$8485_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$8531  (
    .A(\$cmd_valid_d$145 ),
    .B({ \$cmd_valid_d$169 , \$cmd_valid_d$201 , \$cmd_valid_d$228  }),
    .S({ \$154y , \$105y , \$109y  }),
    .Y(\$cmd_valid_d$266 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:444.11-457.14|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd3)
  ) \$procmux$8560  (
    .A(\$cmderr_d$144 ),
    .B({ \$cmderr_d$193 , \$cmderr_d$168  }),
    .S({ \$103y , \$auto$opt_reduce.cc:137:opt_pmux$13423  }),
    .Y(\$cmderr_d$264 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:388.24-394.12|rtl/riscv-dbg/dm_csrs.sv:371.7-511.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8586  (
    .A({ 1'hx, dmcontrol_q[30], 29'b0000000000000000000000000000x, dmcontrol_q[0] }),
    .B(dmi_req_i[31:0]),
    .S(\$176y ),
    .Y(\$dmcontrol_d$263 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8592  (
    .A(\$151y ),
    .B(\$procmux$8372_Y ),
    .Y(sbdata_write_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8596  (
    .A(\$151y ),
    .B(\$procmux$8381_Y ),
    .Y(sbaddress_write_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8608  (
    .A(havereset_q),
    .B(\$auto$wreduce.cc:514:run$13500 [0]),
    .S(\$151y ),
    .Y(\$auto$wreduce.cc:514:run$13501 [0])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8612  (
    .A(\$procmux$8980_Y [1]),
    .B(\$procmux$8430_Y [1]),
    .S(\$151y ),
    .Y(resp_queue_inp[1])
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8628  (
    .A({ 32'h00000000, sbaddress_i }),
    .B({ \$procmux$7767_Y , \$procmux$7776_Y  }),
    .S(\$151y ),
    .Y(sbaddr_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd27)
  ) \$procmux$8632  (
    .A({ 6'hxx, \$procmux$8983_Y , sbcs_q[21], 8'bxxxxxxx0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] }),
    .B({ dmi_req_i[28:23], \$procmux$7782_Y , \$procmux$7800_Y [21:14], \$procmux$7800_Y [11:0] }),
    .S(\$151y ),
    .Y({ sbcs_d[28:22], \$auto$wreduce.cc:514:run$13504 [21], sbcs_d[20:15], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [11:0] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8640  (
    .A(\$cmd_valid_d$145 ),
    .B(\$cmd_valid_d$266 ),
    .S(\$151y ),
    .Y(cmd_valid_d)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8648  (
    .A(\$cmderr_d$144 ),
    .B(\$cmderr_d$264 ),
    .S(\$151y ),
    .Y(\$cmderr_d$280 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:371.7-511.14|rtl/riscv-dbg/dm_csrs.sv:370.5-512.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8652  (
    .A({ 1'hx, dmcontrol_q[30], 29'b0000000000000000000000000000x, dmcontrol_q[0] }),
    .B(\$dmcontrol_d$263 ),
    .S(\$151y ),
    .Y({ dmcontrol_d[31], \$dmcontrol_d$279 [30:2], dmcontrol_d[1:0] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd14),
    .WIDTH(32'd32)
  ) \$procmux$8656  (
    .A(32'd0),
    .B({ \$86y , dmcontrol_q[31:30], 28'h0000000, dmcontrol_q[1:0], 12'h000, havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[11], dmstatus[9], dmstatus[9], 8'h82, hartinfo_i, 19'h04000, cmdbusy_i, 1'h0, cmderr_q, 16'h0200, abstractauto_q[23:16], 14'h0000, abstractauto_q[1:0], next_dm_addr_i, \$111y , 31'h00000000, halted_i, 2'h0, sbcs_q[29:12], 1'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29], sbaddr_q[31:0], sbaddr_q[63:32], \$procmux$8798_Y , \$procmux$8736_Y  }),
    .S({ \$154y , \$176y , \$185y , \$186y , \$103y , \$104y , \$106y , \$109y , \$auto$opt_reduce.cc:137:opt_pmux$15076 , \$126y , \$127y , \$128y , \$129y , \$135y  }),
    .Y(\$procmux$8656_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8689  (
    .A(sbcs_q[22]),
    .B(\$130y ),
    .Y(\$procmux$8689_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$8697  (
    .A(1'h0),
    .B({ cmdbusy_i, \$130y  }),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$13427 , \$auto$opt_reduce.cc:137:opt_pmux$13425  }),
    .Y(\$procmux$8697_Y [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.47-361.14|rtl/riscv-dbg/dm_csrs.sv:358.11-363.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8736  (
    .A(sbdata_q[63:32]),
    .B(32'd0),
    .S(\$130y ),
    .Y(\$procmux$8736_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8771  (
    .A(\$115y ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$120 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:323.13-323.87|rtl/riscv-dbg/dm_csrs.sv:320.11-331.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8789  (
    .A(cmderr_q),
    .B(\$cmderr_d$118 ),
    .S(cmdbusy_i),
    .Y(\$cmderr_d$119 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:348.47-351.14|rtl/riscv-dbg/dm_csrs.sv:348.11-354.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$8798  (
    .A(sbdata_q[31:0]),
    .B(32'd0),
    .S(\$130y ),
    .Y(\$procmux$8798_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:329.15-329.41|rtl/riscv-dbg/dm_csrs.sv:328.13-330.16" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8814  (
    .A(cmderr_q),
    .B(3'h1),
    .S(\$117y ),
    .Y(\$cmderr_d$118 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:302.13-302.73|rtl/riscv-dbg/dm_csrs.sv:300.11-309.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8868  (
    .A(\$164y ),
    .B(1'h0),
    .S(cmdbusy_i),
    .Y(\$cmd_valid_d$95 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:358.11-363.14|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8936  (
    .A(sbcs_q[22]),
    .B(\$procmux$8689_Y ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13425 ),
    .Y(\$procmux$8936_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$8953  (
    .A(1'h0),
    .B({ \$cmd_valid_d$95 , \$cmd_valid_d$120  }),
    .S({ \$154y , \$109y  }),
    .Y(\$cmd_valid_d$140 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:318.38-332.12|rtl/riscv-dbg/dm_csrs.sv:297.7-366.14" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8970  (
    .A(cmderr_q),
    .B(\$cmderr_d$119 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13427 ),
    .Y(\$cmderr_d$139 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8977  (
    .A(\$81y ),
    .B(\$procmux$8372_Y ),
    .Y(sbdata_read_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd33)
  ) \$procmux$8980  (
    .A(33'h000000000),
    .B({ \$procmux$8656_Y , \$procmux$8697_Y [1] }),
    .S(\$81y ),
    .Y({ resp_queue_inp[33:2], \$procmux$8980_Y [1] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$8983  (
    .A(sbcs_q[22]),
    .B(\$procmux$8936_Y ),
    .S(\$81y ),
    .Y(\$procmux$8983_Y )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$8986  (
    .A(\$81y ),
    .B(\$cmd_valid_d$140 ),
    .Y(\$cmd_valid_d$145 )
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:297.7-366.14|rtl/riscv-dbg/dm_csrs.sv:296.5-367.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$8989  (
    .A(cmderr_q),
    .B(\$cmderr_d$139 ),
    .S(\$81y ),
    .Y(\$cmderr_d$144 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8992  (
    .A(64'h0000000000000000),
    .B(data_d),
    .S(dmcontrol_q[0]),
    .Y(\$data_q$337 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd256)
  ) \$procmux$8995  (
    .A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .B(progbuf_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$8995_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$8998  (
    .A(64'h0000000000000000),
    .B(sbdata_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$8998_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$9001  (
    .A(64'h0000000000000000),
    .B(sbaddr_d),
    .S(dmcontrol_q[0]),
    .Y(\$procmux$9001_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd18)
  ) \$procmux$9004  (
    .A(18'h00080),
    .B({ sbcs_d[28:22], sbbusy_i, sbcs_d[20:12], 1'h1 }),
    .S(dmcontrol_q[0]),
    .Y({ \$auto$wreduce.cc:514:run$13505 [28:12], \$auto$wreduce.cc:514:run$13505 [29] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd10)
  ) \$procmux$9007  (
    .A(10'h000),
    .B({ dmi_req_i[23:16], dmi_req_i[1:0] }),
    .S(dmcontrol_q[0]),
    .Y({ \$abstractauto_q$332 [23:16], \$abstractauto_q$332 [1:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$9010  (
    .A(dmcontrol_q[0]),
    .B(cmd_valid_d),
    .Y(\$cmd_valid_q$331 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$9013  (
    .A(32'd0),
    .B(dmi_req_i[31:0]),
    .S(dmcontrol_q[0]),
    .Y(\$command_q$330 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9016  (
    .A(3'h0),
    .B(cmderr_d),
    .S(dmcontrol_q[0]),
    .Y(\$cmderr_q$329 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_csrs.sv:629.34-653.10|rtl/riscv-dbg/dm_csrs.sv:629.7-664.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$9019  (
    .A(3'h0),
    .B({ dmcontrol_d[31:30], dmcontrol_d[1] }),
    .S(dmcontrol_q[0]),
    .Y({ \$dmcontrol_q$328 [31:30], \$dmcontrol_q$328 [1] })
  );
  /* src = "rtl/riscv-dbg/dm_csrs.sv:596.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo  i_fifo (
    .clk_i(clk_i),
    .data_i({ resp_queue_inp[33:1], resp_queue_inp[1] }),
    .data_o(dmi_resp_o),
    .empty_o(resp_queue_empty),
    .flush_i(\$322y ),
    .full_o(resp_queue_full),
    .pop_i(resp_queue_pop),
    .push_i(resp_queue_push),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { \$160y [62:32], \$160y [30:0] } = { \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [63], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31], \$160y [31] };
  assign { \$219y [254:224], \$219y [222:192], \$219y [190:160], \$219y [158:128], \$219y [126:96], \$219y [94:64], \$219y [62:32], \$219y [30:0] } = { \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [255], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [223], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [191], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [159], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [127], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [95], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [63], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31], \$219y [31] };
  assign { \$abstractauto_q$332 [31:24], \$abstractauto_q$332 [15:2] } = 22'h000000;
  assign \$auto$wreduce.cc:514:run$13499 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13500 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13501 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$13504 [31:22], \$auto$wreduce.cc:514:run$13504 [20:15], \$auto$wreduce.cc:514:run$13504 [13:12] } = { 3'hx, sbcs_d[28:22], sbcs_d[20:15], \$auto$wreduce.cc:514:run$13504 [14], \$auto$wreduce.cc:514:run$13504 [14] };
  assign { \$auto$wreduce.cc:514:run$13505 [31:30], \$auto$wreduce.cc:514:run$13505 [11:0] } = { 3'h0, \$auto$wreduce.cc:514:run$13505 [29], 7'h00, \$auto$wreduce.cc:514:run$13505 [29], \$auto$wreduce.cc:514:run$13505 [29], \$auto$wreduce.cc:514:run$13505 [29] };
  assign { \$dmcontrol_d$279 [31], \$dmcontrol_d$279 [1:0] } = { dmcontrol_d[31], dmcontrol_d[1:0] };
  assign { \$dmcontrol_q$328 [29:2], \$dmcontrol_q$328 [0] } = { 28'h0000000, dmcontrol_d[0] };
  assign \$procmux$7800_Y [13:12] = { \$procmux$7800_Y [14], \$procmux$7800_Y [14] };
  assign \$procmux$7855_Y [13:12] = { \$procmux$7855_Y [14], \$procmux$7855_Y [14] };
  assign \$procmux$8430_Y [0] = \$procmux$8430_Y [1];
  assign \$procmux$8697_Y [0] = \$procmux$8697_Y [1];
  assign { \$procmux$8980_Y [33:2], \$procmux$8980_Y [0] } = { resp_queue_inp[33:2], \$procmux$8980_Y [1] };
  assign abstractauto_d = { 8'h00, dmi_req_i[23:16], 14'h0000, dmi_req_i[1:0] };
  assign { abstractauto_q[31:24], abstractauto_q[15:2] } = 22'h000000;
  assign abstractcs = { cmdbusy_i, 1'h0, cmderr_q, 8'h02 };
  assign autoexecdata_idx[1:0] = dmi_req_i[35:34];
  assign cmd_o = command_q;
  assign cmd_valid_o = cmd_valid_q;
  assign command_d = dmi_req_i[31:0];
  assign data_o = data_q;
  assign dm_csr_addr = dmi_req_i[40:34];
  assign dmactive_o = dmcontrol_q[0];
  assign dmcontrol_d[29:2] = 28'h0000000;
  assign dmcontrol_q[29:2] = 28'h0000000;
  assign { dmstatus[19:12], dmstatus[10], dmstatus[8:0] } = { havereset_q, havereset_q, resumeack_i, resumeack_i, 2'h0, unavailable_i, unavailable_i, dmstatus[11], dmstatus[9], 8'h82 };
  assign dtm_op = dmi_req_i[33:32];
  assign halted = { 31'h00000000, halted_i };
  assign halted_aligned = { 1'h0, halted_i };
  assign halted_flat1 = { 31'h00000000, halted_i };
  assign halted_flat2 = { 31'h00000000, halted_i };
  assign halted_flat3 = { 31'h00000000, halted_i };
  assign halted_reshaped0 = { 31'h00000000, halted_i };
  assign halted_reshaped1 = { 31'h00000000, halted_i };
  assign halted_reshaped2 = { 31'h00000000, halted_i };
  assign haltreq_o = dmcontrol_q[31];
  assign haltsum0 = 32'b0000000000000000000000000000000x;
  assign haltsum1 = 32'b0000000000000000000000000000000x;
  assign haltsum2 = 32'b0000000000000000000000000000000x;
  assign haltsum3 = { 31'h00000000, halted_i };
  assign hartinfo_aligned = { 32'h00000000, hartinfo_i };
  assign hartsel_idx0 = 15'h0000;
  assign hartsel_idx1 = 10'h000;
  assign hartsel_idx2 = 5'h00;
  assign hartsel_o = 20'h00000;
  assign havereset_d_aligned = { 1'hx, havereset_d };
  assign havereset_q_aligned = { 1'h0, havereset_q };
  assign ndmreset_o = dmcontrol_q[1];
  assign progbuf_o = progbuf_q;
  assign resp_queue_inp[0] = resp_queue_inp[1];
  assign resumeack_aligned = { 1'h0, resumeack_i };
  assign resumereq_o = dmcontrol_q[30];
  assign sbaccess_o = sbcs_q[19:17];
  assign sbaddress_o = sbaddr_q[31:0];
  assign sbautoincrement_o = sbcs_q[16];
  assign { sbcs_d[21], sbcs_d[11:0] } = { sbbusy_i, 12'h407 };
  assign { sbcs_q[31:30], sbcs_q[11:0] } = { 3'h0, sbcs_q[29], 7'h00, sbcs_q[29], sbcs_q[29], sbcs_q[29] };
  assign sbdata_o = sbdata_q[31:0];
  assign sbreadonaddr_o = sbcs_q[20];
  assign sbreadondata_o = sbcs_q[15];
  assign selected_hart = 1'h0;
  assign unavailable_aligned = { 1'h0, unavailable_i };
endmodule

/* src = "rtl/riscv-dbg/dm_mem.sv:19.8" */
module \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem (clk_i, rst_ni, debug_req_o, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, data_i, data_o, ndmreset_i, hartsel_i, haltreq_i, resumereq_i, clear_resumeack_i, halted_o, resuming_o, progbuf_i, data_valid_o, cmd_valid_i
, cmd_i, cmderror_valid_o, cmderror_o, cmdbusy_o);
  wire \$100y ;
  wire [31:0] \$110y ;
  wire \$111y ;
  wire \$128y ;
  wire \$130y ;
  wire \$133y ;
  wire \$134y ;
  wire \$135y ;
  wire \$136y ;
  wire \$139y ;
  wire \$13y ;
  wire \$140y ;
  wire \$141y ;
  wire \$153y ;
  wire \$154y ;
  wire \$155y ;
  wire [63:0] \$158y ;
  wire \$160y ;
  wire \$161y ;
  wire \$162y ;
  wire [2:0] \$163y ;
  wire [63:0] \$165y ;
  wire \$167y ;
  wire \$168y ;
  wire \$169y ;
  wire \$16y ;
  wire [11:0] \$170y ;
  wire \$172y ;
  wire [15:0] \$178y ;
  wire [57:0] \$180y ;
  wire \$18y ;
  wire \$19y ;
  wire \$205y ;
  wire \$206y ;
  wire \$207y ;
  wire \$208y ;
  wire \$210y ;
  wire \$211y ;
  wire \$212y ;
  wire \$213y ;
  wire \$21y ;
  wire \$222y ;
  wire \$223y ;
  wire \$236y ;
  wire \$238y ;
  wire \$23y ;
  wire \$247y ;
  wire \$248y ;
  wire \$24y ;
  wire \$26y ;
  wire \$28y ;
  wire \$36y ;
  wire \$45y ;
  wire \$4y ;
  wire \$5y ;
  wire \$62y ;
  wire \$64y ;
  wire [1:0] \$69y ;
  wire \$6y ;
  wire \$78y ;
  wire \$79y ;
  wire \$80y ;
  wire \$87y ;
  /* unused_bits = "1" */
  wire [1:0] \$94y ;
  wire \$95y ;
  wire [126:0] \$abstract_cmd[255:128]$215 ;
  wire [126:0] \$abstract_cmd[255:128]$216 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  wire [127:0] \$abstract_cmd[255:128]$218 ;
  wire [126:0] \$abstract_cmd[255:128]$231 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$232 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  wire [127:0] \$abstract_cmd[255:128]$234 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$242 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [127:0] \$abstract_cmd[255:128]$245 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  wire [31:0] \$abstract_cmd[319:288]$249 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  wire [31:0] \$abstract_cmd[31:0]$217 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$241 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  wire [31:0] \$abstract_cmd[31:0]$244 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14466 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14468 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14470 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14472 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14477 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14479 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14486 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14488 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14490 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14474 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14483 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14492 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$14969 ;
  wire \$auto$rtlil.cc:2957:Not$13170 ;
  /* unused_bits = "1" */
  wire [1:0] \$auto$rtlil.cc:2957:Not$13176 ;
  wire \$auto$rtlil.cc:2957:Not$14482 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$auto$wreduce.cc:514:run$13524 ;
  wire [63:0] \$auto$wreduce.cc:514:run$13527 ;
  wire [63:0] \$auto$wreduce.cc:514:run$13528 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13529 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13530 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13531 ;
  wire [1:0] \$auto$wreduce.cc:514:run$13532 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  wire [2:0] \$cmderror_o$11 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire [2:0] \$cmderror_o$43 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire [2:0] \$cmderror_o$47 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  wire \$cmderror_valid_o$46 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [63:0] \$data_bits$126 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [63:0] \$data_bits$190 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[15:8]$104 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[23:16]$106 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[31:0]$109 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[31:24]$108 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[39:32]$113 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[47:40]$115 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[55:48]$117 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  wire [31:0] \$data_bits[63:32]$120 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[63:56]$119 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  wire [7:0] \$data_bits[7:0]$102 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$data_valid_o$192 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$exception$185 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  wire \$go$40 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire \$going$184 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  wire [1:0] \$halted_aligned$124 ;
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  wire [1:0] \$halted_aligned$188 ;
  wire \$procmux$6519_Y ;
  wire \$procmux$6662_Y ;
  wire [63:0] \$procmux$6820_Y ;
  wire [63:0] \$procmux$6854_Y ;
  wire \$procmux$7274_CMP ;
  wire \$procmux$7279_CMP ;
  wire \$procmux$7294_CMP ;
  wire [1:0] \$procmux$7296_Y ;
  wire [1:0] \$procmux$7308_Y ;
  wire [308:0] abstract_cmd;
  /* src = "rtl/riscv-dbg/dm_mem.sv:122.19" */
  /* unused_bits = "13 23" */
  wire [23:0] ac_ar;
  /* src = "rtl/riscv-dbg/dm_mem.sv:56.44" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:58.44" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:34.44" */
  input clear_resumeack_i;
  wire clear_resumeack_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:25.44" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:47.44" */
  input [31:0] cmd_i;
  wire [31:0] cmd_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:46.44" */
  input cmd_valid_i;
  wire cmd_valid_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:50.44" */
  output cmdbusy_o;
  wire cmdbusy_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:49.44" */
  output [2:0] cmderror_o;
  wire [2:0] cmderror_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:48.44" */
  output cmderror_valid_o;
  wire cmderror_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:225.35" */
  wire [63:0] data_bits;
  /* src = "rtl/riscv-dbg/dm_mem.sv:42.44" */
  input [63:0] data_i;
  wire [63:0] data_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:43.44" */
  output [63:0] data_o;
  wire [63:0] data_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:44.44" */
  output data_valid_o;
  wire data_valid_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:28.44" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:91.9" */
  wire exception;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.9" */
  wire fwd_rom_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:121.20" */
  wire fwd_rom_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.31" */
  wire go;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.35" */
  wire going;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.30" */
  wire [1:0] halted_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.23" */
  wire halted_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.30" */
  wire [1:0] halted_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:37.44" */
  output halted_o;
  wire halted_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:87.33" */
  wire halted_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:106.48" */
  wire [1:0] halted_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.49" */
  wire [1:0] haltreq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:32.44" */
  input haltreq_i;
  wire haltreq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.26" */
  wire hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:30.44" */
  input [19:0] hartsel_i;
  wire [19:0] hartsel_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:29.44" */
  input ndmreset_i;
  wire ndmreset_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:85.41" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_mem.sv:40.44" */
  input [255:0] progbuf_i;
  wire [255:0] progbuf_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:59.44" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:95.25" */
  wire [63:0] rdata_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:54.44" */
  input req_i;
  wire req_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:89.23" */
  wire resume;
  /* src = "rtl/riscv-dbg/dm_mem.sv:105.30" */
  wire [1:0] resumereq_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:33.44" */
  input resumereq_i;
  wire resumereq_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:107.46" */
  wire [1:0] resumereq_wdata_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.23" */
  wire resuming_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.30" */
  wire [1:0] resuming_d_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:38.44" */
  output resuming_o;
  wire resuming_o;
  /* src = "rtl/riscv-dbg/dm_mem.sv:88.35" */
  wire resuming_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:108.50" */
  wire [1:0] resuming_q_aligned;
  /* src = "rtl/riscv-dbg/dm_mem.sv:488.16" */
  wire [63:0] rom_addr;
  /* src = "rtl/riscv-dbg/dm_mem.sv:94.16" */
  wire [63:0] rom_rdata;
  /* src = "rtl/riscv-dbg/dm_mem.sv:26.44" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.11" */
  wire [1:0] state_d;
  /* src = "rtl/riscv-dbg/dm_mem.sv:134.20" */
  wire [1:0] state_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:92.9" */
  wire unsupported_command;
  /* src = "rtl/riscv-dbg/dm_mem.sv:100.35" */
  wire wdata_hartsel;
  /* src = "rtl/riscv-dbg/dm_mem.sv:57.44" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:55.44" */
  input we_i;
  wire we_i;
  /* src = "rtl/riscv-dbg/dm_mem.sv:96.16" */
  wire word_enable32_q;
  /* src = "rtl/riscv-dbg/dm_mem.sv:215.16" */
  wire [63:0] word_mux;
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.19-269.88" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A({ \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [9:5], addr_i[6:2] }),
    .Y(\$100y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.20-269.81" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd6)
  ) \$110  (
    .A(addr_i[11:7]),
    .B(3'h7),
    .Y({ \$110y [31], \$110y [9:5] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:269.19-269.88" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A({ \$110y [31], \$110y [9:5], addr_i[6:2] }),
    .B(1'h1),
    .Y(\$111y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(addr_i[11:0]),
    .B(10'h300),
    .Y(\$128y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.13-158.39" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$13  (
    .A(resumereq_i),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$13y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:293.17-293.55" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$130  (
    .A(resumereq_i),
    .B(1'h0),
    .S(wdata_i[0]),
    .Y(\$130y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.19-301.54" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$133  (
    .A(cmd_i[31:24]),
    .Y(\$133y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:302.19-302.34" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(cmd_i[17]),
    .Y(\$134y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.19-302.34" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$135  (
    .A(\$133y ),
    .B(\$134y ),
    .Y(\$135y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.19-302.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\$135y ),
    .B(cmd_i[18]),
    .Y(\$136y )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(addr_i[11:0]),
    .B(10'h380),
    .Y(\$139y )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$140  (
    .A(addr_i[11:0]),
    .B(10'h387),
    .Y(\$140y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(\$139y ),
    .B(\$140y ),
    .Y(\$141y )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$153  (
    .A(addr_i[11:0]),
    .B(10'h360),
    .Y(\$153y )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$154  (
    .A(addr_i[11:0]),
    .B(10'h37f),
    .Y(\$154y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(\$153y ),
    .B(\$154y ),
    .Y(\$155y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:319.23-320.64" */
  \$bmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd64)
  ) \$158  (
    .A(progbuf_i),
    .S(addr_i[4:3]),
    .Y(\$158y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.44-158.71" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(resuming_q),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$16y )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(addr_i[11:0]),
    .B(10'h338),
    .Y(\$160y )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(addr_i[11:0]),
    .B(10'h35f),
    .Y(\$161y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$162  (
    .A(\$160y ),
    .B(\$161y ),
    .Y(\$162y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:326.39-327.67" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$163  (
    .A(addr_i[5:3]),
    .B(3'h7),
    .Y(\$163y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:326.23-327.69" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd49)
  ) \$165  (
    .A({ 158'h0000000000000000000000000000000000000000, abstract_cmd[293], 6'h00, abstract_cmd[293], 31'h57b312ba, abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], 1'h0, abstract_cmd[170], abstract_cmd[170], 2'h0, abstract_cmd[170], 3'h0, abstract_cmd[170], 1'h0, abstract_cmd[170], 1'h0, abstract_cmd[170], 3'h5, abstract_cmd[223:212], abstract_cmd[170], abstract_cmd[165], abstract_cmd[206:204], 5'h00, abstract_cmd[176], abstract_cmd[170], abstract_cmd[196], 2'h1, abstract_cmd[191:180], abstract_cmd[176], abstract_cmd[174:172], abstract_cmd[170], 1'h0, abstract_cmd[165:164], 3'h2, abstract_cmd[134], abstract_cmd[146], abstract_cmd[146], abstract_cmd[146], 1'h0, abstract_cmd[134], abstract_cmd[152:148], abstract_cmd[146], abstract_cmd[144], abstract_cmd[142:132], abstract_cmd[130], 73'h100c9d4033aa280006e, abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], 1'h0, abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], abstract_cmd[0], abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], 5'h00, abstract_cmd[0], abstract_cmd[0], abstract_cmd[0], 1'h0, abstract_cmd[0] }),
    .S(\$163y ),
    .Y({ \$165y [63:52], \$165y [50], \$165y [46:44], \$165y [42], \$165y [40], \$165y [38], \$165y [36], \$165y [34:33], \$165y [31:20], \$165y [18], \$165y [16], \$165y [14:4], \$165y [2:1] })
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) \$168  (
    .A(addr_i[11:0]),
    .B(11'h7ff),
    .Y(\$168y )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(\$167y ),
    .B(\$168y ),
    .Y(\$169y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:332.18-332.88" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) \$170  (
    .A(addr_i[11:10]),
    .B(1'h1),
    .Y(\$170y [11:10])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:332.17-333.78" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A({ \$170y [11:10], addr_i[9:3] }),
    .Y(\$172y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.93" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$178  (
    .A(1'h1),
    .S(hartsel_i[0]),
    .Y({ \$178y [15], \$178y [7] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.43-158.71" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$16y ),
    .Y(\$18y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.13-158.71" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(\$13y ),
    .B(\$18y ),
    .Y(\$19y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.28-148.53" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(halted_q),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$26y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.40" */
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(cmd_i[22:20]),
    .B(2'h3),
    .Y(\$205y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(\$205y ),
    .B(cmd_i[17]),
    .Y(\$206y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.13-377.73" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(\$206y ),
    .B(cmd_i[16]),
    .Y(\$207y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.15-381.39" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(cmd_i[15:14]),
    .Y(\$208y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:159.14-159.38" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$21  (
    .A(haltreq_i),
    .B(1'h0),
    .S(hartsel_i[0]),
    .Y(\$21y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:386.61-386.76" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(cmd_i[5]),
    .Y(\$210y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:386.24-386.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$211  (
    .A(cmd_i[12]),
    .B(\$210y ),
    .Y(\$211y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.24-387.49" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(cmd_i[4:0]),
    .B(4'ha),
    .Y(\$212y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:386.24-387.50" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$213  (
    .A(\$211y ),
    .B(\$212y ),
    .Y(\$213y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.71-418.83" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$222  (
    .A(cmd_i[16]),
    .Y(\$222y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.22-418.83" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\$206y ),
    .B(\$222y ),
    .Y(\$223y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:159.13-159.38" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$21y ),
    .Y(\$23y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.22-461.50" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(cmd_i[22:20]),
    .B(2'h3),
    .Y(\$236y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:461.22-461.84" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(\$236y ),
    .B(cmd_i[19]),
    .Y(\$238y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.13-159.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$19y ),
    .B(\$23y ),
    .Y(\$24y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:473.31-473.51" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$247  (
    .A(\$procmux$6662_Y ),
    .Y(\$247y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:473.13-473.51" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$248  (
    .A(cmd_i[18]),
    .B(\$247y ),
    .Y(\$248y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:158.13-159.67" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(\$24y ),
    .B(\$26y ),
    .Y(\$28y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:186.13-186.36" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(halted_aligned[0]),
    .B(halted_aligned[1]),
    .S(hartsel_i[0]),
    .Y(\$36y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.13-148.53" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(cmd_valid_i),
    .B(\$26y ),
    .Y(\$4y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.9-196.43" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(unsupported_command),
    .B(cmd_valid_i),
    .Y(\$45y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.57-148.77" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(unsupported_command),
    .Y(\$5y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:216.21-216.54" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$53  (
    .A(rdata_q),
    .B(rom_rdata),
    .S(fwd_rom_q),
    .Y(word_mux)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:221.22-221.80" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$54  (
    .A(word_mux[31:0]),
    .B(word_mux[63:32]),
    .S(word_enable32_q),
    .Y(rdata_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:148.13-148.77" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$4y ),
    .B(\$5y ),
    .Y(\$6y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$64  (
    .A(addr_i[11:0]),
    .B(9'h100),
    .Y(\$64y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:251.13-251.49" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$69  (
    .A(1'h1),
    .S(wdata_i[0]),
    .Y(\$69y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(addr_i[11:0]),
    .B(9'h108),
    .Y(\$79y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(addr_i[11:0]),
    .B(9'h110),
    .Y(\$80y )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd12),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(addr_i[11:0]),
    .B(9'h118),
    .Y(\$95y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14465  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14474 ),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(64'h0000000000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd64)
  ) \$auto$ff.cc:266:slice$14476  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6854_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14483 ),
    .Q(rdata_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14485  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(halted_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14492 ),
    .Q(halted_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14467  (
    .A({ \$go$40 , \$procmux$7279_CMP , \$procmux$7274_CMP , ndmreset_i, \$28y , \$6y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14466 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14469  (
    .A({ \$procmux$7279_CMP , ndmreset_i, \$16y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14468 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14471  (
    .A({ \$procmux$7274_CMP , ndmreset_i, \$36y  }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14470 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14473  (
    .A({ \$go$40 , going, ndmreset_i }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14472 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14478  (
    .A({ \$169y , \$155y , \$162y , \$141y , \$128y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14477 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14480  (
    .A({ cmdbusy_o, \$130y , \$128y  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14479 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14487  (
    .A({ ndmreset_i, req_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14486 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14489  (
    .A({ ndmreset_i, we_i, req_i }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14488 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14491  (
    .A({ ndmreset_i, \$80y , \$64y , we_i, req_i }),
    .B(5'h03),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14490 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$14481  (
    .A(we_i),
    .Y(\$auto$rtlil.cc:2957:Not$14482 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14475  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14472 , \$auto$opt_dff.cc:194:make_patterns_logic$14470 , \$auto$opt_dff.cc:194:make_patterns_logic$14468 , \$auto$opt_dff.cc:194:make_patterns_logic$14466  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14474 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14484  (
    .A({ \$auto$rtlil.cc:2957:Not$14482 , \$auto$opt_dff.cc:194:make_patterns_logic$14479 , \$auto$opt_dff.cc:194:make_patterns_logic$14477 , req_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14483 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14493  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14490 , \$auto$opt_dff.cc:194:make_patterns_logic$14488 , \$auto$opt_dff.cc:194:make_patterns_logic$14486  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14492 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13666  (
    .A(addr_i[11:10]),
    .Y(\$167y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13669  (
    .A({ go, go, resume, resume }),
    .B({ \$178y [15], \$178y [7], \$178y [15], \$178y [7] }),
    .Y({ \$180y [8], \$180y [0], \$180y [9], \$180y [1] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$13168  (
    .A(resuming_q),
    .B(\$auto$rtlil.cc:2957:Not$13170 ),
    .Y(\$62y )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$13169  (
    .A(\$178y [7]),
    .Y(\$auto$rtlil.cc:2957:Not$13170 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$13174  (
    .A(halted_q),
    .B(\$auto$rtlil.cc:2957:Not$13176 [0]),
    .Y(\$87y )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:782:replace_const_cells$13175  (
    .A(\$69y [0]),
    .Y(\$auto$rtlil.cc:2957:Not$13176 [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:783:replace_const_cells$13172  (
    .A(halted_q),
    .B(\$69y [0]),
    .Y(\$78y )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:783:replace_const_cells$13178  (
    .A(\$auto$wreduce.cc:514:run$13532 [0]),
    .B(\$69y [0]),
    .Y(\$94y [0])
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13386  (
    .A({ \$procmux$7279_CMP , \$procmux$7274_CMP , \$go$40  }),
    .Y(cmdbusy_o)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$14968  (
    .A({ \$procmux$7279_CMP , \$procmux$7274_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$14969 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$fwd_rom_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[11]),
    .Q(fwd_rom_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:536.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$resuming_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(resuming_d),
    .Q(resuming_q)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:522.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$word_enable32_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[2]),
    .Q(word_enable32_q)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6481  (
    .A(1'h1),
    .B(\$procmux$6662_Y ),
    .S(\$133y ),
    .Y(unsupported_command)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6485  (
    .A(2'h1),
    .B({ \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [20] }),
    .S(\$133y ),
    .Y({ abstract_cmd[12], abstract_cmd[0] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:475.11-475.46|rtl/riscv-dbg/dm_mem.sv:473.9-476.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6489  (
    .A(\$248y ),
    .Y(\$abstract_cmd[319:288]$249 [20])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6519  (
    .A(\$238y ),
    .B(\$208y ),
    .S(\$223y ),
    .Y(\$procmux$6519_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6530  (
    .A({ 1'h0, \$238y  }),
    .B({ \$abstract_cmd[31:0]$217 [30], 1'h1 }),
    .S(\$223y ),
    .Y({ \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [20] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$6540  (
    .A({ cmd_i[22:20], 1'h0, cmd_i[11:0], 1'h1 }),
    .B(17'h02000),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$231 [78:76], \$abstract_cmd[255:128]$231 [68], \$abstract_cmd[255:128]$231 [63:52], \$abstract_cmd[255:128]$231 [126] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:442.13-448.16|rtl/riscv-dbg/dm_mem.sv:440.20-460.14" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$6580  (
    .A(11'h486),
    .B({ cmd_i[4:0], 1'h1, cmd_i[22:20], 1'h0, cmd_i[5] }),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$231 [24:20], \$abstract_cmd[255:128]$231 [16], \$abstract_cmd[255:128]$231 [14:12], \$abstract_cmd[255:128]$231 [30], \$abstract_cmd[255:128]$231 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:430.52-440.14|rtl/riscv-dbg/dm_mem.sv:429.20-460.14" */
  \$mux  #(
    .WIDTH(32'd28)
  ) \$procmux$6599  (
    .A({ \$abstract_cmd[255:128]$231 [78:76], \$abstract_cmd[255:128]$231 [68], \$abstract_cmd[255:128]$231 [63:52], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [24:20], \$abstract_cmd[255:128]$231 [16], \$abstract_cmd[255:128]$231 [14:12], \$abstract_cmd[255:128]$231 [30], \$abstract_cmd[255:128]$231 [2] }),
    .B({ cmd_i[22:20], 25'h07b3c86 }),
    .S(\$213y ),
    .Y({ \$abstract_cmd[255:128]$232 [78:76], \$abstract_cmd[255:128]$232 [68], \$abstract_cmd[255:128]$232 [63:52], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [24:20], \$abstract_cmd[255:128]$232 [16], \$abstract_cmd[255:128]$232 [14:12], \$abstract_cmd[255:128]$232 [30], \$abstract_cmd[255:128]$232 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$6627  (
    .A({ \$abstract_cmd[255:128]$232 [78:76], \$abstract_cmd[255:128]$232 [68], \$abstract_cmd[255:128]$232 [63:52], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [24:20], \$abstract_cmd[255:128]$232 [16], \$abstract_cmd[255:128]$232 [14:12], \$abstract_cmd[255:128]$232 [30], 1'h1, \$abstract_cmd[255:128]$232 [30], \$abstract_cmd[255:128]$232 [2] }),
    .B(30'h04000002),
    .S(\$208y ),
    .Y({ \$abstract_cmd[255:128]$234 [78:76], \$abstract_cmd[255:128]$234 [68], \$abstract_cmd[255:128]$234 [63:52], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [24:20], \$abstract_cmd[255:128]$234 [16], \$abstract_cmd[255:128]$234 [14:12], \$abstract_cmd[255:128]$234 [30:29], \$abstract_cmd[255:128]$234 [4], \$abstract_cmd[255:128]$234 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:424.41-429.14|rtl/riscv-dbg/dm_mem.sv:424.11-460.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$6639  (
    .A(\$208y ),
    .Y(\$abstract_cmd[31:0]$217 [30])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:418.85-461.12|rtl/riscv-dbg/dm_mem.sv:418.18-467.12" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$6651  (
    .A(30'h04000002),
    .B({ \$abstract_cmd[255:128]$234 [78:76], \$abstract_cmd[255:128]$234 [68], \$abstract_cmd[255:128]$234 [63:52], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [24:20], \$abstract_cmd[255:128]$234 [16], \$abstract_cmd[255:128]$234 [14:12], \$abstract_cmd[255:128]$234 [30:29], \$abstract_cmd[255:128]$234 [4], \$abstract_cmd[255:128]$234 [2] }),
    .S(\$223y ),
    .Y({ \$abstract_cmd[255:128]$242 [78:76], \$abstract_cmd[255:128]$242 [68], \$abstract_cmd[255:128]$242 [63:52], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [24:20], \$abstract_cmd[255:128]$242 [16], \$abstract_cmd[255:128]$242 [14:12], \$abstract_cmd[255:128]$242 [30:29], \$abstract_cmd[255:128]$242 [4], \$abstract_cmd[255:128]$242 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6662  (
    .A(\$procmux$6519_Y ),
    .B(\$208y ),
    .S(\$207y ),
    .Y(\$procmux$6662_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd54)
  ) \$procmux$6670  (
    .A({ 2'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [78:76], \$abstract_cmd[255:128]$242 [68], \$abstract_cmd[255:128]$242 [63:52], 2'h0, \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 1'h1, \$abstract_cmd[255:128]$242 [24:20], \$abstract_cmd[255:128]$242 [29], \$abstract_cmd[255:128]$242 [16], \$abstract_cmd[255:128]$242 [14:12], 5'h00, \$abstract_cmd[255:128]$242 [30:29], \$abstract_cmd[255:128]$242 [4], \$abstract_cmd[255:128]$242 [2] }),
    .B({ \$abstract_cmd[255:128]$218 [95:84], 2'h0, \$abstract_cmd[255:128]$218 [126], 3'h4, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 7'h00, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [46:44], \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [36], \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [30], 1'h0, \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [16], \$abstract_cmd[255:128]$218 [14:7], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [4], \$abstract_cmd[255:128]$218 [2] }),
    .S(\$207y ),
    .Y({ \$abstract_cmd[255:128]$245 [95:84], \$abstract_cmd[255:128]$245 [78:76], \$abstract_cmd[255:128]$245 [68], \$abstract_cmd[255:128]$245 [63:52], \$abstract_cmd[255:128]$245 [70], \$abstract_cmd[255:128]$245 [46:44], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [36], \$abstract_cmd[255:128]$245 [24:20], \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [16], \$abstract_cmd[255:128]$245 [14:7], \$abstract_cmd[255:128]$245 [30], \$abstract_cmd[255:128]$245 [5:4], \$abstract_cmd[255:128]$245 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:377.75-418.12|rtl/riscv-dbg/dm_mem.sv:377.9-467.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6678  (
    .A({ \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [20] }),
    .B({ \$abstract_cmd[31:0]$217 [30], 1'h1 }),
    .S(\$207y ),
    .Y({ \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [20] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd17)
  ) \$procmux$6685  (
    .A({ cmd_i[11:0], cmd_i[22:20], 2'h2 }),
    .B(17'h00001),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$215 [95:84], \$abstract_cmd[255:128]$215 [46:44], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [36] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:399.13-405.16|rtl/riscv-dbg/dm_mem.sv:397.20-417.14" */
  \$mux  #(
    .WIDTH(32'd11)
  ) \$procmux$6719  (
    .A(11'h082),
    .B({ 1'h1, cmd_i[22:20], cmd_i[4:0], 1'h0, cmd_i[5] }),
    .S(cmd_i[12]),
    .Y({ \$abstract_cmd[255:128]$215 [16], \$abstract_cmd[255:128]$215 [14:7], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:387.52-397.14|rtl/riscv-dbg/dm_mem.sv:386.20-417.14" */
  \$mux  #(
    .WIDTH(32'd28)
  ) \$procmux$6735  (
    .A({ \$abstract_cmd[255:128]$215 [95:84], \$abstract_cmd[255:128]$215 [46:44], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [36], \$abstract_cmd[255:128]$215 [16], \$abstract_cmd[255:128]$215 [14:7], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [2] }),
    .B({ 12'h7b3, cmd_i[22:20], 13'h1082 }),
    .S(\$213y ),
    .Y({ \$abstract_cmd[255:128]$216 [95:84], \$abstract_cmd[255:128]$216 [46:44], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [36], \$abstract_cmd[255:128]$216 [16], \$abstract_cmd[255:128]$216 [14:7], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:381.41-386.14|rtl/riscv-dbg/dm_mem.sv:381.11-417.14" */
  \$mux  #(
    .WIDTH(32'd30)
  ) \$procmux$6757  (
    .A({ \$abstract_cmd[255:128]$216 [95:84], \$abstract_cmd[255:128]$216 [46:44], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [36], 1'h1, \$abstract_cmd[255:128]$216 [16], \$abstract_cmd[255:128]$216 [14:7], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [2] }),
    .B(30'h00002002),
    .S(\$208y ),
    .Y({ \$abstract_cmd[255:128]$218 [95:84], \$abstract_cmd[255:128]$218 [46:44], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [36], \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [16], \$abstract_cmd[255:128]$218 [14:7], \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [4], \$abstract_cmd[255:128]$218 [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6774  (
    .A(1'h1),
    .B(\$abstract_cmd[319:288]$249 [20]),
    .S(\$133y ),
    .Y(abstract_cmd[293])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:376.27-477.10|rtl/riscv-dbg/dm_mem.sv:372.5-485.12" */
  \$mux  #(
    .WIDTH(32'd54)
  ) \$procmux$6778  (
    .A(54'h00004000080002),
    .B({ \$abstract_cmd[255:128]$245 [95:84], \$abstract_cmd[255:128]$245 [78:76], \$abstract_cmd[255:128]$245 [68], \$abstract_cmd[255:128]$245 [63:52], \$abstract_cmd[255:128]$245 [70], \$abstract_cmd[255:128]$245 [46:44], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [36], \$abstract_cmd[255:128]$245 [24:20], \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [16], \$abstract_cmd[255:128]$245 [14:7], \$abstract_cmd[255:128]$245 [30], \$abstract_cmd[255:128]$245 [5:4], \$abstract_cmd[255:128]$245 [2] }),
    .S(\$133y ),
    .Y({ abstract_cmd[223:212], abstract_cmd[206:204], abstract_cmd[196], abstract_cmd[191:180], abstract_cmd[176], abstract_cmd[174:172], abstract_cmd[170], abstract_cmd[165:164], abstract_cmd[152:148], abstract_cmd[146], abstract_cmd[144], abstract_cmd[142:132], abstract_cmd[130] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6781  (
    .A(\$auto$wreduce.cc:514:run$13531 [0]),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(resuming_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:343.21-347.8|rtl/riscv-dbg/dm_mem.sv:343.5-347.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6784  (
    .A(\$auto$wreduce.cc:514:run$13524 [0]),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(halted_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:334.15-334.94|rtl/riscv-dbg/dm_mem.sv:332.13-335.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$6787  (
    .A(4'h0),
    .B({ \$180y [9:8], \$180y [1:0] }),
    .S(\$172y ),
    .Y({ \$auto$wreduce.cc:514:run$13527 [9:8], \$auto$wreduce.cc:514:run$13527 [1:0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:303.17-303.87|rtl/riscv-dbg/dm_mem.sv:301.15-307.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6802  (
    .A(2'h1),
    .B(2'h2),
    .S(\$136y ),
    .Y({ \$auto$wreduce.cc:514:run$13528 [26], \$auto$wreduce.cc:514:run$13528 [24] })
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:301.15-307.18|rtl/riscv-dbg/dm_mem.sv:298.13-308.16" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$6820  (
    .A(5'h11),
    .B({ 1'h0, \$auto$wreduce.cc:514:run$13528 [26], 1'h1, \$auto$wreduce.cc:514:run$13528 [24], \$auto$wreduce.cc:514:run$13528 [24] }),
    .S(cmdbusy_o),
    .Y({ \$procmux$6820_Y [30], \$procmux$6820_Y [26:23] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:330.41-337.14|rtl/riscv-dbg/dm_mem.sv:289.9-339.16" */
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd64)
  ) \$procmux$6854  (
    .A({ 33'h000000000, \$procmux$6820_Y [30], 1'h0, \$procmux$6820_Y [30], 1'h0, \$procmux$6820_Y [26:23], 23'h00006f }),
    .B({ data_i, \$158y , \$165y [63:52], 1'h0, \$165y [50], 1'h0, \$165y [50], 1'h0, \$165y [46:44], 1'h0, \$165y [42], 1'h0, \$165y [40], 1'h0, \$165y [38], \$165y [38], \$165y [36], 1'h0, \$165y [34:33], \$165y [33], \$165y [31:20], 1'h0, \$165y [18], 1'h0, \$165y [16], 1'h0, \$165y [14:4], 1'h0, \$165y [2:1], \$165y [1], 54'h00000000000000, \$auto$wreduce.cc:514:run$13527 [9:8], 6'h00, \$auto$wreduce.cc:514:run$13527 [1:0] }),
    .S({ \$141y , \$155y , \$162y , \$169y  }),
    .Y(\$procmux$6854_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$6881  (
    .A(data_i[63:56]),
    .B(wdata_i[31:24]),
    .S(be_i[3]),
    .Y(\$data_bits[63:56]$119 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$6906  (
    .A(data_i[55:48]),
    .B(wdata_i[23:16]),
    .S(be_i[2]),
    .Y(\$data_bits[55:48]$117 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$6931  (
    .A(data_i[47:40]),
    .B(wdata_i[15:8]),
    .S(be_i[1]),
    .Y(\$data_bits[47:40]$115 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$6955  (
    .A(data_i[39:32]),
    .B(wdata_i[7:0]),
    .S(be_i[0]),
    .Y(\$data_bits[39:32]$113 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$6969  (
    .A(data_i[63:32]),
    .B({ \$data_bits[63:56]$119 , \$data_bits[55:48]$117 , \$data_bits[47:40]$115 , \$data_bits[39:32]$113  }),
    .S(\$111y ),
    .Y(\$data_bits[63:32]$120 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$6992  (
    .A(data_i[31:24]),
    .B(wdata_i[31:24]),
    .S(be_i[3]),
    .Y(\$data_bits[31:24]$108 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7017  (
    .A(data_i[23:16]),
    .B(wdata_i[23:16]),
    .S(be_i[2]),
    .Y(\$data_bits[23:16]$106 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7042  (
    .A(data_i[15:8]),
    .B(wdata_i[15:8]),
    .S(be_i[1]),
    .Y(\$data_bits[15:8]$104 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:272.21-278.24|rtl/riscv-dbg/dm_mem.sv:271.19-279.22" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$7066  (
    .A(data_i[7:0]),
    .B(wdata_i[7:0]),
    .S(be_i[0]),
    .Y(\$data_bits[7:0]$102 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:270.17-280.20|rtl/riscv-dbg/dm_mem.sv:269.15-281.18" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$7079  (
    .A(data_i[31:0]),
    .B({ \$data_bits[31:24]$108 , \$data_bits[23:16]$106 , \$data_bits[15:8]$104 , \$data_bits[7:0]$102  }),
    .S(\$100y ),
    .Y(\$data_bits[31:0]$109 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:266.39-283.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$7099  (
    .A(data_i),
    .B({ \$data_bits[63:32]$120 , \$data_bits[31:0]$109  }),
    .S(\$141y ),
    .Y(\$data_bits$126 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7109  (
    .A(\$auto$wreduce.cc:514:run$13532 [0]),
    .B(\$94y [0]),
    .S(\$80y ),
    .Y(\$auto$wreduce.cc:514:run$13529 [0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:250.23-253.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7121  (
    .A(2'h0),
    .B(\$69y ),
    .S(\$64y ),
    .Y(\$halted_aligned$124 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:257.25-262.14|rtl/riscv-dbg/dm_mem.sv:249.9-285.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7131  (
    .A(\$78y ),
    .B(\$87y ),
    .S(\$80y ),
    .Y(\$auto$wreduce.cc:514:run$13524 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7160  (
    .A(we_i),
    .B(\$141y ),
    .Y(\$data_valid_o$192 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$7172  (
    .A(data_i),
    .B(\$data_bits$126 ),
    .S(we_i),
    .Y(\$data_bits$190 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7178  (
    .A(\$auto$wreduce.cc:514:run$13532 [0]),
    .B(\$auto$wreduce.cc:514:run$13529 [0]),
    .S(we_i),
    .Y(\$auto$wreduce.cc:514:run$13530 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7184  (
    .A(2'h0),
    .B(\$halted_aligned$124 ),
    .S(we_i),
    .Y(\$halted_aligned$188 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7202  (
    .A(we_i),
    .B(\$95y ),
    .Y(\$exception$185 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:249.9-285.16|rtl/riscv-dbg/dm_mem.sv:248.7-340.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7208  (
    .A(we_i),
    .B(\$79y ),
    .Y(\$going$184 )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7214  (
    .A(req_i),
    .B(\$data_valid_o$192 ),
    .Y(data_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd64)
  ) \$procmux$7222  (
    .A(data_i),
    .B(\$data_bits$190 ),
    .S(req_i),
    .Y(data_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7226  (
    .A(\$auto$wreduce.cc:514:run$13532 [0]),
    .B(\$auto$wreduce.cc:514:run$13530 [0]),
    .S(req_i),
    .Y(\$auto$wreduce.cc:514:run$13531 [0])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7230  (
    .A(2'h0),
    .B(\$halted_aligned$188 ),
    .S(req_i),
    .Y(halted_aligned)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7242  (
    .A(req_i),
    .B(\$exception$185 ),
    .Y(exception)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:248.7-340.10|rtl/riscv-dbg/dm_mem.sv:246.5-341.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7246  (
    .A(req_i),
    .B(\$going$184 ),
    .Y(going)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:243.7-243.42|rtl/riscv-dbg/dm_mem.sv:242.5-244.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7248  (
    .A(resuming_q),
    .B(\$62y ),
    .S(clear_resumeack_i),
    .Y(\$auto$wreduce.cc:514:run$13532 [0])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7251  (
    .A(\$procmux$7296_Y ),
    .B(2'h0),
    .S(ndmreset_i),
    .Y(state_d)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7254  (
    .A(\$go$40 ),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(go)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:206.21-211.8|rtl/riscv-dbg/dm_mem.sv:206.5-211.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7257  (
    .A(\$procmux$7279_CMP ),
    .B(1'h0),
    .S(ndmreset_i),
    .Y(resume)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7260  (
    .A({ \$cmderror_o$47 [2:1], 1'h0 }),
    .B(3'h3),
    .S(exception),
    .Y(cmderror_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:201.20-204.8|rtl/riscv-dbg/dm_mem.sv:201.5-204.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7263  (
    .A(\$cmderror_valid_o$46 ),
    .B(exception),
    .Y(cmderror_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7266  (
    .A({ \$cmderror_o$43 [2], 1'h0 }),
    .B(2'h1),
    .S(\$45y ),
    .Y(\$cmderror_o$47 [2:1])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:196.45-199.8|rtl/riscv-dbg/dm_mem.sv:196.5-199.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7269  (
    .A(\$cmderror_o$43 [2]),
    .B(\$45y ),
    .Y(\$cmderror_valid_o$46 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7274_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$7274_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:174.15-180.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7279_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$7279_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:164.11-172.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7285_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$go$40 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7294_CMP0  (
    .A(state_q),
    .Y(\$procmux$7294_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:182.21-189.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$7296  (
    .A(\$procmux$7308_Y ),
    .B(4'hc),
    .S({ \$go$40 , \$auto$opt_reduce.cc:137:opt_pmux$14969  }),
    .Y(\$procmux$7296_Y )
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:160.11-160.28|rtl/riscv-dbg/dm_mem.sv:158.9-161.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7308  (
    .A(2'h1),
    .B(2'h2),
    .S(\$28y ),
    .Y(\$procmux$7308_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:150.11-150.24|rtl/riscv-dbg/dm_mem.sv:148.9-155.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7337  (
    .A(cmd_valid_i),
    .B(1'h0),
    .S(\$6y ),
    .Y(\$cmderror_o$11 [2])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_mem.sv:146.13-162.10|rtl/riscv-dbg/dm_mem.sv:145.5-192.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7362  (
    .A(\$procmux$7294_CMP ),
    .B(\$cmderror_o$11 [2]),
    .Y(\$cmderror_o$43 [2])
  );
  /* src = "rtl/riscv-dbg/dm_mem.sv:498.15" */
  \debug_rom$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem.gen_rom_snd_scratch.i_debug_rom  \gen_rom_snd_scratch.i_debug_rom  (
    .addr_i({ 32'h00000000, addr_i }),
    .clk_i(clk_i),
    .rdata_o(rom_rdata),
    .req_i(req_i),
    .rst_ni(rst_ni)
  );
  assign { \$110y [30:10], \$110y [4:0] } = { \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], \$110y [31], addr_i[6:2] };
  assign { \$165y [51], \$165y [49:47], \$165y [43], \$165y [41], \$165y [39], \$165y [37], \$165y [35], \$165y [32], \$165y [19], \$165y [17], \$165y [15], \$165y [3], \$165y [0] } = { 2'h0, \$165y [50], 4'h0, \$165y [38], 1'h0, \$165y [33], 4'h0, \$165y [1] };
  assign \$170y [9:0] = { addr_i[9:3], 3'h0 };
  assign { \$178y [14:8], \$178y [6:0] } = { \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [15], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7], \$178y [7] };
  assign { \$180y [57:10], \$180y [7:2] } = 54'h00000000000000;
  assign { \$abstract_cmd[255:128]$215 [125:96], \$abstract_cmd[255:128]$215 [83:47], \$abstract_cmd[255:128]$215 [43:37], \$abstract_cmd[255:128]$215 [35:31], \$abstract_cmd[255:128]$215 [29:17], \$abstract_cmd[255:128]$215 [15], \$abstract_cmd[255:128]$215 [6:3], \$abstract_cmd[255:128]$215 [1:0] } = { \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 1'h0, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 7'h00, \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 3'h0, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 6'h26, \$abstract_cmd[255:128]$215 [126], 5'h00, \$abstract_cmd[255:128]$215 [126], 5'h00, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 7'h4c, \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], \$abstract_cmd[255:128]$215 [126], 8'h00, \$abstract_cmd[255:128]$215 [126], 1'h0, \$abstract_cmd[255:128]$215 [126], 2'h0, \$abstract_cmd[255:128]$215 [126], 14'h006e, \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], 2'h0, \$abstract_cmd[255:128]$215 [30], 5'h04, \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], \$abstract_cmd[255:128]$215 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$216 [125:96], \$abstract_cmd[255:128]$216 [83:47], \$abstract_cmd[255:128]$216 [43:37], \$abstract_cmd[255:128]$216 [35:31], \$abstract_cmd[255:128]$216 [29:17], \$abstract_cmd[255:128]$216 [15], \$abstract_cmd[255:128]$216 [6:3], \$abstract_cmd[255:128]$216 [1:0] } = { \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 1'h0, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 7'h00, \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 3'h0, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 6'h26, \$abstract_cmd[255:128]$216 [126], 5'h00, \$abstract_cmd[255:128]$216 [126], 5'h00, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 7'h4c, \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], \$abstract_cmd[255:128]$216 [126], 8'h00, \$abstract_cmd[255:128]$216 [126], 1'h0, \$abstract_cmd[255:128]$216 [126], 2'h0, \$abstract_cmd[255:128]$216 [126], 14'h006e, \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], 2'h0, \$abstract_cmd[255:128]$216 [30], 5'h04, \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], \$abstract_cmd[255:128]$216 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$218 [127], \$abstract_cmd[255:128]$218 [125:96], \$abstract_cmd[255:128]$218 [83:47], \$abstract_cmd[255:128]$218 [43:37], \$abstract_cmd[255:128]$218 [35:31], \$abstract_cmd[255:128]$218 [28:17], \$abstract_cmd[255:128]$218 [15], \$abstract_cmd[255:128]$218 [6:5], \$abstract_cmd[255:128]$218 [3], \$abstract_cmd[255:128]$218 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 7'h00, \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 3'h0, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 6'h26, \$abstract_cmd[255:128]$218 [126], 5'h00, \$abstract_cmd[255:128]$218 [126], 5'h00, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 7'h4c, \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], \$abstract_cmd[255:128]$218 [126], 8'h00, \$abstract_cmd[255:128]$218 [126], 1'h0, \$abstract_cmd[255:128]$218 [126], 2'h0, \$abstract_cmd[255:128]$218 [126], 10'h006, \$abstract_cmd[255:128]$218 [29], \$abstract_cmd[255:128]$218 [29], 1'h0, \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [30], 2'h0, \$abstract_cmd[255:128]$218 [29], 2'h0, \$abstract_cmd[255:128]$218 [30], \$abstract_cmd[255:128]$218 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$231 [125:79], \$abstract_cmd[255:128]$231 [75:69], \$abstract_cmd[255:128]$231 [67:64], \$abstract_cmd[255:128]$231 [51:31], \$abstract_cmd[255:128]$231 [29:25], \$abstract_cmd[255:128]$231 [19:17], \$abstract_cmd[255:128]$231 [15], \$abstract_cmd[255:128]$231 [11:3], \$abstract_cmd[255:128]$231 [1:0] } = { \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 1'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 7'h00, \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 7'h4c, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], 4'h0, \$abstract_cmd[255:128]$231 [126], 1'h0, \$abstract_cmd[255:128]$231 [126], 7'h00, \$abstract_cmd[255:128]$231 [126], 10'h0c0, \$abstract_cmd[255:128]$231 [126], 2'h0, \$abstract_cmd[255:128]$231 [126], 3'h0, \$abstract_cmd[255:128]$231 [126], \$abstract_cmd[255:128]$231 [126], 10'h26e, \$abstract_cmd[255:128]$231 [30], 9'h080, \$abstract_cmd[255:128]$231 [30], 1'h1, \$abstract_cmd[255:128]$231 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$232 [127], \$abstract_cmd[255:128]$232 [125:79], \$abstract_cmd[255:128]$232 [75:69], \$abstract_cmd[255:128]$232 [67:64], \$abstract_cmd[255:128]$232 [51:31], \$abstract_cmd[255:128]$232 [29:25], \$abstract_cmd[255:128]$232 [19:17], \$abstract_cmd[255:128]$232 [15], \$abstract_cmd[255:128]$232 [11:3], \$abstract_cmd[255:128]$232 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 1'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 7'h00, \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 7'h4c, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], 4'h0, \$abstract_cmd[255:128]$232 [126], 1'h0, \$abstract_cmd[255:128]$232 [126], 7'h00, \$abstract_cmd[255:128]$232 [126], 10'h0c0, \$abstract_cmd[255:128]$232 [126], 2'h0, \$abstract_cmd[255:128]$232 [126], 3'h0, \$abstract_cmd[255:128]$232 [126], \$abstract_cmd[255:128]$232 [126], 10'h26e, \$abstract_cmd[255:128]$232 [30], 9'h080, \$abstract_cmd[255:128]$232 [30], 1'h1, \$abstract_cmd[255:128]$232 [30], 3'h3 };
  assign { \$abstract_cmd[255:128]$234 [127], \$abstract_cmd[255:128]$234 [125:79], \$abstract_cmd[255:128]$234 [75:69], \$abstract_cmd[255:128]$234 [67:64], \$abstract_cmd[255:128]$234 [51:31], \$abstract_cmd[255:128]$234 [28:25], \$abstract_cmd[255:128]$234 [19:17], \$abstract_cmd[255:128]$234 [15], \$abstract_cmd[255:128]$234 [11:5], \$abstract_cmd[255:128]$234 [3], \$abstract_cmd[255:128]$234 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 1'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 7'h00, \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 7'h4c, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], 4'h0, \$abstract_cmd[255:128]$234 [126], 1'h0, \$abstract_cmd[255:128]$234 [126], 7'h00, \$abstract_cmd[255:128]$234 [126], 10'h0c0, \$abstract_cmd[255:128]$234 [126], 2'h0, \$abstract_cmd[255:128]$234 [126], 3'h0, \$abstract_cmd[255:128]$234 [126], \$abstract_cmd[255:128]$234 [126], 6'h26, \$abstract_cmd[255:128]$234 [29], \$abstract_cmd[255:128]$234 [29], 1'h0, \$abstract_cmd[255:128]$234 [30], 1'h0, \$abstract_cmd[255:128]$234 [29], 7'h00, \$abstract_cmd[255:128]$234 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$242 [127], \$abstract_cmd[255:128]$242 [125:79], \$abstract_cmd[255:128]$242 [75:69], \$abstract_cmd[255:128]$242 [67:64], \$abstract_cmd[255:128]$242 [51:31], \$abstract_cmd[255:128]$242 [28:25], \$abstract_cmd[255:128]$242 [19:17], \$abstract_cmd[255:128]$242 [15], \$abstract_cmd[255:128]$242 [11:5], \$abstract_cmd[255:128]$242 [3], \$abstract_cmd[255:128]$242 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 7'h00, \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 7'h4c, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], 4'h0, \$abstract_cmd[255:128]$242 [126], 1'h0, \$abstract_cmd[255:128]$242 [126], 7'h00, \$abstract_cmd[255:128]$242 [126], 10'h0c0, \$abstract_cmd[255:128]$242 [126], 2'h0, \$abstract_cmd[255:128]$242 [126], 3'h0, \$abstract_cmd[255:128]$242 [126], \$abstract_cmd[255:128]$242 [126], 6'h26, \$abstract_cmd[255:128]$242 [29], \$abstract_cmd[255:128]$242 [29], 1'h0, \$abstract_cmd[255:128]$242 [30], 1'h0, \$abstract_cmd[255:128]$242 [29], 7'h00, \$abstract_cmd[255:128]$242 [30:29], 3'h3 };
  assign { \$abstract_cmd[255:128]$245 [127], \$abstract_cmd[255:128]$245 [125:96], \$abstract_cmd[255:128]$245 [83:81], \$abstract_cmd[255:128]$245 [79], \$abstract_cmd[255:128]$245 [75:71], \$abstract_cmd[255:128]$245 [69], \$abstract_cmd[255:128]$245 [67:64], \$abstract_cmd[255:128]$245 [51:47], \$abstract_cmd[255:128]$245 [43:37], \$abstract_cmd[255:128]$245 [35:31], \$abstract_cmd[255:128]$245 [28:25], \$abstract_cmd[255:128]$245 [19:17], \$abstract_cmd[255:128]$245 [15], \$abstract_cmd[255:128]$245 [6], \$abstract_cmd[255:128]$245 [3], \$abstract_cmd[255:128]$245 [1:0] } = { 1'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 1'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 2'h0, \$abstract_cmd[255:128]$245 [126], 7'h00, \$abstract_cmd[255:128]$245 [126], 2'h0, \$abstract_cmd[255:128]$245 [126], 3'h0, \$abstract_cmd[255:128]$245 [126], \$abstract_cmd[255:128]$245 [126], 6'h26, \$abstract_cmd[255:128]$245 [126], 7'h00, \$abstract_cmd[255:128]$245 [126], 5'h06, \$abstract_cmd[255:128]$245 [70], 1'h0, \$abstract_cmd[255:128]$245 [70], 2'h0, \$abstract_cmd[255:128]$245 [126], 3'h0, \$abstract_cmd[255:128]$245 [80], \$abstract_cmd[255:128]$245 [80], 5'h06, \$abstract_cmd[255:128]$245 [29], \$abstract_cmd[255:128]$245 [29], 1'h0, \$abstract_cmd[255:128]$245 [30], 1'h0, \$abstract_cmd[255:128]$245 [29], 2'h0, \$abstract_cmd[255:128]$245 [30], 3'h3 };
  assign { \$abstract_cmd[319:288]$249 [31:21], \$abstract_cmd[319:288]$249 [19:0] } = { 24'h000000, \$abstract_cmd[319:288]$249 [20], \$abstract_cmd[319:288]$249 [20], 5'h13 };
  assign { \$abstract_cmd[31:0]$217 [31], \$abstract_cmd[31:0]$217 [29:0] } = { 1'h0, \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], 1'h0, \$abstract_cmd[31:0]$217 [30], \$abstract_cmd[31:0]$217 [30], 2'h0, \$abstract_cmd[31:0]$217 [30], 2'h2, \$abstract_cmd[31:0]$217 [30], 1'h0, \$abstract_cmd[31:0]$217 [30], 3'h0, \$abstract_cmd[31:0]$217 [30], 12'h073 };
  assign { \$abstract_cmd[31:0]$241 [31], \$abstract_cmd[31:0]$241 [29:21], \$abstract_cmd[31:0]$241 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], \$abstract_cmd[31:0]$241 [30], 2'h0, \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], 1'h0, \$abstract_cmd[31:0]$241 [30], 3'h0, \$abstract_cmd[31:0]$241 [30], 5'h00, \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20], 2'h0, \$abstract_cmd[31:0]$241 [20], \$abstract_cmd[31:0]$241 [20] };
  assign { \$abstract_cmd[31:0]$244 [31], \$abstract_cmd[31:0]$244 [29:21], \$abstract_cmd[31:0]$244 [19:0] } = { 1'h0, \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], \$abstract_cmd[31:0]$244 [30], 2'h0, \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], 1'h0, \$abstract_cmd[31:0]$244 [30], 3'h0, \$abstract_cmd[31:0]$244 [30], 5'h00, \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20], 2'h0, \$abstract_cmd[31:0]$244 [20], \$abstract_cmd[31:0]$244 [20] };
  assign \$auto$wreduce.cc:514:run$13524 [1] = 1'hx;
  assign { \$auto$wreduce.cc:514:run$13527 [63:10], \$auto$wreduce.cc:514:run$13527 [7:2] } = 60'h000000000000000;
  assign { \$auto$wreduce.cc:514:run$13528 [63:27], \$auto$wreduce.cc:514:run$13528 [25], \$auto$wreduce.cc:514:run$13528 [23:0] } = { 38'h0000000001, \$auto$wreduce.cc:514:run$13528 [24], 23'h00006f };
  assign \$auto$wreduce.cc:514:run$13529 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13530 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13531 [1] = 1'hx;
  assign \$auto$wreduce.cc:514:run$13532 [1] = 1'hx;
  assign \$cmderror_o$11 [1:0] = 2'h0;
  assign \$cmderror_o$43 [1:0] = 2'h0;
  assign \$cmderror_o$47 [0] = 1'h0;
  assign { \$procmux$6820_Y [63:31], \$procmux$6820_Y [29:27], \$procmux$6820_Y [22:0] } = { 34'h000000000, \$procmux$6820_Y [30], 24'h00006f };
  assign { abstract_cmd[308:294], abstract_cmd[292:224], abstract_cmd[211:207], abstract_cmd[203:197], abstract_cmd[195:192], abstract_cmd[179:177], abstract_cmd[175], abstract_cmd[171], abstract_cmd[169:166], abstract_cmd[163:153], abstract_cmd[147], abstract_cmd[145], abstract_cmd[143], abstract_cmd[131], abstract_cmd[129:13], abstract_cmd[11:1] } = { abstract_cmd[293], 13'h0000, abstract_cmd[293], 38'h26f6604ae6, abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], abstract_cmd[170], 1'h0, abstract_cmd[170], abstract_cmd[170], 2'h0, abstract_cmd[170], 7'h00, abstract_cmd[170], 2'h0, abstract_cmd[170], 3'h0, abstract_cmd[170], abstract_cmd[170], 6'h26, abstract_cmd[170], 1'h0, abstract_cmd[165], 6'h00, abstract_cmd[176], abstract_cmd[170], 5'h06, abstract_cmd[176], 6'h00, abstract_cmd[165], 5'h06, abstract_cmd[134], abstract_cmd[146], abstract_cmd[146], abstract_cmd[146], 1'h0, abstract_cmd[134], 103'h06018a2a26018aaa2600000a2e, abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], abstract_cmd[12], 1'h0, abstract_cmd[12], abstract_cmd[12], 2'h0, abstract_cmd[12], abstract_cmd[0], 1'h0, abstract_cmd[12], 1'h0, abstract_cmd[12], 8'h00, abstract_cmd[0], abstract_cmd[0], abstract_cmd[0], 2'h0, abstract_cmd[0] };
  assign ac_ar = cmd_i[23:0];
  assign data_bits = data_o;
  assign debug_req_o = haltreq_i;
  assign fwd_rom_d = addr_i[11];
  assign halted_d_aligned = { 1'hx, halted_d };
  assign halted_o = halted_q;
  assign halted_q_aligned = { 1'h0, halted_q };
  assign haltreq_aligned = { 1'h0, haltreq_i };
  assign hartsel = hartsel_i[0];
  assign progbuf = progbuf_i;
  assign resumereq_aligned = { 1'h0, resumereq_i };
  assign resumereq_wdata_aligned = { 1'h0, resumereq_i };
  assign resuming_d_aligned = { 1'hx, resuming_d };
  assign resuming_o = resuming_q;
  assign resuming_q_aligned = { 1'h0, resuming_q };
  assign rom_addr = { 32'h00000000, addr_i };
  assign wdata_hartsel = wdata_i[0];
endmodule

/* src = "rtl/riscv-dbg/dm_obi_top.sv:63.8" */
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_gnt_o, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_req_o, master_addr_o, master_we_o, master_wdata_o, master_be_o
, master_gnt_i, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o);
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:72.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:78.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:77.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:113.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:112.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:111.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:117.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:116.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:115.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:110.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:81.40" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:99.33" */
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:102.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:105.33" */
  input master_err_i;
  wire master_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:103.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:106.33" */
  input master_other_err_i;
  wire master_other_err_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:107.33" */
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:98.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:104.33" */
  input master_rvalid_i;
  wire master_rvalid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:101.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:100.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:76.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:74.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:87.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:91.33" */
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:88.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:85.33" */
  output slave_gnt_o;
  wire slave_gnt_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:94.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:83.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:96.33" */
  output [2:0] slave_rid_o;
  wire [2:0] slave_rid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:122.23" */
  wire [2:0] slave_rid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:93.33" */
  output slave_rvalid_o;
  wire slave_rvalid_o;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:121.23" */
  wire slave_rvalid_q;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:89.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:86.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:75.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:80.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14494  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_aid_i),
    .EN(slave_req_i),
    .Q(slave_rid_q)
  );
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$slave_rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_req_i),
    .Q(slave_rvalid_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_obi_top.sv:130.5" */
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
  assign slave_rid_o = slave_rid_q;
  assign slave_rvalid_o = slave_rvalid_q;
endmodule

/* src = "rtl/riscv-dbg/dm_sba.sv:18.8" */
module \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba (clk_i, rst_ni, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i, sbaddress_o, sbaddress_i, sbdata_o, sbdata_i, dmactive_i, sbaddress_write_valid_i, sbreadonaddr_i, sbautoincrement_i, sbaccess_i
, sbreadondata_i, sbdata_read_valid_i, sbdata_write_valid_i, sbdata_valid_o, sbbusy_o, sberror_valid_o, sberror_o);
  wire [3:0] \$10y ;
  wire [32:0] \$11y ;
  wire [3:0] \$12y ;
  wire [3:0] \$13y ;
  wire [31:0] \$17y ;
  wire \$21y ;
  wire \$24y ;
  wire \$52y ;
  wire \$54y ;
  wire [31:0] \$59y ;
  wire [31:0] \$60y ;
  wire \$61y ;
  wire \$63y ;
  wire [3:0] \$6y ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  wire \$addr_incr_en$34 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14496 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14498 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14500 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14502 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14504 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13389 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13393 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13433 ;
  wire [2:0] \$procmux$7393_Y ;
  wire \$procmux$7396_Y ;
  wire \$procmux$7399_Y ;
  wire [2:0] \$procmux$7402_Y ;
  wire \$procmux$7413_CMP ;
  wire [2:0] \$procmux$7427_Y ;
  wire \$procmux$7436_Y ;
  wire [2:0] \$procmux$7444_Y ;
  wire \$procmux$7450_Y ;
  wire \$procmux$7476_CMP ;
  wire \$procmux$7550_CMP ;
  wire [2:0] \$procmux$7559_Y ;
  wire \$procmux$7568_CMP ;
  wire [2:0] \$procmux$7575_Y ;
  wire [2:0] \$procmux$7585_Y ;
  wire [2:0] \$procmux$7600_Y ;
  wire \$procmux$7606_Y ;
  wire \$procmux$7641_CMP ;
  wire \$procmux$7644_CMP ;
  wire \$procmux$7646_CMP ;
  wire \$procmux$7647_CMP ;
  /* src = "rtl/riscv-dbg/dm_sba.sv:95.24" */
  wire [31:0] addr_incr;
  /* src = "rtl/riscv-dbg/dm_sba.sv:94.9" */
  wire addr_incr_en;
  /* src = "rtl/riscv-dbg/dm_sba.sv:61.34" */
  wire [31:0] address;
  /* src = "rtl/riscv-dbg/dm_sba.sv:65.34" */
  wire [3:0] be;
  /* src = "rtl/riscv-dbg/dm_sba.sv:67.26" */
  wire [1:0] be_idx;
  /* src = "rtl/riscv-dbg/dm_sba.sv:200.26" */
  wire [1:0] be_idx_masked;
  /* src = "rtl/riscv-dbg/dm_sba.sv:66.34" */
  wire [3:0] be_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:22.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:24.34" */
  input dmactive_i;
  wire dmactive_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:63.34" */
  wire gnt;
  /* src = "rtl/riscv-dbg/dm_sba.sv:27.34" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:30.34" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:31.34" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:33.34" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:34.34" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:35.34" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:32.34" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:26.34" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:29.34" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:28.34" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:62.34" */
  wire req;
  /* src = "rtl/riscv-dbg/dm_sba.sv:23.34" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_sba.sv:43.34" */
  input [2:0] sbaccess_i;
  wire [2:0] sbaccess_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:91.24" */
  wire [31:0] sbaccess_mask;
  /* src = "rtl/riscv-dbg/dm_sba.sv:37.34" */
  input [31:0] sbaddress_i;
  wire [31:0] sbaddress_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:41.34" */
  output [31:0] sbaddress_o;
  wire [31:0] sbaddress_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:38.34" */
  input sbaddress_write_valid_i;
  wire sbaddress_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:42.34" */
  input sbautoincrement_i;
  wire sbautoincrement_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:53.34" */
  output sbbusy_o;
  wire sbbusy_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:46.34" */
  input [31:0] sbdata_i;
  wire [31:0] sbdata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:50.34" */
  output [31:0] sbdata_o;
  wire [31:0] sbdata_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:47.34" */
  input sbdata_read_valid_i;
  wire sbdata_read_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:51.34" */
  output sbdata_valid_o;
  wire sbdata_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:48.34" */
  input sbdata_write_valid_i;
  wire sbdata_write_valid_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:55.34" */
  output [2:0] sberror_o;
  wire [2:0] sberror_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:54.34" */
  output sberror_valid_o;
  wire sberror_valid_o;
  /* src = "rtl/riscv-dbg/dm_sba.sv:40.34" */
  input sbreadonaddr_i;
  wire sbreadonaddr_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:45.34" */
  input sbreadondata_i;
  wire sbreadondata_i;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.19" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dm_sba.sv:59.28" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dm_sba.sv:64.34" */
  wire we;
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.65" */
  \$shift  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$10  (
    .A(2'h3),
    .B(\$11y ),
    .Y(\$10y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.65" */
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd33)
  ) \$11  (
    .A({ sbaddress_i[1], 1'h0 }),
    .Y(\$11y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.65" */
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd33),
    .Y_WIDTH(32'd4)
  ) \$12  (
    .A(2'h3),
    .B(\$11y ),
    .Y(\$12y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:92.26-92.56" */
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$16  (
    .A(32'd4294967295),
    .B(sbaccess_i),
    .Y(sbaccess_mask)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:96.40-96.69" */
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd32)
  ) \$17  (
    .A(1'h1),
    .B(sbaccess_i),
    .Y(\$17y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:96.22-96.75" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$18  (
    .A(32'd0),
    .B(\$17y ),
    .S(addr_incr_en),
    .Y(addr_incr)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:97.24-97.47" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$19  (
    .A(sbaddress_i),
    .B(addr_incr),
    .Y(sbaddress_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:117.13-117.54" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(sbaddress_write_valid_i),
    .B(sbreadonaddr_i),
    .Y(\$21y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:121.13-121.50" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(sbdata_read_valid_i),
    .B(sbreadondata_i),
    .Y(\$24y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.9-175.37" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(sbaccess_i),
    .B(2'h2),
    .Y(\$52y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.41-175.60" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(state_q),
    .Y(sbbusy_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.9-175.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(sbbusy_o),
    .Y(\$54y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.25-183.39" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$59  (
    .A(sbaccess_mask),
    .Y(\$59y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.29" */
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$6  (
    .A(1'h1),
    .S(sbaddress_i[1:0]),
    .Y(\$6y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.11-183.39" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$60  (
    .A(sbaddress_i),
    .B(\$59y ),
    .Y(\$60y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.9-183.40" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$60y ),
    .Y(\$61y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.9-183.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$61y ),
    .B(sbbusy_o),
    .Y(\$63y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:201.28-201.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$71  (
    .A(sbaddress_i[1:0]),
    .B(sbaccess_mask[1:0]),
    .Y(be_idx_masked)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:205.28-205.73" */
  \$shl  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$73  (
    .A(sbdata_i),
    .B({ be_idx_masked, 3'h0 }),
    .Y(master_wdata_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:209.28-209.81" */
  \$shr  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd32)
  ) \$75  (
    .A(master_r_rdata_i),
    .B({ be_idx_masked, 3'h0 }),
    .Y(sbdata_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:192.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14495  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14504 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14497  (
    .A({ master_we_o, \$63y , \$54y , master_gnt_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14496 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14499  (
    .A({ \$procmux$7550_CMP , \$63y , \$54y , master_gnt_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14498 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14501  (
    .A({ \$auto$opt_reduce.cc:137:opt_pmux$13433 , \$63y , master_r_valid_i, \$54y  }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14500 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14503  (
    .A({ \$procmux$7568_CMP , sbdata_write_valid_i, \$63y , \$24y , \$21y , \$54y  }),
    .B(6'h20),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14502 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14505  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14502 , \$auto$opt_dff.cc:194:make_patterns_logic$14500 , \$auto$opt_dff.cc:194:make_patterns_logic$14498 , \$auto$opt_dff.cc:194:make_patterns_logic$14496  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14504 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13182  (
    .A(\$12y ),
    .B(\$10y ),
    .Y(\$13y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13390  (
    .A({ \$procmux$7550_CMP , master_we_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13389 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13392  (
    .A({ \$procmux$7644_CMP , \$procmux$7641_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13393 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13438  (
    .A({ \$procmux$7476_CMP , \$procmux$7413_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13433 )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7381  (
    .A(\$procmux$7393_Y ),
    .B(3'h3),
    .S(\$63y ),
    .Y(sberror_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7384  (
    .A(\$procmux$7396_Y ),
    .B(\$63y ),
    .Y(sberror_valid_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7387  (
    .A(\$procmux$7399_Y ),
    .B(1'h0),
    .S(\$63y ),
    .Y(master_req_o)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:183.65-188.8|rtl/riscv-dbg/dm_sba.sv:183.5-188.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7390  (
    .A(\$procmux$7402_Y ),
    .B(3'h0),
    .S(\$63y ),
    .Y(state_d)
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7393  (
    .A({ \$procmux$7600_Y [2:1], \$procmux$7600_Y [2] }),
    .B(3'h4),
    .S(\$54y ),
    .Y(\$procmux$7393_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7396  (
    .A(\$procmux$7606_Y ),
    .B(\$54y ),
    .Y(\$procmux$7396_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$7399  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13389 ),
    .B(1'h0),
    .S(\$54y ),
    .Y(\$procmux$7399_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:175.62-180.8|rtl/riscv-dbg/dm_sba.sv:175.5-180.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$7402  (
    .A(\$procmux$7559_Y ),
    .B(3'h0),
    .S(\$54y ),
    .Y(\$procmux$7402_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7413_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$7413_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7450  (
    .A(master_r_valid_i),
    .B(\$procmux$7436_Y ),
    .Y(\$procmux$7450_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.29-168.12|rtl/riscv-dbg/dm_sba.sv:155.9-168.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7456  (
    .A(master_r_valid_i),
    .B(sbautoincrement_i),
    .Y(\$addr_incr_en$34 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.9-151.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7476_CMP0  (
    .A(state_q),
    .B(2'h3),
    .Y(\$procmux$7476_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7492  (
    .A({ master_r_err_i, 1'h0 }),
    .B(2'h3),
    .S(master_r_other_err_i),
    .Y({ \$procmux$7427_Y [1], \$procmux$7427_Y [2] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:143.37-147.14|rtl/riscv-dbg/dm_sba.sv:143.11-150.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7502  (
    .A(master_r_err_i),
    .B(master_r_other_err_i),
    .Y(\$procmux$7436_Y )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:138.29-151.12|rtl/riscv-dbg/dm_sba.sv:138.9-151.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7511  (
    .A(2'h0),
    .B({ \$procmux$7427_Y [1], \$procmux$7427_Y [2] }),
    .S(master_r_valid_i),
    .Y({ \$procmux$7444_Y [1], \$procmux$7444_Y [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7542_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(master_we_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:124.17-128.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7550_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$7550_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$7559  (
    .A(3'h0),
    .B({ 1'h0, \$procmux$7575_Y [1:0], 6'h1c }),
    .S({ \$procmux$7568_CMP , \$procmux$7550_CMP , master_we_o }),
    .Y(\$procmux$7559_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:115.17-122.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7568_CMP0  (
    .A(state_q),
    .Y(\$procmux$7568_CMP )
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:121.52-121.71|rtl/riscv-dbg/dm_sba.sv:121.9-121.71" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7575  (
    .A(\$procmux$7585_Y [1:0]),
    .B(2'h1),
    .S(\$24y ),
    .Y(\$procmux$7575_Y [1:0])
  );
  /* src = "rtl/riscv-dbg/dm_sba.sv:119.35-119.55|rtl/riscv-dbg/dm_sba.sv:119.9-119.55" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7585  (
    .A(2'h1),
    .B(2'h2),
    .S(sbdata_write_valid_i),
    .Y(\$procmux$7585_Y [1:0])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$7600  (
    .A(2'h0),
    .B({ \$procmux$7444_Y [1], \$procmux$7444_Y [2] }),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13433 ),
    .Y({ \$procmux$7600_Y [1], \$procmux$7600_Y [2] })
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7606  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13433 ),
    .B(\$procmux$7450_Y ),
    .Y(\$procmux$7606_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:155.9-168.12|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7612  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13433 ),
    .B(\$addr_incr_en$34 ),
    .Y(addr_incr_en)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:130.18-135.10|rtl/riscv-dbg/dm_sba.sv:114.5-172.12" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$7620  (
    .A(4'h0),
    .B(be_mask),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13389 ),
    .Y(master_be_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:83.9-84.46|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7641_CMP0  (
    .A(sbaccess_i),
    .B(2'h2),
    .Y(\$procmux$7641_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd4)
  ) \$procmux$7643  (
    .A(4'h0),
    .B({ \$6y , \$13y , 4'hf }),
    .S({ \$procmux$7647_CMP , \$procmux$7646_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13393  }),
    .Y(be_mask)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:86.15-86.28|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$7644_CMP0  (
    .A(sbaccess_i),
    .B(2'h3),
    .Y(\$procmux$7644_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:80.9-80.66|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$7646_CMP0  (
    .A(sbaccess_i),
    .B(1'h1),
    .Y(\$procmux$7646_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dm_sba.sv:77.9-77.30|rtl/riscv-dbg/dm_sba.sv:75.5-88.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$7647_CMP0  (
    .A(sbaccess_i),
    .Y(\$procmux$7647_CMP )
  );
  assign \$procmux$7427_Y [0] = \$procmux$7427_Y [2];
  assign \$procmux$7444_Y [0] = \$procmux$7444_Y [2];
  assign \$procmux$7575_Y [2] = 1'h0;
  assign \$procmux$7585_Y [2] = 1'h0;
  assign \$procmux$7600_Y [0] = \$procmux$7600_Y [2];
  assign address = sbaddress_i;
  assign be = master_be_o;
  assign be_idx = sbaddress_i[1:0];
  assign gnt = master_gnt_i;
  assign master_add_o = sbaddress_i;
  assign req = master_req_o;
  assign sbdata_valid_o = master_r_valid_i;
  assign we = master_we_o;
endmodule

/* src = "rtl/riscv-dbg/dm_top.sv:20.8" */
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, debug_req_o, unavailable_i, hartinfo_i, slave_req_i, slave_we_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_req_o, master_we_o, master_wdata_o, master_be_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_req_i
, dmi_resp_valid_o, dmi_resp_ready_i, dmi_resp_o, ndmreset_o, dmactive_o, next_dm_addr_i, ndmreset_ack_i, master_add_o, master_r_valid_i, master_r_err_i, master_r_other_err_i, master_r_rdata_i);
  /* src = "rtl/riscv-dbg/dm_top.sv:85.37" */
  wire clear_resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:30.33" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:87.37" */
  wire [31:0] cmd;
  /* src = "rtl/riscv-dbg/dm_top.sv:86.37" */
  wire cmd_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:91.37" */
  wire cmdbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:90.37" */
  wire [2:0] cmderror;
  /* src = "rtl/riscv-dbg/dm_top.sv:89.37" */
  wire cmderror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:93.37" */
  wire [63:0] data_csrs_mem;
  /* src = "rtl/riscv-dbg/dm_top.sv:94.37" */
  wire [63:0] data_mem_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:95.37" */
  wire data_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:43.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:42.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:72.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:71.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:70.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:76.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:75.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:74.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:67.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:80.37" */
  wire halted;
  /* src = "rtl/riscv-dbg/dm_top.sv:83.37" */
  wire haltreq;
  /* src = "rtl/riscv-dbg/dm_top.sv:46.39" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:97.37" */
  wire [19:0] hartsel;
  /* src = "rtl/riscv-dbg/dm_top.sv:56.33" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:59.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:60.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:62.33" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:63.33" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:64.33" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:61.33" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:55.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:58.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:57.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:96.37" */
  wire ndmreset;
  /* src = "rtl/riscv-dbg/dm_top.sv:41.33" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:40.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:38.33" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:92.37" */
  wire [255:0] progbuf;
  /* src = "rtl/riscv-dbg/dm_top.sv:82.37" */
  wire resumeack;
  /* src = "rtl/riscv-dbg/dm_top.sv:84.37" */
  wire resumereq;
  /* src = "rtl/riscv-dbg/dm_top.sv:32.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dm_top.sv:104.37" */
  wire [2:0] sbaccess;
  /* src = "rtl/riscv-dbg/dm_top.sv:99.37" */
  wire [31:0] sbaddress_csrs_sba;
  /* src = "rtl/riscv-dbg/dm_top.sv:100.37" */
  wire [31:0] sbaddress_sba_csrs;
  /* src = "rtl/riscv-dbg/dm_top.sv:101.37" */
  wire sbaddress_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:103.37" */
  wire sbautoincrement;
  /* src = "rtl/riscv-dbg/dm_top.sv:111.37" */
  wire sbbusy;
  /* src = "rtl/riscv-dbg/dm_top.sv:109.37" */
  wire [31:0] sbdata_read;
  /* src = "rtl/riscv-dbg/dm_top.sv:107.37" */
  wire sbdata_read_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:110.37" */
  wire sbdata_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:106.37" */
  wire [31:0] sbdata_write;
  /* src = "rtl/riscv-dbg/dm_top.sv:108.37" */
  wire sbdata_write_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:113.37" */
  wire [2:0] sberror;
  /* src = "rtl/riscv-dbg/dm_top.sv:112.37" */
  wire sberror_valid;
  /* src = "rtl/riscv-dbg/dm_top.sv:102.37" */
  wire sbreadonaddr;
  /* src = "rtl/riscv-dbg/dm_top.sv:105.37" */
  wire sbreadondata;
  /* src = "rtl/riscv-dbg/dm_top.sv:50.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:51.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:53.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "rtl/riscv-dbg/dm_top.sv:48.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:52.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:49.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:39.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:45.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "rtl/riscv-dbg/dm_top.sv:121.5" */
  \dm_csrs$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs  i_dm_csrs (
    .clear_resumeack_o(clear_resumeack),
    .clk_i(clk_i),
    .cmd_o(cmd),
    .cmd_valid_o(cmd_valid),
    .cmdbusy_i(cmdbusy),
    .cmderror_i(cmderror),
    .cmderror_valid_i(cmderror_valid),
    .data_i(data_mem_csrs),
    .data_o(data_csrs_mem),
    .data_valid_i(data_valid),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .halted_i(halted),
    .haltreq_o(haltreq),
    .hartinfo_i(hartinfo_i),
    .hartsel_o(hartsel),
    .ndmreset_ack_i(ndmreset_ack_i),
    .ndmreset_o(ndmreset),
    .next_dm_addr_i(next_dm_addr_i),
    .progbuf_o(progbuf),
    .resumeack_i(resumeack),
    .resumereq_o(resumereq),
    .rst_ni(rst_ni),
    .sbaccess_o(sbaccess),
    .sbaddress_i(sbaddress_sba_csrs),
    .sbaddress_o(sbaddress_csrs_sba),
    .sbaddress_write_valid_o(sbaddress_write_valid),
    .sbautoincrement_o(sbautoincrement),
    .sbbusy_i(sbbusy),
    .sbdata_i(sbdata_read),
    .sbdata_o(sbdata_write),
    .sbdata_read_valid_o(sbdata_read_valid),
    .sbdata_valid_i(sbdata_valid),
    .sbdata_write_valid_o(sbdata_write_valid),
    .sberror_i(sberror),
    .sberror_valid_i(sberror_valid),
    .sbreadonaddr_o(sbreadonaddr),
    .sbreadondata_o(sbreadondata),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:211.5" */
  \dm_mem$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_mem  i_dm_mem (
    .addr_i(slave_addr_i),
    .be_i(slave_be_i),
    .clear_resumeack_i(clear_resumeack),
    .clk_i(clk_i),
    .cmd_i(cmd),
    .cmd_valid_i(cmd_valid),
    .cmdbusy_o(cmdbusy),
    .cmderror_o(cmderror),
    .cmderror_valid_o(cmderror_valid),
    .data_i(data_csrs_mem),
    .data_o(data_mem_csrs),
    .data_valid_o(data_valid),
    .debug_req_o(debug_req_o),
    .halted_o(halted),
    .haltreq_i(haltreq),
    .hartsel_i(hartsel),
    .ndmreset_i(ndmreset),
    .progbuf_i(progbuf),
    .rdata_o(slave_rdata_o),
    .req_i(slave_req_i),
    .resumereq_i(resumereq),
    .resuming_o(resumeack),
    .rst_ni(rst_ni),
    .wdata_i(slave_wdata_i),
    .we_i(slave_we_i)
  );
  /* src = "rtl/riscv-dbg/dm_top.sv:173.5" */
  \dm_sba$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_sba  i_dm_sba (
    .clk_i(clk_i),
    .dmactive_i(dmactive_o),
    .master_add_o(master_add_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_r_err_i),
    .master_r_other_err_i(master_r_other_err_i),
    .master_r_rdata_i(master_r_rdata_i),
    .master_r_valid_i(master_r_valid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .rst_ni(rst_ni),
    .sbaccess_i(sbaccess),
    .sbaddress_i(sbaddress_csrs_sba),
    .sbaddress_o(sbaddress_sba_csrs),
    .sbaddress_write_valid_i(sbaddress_write_valid),
    .sbautoincrement_i(sbautoincrement),
    .sbbusy_o(sbbusy),
    .sbdata_i(sbdata_write),
    .sbdata_o(sbdata_read),
    .sbdata_read_valid_i(sbdata_read_valid),
    .sbdata_valid_o(sbdata_valid),
    .sbdata_write_valid_i(sbdata_write_valid),
    .sberror_o(sberror),
    .sberror_valid_o(sberror_valid),
    .sbreadonaddr_i(sbreadonaddr),
    .sbreadondata_i(sbreadondata)
  );
  assign ndmreset_o = ndmreset;
endmodule

/* src = "rtl/riscv-dbg/dmi_cdc.sv:19.8" */
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$0y ;
  wire \$5y ;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:98.28" */
  wire clear_pending_rise_edge_detect;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:35.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:48.28" */
  wire core_clear_pending;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:96.28" */
  wire core_clear_pending_q;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:41.28" */
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:44.28" */
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:39.28" */
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:43.28" */
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:38.28" */
  output core_dmi_rst_no;
  wire core_dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:97.28" */
  wire core_dmi_rst_nq;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:45.28" */
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:40.28" */
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:26.28" */
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:32.28" */
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:24.28" */
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:23.28" */
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:30.28" */
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:25.28" */
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:31.28" */
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:36.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:21.28" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:22.28" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:100.43-100.64" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(core_clear_pending_q),
    .Y(\$0y )
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:100.43-100.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\$0y ),
    .B(core_clear_pending),
    .Y(clear_pending_rise_edge_detect)
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:107.32-107.63" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(clear_pending_rise_edge_detect),
    .Y(\$5y )
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_clear_pending_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(core_clear_pending),
    .Q(core_clear_pending_q)
  );
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_dmi_rst_nq  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$5y ),
    .Q(core_dmi_rst_nq)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:50.45" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_cdc.sv:72.46" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
  assign core_dmi_rst_no = core_dmi_rst_nq;
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag.sv:19.8" */
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$0y ;
  wire \$12y ;
  wire \$15y ;
  wire \$16y ;
  wire \$17y ;
  wire \$18y ;
  wire \$19y ;
  wire \$1y ;
  wire \$46y ;
  wire \$47y ;
  wire \$49y ;
  wire \$50y ;
  wire \$51y ;
  wire \$52y ;
  wire \$55y ;
  wire \$58y ;
  wire \$60y ;
  wire \$61y ;
  wire \$72y ;
  wire \$73y ;
  wire \$74y ;
  wire \$75y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14507 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14509 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14511 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14513 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14515 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14520 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14523 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14527 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14534 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14517 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14529 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14536 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13395 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13441 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire [31:0] \$data_d$26 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire [31:0] \$data_d$43 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  wire [40:0] \$dr_d$76 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  wire [40:0] \$dr_d$77 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  wire [40:0] \$dr_d$78 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  wire [40:0] \$dr_d$79 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  wire [40:0] \$dr_d$80 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  wire [40:0] \$dr_d$81 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  wire [31:0] \$dtmcs_d$4 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  wire [31:0] \$dtmcs_d$5 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  wire [31:0] \$dtmcs_d$7 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  wire [1:0] \$error_d$59 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  wire [1:0] \$error_d$62 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_busy$27 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_busy$31 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_busy$44 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  wire \$error_dmi_busy$48 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  wire \$error_dmi_busy$53 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  wire \$error_dmi_op_failed$28 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  wire \$error_dmi_op_failed$32 ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  wire \$error_dmi_op_failed$45 ;
  wire \$procmux$12764_CMP ;
  wire \$procmux$12768_CMP ;
  wire \$procmux$12838_CMP ;
  wire [2:0] \$procmux$12931_Y ;
  wire [2:0] \$procmux$12968_Y ;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.15" */
  wire [6:0] address_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:126.26" */
  wire [6:0] address_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:56.9" */
  wire capture;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:22.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.16" */
  wire [31:0] data_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:127.24" */
  wire [31:0] data_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:129.10" */
  wire [40:0] dmi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:54.9" */
  wire dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:108.18" */
  wire [40:0] dmi_req;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:29.24" */
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:109.18" */
  wire dmi_req_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:31.24" */
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:110.18" */
  wire dmi_req_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:30.24" */
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:112.18" */
  wire [33:0] dmi_resp;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:33.24" */
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:114.18" */
  wire dmi_resp_ready;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:34.24" */
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:113.18" */
  wire dmi_resp_valid;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:35.24" */
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:28.24" */
  output dmi_rst_no;
  wire dmi_rst_no;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:105.16" */
  wire dmi_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:106.16" */
  wire dmi_tdo;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.28" */
  wire [40:0] dr_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:125.34" */
  wire [40:0] dr_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.15" */
  wire [31:0] dtmcs_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:62.24" */
  wire [31:0] dtmcs_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:60.9" */
  wire dtmcs_select;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.15" */
  wire [1:0] error_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:137.9" */
  wire error_dmi_busy;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:49.24" */
  wire [1:0] error_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:52.9" */
  wire jtag_dmi_clear;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:23.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:57.9" */
  wire shift;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.11" */
  wire [2:0] state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:123.20" */
  wire [2:0] state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:51.9" */
  wire tck;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:37.24" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:40.24" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:41.24" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:58.9" */
  wire tdi;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:42.24" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:24.24" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:38.24" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:39.24" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:55.9" */
  wire update;
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:64.41-64.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(dtmcs_select),
    .B(update),
    .Y(\$0y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:64.41-64.87" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\$0y ),
    .B(dtmcs_q[17]),
    .Y(\$1y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:133.26-133.42" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(state_q),
    .B(2'h3),
    .Y(\$12y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:133.25-133.74" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$13  (
    .A(2'h1),
    .B(2'h2),
    .S(\$12y ),
    .Y(dmi_req[33:32])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.15-160.35" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(dmi_select),
    .B(update),
    .Y(\$15y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.40-160.61" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(error_q),
    .Y(\$16y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.15-160.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(\$15y ),
    .B(\$16y ),
    .Y(\$17y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:164.17-164.54" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(dr_q[1:0]),
    .B(1'h1),
    .Y(\$18y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:166.26-166.64" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(dr_q[1:0]),
    .B(2'h2),
    .Y(\$19y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:64.22-64.88" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(jtag_dmi_clear),
    .B(\$1y ),
    .Y(dmi_clear)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:233.21-233.36" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(state_q),
    .Y(\$46y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:233.11-233.36" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(update),
    .B(\$46y ),
    .Y(\$47y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(state_q),
    .B(1'h1),
    .Y(\$49y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(state_q),
    .B(2'h2),
    .Y(\$50y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.22-240.58" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A({ \$50y , \$49y  }),
    .Y(\$51y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:240.11-240.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(capture),
    .B(\$51y ),
    .Y(\$52y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:244.11-244.50" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\$error_dmi_busy$53 ),
    .B(\$16y ),
    .Y(\$55y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:248.11-248.55" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$error_dmi_op_failed$45 ),
    .B(\$16y ),
    .Y(\$58y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:253.11-253.37" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(update),
    .B(dtmcs_q[16]),
    .Y(\$60y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:253.11-253.53" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$60y ),
    .B(dtmcs_select),
    .Y(\$61y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.40-269.55" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(error_dmi_busy),
    .Y(\$72y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.15-269.55" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$73  (
    .A(\$16y ),
    .B(\$72y ),
    .Y(\$73y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:272.24-272.42" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(error_q),
    .B(2'h3),
    .Y(\$74y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:272.24-272.60" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(\$74y ),
    .B(error_dmi_busy),
    .Y(\$75y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14506  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14517 ),
    .Q(state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14519  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(error_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14520 ),
    .Q(error_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14522  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(data_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14529 ),
    .Q(data_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14531  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(address_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14536 ),
    .Q(address_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14508  (
    .A({ \$12y , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14507 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14510  (
    .A({ \$49y , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14509 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14512  (
    .A({ \$procmux$12768_CMP , \$49y , \$12y , dmi_clear, dmi_resp_valid }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14511 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14514  (
    .A({ \$procmux$12768_CMP , \$17y , dmi_clear }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14513 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14516  (
    .A({ \$procmux$12768_CMP , \$19y , \$18y , \$17y , dmi_clear }),
    .B(5'h12),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14515 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14521  (
    .A({ \$61y , \$58y , \$55y , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14520 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14524  (
    .A({ \$50y , dmi_clear, dmi_resp_valid }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14523 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14528  (
    .A({ \$procmux$12768_CMP , \$50y , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14527 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14535  (
    .A({ \$procmux$12768_CMP , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14534 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14518  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14515 , \$auto$opt_dff.cc:194:make_patterns_logic$14513 , \$auto$opt_dff.cc:194:make_patterns_logic$14511 , \$auto$opt_dff.cc:194:make_patterns_logic$14509 , \$auto$opt_dff.cc:194:make_patterns_logic$14507  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14517 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14530  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14527 , \$auto$opt_dff.cc:194:make_patterns_logic$14523 , \$auto$opt_dff.cc:194:make_patterns_logic$14513  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14529 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14537  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14534 , \$auto$opt_dff.cc:194:make_patterns_logic$14513  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14536 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13394  (
    .A({ \$49y , \$12y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13395 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13442  (
    .A({ \$procmux$12764_CMP , \$50y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13441 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:286.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(41'h00000000000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd41)
  ) \$driver$dr_q  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dr_d),
    .Q(dr_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$dtmcs_q.abits  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[9:4]),
    .Q(dtmcs_q[9:4])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmihardreset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[17]),
    .Q(dtmcs_q[17])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmireset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[16]),
    .Q(dtmcs_q[16])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$dtmcs_q.dmistat  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[11:10]),
    .Q(dtmcs_q[11:10])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$dtmcs_q.idle  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[14:12]),
    .Q(dtmcs_q[14:12])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$dtmcs_q.version  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[3:0]),
    .Q(dtmcs_q[3:0])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.zero0  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[15]),
    .Q(dtmcs_q[15])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:93.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(14'h0000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd14)
  ) \$driver$dtmcs_q.zero1  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[31:18]),
    .Q(dtmcs_q[31:18])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:254.9-254.30|rtl/riscv-dbg/dmi_jtag.sv:253.7-255.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12731  (
    .A({ 1'h1, \$error_d$59 [0] }),
    .B(2'h0),
    .S(\$61y ),
    .Y(\$error_d$62 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:249.9-249.31|rtl/riscv-dbg/dmi_jtag.sv:248.7-250.10" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12737  (
    .A(\$58y ),
    .Y(\$error_d$59 [0])
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:241.9-241.31|rtl/riscv-dbg/dmi_jtag.sv:240.7-242.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12749  (
    .A(\$error_dmi_busy$48 ),
    .B(\$52y ),
    .Y(\$error_dmi_busy$53 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:234.9-234.31|rtl/riscv-dbg/dmi_jtag.sv:233.7-235.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12755  (
    .A(\$error_dmi_busy$44 ),
    .B(\$47y ),
    .Y(\$error_dmi_busy$48 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12764_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$12764_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:160.11-170.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12768_CMP0  (
    .A(state_q),
    .Y(\$procmux$12768_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:215.28-215.55|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12776_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$error_dmi_op_failed$28 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:216.29-216.51|rtl/riscv-dbg/dmi_jtag.sv:214.13-218.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12787_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$error_dmi_busy$27 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.31-220.14|rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12806  (
    .A(dmi_resp_valid),
    .B(\$error_dmi_busy$27 ),
    .Y(\$error_dmi_busy$31 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:191.29-194.18|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$12835  (
    .A(32'd3131949278),
    .B({ dmi_resp[33:2], 64'hdeadbeefb051b051 }),
    .S({ \$procmux$12838_CMP , \$error_dmi_op_failed$28 , \$error_dmi_busy$27  }),
    .Y(\$data_d$26 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:185.17-185.40|rtl/riscv-dbg/dmi_jtag.sv:183.13-198.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12838_CMP0  (
    .A(dmi_resp[1:0]),
    .Y(\$procmux$12838_CMP )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.31-200.14|rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12877  (
    .A(dmi_resp_valid),
    .B(\$error_dmi_op_failed$28 ),
    .Y(\$error_dmi_op_failed$32 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$12931  (
    .A(3'h0),
    .B({ 1'h0, \$procmux$12968_Y [1], 7'h54 }),
    .S({ \$procmux$12768_CMP , \$49y , \$12y  }),
    .Y(\$procmux$12931_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:165.15-165.30|rtl/riscv-dbg/dmi_jtag.sv:164.13-168.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12968  (
    .A(\$18y ),
    .Y(\$procmux$12968_Y [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13018  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13441 ),
    .B(\$error_dmi_op_failed$32 ),
    .Y(\$error_dmi_op_failed$45 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:213.11-220.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13027  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13441 ),
    .B(\$error_dmi_busy$31 ),
    .Y(\$error_dmi_busy$44 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:182.11-200.14|rtl/riscv-dbg/dmi_jtag.sv:157.7-229.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13038  (
    .A(dr_q[33:2]),
    .B(\$data_d$26 ),
    .S(\$50y ),
    .Y(\$data_d$43 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13068  (
    .A(\$data_d$43 ),
    .B(32'd0),
    .S(dmi_clear),
    .Y(data_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13072  (
    .A(dr_q[40:34]),
    .B(7'h00),
    .S(dmi_clear),
    .Y(address_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13076  (
    .A(\$procmux$12931_Y ),
    .B(3'h0),
    .S(dmi_clear),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13080  (
    .A(\$error_d$62 ),
    .B(2'h0),
    .S(dmi_clear),
    .Y(error_d)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13088  (
    .A(\$error_dmi_busy$53 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(error_dmi_busy)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:151.20-156.8|rtl/riscv-dbg/dmi_jtag.sv:151.5-256.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13092  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13395 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(dmi_req_valid)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:280.11-280.47|rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13094  (
    .A(\$dr_d$79 ),
    .B({ tdi, dr_q[40:1] }),
    .S(dmi_select),
    .Y(\$dr_d$80 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:279.9-281.12|rtl/riscv-dbg/dmi_jtag.sv:278.7-282.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13103  (
    .A(\$dr_d$79 ),
    .B(\$dr_d$80 ),
    .S(shift),
    .Y(\$dr_d$81 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:273.13-273.49|rtl/riscv-dbg/dmi_jtag.sv:272.20-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13108  (
    .A(dr_q),
    .B({ address_q, data_q, 2'h3 }),
    .S(\$75y ),
    .Y(\$dr_d$76 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:270.13-270.52|rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13122  (
    .A(\$dr_d$76 ),
    .B({ address_q, data_q, 2'h0 }),
    .S(\$73y ),
    .Y(\$dr_d$77 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:269.11-274.14|rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13132  (
    .A(dr_q),
    .B(\$dr_d$77 ),
    .S(dmi_select),
    .Y(\$dr_d$78 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:268.9-275.12|rtl/riscv-dbg/dmi_jtag.sv:267.7-276.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13140  (
    .A(dr_q),
    .B(\$dr_d$78 ),
    .S(capture),
    .Y(\$dr_d$79 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:265.7-265.17|rtl/riscv-dbg/dmi_jtag.sv:264.5-283.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$13147  (
    .A(\$dr_d$81 ),
    .B(41'h00000000000),
    .S(dmi_clear),
    .Y(dr_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.25-89.61|rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13149  (
    .A(\$dtmcs_d$5 ),
    .B({ tdi, dtmcs_q[31:1] }),
    .S(dtmcs_select),
    .Y(\$dtmcs_d$7 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:89.7-89.61|rtl/riscv-dbg/dmi_jtag.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13155  (
    .A(\$dtmcs_d$5 ),
    .B(\$dtmcs_d$7 ),
    .S(shift),
    .Y(dtmcs_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:75.9-84.23|rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13157  (
    .A(dtmcs_q),
    .B({ 20'h00001, error_q, 10'h071 }),
    .S(dtmcs_select),
    .Y(\$dtmcs_d$4 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:74.7-85.10|rtl/riscv-dbg/dmi_jtag.sv:73.5-86.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$13162  (
    .A(dtmcs_q),
    .B(\$dtmcs_d$4 ),
    .S(capture),
    .Y(\$dtmcs_d$5 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:331.11" */
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag.sv:308.5" */
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dr_q[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$error_d$59 [1] = 1'h1;
  assign { \$procmux$12968_Y [2], \$procmux$12968_Y [0] } = 2'h1;
  assign dmi = dr_q;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
  assign dmi_resp_ready = 1'h1;
  assign dmi_tdo = dr_q[0];
endmodule

/* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" */
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$32y ;
  wire \$34y ;
  wire [1:0] \$35y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14539 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14542 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13397 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13445 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13447 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13449 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  wire \$bypass_d$11 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire \$bypass_d$13 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  wire \$bypass_d$16 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire \$bypass_d$18 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  wire [31:0] \$idcode_d$10 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire [31:0] \$idcode_d$12 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  wire [31:0] \$idcode_d$15 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire [31:0] \$idcode_d$17 ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  wire [4:0] \$jtag_ir_shift_d$2 ;
  wire \$procmux$11735_Y ;
  wire \$procmux$11807_CMP ;
  wire \$procmux$11808_CMP ;
  wire \$procmux$11809_CMP ;
  wire \$procmux$11812_CMP ;
  wire \$procmux$11814_CMP ;
  wire \$procmux$11815_CMP ;
  wire \$procmux$11816_CMP ;
  wire \$procmux$11819_CMP ;
  wire \$procmux$11820_CMP ;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" */
  wire bypass_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" */
  wire bypass_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.30" */
  wire capture_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" */
  wire capture_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" */
  output capture_o;
  wire capture_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" */
  output dmi_clear_o;
  wire dmi_clear_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" */
  output dmi_select_o;
  wire dmi_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" */
  input dmi_tdo_i;
  wire dmi_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" */
  output dtmcs_select_o;
  wire dtmcs_select_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" */
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" */
  wire [31:0] idcode_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" */
  wire [31:0] idcode_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" */
  wire idcode_select;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" */
  wire [4:0] jtag_ir_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" */
  wire [4:0] jtag_ir_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" */
  wire [4:0] jtag_ir_shift_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" */
  wire [4:0] jtag_ir_shift_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.20" */
  wire shift_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" */
  wire shift_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" */
  output shift_o;
  wire shift_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" */
  wire [3:0] tap_state_d;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" */
  wire [3:0] tap_state_q;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" */
  input tck_i;
  wire tck_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" */
  wire tck_n;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" */
  wire tck_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" */
  output tck_o;
  wire tck_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" */
  input td_i;
  wire td_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" */
  output td_o;
  wire td_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" */
  output tdi_o;
  wire tdi_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" */
  wire tdo_mux;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.42" */
  wire test_logic_reset;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" */
  input tms_i;
  wire tms_i;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" */
  input trst_ni;
  wire trst_ni;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:58.9" */
  wire update_dr;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" */
  wire update_ir;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" */
  output update_o;
  wire update_o;
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:209.20-209.39" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(shift_ir),
    .B(shift_dr),
    .Y(\$32y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.23-235.59" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$35  (
    .A(2'h1),
    .B(2'h2),
    .S(tms_i),
    .Y(\$35y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.23-264.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(tms_i),
    .Y(\$34y )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$14538  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_shift_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14539 ),
    .Q(jtag_ir_shift_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$14541  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14542 ),
    .Q(jtag_ir_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14540  (
    .A({ dmi_clear_o, capture_ir, shift_ir }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14539 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14543  (
    .A({ dmi_clear_o, update_ir }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14542 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13396  (
    .A({ idcode_select, dmi_select_o, dtmcs_select_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13397 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13444  (
    .A({ \$procmux$11820_CMP , update_ir, update_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13445 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13446  (
    .A({ shift_ir, capture_ir }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13447 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13448  (
    .A({ shift_dr, capture_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13449 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$bypass_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(bypass_d),
    .Q(bypass_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd202137011),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$idcode_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(idcode_d),
    .Q(idcode_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$tap_state_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(tap_state_d),
    .Q(tap_state_q)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$td_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(tdo_mux),
    .Q(td_o)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$tdo_oe_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(\$32y ),
    .Q(tdo_oe_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$11735  (
    .A(bypass_q),
    .B({ idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }),
    .S({ idcode_select, dtmcs_select_o, dmi_select_o }),
    .Y(\$procmux$11735_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$11736_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(dmi_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$11737_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(dtmcs_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11738_CMP0  (
    .A(jtag_ir_q),
    .B(1'h1),
    .Y(idcode_select)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11744  (
    .A(\$procmux$11735_Y ),
    .B(jtag_ir_shift_q[0]),
    .S(shift_ir),
    .Y(tdo_mux)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11768  (
    .A(\$bypass_d$18 ),
    .B(1'h0),
    .S(dmi_clear_o),
    .Y(bypass_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11771  (
    .A(\$idcode_d$17 ),
    .B(32'd202137011),
    .S(dmi_clear_o),
    .Y(idcode_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11774  (
    .A(td_i),
    .B(\$bypass_d$13 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$13397 ),
    .Y(\$bypass_d$16 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11778  (
    .A(\$idcode_d$12 ),
    .B({ td_i, idcode_q[31:1] }),
    .S(idcode_select),
    .Y(\$idcode_d$15 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11784  (
    .A(\$bypass_d$13 ),
    .B(\$bypass_d$16 ),
    .S(shift_dr),
    .Y(\$bypass_d$18 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11788  (
    .A(\$idcode_d$12 ),
    .B(\$idcode_d$15 ),
    .S(shift_dr),
    .Y(\$idcode_d$17 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11791  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13397 ),
    .B(bypass_q),
    .Y(\$bypass_d$11 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11795  (
    .A(idcode_q),
    .B(32'd202137011),
    .S(idcode_select),
    .Y(\$idcode_d$10 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11800  (
    .A(bypass_q),
    .B(\$bypass_d$11 ),
    .S(capture_o),
    .Y(\$bypass_d$13 )
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11803  (
    .A(idcode_q),
    .B(\$idcode_d$10 ),
    .S(capture_o),
    .Y(\$idcode_d$12 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$pmux  #(
    .S_WIDTH(32'd11),
    .WIDTH(32'd4)
  ) \$procmux$11805  (
    .A({ 3'h0, \$34y  }),
    .B({ \$35y [1], 1'h0, \$35y [0], 4'ha, tms_i, \$35y , \$35y [0], 4'h3, tms_i, \$35y , 2'h0, \$34y , 1'h0, \$34y , 2'h1, \$35y , \$35y [0], 2'h3, tms_i, 3'h7, \$35y , 1'h1, tms_i, 4'hc, \$35y  }),
    .S({ \$procmux$11819_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13449 , \$procmux$11816_CMP , \$procmux$11815_CMP , \$procmux$11814_CMP , \$procmux$11812_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13447 , \$procmux$11809_CMP , \$procmux$11808_CMP , \$procmux$11807_CMP , \$auto$opt_reduce.cc:137:opt_pmux$13445  }),
    .Y(tap_state_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11806_CMP0  (
    .A(tap_state_q),
    .B(4'hf),
    .Y(update_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11807_CMP0  (
    .A(tap_state_q),
    .B(4'he),
    .Y(\$procmux$11807_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11808_CMP0  (
    .A(tap_state_q),
    .B(4'hd),
    .Y(\$procmux$11808_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11809_CMP0  (
    .A(tap_state_q),
    .B(4'hc),
    .Y(\$procmux$11809_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11810_CMP0  (
    .A(tap_state_q),
    .B(4'hb),
    .Y(shift_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11811_CMP0  (
    .A(tap_state_q),
    .B(4'ha),
    .Y(capture_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11812_CMP0  (
    .A(tap_state_q),
    .B(4'h9),
    .Y(\$procmux$11812_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11813_CMP0  (
    .A(tap_state_q),
    .B(4'h8),
    .Y(update_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11814_CMP0  (
    .A(tap_state_q),
    .B(3'h7),
    .Y(\$procmux$11814_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11815_CMP0  (
    .A(tap_state_q),
    .B(3'h6),
    .Y(\$procmux$11815_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11816_CMP0  (
    .A(tap_state_q),
    .B(3'h5),
    .Y(\$procmux$11816_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11817_CMP0  (
    .A(tap_state_q),
    .B(3'h4),
    .Y(shift_dr)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11818_CMP0  (
    .A(tap_state_q),
    .B(2'h3),
    .Y(capture_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11819_CMP0  (
    .A(tap_state_q),
    .B(2'h2),
    .Y(\$procmux$11819_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11820_CMP0  (
    .A(tap_state_q),
    .B(1'h1),
    .Y(\$procmux$11820_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:230.23-233.10|rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11821_CMP0  (
    .A(tap_state_q),
    .Y(dmi_clear_o)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$11891  (
    .A(jtag_ir_shift_q),
    .B(5'h01),
    .S(dmi_clear_o),
    .Y(jtag_ir_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$11894  (
    .A(\$jtag_ir_shift_d$2 ),
    .B(5'h00),
    .S(dmi_clear_o),
    .Y(jtag_ir_shift_d)
  );
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$11900  (
    .A({ td_i, jtag_ir_shift_q[4:1] }),
    .B(5'h05),
    .S(capture_ir),
    .Y(\$jtag_ir_shift_d$2 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" */
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign capture_dr = capture_o;
  assign shift_o = shift_dr;
  assign tck_o = tck_i;
  assign tdi_o = td_i;
  assign test_logic_reset = dmi_clear_o;
  assign update_dr = update_o;
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top.i_dm_csrs.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [67:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14545 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14548 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14550 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14555 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14552 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14985 ;
  wire [1:0] \$procmux$1899_Y ;
  wire \$procmux$1902_Y ;
  wire \$procmux$1905_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [67:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [67:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [67], \$15y [33] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd68)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$14985 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$7  (
    .A(mem_q[33:0]),
    .B(mem_q[67:34]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14544  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$1902_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14545 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14547  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$1899_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14552 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14554  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$1905_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14555 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$14557  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[67:34]),
    .EN(\$10y ),
    .Q(mem_q[67:34])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(34'h000000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd34)
  ) \$auto$ff.cc:266:slice$14558  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[33:0]),
    .EN(\$10y ),
    .Q(mem_q[33:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14546  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14545 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14549  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14548 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14551  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14550 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14556  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14555 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14553  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14550 , \$auto$opt_dff.cc:194:make_patterns_logic$14548  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14552 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$14984  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$14985 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$1899  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$1899_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1902  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$1902_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1905  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$1905_Y )
  );
  assign { \$15y [66:34], \$15y [32:0] } = { \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [67], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33], \$15y [33] };
  assign \$auto$rtlil.cc:3092:Mux$14985 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14560 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14563 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14565 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14570 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14567 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14990 ;
  wire [1:0] \$procmux$6129_Y ;
  wire \$procmux$6132_Y ;
  wire \$procmux$6135_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [3], \$15y [1] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$14990 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$7  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14559  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6132_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14560 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14562  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6129_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14567 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14569  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6135_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14570 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14572  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$10y ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14573  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$10y ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14561  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14560 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14564  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14563 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14566  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14565 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14571  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14570 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14568  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14565 , \$auto$opt_dff.cc:194:make_patterns_logic$14563  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14567 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$14989  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$14990 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6129  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$6129_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6132  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6132_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6135  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6135_Y )
  );
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$14990 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14575 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14578 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14580 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14585 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14582 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$14995 ;
  wire [1:0] \$procmux$6076_Y ;
  wire \$procmux$6079_Y ;
  wire \$procmux$6082_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [3], \$15y [1] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$14995 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$7  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14574  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6079_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14575 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14577  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6076_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14582 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14584  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6082_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14585 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14587  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$10y ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14588  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$10y ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14576  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14575 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14579  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14578 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14581  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14580 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14586  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14585 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14583  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14580 , \$auto$opt_dff.cc:194:make_patterns_logic$14578  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14582 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$14994  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$14995 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6076  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$6076_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6079  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6079_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6082  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6082_Y )
  );
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$14995 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14590 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14593 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14595 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14600 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14597 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15000 ;
  wire [1:0] \$procmux$6023_Y ;
  wire \$procmux$6026_Y ;
  wire \$procmux$6029_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [3], \$15y [1] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15000 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$7  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14589  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6026_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14590 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14592  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6023_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14597 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14599  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$6029_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14600 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14602  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$10y ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14603  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$10y ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14591  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14590 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14594  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14593 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14596  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14595 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14601  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14600 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14598  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14595 , \$auto$opt_dff.cc:194:make_patterns_logic$14593  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14597 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$14999  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15000 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6023  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$6023_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6026  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6026_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6029  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$6029_Y )
  );
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15000 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14605 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14608 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14610 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14615 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14612 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15005 ;
  wire [1:0] \$procmux$5970_Y ;
  wire \$procmux$5973_Y ;
  wire \$procmux$5976_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [3], \$15y [1] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15005 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$7  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14604  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5973_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14605 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14607  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5970_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14612 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14614  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5976_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14615 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14617  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$10y ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14618  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$10y ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14606  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14605 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14609  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14608 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14611  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14610 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14616  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14615 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14613  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14610 , \$auto$opt_dff.cc:194:make_patterns_logic$14608  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14612 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15004  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15005 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5970  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$5970_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5973  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$5973_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5976  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$5976_Y )
  );
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15005 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$10y ;
  wire [3:0] \$15y ;
  wire \$26y ;
  wire \$27y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$38y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14620 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14623 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14630 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14627 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15010 ;
  wire [1:0] \$procmux$5917_Y ;
  wire \$procmux$5920_Y ;
  wire \$procmux$5923_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(push_i),
    .B(\$35y ),
    .Y(\$10y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$15  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$15y [3], \$15y [1] })
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$17  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$15y [3], \$15y [3], \$15y [1], \$15y [1] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(empty_o),
    .Y(\$26y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(pop_i),
    .B(\$26y ),
    .Y(\$27y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:95.34-95.52" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$31  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15010 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(push_i),
    .B(pop_i),
    .Y(\$34y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(full_o),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(\$36y ),
    .B(\$26y ),
    .Y(\$38y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:68.51-68.72" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$7  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14619  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5920_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14620 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14622  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5917_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14627 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14629  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$5923_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14630 ),
    .Q(read_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14632  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$10y ),
    .Q(mem_q[3:2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14633  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$10y ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14621  (
    .A({ flush_i, \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14620 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14624  (
    .A({ flush_i, \$38y , \$27y , \$10y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14623 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14626  (
    .A({ flush_i, \$38y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14625 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14631  (
    .A({ flush_i, \$27y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14630 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14628  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14623 , \$auto$opt_dff.cc:194:make_patterns_logic$14625  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14627 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15009  (
    .A(\$27y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15010 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5917  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$5917_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5920  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$5920_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5923  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$5923_Y )
  );
  assign { \$15y [2], \$15y [0] } = { \$15y [3], \$15y [1] };
  assign \$auto$rtlil.cc:3092:Mux$15010 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire [2:0] \$13y ;
  wire \$16y ;
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14635 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14638 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14640 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14642 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15015 ;
  wire [1:0] \$procmux$11482_Y ;
  wire \$procmux$11485_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(write_pointer_q),
    .Y(\$13y [2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$14  (
    .A(mem_q),
    .B(data_i),
    .S({ \$13y [2], \$13y [2], \$13y [2] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$16y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(empty_o),
    .Y(\$23y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(pop_i),
    .B(\$23y ),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$28  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15015 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(push_i),
    .B(pop_i),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(full_o),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$23y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(push_i),
    .B(\$32y ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14634  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11485_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14635 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14637  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11482_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14642 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14647  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$46y ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14636  (
    .A({ flush_i, \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14635 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14639  (
    .A({ \$35y , flush_i, \$24y , \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14638 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14641  (
    .A({ \$35y , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14640 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14643  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14640 , \$auto$opt_dff.cc:194:make_patterns_logic$14638  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14642 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15014  (
    .A(\$24y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15015 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11482  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$11482_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11485  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$11485_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11507  (
    .A(write_pointer_q),
    .B(\$16y ),
    .Y(write_pointer_n)
  );
  assign \$13y [1:0] = { \$13y [2], \$13y [2] };
  assign \$auto$rtlil.cc:3092:Mux$15015 [0] = 1'h1;
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire [2:0] \$13y ;
  wire \$16y ;
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14649 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14652 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14654 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14656 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15020 ;
  wire [1:0] \$procmux$11613_Y ;
  wire \$procmux$11616_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(write_pointer_q),
    .Y(\$13y [2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$14  (
    .A(mem_q),
    .B(data_i),
    .S({ \$13y [2], \$13y [2], \$13y [2] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$16y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(empty_o),
    .Y(\$23y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(pop_i),
    .B(\$23y ),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$28  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15020 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(push_i),
    .B(pop_i),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(full_o),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$23y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(push_i),
    .B(\$32y ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14648  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11616_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14649 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14651  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$11613_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14656 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14661  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$46y ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14650  (
    .A({ flush_i, \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14649 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14653  (
    .A({ \$35y , flush_i, \$24y , \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14652 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14655  (
    .A({ \$35y , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14654 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14657  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14654 , \$auto$opt_dff.cc:194:make_patterns_logic$14652  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14656 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15019  (
    .A(\$24y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15020 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11613  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$11613_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11616  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$11616_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11638  (
    .A(write_pointer_q),
    .B(\$16y ),
    .Y(write_pointer_n)
  );
  assign \$13y [1:0] = { \$13y [2], \$13y [2] };
  assign \$auto$rtlil.cc:3092:Mux$15020 [0] = 1'h1;
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire [2:0] \$13y ;
  wire \$16y ;
  wire \$23y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$35y ;
  wire \$46y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14663 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14666 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14668 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14670 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15025 ;
  wire [1:0] \$procmux$10815_Y ;
  wire \$procmux$10818_Y ;
  /* src = "rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  /* src = "rtl/common_cells/fifo_v3.sv:57.32-57.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:58.32-58.49" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(write_pointer_q),
    .Y(\$13y [2])
  );
  /* src = "rtl/common_cells/fifo_v3.sv:75.13-75.44" */
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$14  (
    .A(mem_q),
    .B(data_i),
    .S({ \$13y [2], \$13y [2], \$13y [2] }),
    .Y(mem_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:83.35-83.54" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$16y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.22-88.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(empty_o),
    .Y(\$23y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:88.13-88.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(pop_i),
    .B(\$23y ),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:97.30-97.46" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$28  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:3092:Mux$15025 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(push_i),
    .B(pop_i),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.33-101.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(full_o),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\$33y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:101.13-101.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$33y ),
    .B(\$23y ),
    .Y(\$35y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:73.13-73.30" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(push_i),
    .B(\$32y ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14662  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$10818_Y ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14663 ),
    .Q(write_pointer_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14665  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$procmux$10815_Y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14670 ),
    .Q(status_cnt_q)
  );
  /* src = "rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14675  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$46y ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14664  (
    .A({ flush_i, \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14663 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14667  (
    .A({ \$35y , flush_i, \$24y , \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14666 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14669  (
    .A({ \$35y , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14668 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14671  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14668 , \$auto$opt_dff.cc:194:make_patterns_logic$14666  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14670 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15024  (
    .A(\$24y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15025 [1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10815  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$procmux$10815_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:122.26-126.17|rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$10818  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$procmux$10818_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/fifo_v3.sv:81.17-81.38|rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10840  (
    .A(write_pointer_q),
    .B(\$16y ),
    .Y(write_pointer_n)
  );
  assign \$13y [1:0] = { \$13y [2], \$13y [2] };
  assign \$auto$rtlil.cc:3092:Mux$15025 [0] = 1'h1;
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "rtl/gpio/gpio.sv:12.8" */
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$100y ;
  wire \$103y ;
  wire \$109y ;
  wire \$110y ;
  wire \$112y ;
  wire \$117y ;
  wire \$119y ;
  wire \$122y ;
  wire \$128y ;
  wire \$129y ;
  wire \$131y ;
  wire \$136y ;
  wire \$138y ;
  wire \$141y ;
  wire \$147y ;
  wire \$148y ;
  wire \$14y ;
  wire \$150y ;
  wire \$155y ;
  wire \$157y ;
  wire \$15y ;
  wire \$160y ;
  wire \$166y ;
  wire \$167y ;
  wire \$169y ;
  wire \$174y ;
  wire \$176y ;
  wire \$179y ;
  wire \$17y ;
  wire \$185y ;
  wire \$186y ;
  wire \$188y ;
  wire \$193y ;
  wire \$195y ;
  wire \$198y ;
  wire \$204y ;
  wire \$205y ;
  wire \$207y ;
  wire \$212y ;
  wire \$214y ;
  wire \$217y ;
  wire \$223y ;
  wire \$224y ;
  wire \$226y ;
  wire \$22y ;
  wire \$231y ;
  wire \$233y ;
  wire \$236y ;
  wire \$242y ;
  wire \$243y ;
  wire \$245y ;
  wire \$24y ;
  wire \$250y ;
  wire \$252y ;
  wire \$255y ;
  wire \$261y ;
  wire \$262y ;
  wire \$264y ;
  wire \$269y ;
  wire \$271y ;
  wire \$274y ;
  wire \$27y ;
  wire \$280y ;
  wire \$281y ;
  wire \$283y ;
  wire \$288y ;
  wire \$290y ;
  wire \$293y ;
  wire \$299y ;
  wire \$300y ;
  wire \$302y ;
  wire \$307y ;
  wire \$309y ;
  wire \$312y ;
  wire \$318y ;
  wire \$319y ;
  wire \$321y ;
  wire \$326y ;
  wire \$328y ;
  wire \$331y ;
  wire \$337y ;
  wire \$338y ;
  wire \$33y ;
  wire \$340y ;
  wire \$345y ;
  wire \$347y ;
  wire \$34y ;
  wire \$350y ;
  wire \$356y ;
  wire \$357y ;
  wire \$359y ;
  wire \$364y ;
  wire \$366y ;
  wire \$369y ;
  wire \$36y ;
  wire \$375y ;
  wire \$376y ;
  wire \$378y ;
  wire \$383y ;
  wire \$385y ;
  wire \$388y ;
  wire \$394y ;
  wire \$395y ;
  wire \$397y ;
  wire \$3y ;
  wire \$402y ;
  wire \$404y ;
  wire \$407y ;
  wire \$413y ;
  wire \$414y ;
  wire \$416y ;
  wire \$41y ;
  wire \$421y ;
  wire \$423y ;
  wire \$426y ;
  wire \$432y ;
  wire \$433y ;
  wire \$435y ;
  wire \$43y ;
  wire \$440y ;
  wire \$442y ;
  wire \$445y ;
  wire \$451y ;
  wire \$452y ;
  wire \$454y ;
  wire \$459y ;
  wire \$461y ;
  wire \$464y ;
  wire \$46y ;
  wire \$470y ;
  wire \$471y ;
  wire \$473y ;
  wire \$478y ;
  wire \$480y ;
  wire \$483y ;
  wire \$489y ;
  wire \$490y ;
  wire \$492y ;
  wire \$497y ;
  wire \$499y ;
  wire \$502y ;
  wire \$508y ;
  wire \$509y ;
  wire \$511y ;
  wire \$516y ;
  wire \$518y ;
  wire \$521y ;
  wire \$527y ;
  wire \$528y ;
  wire \$52y ;
  wire \$530y ;
  wire \$535y ;
  wire \$537y ;
  wire \$53y ;
  wire \$540y ;
  wire \$546y ;
  wire \$547y ;
  wire \$549y ;
  wire \$554y ;
  wire \$556y ;
  wire \$559y ;
  wire \$55y ;
  wire \$565y ;
  wire \$566y ;
  wire \$568y ;
  wire \$573y ;
  wire \$575y ;
  wire \$578y ;
  wire \$584y ;
  wire \$585y ;
  wire \$587y ;
  wire \$592y ;
  wire \$594y ;
  wire \$597y ;
  wire \$5y ;
  wire \$603y ;
  wire \$604y ;
  wire \$606y ;
  wire \$60y ;
  wire \$610y ;
  wire \$611y ;
  wire \$612y ;
  wire \$613y ;
  wire \$614y ;
  wire \$615y ;
  wire \$616y ;
  wire \$617y ;
  wire \$618y ;
  wire \$619y ;
  wire \$620y ;
  wire \$621y ;
  wire \$622y ;
  wire \$623y ;
  wire \$624y ;
  wire \$625y ;
  wire \$626y ;
  wire \$627y ;
  wire \$628y ;
  wire \$629y ;
  wire \$62y ;
  wire \$630y ;
  wire \$631y ;
  wire \$632y ;
  wire \$633y ;
  wire \$634y ;
  wire \$635y ;
  wire \$636y ;
  wire \$637y ;
  wire \$638y ;
  wire \$639y ;
  wire \$65y ;
  wire \$71y ;
  wire \$72y ;
  wire \$74y ;
  wire \$79y ;
  wire \$81y ;
  wire \$84y ;
  wire \$8y ;
  wire \$90y ;
  wire \$91y ;
  wire \$93y ;
  wire \$98y ;
  /* src = "rtl/gpio/gpio.sv:25.34" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[0].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[0].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[0].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[0].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[0].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[0].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[10].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[10].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[10].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[10].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[10].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[10].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[11].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[11].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[11].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[11].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[11].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[11].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[12].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[12].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[12].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[12].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[12].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[12].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[13].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[13].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[13].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[13].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[13].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[13].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[14].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[14].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[14].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[14].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[14].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[14].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[15].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[15].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[15].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[15].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[15].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[15].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[16].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[16].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[16].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[16].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[16].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[16].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[17].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[17].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[17].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[17].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[17].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[17].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[18].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[18].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[18].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[18].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[18].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[18].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[19].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[19].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[19].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[19].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[19].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[19].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[1].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[1].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[1].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[1].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[1].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[1].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[20].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[20].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[20].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[20].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[20].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[20].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[21].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[21].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[21].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[21].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[21].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[21].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[22].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[22].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[22].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[22].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[22].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[22].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[23].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[23].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[23].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[23].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[23].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[23].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[24].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[24].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[24].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[24].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[24].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[24].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[25].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[25].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[25].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[25].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[25].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[25].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[26].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[26].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[26].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[26].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[26].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[26].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[27].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[27].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[27].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[27].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[27].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[27].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[28].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[28].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[28].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[28].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[28].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[28].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[29].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[29].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[29].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[29].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[29].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[29].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[2].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[2].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[2].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[2].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[2].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[2].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[30].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[30].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[30].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[30].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[30].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[30].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[31].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[31].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[31].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[31].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[31].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[31].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[3].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[3].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[3].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[3].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[3].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[3].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[4].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[4].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[4].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[4].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[4].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[4].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[5].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[5].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[5].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[5].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[5].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[5].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[6].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[6].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[6].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[6].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[6].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[6].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[7].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[7].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[7].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[7].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[7].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[7].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[8].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[8].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[8].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[8].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[8].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[8].serial_q ;
  /* src = "rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[9].f_edge ;
  /* src = "rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[9].is_input ;
  /* src = "rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[9].is_output ;
  /* src = "rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[9].r_edge ;
  /* src = "rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[9].serial_d ;
  /* src = "rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[9].serial_q ;
  /* src = "rtl/gpio/gpio.sv:64.25" */
  wire [31:0] gpio_edge;
  /* src = "rtl/gpio/gpio.sv:30.34" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "rtl/gpio/gpio.sv:61.25" */
  wire [31:0] gpio_in_sync;
  /* src = "rtl/gpio/gpio.sv:39.34" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "rtl/gpio/gpio.sv:65.25" */
  wire [31:0] gpio_intrpt;
  /* src = "rtl/gpio/gpio.sv:67.9" */
  wire gpio_intrpt_pending;
  /* src = "rtl/gpio/gpio.sv:32.34" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "rtl/gpio/gpio.sv:36.34" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "rtl/gpio/gpio.sv:58.33" */
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio.sv:42.34" */
  output interrupt_o;
  wire interrupt_o;
  /* src = "rtl/gpio/gpio.sv:45.34" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio.sv:47.34" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio.sv:57.33" */
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio.sv:27.34" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(reg2hw[5]),
    .B(reg2hw[6]),
    .Y(\gen_gpios[0].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$100  (
    .A(\gen_gpios[5].serial_q ),
    .Y(\$100y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(\gen_gpios[5].serial_d ),
    .B(\$100y ),
    .Y(\gen_gpios[5].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$102  (
    .A(\gen_gpios[5].f_edge ),
    .B(\gen_gpios[5].r_edge ),
    .S(reg2hw[35]),
    .Y(gpio_edge[5])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(reg2hw[41]),
    .Y(\$103y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(reg2hw[40]),
    .B(\$103y ),
    .Y(\gen_gpios[5].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$105  (
    .A(reg2hw[40]),
    .B(reg2hw[41]),
    .Y(\gen_gpios[5].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$106  (
    .A(\gen_gpios[5].serial_q ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[29])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(reg2hw[39]),
    .B(\gen_gpios[5].is_output ),
    .Y(gpio_o[5])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$109  (
    .A(\gen_gpios[5].is_output ),
    .B(reg2hw[38]),
    .Y(\$109y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\gen_gpios[0].serial_q ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[4])
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(reg2hw[39]),
    .Y(\$110y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$112  (
    .A(gpio_edge[5]),
    .B(reg2hw[37]),
    .Y(\$112y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(\$112y ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[26])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$117  (
    .A(\gen_gpios[6].serial_d ),
    .Y(\$117y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$118  (
    .A(\$117y ),
    .B(\gen_gpios[6].serial_q ),
    .Y(\gen_gpios[6].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(\gen_gpios[6].serial_q ),
    .Y(\$119y )
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(reg2hw[4]),
    .B(\gen_gpios[0].is_output ),
    .Y(gpio_o[0])
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$120  (
    .A(\gen_gpios[6].serial_d ),
    .B(\$119y ),
    .Y(\gen_gpios[6].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$121  (
    .A(\gen_gpios[6].f_edge ),
    .B(\gen_gpios[6].r_edge ),
    .S(reg2hw[42]),
    .Y(gpio_edge[6])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(reg2hw[48]),
    .Y(\$122y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(reg2hw[47]),
    .B(\$122y ),
    .Y(\gen_gpios[6].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$124  (
    .A(reg2hw[47]),
    .B(reg2hw[48]),
    .Y(\gen_gpios[6].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$125  (
    .A(\gen_gpios[6].serial_q ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[34])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(reg2hw[46]),
    .B(\gen_gpios[6].is_output ),
    .Y(gpio_o[6])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\gen_gpios[6].is_output ),
    .B(reg2hw[45]),
    .Y(\$128y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$129  (
    .A(reg2hw[46]),
    .Y(\$129y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(gpio_edge[6]),
    .B(reg2hw[44]),
    .Y(\$131y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$132  (
    .A(\$131y ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[31])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$136  (
    .A(\gen_gpios[7].serial_d ),
    .Y(\$136y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$137  (
    .A(\$136y ),
    .B(\gen_gpios[7].serial_q ),
    .Y(\gen_gpios[7].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$138  (
    .A(\gen_gpios[7].serial_q ),
    .Y(\$138y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$139  (
    .A(\gen_gpios[7].serial_d ),
    .B(\$138y ),
    .Y(\gen_gpios[7].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\gen_gpios[0].is_output ),
    .B(reg2hw[3]),
    .Y(\$14y )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$140  (
    .A(\gen_gpios[7].f_edge ),
    .B(\gen_gpios[7].r_edge ),
    .S(reg2hw[49]),
    .Y(gpio_edge[7])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$141  (
    .A(reg2hw[55]),
    .Y(\$141y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$142  (
    .A(reg2hw[54]),
    .B(\$141y ),
    .Y(\gen_gpios[7].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$143  (
    .A(reg2hw[54]),
    .B(reg2hw[55]),
    .Y(\gen_gpios[7].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(\gen_gpios[7].serial_q ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[39])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(reg2hw[53]),
    .B(\gen_gpios[7].is_output ),
    .Y(gpio_o[7])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$147  (
    .A(\gen_gpios[7].is_output ),
    .B(reg2hw[52]),
    .Y(\$147y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$148  (
    .A(reg2hw[53]),
    .Y(\$148y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(reg2hw[4]),
    .Y(\$15y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$150  (
    .A(gpio_edge[7]),
    .B(reg2hw[51]),
    .Y(\$150y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$151  (
    .A(\$150y ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[36])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$155  (
    .A(\gen_gpios[8].serial_d ),
    .Y(\$155y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$156  (
    .A(\$155y ),
    .B(\gen_gpios[8].serial_q ),
    .Y(\gen_gpios[8].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$157  (
    .A(\gen_gpios[8].serial_q ),
    .Y(\$157y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$158  (
    .A(\gen_gpios[8].serial_d ),
    .B(\$157y ),
    .Y(\gen_gpios[8].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$159  (
    .A(\gen_gpios[8].f_edge ),
    .B(\gen_gpios[8].r_edge ),
    .S(reg2hw[56]),
    .Y(gpio_edge[8])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$160  (
    .A(reg2hw[62]),
    .Y(\$160y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$161  (
    .A(reg2hw[61]),
    .B(\$160y ),
    .Y(\gen_gpios[8].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$162  (
    .A(reg2hw[61]),
    .B(reg2hw[62]),
    .Y(\gen_gpios[8].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(\gen_gpios[8].serial_q ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[44])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(reg2hw[60]),
    .B(\gen_gpios[8].is_output ),
    .Y(gpio_o[8])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$166  (
    .A(\gen_gpios[8].is_output ),
    .B(reg2hw[59]),
    .Y(\$166y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(reg2hw[60]),
    .Y(\$167y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$169  (
    .A(gpio_edge[8]),
    .B(reg2hw[58]),
    .Y(\$169y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(gpio_edge[0]),
    .B(reg2hw[2]),
    .Y(\$17y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$170  (
    .A(\$169y ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[41])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$174  (
    .A(\gen_gpios[9].serial_d ),
    .Y(\$174y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$175  (
    .A(\$174y ),
    .B(\gen_gpios[9].serial_q ),
    .Y(\gen_gpios[9].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(\gen_gpios[9].serial_q ),
    .Y(\$176y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$177  (
    .A(\gen_gpios[9].serial_d ),
    .B(\$176y ),
    .Y(\gen_gpios[9].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$178  (
    .A(\gen_gpios[9].f_edge ),
    .B(\gen_gpios[9].r_edge ),
    .S(reg2hw[63]),
    .Y(gpio_edge[9])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$179  (
    .A(reg2hw[69]),
    .Y(\$179y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$17y ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[1])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$180  (
    .A(reg2hw[68]),
    .B(\$179y ),
    .Y(\gen_gpios[9].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$181  (
    .A(reg2hw[68]),
    .B(reg2hw[69]),
    .Y(\gen_gpios[9].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$182  (
    .A(\gen_gpios[9].serial_q ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[49])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$183  (
    .A(reg2hw[67]),
    .B(\gen_gpios[9].is_output ),
    .Y(gpio_o[9])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$185  (
    .A(\gen_gpios[9].is_output ),
    .B(reg2hw[66]),
    .Y(\$185y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$186  (
    .A(reg2hw[67]),
    .Y(\$186y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$188  (
    .A(gpio_edge[9]),
    .B(reg2hw[65]),
    .Y(\$188y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$189  (
    .A(\$188y ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[46])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$193  (
    .A(\gen_gpios[10].serial_d ),
    .Y(\$193y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$194  (
    .A(\$193y ),
    .B(\gen_gpios[10].serial_q ),
    .Y(\gen_gpios[10].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$195  (
    .A(\gen_gpios[10].serial_q ),
    .Y(\$195y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(\gen_gpios[10].serial_d ),
    .B(\$195y ),
    .Y(\gen_gpios[10].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$197  (
    .A(\gen_gpios[10].f_edge ),
    .B(\gen_gpios[10].r_edge ),
    .S(reg2hw[70]),
    .Y(gpio_edge[10])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$198  (
    .A(reg2hw[76]),
    .Y(\$198y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$199  (
    .A(reg2hw[75]),
    .B(\$198y ),
    .Y(\gen_gpios[10].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$200  (
    .A(reg2hw[75]),
    .B(reg2hw[76]),
    .Y(\gen_gpios[10].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$201  (
    .A(\gen_gpios[10].serial_q ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[54])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$202  (
    .A(reg2hw[74]),
    .B(\gen_gpios[10].is_output ),
    .Y(gpio_o[10])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$204  (
    .A(\gen_gpios[10].is_output ),
    .B(reg2hw[73]),
    .Y(\$204y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(reg2hw[74]),
    .Y(\$205y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$207  (
    .A(gpio_edge[10]),
    .B(reg2hw[72]),
    .Y(\$207y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$208  (
    .A(\$207y ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[51])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(\gen_gpios[11].serial_d ),
    .Y(\$212y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$213  (
    .A(\$212y ),
    .B(\gen_gpios[11].serial_q ),
    .Y(\gen_gpios[11].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$214  (
    .A(\gen_gpios[11].serial_q ),
    .Y(\$214y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$215  (
    .A(\gen_gpios[11].serial_d ),
    .B(\$214y ),
    .Y(\gen_gpios[11].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$216  (
    .A(\gen_gpios[11].f_edge ),
    .B(\gen_gpios[11].r_edge ),
    .S(reg2hw[77]),
    .Y(gpio_edge[11])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$217  (
    .A(reg2hw[83]),
    .Y(\$217y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$218  (
    .A(reg2hw[82]),
    .B(\$217y ),
    .Y(\gen_gpios[11].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$219  (
    .A(reg2hw[82]),
    .B(reg2hw[83]),
    .Y(\gen_gpios[11].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\gen_gpios[1].serial_d ),
    .Y(\$22y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$220  (
    .A(\gen_gpios[11].serial_q ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[59])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$221  (
    .A(reg2hw[81]),
    .B(\gen_gpios[11].is_output ),
    .Y(gpio_o[11])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$223  (
    .A(\gen_gpios[11].is_output ),
    .B(reg2hw[80]),
    .Y(\$223y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$224  (
    .A(reg2hw[81]),
    .Y(\$224y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$226  (
    .A(gpio_edge[11]),
    .B(reg2hw[79]),
    .Y(\$226y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$227  (
    .A(\$226y ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[56])
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(\$22y ),
    .B(\gen_gpios[1].serial_q ),
    .Y(\gen_gpios[1].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$231  (
    .A(\gen_gpios[12].serial_d ),
    .Y(\$231y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$232  (
    .A(\$231y ),
    .B(\gen_gpios[12].serial_q ),
    .Y(\gen_gpios[12].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$233  (
    .A(\gen_gpios[12].serial_q ),
    .Y(\$233y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$234  (
    .A(\gen_gpios[12].serial_d ),
    .B(\$233y ),
    .Y(\gen_gpios[12].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$235  (
    .A(\gen_gpios[12].f_edge ),
    .B(\gen_gpios[12].r_edge ),
    .S(reg2hw[84]),
    .Y(gpio_edge[12])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$236  (
    .A(reg2hw[90]),
    .Y(\$236y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$237  (
    .A(reg2hw[89]),
    .B(\$236y ),
    .Y(\gen_gpios[12].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$238  (
    .A(reg2hw[89]),
    .B(reg2hw[90]),
    .Y(\gen_gpios[12].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$239  (
    .A(\gen_gpios[12].serial_q ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[64])
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\gen_gpios[1].serial_q ),
    .Y(\$24y )
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$240  (
    .A(reg2hw[88]),
    .B(\gen_gpios[12].is_output ),
    .Y(gpio_o[12])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$242  (
    .A(\gen_gpios[12].is_output ),
    .B(reg2hw[87]),
    .Y(\$242y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$243  (
    .A(reg2hw[88]),
    .Y(\$243y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$245  (
    .A(gpio_edge[12]),
    .B(reg2hw[86]),
    .Y(\$245y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$246  (
    .A(\$245y ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[61])
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(\gen_gpios[1].serial_d ),
    .B(\$24y ),
    .Y(\gen_gpios[1].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$250  (
    .A(\gen_gpios[13].serial_d ),
    .Y(\$250y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$251  (
    .A(\$250y ),
    .B(\gen_gpios[13].serial_q ),
    .Y(\gen_gpios[13].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$252  (
    .A(\gen_gpios[13].serial_q ),
    .Y(\$252y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$253  (
    .A(\gen_gpios[13].serial_d ),
    .B(\$252y ),
    .Y(\gen_gpios[13].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$254  (
    .A(\gen_gpios[13].f_edge ),
    .B(\gen_gpios[13].r_edge ),
    .S(reg2hw[91]),
    .Y(gpio_edge[13])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$255  (
    .A(reg2hw[97]),
    .Y(\$255y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$256  (
    .A(reg2hw[96]),
    .B(\$255y ),
    .Y(\gen_gpios[13].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$257  (
    .A(reg2hw[96]),
    .B(reg2hw[97]),
    .Y(\gen_gpios[13].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$258  (
    .A(\gen_gpios[13].serial_q ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[69])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$259  (
    .A(reg2hw[95]),
    .B(\gen_gpios[13].is_output ),
    .Y(gpio_o[13])
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$26  (
    .A(\gen_gpios[1].f_edge ),
    .B(\gen_gpios[1].r_edge ),
    .S(reg2hw[7]),
    .Y(gpio_edge[1])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$261  (
    .A(\gen_gpios[13].is_output ),
    .B(reg2hw[94]),
    .Y(\$261y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$262  (
    .A(reg2hw[95]),
    .Y(\$262y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$264  (
    .A(gpio_edge[13]),
    .B(reg2hw[93]),
    .Y(\$264y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$265  (
    .A(\$264y ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[66])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$269  (
    .A(\gen_gpios[14].serial_d ),
    .Y(\$269y )
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A(reg2hw[13]),
    .Y(\$27y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$270  (
    .A(\$269y ),
    .B(\gen_gpios[14].serial_q ),
    .Y(\gen_gpios[14].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$271  (
    .A(\gen_gpios[14].serial_q ),
    .Y(\$271y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$272  (
    .A(\gen_gpios[14].serial_d ),
    .B(\$271y ),
    .Y(\gen_gpios[14].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$273  (
    .A(\gen_gpios[14].f_edge ),
    .B(\gen_gpios[14].r_edge ),
    .S(reg2hw[98]),
    .Y(gpio_edge[14])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$274  (
    .A(reg2hw[104]),
    .Y(\$274y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$275  (
    .A(reg2hw[103]),
    .B(\$274y ),
    .Y(\gen_gpios[14].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$276  (
    .A(reg2hw[103]),
    .B(reg2hw[104]),
    .Y(\gen_gpios[14].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$277  (
    .A(\gen_gpios[14].serial_q ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[74])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$278  (
    .A(reg2hw[102]),
    .B(\gen_gpios[14].is_output ),
    .Y(gpio_o[14])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(reg2hw[12]),
    .B(\$27y ),
    .Y(\gen_gpios[1].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$280  (
    .A(\gen_gpios[14].is_output ),
    .B(reg2hw[101]),
    .Y(\$280y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$281  (
    .A(reg2hw[102]),
    .Y(\$281y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$283  (
    .A(gpio_edge[14]),
    .B(reg2hw[100]),
    .Y(\$283y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$284  (
    .A(\$283y ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[71])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$288  (
    .A(\gen_gpios[15].serial_d ),
    .Y(\$288y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$289  (
    .A(\$288y ),
    .B(\gen_gpios[15].serial_q ),
    .Y(\gen_gpios[15].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(reg2hw[12]),
    .B(reg2hw[13]),
    .Y(\gen_gpios[1].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$290  (
    .A(\gen_gpios[15].serial_q ),
    .Y(\$290y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$291  (
    .A(\gen_gpios[15].serial_d ),
    .B(\$290y ),
    .Y(\gen_gpios[15].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$292  (
    .A(\gen_gpios[15].f_edge ),
    .B(\gen_gpios[15].r_edge ),
    .S(reg2hw[105]),
    .Y(gpio_edge[15])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$293  (
    .A(reg2hw[111]),
    .Y(\$293y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$294  (
    .A(reg2hw[110]),
    .B(\$293y ),
    .Y(\gen_gpios[15].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$295  (
    .A(reg2hw[110]),
    .B(reg2hw[111]),
    .Y(\gen_gpios[15].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$296  (
    .A(\gen_gpios[15].serial_q ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[79])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$297  (
    .A(reg2hw[109]),
    .B(\gen_gpios[15].is_output ),
    .Y(gpio_o[15])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$299  (
    .A(\gen_gpios[15].is_output ),
    .B(reg2hw[108]),
    .Y(\$299y )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(\gen_gpios[0].serial_d ),
    .Y(\$3y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_gpios[1].serial_q ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[9])
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$300  (
    .A(reg2hw[109]),
    .Y(\$300y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$302  (
    .A(gpio_edge[15]),
    .B(reg2hw[107]),
    .Y(\$302y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$303  (
    .A(\$302y ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[76])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$307  (
    .A(\gen_gpios[16].serial_d ),
    .Y(\$307y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$308  (
    .A(\$307y ),
    .B(\gen_gpios[16].serial_q ),
    .Y(\gen_gpios[16].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$309  (
    .A(\gen_gpios[16].serial_q ),
    .Y(\$309y )
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(reg2hw[11]),
    .B(\gen_gpios[1].is_output ),
    .Y(gpio_o[1])
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$310  (
    .A(\gen_gpios[16].serial_d ),
    .B(\$309y ),
    .Y(\gen_gpios[16].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$311  (
    .A(\gen_gpios[16].f_edge ),
    .B(\gen_gpios[16].r_edge ),
    .S(reg2hw[112]),
    .Y(gpio_edge[16])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$312  (
    .A(reg2hw[118]),
    .Y(\$312y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$313  (
    .A(reg2hw[117]),
    .B(\$312y ),
    .Y(\gen_gpios[16].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$314  (
    .A(reg2hw[117]),
    .B(reg2hw[118]),
    .Y(\gen_gpios[16].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$315  (
    .A(\gen_gpios[16].serial_q ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[84])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$316  (
    .A(reg2hw[116]),
    .B(\gen_gpios[16].is_output ),
    .Y(gpio_o[16])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$318  (
    .A(\gen_gpios[16].is_output ),
    .B(reg2hw[115]),
    .Y(\$318y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$319  (
    .A(reg2hw[116]),
    .Y(\$319y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$321  (
    .A(gpio_edge[16]),
    .B(reg2hw[114]),
    .Y(\$321y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$322  (
    .A(\$321y ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[81])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$326  (
    .A(\gen_gpios[17].serial_d ),
    .Y(\$326y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$327  (
    .A(\$326y ),
    .B(\gen_gpios[17].serial_q ),
    .Y(\gen_gpios[17].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$328  (
    .A(\gen_gpios[17].serial_q ),
    .Y(\$328y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$329  (
    .A(\gen_gpios[17].serial_d ),
    .B(\$328y ),
    .Y(\gen_gpios[17].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\gen_gpios[1].is_output ),
    .B(reg2hw[10]),
    .Y(\$33y )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$330  (
    .A(\gen_gpios[17].f_edge ),
    .B(\gen_gpios[17].r_edge ),
    .S(reg2hw[119]),
    .Y(gpio_edge[17])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$331  (
    .A(reg2hw[125]),
    .Y(\$331y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$332  (
    .A(reg2hw[124]),
    .B(\$331y ),
    .Y(\gen_gpios[17].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$333  (
    .A(reg2hw[124]),
    .B(reg2hw[125]),
    .Y(\gen_gpios[17].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$334  (
    .A(\gen_gpios[17].serial_q ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[89])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$335  (
    .A(reg2hw[123]),
    .B(\gen_gpios[17].is_output ),
    .Y(gpio_o[17])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$337  (
    .A(\gen_gpios[17].is_output ),
    .B(reg2hw[122]),
    .Y(\$337y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$338  (
    .A(reg2hw[123]),
    .Y(\$338y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(reg2hw[11]),
    .Y(\$34y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$340  (
    .A(gpio_edge[17]),
    .B(reg2hw[121]),
    .Y(\$340y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$341  (
    .A(\$340y ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[86])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$345  (
    .A(\gen_gpios[18].serial_d ),
    .Y(\$345y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$346  (
    .A(\$345y ),
    .B(\gen_gpios[18].serial_q ),
    .Y(\gen_gpios[18].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$347  (
    .A(\gen_gpios[18].serial_q ),
    .Y(\$347y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$348  (
    .A(\gen_gpios[18].serial_d ),
    .B(\$347y ),
    .Y(\gen_gpios[18].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$349  (
    .A(\gen_gpios[18].f_edge ),
    .B(\gen_gpios[18].r_edge ),
    .S(reg2hw[126]),
    .Y(gpio_edge[18])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$350  (
    .A(reg2hw[132]),
    .Y(\$350y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$351  (
    .A(reg2hw[131]),
    .B(\$350y ),
    .Y(\gen_gpios[18].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$352  (
    .A(reg2hw[131]),
    .B(reg2hw[132]),
    .Y(\gen_gpios[18].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$353  (
    .A(\gen_gpios[18].serial_q ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[94])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$354  (
    .A(reg2hw[130]),
    .B(\gen_gpios[18].is_output ),
    .Y(gpio_o[18])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$356  (
    .A(\gen_gpios[18].is_output ),
    .B(reg2hw[129]),
    .Y(\$356y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$357  (
    .A(reg2hw[130]),
    .Y(\$357y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$359  (
    .A(gpio_edge[18]),
    .B(reg2hw[128]),
    .Y(\$359y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(gpio_edge[1]),
    .B(reg2hw[9]),
    .Y(\$36y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$360  (
    .A(\$359y ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[91])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$364  (
    .A(\gen_gpios[19].serial_d ),
    .Y(\$364y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$365  (
    .A(\$364y ),
    .B(\gen_gpios[19].serial_q ),
    .Y(\gen_gpios[19].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$366  (
    .A(\gen_gpios[19].serial_q ),
    .Y(\$366y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$367  (
    .A(\gen_gpios[19].serial_d ),
    .B(\$366y ),
    .Y(\gen_gpios[19].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$368  (
    .A(\gen_gpios[19].f_edge ),
    .B(\gen_gpios[19].r_edge ),
    .S(reg2hw[133]),
    .Y(gpio_edge[19])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$369  (
    .A(reg2hw[139]),
    .Y(\$369y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(\$36y ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[6])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$370  (
    .A(reg2hw[138]),
    .B(\$369y ),
    .Y(\gen_gpios[19].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$371  (
    .A(reg2hw[138]),
    .B(reg2hw[139]),
    .Y(\gen_gpios[19].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$372  (
    .A(\gen_gpios[19].serial_q ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[99])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$373  (
    .A(reg2hw[137]),
    .B(\gen_gpios[19].is_output ),
    .Y(gpio_o[19])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$375  (
    .A(\gen_gpios[19].is_output ),
    .B(reg2hw[136]),
    .Y(\$375y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$376  (
    .A(reg2hw[137]),
    .Y(\$376y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$378  (
    .A(gpio_edge[19]),
    .B(reg2hw[135]),
    .Y(\$378y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$379  (
    .A(\$378y ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[96])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$383  (
    .A(\gen_gpios[20].serial_d ),
    .Y(\$383y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$384  (
    .A(\$383y ),
    .B(\gen_gpios[20].serial_q ),
    .Y(\gen_gpios[20].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$385  (
    .A(\gen_gpios[20].serial_q ),
    .Y(\$385y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$386  (
    .A(\gen_gpios[20].serial_d ),
    .B(\$385y ),
    .Y(\gen_gpios[20].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$387  (
    .A(\gen_gpios[20].f_edge ),
    .B(\gen_gpios[20].r_edge ),
    .S(reg2hw[140]),
    .Y(gpio_edge[20])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$388  (
    .A(reg2hw[146]),
    .Y(\$388y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$389  (
    .A(reg2hw[145]),
    .B(\$388y ),
    .Y(\gen_gpios[20].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$390  (
    .A(reg2hw[145]),
    .B(reg2hw[146]),
    .Y(\gen_gpios[20].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$391  (
    .A(\gen_gpios[20].serial_q ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[104])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$392  (
    .A(reg2hw[144]),
    .B(\gen_gpios[20].is_output ),
    .Y(gpio_o[20])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$394  (
    .A(\gen_gpios[20].is_output ),
    .B(reg2hw[143]),
    .Y(\$394y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$395  (
    .A(reg2hw[144]),
    .Y(\$395y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$397  (
    .A(gpio_edge[20]),
    .B(reg2hw[142]),
    .Y(\$397y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$398  (
    .A(\$397y ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[101])
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .B(\gen_gpios[0].serial_q ),
    .Y(\gen_gpios[0].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$402  (
    .A(\gen_gpios[21].serial_d ),
    .Y(\$402y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$403  (
    .A(\$402y ),
    .B(\gen_gpios[21].serial_q ),
    .Y(\gen_gpios[21].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$404  (
    .A(\gen_gpios[21].serial_q ),
    .Y(\$404y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$405  (
    .A(\gen_gpios[21].serial_d ),
    .B(\$404y ),
    .Y(\gen_gpios[21].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$406  (
    .A(\gen_gpios[21].f_edge ),
    .B(\gen_gpios[21].r_edge ),
    .S(reg2hw[147]),
    .Y(gpio_edge[21])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$407  (
    .A(reg2hw[153]),
    .Y(\$407y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$408  (
    .A(reg2hw[152]),
    .B(\$407y ),
    .Y(\gen_gpios[21].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$409  (
    .A(reg2hw[152]),
    .B(reg2hw[153]),
    .Y(\gen_gpios[21].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_gpios[2].serial_d ),
    .Y(\$41y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$410  (
    .A(\gen_gpios[21].serial_q ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[109])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$411  (
    .A(reg2hw[151]),
    .B(\gen_gpios[21].is_output ),
    .Y(gpio_o[21])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$413  (
    .A(\gen_gpios[21].is_output ),
    .B(reg2hw[150]),
    .Y(\$413y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$414  (
    .A(reg2hw[151]),
    .Y(\$414y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$416  (
    .A(gpio_edge[21]),
    .B(reg2hw[149]),
    .Y(\$416y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$417  (
    .A(\$416y ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[106])
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$41y ),
    .B(\gen_gpios[2].serial_q ),
    .Y(\gen_gpios[2].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$421  (
    .A(\gen_gpios[22].serial_d ),
    .Y(\$421y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$422  (
    .A(\$421y ),
    .B(\gen_gpios[22].serial_q ),
    .Y(\gen_gpios[22].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$423  (
    .A(\gen_gpios[22].serial_q ),
    .Y(\$423y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$424  (
    .A(\gen_gpios[22].serial_d ),
    .B(\$423y ),
    .Y(\gen_gpios[22].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$425  (
    .A(\gen_gpios[22].f_edge ),
    .B(\gen_gpios[22].r_edge ),
    .S(reg2hw[154]),
    .Y(gpio_edge[22])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$426  (
    .A(reg2hw[160]),
    .Y(\$426y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$427  (
    .A(reg2hw[159]),
    .B(\$426y ),
    .Y(\gen_gpios[22].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$428  (
    .A(reg2hw[159]),
    .B(reg2hw[160]),
    .Y(\gen_gpios[22].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$429  (
    .A(\gen_gpios[22].serial_q ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[114])
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\gen_gpios[2].serial_q ),
    .Y(\$43y )
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$430  (
    .A(reg2hw[158]),
    .B(\gen_gpios[22].is_output ),
    .Y(gpio_o[22])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$432  (
    .A(\gen_gpios[22].is_output ),
    .B(reg2hw[157]),
    .Y(\$432y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$433  (
    .A(reg2hw[158]),
    .Y(\$433y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$435  (
    .A(gpio_edge[22]),
    .B(reg2hw[156]),
    .Y(\$435y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$436  (
    .A(\$435y ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[111])
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\gen_gpios[2].serial_d ),
    .B(\$43y ),
    .Y(\gen_gpios[2].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$440  (
    .A(\gen_gpios[23].serial_d ),
    .Y(\$440y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$441  (
    .A(\$440y ),
    .B(\gen_gpios[23].serial_q ),
    .Y(\gen_gpios[23].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$442  (
    .A(\gen_gpios[23].serial_q ),
    .Y(\$442y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$443  (
    .A(\gen_gpios[23].serial_d ),
    .B(\$442y ),
    .Y(\gen_gpios[23].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$444  (
    .A(\gen_gpios[23].f_edge ),
    .B(\gen_gpios[23].r_edge ),
    .S(reg2hw[161]),
    .Y(gpio_edge[23])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$445  (
    .A(reg2hw[167]),
    .Y(\$445y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$446  (
    .A(reg2hw[166]),
    .B(\$445y ),
    .Y(\gen_gpios[23].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$447  (
    .A(reg2hw[166]),
    .B(reg2hw[167]),
    .Y(\gen_gpios[23].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$448  (
    .A(\gen_gpios[23].serial_q ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[119])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$449  (
    .A(reg2hw[165]),
    .B(\gen_gpios[23].is_output ),
    .Y(gpio_o[23])
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$45  (
    .A(\gen_gpios[2].f_edge ),
    .B(\gen_gpios[2].r_edge ),
    .S(reg2hw[14]),
    .Y(gpio_edge[2])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$451  (
    .A(\gen_gpios[23].is_output ),
    .B(reg2hw[164]),
    .Y(\$451y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$452  (
    .A(reg2hw[165]),
    .Y(\$452y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$454  (
    .A(gpio_edge[23]),
    .B(reg2hw[163]),
    .Y(\$454y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$455  (
    .A(\$454y ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[116])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$459  (
    .A(\gen_gpios[24].serial_d ),
    .Y(\$459y )
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(reg2hw[20]),
    .Y(\$46y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$460  (
    .A(\$459y ),
    .B(\gen_gpios[24].serial_q ),
    .Y(\gen_gpios[24].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$461  (
    .A(\gen_gpios[24].serial_q ),
    .Y(\$461y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$462  (
    .A(\gen_gpios[24].serial_d ),
    .B(\$461y ),
    .Y(\gen_gpios[24].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$463  (
    .A(\gen_gpios[24].f_edge ),
    .B(\gen_gpios[24].r_edge ),
    .S(reg2hw[168]),
    .Y(gpio_edge[24])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$464  (
    .A(reg2hw[174]),
    .Y(\$464y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$465  (
    .A(reg2hw[173]),
    .B(\$464y ),
    .Y(\gen_gpios[24].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$466  (
    .A(reg2hw[173]),
    .B(reg2hw[174]),
    .Y(\gen_gpios[24].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$467  (
    .A(\gen_gpios[24].serial_q ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[124])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$468  (
    .A(reg2hw[172]),
    .B(\gen_gpios[24].is_output ),
    .Y(gpio_o[24])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(reg2hw[19]),
    .B(\$46y ),
    .Y(\gen_gpios[2].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$470  (
    .A(\gen_gpios[24].is_output ),
    .B(reg2hw[171]),
    .Y(\$470y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$471  (
    .A(reg2hw[172]),
    .Y(\$471y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$473  (
    .A(gpio_edge[24]),
    .B(reg2hw[170]),
    .Y(\$473y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$474  (
    .A(\$473y ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[121])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$478  (
    .A(\gen_gpios[25].serial_d ),
    .Y(\$478y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$479  (
    .A(\$478y ),
    .B(\gen_gpios[25].serial_q ),
    .Y(\gen_gpios[25].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(reg2hw[19]),
    .B(reg2hw[20]),
    .Y(\gen_gpios[2].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$480  (
    .A(\gen_gpios[25].serial_q ),
    .Y(\$480y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$481  (
    .A(\gen_gpios[25].serial_d ),
    .B(\$480y ),
    .Y(\gen_gpios[25].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$482  (
    .A(\gen_gpios[25].f_edge ),
    .B(\gen_gpios[25].r_edge ),
    .S(reg2hw[175]),
    .Y(gpio_edge[25])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$483  (
    .A(reg2hw[181]),
    .Y(\$483y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$484  (
    .A(reg2hw[180]),
    .B(\$483y ),
    .Y(\gen_gpios[25].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$485  (
    .A(reg2hw[180]),
    .B(reg2hw[181]),
    .Y(\gen_gpios[25].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$486  (
    .A(\gen_gpios[25].serial_q ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[129])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$487  (
    .A(reg2hw[179]),
    .B(\gen_gpios[25].is_output ),
    .Y(gpio_o[25])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$489  (
    .A(\gen_gpios[25].is_output ),
    .B(reg2hw[178]),
    .Y(\$489y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\gen_gpios[2].serial_q ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[14])
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$490  (
    .A(reg2hw[179]),
    .Y(\$490y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$492  (
    .A(gpio_edge[25]),
    .B(reg2hw[177]),
    .Y(\$492y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$493  (
    .A(\$492y ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[126])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$497  (
    .A(\gen_gpios[26].serial_d ),
    .Y(\$497y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$498  (
    .A(\$497y ),
    .B(\gen_gpios[26].serial_q ),
    .Y(\gen_gpios[26].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$499  (
    .A(\gen_gpios[26].serial_q ),
    .Y(\$499y )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\gen_gpios[0].serial_q ),
    .Y(\$5y )
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(reg2hw[18]),
    .B(\gen_gpios[2].is_output ),
    .Y(gpio_o[2])
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$500  (
    .A(\gen_gpios[26].serial_d ),
    .B(\$499y ),
    .Y(\gen_gpios[26].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$501  (
    .A(\gen_gpios[26].f_edge ),
    .B(\gen_gpios[26].r_edge ),
    .S(reg2hw[182]),
    .Y(gpio_edge[26])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$502  (
    .A(reg2hw[188]),
    .Y(\$502y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$503  (
    .A(reg2hw[187]),
    .B(\$502y ),
    .Y(\gen_gpios[26].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$504  (
    .A(reg2hw[187]),
    .B(reg2hw[188]),
    .Y(\gen_gpios[26].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$505  (
    .A(\gen_gpios[26].serial_q ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[134])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$506  (
    .A(reg2hw[186]),
    .B(\gen_gpios[26].is_output ),
    .Y(gpio_o[26])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$508  (
    .A(\gen_gpios[26].is_output ),
    .B(reg2hw[185]),
    .Y(\$508y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$509  (
    .A(reg2hw[186]),
    .Y(\$509y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$511  (
    .A(gpio_edge[26]),
    .B(reg2hw[184]),
    .Y(\$511y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$512  (
    .A(\$511y ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[131])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$516  (
    .A(\gen_gpios[27].serial_d ),
    .Y(\$516y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$517  (
    .A(\$516y ),
    .B(\gen_gpios[27].serial_q ),
    .Y(\gen_gpios[27].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$518  (
    .A(\gen_gpios[27].serial_q ),
    .Y(\$518y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$519  (
    .A(\gen_gpios[27].serial_d ),
    .B(\$518y ),
    .Y(\gen_gpios[27].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_gpios[2].is_output ),
    .B(reg2hw[17]),
    .Y(\$52y )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$520  (
    .A(\gen_gpios[27].f_edge ),
    .B(\gen_gpios[27].r_edge ),
    .S(reg2hw[189]),
    .Y(gpio_edge[27])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$521  (
    .A(reg2hw[195]),
    .Y(\$521y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$522  (
    .A(reg2hw[194]),
    .B(\$521y ),
    .Y(\gen_gpios[27].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$523  (
    .A(reg2hw[194]),
    .B(reg2hw[195]),
    .Y(\gen_gpios[27].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$524  (
    .A(\gen_gpios[27].serial_q ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[139])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$525  (
    .A(reg2hw[193]),
    .B(\gen_gpios[27].is_output ),
    .Y(gpio_o[27])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$527  (
    .A(\gen_gpios[27].is_output ),
    .B(reg2hw[192]),
    .Y(\$527y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$528  (
    .A(reg2hw[193]),
    .Y(\$528y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(reg2hw[18]),
    .Y(\$53y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$530  (
    .A(gpio_edge[27]),
    .B(reg2hw[191]),
    .Y(\$530y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$531  (
    .A(\$530y ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[136])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$535  (
    .A(\gen_gpios[28].serial_d ),
    .Y(\$535y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$536  (
    .A(\$535y ),
    .B(\gen_gpios[28].serial_q ),
    .Y(\gen_gpios[28].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$537  (
    .A(\gen_gpios[28].serial_q ),
    .Y(\$537y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$538  (
    .A(\gen_gpios[28].serial_d ),
    .B(\$537y ),
    .Y(\gen_gpios[28].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$539  (
    .A(\gen_gpios[28].f_edge ),
    .B(\gen_gpios[28].r_edge ),
    .S(reg2hw[196]),
    .Y(gpio_edge[28])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$540  (
    .A(reg2hw[202]),
    .Y(\$540y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$541  (
    .A(reg2hw[201]),
    .B(\$540y ),
    .Y(\gen_gpios[28].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$542  (
    .A(reg2hw[201]),
    .B(reg2hw[202]),
    .Y(\gen_gpios[28].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$543  (
    .A(\gen_gpios[28].serial_q ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[144])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$544  (
    .A(reg2hw[200]),
    .B(\gen_gpios[28].is_output ),
    .Y(gpio_o[28])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$546  (
    .A(\gen_gpios[28].is_output ),
    .B(reg2hw[199]),
    .Y(\$546y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$547  (
    .A(reg2hw[200]),
    .Y(\$547y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$549  (
    .A(gpio_edge[28]),
    .B(reg2hw[198]),
    .Y(\$549y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(gpio_edge[2]),
    .B(reg2hw[16]),
    .Y(\$55y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$550  (
    .A(\$549y ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[141])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$554  (
    .A(\gen_gpios[29].serial_d ),
    .Y(\$554y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$555  (
    .A(\$554y ),
    .B(\gen_gpios[29].serial_q ),
    .Y(\gen_gpios[29].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$556  (
    .A(\gen_gpios[29].serial_q ),
    .Y(\$556y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$557  (
    .A(\gen_gpios[29].serial_d ),
    .B(\$556y ),
    .Y(\gen_gpios[29].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$558  (
    .A(\gen_gpios[29].f_edge ),
    .B(\gen_gpios[29].r_edge ),
    .S(reg2hw[203]),
    .Y(gpio_edge[29])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$559  (
    .A(reg2hw[209]),
    .Y(\$559y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(\$55y ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[11])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$560  (
    .A(reg2hw[208]),
    .B(\$559y ),
    .Y(\gen_gpios[29].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$561  (
    .A(reg2hw[208]),
    .B(reg2hw[209]),
    .Y(\gen_gpios[29].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$562  (
    .A(\gen_gpios[29].serial_q ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[149])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$563  (
    .A(reg2hw[207]),
    .B(\gen_gpios[29].is_output ),
    .Y(gpio_o[29])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$565  (
    .A(\gen_gpios[29].is_output ),
    .B(reg2hw[206]),
    .Y(\$565y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$566  (
    .A(reg2hw[207]),
    .Y(\$566y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$568  (
    .A(gpio_edge[29]),
    .B(reg2hw[205]),
    .Y(\$568y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$569  (
    .A(\$568y ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[146])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$573  (
    .A(\gen_gpios[30].serial_d ),
    .Y(\$573y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$574  (
    .A(\$573y ),
    .B(\gen_gpios[30].serial_q ),
    .Y(\gen_gpios[30].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$575  (
    .A(\gen_gpios[30].serial_q ),
    .Y(\$575y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$576  (
    .A(\gen_gpios[30].serial_d ),
    .B(\$575y ),
    .Y(\gen_gpios[30].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$577  (
    .A(\gen_gpios[30].f_edge ),
    .B(\gen_gpios[30].r_edge ),
    .S(reg2hw[210]),
    .Y(gpio_edge[30])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$578  (
    .A(reg2hw[216]),
    .Y(\$578y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$579  (
    .A(reg2hw[215]),
    .B(\$578y ),
    .Y(\gen_gpios[30].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$580  (
    .A(reg2hw[215]),
    .B(reg2hw[216]),
    .Y(\gen_gpios[30].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$581  (
    .A(\gen_gpios[30].serial_q ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[154])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$582  (
    .A(reg2hw[214]),
    .B(\gen_gpios[30].is_output ),
    .Y(gpio_o[30])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$584  (
    .A(\gen_gpios[30].is_output ),
    .B(reg2hw[213]),
    .Y(\$584y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$585  (
    .A(reg2hw[214]),
    .Y(\$585y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$587  (
    .A(gpio_edge[30]),
    .B(reg2hw[212]),
    .Y(\$587y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$588  (
    .A(\$587y ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[151])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$592  (
    .A(\gen_gpios[31].serial_d ),
    .Y(\$592y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$593  (
    .A(\$592y ),
    .B(\gen_gpios[31].serial_q ),
    .Y(\gen_gpios[31].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$594  (
    .A(\gen_gpios[31].serial_q ),
    .Y(\$594y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$595  (
    .A(\gen_gpios[31].serial_d ),
    .B(\$594y ),
    .Y(\gen_gpios[31].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$596  (
    .A(\gen_gpios[31].f_edge ),
    .B(\gen_gpios[31].r_edge ),
    .S(reg2hw[217]),
    .Y(gpio_edge[31])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$597  (
    .A(reg2hw[223]),
    .Y(\$597y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$598  (
    .A(reg2hw[222]),
    .B(\$597y ),
    .Y(\gen_gpios[31].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$599  (
    .A(reg2hw[222]),
    .B(reg2hw[223]),
    .Y(\gen_gpios[31].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\gen_gpios[0].serial_d ),
    .B(\$5y ),
    .Y(\gen_gpios[0].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\gen_gpios[3].serial_d ),
    .Y(\$60y )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$600  (
    .A(\gen_gpios[31].serial_q ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[159])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$601  (
    .A(reg2hw[221]),
    .B(\gen_gpios[31].is_output ),
    .Y(gpio_o[31])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$603  (
    .A(\gen_gpios[31].is_output ),
    .B(reg2hw[220]),
    .Y(\$603y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$604  (
    .A(reg2hw[221]),
    .Y(\$604y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$606  (
    .A(gpio_edge[31]),
    .B(reg2hw[219]),
    .Y(\$606y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$607  (
    .A(\$606y ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[156])
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$60y ),
    .B(\gen_gpios[3].serial_q ),
    .Y(\gen_gpios[3].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$610  (
    .A(reg2hw[1]),
    .B(reg2hw[8]),
    .Y(\$610y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$611  (
    .A(\$610y ),
    .B(reg2hw[15]),
    .Y(\$611y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$612  (
    .A(\$611y ),
    .B(reg2hw[22]),
    .Y(\$612y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$613  (
    .A(\$612y ),
    .B(reg2hw[29]),
    .Y(\$613y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$614  (
    .A(\$613y ),
    .B(reg2hw[36]),
    .Y(\$614y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$615  (
    .A(\$614y ),
    .B(reg2hw[43]),
    .Y(\$615y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$616  (
    .A(\$615y ),
    .B(reg2hw[50]),
    .Y(\$616y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$617  (
    .A(\$616y ),
    .B(reg2hw[57]),
    .Y(\$617y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$618  (
    .A(\$617y ),
    .B(reg2hw[64]),
    .Y(\$618y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$619  (
    .A(\$618y ),
    .B(reg2hw[71]),
    .Y(\$619y )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_gpios[3].serial_q ),
    .Y(\$62y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$620  (
    .A(\$619y ),
    .B(reg2hw[78]),
    .Y(\$620y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$621  (
    .A(\$620y ),
    .B(reg2hw[85]),
    .Y(\$621y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$622  (
    .A(\$621y ),
    .B(reg2hw[92]),
    .Y(\$622y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$623  (
    .A(\$622y ),
    .B(reg2hw[99]),
    .Y(\$623y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$624  (
    .A(\$623y ),
    .B(reg2hw[106]),
    .Y(\$624y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$625  (
    .A(\$624y ),
    .B(reg2hw[113]),
    .Y(\$625y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$626  (
    .A(\$625y ),
    .B(reg2hw[120]),
    .Y(\$626y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$627  (
    .A(\$626y ),
    .B(reg2hw[127]),
    .Y(\$627y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$628  (
    .A(\$627y ),
    .B(reg2hw[134]),
    .Y(\$628y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$629  (
    .A(\$628y ),
    .B(reg2hw[141]),
    .Y(\$629y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\gen_gpios[3].serial_d ),
    .B(\$62y ),
    .Y(\gen_gpios[3].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$630  (
    .A(\$629y ),
    .B(reg2hw[148]),
    .Y(\$630y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$631  (
    .A(\$630y ),
    .B(reg2hw[155]),
    .Y(\$631y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$632  (
    .A(\$631y ),
    .B(reg2hw[162]),
    .Y(\$632y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$633  (
    .A(\$632y ),
    .B(reg2hw[169]),
    .Y(\$633y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$634  (
    .A(\$633y ),
    .B(reg2hw[176]),
    .Y(\$634y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$635  (
    .A(\$634y ),
    .B(reg2hw[183]),
    .Y(\$635y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$636  (
    .A(\$635y ),
    .B(reg2hw[190]),
    .Y(\$636y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$637  (
    .A(\$636y ),
    .B(reg2hw[197]),
    .Y(\$637y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$638  (
    .A(\$637y ),
    .B(reg2hw[204]),
    .Y(\$638y )
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$639  (
    .A(\$638y ),
    .B(reg2hw[211]),
    .Y(\$639y )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$64  (
    .A(\gen_gpios[3].f_edge ),
    .B(\gen_gpios[3].r_edge ),
    .S(reg2hw[21]),
    .Y(gpio_edge[3])
  );
  /* src = "rtl/gpio/gpio.sv:166.31-166.71" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$640  (
    .A(\$639y ),
    .B(reg2hw[218]),
    .Y(interrupt_o)
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(reg2hw[27]),
    .Y(\$65y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$66  (
    .A(reg2hw[26]),
    .B(\$65y ),
    .Y(\gen_gpios[3].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$67  (
    .A(reg2hw[26]),
    .B(reg2hw[27]),
    .Y(\gen_gpios[3].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(\gen_gpios[3].serial_q ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[19])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$69  (
    .A(reg2hw[25]),
    .B(\gen_gpios[3].is_output ),
    .Y(gpio_o[3])
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$7  (
    .A(\gen_gpios[0].f_edge ),
    .B(\gen_gpios[0].r_edge ),
    .S(reg2hw[0]),
    .Y(gpio_edge[0])
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(\gen_gpios[3].is_output ),
    .B(reg2hw[24]),
    .Y(\$71y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$72  (
    .A(reg2hw[25]),
    .Y(\$72y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(gpio_edge[3]),
    .B(reg2hw[23]),
    .Y(\$74y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$75  (
    .A(\$74y ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[16])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$79  (
    .A(\gen_gpios[4].serial_d ),
    .Y(\$79y )
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(reg2hw[6]),
    .Y(\$8y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(\$79y ),
    .B(\gen_gpios[4].serial_q ),
    .Y(\gen_gpios[4].f_edge )
  );
  /* src = "rtl/gpio/gpio.sv:111.37-111.46" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$81  (
    .A(\gen_gpios[4].serial_q ),
    .Y(\$81y )
  );
  /* src = "rtl/gpio/gpio.sv:111.25-111.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(\gen_gpios[4].serial_d ),
    .B(\$81y ),
    .Y(\gen_gpios[4].r_edge )
  );
  /* src = "rtl/gpio/gpio.sv:112.33-112.74" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$83  (
    .A(\gen_gpios[4].f_edge ),
    .B(\gen_gpios[4].r_edge ),
    .S(reg2hw[28]),
    .Y(gpio_edge[4])
  );
  /* src = "rtl/gpio/gpio.sv:122.44-122.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$84  (
    .A(reg2hw[34]),
    .Y(\$84y )
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(reg2hw[33]),
    .B(\$84y ),
    .Y(\gen_gpios[4].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:123.28-123.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(reg2hw[33]),
    .B(reg2hw[34]),
    .Y(\gen_gpios[4].is_output )
  );
  /* src = "rtl/gpio/gpio.sv:126.38-126.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$87  (
    .A(\gen_gpios[4].serial_q ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[24])
  );
  /* src = "rtl/gpio/gpio.sv:129.30-129.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$88  (
    .A(reg2hw[32]),
    .B(\gen_gpios[4].is_output ),
    .Y(gpio_o[4])
  );
  /* src = "rtl/gpio/gpio.sv:122.27-122.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(reg2hw[5]),
    .B(\$8y ),
    .Y(\gen_gpios[0].is_input )
  );
  /* src = "rtl/gpio/gpio.sv:143.17-143.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$90  (
    .A(\gen_gpios[4].is_output ),
    .B(reg2hw[31]),
    .Y(\$90y )
  );
  /* src = "rtl/gpio/gpio.sv:144.41-144.57" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(reg2hw[32]),
    .Y(\$91y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.73" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$93  (
    .A(gpio_edge[4]),
    .B(reg2hw[30]),
    .Y(\$93y )
  );
  /* src = "rtl/gpio/gpio.sv:155.35-155.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(\$93y ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[21])
  );
  /* src = "rtl/gpio/gpio.sv:110.26-110.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(\gen_gpios[5].serial_d ),
    .Y(\$98y )
  );
  /* src = "rtl/gpio/gpio.sv:110.25-110.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$99  (
    .A(\$98y ),
    .B(\gen_gpios[5].serial_q ),
    .Y(\gen_gpios[5].f_edge )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[0].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[0].serial_d ),
    .Q(\gen_gpios[0].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[10].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[10].serial_d ),
    .Q(\gen_gpios[10].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[11].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[11].serial_d ),
    .Q(\gen_gpios[11].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[12].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[12].serial_d ),
    .Q(\gen_gpios[12].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[13].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[13].serial_d ),
    .Q(\gen_gpios[13].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[14].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[14].serial_d ),
    .Q(\gen_gpios[14].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[15].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[15].serial_d ),
    .Q(\gen_gpios[15].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[16].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[16].serial_d ),
    .Q(\gen_gpios[16].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[17].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[17].serial_d ),
    .Q(\gen_gpios[17].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[18].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[18].serial_d ),
    .Q(\gen_gpios[18].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[19].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[19].serial_d ),
    .Q(\gen_gpios[19].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[1].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[1].serial_d ),
    .Q(\gen_gpios[1].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[20].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[20].serial_d ),
    .Q(\gen_gpios[20].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[21].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[21].serial_d ),
    .Q(\gen_gpios[21].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[22].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[22].serial_d ),
    .Q(\gen_gpios[22].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[23].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[23].serial_d ),
    .Q(\gen_gpios[23].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[24].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[24].serial_d ),
    .Q(\gen_gpios[24].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[25].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[25].serial_d ),
    .Q(\gen_gpios[25].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[26].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[26].serial_d ),
    .Q(\gen_gpios[26].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[27].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[27].serial_d ),
    .Q(\gen_gpios[27].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[28].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[28].serial_d ),
    .Q(\gen_gpios[28].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[29].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[29].serial_d ),
    .Q(\gen_gpios[29].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[2].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[2].serial_d ),
    .Q(\gen_gpios[2].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[30].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[30].serial_d ),
    .Q(\gen_gpios[30].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[31].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[31].serial_d ),
    .Q(\gen_gpios[31].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[3].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[3].serial_d ),
    .Q(\gen_gpios[3].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[4].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[4].serial_d ),
    .Q(\gen_gpios[4].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[5].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[5].serial_d ),
    .Q(\gen_gpios[5].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[6].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[6].serial_d ),
    .Q(\gen_gpios[6].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[7].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[7].serial_d ),
    .Q(\gen_gpios[7].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[8].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[8].serial_d ),
    .Q(\gen_gpios[8].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[9].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[9].serial_d ),
    .Q(\gen_gpios[9].serial_q )
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12430  (
    .A(2'h0),
    .B({ \$300y , 1'h1 }),
    .S(\$299y ),
    .Y(hw2reg[78:77])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12432  (
    .A(2'h0),
    .B({ \$452y , 1'h1 }),
    .S(\$451y ),
    .Y(hw2reg[118:117])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12434  (
    .A(2'h0),
    .B({ \$281y , 1'h1 }),
    .S(\$280y ),
    .Y(hw2reg[73:72])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12436  (
    .A(2'h0),
    .B({ \$528y , 1'h1 }),
    .S(\$527y ),
    .Y(hw2reg[138:137])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12438  (
    .A(2'h0),
    .B({ \$262y , 1'h1 }),
    .S(\$261y ),
    .Y(hw2reg[68:67])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12440  (
    .A(2'h0),
    .B({ \$433y , 1'h1 }),
    .S(\$432y ),
    .Y(hw2reg[113:112])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12442  (
    .A(2'h0),
    .B({ \$243y , 1'h1 }),
    .S(\$242y ),
    .Y(hw2reg[63:62])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12444  (
    .A(2'h0),
    .B({ \$566y , 1'h1 }),
    .S(\$565y ),
    .Y(hw2reg[148:147])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12446  (
    .A(2'h0),
    .B({ \$224y , 1'h1 }),
    .S(\$223y ),
    .Y(hw2reg[58:57])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12448  (
    .A(2'h0),
    .B({ \$414y , 1'h1 }),
    .S(\$413y ),
    .Y(hw2reg[108:107])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12450  (
    .A(2'h0),
    .B({ \$205y , 1'h1 }),
    .S(\$204y ),
    .Y(hw2reg[53:52])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12452  (
    .A(2'h0),
    .B({ \$509y , 1'h1 }),
    .S(\$508y ),
    .Y(hw2reg[133:132])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12454  (
    .A(2'h0),
    .B({ \$186y , 1'h1 }),
    .S(\$185y ),
    .Y(hw2reg[48:47])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12456  (
    .A(2'h0),
    .B({ \$395y , 1'h1 }),
    .S(\$394y ),
    .Y(hw2reg[103:102])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12458  (
    .A(2'h0),
    .B({ \$167y , 1'h1 }),
    .S(\$166y ),
    .Y(hw2reg[43:42])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12460  (
    .A(2'h0),
    .B({ \$585y , 1'h1 }),
    .S(\$584y ),
    .Y(hw2reg[153:152])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12462  (
    .A(2'h0),
    .B({ \$148y , 1'h1 }),
    .S(\$147y ),
    .Y(hw2reg[38:37])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12464  (
    .A(2'h0),
    .B({ \$376y , 1'h1 }),
    .S(\$375y ),
    .Y(hw2reg[98:97])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12466  (
    .A(2'h0),
    .B({ \$129y , 1'h1 }),
    .S(\$128y ),
    .Y(hw2reg[33:32])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12468  (
    .A(2'h0),
    .B({ \$490y , 1'h1 }),
    .S(\$489y ),
    .Y(hw2reg[128:127])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12470  (
    .A(2'h0),
    .B({ \$110y , 1'h1 }),
    .S(\$109y ),
    .Y(hw2reg[28:27])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12472  (
    .A(2'h0),
    .B({ \$357y , 1'h1 }),
    .S(\$356y ),
    .Y(hw2reg[93:92])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12474  (
    .A(2'h0),
    .B({ \$91y , 1'h1 }),
    .S(\$90y ),
    .Y(hw2reg[23:22])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12476  (
    .A(2'h0),
    .B({ \$547y , 1'h1 }),
    .S(\$546y ),
    .Y(hw2reg[143:142])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12478  (
    .A(2'h0),
    .B({ \$72y , 1'h1 }),
    .S(\$71y ),
    .Y(hw2reg[18:17])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12480  (
    .A(2'h0),
    .B({ \$338y , 1'h1 }),
    .S(\$337y ),
    .Y(hw2reg[88:87])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12482  (
    .A(2'h0),
    .B({ \$53y , 1'h1 }),
    .S(\$52y ),
    .Y(hw2reg[13:12])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12484  (
    .A(2'h0),
    .B({ \$471y , 1'h1 }),
    .S(\$470y ),
    .Y(hw2reg[123:122])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12486  (
    .A(2'h0),
    .B({ \$34y , 1'h1 }),
    .S(\$33y ),
    .Y(hw2reg[8:7])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12488  (
    .A(2'h0),
    .B({ \$319y , 1'h1 }),
    .S(\$318y ),
    .Y(hw2reg[83:82])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12490  (
    .A(2'h0),
    .B({ \$15y , 1'h1 }),
    .S(\$14y ),
    .Y(hw2reg[3:2])
  );
  /* src = "rtl/gpio/gpio.sv:143.49-146.16|rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12492  (
    .A(2'h0),
    .B({ \$604y , 1'h1 }),
    .S(\$603y ),
    .Y(hw2reg[158:157])
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  /* src = "rtl/gpio/gpio.sv:74.5" */
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:156], hw2reg[156], hw2reg[154:151], hw2reg[151], hw2reg[149:146], hw2reg[146], hw2reg[144:141], hw2reg[141], hw2reg[139:136], hw2reg[136], hw2reg[134:131], hw2reg[131], hw2reg[129:126], hw2reg[126], hw2reg[124:121], hw2reg[121], hw2reg[119:116], hw2reg[116], hw2reg[114:111], hw2reg[111], hw2reg[109:106], hw2reg[106], hw2reg[104:101], hw2reg[101], hw2reg[99:96], hw2reg[96], hw2reg[94:91], hw2reg[91], hw2reg[89:86], hw2reg[86], hw2reg[84:81], hw2reg[81], hw2reg[79:76], hw2reg[76], hw2reg[74:71], hw2reg[71], hw2reg[69:66], hw2reg[66], hw2reg[64:61], hw2reg[61], hw2reg[59:56], hw2reg[56], hw2reg[54:51], hw2reg[51], hw2reg[49:46], hw2reg[46], hw2reg[44:41], hw2reg[41], hw2reg[39:36], hw2reg[36], hw2reg[34:31], hw2reg[31], hw2reg[29:26], hw2reg[26], hw2reg[24:21], hw2reg[21], hw2reg[19:16], hw2reg[16], hw2reg[14:11], hw2reg[11], hw2reg[9:6], hw2reg[6], hw2reg[4:1], hw2reg[1] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_intrpt = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
  assign gpio_intrpt_pending = interrupt_o;
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[155], hw2reg[150], hw2reg[145], hw2reg[140], hw2reg[135], hw2reg[130], hw2reg[125], hw2reg[120], hw2reg[115], hw2reg[110], hw2reg[105], hw2reg[100], hw2reg[95], hw2reg[90], hw2reg[85], hw2reg[80], hw2reg[75], hw2reg[70], hw2reg[65], hw2reg[60], hw2reg[55], hw2reg[50], hw2reg[45], hw2reg[40], hw2reg[35], hw2reg[30], hw2reg[25], hw2reg[20], hw2reg[15], hw2reg[10], hw2reg[5], hw2reg[0] } = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
endmodule

/* src = "rtl/gpio/gpio_reg_top.sv:12.8" */
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$123y ;
  wire [31:0] \$124y ;
  wire [31:0] \$125y ;
  wire [31:0] \$126y ;
  wire [31:0] \$128y ;
  wire [31:0] \$130y ;
  wire [31:0] \$132y ;
  wire [31:0] \$134y ;
  wire [31:0] \$137y ;
  wire [31:0] \$139y ;
  wire [31:0] \$141y ;
  wire [31:0] \$143y ;
  wire \$1y ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14677 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14680 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14683 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14686 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13399 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13401 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire \$obi_err$150 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire \$obi_err$157 ;
  /* src = "rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$obi_rdata$158 ;
  wire \$procmux$10985_CMP ;
  wire \$procmux$10986_CMP ;
  wire \$procmux$10987_CMP ;
  wire \$procmux$10988_CMP ;
  wire \$procmux$10989_CMP ;
  wire \$procmux$10990_CMP ;
  wire \$procmux$10991_CMP ;
  wire \$procmux$10992_CMP ;
  wire [31:0] \$procmux$10997_Y ;
  wire \$procmux$11032_CMP ;
  wire \$procmux$11041_CMP ;
  wire [31:0] \$procmux$11047_Y ;
  wire \$procmux$11048_CMP ;
  wire [31:0] \$procmux$11055_Y ;
  wire \$procmux$11056_CMP ;
  wire \$procmux$11062_CMP ;
  wire \$procmux$11067_CMP ;
  wire \$procmux$11071_Y ;
  /* src = "rtl/gpio/gpio_reg_top.sv:117.32" */
  wire [31:0] bit_mask;
  /* src = "rtl/gpio/gpio_reg_top.sv:23.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:37.43" */
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.35" */
  wire id_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:50.41" */
  wire id_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:113.25" */
  wire [31:0] new_intrpt;
  /* src = "rtl/gpio/gpio_reg_top.sv:108.21" */
  wire [255:0] new_reg;
  /* src = "rtl/gpio/gpio_reg_top.sv:51.35" */
  wire obi_err;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.35" */
  wire [31:0] obi_rdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.35" */
  wire obi_read_request;
  /* src = "rtl/gpio/gpio_reg_top.sv:29.23" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/gpio/gpio_reg_top.sv:31.22" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/gpio/gpio_reg_top.sv:54.46" */
  wire [31:0] obi_wdata;
  /* src = "rtl/gpio/gpio_reg_top.sv:55.53" */
  wire obi_write_request;
  wire [9:0] read_addr_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:49.48" */
  wire [11:0] read_addr_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:35.42" */
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.21" */
  wire [255:0] reg_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:105.28" */
  wire [255:0] reg_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.35" */
  wire req_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:47.42" */
  wire req_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:25.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/gpio/gpio_reg_top.sv:114.25" */
  wire [31:0] toggle_out;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.35" */
  wire valid_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:45.44" */
  wire valid_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.35" */
  wire w_err_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:52.44" */
  wire w_err_q;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.35" */
  wire we_d;
  /* src = "rtl/gpio/gpio_reg_top.sv:46.41" */
  wire we_q;
  wire [9:0] write_addr;
  /* src = "rtl/gpio/gpio_reg_top.sv:69.38-69.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(we_q),
    .Y(\$1y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$100  (
    .A(reg_q[56]),
    .B(hw2reg[121]),
    .S(hw2reg[120]),
    .Y(new_reg[56])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$101  (
    .A(hw2reg[120]),
    .B(hw2reg[121]),
    .Y(new_intrpt[24])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$102  (
    .A(reg_q[153]),
    .B(hw2reg[128]),
    .S(hw2reg[127]),
    .Y(new_reg[153])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$103  (
    .A(reg_q[57]),
    .B(hw2reg[126]),
    .S(hw2reg[125]),
    .Y(new_reg[57])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$104  (
    .A(hw2reg[125]),
    .B(hw2reg[126]),
    .Y(new_intrpt[25])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$105  (
    .A(reg_q[154]),
    .B(hw2reg[133]),
    .S(hw2reg[132]),
    .Y(new_reg[154])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$106  (
    .A(reg_q[58]),
    .B(hw2reg[131]),
    .S(hw2reg[130]),
    .Y(new_reg[58])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(hw2reg[130]),
    .B(hw2reg[131]),
    .Y(new_intrpt[26])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$108  (
    .A(reg_q[155]),
    .B(hw2reg[138]),
    .S(hw2reg[137]),
    .Y(new_reg[155])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$109  (
    .A(reg_q[59]),
    .B(hw2reg[136]),
    .S(hw2reg[135]),
    .Y(new_reg[59])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$110  (
    .A(hw2reg[135]),
    .B(hw2reg[136]),
    .Y(new_intrpt[27])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$111  (
    .A(reg_q[156]),
    .B(hw2reg[143]),
    .S(hw2reg[142]),
    .Y(new_reg[156])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$112  (
    .A(reg_q[60]),
    .B(hw2reg[141]),
    .S(hw2reg[140]),
    .Y(new_reg[60])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(hw2reg[140]),
    .B(hw2reg[141]),
    .Y(new_intrpt[28])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$114  (
    .A(reg_q[157]),
    .B(hw2reg[148]),
    .S(hw2reg[147]),
    .Y(new_reg[157])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$115  (
    .A(reg_q[61]),
    .B(hw2reg[146]),
    .S(hw2reg[145]),
    .Y(new_reg[61])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$116  (
    .A(hw2reg[145]),
    .B(hw2reg[146]),
    .Y(new_intrpt[29])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$117  (
    .A(reg_q[158]),
    .B(hw2reg[153]),
    .S(hw2reg[152]),
    .Y(new_reg[158])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$118  (
    .A(reg_q[62]),
    .B(hw2reg[151]),
    .S(hw2reg[150]),
    .Y(new_reg[62])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(hw2reg[150]),
    .B(hw2reg[151]),
    .Y(new_intrpt[30])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$120  (
    .A(reg_q[159]),
    .B(hw2reg[158]),
    .S(hw2reg[157]),
    .Y(new_reg[159])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$121  (
    .A(reg_q[63]),
    .B(hw2reg[156]),
    .S(hw2reg[155]),
    .Y(new_reg[63])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(hw2reg[155]),
    .B(hw2reg[156]),
    .Y(new_intrpt[31])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:169.24-169.47" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$124  (
    .A({ \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] }),
    .B(reg_q[255:224]),
    .Y(\$124y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:169.52-169.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$125  (
    .A({ obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] }),
    .B(obi_req_i[36:5]),
    .Y(\$125y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:169.23-169.88" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$126  (
    .A(\$124y ),
    .B(\$125y ),
    .Y(\$126y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:173.23-173.45" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$128  (
    .A({ \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] }),
    .B(reg_q[223:192]),
    .Y(\$128y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:173.22-173.86" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$130  (
    .A(\$128y ),
    .B(\$125y ),
    .Y(\$130y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:178.12-178.35" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$132  (
    .A({ \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] }),
    .B(new_reg[159:128]),
    .Y(\$132y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:178.11-178.76" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$134  (
    .A(\$132y ),
    .B(\$125y ),
    .Y(\$134y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:187.14-187.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$137  (
    .A({ \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] }),
    .B(reg_q[95:64]),
    .Y(\$137y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:187.13-187.84" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$139  (
    .A(\$137y ),
    .B(\$125y ),
    .Y(\$139y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:192.14-192.45" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$141  (
    .A({ \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] }),
    .B(reg_q[31:0]),
    .Y(\$141y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:192.13-192.86" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$143  (
    .A(\$141y ),
    .B(\$125y ),
    .Y(\$143y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:69.30-69.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(req_q),
    .B(\$1y ),
    .Y(obi_read_request)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$27  (
    .A(reg_q[128]),
    .B(hw2reg[3]),
    .S(hw2reg[2]),
    .Y(new_reg[128])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$28  (
    .A(reg_q[32]),
    .B(hw2reg[1]),
    .S(hw2reg[0]),
    .Y(new_reg[32])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(hw2reg[0]),
    .B(hw2reg[1]),
    .Y(new_intrpt[0])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:70.30-70.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(obi_req_i[0]),
    .B(obi_req_i[41]),
    .Y(obi_write_request)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(reg_q[129]),
    .B(hw2reg[8]),
    .S(hw2reg[7]),
    .Y(new_reg[129])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$31  (
    .A(reg_q[33]),
    .B(hw2reg[6]),
    .S(hw2reg[5]),
    .Y(new_reg[33])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(hw2reg[5]),
    .B(hw2reg[6]),
    .Y(new_intrpt[1])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$33  (
    .A(reg_q[130]),
    .B(hw2reg[13]),
    .S(hw2reg[12]),
    .Y(new_reg[130])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$34  (
    .A(reg_q[34]),
    .B(hw2reg[11]),
    .S(hw2reg[10]),
    .Y(new_reg[34])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(hw2reg[10]),
    .B(hw2reg[11]),
    .Y(new_intrpt[2])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$36  (
    .A(reg_q[131]),
    .B(hw2reg[18]),
    .S(hw2reg[17]),
    .Y(new_reg[131])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$37  (
    .A(reg_q[35]),
    .B(hw2reg[16]),
    .S(hw2reg[15]),
    .Y(new_reg[35])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(hw2reg[15]),
    .B(hw2reg[16]),
    .Y(new_intrpt[3])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$39  (
    .A(reg_q[132]),
    .B(hw2reg[23]),
    .S(hw2reg[22]),
    .Y(new_reg[132])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$40  (
    .A(reg_q[36]),
    .B(hw2reg[21]),
    .S(hw2reg[20]),
    .Y(new_reg[36])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(hw2reg[20]),
    .B(hw2reg[21]),
    .Y(new_intrpt[4])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$42  (
    .A(reg_q[133]),
    .B(hw2reg[28]),
    .S(hw2reg[27]),
    .Y(new_reg[133])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$43  (
    .A(reg_q[37]),
    .B(hw2reg[26]),
    .S(hw2reg[25]),
    .Y(new_reg[37])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(hw2reg[25]),
    .B(hw2reg[26]),
    .Y(new_intrpt[5])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$45  (
    .A(reg_q[134]),
    .B(hw2reg[33]),
    .S(hw2reg[32]),
    .Y(new_reg[134])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$46  (
    .A(reg_q[38]),
    .B(hw2reg[31]),
    .S(hw2reg[30]),
    .Y(new_reg[38])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(hw2reg[30]),
    .B(hw2reg[31]),
    .Y(new_intrpt[6])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$48  (
    .A(reg_q[135]),
    .B(hw2reg[38]),
    .S(hw2reg[37]),
    .Y(new_reg[135])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$49  (
    .A(reg_q[39]),
    .B(hw2reg[36]),
    .S(hw2reg[35]),
    .Y(new_reg[39])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(hw2reg[35]),
    .B(hw2reg[36]),
    .Y(new_intrpt[7])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$51  (
    .A(reg_q[136]),
    .B(hw2reg[43]),
    .S(hw2reg[42]),
    .Y(new_reg[136])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$52  (
    .A(reg_q[40]),
    .B(hw2reg[41]),
    .S(hw2reg[40]),
    .Y(new_reg[40])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(hw2reg[40]),
    .B(hw2reg[41]),
    .Y(new_intrpt[8])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$54  (
    .A(reg_q[137]),
    .B(hw2reg[48]),
    .S(hw2reg[47]),
    .Y(new_reg[137])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$55  (
    .A(reg_q[41]),
    .B(hw2reg[46]),
    .S(hw2reg[45]),
    .Y(new_reg[41])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(hw2reg[45]),
    .B(hw2reg[46]),
    .Y(new_intrpt[9])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$57  (
    .A(reg_q[138]),
    .B(hw2reg[53]),
    .S(hw2reg[52]),
    .Y(new_reg[138])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$58  (
    .A(reg_q[42]),
    .B(hw2reg[51]),
    .S(hw2reg[50]),
    .Y(new_reg[42])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(hw2reg[50]),
    .B(hw2reg[51]),
    .Y(new_intrpt[10])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$60  (
    .A(reg_q[139]),
    .B(hw2reg[58]),
    .S(hw2reg[57]),
    .Y(new_reg[139])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$61  (
    .A(reg_q[43]),
    .B(hw2reg[56]),
    .S(hw2reg[55]),
    .Y(new_reg[43])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(hw2reg[55]),
    .B(hw2reg[56]),
    .Y(new_intrpt[11])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$63  (
    .A(reg_q[140]),
    .B(hw2reg[63]),
    .S(hw2reg[62]),
    .Y(new_reg[140])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$64  (
    .A(reg_q[44]),
    .B(hw2reg[61]),
    .S(hw2reg[60]),
    .Y(new_reg[44])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$65  (
    .A(hw2reg[60]),
    .B(hw2reg[61]),
    .Y(new_intrpt[12])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$66  (
    .A(reg_q[141]),
    .B(hw2reg[68]),
    .S(hw2reg[67]),
    .Y(new_reg[141])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$67  (
    .A(reg_q[45]),
    .B(hw2reg[66]),
    .S(hw2reg[65]),
    .Y(new_reg[45])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$68  (
    .A(hw2reg[65]),
    .B(hw2reg[66]),
    .Y(new_intrpt[13])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$69  (
    .A(reg_q[142]),
    .B(hw2reg[73]),
    .S(hw2reg[72]),
    .Y(new_reg[142])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$70  (
    .A(reg_q[46]),
    .B(hw2reg[71]),
    .S(hw2reg[70]),
    .Y(new_reg[46])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$71  (
    .A(hw2reg[70]),
    .B(hw2reg[71]),
    .Y(new_intrpt[14])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$72  (
    .A(reg_q[143]),
    .B(hw2reg[78]),
    .S(hw2reg[77]),
    .Y(new_reg[143])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$73  (
    .A(reg_q[47]),
    .B(hw2reg[76]),
    .S(hw2reg[75]),
    .Y(new_reg[47])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$74  (
    .A(hw2reg[75]),
    .B(hw2reg[76]),
    .Y(new_intrpt[15])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$75  (
    .A(reg_q[144]),
    .B(hw2reg[83]),
    .S(hw2reg[82]),
    .Y(new_reg[144])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$76  (
    .A(reg_q[48]),
    .B(hw2reg[81]),
    .S(hw2reg[80]),
    .Y(new_reg[48])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$77  (
    .A(hw2reg[80]),
    .B(hw2reg[81]),
    .Y(new_intrpt[16])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$78  (
    .A(reg_q[145]),
    .B(hw2reg[88]),
    .S(hw2reg[87]),
    .Y(new_reg[145])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$79  (
    .A(reg_q[49]),
    .B(hw2reg[86]),
    .S(hw2reg[85]),
    .Y(new_reg[49])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(hw2reg[85]),
    .B(hw2reg[86]),
    .Y(new_intrpt[17])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$81  (
    .A(reg_q[146]),
    .B(hw2reg[93]),
    .S(hw2reg[92]),
    .Y(new_reg[146])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$82  (
    .A(reg_q[50]),
    .B(hw2reg[91]),
    .S(hw2reg[90]),
    .Y(new_reg[50])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$83  (
    .A(hw2reg[90]),
    .B(hw2reg[91]),
    .Y(new_intrpt[18])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$84  (
    .A(reg_q[147]),
    .B(hw2reg[98]),
    .S(hw2reg[97]),
    .Y(new_reg[147])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$85  (
    .A(reg_q[51]),
    .B(hw2reg[96]),
    .S(hw2reg[95]),
    .Y(new_reg[51])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(hw2reg[95]),
    .B(hw2reg[96]),
    .Y(new_intrpt[19])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$87  (
    .A(reg_q[148]),
    .B(hw2reg[103]),
    .S(hw2reg[102]),
    .Y(new_reg[148])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$88  (
    .A(reg_q[52]),
    .B(hw2reg[101]),
    .S(hw2reg[100]),
    .Y(new_reg[52])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$89  (
    .A(hw2reg[100]),
    .B(hw2reg[101]),
    .Y(new_intrpt[20])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$90  (
    .A(reg_q[149]),
    .B(hw2reg[108]),
    .S(hw2reg[107]),
    .Y(new_reg[149])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$91  (
    .A(reg_q[53]),
    .B(hw2reg[106]),
    .S(hw2reg[105]),
    .Y(new_reg[53])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(hw2reg[105]),
    .B(hw2reg[106]),
    .Y(new_intrpt[21])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$93  (
    .A(reg_q[150]),
    .B(hw2reg[113]),
    .S(hw2reg[112]),
    .Y(new_reg[150])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$94  (
    .A(reg_q[54]),
    .B(hw2reg[111]),
    .S(hw2reg[110]),
    .Y(new_reg[54])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(hw2reg[110]),
    .B(hw2reg[111]),
    .Y(new_intrpt[22])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$96  (
    .A(reg_q[151]),
    .B(hw2reg[118]),
    .S(hw2reg[117]),
    .Y(new_reg[151])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:153.29-154.73" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$97  (
    .A(reg_q[55]),
    .B(hw2reg[116]),
    .S(hw2reg[115]),
    .Y(new_reg[55])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:156.29-156.74" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(hw2reg[115]),
    .B(hw2reg[116]),
    .Y(new_intrpt[23])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:151.29-151.85" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$99  (
    .A(reg_q[152]),
    .B(hw2reg[123]),
    .S(hw2reg[122]),
    .Y(new_reg[152])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14676  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$139y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14677 ),
    .Q(reg_q[95:64])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14679  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$143y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14680 ),
    .Q(reg_q[31:0])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14682  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$130y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14683 ),
    .Q(reg_q[223:192])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14685  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$126y ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14686 ),
    .Q(reg_q[255:224])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(10'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd10)
  ) \$auto$ff.cc:266:slice$14688  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[53:44]),
    .Q(read_addr_q[9:0])
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14678  (
    .A({ \$procmux$11062_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14677 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14681  (
    .A({ \$procmux$11067_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14680 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14684  (
    .A({ \$procmux$11041_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14683 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14687  (
    .A({ \$procmux$11032_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14686 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13679  (
    .A(obi_req_i[40:37]),
    .Y({ \$123y [31], \$123y [23], \$123y [15], \$123y [7] })
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13398  (
    .A({ \$procmux$10992_CMP , \$procmux$10991_CMP , \$procmux$10990_CMP , \$procmux$10989_CMP , \$procmux$10988_CMP , \$procmux$10987_CMP , \$procmux$10986_CMP , \$procmux$10985_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13399 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13400  (
    .A({ \$procmux$11067_CMP , \$procmux$11062_CMP , \$procmux$11056_CMP , \$procmux$11048_CMP , \$procmux$11041_CMP , \$procmux$11032_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13401 )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[2]),
    .Q(id_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.in  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] }),
    .Q(reg_q[191:160])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[63:32]),
    .Q(reg_q[63:32])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.out  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[159:128]),
    .Q(reg_q[159:128])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[0]),
    .Q(req_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$w_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(w_err_d),
    .Q(w_err_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[41]),
    .Q(we_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd32)
  ) \$procmux$10984  (
    .A(32'd3135023902),
    .B({ reg_q[255:128], 32'h00000000, reg_q[95:0] }),
    .S({ \$procmux$10992_CMP , \$procmux$10991_CMP , \$procmux$10990_CMP , \$procmux$10989_CMP , \$procmux$10988_CMP , \$procmux$10987_CMP , \$procmux$10986_CMP , \$procmux$10985_CMP  }),
    .Y(\$obi_rdata$158 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10985_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0e0),
    .Y(\$procmux$10985_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10986_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0c0),
    .Y(\$procmux$10986_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:227.11-227.39|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10987_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0a0),
    .Y(\$procmux$10987_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:223.11-223.26|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10988_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h080),
    .Y(\$procmux$10988_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:219.11-219.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10989_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h060),
    .Y(\$procmux$10989_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:215.11-215.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10990_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h040),
    .Y(\$procmux$10990_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:211.11-211.32|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10991_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h020),
    .Y(\$procmux$10991_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:207.11-207.33|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$10992_CMP0  (
    .A(read_addr_q[9:0]),
    .Y(\$procmux$10992_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:230.36-234.12|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10997  (
    .A(new_reg[63:32]),
    .B(new_intrpt),
    .S(\$procmux$10986_CMP ),
    .Y(\$procmux$10997_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:237.11-237.41|rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11002  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13399 ),
    .Y(\$obi_err$157 )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11015  (
    .A(new_reg[63:32]),
    .B(\$procmux$10997_Y ),
    .S(obi_read_request),
    .Y(reg_d[63:32])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11019  (
    .A(32'd0),
    .B(\$obi_rdata$158 ),
    .S(obi_read_request),
    .Y(obi_rdata)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:203.27-245.8|rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11023  (
    .A(\$obi_err$150 ),
    .B(\$obi_err$157 ),
    .S(obi_read_request),
    .Y(obi_err)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:169.11-169.89|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$11032_CMP0  (
    .A(obi_req_i[53:44]),
    .Y(\$procmux$11032_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:173.11-173.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$11041_CMP0  (
    .A(obi_req_i[53:44]),
    .B(6'h20),
    .Y(\$procmux$11041_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11047  (
    .A(32'd0),
    .B(\$125y ),
    .S(\$procmux$11048_CMP ),
    .Y(\$procmux$11047_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:182.11-182.60|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$11048_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'h80),
    .Y(\$procmux$11048_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11055  (
    .A(new_reg[159:128]),
    .B(\$134y ),
    .S(\$procmux$11056_CMP ),
    .Y(\$procmux$11055_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:177.11-178.77|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$11056_CMP0  (
    .A(obi_req_i[53:44]),
    .B(7'h60),
    .Y(\$procmux$11056_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:186.11-187.85|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$11062_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'ha0),
    .Y(\$procmux$11062_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$11067_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'he0),
    .Y(\$procmux$11067_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/gpio/gpio_reg_top.sv:191.11-192.87|rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11071  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$13401 ),
    .Y(\$procmux$11071_Y )
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11081  (
    .A(32'd0),
    .B(\$procmux$11047_Y ),
    .S(obi_write_request),
    .Y(toggle_out)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11087  (
    .A(new_reg[159:128]),
    .B(\$procmux$11055_Y ),
    .S(obi_write_request),
    .Y(reg_d[159:128])
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11096  (
    .A(obi_write_request),
    .B(\$procmux$11071_Y ),
    .Y(w_err_d)
  );
  /* src = "rtl/gpio/gpio_reg_top.sv:165.28-199.8|rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11099  (
    .A(w_err_q),
    .B(1'h0),
    .S(obi_write_request),
    .Y(\$obi_err$150 )
  );
  assign { \$123y [30:24], \$123y [22:16], \$123y [14:8], \$123y [6:0] } = { \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [31], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [23], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [15], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7], \$123y [7] };
  assign bit_mask = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] };
  assign id_d = obi_req_i[2];
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg_q[255:192], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg_q[95:64], reg_q[31:0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign obi_wdata = obi_req_i[36:5];
  assign read_addr_d = obi_req_i[53:44];
  assign read_addr_q[11:10] = 2'h0;
  assign reg2hw = { reg_q[255], reg_q[223], reg_q[159], toggle_out[31], reg_q[95], reg_q[63], reg_q[31], reg_q[254], reg_q[222], reg_q[158], toggle_out[30], reg_q[94], reg_q[62], reg_q[30], reg_q[253], reg_q[221], reg_q[157], toggle_out[29], reg_q[93], reg_q[61], reg_q[29], reg_q[252], reg_q[220], reg_q[156], toggle_out[28], reg_q[92], reg_q[60], reg_q[28], reg_q[251], reg_q[219], reg_q[155], toggle_out[27], reg_q[91], reg_q[59], reg_q[27], reg_q[250], reg_q[218], reg_q[154], toggle_out[26], reg_q[90], reg_q[58], reg_q[26], reg_q[249], reg_q[217], reg_q[153], toggle_out[25], reg_q[89], reg_q[57], reg_q[25], reg_q[248], reg_q[216], reg_q[152], toggle_out[24], reg_q[88], reg_q[56], reg_q[24], reg_q[247], reg_q[215], reg_q[151], toggle_out[23], reg_q[87], reg_q[55], reg_q[23], reg_q[246], reg_q[214], reg_q[150], toggle_out[22], reg_q[86], reg_q[54], reg_q[22], reg_q[245], reg_q[213], reg_q[149], toggle_out[21], reg_q[85], reg_q[53], reg_q[21], reg_q[244], reg_q[212], reg_q[148], toggle_out[20], reg_q[84], reg_q[52], reg_q[20], reg_q[243], reg_q[211], reg_q[147], toggle_out[19], reg_q[83], reg_q[51], reg_q[19], reg_q[242], reg_q[210], reg_q[146], toggle_out[18], reg_q[82], reg_q[50], reg_q[18], reg_q[241], reg_q[209], reg_q[145], toggle_out[17], reg_q[81], reg_q[49], reg_q[17], reg_q[240], reg_q[208], reg_q[144], toggle_out[16], reg_q[80], reg_q[48], reg_q[16], reg_q[239], reg_q[207], reg_q[143], toggle_out[15], reg_q[79], reg_q[47], reg_q[15], reg_q[238], reg_q[206], reg_q[142], toggle_out[14], reg_q[78], reg_q[46], reg_q[14], reg_q[237], reg_q[205], reg_q[141], toggle_out[13], reg_q[77], reg_q[45], reg_q[13], reg_q[236], reg_q[204], reg_q[140], toggle_out[12], reg_q[76], reg_q[44], reg_q[12], reg_q[235], reg_q[203], reg_q[139], toggle_out[11], reg_q[75], reg_q[43], reg_q[11], reg_q[234], reg_q[202], reg_q[138], toggle_out[10], reg_q[74], reg_q[42], reg_q[10], reg_q[233], reg_q[201], reg_q[137], toggle_out[9], reg_q[73], reg_q[41], reg_q[9], reg_q[232], reg_q[200], reg_q[136], toggle_out[8], reg_q[72], reg_q[40], reg_q[8], reg_q[231], reg_q[199], reg_q[135], toggle_out[7], reg_q[71], reg_q[39], reg_q[7], reg_q[230], reg_q[198], reg_q[134], toggle_out[6], reg_q[70], reg_q[38], reg_q[6], reg_q[229], reg_q[197], reg_q[133], toggle_out[5], reg_q[69], reg_q[37], reg_q[5], reg_q[228], reg_q[196], reg_q[132], toggle_out[4], reg_q[68], reg_q[36], reg_q[4], reg_q[227], reg_q[195], reg_q[131], toggle_out[3], reg_q[67], reg_q[35], reg_q[3], reg_q[226], reg_q[194], reg_q[130], toggle_out[2], reg_q[66], reg_q[34], reg_q[2], reg_q[225], reg_q[193], reg_q[129], toggle_out[1], reg_q[65], reg_q[33], reg_q[1], reg_q[224], reg_q[192], reg_q[128], toggle_out[0], reg_q[64], reg_q[32], reg_q[0] };
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign reg_q[127:96] = 32'hxxxxxxxx;
  assign req_d = obi_req_i[0];
  assign valid_d = obi_req_i[0];
  assign valid_q = req_q;
  assign we_d = obi_req_i[41];
  assign write_addr = obi_req_i[53:44];
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  /* src = "rtl/common_cells/lzc.sv:89.15-89.100" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  /* src = "rtl/common_cells/lzc.sv:98.49-98.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  /* src = "rtl/common_cells/lzc.sv:90.52-92.60" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$3  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:70.52-70.85" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  /* src = "rtl/common_cells/lzc.sv:71.54-73.37" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  /* unused_bits = "360 432 504" */
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$23y ;
  wire \$2y ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$30y ;
  /* unused_bits = "1" */
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11724_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [504], \$12y [432], \$12y [360], \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$23  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$30  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y [0]),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$39  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14689  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13681  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] }),
    .Y({ \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11720  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11724  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$11724_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11729  (
    .A(\$mgr_ports_req_o$26 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11732  (
    .A(\$procmux$11724_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  /* unused_bits = "360 432 504" */
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$23y ;
  wire \$2y ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$30y ;
  /* unused_bits = "1" */
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11704_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [504], \$12y [432], \$12y [360], \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$23  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$30  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y [0]),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$39  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14690  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13684  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] }),
    .Y({ \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11700  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11704  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$11704_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11709  (
    .A(\$mgr_ports_req_o$26 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11712  (
    .A(\$procmux$11704_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  /* unused_bits = "360 432 504" */
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$23y ;
  wire \$2y ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$30y ;
  /* unused_bits = "1" */
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11684_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [504], \$12y [432], \$12y [360], \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$23  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$30  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y [0]),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$39  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14691  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13687  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] }),
    .Y({ \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11680  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11684  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$11684_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11689  (
    .A(\$mgr_ports_req_o$26 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11692  (
    .A(\$procmux$11684_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  /* unused_bits = "360 432 504" */
  wire [575:0] \$12y ;
  wire [359:0] \$14y ;
  wire [359:0] \$21y ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$23y ;
  wire \$2y ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$30y ;
  /* unused_bits = "1" */
  wire [36:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11664_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [504], \$12y [432], \$12y [360], \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$21  (
    .A({ 71'h000000000000000000, \$14y [288], 71'h000000000000000000, \$14y [216], 71'h000000000000000000, \$14y [144], 71'h000000000000000000, \$14y [72], 71'h000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], \$12y [288], 1'h0, \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], \$12y [216], 1'h0, \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], \$12y [144], 1'h0, \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], \$12y [72], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$23  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$30  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y [0]),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$39  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14692  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13690  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [288], \$12y [216], \$12y [144], \$12y [72], \$12y [0] }),
    .Y({ \$14y [288], \$14y [216], \$14y [144], \$14y [72], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11660  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11664  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$11664_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$11669  (
    .A(\$mgr_ports_req_o$26 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11672  (
    .A(\$procmux$11664_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [575:505], \$12y [503:433], \$12y [431:361], \$12y [359:289], \$12y [287:217], \$12y [215:145], \$12y [143:73], \$12y [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$14y [359:289], \$14y [287:217], \$14y [215:145], \$14y [143:73], \$14y [71:1] } = 355'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$39y [36:2], \$39y [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  /* unused_bits = "444 518" */
  wire [591:0] \$12y ;
  wire [443:0] \$14y ;
  wire [443:0] \$21y ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" */
  wire [38:0] \$23y ;
  wire \$2y ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] \$30y ;
  /* unused_bits = "1" */
  wire [38:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [443:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$12518_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [518], \$12y [444], \$12y [370], \$12y [296], \$12y [222], \$12y [148], \$12y [74], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$21  (
    .A({ 73'h0000000000000000000, \$14y [370], 73'h0000000000000000000, \$14y [296], 73'h0000000000000000000, \$14y [222], 73'h0000000000000000000, \$14y [148], 73'h0000000000000000000, \$14y [74], 73'h0000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], \$12y [370], 1'h0, \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], \$12y [296], 1'h0, \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], \$12y [222], 1'h0, \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], \$12y [148], 1'h0, \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$23  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$30  (
    .A({ 148'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y [0]),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$39  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[38:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14693  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13693  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [370], \$12y [296], \$12y [222], \$12y [148], \$12y [74], \$12y [0] }),
    .Y({ \$14y [370], \$14y [296], \$14y [222], \$14y [148], \$14y [74], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$12514  (
    .A(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12518  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$12518_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$12523  (
    .A(\$mgr_ports_req_o$26 ),
    .B(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12526  (
    .A(\$procmux$12518_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [591:519], \$12y [517:445], \$12y [443:371], \$12y [369:297], \$12y [295:223], \$12y [221:149], \$12y [147:75], \$12y [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$14y [443:371], \$14y [369:297], \$14y [295:223], \$14y [221:149], \$14y [147:75], \$14y [73:1] } = 438'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign { \$39y [38:2], \$39y [0] } = { sbr_port_rsp_o[38:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$12y ;
  wire [147:0] \$14y ;
  wire [147:0] \$21y ;
  /* unused_bits = "0" */
  wire [1:0] \$23y ;
  wire \$2y ;
  wire \$30y ;
  /* unused_bits = "1" */
  wire [38:0] \$39y ;
  wire \$3y ;
  wire \$48y ;
  wire \$4y ;
  wire \$6y ;
  wire \$7y ;
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [147:0] \$mgr_ports_req_o$26 ;
  wire \$procmux$11937_Y ;
  /* src = "rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "rtl/obi/obi_demux.sv:28.38" */
  output [147:0] mgr_ports_req_o;
  wire [147:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_demux.sv:29.38" */
  input [77:0] mgr_ports_rsp_i;
  wire [77:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "rtl/obi/obi_demux.sv:24.38" */
  input sbr_port_select_i;
  wire sbr_port_select_i;
  /* src = "rtl/obi/obi_demux.sv:44.22" */
  wire select_q;
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$19  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$12y [74], \$12y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.40" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$2y )
  );
  /* src = "rtl/obi/obi_demux.sv:58.9-58.66" */
  \$bwmux  #(
    .WIDTH(32'd148)
  ) \$21  (
    .A({ 73'h0000000000000000000, \$14y [74], 73'h0000000000000000000, \$14y [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], \$12y [74], 1'h0, \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], \$12y [0], 1'h0 }),
    .Y(\$21y )
  );
  /* src = "rtl/obi/obi_demux.sv:59.50-59.84" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(mgr_ports_rsp_i[1:0]),
    .B(mgr_ports_rsp_i[40:39]),
    .S(sbr_port_select_i),
    .Y(\$23y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.44-56.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(in_flight),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$30  (
    .A(mgr_ports_req_o[0]),
    .B(mgr_ports_req_o[74]),
    .S(sbr_port_select_i),
    .Y(\$30y )
  );
  /* src = "rtl/obi/obi_demux.sv:63.9-63.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(\$30y ),
    .B(\$23y [1]),
    .Y(cnt_up)
  );
  /* src = "rtl/obi/obi_demux.sv:70.34-70.59" */
  \$mux  #(
    .WIDTH(32'd39)
  ) \$39  (
    .A(mgr_ports_rsp_i[38:0]),
    .B(mgr_ports_rsp_i[77:39]),
    .S(select_q),
    .Y({ sbr_port_rsp_o[38:2], \$39y [1], cnt_down })
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.59" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(\$3y ),
    .Y(\$4y )
  );
  /* src = "rtl/obi/obi_demux.sv:92.18-92.35" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$48y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.64-56.90" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$6y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.11-56.91" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$4y ),
    .B(\$6y ),
    .Y(\$7y )
  );
  /* src = "rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14694  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13696  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$12y [74], \$12y [0] }),
    .Y({ \$14y [74], \$14y [0] })
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$11933  (
    .A(148'h0000000000000000000000000000000000000),
    .B(\$21y ),
    .S(\$7y ),
    .Y(\$mgr_ports_req_o$26 )
  );
  /* src = "rtl/obi/obi_demux.sv:56.93-60.10|rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11937  (
    .A(\$7y ),
    .B(\$23y [1]),
    .Y(\$procmux$11937_Y )
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd148)
  ) \$procmux$11942  (
    .A(\$mgr_ports_req_o$26 ),
    .B(148'h0000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "rtl/obi/obi_demux.sv:56.7-60.10|rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11945  (
    .A(\$procmux$11937_Y ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$48y ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$12y [147:75], \$12y [73:1] } = 146'h0000000000000000000000000000000000000;
  assign { \$14y [147:75], \$14y [73:1] } = 146'h0000000000000000000000000000000000000;
  assign { \$39y [38:2], \$39y [0] } = { sbr_port_rsp_o[38:2], cnt_down };
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  /* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  /* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$3y ;
  /* src = "rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_err_sbr.sv:36.25-36.35" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  /* src = "rtl/obi/obi_err_sbr.sv:37.25-37.36" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "rtl/obi/obi_err_sbr.sv:59.18-59.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$3y )
  );
  /* src = "rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$3y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_mux.sv:79.38-79.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$0y )
  );
  /* src = "rtl/obi/obi_mux.sv:79.16-79.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mgr_port_rsp_i[1]),
    .B(\$0y ),
    .Y(\$1y )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  /* src = "rtl/obi/obi_mux.sv:85.31-85.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(mgr_port_req),
    .B(\$0y ),
    .Y(mgr_port_req_o[0])
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  /* src = "rtl/obi/obi_mux.sv:129.20-129.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$5y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13699  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y({ \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13216  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_mux.sv:79.38-79.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$0y )
  );
  /* src = "rtl/obi/obi_mux.sv:79.16-79.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mgr_port_rsp_i[1]),
    .B(\$0y ),
    .Y(\$1y )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  /* src = "rtl/obi/obi_mux.sv:85.31-85.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(mgr_port_req),
    .B(\$0y ),
    .Y(mgr_port_req_o[0])
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  /* src = "rtl/obi/obi_mux.sv:129.20-129.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$5y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13702  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y({ \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13212  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_mux.sv:79.38-79.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$0y )
  );
  /* src = "rtl/obi/obi_mux.sv:79.16-79.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mgr_port_rsp_i[1]),
    .B(\$0y ),
    .Y(\$1y )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  /* src = "rtl/obi/obi_mux.sv:85.31-85.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(mgr_port_req),
    .B(\$0y ),
    .Y(mgr_port_req_o[0])
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  /* src = "rtl/obi/obi_mux.sv:129.20-129.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$5y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13705  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y({ \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13208  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_mux.sv:79.38-79.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$0y )
  );
  /* src = "rtl/obi/obi_mux.sv:79.16-79.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mgr_port_rsp_i[1]),
    .B(\$0y ),
    .Y(\$1y )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  /* src = "rtl/obi/obi_mux.sv:85.31-85.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(mgr_port_req),
    .B(\$0y ),
    .Y(mgr_port_req_o[0])
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  /* src = "rtl/obi/obi_mux.sv:129.20-129.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$5y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13708  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y({ \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13204  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$0y ;
  wire [139:0] \$11y ;
  wire [139:0] \$13y ;
  wire \$1y ;
  wire [139:0] \$20y ;
  wire [139:0] \$27y ;
  wire \$5y ;
  /* src = "rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_mux.sv:79.38-79.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(fifo_full),
    .Y(\$0y )
  );
  /* src = "rtl/obi/obi_mux.sv:79.16-79.48" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(mgr_port_rsp_i[1]),
    .B(\$0y ),
    .Y(\$1y )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$18  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] })
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$20  (
    .A({ \$13y [139:108], 3'h0, \$13y [104:73], 3'h0, \$13y [69:38], 3'h0, \$13y [34:3], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 2'h0 }),
    .Y(\$20y )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$27  (
    .A(\$20y ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34], 1'h0 }),
    .Y(\$27y )
  );
  /* src = "rtl/obi/obi_mux.sv:85.31-85.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(mgr_port_req),
    .B(\$0y ),
    .Y(mgr_port_req_o[0])
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$34  (
    .A(\$27y ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$11y [139], 34'h000000000, \$11y [104], 34'h000000000, \$11y [69], 34'h000000000, \$11y [34] }),
    .Y(sbr_rsp_r)
  );
  /* src = "rtl/obi/obi_mux.sv:129.20-129.60" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$5y )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13711  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34], \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y({ \$13y [139], \$13y [104], \$13y [69], \$13y [34], \$13y [138], \$13y [103], \$13y [68], \$13y [33], \$13y [137], \$13y [102], \$13y [67], \$13y [32], \$13y [136], \$13y [101], \$13y [66], \$13y [31], \$13y [135], \$13y [100], \$13y [65], \$13y [30], \$13y [134], \$13y [99], \$13y [64], \$13y [29], \$13y [133], \$13y [98], \$13y [63], \$13y [28], \$13y [132], \$13y [97], \$13y [62], \$13y [27], \$13y [131], \$13y [96], \$13y [61], \$13y [26], \$13y [130], \$13y [95], \$13y [60], \$13y [25], \$13y [129], \$13y [94], \$13y [59], \$13y [24], \$13y [128], \$13y [93], \$13y [58], \$13y [23], \$13y [127], \$13y [92], \$13y [57], \$13y [22], \$13y [126], \$13y [91], \$13y [56], \$13y [21], \$13y [125], \$13y [90], \$13y [55], \$13y [20], \$13y [124], \$13y [89], \$13y [54], \$13y [19], \$13y [123], \$13y [88], \$13y [53], \$13y [18], \$13y [122], \$13y [87], \$13y [52], \$13y [17], \$13y [121], \$13y [86], \$13y [51], \$13y [16], \$13y [120], \$13y [85], \$13y [50], \$13y [15], \$13y [119], \$13y [84], \$13y [49], \$13y [14], \$13y [118], \$13y [83], \$13y [48], \$13y [13], \$13y [117], \$13y [82], \$13y [47], \$13y [12], \$13y [116], \$13y [81], \$13y [46], \$13y [11], \$13y [115], \$13y [80], \$13y [45], \$13y [10], \$13y [114], \$13y [79], \$13y [44], \$13y [9], \$13y [113], \$13y [78], \$13y [43], \$13y [8], \$13y [112], \$13y [77], \$13y [42], \$13y [7], \$13y [111], \$13y [76], \$13y [41], \$13y [6], \$13y [110], \$13y [75], \$13y [40], \$13y [5], \$13y [109], \$13y [74], \$13y [39], \$13y [4], \$13y [108], \$13y [73], \$13y [38], \$13y [3] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$13200  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$11y [139], \$11y [104], \$11y [69], \$11y [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$5y ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$1y ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$11y [138:105], \$11y [103:70], \$11y [68:35], \$11y [33:0] } = { \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], \$11y [139], 3'h0, \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], \$11y [104], 3'h0, \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], \$11y [69], 3'h0, \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], \$11y [34], 3'h0 };
  assign { \$13y [107:105], \$13y [72:70], \$13y [37:35], \$13y [2:0] } = 12'h000;
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  /* src = "rtl/obi/obi_sram_shim.sv:55.21-55.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  /* src = "rtl/obi/obi_sram_shim.sv:55.21-55.50" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "rtl/obi/obi_xbar.sv:8.8" */
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  /* src = "rtl/obi/obi_xbar.sv:50.47" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "rtl/obi/obi_xbar.sv:40.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/obi/obi_xbar.sv:52.75" */
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:51.47" */
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  /* src = "rtl/obi/obi_xbar.sv:47.47" */
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  /* src = "rtl/obi/obi_xbar.sv:48.47" */
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  /* src = "rtl/obi/obi_xbar.sv:62.57" */
  wire [1439:0] mgr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:63.57" */
  wire [739:0] mgr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:41.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/obi/obi_xbar.sv:55.68" */
  wire [11:0] sbr_port_select;
  /* src = "rtl/obi/obi_xbar.sv:44.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "rtl/obi/obi_xbar.sv:45.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "rtl/obi/obi_xbar.sv:58.57" */
  wire [1439:0] sbr_reqs;
  /* src = "rtl/obi/obi_xbar.sv:59.57" */
  wire [739:0] sbr_rsps;
  /* src = "rtl/obi/obi_xbar.sv:42.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  /* src = "rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
  assign sbr_reqs = { mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216], mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144], mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72], mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] };
  assign sbr_rsps = { mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111], mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74], mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37], mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] };
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:67.28-67.34" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:72.22-72.45" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wdata_i, be_i, add_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, reg_req_o, reg_rsp_i);
  /* src = "rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  /* src = "rtl/register_interface/periph_to_reg.sv:67.28-67.34" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:72.22-72.45" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd268435456),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14695  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14696  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14697  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14698  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14699  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$2  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$2  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:29.22-29.29" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  /* src = "rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:30.22-30.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$2  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "rtl/register_interface/reg_to_apb.sv:7.8" */
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  wire \$procmux$11449_Y ;
  /* src = "rtl/register_interface/reg_to_apb.sv:26.20" */
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:27.20" */
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:18.20" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:22.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/register_interface/reg_to_apb.sv:23.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/register_interface/reg_to_apb.sv:19.20" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.11" */
  wire state_d;
  /* src = "rtl/register_interface/reg_to_apb.sv:32.20" */
  wire state_q;
  /* src = "rtl/register_interface/reg_to_apb.sv:66.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$state_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "rtl/register_interface/reg_to_apb.sv:59.31-59.47|rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11449  (
    .A(apb_rsp_i[33]),
    .Y(\$procmux$11449_Y )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11454  (
    .A(reg_req_i[0]),
    .B(\$procmux$11449_Y ),
    .S(state_q),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/register_interface/reg_to_apb.sv:56.15-60.10|rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11467  (
    .A(state_q),
    .B(apb_rsp_i[33]),
    .Y(reg_rsp_o[0])
  );
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

/* src = "rtl/apb_uart/reg_uart_wrap.sv:31.8" */
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:36.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:49.16" */
  input cts_ni;
  wire cts_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:51.16" */
  input dcd_ni;
  wire dcd_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:50.16" */
  input dsr_ni;
  wire dsr_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:48.16" */
  output dtr_no;
  wire dtr_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:44.16" */
  output intr_o;
  wire intr_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:45.16" */
  output out1_no;
  wire out1_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:46.16" */
  output out2_no;
  wire out2_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:40.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:41.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:52.16" */
  input rin_ni;
  wire rin_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:37.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:47.16" */
  output rts_no;
  wire rts_no;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:53.16" */
  input sin_i;
  wire sin_i;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:54.16" */
  output sout_o;
  wire sout_o;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:59.22" */
  /* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] uart_apb_req;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:60.22" */
  wire [33:0] uart_apb_rsp;
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:76.12" */
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  /* src = "rtl/apb_uart/reg_uart_wrap.sv:67.5" */
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14701 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(req_o),
    .B(\$0y ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$2  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" */
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$35  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(gnt_i),
    .B(\$36y ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$41y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$40y ),
    .B(\$41y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$43  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$46y ),
    .Y(gnt_o[0])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$52y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$53y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$55  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$58y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$58y ),
    .Y(gnt_o[2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14700  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14701 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14702  (
    .A({ flush_i, \$24y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14701 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13713  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$11y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13714  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$13y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6171  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$29 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$6174  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6177  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14704 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(req_o),
    .B(\$0y ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$2  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" */
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$35  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(gnt_i),
    .B(\$36y ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$41y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$40y ),
    .B(\$41y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$43  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$46y ),
    .Y(gnt_o[0])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$52y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$53y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$55  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$58y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$58y ),
    .Y(gnt_o[2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14703  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14704 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14705  (
    .A({ flush_i, \$24y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14704 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13717  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$11y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13718  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$13y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6118  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$29 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$6121  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6124  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14707 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(req_o),
    .B(\$0y ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$2  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" */
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$35  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(gnt_i),
    .B(\$36y ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$41y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$40y ),
    .B(\$41y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$43  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$46y ),
    .Y(gnt_o[0])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$52y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$53y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$55  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$58y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$58y ),
    .Y(gnt_o[2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14706  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14707 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14708  (
    .A({ flush_i, \$24y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14707 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13721  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$11y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13722  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$13y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6065  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$29 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$6068  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6071  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14710 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(req_o),
    .B(\$0y ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$2  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" */
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$35  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(gnt_i),
    .B(\$36y ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$41y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$40y ),
    .B(\$41y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$43  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$46y ),
    .Y(gnt_o[0])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$52y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$53y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$55  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$58y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$58y ),
    .Y(gnt_o[2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14709  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14710 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14711  (
    .A({ flush_i, \$24y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14710 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13725  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$11y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13726  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$13y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$6012  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$29 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$6015  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$6018  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_o, gnt_i, req_i, idx_o, gnt_o, flush_i, data_i, data_o, rr_i);
  wire \$0y ;
  wire \$11y ;
  wire \$13y ;
  wire \$19y ;
  wire \$21y ;
  wire \$24y ;
  wire \$31y ;
  wire \$32y ;
  wire \$36y ;
  wire \$40y ;
  wire \$41y ;
  wire \$46y ;
  wire \$52y ;
  wire \$53y ;
  wire \$58y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14713 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$gen_arbiter.rr_q$29 ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.37-149.43" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(gnt_i),
    .Y(\$0y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:149.29-149.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(req_o),
    .B(\$0y ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$16  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.35-196.44" */
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$19y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:150.29-150.53" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$2  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:196.34-196.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$20  (
    .A(\$19y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.35-197.44" */
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$21  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$21y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:197.34-197.63" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(\$21y ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:218.27-218.67" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$23  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:219.28-219.42" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$24y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:280.38-280.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$30  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.41" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$31y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.44-283.87" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$32y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:283.25-283.87" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:285.38-287.78" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$34  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:289.38-289.83" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$35  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.56-290.60" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$36y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:290.38-290.60" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(gnt_i),
    .B(\$36y ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:291.38-291.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$40y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$41y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(\$40y ),
    .B(\$41y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$43  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$46y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$46y ),
    .Y(gnt_o[0])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:254.40-254.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$52y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.41-257.79" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$53y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:257.27-257.79" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(\$52y ),
    .B(\$53y ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:260.40-260.75" */
  \$mux  #(
    .WIDTH(32'd71)
  ) \$55  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.87-261.91" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$58y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:261.40-261.91" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$58y ),
    .Y(gnt_o[2])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:262.40-262.90" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$62  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14712  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.rr_q$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14713 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14714  (
    .A({ flush_i, \$24y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14713 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13729  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$11y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2191:replace_const_cells$13730  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$13y )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:231.13-231.26|rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5959  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.rr_q$29 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:180.15-180.28|rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5962  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.req_q$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/common_cells/rr_arb_tree.sv:157.15-157.28|rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5965  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$gen_arbiter.gen_int_rr.gen_lock.lock_q$6 )
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "rtl/common_cells/rstgen.sv:13.8" */
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  /* src = "rtl/common_cells/rstgen.sv:14.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen.sv:18.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen.sv:15.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen.sv:17.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen.sv:16.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "rtl/common_cells/rstgen.sv:21.19" */
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

/* src = "rtl/common_cells/rstgen_bypass.sv:15.8" */
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  /* src = "rtl/common_cells/rstgen_bypass.sv:18.18" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/common_cells/rstgen_bypass.sv:23.18" */
  output init_no;
  wire init_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:27.11" */
  wire rst_n;
  /* src = "rtl/common_cells/rstgen_bypass.sv:19.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:22.18" */
  output rst_no;
  wire rst_no;
  /* src = "rtl/common_cells/rstgen_bypass.sv:20.18" */
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  /* src = "rtl/common_cells/rstgen_bypass.sv:29.25" */
  wire [3:0] synch_regs_q;
  /* src = "rtl/common_cells/rstgen_bypass.sv:21.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "rtl/common_cells/rstgen_bypass.sv:53.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$synch_regs_q  (
    .ARST(rst_n),
    .CLK(clk_i),
    .D({ synch_regs_q[2:0], 1'h1 }),
    .Q(synch_regs_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:46.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:32.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "rtl/common_cells/rstgen_bypass.sv:39.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

/* src = "rtl/apb_uart/slib_clock_div.sv:35.8" */
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$3y ;
  wire [2:0] \$4y ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  wire [2:0] \$iCounter$6 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  wire \$iQ$7 ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_clock_div.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_clock_div.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_clock_div.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_clock_div.sv:44.27" */
  wire [2:0] iCounter;
  /* src = "rtl/apb_uart/slib_clock_div.sv:43.5" */
  wire iQ;
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.12-58.35" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(iCounter),
    .B(3'h7),
    .Y(\$3y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:65.23-65.35" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd3)
  ) \$4  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14715  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$6 ),
    .EN(CE),
    .Q(iCounter)
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iQ$7 ),
    .Q(iQ)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_clock_div.sv:59.19-62.26|rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5735  (
    .A(\$4y ),
    .B(3'h0),
    .S(\$3y ),
    .Y(\$iCounter$6 )
  );
  /* src = "rtl/apb_uart/slib_clock_div.sv:58.7-66.26|rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5748  (
    .A(CE),
    .B(\$3y ),
    .Y(\$iQ$7 )
  );
  assign Q = iQ;
endmodule

/* src = "rtl/apb_uart/slib_counter.sv:35.8" */
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14720 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$13788 ;
  wire [4:0] \$auto$rtlil.cc:3092:Mux$13790 ;
  /* src = "rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  wire [4:0] \$iCounter$10 ;
  /* src = "rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  wire [4:0] \$iCounter$11 ;
  /* src = "rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  wire \$iCounter[4]$13 ;
  /* src = "rtl/apb_uart/slib_counter.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_counter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_counter.sv:42.28" */
  input [3:0] D;
  wire [3:0] D;
  /* src = "rtl/apb_uart/slib_counter.sv:41.14" */
  input DOWN;
  wire DOWN;
  /* src = "rtl/apb_uart/slib_counter.sv:40.14" */
  input ENABLE;
  wire ENABLE;
  /* src = "rtl/apb_uart/slib_counter.sv:39.14" */
  input LOAD;
  wire LOAD;
  /* src = "rtl/apb_uart/slib_counter.sv:44.16" */
  output OVERFLOW;
  wire OVERFLOW;
  /* src = "rtl/apb_uart/slib_counter.sv:43.30" */
  output [3:0] Q;
  wire [3:0] Q;
  /* src = "rtl/apb_uart/slib_counter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_counter.sv:48.15" */
  wire [4:0] iCounter;
  /* src = "rtl/apb_uart/slib_counter.sv:76.28-76.40" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$7  (
    .A(iCounter),
    .B({ \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$13788 )
  );
  /* src = "rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14716  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter[4]$13 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14717 ),
    .Q(iCounter[4])
  );
  /* src = "rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$14719  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$11 [3:0]),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14720 ),
    .Q(iCounter[3:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14718  (
    .A({ ENABLE, LOAD, iCounter[4], CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14717 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14721  (
    .A({ ENABLE, LOAD, CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14720 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$13789  (
    .A(DOWN),
    .Y(\$auto$rtlil.cc:3092:Mux$13790 [4])
  );
  /* src = "rtl/apb_uart/slib_counter.sv:82.11-82.32|rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1861  (
    .A(\$iCounter$11 [4]),
    .B(1'h0),
    .S(iCounter[4]),
    .Y(\$iCounter[4]$13 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:65.11-65.45|rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$1885  (
    .A(\$auto$opt_share.cc:222:merge_operators$13788 ),
    .B({ 1'h0, D }),
    .S(LOAD),
    .Y(\$iCounter$10 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_counter.sv:61.11-61.25|rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$1892  (
    .A(\$iCounter$10 ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$iCounter$11 )
  );
  assign \$auto$rtlil.cc:3092:Mux$13790 [3:0] = { \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], \$auto$rtlil.cc:3092:Mux$13790 [4], 1'h1 };
  assign OVERFLOW = iCounter[4];
  assign Q = iCounter[3:0];
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$2y ;
  wire \$7y ;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.33" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iDd),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:59.21-59.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$2y ),
    .B(D),
    .Y(RE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.37-60.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:60.21-60.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iDd),
    .B(\$7y ),
    .Y(FE)
  );
  /* src = "rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$0y ;
  wire \$12y ;
  wire \$13y ;
  wire [6:0] \$14y ;
  wire \$19y ;
  wire \$1y ;
  wire \$24y ;
  wire \$25y ;
  wire [6:0] \$26y ;
  wire \$27y ;
  wire [703:0] \$31y ;
  wire [703:0] \$32y ;
  wire [6:0] \$34y ;
  wire [10:0] \$36y ;
  wire \$42y ;
  wire \$44y ;
  wire \$46y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  /* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$9y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14723 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14726 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14729 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$15028 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$15030 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$18 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$56 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$17 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [10:0] D;
  wire [10:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [10:0] Q;
  wire [10:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [703:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:57.25-57.72" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$0y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:57.79-57.113" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$1y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:76.23-76.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(iEMPTY),
    .Y(\$12y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:76.6-76.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(READ),
    .B(\$12y ),
    .Y(\$13y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:78.18-78.29" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$14  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:89.6-89.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$19y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:57.24-57.114" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$0y ),
    .B(\$1y ),
    .Y(iFULL)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:113.26-113.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(iFULL),
    .Y(\$24y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:113.8-113.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(WRITE),
    .B(\$24y ),
    .Y(\$25y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h1, \$26y [5:0] }),
    .B(7'h40),
    .Y(\$27y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$31  (
    .A(\$27y ),
    .S(\$26y [5:0]),
    .Y({ \$31y [703], \$31y [692], \$31y [681], \$31y [670], \$31y [659], \$31y [648], \$31y [637], \$31y [626], \$31y [615], \$31y [604], \$31y [593], \$31y [582], \$31y [571], \$31y [560], \$31y [549], \$31y [538], \$31y [527], \$31y [516], \$31y [505], \$31y [494], \$31y [483], \$31y [472], \$31y [461], \$31y [450], \$31y [439], \$31y [428], \$31y [417], \$31y [406], \$31y [395], \$31y [384], \$31y [373], \$31y [362], \$31y [351], \$31y [340], \$31y [329], \$31y [318], \$31y [307], \$31y [296], \$31y [285], \$31y [274], \$31y [263], \$31y [252], \$31y [241], \$31y [230], \$31y [219], \$31y [208], \$31y [197], \$31y [186], \$31y [175], \$31y [164], \$31y [153], \$31y [142], \$31y [131], \$31y [120], \$31y [109], \$31y [98], \$31y [87], \$31y [76], \$31y [65], \$31y [54], \$31y [43], \$31y [32], \$31y [21], \$31y [10] })
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$32  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10] }),
    .Y(\$32y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" */
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd11)
  ) \$36  (
    .A(iFIFOMem),
    .S(\$34y [5:0]),
    .Y(\$36y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(READ),
    .Y(\$42y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.44" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$42y ),
    .B(WRITE),
    .Y(\$44y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.12-140.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$44y ),
    .B(\$24y ),
    .Y(\$46y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(WRITE),
    .Y(\$49y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$49y ),
    .B(READ),
    .Y(\$51y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.6-145.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$51y ),
    .B(\$12y ),
    .Y(\$53y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:147.21-147.31" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$54  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15028 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:73.18-73.29" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$9  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$9y [6:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14722  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iWRAddr$17 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14723 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$14725  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iUSAGE$56 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14726 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14728  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iRDAddr$18 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14729 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14731  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [604:594]),
    .EN(\$25y ),
    .Q(iFIFOMem[604:594])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14732  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [615:605]),
    .EN(\$25y ),
    .Q(iFIFOMem[615:605])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14733  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [626:616]),
    .EN(\$25y ),
    .Q(iFIFOMem[626:616])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14734  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [637:627]),
    .EN(\$25y ),
    .Q(iFIFOMem[637:627])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14735  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [10:0]),
    .EN(\$25y ),
    .Q(iFIFOMem[10:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14736  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [21:11]),
    .EN(\$25y ),
    .Q(iFIFOMem[21:11])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14737  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [32:22]),
    .EN(\$25y ),
    .Q(iFIFOMem[32:22])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14738  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [43:33]),
    .EN(\$25y ),
    .Q(iFIFOMem[43:33])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14739  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [648:638]),
    .EN(\$25y ),
    .Q(iFIFOMem[648:638])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14740  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [54:44]),
    .EN(\$25y ),
    .Q(iFIFOMem[54:44])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14741  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [65:55]),
    .EN(\$25y ),
    .Q(iFIFOMem[65:55])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14742  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [76:66]),
    .EN(\$25y ),
    .Q(iFIFOMem[76:66])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14743  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [87:77]),
    .EN(\$25y ),
    .Q(iFIFOMem[87:77])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14744  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [98:88]),
    .EN(\$25y ),
    .Q(iFIFOMem[98:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14745  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [109:99]),
    .EN(\$25y ),
    .Q(iFIFOMem[109:99])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14746  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [120:110]),
    .EN(\$25y ),
    .Q(iFIFOMem[120:110])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14747  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [131:121]),
    .EN(\$25y ),
    .Q(iFIFOMem[131:121])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14748  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [142:132]),
    .EN(\$25y ),
    .Q(iFIFOMem[142:132])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14749  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [153:143]),
    .EN(\$25y ),
    .Q(iFIFOMem[153:143])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14750  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [659:649]),
    .EN(\$25y ),
    .Q(iFIFOMem[659:649])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14751  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [164:154]),
    .EN(\$25y ),
    .Q(iFIFOMem[164:154])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14752  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [175:165]),
    .EN(\$25y ),
    .Q(iFIFOMem[175:165])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14753  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [186:176]),
    .EN(\$25y ),
    .Q(iFIFOMem[186:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14754  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [197:187]),
    .EN(\$25y ),
    .Q(iFIFOMem[197:187])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14755  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [208:198]),
    .EN(\$25y ),
    .Q(iFIFOMem[208:198])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14756  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [219:209]),
    .EN(\$25y ),
    .Q(iFIFOMem[219:209])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14757  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [230:220]),
    .EN(\$25y ),
    .Q(iFIFOMem[230:220])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14758  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [241:231]),
    .EN(\$25y ),
    .Q(iFIFOMem[241:231])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14759  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [252:242]),
    .EN(\$25y ),
    .Q(iFIFOMem[252:242])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14760  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [263:253]),
    .EN(\$25y ),
    .Q(iFIFOMem[263:253])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14761  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [670:660]),
    .EN(\$25y ),
    .Q(iFIFOMem[670:660])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14762  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [274:264]),
    .EN(\$25y ),
    .Q(iFIFOMem[274:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14763  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [285:275]),
    .EN(\$25y ),
    .Q(iFIFOMem[285:275])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14764  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [296:286]),
    .EN(\$25y ),
    .Q(iFIFOMem[296:286])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14765  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [307:297]),
    .EN(\$25y ),
    .Q(iFIFOMem[307:297])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14766  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [318:308]),
    .EN(\$25y ),
    .Q(iFIFOMem[318:308])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14767  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [329:319]),
    .EN(\$25y ),
    .Q(iFIFOMem[329:319])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14768  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [340:330]),
    .EN(\$25y ),
    .Q(iFIFOMem[340:330])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14769  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [351:341]),
    .EN(\$25y ),
    .Q(iFIFOMem[351:341])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14770  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [362:352]),
    .EN(\$25y ),
    .Q(iFIFOMem[362:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14771  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [373:363]),
    .EN(\$25y ),
    .Q(iFIFOMem[373:363])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14772  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [681:671]),
    .EN(\$25y ),
    .Q(iFIFOMem[681:671])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14773  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [384:374]),
    .EN(\$25y ),
    .Q(iFIFOMem[384:374])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14774  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [395:385]),
    .EN(\$25y ),
    .Q(iFIFOMem[395:385])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14775  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [406:396]),
    .EN(\$25y ),
    .Q(iFIFOMem[406:396])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14776  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [417:407]),
    .EN(\$25y ),
    .Q(iFIFOMem[417:407])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14777  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [428:418]),
    .EN(\$25y ),
    .Q(iFIFOMem[428:418])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14778  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [439:429]),
    .EN(\$25y ),
    .Q(iFIFOMem[439:429])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14779  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [450:440]),
    .EN(\$25y ),
    .Q(iFIFOMem[450:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14780  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [461:451]),
    .EN(\$25y ),
    .Q(iFIFOMem[461:451])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14781  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [472:462]),
    .EN(\$25y ),
    .Q(iFIFOMem[472:462])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14782  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [483:473]),
    .EN(\$25y ),
    .Q(iFIFOMem[483:473])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14783  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [692:682]),
    .EN(\$25y ),
    .Q(iFIFOMem[692:682])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14784  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [494:484]),
    .EN(\$25y ),
    .Q(iFIFOMem[494:484])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14785  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [505:495]),
    .EN(\$25y ),
    .Q(iFIFOMem[505:495])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14786  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [516:506]),
    .EN(\$25y ),
    .Q(iFIFOMem[516:506])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14787  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [527:517]),
    .EN(\$25y ),
    .Q(iFIFOMem[527:517])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14788  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [538:528]),
    .EN(\$25y ),
    .Q(iFIFOMem[538:528])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14789  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [549:539]),
    .EN(\$25y ),
    .Q(iFIFOMem[549:539])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14790  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [560:550]),
    .EN(\$25y ),
    .Q(iFIFOMem[560:550])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14791  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [571:561]),
    .EN(\$25y ),
    .Q(iFIFOMem[571:561])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14792  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [582:572]),
    .EN(\$25y ),
    .Q(iFIFOMem[582:572])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14793  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [593:583]),
    .EN(\$25y ),
    .Q(iFIFOMem[593:583])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$14794  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [703:693]),
    .EN(\$25y ),
    .Q(iFIFOMem[703:693])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14724  (
    .A({ CLEAR, \$25y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14723 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14727  (
    .A({ CLEAR, \$53y , \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14726 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14730  (
    .A({ CLEAR, \$13y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14729 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13734  (
    .A(iWRAddr[5:0]),
    .Y(\$26y [5:0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13738  (
    .A(iRDAddr[5:0]),
    .Y(\$34y [5:0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15029  (
    .A(\$53y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15030 [5])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$36y ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$19y ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$5685  (
    .A(\$auto$opt_share.cc:222:merge_operators$15028 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$iUSAGE$56 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5693  (
    .A(\$14y ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iRDAddr$18 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5696  (
    .A(\$9y [6:0]),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iWRAddr$17 )
  );
  assign \$26y [6] = 1'h1;
  assign { \$31y [702:693], \$31y [691:682], \$31y [680:671], \$31y [669:660], \$31y [658:649], \$31y [647:638], \$31y [636:627], \$31y [625:616], \$31y [614:605], \$31y [603:594], \$31y [592:583], \$31y [581:572], \$31y [570:561], \$31y [559:550], \$31y [548:539], \$31y [537:528], \$31y [526:517], \$31y [515:506], \$31y [504:495], \$31y [493:484], \$31y [482:473], \$31y [471:462], \$31y [460:451], \$31y [449:440], \$31y [438:429], \$31y [427:418], \$31y [416:407], \$31y [405:396], \$31y [394:385], \$31y [383:374], \$31y [372:363], \$31y [361:352], \$31y [350:341], \$31y [339:330], \$31y [328:319], \$31y [317:308], \$31y [306:297], \$31y [295:286], \$31y [284:275], \$31y [273:264], \$31y [262:253], \$31y [251:242], \$31y [240:231], \$31y [229:220], \$31y [218:209], \$31y [207:198], \$31y [196:187], \$31y [185:176], \$31y [174:165], \$31y [163:154], \$31y [152:143], \$31y [141:132], \$31y [130:121], \$31y [119:110], \$31y [108:99], \$31y [97:88], \$31y [86:77], \$31y [75:66], \$31y [64:55], \$31y [53:44], \$31y [42:33], \$31y [31:22], \$31y [20:11], \$31y [9:0] } = { \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [703], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [692], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [681], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [670], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [659], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [648], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [637], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [626], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [615], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [604], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [593], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [582], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [571], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [560], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [549], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [538], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [527], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [516], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [505], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [494], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [483], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [472], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [461], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [450], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [428], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [417], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [406], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [395], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [384], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [373], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [362], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [340], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [329], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [318], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [307], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [296], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [285], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [274], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [252], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [241], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [230], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [219], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [208], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [197], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [186], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [164], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [153], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [142], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [131], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [120], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [109], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [98], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [76], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [65], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [54], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [43], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [32], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [21], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10], \$31y [10] };
  assign \$34y [6] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$15030 [4:0] = { \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], \$auto$rtlil.cc:3092:Mux$15030 [5], 1'h1 };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$0y ;
  wire \$12y ;
  wire \$13y ;
  wire [6:0] \$14y ;
  wire \$19y ;
  wire \$1y ;
  wire \$24y ;
  wire \$25y ;
  wire [6:0] \$26y ;
  wire \$27y ;
  wire [511:0] \$31y ;
  wire [511:0] \$32y ;
  wire [6:0] \$34y ;
  wire [7:0] \$36y ;
  wire \$42y ;
  wire \$44y ;
  wire \$46y ;
  wire \$49y ;
  wire \$51y ;
  wire \$53y ;
  wire [6:0] \$9y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14796 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14802 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$15033 ;
  wire [5:0] \$auto$rtlil.cc:3092:Mux$15035 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iRDAddr$18 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$iUSAGE$56 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$iWRAddr$17 ;
  /* src = "rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_fifo.sv:41.28" */
  input [7:0] D;
  wire [7:0] D;
  /* src = "rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:42.30" */
  output [7:0] Q;
  wire [7:0] Q;
  /* src = "rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [511:0] iFIFOMem;
  /* src = "rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  /* src = "rtl/apb_uart/slib_fifo.sv:57.25-57.72" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$0y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:57.79-57.113" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$1y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:76.23-76.38" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(iEMPTY),
    .Y(\$12y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:76.6-76.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(READ),
    .B(\$12y ),
    .Y(\$13y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:78.18-78.29" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$14  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:89.6-89.24" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$19y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:57.24-57.114" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$0y ),
    .B(\$1y ),
    .Y(iFULL)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:113.26-113.40" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(iFULL),
    .Y(\$24y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:113.8-113.40" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(WRITE),
    .B(\$24y ),
    .Y(\$25y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$27  (
    .A({ 1'h1, \$26y [5:0] }),
    .B(7'h40),
    .Y(\$27y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$31  (
    .A(\$27y ),
    .S(\$26y [5:0]),
    .Y({ \$31y [511], \$31y [503], \$31y [495], \$31y [487], \$31y [479], \$31y [471], \$31y [463], \$31y [455], \$31y [447], \$31y [439], \$31y [431], \$31y [423], \$31y [415], \$31y [407], \$31y [399], \$31y [391], \$31y [383], \$31y [375], \$31y [367], \$31y [359], \$31y [351], \$31y [343], \$31y [335], \$31y [327], \$31y [319], \$31y [311], \$31y [303], \$31y [295], \$31y [287], \$31y [279], \$31y [271], \$31y [263], \$31y [255], \$31y [247], \$31y [239], \$31y [231], \$31y [223], \$31y [215], \$31y [207], \$31y [199], \$31y [191], \$31y [183], \$31y [175], \$31y [167], \$31y [159], \$31y [151], \$31y [143], \$31y [135], \$31y [127], \$31y [119], \$31y [111], \$31y [103], \$31y [95], \$31y [87], \$31y [79], \$31y [71], \$31y [63], \$31y [55], \$31y [47], \$31y [39], \$31y [31], \$31y [23], \$31y [15], \$31y [7] })
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:115.8-115.42" */
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$32  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7] }),
    .Y(\$32y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:118.6-118.37" */
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd8)
  ) \$36  (
    .A(iFIFOMem),
    .S(\$34y [5:0]),
    .Y(\$36y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(READ),
    .Y(\$42y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.13-140.44" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$42y ),
    .B(WRITE),
    .Y(\$44y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:140.12-140.63" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$44y ),
    .B(\$24y ),
    .Y(\$46y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.21" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(WRITE),
    .Y(\$49y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.7-145.38" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$49y ),
    .B(READ),
    .Y(\$51y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:145.6-145.58" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(\$51y ),
    .B(\$12y ),
    .Y(\$53y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:147.21-147.31" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$54  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15033 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:73.18-73.29" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$9  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14795  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iWRAddr$17 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14796 ),
    .Q(iWRAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$14798  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iUSAGE$56 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14799 ),
    .Q(iUSAGE)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$14801  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iRDAddr$18 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14802 ),
    .Q(iRDAddr)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14804  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [439:432]),
    .EN(\$25y ),
    .Q(iFIFOMem[439:432])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14805  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [447:440]),
    .EN(\$25y ),
    .Q(iFIFOMem[447:440])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14806  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [455:448]),
    .EN(\$25y ),
    .Q(iFIFOMem[455:448])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14807  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [463:456]),
    .EN(\$25y ),
    .Q(iFIFOMem[463:456])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14808  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [7:0]),
    .EN(\$25y ),
    .Q(iFIFOMem[7:0])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14809  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [15:8]),
    .EN(\$25y ),
    .Q(iFIFOMem[15:8])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14810  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [23:16]),
    .EN(\$25y ),
    .Q(iFIFOMem[23:16])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14811  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [31:24]),
    .EN(\$25y ),
    .Q(iFIFOMem[31:24])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14812  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [471:464]),
    .EN(\$25y ),
    .Q(iFIFOMem[471:464])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14813  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [39:32]),
    .EN(\$25y ),
    .Q(iFIFOMem[39:32])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14814  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [47:40]),
    .EN(\$25y ),
    .Q(iFIFOMem[47:40])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14815  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [55:48]),
    .EN(\$25y ),
    .Q(iFIFOMem[55:48])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14816  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [63:56]),
    .EN(\$25y ),
    .Q(iFIFOMem[63:56])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14817  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [71:64]),
    .EN(\$25y ),
    .Q(iFIFOMem[71:64])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14818  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [79:72]),
    .EN(\$25y ),
    .Q(iFIFOMem[79:72])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14819  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [87:80]),
    .EN(\$25y ),
    .Q(iFIFOMem[87:80])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14820  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [95:88]),
    .EN(\$25y ),
    .Q(iFIFOMem[95:88])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14821  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [103:96]),
    .EN(\$25y ),
    .Q(iFIFOMem[103:96])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14822  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [111:104]),
    .EN(\$25y ),
    .Q(iFIFOMem[111:104])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14823  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [479:472]),
    .EN(\$25y ),
    .Q(iFIFOMem[479:472])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14824  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [119:112]),
    .EN(\$25y ),
    .Q(iFIFOMem[119:112])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14825  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [127:120]),
    .EN(\$25y ),
    .Q(iFIFOMem[127:120])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14826  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [135:128]),
    .EN(\$25y ),
    .Q(iFIFOMem[135:128])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14827  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [143:136]),
    .EN(\$25y ),
    .Q(iFIFOMem[143:136])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14828  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [151:144]),
    .EN(\$25y ),
    .Q(iFIFOMem[151:144])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14829  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [159:152]),
    .EN(\$25y ),
    .Q(iFIFOMem[159:152])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14830  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [167:160]),
    .EN(\$25y ),
    .Q(iFIFOMem[167:160])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14831  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [175:168]),
    .EN(\$25y ),
    .Q(iFIFOMem[175:168])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14832  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [183:176]),
    .EN(\$25y ),
    .Q(iFIFOMem[183:176])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14833  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [191:184]),
    .EN(\$25y ),
    .Q(iFIFOMem[191:184])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14834  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [487:480]),
    .EN(\$25y ),
    .Q(iFIFOMem[487:480])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14835  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [199:192]),
    .EN(\$25y ),
    .Q(iFIFOMem[199:192])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14836  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [207:200]),
    .EN(\$25y ),
    .Q(iFIFOMem[207:200])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14837  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [215:208]),
    .EN(\$25y ),
    .Q(iFIFOMem[215:208])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14838  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [223:216]),
    .EN(\$25y ),
    .Q(iFIFOMem[223:216])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14839  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [231:224]),
    .EN(\$25y ),
    .Q(iFIFOMem[231:224])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14840  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [239:232]),
    .EN(\$25y ),
    .Q(iFIFOMem[239:232])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14841  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [247:240]),
    .EN(\$25y ),
    .Q(iFIFOMem[247:240])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14842  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [255:248]),
    .EN(\$25y ),
    .Q(iFIFOMem[255:248])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14843  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [263:256]),
    .EN(\$25y ),
    .Q(iFIFOMem[263:256])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14844  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [271:264]),
    .EN(\$25y ),
    .Q(iFIFOMem[271:264])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14845  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [495:488]),
    .EN(\$25y ),
    .Q(iFIFOMem[495:488])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14846  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [279:272]),
    .EN(\$25y ),
    .Q(iFIFOMem[279:272])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14847  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [287:280]),
    .EN(\$25y ),
    .Q(iFIFOMem[287:280])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14848  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [295:288]),
    .EN(\$25y ),
    .Q(iFIFOMem[295:288])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14849  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [303:296]),
    .EN(\$25y ),
    .Q(iFIFOMem[303:296])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14850  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [311:304]),
    .EN(\$25y ),
    .Q(iFIFOMem[311:304])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14851  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [319:312]),
    .EN(\$25y ),
    .Q(iFIFOMem[319:312])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14852  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [327:320]),
    .EN(\$25y ),
    .Q(iFIFOMem[327:320])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14853  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [335:328]),
    .EN(\$25y ),
    .Q(iFIFOMem[335:328])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14854  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [343:336]),
    .EN(\$25y ),
    .Q(iFIFOMem[343:336])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14855  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [351:344]),
    .EN(\$25y ),
    .Q(iFIFOMem[351:344])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14856  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [503:496]),
    .EN(\$25y ),
    .Q(iFIFOMem[503:496])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14857  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [359:352]),
    .EN(\$25y ),
    .Q(iFIFOMem[359:352])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14858  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [367:360]),
    .EN(\$25y ),
    .Q(iFIFOMem[367:360])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14859  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [375:368]),
    .EN(\$25y ),
    .Q(iFIFOMem[375:368])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14860  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [383:376]),
    .EN(\$25y ),
    .Q(iFIFOMem[383:376])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14861  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [391:384]),
    .EN(\$25y ),
    .Q(iFIFOMem[391:384])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14862  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [399:392]),
    .EN(\$25y ),
    .Q(iFIFOMem[399:392])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14863  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [407:400]),
    .EN(\$25y ),
    .Q(iFIFOMem[407:400])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14864  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [415:408]),
    .EN(\$25y ),
    .Q(iFIFOMem[415:408])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14865  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [423:416]),
    .EN(\$25y ),
    .Q(iFIFOMem[423:416])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14866  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [431:424]),
    .EN(\$25y ),
    .Q(iFIFOMem[431:424])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14867  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$32y [511:504]),
    .EN(\$25y ),
    .Q(iFIFOMem[511:504])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14797  (
    .A({ CLEAR, \$25y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14796 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14800  (
    .A({ CLEAR, \$53y , \$46y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14799 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14803  (
    .A({ CLEAR, \$13y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14802 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13742  (
    .A(iWRAddr[5:0]),
    .Y(\$26y [5:0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$13746  (
    .A(iRDAddr[5:0]),
    .Y(\$34y [5:0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15034  (
    .A(\$53y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15035 [5])
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$36y ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$19y ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_fifo.sv:136.1-136.13|rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$5716  (
    .A(\$auto$opt_share.cc:222:merge_operators$15033 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$iUSAGE$56 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5724  (
    .A(\$14y ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iRDAddr$18 )
  );
  /* src = "rtl/apb_uart/slib_fifo.sv:82.11-87.10|rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$5727  (
    .A(\$9y ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$iWRAddr$17 )
  );
  assign \$26y [6] = 1'h1;
  assign { \$31y [510:504], \$31y [502:496], \$31y [494:488], \$31y [486:480], \$31y [478:472], \$31y [470:464], \$31y [462:456], \$31y [454:448], \$31y [446:440], \$31y [438:432], \$31y [430:424], \$31y [422:416], \$31y [414:408], \$31y [406:400], \$31y [398:392], \$31y [390:384], \$31y [382:376], \$31y [374:368], \$31y [366:360], \$31y [358:352], \$31y [350:344], \$31y [342:336], \$31y [334:328], \$31y [326:320], \$31y [318:312], \$31y [310:304], \$31y [302:296], \$31y [294:288], \$31y [286:280], \$31y [278:272], \$31y [270:264], \$31y [262:256], \$31y [254:248], \$31y [246:240], \$31y [238:232], \$31y [230:224], \$31y [222:216], \$31y [214:208], \$31y [206:200], \$31y [198:192], \$31y [190:184], \$31y [182:176], \$31y [174:168], \$31y [166:160], \$31y [158:152], \$31y [150:144], \$31y [142:136], \$31y [134:128], \$31y [126:120], \$31y [118:112], \$31y [110:104], \$31y [102:96], \$31y [94:88], \$31y [86:80], \$31y [78:72], \$31y [70:64], \$31y [62:56], \$31y [54:48], \$31y [46:40], \$31y [38:32], \$31y [30:24], \$31y [22:16], \$31y [14:8], \$31y [6:0] } = { \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [511], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [503], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [495], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [487], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [479], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [471], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [463], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [455], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [447], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [439], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [431], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [423], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [415], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [407], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [399], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [391], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [383], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [375], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [367], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [359], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [351], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [343], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [335], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [327], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [319], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [311], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [303], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [295], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [287], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [279], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [271], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [263], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [255], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [247], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [239], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [231], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [223], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [215], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [207], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [199], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [191], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [183], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [175], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [167], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [159], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [151], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [143], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [135], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [127], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [119], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [111], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [103], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [95], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [87], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [79], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [71], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [63], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [55], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [47], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [39], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [31], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [23], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [15], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7], \$31y [7] };
  assign \$34y [6] = 1'h1;
  assign \$auto$rtlil.cc:3092:Mux$15035 [4:0] = { \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], \$auto$rtlil.cc:3092:Mux$15035 [5], 1'h1 };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$16 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14869 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14871 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15038 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15040 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .B(2'h2),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(iCount),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCount),
    .B(2'h2),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(D),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$6  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$15040 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15038 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iCount),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$7y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14868  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$15038 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14871 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14870  (
    .A({ \$5y , \$9y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14869 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14872  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14869 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14871 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15039  (
    .A(\$5y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15040 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$17 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5889  (
    .A(Q),
    .B(1'h0),
    .S(\$15y ),
    .Y(\$Q$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5896  (
    .A(\$Q$16 ),
    .B(\$14y ),
    .Y(\$Q$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$15040 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$16 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14874 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14876 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15043 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15045 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .B(2'h2),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(iCount),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCount),
    .B(2'h2),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(D),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$6  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$15045 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15043 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iCount),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$7y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14873  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$15043 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14876 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14875  (
    .A({ \$5y , \$9y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14874 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14877  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14874 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14876 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15044  (
    .A(\$5y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15045 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$17 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5839  (
    .A(Q),
    .B(1'h0),
    .S(\$15y ),
    .Y(\$Q$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5846  (
    .A(\$Q$16 ),
    .B(\$14y ),
    .Y(\$Q$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$15045 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$16 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14879 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14881 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15048 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15050 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .B(2'h2),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(iCount),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCount),
    .B(2'h2),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(D),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$6  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$15050 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15048 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iCount),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$7y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14878  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$15048 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14881 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14880  (
    .A({ \$5y , \$9y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14879 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14882  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14879 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14881 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15049  (
    .A(\$5y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15050 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$17 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5864  (
    .A(Q),
    .B(1'h0),
    .S(\$15y ),
    .Y(\$Q$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5871  (
    .A(\$Q$16 ),
    .B(\$14y ),
    .Y(\$Q$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$15050 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$16 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14884 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14886 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$15053 ;
  wire [1:0] \$auto$rtlil.cc:3092:Mux$15055 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .B(2'h2),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(iCount),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCount),
    .B(2'h2),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(D),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$6  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$15055 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15053 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iCount),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$7y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$14883  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$15053 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14886 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14885  (
    .A({ \$5y , \$9y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14884 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14887  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14884 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14886 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15054  (
    .A(\$5y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15055 [1])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$17 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5814  (
    .A(Q),
    .B(1'h0),
    .S(\$15y ),
    .Y(\$Q$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5821  (
    .A(\$Q$16 ),
    .B(\$14y ),
    .Y(\$Q$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$15055 [0] = 1'h1;
endmodule

/* src = "rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$14y ;
  wire \$15y ;
  wire \$4y ;
  wire \$5y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$Q$16 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$Q$17 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14889 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14891 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$15058 ;
  wire [2:0] \$auto$rtlil.cc:3092:Mux$15060 ;
  /* src = "rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [2:0] iCount;
  /* src = "rtl/apb_uart/slib_input_filter.sv:68.16-68.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(iCount),
    .B(3'h4),
    .Y(\$14y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:72.25-72.36" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(iCount),
    .Y(\$15y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.37-58.51" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iCount),
    .B(3'h4),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:58.20-58.52" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(D),
    .B(\$4y ),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:60.31-60.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$6  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:3092:Mux$15060 [2], \$auto$rtlil.cc:3092:Mux$15060 [2], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$15058 )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.34-62.44" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(D),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.50-62.61" */
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(iCount),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:62.33-62.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$7y ),
    .B(\$8y ),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14888  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$15058 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14891 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14890  (
    .A({ \$5y , \$9y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14889 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14892  (
    .A({ CE, \$auto$opt_dff.cc:194:make_patterns_logic$14889  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14891 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15059  (
    .A(\$5y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15060 [2])
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$Q$17 ),
    .Q(Q)
  );
  /* src = "rtl/apb_uart/slib_input_filter.sv:74.16-74.27|rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1817  (
    .A(Q),
    .B(1'h0),
    .S(\$15y ),
    .Y(\$Q$16 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_input_filter.sv:70.16-70.27|rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1824  (
    .A(\$Q$16 ),
    .B(\$14y ),
    .Y(\$Q$17 )
  );
  assign \$auto$rtlil.cc:3092:Mux$15060 [1:0] = { \$auto$rtlil.cc:3092:Mux$15060 [2], 1'h1 };
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  /* src = "rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "rtl/apb_uart/slib_mv_filter.sv:35.8" */
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire \$2y ;
  wire \$5y ;
  wire [4:0] \$6y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14894 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14896 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14898 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire [4:0] \$iCounter$11 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire \$iQ$12 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  wire \$iQ$9 ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:40.14" */
  input D;
  wire D;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:41.16" */
  output Q;
  wire Q;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:38.14" */
  input SAMPLE;
  wire SAMPLE;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:45.15" */
  wire [4:0] iCounter;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:46.5" */
  wire iQ;
  /* src = "rtl/apb_uart/slib_mv_filter.sv:57.12-57.33" */
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iCounter),
    .B(4'ha),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:63.18-63.47" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(SAMPLE),
    .B(D),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:65.30-65.42" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd5)
  ) \$6  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$6y )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$14893  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$11 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14898 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14895  (
    .A({ CLEAR, \$5y , \$2y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14894 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14897  (
    .A({ CLEAR, \$2y  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14896 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14899  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14896 , \$auto$opt_dff.cc:194:make_patterns_logic$14894  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14898 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iQ$12 ),
    .Q(iQ)
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$1843  (
    .A(\$iQ$9 ),
    .B(1'h0),
    .S(CLEAR),
    .Y(\$iQ$12 )
  );
  /* src = "rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$1846  (
    .A(\$6y ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$iCounter$11 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$1854  (
    .A(iQ),
    .B(\$2y ),
    .Y(\$iQ$9 )
  );
  assign Q = iQ;
endmodule

/* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" */
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$11y ;
  wire \$12y ;
  wire \$13y ;
  wire [3:0] \$16y ;
  wire \$18y ;
  wire \$19y ;
  wire \$1y ;
  wire \$23y ;
  wire \$24y ;
  wire \$28y ;
  wire \$29y ;
  wire \$33y ;
  wire \$34y ;
  wire \$38y ;
  wire \$39y ;
  wire \$3y ;
  wire \$41y ;
  wire \$42y ;
  wire \$44y ;
  wire \$47y ;
  wire \$50y ;
  wire \$53y ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13403 ;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" */
  wire [4:0] addr_hit;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" */
  wire addrmiss;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" */
  wire [31:0] bootaddr_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:73.16" */
  wire [31:0] bootaddr_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" */
  wire bootaddr_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" */
  wire bootmode_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:82.9" */
  wire bootmode_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" */
  wire bootmode_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" */
  wire [31:0] corestatus_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:79.16" */
  wire [31:0] corestatus_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" */
  wire corestatus_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" */
  input devmode_i;
  wire devmode_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" */
  wire fetchen_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:76.9" */
  wire fetchen_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" */
  wire fetchen_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" */
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" */
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:37.24" */
  wire [4:0] reg_addr;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:39.19" */
  wire [3:0] reg_be;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" */
  wire reg_error;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:48.14" */
  /* unused_bits = "43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69" */
  wire [69:0] reg_intf_req;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:49.14" */
  wire [33:0] reg_intf_rsp;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:40.19" */
  wire [31:0] reg_rdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:45.18" */
  wire [31:0] reg_rdata_next;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" */
  wire reg_re;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:38.19" */
  wire [31:0] reg_wdata;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" */
  wire reg_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" */
  wire sram_dly_qs;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:85.9" */
  wire sram_dly_wd;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" */
  wire sram_dly_we;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" */
  wire wr_err;
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:56.19-56.58" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(reg_req_i[0]),
    .B(reg_req_i[37]),
    .Y(reg_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:57.40-57.59" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(reg_req_i[37]),
    .Y(\$1y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:233.20-233.56" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(reg_req_i[42:38]),
    .B(5'h10),
    .Y(addr_hit[4])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.42-236.52" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(addr_hit),
    .Y(\$11y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.42-236.52" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$11y ),
    .Y(\$12y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.22-236.38" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(reg_re),
    .B(reg_we),
    .Y(\$13y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:236.21-236.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(\$13y ),
    .B(\$12y ),
    .Y(addrmiss)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.55-241.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$16  (
    .A(reg_req_i[4:1]),
    .Y(\$16y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.32-241.63" */
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(\$16y ),
    .Y(\$18y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.17-241.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$19  (
    .A(addr_hit[0]),
    .B(\$18y ),
    .Y(\$19y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:57.19-57.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(reg_req_i[0]),
    .B(\$1y ),
    .Y(reg_re)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:242.17-242.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$23  (
    .A(addr_hit[1]),
    .B(\$16y [0]),
    .Y(\$23y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-242.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$24  (
    .A(\$19y ),
    .B(\$23y ),
    .Y(\$24y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:243.17-243.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$28  (
    .A(addr_hit[2]),
    .B(\$18y ),
    .Y(\$28y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-243.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$29  (
    .A(\$24y ),
    .B(\$28y ),
    .Y(\$29y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:66.23-66.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(devmode_i),
    .B(addrmiss),
    .Y(\$3y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:244.17-244.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(addr_hit[3]),
    .B(\$16y [0]),
    .Y(\$33y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-244.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(\$29y ),
    .B(\$33y ),
    .Y(\$34y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:245.17-245.64" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(addr_hit[4]),
    .B(\$16y [0]),
    .Y(\$38y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:241.16-245.65" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(\$34y ),
    .B(\$38y ),
    .Y(\$39y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:66.22-66.53" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(\$3y ),
    .B(wr_err),
    .Y(reg_error)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:240.15-245.66" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(reg_we),
    .B(\$39y ),
    .Y(wr_err)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.24-248.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(addr_hit[0]),
    .B(reg_we),
    .Y(\$41y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.47-248.57" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(reg_error),
    .Y(\$42y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:248.24-248.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(\$41y ),
    .B(\$42y ),
    .Y(bootaddr_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:251.23-251.43" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(addr_hit[1]),
    .B(reg_we),
    .Y(\$44y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:251.23-251.56" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$46  (
    .A(\$44y ),
    .B(\$42y ),
    .Y(fetchen_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:254.26-254.46" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$47  (
    .A(addr_hit[2]),
    .B(reg_we),
    .Y(\$47y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:254.26-254.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$47y ),
    .B(\$42y ),
    .Y(corestatus_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:257.24-257.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(addr_hit[3]),
    .B(reg_we),
    .Y(\$50y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:257.24-257.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(\$50y ),
    .B(\$42y ),
    .Y(bootmode_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:260.24-260.44" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(addr_hit[4]),
    .B(reg_we),
    .Y(\$53y )
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:260.24-260.57" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$55  (
    .A(\$53y ),
    .B(\$42y ),
    .Y(sram_dly_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:229.20-229.56" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(reg_req_i[42:38]),
    .Y(addr_hit[0])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:230.20-230.55" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(reg_req_i[42:38]),
    .B(3'h4),
    .Y(addr_hit[1])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:231.20-231.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(reg_req_i[42:38]),
    .B(4'h8),
    .Y(addr_hit[2])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:232.20-232.56" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(reg_req_i[42:38]),
    .B(4'hc),
    .Y(addr_hit[3])
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13402  (
    .A({ addr_hit[4:3], addr_hit[1] }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13403 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd31)
  ) \$procmux$12495  (
    .A(31'h7fffffff),
    .B({ bootaddr_qs[31:1], corestatus_qs[31:1], 31'h00000000 }),
    .S({ addr_hit[0], addr_hit[2], \$auto$opt_reduce.cc:137:opt_pmux$13403  }),
    .Y(reg_rsp_o[33:3])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd1)
  ) \$procmux$12502  (
    .A(1'h1),
    .B({ bootaddr_qs[0], fetchen_qs, corestatus_qs[0], bootmode_qs, sram_dly_qs }),
    .S({ addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] }),
    .Y(reg_rsp_o[2])
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  /* src = "rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign bootaddr_wd = reg_req_i[36:5];
  assign bootmode_wd = reg_req_i[5];
  assign corestatus_wd = reg_req_i[36:5];
  assign fetchen_wd = reg_req_i[5];
  assign reg_addr = reg_req_i[42:38];
  assign reg_be = reg_req_i[4:1];
  assign reg_intf_req = reg_req_i;
  assign reg_intf_rsp = { reg_rsp_o[33:2], reg_error, 1'h1 };
  assign reg_rdata = reg_rsp_o[33:2];
  assign reg_rdata_next = reg_rsp_o[33:2];
  assign reg_rsp_o[1:0] = { reg_error, 1'h1 };
  assign reg_wdata = reg_req_i[36:5];
  assign sram_dly_wd = reg_req_i[5];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "ihp13/tc_clk.sv:9.8" */
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  /* src = "ihp13/tc_clk.sv:10.18" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_clk.sv:11.18" */
  output clk_o;
  wire clk_o;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:14.16" */
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101y ;
  wire \$164y ;
  wire \$165y ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  /* src = "ihp13/tc_sram_impl.sv:231.39-231.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$101y )
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(be_i[2]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(be_i[0]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(be_i[3]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  /* src = "ihp13/tc_sram_impl.sv:248.24-248.29" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(we_i),
    .Y(\$164y )
  );
  /* src = "ihp13/tc_sram_impl.sv:248.16-248.29" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(req_i),
    .B(\$164y ),
    .Y(\$165y )
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(be_i[1]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14900  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$165y ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12629  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12632  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12635  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12638  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12641  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12644  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12647  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12650  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12653  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12656  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12659  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12662  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12665  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12668  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12671  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12674  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12677  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12680  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12683  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12686  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12689  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12692  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12695  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12698  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12701  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12704  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12707  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12710  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12713  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12716  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12719  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12722  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$164y ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, impl_i, req_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$101y ;
  wire \$164y ;
  wire \$165y ;
  /* src = "ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  /* src = "ihp13/tc_sram_impl.sv:231.39-231.52" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(addr_i[0]),
    .Y(\$101y )
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$102  (
    .A(be_i[2]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(be_i[0]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(be_i[3]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$123  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$13  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  /* src = "ihp13/tc_sram_impl.sv:248.24-248.29" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$164  (
    .A(we_i),
    .Y(\$164y )
  );
  /* src = "ihp13/tc_sram_impl.sv:248.16-248.29" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$165  (
    .A(req_i),
    .B(\$164y ),
    .Y(\$165y )
  );
  /* src = "ihp13/tc_sram_impl.sv:231.28-231.52" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(be_i[1]),
    .B(\$101y ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  /* src = "ihp13/tc_sram_impl.sv:233.28-233.51" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  /* src = "ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14901  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$165y ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12531  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12534  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12537  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12540  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12543  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12546  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12549  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12552  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12555  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12558  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12561  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12564  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12567  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12570  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12573  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12576  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12579  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12582  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12585  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12588  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12591  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12594  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12597  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12600  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12603  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12606  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12609  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12612  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12615  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12618  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12621  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "ihp13/tc_sram_impl.sv:236.13-236.42|ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12624  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$164y ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "rtl/timer_unit/timer_unit.sv:37.8" */
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, addr_i, wdata_i, be_i, wen_i, id_i, gnt_o, r_rdata_o, r_opc_o, r_id_o, r_valid_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o);
  wire \$103y ;
  wire \$107y ;
  wire \$111y ;
  wire \$113y ;
  wire \$119y ;
  wire \$122y ;
  wire \$126y ;
  wire \$127y ;
  wire \$128y ;
  wire \$131y ;
  wire \$134y ;
  wire \$144y ;
  wire \$145y ;
  wire \$146y ;
  wire \$149y ;
  wire \$14y ;
  wire \$152y ;
  wire \$15y ;
  wire \$163y ;
  wire \$167y ;
  wire \$176y ;
  wire \$196y ;
  wire \$197y ;
  wire \$205y ;
  wire \$209y ;
  wire \$38y ;
  wire \$40y ;
  wire \$44y ;
  wire \$50y ;
  wire \$56y ;
  wire \$58y ;
  wire \$59y ;
  wire \$61y ;
  wire \$63y ;
  wire \$80y ;
  wire \$86y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14912 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14914 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14923 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14925 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14903 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14906 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14909 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14916 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14920 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14927 ;
  wire \$auto$opt_share.cc:222:merge_operators$15061 ;
  wire \$auto$rtlil.cc:3092:Mux$13793 ;
  wire \$auto$rtlil.cc:3092:Mux$13796 ;
  wire \$auto$rtlil.cc:3092:Mux$15063 ;
  wire [31:0] \$procmux$11947_Y ;
  wire \$procmux$11948_CMP ;
  wire \$procmux$11949_CMP ;
  wire \$procmux$11950_CMP ;
  wire \$procmux$11951_CMP ;
  wire \$procmux$11952_CMP ;
  wire \$procmux$11953_CMP ;
  wire \$procmux$11971_Y ;
  wire \$procmux$11981_Y ;
  wire \$procmux$11990_Y ;
  wire \$procmux$12001_Y ;
  wire \$procmux$12007_Y ;
  wire \$procmux$12023_CMP ;
  wire \$procmux$12032_CMP ;
  wire [31:0] \$procmux$12043_Y ;
  wire \$procmux$12044_CMP ;
  wire [31:0] \$procmux$12056_Y ;
  wire \$procmux$12057_CMP ;
  wire \$procmux$12060_Y ;
  wire \$procmux$12065_Y ;
  wire \$procmux$12071_Y ;
  wire \$procmux$12078_Y ;
  wire \$procmux$12088_Y ;
  wire \$procmux$12099_Y ;
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$procmux$12110_Y ;
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$procmux$12113_Y ;
  wire \$procmux$12134_Y ;
  wire \$procmux$12176_Y ;
  wire \$procmux$12185_Y ;
  wire \$procmux$12194_Y ;
  wire \$procmux$12200_Y ;
  wire \$procmux$12206_Y ;
  wire \$procmux$12223_Y ;
  wire \$procmux$12245_Y ;
  wire \$procmux$12254_Y ;
  wire \$procmux$12263_Y ;
  wire \$procmux$12269_Y ;
  wire \$procmux$12279_Y ;
  wire \$procmux$12313_Y ;
  wire \$procmux$12328_Y ;
  wire \$procmux$12333_Y ;
  wire \$procmux$12336_Y ;
  wire \$procmux$12378_Y ;
  wire \$procmux$12410_Y ;
  /* src = "rtl/timer_unit/timer_unit.sv:91.56" */
  wire [1:0] CS;
  wire NS;
  /* src = "rtl/timer_unit/timer_unit.sv:48.39" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "rtl/timer_unit/timer_unit.sv:51.39" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "rtl/timer_unit/timer_unit.sv:66.39" */
  output busy_o;
  wire busy_o;
  /* src = "rtl/timer_unit/timer_unit.sv:42.39" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:61.39" */
  input event_hi_i;
  wire event_hi_i;
  /* src = "rtl/timer_unit/timer_unit.sv:60.39" */
  input event_lo_i;
  wire event_lo_i;
  /* src = "rtl/timer_unit/timer_unit.sv:53.39" */
  output gnt_o;
  wire gnt_o;
  /* src = "rtl/timer_unit/timer_unit.sv:52.39" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "rtl/timer_unit/timer_unit.sv:64.39" */
  output irq_hi_o;
  wire irq_hi_o;
  /* src = "rtl/timer_unit/timer_unit.sv:63.39" */
  output irq_lo_o;
  wire irq_lo_o;
  /* src = "rtl/timer_unit/timer_unit.sv:57.39" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "rtl/timer_unit/timer_unit.sv:56.39" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "rtl/timer_unit/timer_unit.sv:58.39" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "rtl/timer_unit/timer_unit.sv:55.39" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "rtl/timer_unit/timer_unit.sv:45.39" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/timer_unit/timer_unit.sv:47.39" */
  input req_i;
  wire req_i;
  /* src = "rtl/timer_unit/timer_unit.sv:43.39" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit.sv:70.25" */
  /* unused_bits = "6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_addr;
  /* src = "rtl/timer_unit/timer_unit.sv:80.25" */
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_cfg_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:80.35" */
  wire [31:0] s_cfg_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:79.25" */
  /* unused_bits = "2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] s_cfg_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:79.35" */
  wire [31:0] s_cfg_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:86.37" */
  wire s_enable_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.19" */
  wire s_enable_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:86.83" */
  wire s_enable_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:86.55" */
  wire s_enable_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:75.19" */
  wire s_ref_clk0;
  /* src = "rtl/timer_unit/timer_unit.sv:75.31" */
  wire s_ref_clk1;
  /* src = "rtl/timer_unit/timer_unit.sv:75.43" */
  wire s_ref_clk2;
  /* src = "rtl/timer_unit/timer_unit.sv:75.55" */
  wire s_ref_clk3;
  /* src = "rtl/timer_unit/timer_unit.sv:75.67" */
  wire s_ref_clk_edge;
  /* src = "rtl/timer_unit/timer_unit.sv:75.83" */
  wire s_ref_clk_edge_del;
  /* src = "rtl/timer_unit/timer_unit.sv:69.19" */
  wire s_req;
  /* src = "rtl/timer_unit/timer_unit.sv:87.36" */
  wire s_reset_count_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.19" */
  wire s_reset_count_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:87.80" */
  wire s_reset_count_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:87.53" */
  wire s_reset_count_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.70" */
  wire s_reset_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.53" */
  wire s_reset_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:73.36" */
  wire s_start_timer_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:73.19" */
  wire s_start_timer_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.39" */
  wire s_target_reached_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.19" */
  wire s_target_reached_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:88.90" */
  wire s_target_reached_prescaler_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:88.59" */
  wire s_target_reached_prescaler_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:84.41" */
  wire [31:0] s_timer_cmp_hi_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:83.41" */
  wire [31:0] s_timer_cmp_lo_reg;
  /* src = "rtl/timer_unit/timer_unit.sv:82.25" */
  wire [31:0] s_timer_val_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:81.25" */
  wire [31:0] s_timer_val_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:69.25" */
  wire s_wen;
  /* src = "rtl/timer_unit/timer_unit.sv:72.39" */
  wire s_write_counter_hi;
  /* src = "rtl/timer_unit/timer_unit.sv:72.19" */
  wire s_write_counter_lo;
  /* src = "rtl/timer_unit/timer_unit.sv:50.39" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "rtl/timer_unit/timer_unit.sv:49.39" */
  input wen_i;
  wire wen_i;
  /* src = "rtl/timer_unit/timer_unit.sv:346.7-346.66" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$103  (
    .A(s_cfg_hi_reg[1]),
    .B(s_reset_timer_hi),
    .Y(\$103y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:355.10-355.83" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$107  (
    .A(s_cfg_hi_reg[4]),
    .B(s_target_reached_hi),
    .Y(\$107y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:362.10-362.83" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$111  (
    .A(s_cfg_lo_reg[4]),
    .B(s_target_reached_lo),
    .Y(\$111y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:362.10-362.119" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$113  (
    .A(\$111y ),
    .B(s_target_reached_hi),
    .Y(\$113y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:369.7-369.87" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$119  (
    .A(s_cfg_lo_reg[6]),
    .B(s_target_reached_prescaler_lo),
    .Y(\$119y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:374.7-374.87" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$122  (
    .A(s_cfg_hi_reg[6]),
    .B(s_target_reached_prescaler_hi),
    .Y(\$122y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.12-392.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$126  (
    .A(s_cfg_lo_reg[6]),
    .Y(\$126y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.55-392.92" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$127  (
    .A(s_cfg_lo_reg[7]),
    .Y(\$127y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.12-392.92" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$128  (
    .A(\$126y ),
    .B(\$127y ),
    .Y(\$128y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:397.14-397.94" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$131  (
    .A(\$126y ),
    .B(s_cfg_lo_reg[7]),
    .Y(\$131y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:402.9-402.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$134  (
    .A(s_cfg_lo_reg[6]),
    .B(s_cfg_lo_reg[7]),
    .Y(\$134y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:180.22-180.28" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(wen_i),
    .Y(\$14y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.12-417.51" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$144  (
    .A(s_cfg_hi_reg[6]),
    .Y(\$144y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.55-417.92" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$145  (
    .A(s_cfg_hi_reg[7]),
    .Y(\$145y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.12-417.92" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$146  (
    .A(\$144y ),
    .B(\$145y ),
    .Y(\$146y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:422.14-422.94" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$149  (
    .A(\$144y ),
    .B(s_cfg_hi_reg[7]),
    .Y(\$149y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:180.13-180.28" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$15  (
    .A(req_i),
    .B(\$14y ),
    .Y(\$15y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:427.9-427.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$152  (
    .A(s_cfg_hi_reg[6]),
    .B(s_cfg_hi_reg[7]),
    .Y(\$152y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:440.7-440.86" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$163  (
    .A(s_cfg_lo_reg[0]),
    .B(s_cfg_lo_reg[31]),
    .Y(\$163y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:445.28-445.58" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$167  (
    .A(s_timer_val_lo),
    .B(32'd4294967295),
    .Y(\$167y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:450.26-450.82" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$172  (
    .A(\$auto$rtlil.cc:3092:Mux$15063 ),
    .B(\$167y ),
    .Y(\$auto$opt_share.cc:222:merge_operators$15061 )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:456.30-456.81" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$176  (
    .A(s_target_reached_prescaler_lo),
    .B(s_ref_clk_edge_del),
    .Y(\$176y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:476.18-476.62" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$196  (
    .A(s_target_reached_hi),
    .B(s_cfg_hi_reg[2]),
    .Y(\$196y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:480.18-480.59" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$197  (
    .A(s_target_reached_lo),
    .B(s_target_reached_hi),
    .Y(\$197y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:480.18-480.84" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$198  (
    .A(\$auto$rtlil.cc:3092:Mux$13793 ),
    .B(s_cfg_lo_reg[2]),
    .Y(irq_lo_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:506.57-506.75" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$205  (
    .A(s_ref_clk2),
    .Y(\$205y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:506.30-506.77" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$206  (
    .A(s_ref_clk1),
    .B(\$205y ),
    .Y(s_ref_clk_edge)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:507.61-507.79" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$209  (
    .A(s_ref_clk3),
    .Y(\$209y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:507.34-507.81" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$210  (
    .A(s_ref_clk2),
    .B(\$209y ),
    .Y(s_ref_clk_edge_del)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:577.20-577.73" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$212  (
    .A(s_cfg_hi_reg[0]),
    .B(s_cfg_lo_reg[0]),
    .Y(busy_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:219.8-219.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(event_lo_i),
    .B(s_cfg_lo[3]),
    .Y(\$38y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:219.7-219.82" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$38y ),
    .B(s_start_timer_lo),
    .Y(\$40y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:225.10-225.80" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(s_cfg_lo[5]),
    .B(s_target_reached_lo),
    .Y(\$44y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:230.11-230.116" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$44y ),
    .B(s_target_reached_hi),
    .Y(\$50y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:236.8-236.57" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$56  (
    .A(event_hi_i),
    .B(s_cfg_hi[3]),
    .Y(\$56y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:236.7-236.82" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(\$56y ),
    .B(s_start_timer_hi),
    .Y(\$58y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:240.14-240.48" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(s_cfg_hi_reg[31]),
    .Y(\$59y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:240.12-240.89" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$61  (
    .A(\$59y ),
    .B(s_cfg_hi[5]),
    .Y(\$61y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:240.12-240.124" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(\$61y ),
    .B(s_target_reached_hi),
    .Y(\$63y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:282.13-282.27" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$80  (
    .A(CS[0]),
    .B(s_wen),
    .Y(\$80y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:323.7-323.66" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$86  (
    .A(s_cfg_lo_reg[1]),
    .B(s_reset_timer_lo),
    .Y(\$86y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14902  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14903 ),
    .Q(s_timer_cmp_lo_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$14905  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wdata_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14906 ),
    .Q(s_timer_cmp_hi_reg)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(28'h0000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd28)
  ) \$auto$ff.cc:266:slice$14908  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ wdata_i[31:6], wdata_i[4], wdata_i[2] }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14909 ),
    .Q({ s_cfg_lo_reg[31:6], s_cfg_lo_reg[4], s_cfg_lo_reg[2] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14911  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_lo[1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14916 ),
    .Q(s_cfg_lo_reg[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14918  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ s_cfg_lo[5], s_cfg_lo[3], s_cfg_lo[0] }),
    .Q({ s_cfg_lo_reg[5], s_cfg_lo_reg[3], s_cfg_lo_reg[0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(28'h0000000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd28)
  ) \$auto$ff.cc:266:slice$14919  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ wdata_i[31:6], wdata_i[4], wdata_i[2] }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14920 ),
    .Q({ s_cfg_hi_reg[31:6], s_cfg_hi_reg[4], s_cfg_hi_reg[2] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14922  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_cfg_hi[1]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14927 ),
    .Q(s_cfg_hi_reg[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:259.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$14929  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ s_cfg_hi[5], s_cfg_hi[3], s_cfg_hi[0] }),
    .Q({ s_cfg_hi_reg[5], s_cfg_hi_reg[3], s_cfg_hi_reg[0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:98.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14930  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_i),
    .Q(CS[0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14913  (
    .A({ s_reset_count_lo, \$15y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14912 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14915  (
    .A({ \$procmux$12057_CMP , s_reset_count_lo, \$15y  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14914 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14924  (
    .A({ s_reset_count_hi, \$15y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14923 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14926  (
    .A({ \$procmux$12044_CMP , s_reset_count_hi, \$15y  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14925 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14904  (
    .A({ \$procmux$12032_CMP , \$15y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14903 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14907  (
    .A({ \$procmux$12023_CMP , \$15y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14906 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14910  (
    .A({ \$procmux$12057_CMP , \$15y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14909 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14917  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14914 , \$auto$opt_dff.cc:194:make_patterns_logic$14912  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14916 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14921  (
    .A({ \$procmux$12044_CMP , \$15y  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14920 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14928  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14925 , \$auto$opt_dff.cc:194:make_patterns_logic$14923  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14927 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$13792  (
    .A(s_target_reached_lo),
    .B(\$197y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$auto$rtlil.cc:3092:Mux$13793 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$13795  (
    .A(s_target_reached_prescaler_lo),
    .B(\$176y ),
    .S(\$134y ),
    .Y(\$auto$rtlil.cc:3092:Mux$13796 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$15062  (
    .A(\$auto$rtlil.cc:3092:Mux$13796 ),
    .B(s_ref_clk_edge_del),
    .S(\$131y ),
    .Y(\$auto$rtlil.cc:3092:Mux$15063 )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_addr  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i),
    .Q(s_addr)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk0  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ref_clk_i),
    .Q(s_ref_clk0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk0),
    .Q(s_ref_clk1)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk2  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk1),
    .Q(s_ref_clk2)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:488.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_ref_clk3  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_ref_clk2),
    .Q(s_ref_clk3)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:142.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_wen  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wen_i),
    .Q(s_wen)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd32)
  ) \$procmux$11947  (
    .A(32'd0),
    .B({ s_cfg_lo_reg, s_cfg_hi_reg, s_timer_val_lo, s_timer_val_hi, s_timer_cmp_lo_reg, s_timer_cmp_hi_reg }),
    .S({ \$procmux$11953_CMP , \$procmux$11952_CMP , \$procmux$11951_CMP , \$procmux$11950_CMP , \$procmux$11949_CMP , \$procmux$11948_CMP  }),
    .Y(\$procmux$11947_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:303.18-303.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$11948_CMP0  (
    .A(s_addr[5:0]),
    .B(5'h14),
    .Y(\$procmux$11948_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:300.18-300.49|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$11949_CMP0  (
    .A(s_addr[5:0]),
    .B(5'h10),
    .Y(\$procmux$11949_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:297.18-297.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11950_CMP0  (
    .A(s_addr[5:0]),
    .B(4'hc),
    .Y(\$procmux$11950_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:294.18-294.45|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11951_CMP0  (
    .A(s_addr[5:0]),
    .B(4'h8),
    .Y(\$procmux$11951_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:291.18-291.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11952_CMP0  (
    .A(s_addr[5:0]),
    .B(3'h4),
    .Y(\$procmux$11952_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:288.18-288.43|rtl/timer_unit/timer_unit.sv:285.14-305.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$11953_CMP0  (
    .A(s_addr[5:0]),
    .Y(\$procmux$11953_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:285.14-305.21|rtl/timer_unit/timer_unit.sv:282.9-307.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11957  (
    .A(32'd0),
    .B(\$procmux$11947_Y ),
    .S(\$80y ),
    .Y(r_rdata_o)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:474.4-477.7|rtl/timer_unit/timer_unit.sv:473.2-481.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11963  (
    .A(\$196y ),
    .B(1'h0),
    .S(s_cfg_lo_reg[31]),
    .Y(irq_hi_o)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:254.4-254.32|rtl/timer_unit/timer_unit.sv:253.2-254.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11966  (
    .A(\$procmux$12110_Y [1]),
    .B(1'h0),
    .S(s_reset_count_hi),
    .Y(s_cfg_hi[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:250.4-250.32|rtl/timer_unit/timer_unit.sv:249.2-250.32" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11969  (
    .A(\$procmux$12113_Y [1]),
    .B(1'h0),
    .S(s_reset_count_lo),
    .Y(s_cfg_lo[1])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:244.11-244.37|rtl/timer_unit/timer_unit.sv:243.7-244.37" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11971  (
    .A(\$procmux$12110_Y [0]),
    .B(1'h0),
    .S(\$50y ),
    .Y(\$procmux$11971_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:241.9-241.35|rtl/timer_unit/timer_unit.sv:240.7-245.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11981  (
    .A(\$procmux$11971_Y ),
    .B(1'h0),
    .S(\$63y ),
    .Y(\$procmux$11981_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:237.4-237.30|rtl/timer_unit/timer_unit.sv:236.2-246.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11988  (
    .A(\$procmux$11981_Y ),
    .B(\$58y ),
    .Y(s_cfg_hi[0])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:231.7-231.33|rtl/timer_unit/timer_unit.sv:230.6-231.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11990  (
    .A(\$procmux$12113_Y [0]),
    .B(1'h0),
    .S(\$50y ),
    .Y(\$procmux$11990_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:225.5-226.33|rtl/timer_unit/timer_unit.sv:223.7-232.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12001  (
    .A(\$procmux$12007_Y ),
    .B(\$procmux$11990_Y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$12001_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:226.7-226.33|rtl/timer_unit/timer_unit.sv:225.5-226.33" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12007  (
    .A(\$procmux$12113_Y [0]),
    .B(1'h0),
    .S(\$44y ),
    .Y(\$procmux$12007_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:220.4-220.30|rtl/timer_unit/timer_unit.sv:219.2-233.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12016  (
    .A(\$procmux$12001_Y ),
    .B(\$40y ),
    .Y(s_cfg_lo[0])
  );
  /* src = "rtl/timer_unit/timer_unit.sv:201.18-201.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$12023_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h14),
    .Y(\$procmux$12023_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:198.18-198.47|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$12032_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h10),
    .Y(\$procmux$12032_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12043  (
    .A({ s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] }),
    .B(wdata_i),
    .S(\$procmux$12044_CMP ),
    .Y(\$procmux$12043_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:189.4-189.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12044_CMP0  (
    .A(addr_i[5:0]),
    .B(3'h4),
    .Y(\$procmux$12044_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12056  (
    .A({ s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] }),
    .B(wdata_i),
    .S(\$procmux$12057_CMP ),
    .Y(\$procmux$12056_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:186.4-186.33|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$12057_CMP0  (
    .A(addr_i[5:0]),
    .Y(\$procmux$12057_CMP )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:213.4-213.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$12061_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h24),
    .Y(\$procmux$12060_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:210.4-210.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$12066_CMP0  (
    .A(addr_i[5:0]),
    .B(6'h20),
    .Y(\$procmux$12065_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:207.4-207.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$12072_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h1c),
    .Y(\$procmux$12071_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:204.4-204.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$12079_CMP0  (
    .A(addr_i[5:0]),
    .B(5'h18),
    .Y(\$procmux$12078_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:195.4-195.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12089_CMP0  (
    .A(addr_i[5:0]),
    .B(4'hc),
    .Y(\$procmux$12088_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:192.4-192.30|rtl/timer_unit/timer_unit.sv:183.14-215.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12100_CMP0  (
    .A(addr_i[5:0]),
    .B(4'h8),
    .Y(\$procmux$12099_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12110  (
    .A({ s_cfg_hi_reg[31:2], 1'hx, s_cfg_hi_reg[0] }),
    .B(\$procmux$12043_Y ),
    .S(\$15y ),
    .Y({ s_cfg_hi[31:2], \$procmux$12110_Y [1:0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$12113  (
    .A({ s_cfg_lo_reg[31:2], 1'hx, s_cfg_lo_reg[0] }),
    .B(\$procmux$12056_Y ),
    .S(\$15y ),
    .Y({ s_cfg_lo[31:2], \$procmux$12113_Y [1:0] })
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12116  (
    .A(\$15y ),
    .B(\$procmux$12060_Y ),
    .Y(s_reset_timer_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12119  (
    .A(\$15y ),
    .B(\$procmux$12065_Y ),
    .Y(s_reset_timer_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12122  (
    .A(\$15y ),
    .B(\$procmux$12071_Y ),
    .Y(s_start_timer_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12125  (
    .A(\$15y ),
    .B(\$procmux$12078_Y ),
    .Y(s_start_timer_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12128  (
    .A(\$15y ),
    .B(\$procmux$12088_Y ),
    .Y(s_write_counter_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:183.14-215.21|rtl/timer_unit/timer_unit.sv:180.9-216.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12131  (
    .A(\$15y ),
    .B(\$procmux$12099_Y ),
    .Y(s_write_counter_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:453.3-457.6|rtl/timer_unit/timer_unit.sv:452.14-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12134  (
    .A(1'h1),
    .B(s_ref_clk_edge),
    .S(\$134y ),
    .Y(\$procmux$12134_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12176  (
    .A(s_target_reached_prescaler_lo),
    .B(s_ref_clk_edge),
    .S(\$131y ),
    .Y(\$procmux$12176_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:448.3-451.6|rtl/timer_unit/timer_unit.sv:447.11-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12185  (
    .A(\$procmux$12134_Y ),
    .B(\$procmux$12333_Y ),
    .S(\$131y ),
    .Y(\$procmux$12185_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12194  (
    .A(\$auto$opt_share.cc:222:merge_operators$15061 ),
    .B(\$167y ),
    .S(\$128y ),
    .Y(\$procmux$12194_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12200  (
    .A(\$procmux$12176_Y ),
    .B(\$128y ),
    .Y(\$procmux$12200_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:443.6-446.9|rtl/timer_unit/timer_unit.sv:442.6-463.6" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12206  (
    .A(\$procmux$12185_Y ),
    .B(\$procmux$12333_Y ),
    .S(\$128y ),
    .Y(\$procmux$12206_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12212  (
    .A(\$procmux$12333_Y ),
    .B(\$procmux$12206_Y ),
    .S(\$163y ),
    .Y(s_enable_count_prescaler_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12216  (
    .A(\$procmux$12279_Y ),
    .B(\$procmux$12194_Y ),
    .S(\$163y ),
    .Y(s_enable_count_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:442.6-463.6|rtl/timer_unit/timer_unit.sv:440.2-464.7" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12220  (
    .A(\$procmux$12336_Y ),
    .B(\$procmux$12200_Y ),
    .S(\$163y ),
    .Y(s_enable_count_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:428.6-431.9|rtl/timer_unit/timer_unit.sv:427.4-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12223  (
    .A(1'h1),
    .B(s_ref_clk_edge),
    .S(\$152y ),
    .Y(\$procmux$12223_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12245  (
    .A(s_target_reached_prescaler_hi),
    .B(s_ref_clk_edge),
    .S(\$149y ),
    .Y(\$procmux$12245_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:424.7-424.42|rtl/timer_unit/timer_unit.sv:422.9-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12254  (
    .A(\$procmux$12223_Y ),
    .B(1'h0),
    .S(\$149y ),
    .Y(\$procmux$12254_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12263  (
    .A(\$procmux$12245_Y ),
    .B(\$146y ),
    .Y(\$procmux$12263_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:419.5-419.30|rtl/timer_unit/timer_unit.sv:417.7-436.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12269  (
    .A(\$procmux$12254_Y ),
    .B(1'h0),
    .S(\$146y ),
    .Y(\$procmux$12269_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12275  (
    .A(s_cfg_hi_reg[0]),
    .B(\$procmux$12269_Y ),
    .Y(s_enable_count_prescaler_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:417.7-436.9|rtl/timer_unit/timer_unit.sv:415.2-437.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12279  (
    .A(s_cfg_hi_reg[0]),
    .B(\$procmux$12263_Y ),
    .Y(\$procmux$12279_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:399.7-399.42|rtl/timer_unit/timer_unit.sv:397.9-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12313  (
    .A(\$procmux$12134_Y ),
    .B(1'h0),
    .S(\$131y ),
    .Y(\$procmux$12313_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:394.5-394.30|rtl/timer_unit/timer_unit.sv:392.7-411.9" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12328  (
    .A(\$procmux$12313_Y ),
    .B(1'h0),
    .S(\$128y ),
    .Y(\$procmux$12328_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12333  (
    .A(s_cfg_lo_reg[0]),
    .B(\$procmux$12328_Y ),
    .Y(\$procmux$12333_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:392.7-411.9|rtl/timer_unit/timer_unit.sv:390.2-412.7" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12336  (
    .A(s_cfg_lo_reg[0]),
    .B(\$procmux$12200_Y ),
    .Y(\$procmux$12336_Y )
  );
  /* src = "rtl/timer_unit/timer_unit.sv:376.7-376.41|rtl/timer_unit/timer_unit.sv:374.2-377.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12362  (
    .A(\$103y ),
    .B(\$122y ),
    .Y(s_reset_count_prescaler_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:371.7-371.41|rtl/timer_unit/timer_unit.sv:369.2-372.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12365  (
    .A(\$86y ),
    .B(\$119y ),
    .Y(s_reset_count_prescaler_lo)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:355.5-358.10|rtl/timer_unit/timer_unit.sv:353.7-366.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12378  (
    .A(\$107y ),
    .B(\$113y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$12378_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:347.4-350.7|rtl/timer_unit/timer_unit.sv:346.2-367.14" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12393  (
    .A(\$procmux$12378_Y ),
    .B(\$103y ),
    .Y(s_reset_count_hi)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:332.5-335.10|rtl/timer_unit/timer_unit.sv:330.7-343.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12410  (
    .A(\$111y ),
    .B(\$113y ),
    .S(s_cfg_lo_reg[31]),
    .Y(\$procmux$12410_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit.sv:324.4-327.7|rtl/timer_unit/timer_unit.sv:323.2-344.7" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12425  (
    .A(\$procmux$12410_Y ),
    .B(\$86y ),
    .Y(s_reset_count_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:561.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i  counter_hi_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_hi_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_hi),
    .enable_count_i(s_enable_count_hi),
    .reset_count_i(s_reset_count_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_hi),
    .write_counter_i(s_write_counter_hi)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:545.23" */
  \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i  counter_lo_i (
    .clk_i(clk_i),
    .compare_value_i(s_timer_cmp_lo_reg),
    .counter_value_i(wdata_i),
    .counter_value_o(s_timer_val_lo),
    .enable_count_i(s_enable_count_lo),
    .reset_count_i(s_reset_count_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_lo),
    .write_counter_i(s_write_counter_lo)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:529.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i  prescaler_hi_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_hi_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_hi),
    .reset_count_i(s_reset_count_prescaler_hi),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_hi),
    .write_counter_i(1'h0)
  );
  /* src = "rtl/timer_unit/timer_unit.sv:513.29" */
  \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i  prescaler_lo_i (
    .clk_i(clk_i),
    .compare_value_i({ 24'h000000, s_cfg_lo_reg[15:8] }),
    .counter_value_i(32'd0),
    .enable_count_i(s_enable_count_prescaler_lo),
    .reset_count_i(s_reset_count_prescaler_lo),
    .rst_ni(rst_ni),
    .target_reached_o(s_target_reached_prescaler_lo),
    .write_counter_i(1'h0)
  );
  assign \$procmux$12110_Y [31:2] = s_cfg_hi[31:2];
  assign \$procmux$12113_Y [31:2] = s_cfg_lo[31:2];
  assign CS[1] = 1'h0;
  assign NS = req_i;
  assign gnt_o = 1'h1;
  assign r_opc_o = 1'h0;
  assign r_valid_o = CS[0];
  assign s_req = CS[0];
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$14y ;
  wire [31:0] \$4y ;
  wire [31:0] \$procmux$10898_Y ;
  wire [31:0] \$procmux$10908_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:65.15-65.41" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$14y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.15-46.30" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$4  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$4y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$14y ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10898  (
    .A(s_count_reg),
    .B(\$4y ),
    .S(enable_count_i),
    .Y(\$procmux$10898_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10908  (
    .A(\$procmux$10898_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$10908_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10915  (
    .A(\$procmux$10908_Y ),
    .B(32'd0),
    .S(reset_count_i),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter.sv:13.8" */
module \timer_unit_counter$croc_chip.i_croc_soc.i_croc.i_timer.counter_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$14y ;
  wire [31:0] \$4y ;
  wire [31:0] \$procmux$10920_Y ;
  wire [31:0] \$procmux$10930_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  /* src = "rtl/timer_unit/timer_unit_counter.sv:65.15-65.41" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$14  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$14y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.15-46.30" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$4  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$4y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$14y ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter.sv:46.5-46.31|rtl/timer_unit/timer_unit_counter.sv:45.3-46.31" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10920  (
    .A(s_count_reg),
    .B(\$4y ),
    .S(enable_count_i),
    .Y(\$procmux$10920_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:42.7-42.33|rtl/timer_unit/timer_unit_counter.sv:41.5-47.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10930  (
    .A(\$procmux$10920_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$10930_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter.sv:38.10-38.22|rtl/timer_unit/timer_unit_counter.sv:37.7-48.5" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10937  (
    .A(\$procmux$10930_Y ),
    .B(32'd0),
    .S(reset_count_i),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_hi_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$16y ;
  wire \$3y ;
  wire [31:0] \$6y ;
  wire [31:0] \$procmux$10942_Y ;
  wire [31:0] \$procmux$10952_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.15-65.41" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$16y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.11-37.52" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(reset_count_i),
    .B(target_reached_o),
    .Y(\$3y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.26-46.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$6  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$6y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$16y ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10942  (
    .A(s_count_reg),
    .B(\$6y ),
    .S(enable_count_i),
    .Y(\$procmux$10942_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10952  (
    .A(\$procmux$10942_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$10952_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10959  (
    .A(\$procmux$10952_Y ),
    .B(32'd0),
    .S(\$3y ),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/timer_unit/timer_unit_counter_presc.sv:13.8" */
module \timer_unit_counter_presc$croc_chip.i_croc_soc.i_croc.i_timer.prescaler_lo_i (clk_i, rst_ni, write_counter_i, counter_value_i, reset_count_i, enable_count_i, compare_value_i, target_reached_o, counter_value_o);
  wire \$16y ;
  wire \$3y ;
  wire [31:0] \$6y ;
  wire [31:0] \$procmux$10964_Y ;
  wire [31:0] \$procmux$10974_Y ;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:15.24" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:23.24" */
  input [31:0] compare_value_i;
  wire [31:0] compare_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:19.24" */
  input [31:0] counter_value_i;
  wire [31:0] counter_value_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:25.24" */
  output [31:0] counter_value_o;
  wire [31:0] counter_value_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:22.24" */
  input enable_count_i;
  wire enable_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:21.24" */
  input reset_count_i;
  wire reset_count_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:16.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.24" */
  wire [31:0] s_count;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:29.33" */
  wire [31:0] s_count_reg;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:26.24" */
  output target_reached_o;
  wire target_reached_o;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:18.24" */
  input write_counter_i;
  wire write_counter_i;
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:65.15-65.41" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$16  (
    .A(s_count),
    .B(compare_value_i),
    .Y(\$16y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:37.11-37.52" */
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(reset_count_i),
    .B(target_reached_o),
    .Y(\$3y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.26-46.41" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd32)
  ) \$6  (
    .A(s_count_reg),
    .B(1'h1),
    .Y(\$6y )
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:51.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$s_count_reg  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(s_count),
    .Q(s_count_reg)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:60.4" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$target_reached_o  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$16y ),
    .Q(target_reached_o)
  );
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:46.16-46.42|rtl/timer_unit/timer_unit_counter_presc.sv:45.14-46.42" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10964  (
    .A(s_count_reg),
    .B(\$6y ),
    .S(enable_count_i),
    .Y(\$procmux$10964_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:42.12-42.38|rtl/timer_unit/timer_unit_counter_presc.sv:41.9-47.12" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10974  (
    .A(\$procmux$10964_Y ),
    .B(counter_value_i),
    .S(write_counter_i),
    .Y(\$procmux$10974_Y )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/timer_unit/timer_unit_counter_presc.sv:38.8-38.20|rtl/timer_unit/timer_unit_counter_presc.sv:37.6-48.9" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$10981  (
    .A(\$procmux$10974_Y ),
    .B(32'd0),
    .S(\$3y ),
    .Y(s_count)
  );
  assign counter_value_o = s_count_reg;
endmodule

/* src = "rtl/apb_uart/uart_baudgen.sv:35.8" */
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire [15:0] \$4y ;
  wire \$7y ;
  /* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$8y ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14932 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  wire [15:0] \$iCounter$6 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  wire [15:0] \$iCounter$9 ;
  /* src = "rtl/apb_uart/uart_baudgen.sv:41.16" */
  output BAUDTICK;
  wire BAUDTICK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:38.14" */
  input CE;
  wire CE;
  /* src = "rtl/apb_uart/uart_baudgen.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_baudgen.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_baudgen.sv:40.21" */
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  /* src = "rtl/apb_uart/uart_baudgen.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_baudgen.sv:45.12" */
  wire [15:0] iCounter;
  /* src = "rtl/apb_uart/uart_baudgen.sv:64.19-64.31" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$4  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:67.9-67.23" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(iCounter),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:70.13-70.35" */
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$8  (
    .A(DIVIDER),
    .B(1'h1),
    .Y(\$8y [15:0])
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(16'h0000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$auto$ff.cc:266:slice$14931  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iCounter$9 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14932 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14933  (
    .A({ CLEAR, CE, \$7y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14932 )
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$BAUDTICK  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$7y ),
    .Q(BAUDTICK)
  );
  /* src = "rtl/apb_uart/uart_baudgen.sv:68.11-72.18|rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$5754  (
    .A(\$iCounter$6 ),
    .B(\$8y [15:0]),
    .S(\$7y ),
    .Y(\$iCounter$9 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_baudgen.sv:60.1-60.131|rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$5763  (
    .A(\$4y ),
    .B(16'h0000),
    .S(CLEAR),
    .Y(\$iCounter$6 )
  );
endmodule

/* src = "rtl/apb_uart/uart_interrupt.sv:35.8" */
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$0y ;
  wire \$10y ;
  wire \$11y ;
  wire \$1y ;
  wire \$2y ;
  wire \$7y ;
  wire \$8y ;
  wire \$9y ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  wire [3:0] \$auto$wreduce.cc:514:run$13639 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  wire [3:0] \$auto$wreduce.cc:514:run$13640 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  wire [3:0] \$auto$wreduce.cc:514:run$13641 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  wire [3:0] \$iIIR$23 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  wire [3:0] \$iIIR$24 ;
  /* src = "rtl/apb_uart/uart_interrupt.sv:43.14" */
  input AFE;
  wire AFE;
  /* src = "rtl/apb_uart/uart_interrupt.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_interrupt.sv:42.14" */
  input CTI;
  wire CTI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:38.20" */
  input [3:0] IER;
  wire [3:0] IER;
  /* src = "rtl/apb_uart/uart_interrupt.sv:45.22" */
  output [3:0] IIR;
  wire [3:0] IIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:46.16" */
  output INT;
  wire INT;
  /* src = "rtl/apb_uart/uart_interrupt.sv:39.20" */
  input [4:0] LSR;
  wire [4:0] LSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:44.20" */
  input [3:0] MSR;
  wire [3:0] MSR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:41.14" */
  input RDA;
  wire RDA;
  /* src = "rtl/apb_uart/uart_interrupt.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_interrupt.sv:40.14" */
  input THI;
  wire THI;
  /* src = "rtl/apb_uart/uart_interrupt.sv:52.5" */
  wire iCTIInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:55.11" */
  wire [3:0] iIIR;
  /* src = "rtl/apb_uart/uart_interrupt.sv:54.5" */
  wire iMSRInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:51.5" */
  wire iRDAInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:50.5" */
  wire iRLSInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:53.5" */
  wire iTHRInterrupt;
  /* src = "rtl/apb_uart/uart_interrupt.sv:56.45-56.60" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$0  (
    .A(LSR[1]),
    .B(LSR[2]),
    .Y(\$0y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:56.44-56.70" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$1  (
    .A(\$0y ),
    .B(LSR[3]),
    .Y(\$1y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.44-60.82" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$9y ),
    .B(MSR[2]),
    .Y(\$10y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.43-60.92" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(\$10y ),
    .B(MSR[3]),
    .Y(\$11y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.32-60.93" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(IER[3]),
    .B(\$11y ),
    .Y(iMSRInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:56.43-56.80" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(\$1y ),
    .B(LSR[4]),
    .Y(\$2y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:96.23-96.32" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$25  (
    .A(iIIR[0]),
    .Y(INT)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:56.32-56.81" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$3  (
    .A(IER[2]),
    .B(\$2y ),
    .Y(iRLSInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:57.32-57.45" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(IER[0]),
    .B(RDA),
    .Y(iRDAInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:58.32-58.45" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(IER[0]),
    .B(CTI),
    .Y(iCTIInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:59.32-59.45" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(IER[1]),
    .B(THI),
    .Y(iTHRInterrupt)
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.57-60.62" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(AFE),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.46-60.62" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(MSR[0]),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:60.45-60.72" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8y ),
    .B(MSR[1]),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/uart_interrupt.sv:62.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$iIIR  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iIIR$24 ),
    .Q(iIIR)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:87.13-87.29|rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5766  (
    .A(iMSRInterrupt),
    .Y(\$auto$wreduce.cc:514:run$13639 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:83.13-83.29|rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5782  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13639 [0] }),
    .B(2'h2),
    .S(iTHRInterrupt),
    .Y(\$auto$wreduce.cc:514:run$13640 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:79.13-79.29|rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5795  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13640 [1:0] }),
    .B(3'h4),
    .S(iRDAInterrupt),
    .Y(\$auto$wreduce.cc:514:run$13641 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:75.13-75.29|rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5805  (
    .A({ 1'h0, \$auto$wreduce.cc:514:run$13641 [2:0] }),
    .B(4'hc),
    .S(iCTIInterrupt),
    .Y(\$iIIR$23 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_interrupt.sv:71.13-71.29|rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5812  (
    .A(\$iIIR$23 ),
    .B(4'h6),
    .S(iRLSInterrupt),
    .Y(\$iIIR$24 )
  );
  assign \$auto$wreduce.cc:514:run$13639 [3:1] = 3'h0;
  assign \$auto$wreduce.cc:514:run$13640 [3:2] = 2'h0;
  assign \$auto$wreduce.cc:514:run$13641 [3] = 1'h0;
  assign IIR = iIIR;
endmodule

/* src = "rtl/apb_uart/uart_receiver.sv:35.8" */
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$10y ;
  wire \$11y ;
  wire \$17y ;
  wire \$18y ;
  wire \$20y ;
  wire [7:0] \$23y ;
  wire [7:0] \$25y ;
  wire [3:0] \$26y ;
  wire \$31y ;
  wire \$32y ;
  wire \$33y ;
  wire \$34y ;
  wire \$35y ;
  wire \$36y ;
  wire \$37y ;
  wire \$38y ;
  wire \$39y ;
  wire \$40y ;
  wire \$41y ;
  wire \$42y ;
  wire \$43y ;
  wire \$44y ;
  wire \$4y ;
  wire \$5y ;
  wire \$63y ;
  wire \$6y ;
  wire \$76y ;
  wire \$78y ;
  wire \$7y ;
  wire \$82y ;
  wire \$85y ;
  wire \$8y ;
  wire \$91y ;
  wire \$94y ;
  wire \$95y ;
  wire \$96y ;
  wire \$9y ;
  wire \$NState$51 ;
  wire [1:0] \$NState$54 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  wire [2:0] \$NState$55 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  wire [2:0] \$NState$58 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  wire [2:0] \$NState$59 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  wire [2:0] \$NState$61 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  wire [2:0] \$NState$66 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  wire \$PE$84 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  wire \$PE$87 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$PE$89 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14935 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [7:0] \$iDOUT$30 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [3:0] \$iDataCount$29 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  wire \$iParityReceived$79 ;
  /* src = "rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$iParityReceived$88 ;
  wire \$procmux$5287_CMP ;
  wire \$procmux$5334_CMP ;
  wire \$procmux$5355_CMP ;
  /* src = "rtl/apb_uart/uart_receiver.sv:48.16" */
  output BI;
  wire BI;
  /* src = "rtl/apb_uart/uart_receiver.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.12" */
  wire [2:0] CState;
  /* src = "rtl/apb_uart/uart_receiver.sv:49.22" */
  output [7:0] DOUT;
  wire [7:0] DOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:43.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_receiver.sv:47.16" */
  output FE;
  wire FE;
  /* src = "rtl/apb_uart/uart_receiver.sv:60.20" */
  wire [2:0] NState;
  /* src = "rtl/apb_uart/uart_receiver.sv:46.16" */
  output PE;
  wire PE;
  /* src = "rtl/apb_uart/uart_receiver.sv:42.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_receiver.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_receiver.sv:39.14" */
  input RXCLEAR;
  wire RXCLEAR;
  /* src = "rtl/apb_uart/uart_receiver.sv:38.14" */
  input RXCLK;
  wire RXCLK;
  /* src = "rtl/apb_uart/uart_receiver.sv:50.16" */
  output RXFINISHED;
  wire RXFINISHED;
  /* src = "rtl/apb_uart/uart_receiver.sv:45.14" */
  input SIN;
  wire SIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:44.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_receiver.sv:41.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_receiver.sv:40.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_receiver.sv:75.5" */
  wire iBI;
  /* src = "rtl/apb_uart/uart_receiver.sv:61.11" */
  /* unused_bits = "0 1 2" */
  wire [3:0] iBaudCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:62.5" */
  wire iBaudCountClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:63.5" */
  wire iBaudStep;
  /* src = "rtl/apb_uart/uart_receiver.sv:64.5" */
  wire iBaudStepD;
  /* src = "rtl/apb_uart/uart_receiver.sv:77.11" */
  wire [7:0] iDOUT;
  /* src = "rtl/apb_uart/uart_receiver.sv:70.11" */
  wire [3:0] iDataCount;
  /* src = "rtl/apb_uart/uart_receiver.sv:72.5" */
  wire iDataCountFinish;
  /* src = "rtl/apb_uart/uart_receiver.sv:71.5" */
  wire iDataCountInit;
  /* src = "rtl/apb_uart/uart_receiver.sv:74.5" */
  wire iFE;
  /* src = "rtl/apb_uart/uart_receiver.sv:66.5" */
  wire iFSIN;
  /* src = "rtl/apb_uart/uart_receiver.sv:67.5" */
  wire iFStopBit;
  /* src = "rtl/apb_uart/uart_receiver.sv:65.5" */
  wire iFilterClear;
  /* src = "rtl/apb_uart/uart_receiver.sv:76.5" */
  wire iNoStopReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:68.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_receiver.sv:69.5" */
  wire iParityReceived;
  /* src = "rtl/apb_uart/uart_receiver.sv:73.5" */
  wire iRXFinished;
  /* src = "rtl/apb_uart/uart_receiver.sv:118.13-118.110" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$10  (
    .A(\$9y ),
    .B(iDOUT[0]),
    .Y(\$10y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.115-118.120" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$11  (
    .A(EPS),
    .Y(\$11y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.12-118.120" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$12  (
    .A(\$10y ),
    .B(\$11y ),
    .Y(iParity)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:140.40-140.65" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$17  (
    .A(iDataCountFinish),
    .Y(\$17y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:140.18-140.65" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(iBaudStep),
    .B(\$17y ),
    .Y(\$18y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:114.31-114.59" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$2  (
    .A(iBaudStepD),
    .B(iBaudCountClear),
    .Y(iFilterClear)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" */
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$23  (
    .A(\$20y ),
    .S(iDataCount[2:0]),
    .Y(\$23y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:142.18-142.44" */
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$25  (
    .A(iDOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$23y ),
    .Y(\$25y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:143.32-143.46" */
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) \$26  (
    .A(iDataCount),
    .B(1'h1),
    .Y(\$26y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.38-148.50" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$31  (
    .A(WLS),
    .Y(\$31y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.54-148.69" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$32  (
    .A(iDataCount),
    .B(3'h5),
    .Y(\$32y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.38-148.69" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$33  (
    .A(\$31y ),
    .B(\$32y ),
    .Y(\$33y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.74-148.86" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$34  (
    .A(WLS),
    .B(1'h1),
    .Y(\$34y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.90-148.105" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$35  (
    .A(iDataCount),
    .B(3'h6),
    .Y(\$35y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.74-148.105" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(\$34y ),
    .B(\$35y ),
    .Y(\$36y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.37-148.106" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$37  (
    .A(\$33y ),
    .B(\$36y ),
    .Y(\$37y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.111-148.123" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$38  (
    .A(WLS),
    .B(2'h2),
    .Y(\$38y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.127-148.142" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$39  (
    .A(iDataCount),
    .B(3'h7),
    .Y(\$39y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.19-118.38" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$4  (
    .A(iDOUT[7]),
    .B(iDOUT[6]),
    .Y(\$4y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.111-148.142" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$40  (
    .A(\$38y ),
    .B(\$39y ),
    .Y(\$40y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.36-148.143" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$41  (
    .A(\$37y ),
    .B(\$40y ),
    .Y(\$41y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.148-148.160" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$42  (
    .A(WLS),
    .B(2'h3),
    .Y(\$42y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.164-148.179" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$43  (
    .A(iDataCount),
    .B(4'h8),
    .Y(\$43y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.148-148.179" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$44  (
    .A(\$42y ),
    .B(\$43y ),
    .Y(\$44y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:148.35-148.180" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$45  (
    .A(\$41y ),
    .B(\$44y ),
    .Y(iDataCountFinish)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.18-118.50" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$5  (
    .A(\$4y ),
    .B(iDOUT[5]),
    .Y(\$5y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.17-118.62" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$5y ),
    .B(iDOUT[4]),
    .Y(\$6y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:230.12-230.30" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$63  (
    .A(iFStopBit),
    .Y(\$63y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.16-118.74" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(\$6y ),
    .B(iDOUT[3]),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:274.8-274.21" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$76  (
    .A(CState),
    .B(2'h3),
    .Y(\$76y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:274.8-274.43" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$78  (
    .A(\$76y ),
    .B(iBaudStep),
    .Y(\$78y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.15-118.86" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$7y ),
    .B(iDOUT[2]),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:284.17-284.38" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$82  (
    .A(EPS),
    .B(iParityReceived),
    .Y(\$82y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:292.16-292.42" */
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$85  (
    .A(iParity),
    .B(iParityReceived),
    .Y(\$85y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:118.14-118.98" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$9  (
    .A(\$8y ),
    .B(iDOUT[1]),
    .Y(\$9y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:308.57-308.71" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$91  (
    .A(CState),
    .B(3'h4),
    .Y(\$91y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:308.34-308.72" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$92  (
    .A(\$63y ),
    .B(\$91y ),
    .Y(iNoStopReceived)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:309.23-309.43" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$94  (
    .A(iDOUT),
    .Y(\$94y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:309.47-309.71" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$95  (
    .A(iParityReceived),
    .Y(\$95y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:309.23-309.71" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$96  (
    .A(\$94y ),
    .B(\$95y ),
    .Y(\$96y )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:309.22-309.100" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$98  (
    .A(\$96y ),
    .B(iNoStopReceived),
    .Y(BI)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$14934  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iDataCount$29 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14935 ),
    .Q(iDataCount)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$14937  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iDOUT$30 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$14935 ),
    .Q(iDOUT)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14936  (
    .A({ iDataCountInit, \$18y  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14935 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2184:replace_const_cells$13749  (
    .A(iDataCount[3]),
    .Y(\$20y )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13404  (
    .A({ \$procmux$5355_CMP , iBaudCountClear }),
    .Y(iDataCountInit)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:150.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$CState  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .Q(CState)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$PE  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$PE$89 ),
    .Q(PE)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBaudStepD  (
    .ARST(RST),
    .CLK(CLK),
    .D(iBaudStep),
    .Q(iBaudStepD)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iParityReceived  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iParityReceived$88 ),
    .Q(iParityReceived)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$5278  (
    .A(\$25y ),
    .B(8'h00),
    .S(iDataCountInit),
    .Y(\$iDOUT$30 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:133.10-137.13|rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$5282  (
    .A(\$26y ),
    .B(4'h0),
    .S(iDataCountInit),
    .Y(\$iDataCount$29 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:251.7-251.23|rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5284  (
    .A(SIN),
    .Y(\$NState$51 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5287_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$5287_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:230.7-239.26|rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5291  (
    .A(2'h2),
    .B({ \$63y , \$63y  }),
    .S(iBaudCount[3]),
    .Y({ \$NState$66 [2], \$NState$66 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:218.7-218.22|rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5322  (
    .A(2'h1),
    .B(2'h2),
    .S(iBaudStep),
    .Y(\$NState$61 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:199.7-206.26|rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5331  (
    .A(3'h2),
    .B({ \$NState$58 [2:1], \$NState$58 [1] }),
    .S(iDataCountFinish),
    .Y(\$NState$59 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:197.3-211.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5334_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$5334_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:201.11-201.25|rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5340  (
    .A(2'h2),
    .B(2'h1),
    .S(PEN),
    .Y(\$NState$58 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:183.7-186.26|rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5352  (
    .A(2'h1),
    .B({ \$NState$54 [1], 1'h0 }),
    .S(iBaudStep),
    .Y(\$NState$55 [1:0])
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:179.5-193.12|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5355_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$5355_CMP )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:185.11-185.26|rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5361  (
    .A(iFSIN),
    .Y(\$NState$54 [1])
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:168.5-176.10|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5375_CMP0  (
    .A(CState),
    .Y(iBaudCountClear)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:228.3-244.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5378  (
    .A(\$91y ),
    .B(iBaudCount[3]),
    .Y(RXFINISHED)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:249.3-252.18|rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$5398  (
    .A(3'h0),
    .B({ 2'h0, \$NState$51 , 1'h0, \$NState$55 [1:0], \$NState$59 , \$NState$61 [2:1], \$NState$61 [1], \$NState$66 [2], 1'h0, \$NState$66 [0], \$NState$51 , 1'h0, \$NState$51  }),
    .S({ iBaudCountClear, \$procmux$5355_CMP , \$procmux$5334_CMP , \$76y , \$91y , \$procmux$5287_CMP  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5412  (
    .A(PEN),
    .B(\$PE$87 ),
    .Y(\$PE$89 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:284.11-287.34|rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5426  (
    .A(\$85y ),
    .B(\$PE$84 ),
    .S(SP),
    .Y(\$PE$87 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:286.15-286.27|rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5432  (
    .A(\$82y ),
    .Y(\$PE$84 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_receiver.sv:280.11-298.20|rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5440  (
    .A(PEN),
    .B(\$iParityReceived$79 ),
    .Y(\$iParityReceived$88 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:276.7-276.32|rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5442  (
    .A(iParityReceived),
    .B(iFSIN),
    .S(\$78y ),
    .Y(\$iParityReceived$79 )
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:78.27" */
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:95.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  /* src = "rtl/apb_uart/uart_receiver.sv:88.44" */
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$NState$54 [0] = 1'h0;
  assign \$NState$55 [2] = 1'h0;
  assign \$NState$58 [0] = \$NState$58 [1];
  assign \$NState$61 [0] = \$NState$61 [1];
  assign \$NState$66 [1] = 1'h0;
  assign DOUT = iDOUT;
  assign FE = iNoStopReceived;
  assign iBI = BI;
  assign iFE = iNoStopReceived;
  assign iRXFinished = RXFINISHED;
endmodule

/* src = "rtl/apb_uart/uart_transmitter.sv:35.8" */
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$18y ;
  wire \$22y ;
  wire \$26y ;
  wire \$36y ;
  wire \$48y ;
  wire \$49y ;
  wire \$50y ;
  wire \$58y ;
  wire \$59y ;
  wire \$60y ;
  wire \$6y ;
  wire \$7y ;
  wire \$8y ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23" */
  wire [3:0] \$NState$20 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  wire [3:0] \$NState$21 ;
  wire [1:0] \$NState$25 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  wire [3:0] \$NState$29 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  wire [3:0] \$NState$42 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$14942 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$14944 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$13453 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  wire \$iSout$34 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  wire \$iSout$37 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  wire \$iSout$38 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  wire \$iTx2$12 ;
  wire \$procmux$5482_CMP ;
  wire \$procmux$5509_CMP ;
  wire \$procmux$5519_CMP ;
  wire \$procmux$5542_CMP ;
  wire \$procmux$5567_CMP ;
  wire \$procmux$5597_CMP ;
  wire \$procmux$5611_CMP ;
  wire \$procmux$5612_CMP ;
  wire \$procmux$5613_CMP ;
  wire \$procmux$5614_CMP ;
  wire \$procmux$5615_CMP ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:46.14" */
  input BC;
  wire BC;
  /* src = "rtl/apb_uart/uart_transmitter.sv:40.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "rtl/apb_uart/uart_transmitter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.12" */
  wire [3:0] CState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:47.20" */
  input [7:0] DIN;
  wire [7:0] DIN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:44.14" */
  input EPS;
  wire EPS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:66.20" */
  wire [3:0] NState;
  /* src = "rtl/apb_uart/uart_transmitter.sv:43.14" */
  input PEN;
  wire PEN;
  /* src = "rtl/apb_uart/uart_transmitter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "rtl/apb_uart/uart_transmitter.sv:49.16" */
  output SOUT;
  wire SOUT;
  /* src = "rtl/apb_uart/uart_transmitter.sv:45.14" */
  input SP;
  wire SP;
  /* src = "rtl/apb_uart/uart_transmitter.sv:42.14" */
  input STB;
  wire STB;
  /* src = "rtl/apb_uart/uart_transmitter.sv:38.14" */
  input TXCLK;
  wire TXCLK;
  /* src = "rtl/apb_uart/uart_transmitter.sv:48.16" */
  output TXFINISHED;
  wire TXFINISHED;
  /* src = "rtl/apb_uart/uart_transmitter.sv:39.14" */
  input TXSTART;
  wire TXSTART;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.15" */
  wire \TX_PAR.iP40 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.21" */
  wire \TX_PAR.iP50 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.27" */
  wire \TX_PAR.iP60 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:283.33" */
  wire \TX_PAR.iP70 ;
  /* src = "rtl/apb_uart/uart_transmitter.sv:41.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "rtl/apb_uart/uart_transmitter.sv:70.5" */
  wire iFinished;
  /* src = "rtl/apb_uart/uart_transmitter.sv:297.9" */
  wire iLast;
  /* src = "rtl/apb_uart/uart_transmitter.sv:69.5" */
  wire iParity;
  /* src = "rtl/apb_uart/uart_transmitter.sv:68.5" */
  wire iSout;
  /* src = "rtl/apb_uart/uart_transmitter.sv:67.5" */
  wire iTx2;
  /* src = "rtl/apb_uart/uart_transmitter.sv:150.18-150.30" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$18  (
    .A(WLS),
    .Y(\$18y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:170.18-170.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$22  (
    .A(WLS),
    .B(1'h1),
    .Y(\$22y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:190.18-190.30" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$26  (
    .A(WLS),
    .B(2'h2),
    .Y(\$26y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:241.33-241.42" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$36  (
    .A(iParity),
    .Y(\$36y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.31" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$48  (
    .A(DIN[4]),
    .B(DIN[3]),
    .Y(\$48y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.40" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$49  (
    .A(\$48y ),
    .B(DIN[2]),
    .Y(\$49y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.49" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$50  (
    .A(\$49y ),
    .B(DIN[1]),
    .Y(\$50y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:284.16-284.58" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$51  (
    .A(\$50y ),
    .B(DIN[0]),
    .Y(\TX_PAR.iP40 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:285.16-285.29" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$52  (
    .A(DIN[5]),
    .B(\TX_PAR.iP40 ),
    .Y(\TX_PAR.iP50 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:286.16-286.29" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$53  (
    .A(DIN[6]),
    .B(\TX_PAR.iP50 ),
    .Y(\TX_PAR.iP60 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:287.16-287.29" */
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$54  (
    .A(DIN[7]),
    .B(\TX_PAR.iP60 ),
    .Y(\TX_PAR.iP70 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:308.18-308.31" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$58  (
    .A(iLast),
    .Y(\$58y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:308.35-308.49" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$59  (
    .A(CState),
    .B(4'hb),
    .Y(\$59y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:89.24-89.56" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$6  (
    .A(\$18y ),
    .B(STB),
    .Y(\$6y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:308.18-308.49" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$60  (
    .A(\$58y ),
    .B(\$59y ),
    .Y(\$60y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:317.23-317.51" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$65  (
    .A(iSout),
    .B(1'h0),
    .S(BC),
    .Y(SOUT)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:89.61-89.76" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$7  (
    .A(CState),
    .B(4'hc),
    .Y(\$7y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:89.23-89.76" */
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$8  (
    .A(\$6y ),
    .B(\$7y ),
    .Y(\$8y )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$14940  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$iTx2$12 ),
    .EN(TXCLK),
    .Q(iTx2)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$14941  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$14944 ),
    .Q(CState)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$14943  (
    .A({ iTx2, \$8y  }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$14942 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$14945  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$14942 , TXCLK }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$14944 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$13452  (
    .A({ \$procmux$5597_CMP , \$7y  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$13453 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFinished  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$60y ),
    .Q(iFinished)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLast  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$59y ),
    .Q(iLast)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:292.20-292.36|rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$5450  (
    .A(\TX_PAR.iP70 ),
    .B({ \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }),
    .S({ \$18y , \$22y , \$26y  }),
    .Y(iParity)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:251.18-251.34|rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5469  (
    .A({ 1'h0, TXSTART }),
    .B(2'h2),
    .S(STB),
    .Y({ \$NState$42 [3], \$NState$42 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:237.23-237.40|rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5476  (
    .A(\$36y ),
    .B(iParity),
    .S(EPS),
    .Y(\$iSout$37 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5482_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$5482_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:224.18-231.23|rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5488  (
    .A(\$iSout$37 ),
    .B(\$iSout$34 ),
    .S(SP),
    .Y(\$iSout$38 )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:226.23-226.38|rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5496  (
    .A(EPS),
    .Y(\$iSout$34 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:208.10-218.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5509_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$5509_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:192.18-199.23|rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5516  (
    .A(2'h1),
    .B({ 1'h1, \$NState$20 [0] }),
    .S(\$26y ),
    .Y(\$NState$29 [1:0])
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:188.10-205.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5519_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$5519_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:194.23-194.37|rtl/apb_uart/uart_transmitter.sv:192.18-199.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5526  (
    .A(PEN),
    .Y(\$NState$20 [0])
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:172.18-179.23|rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$5539  (
    .A(2'h0),
    .B({ 1'h1, \$NState$20 [0] }),
    .S(\$22y ),
    .Y(\$NState$25 )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:168.10-185.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5542_CMP0  (
    .A(CState),
    .B(3'h7),
    .Y(\$procmux$5542_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:152.18-159.23|rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$5564  (
    .A(3'h3),
    .B({ 2'h2, \$NState$20 [0] }),
    .S(\$18y ),
    .Y({ \$NState$21 [3:2], \$NState$21 [0] })
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:148.10-165.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5567_CMP0  (
    .A(CState),
    .B(3'h6),
    .Y(\$procmux$5567_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:110.13-113.18|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$5597_CMP0  (
    .A(CState),
    .Y(\$procmux$5597_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:221.10-245.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd1)
  ) \$procmux$5601  (
    .A(1'h1),
    .B({ 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$iSout$38  }),
    .S({ \$procmux$5615_CMP , \$procmux$5614_CMP , \$procmux$5613_CMP , \$procmux$5612_CMP , \$procmux$5611_CMP , \$procmux$5567_CMP , \$procmux$5542_CMP , \$procmux$5519_CMP , \$procmux$5509_CMP , \$procmux$5482_CMP  }),
    .Y(iSout)
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:142.10-145.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5611_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$5611_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:136.10-139.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$5612_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$5612_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:130.10-133.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5613_CMP0  (
    .A(CState),
    .B(2'h3),
    .Y(\$procmux$5613_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:124.10-127.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$5614_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$5614_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:118.10-121.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$5615_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$5615_CMP )
  );
  /* src = "rtl/apb_uart/uart_transmitter.sv:265.8-268.13|rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd12),
    .WIDTH(32'd4)
  ) \$procmux$5617  (
    .A(4'h0),
    .B({ 20'h23456, \$NState$21 [3:2], 1'h1, \$NState$21 [0], 2'h2, \$NState$25 , 2'h2, \$NState$29 [1:0], 3'h5, \$NState$20 [0], 4'hb, \$NState$42 [3], \$NState$42 [3], 1'h0, \$NState$42 [0], 3'h0, TXSTART }),
    .S({ \$procmux$5615_CMP , \$procmux$5614_CMP , \$procmux$5613_CMP , \$procmux$5612_CMP , \$procmux$5611_CMP , \$procmux$5567_CMP , \$procmux$5542_CMP , \$procmux$5519_CMP , \$procmux$5509_CMP , \$procmux$5482_CMP , \$59y , \$auto$opt_reduce.cc:137:opt_pmux$13453  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/apb_uart/uart_transmitter.sv:83.15-86.18|rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$5656  (
    .A(1'h1),
    .B(\$8y ),
    .S(iTx2),
    .Y(\$iTx2$12 )
  );
  assign \$NState$20 [3:1] = 3'h5;
  assign \$NState$21 [1] = 1'h1;
  assign \$NState$29 [3:2] = 2'h2;
  assign \$NState$42 [2:1] = { \$NState$42 [3], 1'h0 };
  assign TXFINISHED = iFinished;
endmodule

/* src = "rtl/user_domain.sv:8.8" */
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, ref_clk_i, testmode_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  /* src = "rtl/user_domain.sv:46.35" */
  wire [147:0] all_user_sbr_obi_req;
  /* src = "rtl/user_domain.sv:47.35" */
  wire [77:0] all_user_sbr_obi_rsp;
  /* src = "rtl/user_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain.sv:22.38" */
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  /* src = "rtl/user_domain.sv:23.38" */
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  /* src = "rtl/user_domain.sv:12.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "rtl/user_domain.sv:13.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "rtl/user_domain.sv:54.17" */
  wire [73:0] user_error_obi_req;
  /* src = "rtl/user_domain.sv:55.17" */
  wire [38:0] user_error_obi_rsp;
  /* src = "rtl/user_domain.sv:68.51" */
  wire user_idx;
  /* src = "rtl/user_domain.sv:19.24" */
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  /* src = "rtl/user_domain.sv:20.24" */
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  /* src = "rtl/user_domain.sv:50.17" */
  wire [73:0] user_rom_obi_req;
  /* src = "rtl/user_domain.sv:51.17" */
  wire [38:0] user_rom_obi_rsp;
  /* src = "rtl/user_domain.sv:16.24" */
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  /* src = "rtl/user_domain.sv:17.24" */
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  /* src = "rtl/user_domain.sv:76.5" */
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(96'h000000012000000020001000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  /* src = "rtl/user_domain.sv:92.5" */
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i({ user_rom_obi_rsp, user_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  /* src = "rtl/user_domain.sv:128.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[73:0]),
    .obi_rsp_o(user_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "rtl/user_domain.sv:114.5" */
  \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom  i_user_rom (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req[147:74]),
    .obi_rsp_o(user_rom_obi_rsp),
    .rst_ni(rst_ni)
  );
  assign all_user_sbr_obi_rsp = { user_rom_obi_rsp, user_error_obi_rsp };
  assign interrupts_o = 4'h0;
  assign user_error_obi_req = all_user_sbr_obi_req[73:0];
  assign user_mgr_obi_req_o = 72'h000000000000000000;
  assign user_rom_obi_req = all_user_sbr_obi_req[147:74];
endmodule

/* src = "rtl/user_domain/user_rom.sv:9.8" */
module \user_rom$croc_chip.i_croc_soc.i_user.i_user_rom (clk_i, rst_ni, obi_req_i, obi_rsp_o);
  wire [31:0] \$auto$proc_rom.cc:154:do_switch$5 ;
  wire [31:0] \$procmux$11917_Y ;
  /* src = "rtl/user_domain/user_rom.sv:18.16" */
  input clk_i;
  wire clk_i;
  /* src = "rtl/user_domain/user_rom.sv:33.30" */
  wire [2:0] id_d;
  /* src = "rtl/user_domain/user_rom.sv:33.36" */
  wire [2:0] id_q;
  /* src = "rtl/user_domain/user_rom.sv:29.9" */
  wire obi_err;
  /* src = "rtl/user_domain/user_rom.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "rtl/user_domain/user_rom.sv:25.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "rtl/user_domain/user_rom.sv:31.9" */
  wire req_d;
  /* src = "rtl/user_domain/user_rom.sv:31.16" */
  wire req_q;
  /* src = "rtl/user_domain/user_rom.sv:28.32" */
  wire [31:0] rsp_data;
  /* src = "rtl/user_domain/user_rom.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "rtl/user_domain/user_rom.sv:30.9" */
  wire we_d;
  /* src = "rtl/user_domain/user_rom.sv:30.15" */
  wire we_q;
  /* src = "rtl/user_domain/user_rom.sv:32.15" */
  wire [2:0] word_addr_d;
  /* src = "rtl/user_domain/user_rom.sv:32.28" */
  wire [2:0] word_addr_q;
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16" */
  reg [25:0] \$auto$proc_rom.cc:155:do_switch$6  [7:0];
  initial begin
    \$auto$proc_rom.cc:155:do_switch$6 [0] = 26'h24e1754;
    \$auto$proc_rom.cc:155:do_switch$6 [1] = 26'h1356747;
    \$auto$proc_rom.cc:155:do_switch$6 [2] = 26'h2ac9743;
    \$auto$proc_rom.cc:155:do_switch$6 [3] = 26'h13c6948;
    \$auto$proc_rom.cc:155:do_switch$6 [4] = 26'h29c5073;
    \$auto$proc_rom.cc:155:do_switch$6 [5] = 26'h00021c9;
    \$auto$proc_rom.cc:155:do_switch$6 [6] = 26'h0000000;
    \$auto$proc_rom.cc:155:do_switch$6 [7] = 26'h0000000;
  end
  assign { \$auto$proc_rom.cc:154:do_switch$5 [30:24], \$auto$proc_rom.cc:154:do_switch$5 [22], \$auto$proc_rom.cc:154:do_switch$5 [20:18], \$auto$proc_rom.cc:154:do_switch$5 [16], \$auto$proc_rom.cc:154:do_switch$5 [14:8], \$auto$proc_rom.cc:154:do_switch$5 [6:0] } = \$auto$proc_rom.cc:155:do_switch$6 [word_addr_q];
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[0]),
    .Q(req_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[41]),
    .Q(we_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$word_addr_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[46:44]),
    .Q(word_addr_q)
  );
  /* full_case = 32'd1 */
  /* src = "rtl/user_domain/user_rom.sv:66.9-77.16|rtl/user_domain/user_rom.sv:65.7-80.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11917  (
    .A({ 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [30:24], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [22], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [20:18], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [16], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [14:8], 1'h0, \$auto$proc_rom.cc:154:do_switch$5 [6:0] }),
    .B(32'd0),
    .S(we_q),
    .Y(\$procmux$11917_Y )
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11922  (
    .A(req_q),
    .B(we_q),
    .Y(obi_err)
  );
  /* src = "rtl/user_domain/user_rom.sv:65.7-80.10|rtl/user_domain/user_rom.sv:64.5-81.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$11925  (
    .A(32'd0),
    .B(\$procmux$11917_Y ),
    .S(req_q),
    .Y(rsp_data)
  );
  assign { \$auto$proc_rom.cc:154:do_switch$5 [31], \$auto$proc_rom.cc:154:do_switch$5 [23], \$auto$proc_rom.cc:154:do_switch$5 [21], \$auto$proc_rom.cc:154:do_switch$5 [17], \$auto$proc_rom.cc:154:do_switch$5 [15], \$auto$proc_rom.cc:154:do_switch$5 [7] } = 6'h00;
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rsp_data, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign req_d = obi_req_i[0];
  assign we_d = obi_req_i[41];
  assign word_addr_d = obi_req_i[46:44];
endmodule
